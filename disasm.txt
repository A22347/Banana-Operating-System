
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9f 78 00 00       	call   c00078bf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 16 02 c0       	mov    eax,0xc00216e8
c0000025:	3d e8 16 02 c0       	cmp    eax,0xc00216e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 16 02 c0       	push   0xc00216e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 16 02 c0       	mov    eax,0xc00216e8
c0000051:	2d e8 16 02 c0       	sub    eax,0xc00216e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 16 02 c0       	push   0xc00216e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 78 e7 01 c0       	mov    ebx,0xc001e778
c0000097:	81 eb 74 e7 01 c0    	sub    ebx,0xc001e774
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 74 e7 01 c0       	mov    esi,0xc001e774
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 16 02 c0       	push   0xc00216e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 e8 16 02 c0       	push   0xc00216e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 3b 3d 01 00       	call   c0013fe8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f9 a0 00 00       	call   c000a3be <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 19 3d 01 00       	call   c0013fe8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 22 42 01 00       	call   c0014510 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 99 48 01 00       	call   c0014b90 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 27 00 01 00       	jmp    c00103a6 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	31 c0                	xor    eax,eax
c00003b0:	5b                   	pop    ebx
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c6:	31 c0                	xor    eax,eax
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 7c 00 00 00    	je     c000046c <memmove+0x9c>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	09 ce                	or     esi,ecx
c0000404:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000407:	89 f0                	mov    eax,esi
c0000409:	83 f9 0c             	cmp    ecx,0xc
c000040c:	0f 97 c1             	seta   cl
c000040f:	84 c8                	test   al,cl
c0000411:	0f 84 89 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000417:	89 e9                	mov    ecx,ebp
c0000419:	09 d9                	or     ecx,ebx
c000041b:	83 e1 03             	and    ecx,0x3
c000041e:	0f 85 7c 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000424:	89 d7                	mov    edi,edx
c0000426:	89 d9                	mov    ecx,ebx
c0000428:	83 e7 fc             	and    edi,0xfffffffc
c000042b:	89 ee                	mov    esi,ebp
c000042d:	01 df                	add    edi,ebx
c000042f:	90                   	nop
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c6 04             	add    esi,0x4
c0000435:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000438:	83 c1 04             	add    ecx,0x4
c000043b:	39 f9                	cmp    ecx,edi
c000043d:	75 f1                	jne    c0000430 <memmove+0x60>
c000043f:	89 d1                	mov    ecx,edx
c0000441:	89 d7                	mov    edi,edx
c0000443:	83 e1 fc             	and    ecx,0xfffffffc
c0000446:	29 cf                	sub    edi,ecx
c0000448:	01 cb                	add    ebx,ecx
c000044a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044e:	39 ca                	cmp    edx,ecx
c0000450:	74 1a                	je     c000046c <memmove+0x9c>
c0000452:	8a 03                	mov    al,BYTE PTR [ebx]
c0000454:	83 ff 01             	cmp    edi,0x1
c0000457:	88 06                	mov    BYTE PTR [esi],al
c0000459:	74 11                	je     c000046c <memmove+0x9c>
c000045b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045e:	83 ff 02             	cmp    edi,0x2
c0000461:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000464:	74 06                	je     c000046c <memmove+0x9c>
c0000466:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000469:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046c:	5b                   	pop    ebx
c000046d:	89 e8                	mov    eax,ebp
c000046f:	5e                   	pop    esi
c0000470:	5f                   	pop    edi
c0000471:	5d                   	pop    ebp
c0000472:	c3                   	ret    
c0000473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 ea                	jbe    c000046c <memmove+0x9c>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e6                	je     c000046c <memmove+0x9c>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb af                	jmp    c000046c <memmove+0x9c>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	53                   	push   ebx
c00004c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ca:	85 d2                	test   edx,edx
c00004cc:	74 1f                	je     c00004ed <memset+0x2d>
c00004ce:	31 c0                	xor    eax,eax
c00004d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004d4:	88 c4                	mov    ah,al
c00004d6:	89 c1                	mov    ecx,eax
c00004d8:	c1 e1 10             	shl    ecx,0x10
c00004db:	09 c8                	or     eax,ecx
c00004dd:	83 fa 04             	cmp    edx,0x4
c00004e0:	73 1e                	jae    c0000500 <memset+0x40>
c00004e2:	85 d2                	test   edx,edx
c00004e4:	74 07                	je     c00004ed <memset+0x2d>
c00004e6:	88 03                	mov    BYTE PTR [ebx],al
c00004e8:	f6 c2 02             	test   dl,0x2
c00004eb:	75 30                	jne    c000051d <memset+0x5d>
c00004ed:	89 d8                	mov    eax,ebx
c00004ef:	5b                   	pop    ebx
c00004f0:	5f                   	pop    edi
c00004f1:	c3                   	ret    
c00004f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000500:	89 03                	mov    DWORD PTR [ebx],eax
c0000502:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000505:	89 d9                	mov    ecx,ebx
c0000507:	83 e7 fc             	and    edi,0xfffffffc
c000050a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000050e:	29 f9                	sub    ecx,edi
c0000510:	01 d1                	add    ecx,edx
c0000512:	c1 e9 02             	shr    ecx,0x2
c0000515:	fc                   	cld    
c0000516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000518:	89 d8                	mov    eax,ebx
c000051a:	5b                   	pop    ebx
c000051b:	5f                   	pop    edi
c000051c:	c3                   	ret    
c000051d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000522:	eb c9                	jmp    c00004ed <memset+0x2d>
c0000524:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000052a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	89 f0                	mov    eax,esi
c0000596:	5b                   	pop    ebx
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005d9:	5b                   	pop    ebx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	88 13                	mov    BYTE PTR [ebx],dl
c0000612:	41                   	inc    ecx
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062f:	85 ff                	test   edi,edi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000635:	8d 47 ff             	lea    eax,[edi-0x1]
c0000638:	8d 4a 01             	lea    ecx,[edx+0x1]
c000063b:	88 1a                	mov    BYTE PTR [edx],bl
c000063d:	84 db                	test   bl,bl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000648:	8d 47 fe             	lea    eax,[edi-0x2]
c000064b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000064e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	47                   	inc    edi
c0000661:	41                   	inc    ecx
c0000662:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	83 f8 04             	cmp    eax,0x4
c0000687:	73 17                	jae    c00006a0 <strncpy+0x80>
c0000689:	85 c0                	test   eax,eax
c000068b:	74 e4                	je     c0000671 <strncpy+0x51>
c000068d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0000690:	a8 02                	test   al,0x2
c0000692:	74 dd                	je     c0000671 <strncpy+0x51>
c0000694:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c000069b:	eb d4                	jmp    c0000671 <strncpy+0x51>
c000069d:	8d 76 00             	lea    esi,[esi+0x0]
c00006a0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006a6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006a9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006b1:	83 e7 fc             	and    edi,0xfffffffc
c00006b4:	29 f9                	sub    ecx,edi
c00006b6:	01 c1                	add    ecx,eax
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	fc                   	cld    
c00006bc:	31 c0                	xor    eax,eax
c00006be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006c0:	89 d0                	mov    eax,edx
c00006c2:	5b                   	pop    ebx
c00006c3:	5e                   	pop    esi
c00006c4:	5f                   	pop    edi
c00006c5:	c3                   	ret    
c00006c6:	8d 76 00             	lea    esi,[esi+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	56                   	push   esi
c00006d1:	53                   	push   ebx
c00006d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006da:	8a 16                	mov    dl,BYTE PTR [esi]
c00006dc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006de:	38 d1                	cmp    cl,dl
c00006e0:	75 1d                	jne    c00006ff <strcmp+0x2f>
c00006e2:	84 c9                	test   cl,cl
c00006e4:	74 2a                	je     c0000710 <strcmp+0x40>
c00006e6:	b8 01 00 00 00       	mov    eax,0x1
c00006eb:	eb 08                	jmp    c00006f5 <strcmp+0x25>
c00006ed:	8d 76 00             	lea    esi,[esi+0x0]
c00006f0:	40                   	inc    eax
c00006f1:	84 d2                	test   dl,dl
c00006f3:	74 1b                	je     c0000710 <strcmp+0x40>
c00006f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00006f8:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c00006fb:	38 ca                	cmp    dl,cl
c00006fd:	74 f1                	je     c00006f0 <strcmp+0x20>
c00006ff:	31 c0                	xor    eax,eax
c0000701:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000707:	88 d0                	mov    al,dl
c0000709:	5b                   	pop    ebx
c000070a:	29 c8                	sub    eax,ecx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	5e                   	pop    esi
c0000714:	c3                   	ret    
c0000715:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strchr>:
c0000720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000724:	8a 10                	mov    dl,BYTE PTR [eax]
c0000726:	84 d2                	test   dl,dl
c0000728:	74 21                	je     c000074b <strchr+0x2b>
c000072a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000072e:	38 ca                	cmp    dl,cl
c0000730:	75 12                	jne    c0000744 <strchr+0x24>
c0000732:	eb 1a                	jmp    c000074e <strchr+0x2e>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000740:	38 ca                	cmp    dl,cl
c0000742:	74 09                	je     c000074d <strchr+0x2d>
c0000744:	40                   	inc    eax
c0000745:	8a 10                	mov    dl,BYTE PTR [eax]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strchr+0x20>
c000074b:	31 c0                	xor    eax,eax
c000074d:	c3                   	ret    
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strncmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000075f:	85 ff                	test   edi,edi
c0000761:	74 2f                	je     c0000792 <strncmp+0x42>
c0000763:	8a 16                	mov    dl,BYTE PTR [esi]
c0000765:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000767:	38 d1                	cmp    cl,dl
c0000769:	75 35                	jne    c00007a0 <strncmp+0x50>
c000076b:	8d 46 01             	lea    eax,[esi+0x1]
c000076e:	84 c9                	test   cl,cl
c0000770:	74 20                	je     c0000792 <strncmp+0x42>
c0000772:	01 fe                	add    esi,edi
c0000774:	eb 17                	jmp    c000078d <strncmp+0x3d>
c0000776:	8d 76 00             	lea    esi,[esi+0x0]
c0000779:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000780:	8a 10                	mov    dl,BYTE PTR [eax]
c0000782:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000784:	38 ca                	cmp    dl,cl
c0000786:	75 18                	jne    c00007a0 <strncmp+0x50>
c0000788:	40                   	inc    eax
c0000789:	84 d2                	test   dl,dl
c000078b:	74 05                	je     c0000792 <strncmp+0x42>
c000078d:	43                   	inc    ebx
c000078e:	39 c6                	cmp    esi,eax
c0000790:	75 ee                	jne    c0000780 <strncmp+0x30>
c0000792:	5b                   	pop    ebx
c0000793:	31 c0                	xor    eax,eax
c0000795:	5e                   	pop    esi
c0000796:	5f                   	pop    edi
c0000797:	c3                   	ret    
c0000798:	90                   	nop
c0000799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007a0:	5b                   	pop    ebx
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007a9:	88 d0                	mov    al,dl
c00007ab:	5e                   	pop    esi
c00007ac:	29 c8                	sub    eax,ecx
c00007ae:	5f                   	pop    edi
c00007af:	c3                   	ret    

c00007b0 <strcat>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ba:	89 c3                	mov    ebx,eax
c00007bc:	eb 04                	jmp    c00007c2 <strcat+0x12>
c00007be:	66 90                	xchg   ax,ax
c00007c0:	89 d3                	mov    ebx,edx
c00007c2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007c9:	75 f5                	jne    c00007c0 <strcat+0x10>
c00007cb:	31 d2                	xor    edx,edx
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]
c00007d0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007d3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007d6:	42                   	inc    edx
c00007d7:	84 c9                	test   cl,cl
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x20>
c00007db:	5b                   	pop    ebx
c00007dc:	5e                   	pop    esi
c00007dd:	c3                   	ret    
c00007de:	66 90                	xchg   ax,ax

c00007e0 <strncat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007ee:	85 f6                	test   esi,esi
c00007f0:	74 2e                	je     c0000820 <strncat+0x40>
c00007f2:	89 c2                	mov    edx,eax
c00007f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000800:	42                   	inc    edx
c0000801:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000805:	75 f9                	jne    c0000800 <strncat+0x20>
c0000807:	01 ce                	add    esi,ecx
c0000809:	eb 0a                	jmp    c0000815 <strncat+0x35>
c000080b:	90                   	nop
c000080c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000810:	39 f1                	cmp    ecx,esi
c0000812:	74 1c                	je     c0000830 <strncat+0x50>
c0000814:	42                   	inc    edx
c0000815:	41                   	inc    ecx
c0000816:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000819:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000081c:	84 db                	test   bl,bl
c000081e:	75 f0                	jne    c0000810 <strncat+0x30>
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    
c0000823:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000830:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000833:	5b                   	pop    ebx
c0000834:	5e                   	pop    esi
c0000835:	c3                   	ret    
c0000836:	8d 76 00             	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000840 <strstr>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084b:	57                   	push   edi
c000084c:	e8 df fc ff ff       	call   c0000530 <strlen>
c0000851:	59                   	pop    ecx
c0000852:	85 c0                	test   eax,eax
c0000854:	74 3a                	je     c0000890 <strstr+0x50>
c0000856:	89 c6                	mov    esi,eax
c0000858:	eb 16                	jmp    c0000870 <strstr+0x30>
c000085a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000860:	56                   	push   esi
c0000861:	57                   	push   edi
c0000862:	53                   	push   ebx
c0000863:	e8 18 fb ff ff       	call   c0000380 <memcmp>
c0000868:	83 c4 0c             	add    esp,0xc
c000086b:	85 c0                	test   eax,eax
c000086d:	74 21                	je     c0000890 <strstr+0x50>
c000086f:	43                   	inc    ebx
c0000870:	53                   	push   ebx
c0000871:	e8 ba fc ff ff       	call   c0000530 <strlen>
c0000876:	5a                   	pop    edx
c0000877:	39 f0                	cmp    eax,esi
c0000879:	73 e5                	jae    c0000860 <strstr+0x20>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	eb 0d                	jmp    c0000890 <strstr+0x50>
c0000883:	90                   	nop
c0000884:	90                   	nop
c0000885:	90                   	nop
c0000886:	90                   	nop
c0000887:	90                   	nop
c0000888:	90                   	nop
c0000889:	90                   	nop
c000088a:	90                   	nop
c000088b:	90                   	nop
c000088c:	90                   	nop
c000088d:	90                   	nop
c000088e:	90                   	nop
c000088f:	90                   	nop
c0000890:	89 d8                	mov    eax,ebx
c0000892:	5b                   	pop    ebx
c0000893:	5e                   	pop    esi
c0000894:	5f                   	pop    edi
c0000895:	c3                   	ret    
c0000896:	8d 76 00             	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008a0 <toupper>:
c00008a0:	31 d2                	xor    edx,edx
c00008a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008a6:	88 c2                	mov    dl,al
c00008a8:	f6 82 80 e7 01 c0 02 	test   BYTE PTR [edx-0x3ffe1880],0x2
c00008af:	74 03                	je     c00008b4 <toupper+0x14>
c00008b1:	83 e8 20             	sub    eax,0x20
c00008b4:	c3                   	ret    
c00008b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <tolower>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 80 e7 01 c0 01 	test   BYTE PTR [edx-0x3ffe1880],0x1
c00008cf:	74 03                	je     c00008d4 <tolower+0x14>
c00008d1:	83 c0 20             	add    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	90                   	nop
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8a 01                	mov    al,BYTE PTR [ecx]
c00008f4:	88 c2                	mov    dl,al
c00008f6:	f6 82 80 e7 01 c0 08 	test   BYTE PTR [edx-0x3ffe1880],0x8
c00008fd:	75 04                	jne    c0000903 <simple_strtoul+0x23>
c00008ff:	3c 09                	cmp    al,0x9
c0000901:	75 0d                	jne    c0000910 <simple_strtoul+0x30>
c0000903:	41                   	inc    ecx
c0000904:	eb ea                	jmp    c00008f0 <simple_strtoul+0x10>
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	3c 2d                	cmp    al,0x2d
c0000912:	0f 84 48 01 00 00    	je     c0000a60 <simple_strtoul+0x180>
c0000918:	3c 2b                	cmp    al,0x2b
c000091a:	0f 84 e0 00 00 00    	je     c0000a00 <simple_strtoul+0x120>
c0000920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000928:	85 f6                	test   esi,esi
c000092a:	0f 85 e1 00 00 00    	jne    c0000a11 <simple_strtoul+0x131>
c0000930:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000933:	80 fa 30             	cmp    dl,0x30
c0000936:	0f 84 75 01 00 00    	je     c0000ab1 <simple_strtoul+0x1d1>
c000093c:	be 0a 00 00 00       	mov    esi,0xa
c0000941:	84 d2                	test   dl,dl
c0000943:	0f 84 9f 01 00 00    	je     c0000ae8 <simple_strtoul+0x208>
c0000949:	31 ed                	xor    ebp,ebp
c000094b:	31 ff                	xor    edi,edi
c000094d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000954:	eb 35                	jmp    c000098b <simple_strtoul+0xab>
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000960:	83 eb 30             	sub    ebx,0x30
c0000963:	39 f3                	cmp    ebx,esi
c0000965:	73 59                	jae    c00009c0 <simple_strtoul+0xe0>
c0000967:	31 d2                	xor    edx,edx
c0000969:	89 d8                	mov    eax,ebx
c000096b:	f7 d0                	not    eax
c000096d:	f7 f6                	div    esi
c000096f:	39 f8                	cmp    eax,edi
c0000971:	0f 82 c9 00 00 00    	jb     c0000a40 <simple_strtoul+0x160>
c0000977:	0f af fe             	imul   edi,esi
c000097a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000981:	01 df                	add    edi,ebx
c0000983:	41                   	inc    ecx
c0000984:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 35                	je     c00009c0 <simple_strtoul+0xe0>
c000098b:	31 db                	xor    ebx,ebx
c000098d:	88 d3                	mov    bl,dl
c000098f:	f6 83 80 e7 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1880],0x4
c0000996:	75 c8                	jne    c0000960 <simple_strtoul+0x80>
c0000998:	52                   	push   edx
c0000999:	e8 02 ff ff ff       	call   c00008a0 <toupper>
c000099e:	31 d2                	xor    edx,edx
c00009a0:	5b                   	pop    ebx
c00009a1:	88 c2                	mov    dl,al
c00009a3:	f6 82 80 e7 01 c0 01 	test   BYTE PTR [edx-0x3ffe1880],0x1
c00009aa:	74 14                	je     c00009c0 <simple_strtoul+0xe0>
c00009ac:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009af:	39 f3                	cmp    ebx,esi
c00009b1:	72 b4                	jb     c0000967 <simple_strtoul+0x87>
c00009b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c4:	85 c0                	test   eax,eax
c00009c6:	74 18                	je     c00009e0 <simple_strtoul+0x100>
c00009c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009cb:	09 f8                	or     eax,edi
c00009cd:	0f 85 7d 00 00 00    	jne    c0000a50 <simple_strtoul+0x170>
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009db:	31 ff                	xor    edi,edi
c00009dd:	89 30                	mov    DWORD PTR [eax],esi
c00009df:	90                   	nop
c00009e0:	4d                   	dec    ebp
c00009e1:	75 05                	jne    c00009e8 <simple_strtoul+0x108>
c00009e3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009e8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009ed:	75 02                	jne    c00009f1 <simple_strtoul+0x111>
c00009ef:	f7 df                	neg    edi
c00009f1:	83 c4 08             	add    esp,0x8
c00009f4:	89 f8                	mov    eax,edi
c00009f6:	5b                   	pop    ebx
c00009f7:	5e                   	pop    esi
c00009f8:	5f                   	pop    edi
c00009f9:	5d                   	pop    ebp
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a09:	85 f6                	test   esi,esi
c0000a0b:	0f 84 1f ff ff ff    	je     c0000930 <simple_strtoul+0x50>
c0000a11:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a14:	83 f8 22             	cmp    eax,0x22
c0000a17:	77 7b                	ja     c0000a94 <simple_strtoul+0x1b4>
c0000a19:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a1c:	83 fe 08             	cmp    esi,0x8
c0000a1f:	0f 84 b3 00 00 00    	je     c0000ad8 <simple_strtoul+0x1f8>
c0000a25:	83 fe 10             	cmp    esi,0x10
c0000a28:	0f 85 13 ff ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000a2e:	80 fa 30             	cmp    dl,0x30
c0000a31:	74 3b                	je     c0000a6e <simple_strtoul+0x18e>
c0000a33:	be 10 00 00 00       	mov    esi,0x10
c0000a38:	e9 04 ff ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a40:	bd 01 00 00 00       	mov    ebp,0x1
c0000a45:	31 ff                	xor    edi,edi
c0000a47:	e9 37 ff ff ff       	jmp    c0000983 <simple_strtoul+0xa3>
c0000a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a54:	89 08                	mov    DWORD PTR [eax],ecx
c0000a56:	eb 88                	jmp    c00009e0 <simple_strtoul+0x100>
c0000a58:	90                   	nop
c0000a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a60:	41                   	inc    ecx
c0000a61:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a69:	e9 ba fe ff ff       	jmp    c0000928 <simple_strtoul+0x48>
c0000a6e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a72:	88 04 24             	mov    BYTE PTR [esp],al
c0000a75:	50                   	push   eax
c0000a76:	e8 45 fe ff ff       	call   c00008c0 <tolower>
c0000a7b:	5e                   	pop    esi
c0000a7c:	83 f8 78             	cmp    eax,0x78
c0000a7f:	0f 84 88 00 00 00    	je     c0000b0d <simple_strtoul+0x22d>
c0000a85:	41                   	inc    ecx
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a8f:	e9 ad fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000a98:	85 ff                	test   edi,edi
c0000a9a:	74 5e                	je     c0000afa <simple_strtoul+0x21a>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	85 c9                	test   ecx,ecx
c0000aa2:	75 50                	jne    c0000af4 <simple_strtoul+0x214>
c0000aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aaa:	31 ff                	xor    edi,edi
c0000aac:	e9 37 ff ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000ab1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab8:	50                   	push   eax
c0000ab9:	e8 02 fe ff ff       	call   c00008c0 <tolower>
c0000abe:	5d                   	pop    ebp
c0000abf:	83 f8 78             	cmp    eax,0x78
c0000ac2:	74 3d                	je     c0000b01 <simple_strtoul+0x221>
c0000ac4:	41                   	inc    ecx
c0000ac5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ac9:	80 fa 30             	cmp    dl,0x30
c0000acc:	74 13                	je     c0000ae1 <simple_strtoul+0x201>
c0000ace:	be 08 00 00 00       	mov    esi,0x8
c0000ad3:	e9 69 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000ad8:	80 fa 30             	cmp    dl,0x30
c0000adb:	0f 85 60 fe ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000ae1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000ae5:	41                   	inc    ecx
c0000ae6:	eb e6                	jmp    c0000ace <simple_strtoul+0x1ee>
c0000ae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	74 0a                	je     c0000afa <simple_strtoul+0x21a>
c0000af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	89 30                	mov    DWORD PTR [eax],esi
c0000afa:	31 ff                	xor    edi,edi
c0000afc:	e9 e7 fe ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000b01:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b05:	83 c1 02             	add    ecx,0x2
c0000b08:	e9 21 ff ff ff       	jmp    c0000a2e <simple_strtoul+0x14e>
c0000b0d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b11:	be 10 00 00 00       	mov    esi,0x10
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>

c0000b1e <largebin_index>:
c0000b1e:	89 c2                	mov    edx,eax
c0000b20:	c1 ea 08             	shr    edx,0x8
c0000b23:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b29:	77 10                	ja     c0000b3b <largebin_index+0x1d>
c0000b2b:	0f bd d2             	bsr    edx,edx
c0000b2e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b31:	d3 e8                	shr    eax,cl
c0000b33:	83 e0 03             	and    eax,0x3
c0000b36:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b3a:	c3                   	ret    
c0000b3b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b40:	c3                   	ret    

c0000b41 <malloc_init_state>:
c0000b41:	53                   	push   ebx
c0000b42:	8d 50 34             	lea    edx,[eax+0x34]
c0000b45:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b4b:	89 d1                	mov    ecx,edx
c0000b4d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b50:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b53:	83 c2 08             	add    edx,0x8
c0000b56:	39 da                	cmp    edx,ebx
c0000b58:	75 f3                	jne    c0000b4d <malloc_init_state+0xc>
c0000b5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b5c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b66:	83 e2 03             	and    edx,0x3
c0000b69:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b73:	83 ca 48             	or     edx,0x48
c0000b76:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b80:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b8a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000b91:	89 10                	mov    DWORD PTR [eax],edx
c0000b93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000b96:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ba0:	5b                   	pop    ebx
c0000ba1:	c3                   	ret    

c0000ba2 <malloc_consolidate>:
c0000ba2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ba4:	85 d2                	test   edx,edx
c0000ba6:	0f 84 d8 00 00 00    	je     c0000c84 <malloc_consolidate+0xe2>
c0000bac:	55                   	push   ebp
c0000bad:	83 e2 fd             	and    edx,0xfffffffd
c0000bb0:	57                   	push   edi
c0000bb1:	89 c5                	mov    ebp,eax
c0000bb3:	56                   	push   esi
c0000bb4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bb7:	53                   	push   ebx
c0000bb8:	83 ec 10             	sub    esp,0x10
c0000bbb:	89 10                	mov    DWORD PTR [eax],edx
c0000bbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bc1:	c1 ea 03             	shr    edx,0x3
c0000bc4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bc8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bcf:	85 d2                	test   edx,edx
c0000bd1:	0f 84 98 00 00 00    	je     c0000c6f <malloc_consolidate+0xcd>
c0000bd7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bde:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000be1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000be8:	89 f9                	mov    ecx,edi
c0000bea:	83 e1 fe             	and    ecx,0xfffffffe
c0000bed:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000bf0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000bf3:	83 e3 fc             	and    ebx,0xfffffffc
c0000bf6:	83 e7 01             	and    edi,0x1
c0000bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000bfc:	75 14                	jne    c0000c12 <malloc_consolidate+0x70>
c0000bfe:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c00:	29 fa                	sub    edx,edi
c0000c02:	01 f9                	add    ecx,edi
c0000c04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c07:	89 fb                	mov    ebx,edi
c0000c09:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c0c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c0f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c12:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c15:	74 40                	je     c0000c57 <malloc_consolidate+0xb5>
c0000c17:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c1a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c1d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c21:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c24:	83 e7 01             	and    edi,0x1
c0000c27:	75 0e                	jne    c0000c37 <malloc_consolidate+0x95>
c0000c29:	01 d9                	add    ecx,ebx
c0000c2b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c2e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c31:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c34:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c37:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c3a:	89 ce                	mov    esi,ecx
c0000c3c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c3f:	83 ce 01             	or     esi,0x1
c0000c42:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c45:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c48:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c4b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c4f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c52:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c55:	eb 0c                	jmp    c0000c63 <malloc_consolidate+0xc1>
c0000c57:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c5a:	83 c9 01             	or     ecx,0x1
c0000c5d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c67:	85 d2                	test   edx,edx
c0000c69:	0f 85 6f ff ff ff    	jne    c0000bde <malloc_consolidate+0x3c>
c0000c6f:	83 c5 04             	add    ebp,0x4
c0000c72:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c76:	0f 85 50 ff ff ff    	jne    c0000bcc <malloc_consolidate+0x2a>
c0000c7c:	83 c4 10             	add    esp,0x10
c0000c7f:	5b                   	pop    ebx
c0000c80:	5e                   	pop    esi
c0000c81:	5f                   	pop    edi
c0000c82:	5d                   	pop    ebp
c0000c83:	c3                   	ret    
c0000c84:	e9 b8 fe ff ff       	jmp    c0000b41 <malloc_init_state>

c0000c89 <dlfree>:
c0000c89:	57                   	push   edi
c0000c8a:	56                   	push   esi
c0000c8b:	53                   	push   ebx
c0000c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000c90:	85 db                	test   ebx,ebx
c0000c92:	0f 84 e2 00 00 00    	je     c0000d7a <dlfree+0xf1>
c0000c98:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000c9b:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000ca1:	89 f0                	mov    eax,esi
c0000ca3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ca6:	83 e0 fc             	and    eax,0xfffffffc
c0000ca9:	39 c1                	cmp    ecx,eax
c0000cab:	72 24                	jb     c0000cd1 <dlfree+0x48>
c0000cad:	83 c9 03             	or     ecx,0x3
c0000cb0:	c1 e8 03             	shr    eax,0x3
c0000cb3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cb9:	83 e8 02             	sub    eax,0x2
c0000cbc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cc3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cc5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ccc:	e9 a9 00 00 00       	jmp    c0000d7a <dlfree+0xf1>
c0000cd1:	83 e6 02             	and    esi,0x2
c0000cd4:	0f 85 a0 00 00 00    	jne    c0000d7a <dlfree+0xf1>
c0000cda:	83 c9 01             	or     ecx,0x1
c0000cdd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ce0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000ce6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ce9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cec:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000cf0:	75 13                	jne    c0000d05 <dlfree+0x7c>
c0000cf2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000cf5:	29 da                	sub    edx,ebx
c0000cf7:	01 d8                	add    eax,ebx
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000cff:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d02:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d05:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d0b:	74 40                	je     c0000d4d <dlfree+0xc4>
c0000d0d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d11:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d14:	80 e3 01             	and    bl,0x1
c0000d17:	75 0e                	jne    c0000d27 <dlfree+0x9e>
c0000d19:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d1c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d1f:	01 c8                	add    eax,ecx
c0000d21:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d24:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d27:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d2d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d34:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d37:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d3d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d40:	89 c1                	mov    ecx,eax
c0000d42:	83 c9 01             	or     ecx,0x1
c0000d45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d48:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d4b:	eb 10                	jmp    c0000d5d <dlfree+0xd4>
c0000d4d:	01 c8                	add    eax,ecx
c0000d4f:	89 c1                	mov    ecx,eax
c0000d51:	83 c9 01             	or     ecx,0x1
c0000d54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d57:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d5d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d62:	76 16                	jbe    c0000d7a <dlfree+0xf1>
c0000d64:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d6b:	74 0d                	je     c0000d7a <dlfree+0xf1>
c0000d6d:	5b                   	pop    ebx
c0000d6e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d73:	5e                   	pop    esi
c0000d74:	5f                   	pop    edi
c0000d75:	e9 28 fe ff ff       	jmp    c0000ba2 <malloc_consolidate>
c0000d7a:	5b                   	pop    ebx
c0000d7b:	5e                   	pop    esi
c0000d7c:	5f                   	pop    edi
c0000d7d:	c3                   	ret    

c0000d7e <sYSMALLOc>:
c0000d7e:	55                   	push   ebp
c0000d7f:	57                   	push   edi
c0000d80:	56                   	push   esi
c0000d81:	53                   	push   ebx
c0000d82:	89 d3                	mov    ebx,edx
c0000d84:	83 ec 2c             	sub    esp,0x2c
c0000d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d8b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000d91:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000d94:	8d 42 ff             	lea    eax,[edx-0x1]
c0000d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000d9b:	74 1f                	je     c0000dbc <sYSMALLOc+0x3e>
c0000d9d:	89 d8                	mov    eax,ebx
c0000d9f:	e8 fe fd ff ff       	call   c0000ba2 <malloc_consolidate>
c0000da4:	83 ec 0c             	sub    esp,0xc
c0000da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dab:	83 e8 07             	sub    eax,0x7
c0000dae:	50                   	push   eax
c0000daf:	e8 30 02 00 00       	call   c0000fe4 <dlmalloc>
c0000db4:	83 c4 10             	add    esp,0x10
c0000db7:	e9 20 02 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000dbc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dbf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dc8:	83 e0 fc             	and    eax,0xfffffffc
c0000dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000dd3:	83 c0 10             	add    eax,0x10
c0000dd6:	01 c1                	add    ecx,eax
c0000dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ddc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000de3:	74 04                	je     c0000de9 <sYSMALLOc+0x6b>
c0000de5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000de9:	f7 da                	neg    edx
c0000deb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000df3:	21 d1                	and    ecx,edx
c0000df5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000df9:	7f 07                	jg     c0000e02 <sYSMALLOc+0x84>
c0000dfb:	31 c0                	xor    eax,eax
c0000dfd:	e9 da 01 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000e02:	83 ec 0c             	sub    esp,0xc
c0000e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e09:	e8 2e 69 00 00       	call   c000773c <sbrk>
c0000e0e:	83 c4 10             	add    esp,0x10
c0000e11:	89 c6                	mov    esi,eax
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	74 e3                	je     c0000dfb <sYSMALLOc+0x7d>
c0000e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e20:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e23:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e29:	39 f1                	cmp    ecx,esi
c0000e2b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e31:	75 13                	jne    c0000e46 <sYSMALLOc+0xc8>
c0000e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e3b:	83 c8 01             	or     eax,0x1
c0000e3e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e41:	e9 3e 01 00 00       	jmp    c0000f84 <sYSMALLOc+0x206>
c0000e46:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e4c:	88 d0                	mov    al,dl
c0000e4e:	83 e0 01             	and    eax,0x1
c0000e51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e5a:	0f 95 c0             	setne  al
c0000e5d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e61:	39 f1                	cmp    ecx,esi
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0xf9>
c0000e65:	84 c0                	test   al,al
c0000e67:	74 0e                	je     c0000e77 <sYSMALLOc+0xf9>
c0000e69:	83 e2 fe             	and    edx,0xfffffffe
c0000e6c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e72:	e9 83 00 00 00       	jmp    c0000efa <sYSMALLOc+0x17c>
c0000e77:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e7c:	74 7c                	je     c0000efa <sYSMALLOc+0x17c>
c0000e7e:	84 c0                	test   al,al
c0000e80:	74 0c                	je     c0000e8e <sYSMALLOc+0x110>
c0000e82:	89 f0                	mov    eax,esi
c0000e84:	29 c8                	sub    eax,ecx
c0000e86:	01 e8                	add    eax,ebp
c0000e88:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e8e:	89 f2                	mov    edx,esi
c0000e90:	83 e2 07             	and    edx,0x7
c0000e93:	74 0c                	je     c0000ea1 <sYSMALLOc+0x123>
c0000e95:	b8 08 00 00 00       	mov    eax,0x8
c0000e9a:	29 d0                	sub    eax,edx
c0000e9c:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000e9f:	eb 04                	jmp    c0000ea5 <sYSMALLOc+0x127>
c0000ea1:	89 f5                	mov    ebp,esi
c0000ea3:	31 c0                	xor    eax,eax
c0000ea5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ea9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000eb1:	01 c1                	add    ecx,eax
c0000eb3:	83 ec 0c             	sub    esp,0xc
c0000eb6:	01 f1                	add    ecx,esi
c0000eb8:	01 ca                	add    edx,ecx
c0000eba:	29 c8                	sub    eax,ecx
c0000ebc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ec0:	01 c2                	add    edx,eax
c0000ec2:	52                   	push   edx
c0000ec3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ec7:	e8 70 68 00 00       	call   c000773c <sbrk>
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed6:	75 0f                	jne    c0000ee7 <sYSMALLOc+0x169>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 5a 68 00 00       	call   c000773c <sbrk>
c0000ee2:	83 c4 10             	add    esp,0x10
c0000ee5:	eb 30                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000ee7:	39 c6                	cmp    esi,eax
c0000ee9:	76 33                	jbe    c0000f1e <sYSMALLOc+0x1a0>
c0000eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eef:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000ef6:	01 f0                	add    eax,esi
c0000ef8:	eb 1d                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000efa:	83 ec 0c             	sub    esp,0xc
c0000efd:	89 f5                	mov    ebp,esi
c0000eff:	6a 00                	push   0x0
c0000f01:	e8 36 68 00 00       	call   c000773c <sbrk>
c0000f06:	89 c2                	mov    edx,eax
c0000f08:	29 f2                	sub    edx,esi
c0000f0a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f0e:	83 c4 10             	add    esp,0x10
c0000f11:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f17:	31 d2                	xor    edx,edx
c0000f19:	83 f8 ff             	cmp    eax,0xffffffff
c0000f1c:	74 66                	je     c0000f84 <sYSMALLOc+0x206>
c0000f1e:	29 e8                	sub    eax,ebp
c0000f20:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f23:	01 d0                	add    eax,edx
c0000f25:	83 c8 01             	or     eax,0x1
c0000f28:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f36:	74 4c                	je     c0000f84 <sYSMALLOc+0x206>
c0000f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f3c:	83 e8 0c             	sub    eax,0xc
c0000f3f:	83 e0 f8             	and    eax,0xfffffff8
c0000f42:	89 c2                	mov    edx,eax
c0000f44:	83 ca 01             	or     edx,0x1
c0000f47:	83 f8 0f             	cmp    eax,0xf
c0000f4a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f4d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f55:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f5d:	76 25                	jbe    c0000f84 <sYSMALLOc+0x206>
c0000f5f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f65:	83 ec 0c             	sub    esp,0xc
c0000f68:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f72:	83 c7 08             	add    edi,0x8
c0000f75:	57                   	push   edi
c0000f76:	e8 0e fd ff ff       	call   c0000c89 <dlfree>
c0000f7b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f81:	83 c4 10             	add    esp,0x10
c0000f84:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f8a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f90:	73 06                	jae    c0000f98 <sYSMALLOc+0x21a>
c0000f92:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f98:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f9e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fa4:	73 06                	jae    c0000fac <sYSMALLOc+0x22e>
c0000fa6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fb2:	83 e2 fc             	and    edx,0xfffffffc
c0000fb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fb9:	0f 82 3c fe ff ff    	jb     c0000dfb <sYSMALLOc+0x7d>
c0000fbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fc3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fc6:	29 fa                	sub    edx,edi
c0000fc8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fcb:	83 ca 01             	or     edx,0x1
c0000fce:	89 fb                	mov    ebx,edi
c0000fd0:	83 c0 08             	add    eax,0x8
c0000fd3:	83 cb 01             	or     ebx,0x1
c0000fd6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fd9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fdc:	83 c4 2c             	add    esp,0x2c
c0000fdf:	5b                   	pop    ebx
c0000fe0:	5e                   	pop    esi
c0000fe1:	5f                   	pop    edi
c0000fe2:	5d                   	pop    ebp
c0000fe3:	c3                   	ret    

c0000fe4 <dlmalloc>:
c0000fe4:	55                   	push   ebp
c0000fe5:	57                   	push   edi
c0000fe6:	56                   	push   esi
c0000fe7:	53                   	push   ebx
c0000fe8:	83 ec 1c             	sub    esp,0x1c
c0000feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fef:	83 f8 df             	cmp    eax,0xffffffdf
c0000ff2:	0f 87 70 03 00 00    	ja     c0001368 <dlmalloc+0x384>
c0000ff8:	83 c0 0b             	add    eax,0xb
c0000ffb:	be 10 00 00 00       	mov    esi,0x10
c0001000:	83 f8 0f             	cmp    eax,0xf
c0001003:	76 05                	jbe    c000100a <dlmalloc+0x26>
c0001005:	83 e0 f8             	and    eax,0xfffffff8
c0001008:	89 c6                	mov    esi,eax
c000100a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001010:	f7 c7 01 00 00 00    	test   edi,0x1
c0001016:	75 17                	jne    c000102f <dlmalloc+0x4b>
c0001018:	85 ff                	test   edi,edi
c000101a:	0f 85 05 03 00 00    	jne    c0001325 <dlmalloc+0x341>
c0001020:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001025:	e8 78 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c000102a:	e9 f6 02 00 00       	jmp    c0001325 <dlmalloc+0x341>
c000102f:	39 f7                	cmp    edi,esi
c0001031:	72 1f                	jb     c0001052 <dlmalloc+0x6e>
c0001033:	89 f2                	mov    edx,esi
c0001035:	c1 ea 03             	shr    edx,0x3
c0001038:	83 ea 02             	sub    edx,0x2
c000103b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001042:	85 c0                	test   eax,eax
c0001044:	74 0c                	je     c0001052 <dlmalloc+0x6e>
c0001046:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001049:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001050:	eb 30                	jmp    c0001082 <dlmalloc+0x9e>
c0001052:	89 f0                	mov    eax,esi
c0001054:	81 fe ff 00 00 00    	cmp    esi,0xff
c000105a:	77 2e                	ja     c000108a <dlmalloc+0xa6>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000106a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000106d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001070:	39 c3                	cmp    ebx,eax
c0001072:	74 2e                	je     c00010a2 <dlmalloc+0xbe>
c0001074:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001077:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000107c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000107f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001082:	83 c0 08             	add    eax,0x8
c0001085:	e9 e0 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c000108a:	e8 8f fa ff ff       	call   c0000b1e <largebin_index>
c000108f:	83 e7 02             	and    edi,0x2
c0001092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001096:	74 0a                	je     c00010a2 <dlmalloc+0xbe>
c0001098:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000109d:	e8 00 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c00010a2:	8d 46 10             	lea    eax,[esi+0x10]
c00010a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010a9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010af:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010b5:	0f 84 13 01 00 00    	je     c00011ce <dlmalloc+0x1ea>
c00010bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010c1:	83 e7 fc             	and    edi,0xfffffffc
c00010c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ca:	77 4c                	ja     c0001118 <dlmalloc+0x134>
c00010cc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010d1:	75 45                	jne    c0001118 <dlmalloc+0x134>
c00010d3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010d9:	75 3d                	jne    c0001118 <dlmalloc+0x134>
c00010db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010df:	73 37                	jae    c0001118 <dlmalloc+0x134>
c00010e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010e4:	89 fa                	mov    edx,edi
c00010e6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010eb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c00010f0:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c00010f5:	29 f2                	sub    edx,esi
c00010f7:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c00010fe:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001105:	83 ce 01             	or     esi,0x1
c0001108:	89 d1                	mov    ecx,edx
c000110a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000110d:	83 c9 01             	or     ecx,0x1
c0001110:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001113:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001116:	eb 15                	jmp    c000112d <dlmalloc+0x149>
c0001118:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000111d:	39 fe                	cmp    esi,edi
c000111f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001126:	75 0d                	jne    c0001135 <dlmalloc+0x151>
c0001128:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000112d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001130:	e9 35 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001135:	89 f8                	mov    eax,edi
c0001137:	81 ff ff 00 00 00    	cmp    edi,0xff
c000113d:	77 19                	ja     c0001158 <dlmalloc+0x174>
c000113f:	c1 e8 03             	shr    eax,0x3
c0001142:	8d 14 00             	lea    edx,[eax+eax*1]
c0001145:	83 c2 0d             	add    edx,0xd
c0001148:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000114f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001156:	eb 46                	jmp    c000119e <dlmalloc+0x1ba>
c0001158:	e8 c1 f9 ff ff       	call   c0000b1e <largebin_index>
c000115d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001160:	83 c2 0d             	add    edx,0xd
c0001163:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000116a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001171:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001174:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001178:	89 d5                	mov    ebp,edx
c000117a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000117e:	74 1e                	je     c000119e <dlmalloc+0x1ba>
c0001180:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001183:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001186:	77 12                	ja     c000119a <dlmalloc+0x1b6>
c0001188:	83 cf 01             	or     edi,0x1
c000118b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000118e:	76 05                	jbe    c0001195 <dlmalloc+0x1b1>
c0001190:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001193:	eb f6                	jmp    c000118b <dlmalloc+0x1a7>
c0001195:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001198:	eb 04                	jmp    c000119e <dlmalloc+0x1ba>
c000119a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000119e:	89 c7                	mov    edi,eax
c00011a0:	88 c1                	mov    cl,al
c00011a2:	c1 ff 05             	sar    edi,0x5
c00011a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011a9:	bf 01 00 00 00       	mov    edi,0x1
c00011ae:	d3 e7                	shl    edi,cl
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011b6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011c9:	e9 db fe ff ff       	jmp    c00010a9 <dlmalloc+0xc5>
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	76 78                	jbe    c000124e <dlmalloc+0x26a>
c00011d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011da:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011e1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	74 63                	je     c000124e <dlmalloc+0x26a>
c00011eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00011f1:	83 e3 fc             	and    ebx,0xfffffffc
c00011f4:	39 de                	cmp    esi,ebx
c00011f6:	77 52                	ja     c000124a <dlmalloc+0x266>
c00011f8:	89 df                	mov    edi,ebx
c00011fa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00011fd:	29 f7                	sub    edi,esi
c00011ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001202:	01 d3                	add    ebx,edx
c0001204:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001207:	83 ff 0f             	cmp    edi,0xf
c000120a:	8d 42 08             	lea    eax,[edx+0x8]
c000120d:	77 09                	ja     c0001218 <dlmalloc+0x234>
c000120f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001213:	e9 52 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001218:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000121b:	83 ce 01             	or     esi,0x1
c000121e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001224:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000122a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001231:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001238:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000123b:	89 fa                	mov    edx,edi
c000123d:	83 ca 01             	or     edx,0x1
c0001240:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001243:	89 3b                	mov    DWORD PTR [ebx],edi
c0001245:	e9 20 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c000124a:	89 c2                	mov    edx,eax
c000124c:	eb 99                	jmp    c00011e7 <dlmalloc+0x203>
c000124e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001252:	b8 01 00 00 00       	mov    eax,0x1
c0001257:	41                   	inc    ecx
c0001258:	89 cb                	mov    ebx,ecx
c000125a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001261:	c1 eb 05             	shr    ebx,0x5
c0001264:	d3 e0                	shl    eax,cl
c0001266:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000126d:	39 f8                	cmp    eax,edi
c000126f:	77 04                	ja     c0001275 <dlmalloc+0x291>
c0001271:	85 c0                	test   eax,eax
c0001273:	75 26                	jne    c000129b <dlmalloc+0x2b7>
c0001275:	43                   	inc    ebx
c0001276:	83 fb 02             	cmp    ebx,0x2
c0001279:	0f 87 a6 00 00 00    	ja     c0001325 <dlmalloc+0x341>
c000127f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001286:	85 ff                	test   edi,edi
c0001288:	74 eb                	je     c0001275 <dlmalloc+0x291>
c000128a:	89 d8                	mov    eax,ebx
c000128c:	c1 e0 06             	shl    eax,0x6
c000128f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c0001296:	b8 01 00 00 00       	mov    eax,0x1
c000129b:	85 f8                	test   eax,edi
c000129d:	75 07                	jne    c00012a6 <dlmalloc+0x2c2>
c000129f:	83 c2 08             	add    edx,0x8
c00012a2:	01 c0                	add    eax,eax
c00012a4:	eb f5                	jmp    c000129b <dlmalloc+0x2b7>
c00012a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012a9:	39 ca                	cmp    edx,ecx
c00012ab:	75 14                	jne    c00012c1 <dlmalloc+0x2dd>
c00012ad:	89 c1                	mov    ecx,eax
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	f7 d1                	not    ecx
c00012b4:	01 c0                	add    eax,eax
c00012b6:	21 cf                	and    edi,ecx
c00012b8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012bf:	eb ac                	jmp    c000126d <dlmalloc+0x289>
c00012c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012c7:	83 e0 fc             	and    eax,0xfffffffc
c00012ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012cd:	89 c3                	mov    ebx,eax
c00012cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012d2:	29 f3                	sub    ebx,esi
c00012d4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012d7:	83 fb 0f             	cmp    ebx,0xf
c00012da:	8d 41 08             	lea    eax,[ecx+0x8]
c00012dd:	77 09                	ja     c00012e8 <dlmalloc+0x304>
c00012df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012e3:	e9 82 00 00 00       	jmp    c000136a <dlmalloc+0x386>
c00012e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012f1:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c00012f7:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c00012fd:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001304:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000130b:	77 06                	ja     c0001313 <dlmalloc+0x32f>
c000130d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001319:	89 d9                	mov    ecx,ebx
c000131b:	83 c9 01             	or     ecx,0x1
c000131e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001321:	89 1a                	mov    DWORD PTR [edx],ebx
c0001323:	eb 45                	jmp    c000136a <dlmalloc+0x386>
c0001325:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000132a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000132d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001330:	83 e2 fc             	and    edx,0xfffffffc
c0001333:	39 d1                	cmp    ecx,edx
c0001335:	77 1e                	ja     c0001355 <dlmalloc+0x371>
c0001337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000133a:	89 f3                	mov    ebx,esi
c000133c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001342:	83 cb 01             	or     ebx,0x1
c0001345:	29 f2                	sub    edx,esi
c0001347:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000134a:	83 ca 01             	or     edx,0x1
c000134d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001350:	e9 2d fd ff ff       	jmp    c0001082 <dlmalloc+0x9e>
c0001355:	83 c4 1c             	add    esp,0x1c
c0001358:	89 f0                	mov    eax,esi
c000135a:	5b                   	pop    ebx
c000135b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001360:	5e                   	pop    esi
c0001361:	5f                   	pop    edi
c0001362:	5d                   	pop    ebp
c0001363:	e9 16 fa ff ff       	jmp    c0000d7e <sYSMALLOc>
c0001368:	31 c0                	xor    eax,eax
c000136a:	83 c4 1c             	add    esp,0x1c
c000136d:	5b                   	pop    ebx
c000136e:	5e                   	pop    esi
c000136f:	5f                   	pop    edi
c0001370:	5d                   	pop    ebp
c0001371:	c3                   	ret    

c0001372 <iALLOc>:
c0001372:	55                   	push   ebp
c0001373:	89 c5                	mov    ebp,eax
c0001375:	57                   	push   edi
c0001376:	56                   	push   esi
c0001377:	53                   	push   ebx
c0001378:	83 ec 2c             	sub    esp,0x2c
c000137b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000137f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001387:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000138e:	75 12                	jne    c00013a2 <iALLOc+0x30>
c0001390:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001394:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001399:	e8 04 f8 ff ff       	call   c0000ba2 <malloc_consolidate>
c000139e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013a7:	74 12                	je     c00013bb <iALLOc+0x49>
c00013a9:	85 ed                	test   ebp,ebp
c00013ab:	0f 84 64 01 00 00    	je     c0001515 <iALLOc+0x1a3>
c00013b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013b9:	eb 33                	jmp    c00013ee <iALLOc+0x7c>
c00013bb:	85 ed                	test   ebp,ebp
c00013bd:	75 14                	jne    c00013d3 <iALLOc+0x61>
c00013bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013c7:	83 c4 2c             	add    esp,0x2c
c00013ca:	5b                   	pop    ebx
c00013cb:	5e                   	pop    esi
c00013cc:	5f                   	pop    edi
c00013cd:	5d                   	pop    ebp
c00013ce:	e9 11 fc ff ff       	jmp    c0000fe4 <dlmalloc>
c00013d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013e2:	83 f8 0f             	cmp    eax,0xf
c00013e5:	76 07                	jbe    c00013ee <iALLOc+0x7c>
c00013e7:	83 e0 f8             	and    eax,0xfffffff8
c00013ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00013f3:	75 09                	jne    c00013fe <iALLOc+0x8c>
c00013f5:	89 d0                	mov    eax,edx
c00013f7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00013fa:	31 f6                	xor    esi,esi
c00013fc:	eb 3b                	jmp    c0001439 <iALLOc+0xc7>
c00013fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001400:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001408:	83 c0 0b             	add    eax,0xb
c000140b:	83 f8 0f             	cmp    eax,0xf
c000140e:	76 07                	jbe    c0001417 <iALLOc+0xa5>
c0001410:	83 e0 f8             	and    eax,0xfffffff8
c0001413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000141b:	0f af f5             	imul   esi,ebp
c000141e:	eb 25                	jmp    c0001445 <iALLOc+0xd3>
c0001420:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001422:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001425:	bb 10 00 00 00       	mov    ebx,0x10
c000142a:	83 f9 0f             	cmp    ecx,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0xc2>
c000142f:	83 e1 f8             	and    ecx,0xfffffff8
c0001432:	89 cb                	mov    ebx,ecx
c0001434:	01 de                	add    esi,ebx
c0001436:	83 c0 04             	add    eax,0x4
c0001439:	39 c7                	cmp    edi,eax
c000143b:	75 e3                	jne    c0001420 <iALLOc+0xae>
c000143d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001445:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001449:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000144f:	83 ec 0c             	sub    esp,0xc
c0001452:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000145c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001460:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001464:	50                   	push   eax
c0001465:	e8 7a fb ff ff       	call   c0000fe4 <dlmalloc>
c000146a:	83 c4 10             	add    esp,0x10
c000146d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001473:	85 c0                	test   eax,eax
c0001475:	0f 84 92 00 00 00    	je     c000150d <iALLOc+0x19b>
c000147b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000147e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001481:	83 e3 fc             	and    ebx,0xfffffffc
c0001484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001488:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000148d:	74 1e                	je     c00014ad <iALLOc+0x13b>
c000148f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001493:	89 d9                	mov    ecx,ebx
c0001495:	52                   	push   edx
c0001496:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000149a:	83 e9 04             	sub    ecx,0x4
c000149d:	51                   	push   ecx
c000149e:	6a 00                	push   0x0
c00014a0:	50                   	push   eax
c00014a1:	e8 1a f0 ff ff       	call   c00004c0 <memset>
c00014a6:	83 c4 10             	add    esp,0x10
c00014a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	75 14                	jne    c00014c8 <iALLOc+0x156>
c00014b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014b7:	29 f3                	sub    ebx,esi
c00014b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014bc:	83 cb 01             	or     ebx,0x1
c00014bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c6:	89 f3                	mov    ebx,esi
c00014c8:	31 c0                	xor    eax,eax
c00014ca:	4d                   	dec    ebp
c00014cb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014d2:	39 c5                	cmp    ebp,eax
c00014d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014d7:	74 2c                	je     c0001505 <iALLOc+0x193>
c00014d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014dd:	85 c9                	test   ecx,ecx
c00014df:	75 15                	jne    c00014f6 <iALLOc+0x184>
c00014e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014e7:	b9 10 00 00 00       	mov    ecx,0x10
c00014ec:	83 fe 0f             	cmp    esi,0xf
c00014ef:	76 05                	jbe    c00014f6 <iALLOc+0x184>
c00014f1:	83 e6 f8             	and    esi,0xfffffff8
c00014f4:	89 f1                	mov    ecx,esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	29 cb                	sub    ebx,ecx
c00014fa:	83 ce 01             	or     esi,0x1
c00014fd:	40                   	inc    eax
c00014fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001501:	01 cf                	add    edi,ecx
c0001503:	eb c6                	jmp    c00014cb <iALLOc+0x159>
c0001505:	83 cb 01             	or     ebx,0x1
c0001508:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000150b:	eb 08                	jmp    c0001515 <iALLOc+0x1a3>
c000150d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001519:	83 c4 2c             	add    esp,0x2c
c000151c:	5b                   	pop    ebx
c000151d:	5e                   	pop    esi
c000151e:	5f                   	pop    edi
c000151f:	5d                   	pop    ebp
c0001520:	c3                   	ret    

c0001521 <dlrealloc>:
c0001521:	55                   	push   ebp
c0001522:	57                   	push   edi
c0001523:	56                   	push   esi
c0001524:	53                   	push   ebx
c0001525:	83 ec 1c             	sub    esp,0x1c
c0001528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001530:	85 db                	test   ebx,ebx
c0001532:	75 10                	jne    c0001544 <dlrealloc+0x23>
c0001534:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001538:	83 c4 1c             	add    esp,0x1c
c000153b:	5b                   	pop    ebx
c000153c:	5e                   	pop    esi
c000153d:	5f                   	pop    edi
c000153e:	5d                   	pop    ebp
c000153f:	e9 a0 fa ff ff       	jmp    c0000fe4 <dlmalloc>
c0001544:	83 f8 df             	cmp    eax,0xffffffdf
c0001547:	76 07                	jbe    c0001550 <dlrealloc+0x2f>
c0001549:	31 db                	xor    ebx,ebx
c000154b:	e9 6a 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c0001550:	83 c0 0b             	add    eax,0xb
c0001553:	bd 10 00 00 00       	mov    ebp,0x10
c0001558:	83 f8 0f             	cmp    eax,0xf
c000155b:	76 05                	jbe    c0001562 <dlrealloc+0x41>
c000155d:	83 e0 f8             	and    eax,0xfffffff8
c0001560:	89 c5                	mov    ebp,eax
c0001562:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001565:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001568:	89 c6                	mov    esi,eax
c000156a:	83 e6 fc             	and    esi,0xfffffffc
c000156d:	a8 02                	test   al,0x2
c000156f:	75 d8                	jne    c0001549 <dlrealloc+0x28>
c0001571:	39 f5                	cmp    ebp,esi
c0001573:	0f 86 04 01 00 00    	jbe    c000167d <dlrealloc+0x15c>
c0001579:	8d 14 37             	lea    edx,[edi+esi*1]
c000157c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000157f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001585:	75 33                	jne    c00015ba <dlrealloc+0x99>
c0001587:	83 e1 fc             	and    ecx,0xfffffffc
c000158a:	01 f1                	add    ecx,esi
c000158c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001590:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001593:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001597:	77 49                	ja     c00015e2 <dlrealloc+0xc1>
c0001599:	01 ef                	add    edi,ebp
c000159b:	83 e0 01             	and    eax,0x1
c000159e:	09 e8                	or     eax,ebp
c00015a0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015a3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ad:	29 e8                	sub    eax,ebp
c00015af:	83 c8 01             	or     eax,0x1
c00015b2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015b5:	e9 00 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c00015ba:	89 c8                	mov    eax,ecx
c00015bc:	83 e0 fe             	and    eax,0xfffffffe
c00015bf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015c4:	75 1c                	jne    c00015e2 <dlrealloc+0xc1>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	39 cd                	cmp    ebp,ecx
c00015cd:	77 13                	ja     c00015e2 <dlrealloc+0xc1>
c00015cf:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015d2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015d5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015d8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015db:	89 ce                	mov    esi,ecx
c00015dd:	e9 9b 00 00 00       	jmp    c000167d <dlrealloc+0x15c>
c00015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015e6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015e9:	83 ec 0c             	sub    esp,0xc
c00015ec:	50                   	push   eax
c00015ed:	e8 f2 f9 ff ff       	call   c0000fe4 <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	85 c0                	test   eax,eax
c00015f7:	0f 84 4c ff ff ff    	je     c0001549 <dlrealloc+0x28>
c00015fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001604:	39 ca                	cmp    edx,ecx
c0001606:	75 0a                	jne    c0001612 <dlrealloc+0xf1>
c0001608:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000160b:	83 e0 fc             	and    eax,0xfffffffc
c000160e:	01 c6                	add    esi,eax
c0001610:	eb 6b                	jmp    c000167d <dlrealloc+0x15c>
c0001612:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001615:	83 f9 27             	cmp    ecx,0x27
c0001618:	76 08                	jbe    c0001622 <dlrealloc+0x101>
c000161a:	89 de                	mov    esi,ebx
c000161c:	89 c7                	mov    edi,eax
c000161e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001620:	eb 43                	jmp    c0001665 <dlrealloc+0x144>
c0001622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001624:	83 f9 13             	cmp    ecx,0x13
c0001627:	89 10                	mov    DWORD PTR [eax],edx
c0001629:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000162c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000162f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001635:	76 2e                	jbe    c0001665 <dlrealloc+0x144>
c0001637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000163a:	83 f9 1b             	cmp    ecx,0x1b
c000163d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001640:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001643:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001646:	76 1d                	jbe    c0001665 <dlrealloc+0x144>
c0001648:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000164b:	83 f9 23             	cmp    ecx,0x23
c000164e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001651:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001654:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001657:	76 0c                	jbe    c0001665 <dlrealloc+0x144>
c0001659:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000165c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000165f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001662:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001669:	83 ec 0c             	sub    esp,0xc
c000166c:	53                   	push   ebx
c000166d:	e8 17 f6 ff ff       	call   c0000c89 <dlfree>
c0001672:	83 c4 10             	add    esp,0x10
c0001675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001679:	89 c3                	mov    ebx,eax
c000167b:	eb 3d                	jmp    c00016ba <dlrealloc+0x199>
c000167d:	89 f2                	mov    edx,esi
c000167f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001682:	29 ea                	sub    edx,ebp
c0001684:	83 e1 01             	and    ecx,0x1
c0001687:	8d 04 37             	lea    eax,[edi+esi*1]
c000168a:	83 fa 0f             	cmp    edx,0xf
c000168d:	77 0b                	ja     c000169a <dlrealloc+0x179>
c000168f:	09 ce                	or     esi,ecx
c0001691:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001694:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001698:	eb 20                	jmp    c00016ba <dlrealloc+0x199>
c000169a:	01 ef                	add    edi,ebp
c000169c:	83 ec 0c             	sub    esp,0xc
c000169f:	09 cd                	or     ebp,ecx
c00016a1:	83 ca 01             	or     edx,0x1
c00016a4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016a7:	83 c7 08             	add    edi,0x8
c00016aa:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ad:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b1:	57                   	push   edi
c00016b2:	e8 d2 f5 ff ff       	call   c0000c89 <dlfree>
c00016b7:	83 c4 10             	add    esp,0x10
c00016ba:	83 c4 1c             	add    esp,0x1c
c00016bd:	89 d8                	mov    eax,ebx
c00016bf:	5b                   	pop    ebx
c00016c0:	5e                   	pop    esi
c00016c1:	5f                   	pop    edi
c00016c2:	5d                   	pop    ebp
c00016c3:	c3                   	ret    

c00016c4 <dlmemalign>:
c00016c4:	55                   	push   ebp
c00016c5:	57                   	push   edi
c00016c6:	56                   	push   esi
c00016c7:	53                   	push   ebx
c00016c8:	83 ec 0c             	sub    esp,0xc
c00016cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016d3:	83 fa 08             	cmp    edx,0x8
c00016d6:	77 10                	ja     c00016e8 <dlmemalign+0x24>
c00016d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016dc:	83 c4 0c             	add    esp,0xc
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	e9 fc f8 ff ff       	jmp    c0000fe4 <dlmalloc>
c00016e8:	bf 10 00 00 00       	mov    edi,0x10
c00016ed:	83 fa 0f             	cmp    edx,0xf
c00016f0:	76 13                	jbe    c0001705 <dlmemalign+0x41>
c00016f2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00016f5:	85 d1                	test   ecx,edx
c00016f7:	75 04                	jne    c00016fd <dlmemalign+0x39>
c00016f9:	89 d7                	mov    edi,edx
c00016fb:	eb 08                	jmp    c0001705 <dlmemalign+0x41>
c00016fd:	39 d7                	cmp    edi,edx
c00016ff:	73 04                	jae    c0001705 <dlmemalign+0x41>
c0001701:	01 ff                	add    edi,edi
c0001703:	eb f8                	jmp    c00016fd <dlmemalign+0x39>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlmemalign+0x4d>
c000170a:	31 c0                	xor    eax,eax
c000170c:	e9 ce 00 00 00       	jmp    c00017df <dlmemalign+0x11b>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlmemalign+0x5f>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	83 ec 0c             	sub    esp,0xc
c0001726:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000172a:	50                   	push   eax
c000172b:	e8 b4 f8 ff ff       	call   c0000fe4 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 d1                	je     c000170a <dlmemalign+0x46>
c0001739:	31 d2                	xor    edx,edx
c000173b:	8d 70 f8             	lea    esi,[eax-0x8]
c000173e:	f7 f7                	div    edi
c0001740:	85 d2                	test   edx,edx
c0001742:	74 62                	je     c00017a6 <dlmemalign+0xe2>
c0001744:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001748:	89 f8                	mov    eax,edi
c000174a:	f7 d8                	neg    eax
c000174c:	21 c3                	and    ebx,eax
c000174e:	83 eb 08             	sub    ebx,0x8
c0001751:	89 d8                	mov    eax,ebx
c0001753:	29 f0                	sub    eax,esi
c0001755:	83 f8 0f             	cmp    eax,0xf
c0001758:	77 02                	ja     c000175c <dlmemalign+0x98>
c000175a:	01 fb                	add    ebx,edi
c000175c:	89 d8                	mov    eax,ebx
c000175e:	29 f0                	sub    eax,esi
c0001760:	89 c6                	mov    esi,eax
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	89 c2                	mov    edx,eax
c0001767:	83 e2 fc             	and    edx,0xfffffffc
c000176a:	29 f2                	sub    edx,esi
c000176c:	a8 02                	test   al,0x2
c000176e:	74 10                	je     c0001780 <dlmemalign+0xbc>
c0001770:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001773:	83 ca 02             	or     edx,0x2
c0001776:	8d 43 08             	lea    eax,[ebx+0x8]
c0001779:	89 33                	mov    DWORD PTR [ebx],esi
c000177b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000177e:	eb 5f                	jmp    c00017df <dlmemalign+0x11b>
c0001780:	83 ec 0c             	sub    esp,0xc
c0001783:	89 d0                	mov    eax,edx
c0001785:	83 c8 01             	or     eax,0x1
c0001788:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000178b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001790:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001793:	83 e0 01             	and    eax,0x1
c0001796:	09 f0                	or     eax,esi
c0001798:	89 de                	mov    esi,ebx
c000179a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000179d:	51                   	push   ecx
c000179e:	e8 e6 f4 ff ff       	call   c0000c89 <dlfree>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017a9:	a8 02                	test   al,0x2
c00017ab:	75 2f                	jne    c00017dc <dlmemalign+0x118>
c00017ad:	83 e0 fc             	and    eax,0xfffffffc
c00017b0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017b3:	39 c2                	cmp    edx,eax
c00017b5:	73 25                	jae    c00017dc <dlmemalign+0x118>
c00017b7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ba:	83 ec 0c             	sub    esp,0xc
c00017bd:	29 e8                	sub    eax,ebp
c00017bf:	83 c2 08             	add    edx,0x8
c00017c2:	83 c8 01             	or     eax,0x1
c00017c5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017cb:	83 e0 01             	and    eax,0x1
c00017ce:	09 c5                	or     ebp,eax
c00017d0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017d3:	52                   	push   edx
c00017d4:	e8 b0 f4 ff ff       	call   c0000c89 <dlfree>
c00017d9:	83 c4 10             	add    esp,0x10
c00017dc:	8d 46 08             	lea    eax,[esi+0x8]
c00017df:	83 c4 0c             	add    esp,0xc
c00017e2:	5b                   	pop    ebx
c00017e3:	5e                   	pop    esi
c00017e4:	5f                   	pop    edi
c00017e5:	5d                   	pop    ebp
c00017e6:	c3                   	ret    

c00017e7 <dlcalloc>:
c00017e7:	53                   	push   ebx
c00017e8:	83 ec 14             	sub    esp,0x14
c00017eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ef:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00017f4:	50                   	push   eax
c00017f5:	e8 ea f7 ff ff       	call   c0000fe4 <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	89 c3                	mov    ebx,eax
c00017ff:	85 c0                	test   eax,eax
c0001801:	74 77                	je     c000187a <dlcalloc+0x93>
c0001803:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001806:	89 d0                	mov    eax,edx
c0001808:	83 e0 fc             	and    eax,0xfffffffc
c000180b:	80 e2 02             	and    dl,0x2
c000180e:	75 5a                	jne    c000186a <dlcalloc+0x83>
c0001810:	83 e8 04             	sub    eax,0x4
c0001813:	83 f8 27             	cmp    eax,0x27
c0001816:	76 03                	jbe    c000181b <dlcalloc+0x34>
c0001818:	51                   	push   ecx
c0001819:	eb 53                	jmp    c000186e <dlcalloc+0x87>
c000181b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001828:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000182f:	83 f8 13             	cmp    eax,0x13
c0001832:	76 46                	jbe    c000187a <dlcalloc+0x93>
c0001834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000183b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001842:	83 f8 1b             	cmp    eax,0x1b
c0001845:	76 33                	jbe    c000187a <dlcalloc+0x93>
c0001847:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000184e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001855:	83 f8 23             	cmp    eax,0x23
c0001858:	76 20                	jbe    c000187a <dlcalloc+0x93>
c000185a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001861:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001868:	eb 10                	jmp    c000187a <dlcalloc+0x93>
c000186a:	83 e8 08             	sub    eax,0x8
c000186d:	52                   	push   edx
c000186e:	50                   	push   eax
c000186f:	6a 00                	push   0x0
c0001871:	53                   	push   ebx
c0001872:	e8 49 ec ff ff       	call   c00004c0 <memset>
c0001877:	83 c4 10             	add    esp,0x10
c000187a:	89 d8                	mov    eax,ebx
c000187c:	83 c4 08             	add    esp,0x8
c000187f:	5b                   	pop    ebx
c0001880:	c3                   	ret    

c0001881 <dlcfree>:
c0001881:	e9 03 f4 ff ff       	jmp    c0000c89 <dlfree>

c0001886 <dlindependent_calloc>:
c0001886:	83 ec 28             	sub    esp,0x28
c0001889:	b9 03 00 00 00       	mov    ecx,0x3
c000188e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001892:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000189a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	e8 cb fa ff ff       	call   c0001372 <iALLOc>
c00018a7:	83 c4 2c             	add    esp,0x2c
c00018aa:	c3                   	ret    

c00018ab <dlindependent_comalloc>:
c00018ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018b3:	31 c9                	xor    ecx,ecx
c00018b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018bd:	e9 b0 fa ff ff       	jmp    c0001372 <iALLOc>

c00018c2 <dlvalloc>:
c00018c2:	83 ec 0c             	sub    esp,0xc
c00018c5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018cc:	75 0a                	jne    c00018d8 <dlvalloc+0x16>
c00018ce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018d3:	e8 ca f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c00018d8:	50                   	push   eax
c00018d9:	50                   	push   eax
c00018da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018de:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018e4:	e8 db fd ff ff       	call   c00016c4 <dlmemalign>
c00018e9:	83 c4 1c             	add    esp,0x1c
c00018ec:	c3                   	ret    

c00018ed <dlpvalloc>:
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018f7:	75 0a                	jne    c0001903 <dlpvalloc+0x16>
c00018f9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018fe:	e8 9f f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001903:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001908:	89 c1                	mov    ecx,eax
c000190a:	52                   	push   edx
c000190b:	f7 d9                	neg    ecx
c000190d:	52                   	push   edx
c000190e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001912:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001916:	21 ca                	and    edx,ecx
c0001918:	52                   	push   edx
c0001919:	50                   	push   eax
c000191a:	e8 a5 fd ff ff       	call   c00016c4 <dlmemalign>
c000191f:	83 c4 1c             	add    esp,0x1c
c0001922:	c3                   	ret    

c0001923 <dlmalloc_trim>:
c0001923:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001928:	e8 75 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000192d:	31 c0                	xor    eax,eax
c000192f:	c3                   	ret    

c0001930 <dlmalloc_usable_size>:
c0001930:	53                   	push   ebx
c0001931:	31 c0                	xor    eax,eax
c0001933:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001937:	85 c9                	test   ecx,ecx
c0001939:	74 24                	je     c000195f <dlmalloc_usable_size+0x2f>
c000193b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000193e:	f6 c2 02             	test   dl,0x2
c0001941:	74 08                	je     c000194b <dlmalloc_usable_size+0x1b>
c0001943:	83 e2 fc             	and    edx,0xfffffffc
c0001946:	8d 42 f8             	lea    eax,[edx-0x8]
c0001949:	eb 14                	jmp    c000195f <dlmalloc_usable_size+0x2f>
c000194b:	89 d3                	mov    ebx,edx
c000194d:	31 c0                	xor    eax,eax
c000194f:	83 e3 fe             	and    ebx,0xfffffffe
c0001952:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001957:	74 06                	je     c000195f <dlmalloc_usable_size+0x2f>
c0001959:	83 e2 fc             	and    edx,0xfffffffc
c000195c:	8d 42 fc             	lea    eax,[edx-0x4]
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlmallinfo>:
c0001961:	55                   	push   ebp
c0001962:	57                   	push   edi
c0001963:	56                   	push   esi
c0001964:	53                   	push   ebx
c0001965:	83 ec 08             	sub    esp,0x8
c0001968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000196c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001973:	75 0a                	jne    c000197f <dlmallinfo+0x1e>
c0001975:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000197a:	e8 23 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000197f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001984:	31 ed                	xor    ebp,ebp
c0001986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001989:	31 c9                	xor    ecx,ecx
c000198b:	83 e0 fc             	and    eax,0xfffffffc
c000198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001992:	31 c0                	xor    eax,eax
c0001994:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000199b:	85 d2                	test   edx,edx
c000199d:	74 0e                	je     c00019ad <dlmallinfo+0x4c>
c000199f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019a2:	45                   	inc    ebp
c00019a3:	83 e6 fc             	and    esi,0xfffffffc
c00019a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a9:	01 f1                	add    ecx,esi
c00019ab:	eb ee                	jmp    c000199b <dlmallinfo+0x3a>
c00019ad:	40                   	inc    eax
c00019ae:	83 f8 0a             	cmp    eax,0xa
c00019b1:	75 e1                	jne    c0001994 <dlmallinfo+0x33>
c00019b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019be:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019c1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019c6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c9:	39 f0                	cmp    eax,esi
c00019cb:	74 10                	je     c00019dd <dlmallinfo+0x7c>
c00019cd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019d0:	ff 04 24             	inc    DWORD PTR [esp]
c00019d3:	83 e7 fc             	and    edi,0xfffffffc
c00019d6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d9:	01 fa                	add    edx,edi
c00019db:	eb ec                	jmp    c00019c9 <dlmallinfo+0x68>
c00019dd:	83 c0 08             	add    eax,0x8
c00019e0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019e5:	75 df                	jne    c00019c6 <dlmallinfo+0x65>
c00019e7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019ea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019f0:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c00019f5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f8:	89 03                	mov    DWORD PTR [ebx],eax
c00019fa:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019fd:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a03:	29 d0                	sub    eax,edx
c0001a05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a0b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a1b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a21:	89 d8                	mov    eax,ebx
c0001a23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a26:	83 c4 08             	add    esp,0x8
c0001a29:	5b                   	pop    ebx
c0001a2a:	5e                   	pop    esi
c0001a2b:	5f                   	pop    edi
c0001a2c:	5d                   	pop    ebp
c0001a2d:	c2 04 00             	ret    0x4

c0001a30 <dlmalloc_stats>:
c0001a30:	83 ec 30             	sub    esp,0x30
c0001a33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a37:	50                   	push   eax
c0001a38:	e8 24 ff ff ff       	call   c0001961 <dlmallinfo>
c0001a3d:	83 c4 30             	add    esp,0x30
c0001a40:	c3                   	ret    

c0001a41 <dlmallopt>:
c0001a41:	56                   	push   esi
c0001a42:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a47:	53                   	push   ebx
c0001a48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a50:	e8 4d f1 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001a55:	8d 46 04             	lea    eax,[esi+0x4]
c0001a58:	83 f8 05             	cmp    eax,0x5
c0001a5b:	77 67                	ja     c0001ac4 <dlmallopt+0x83>
c0001a5d:	ff 24 85 84 e8 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe177c]
c0001a64:	83 fb 50             	cmp    ebx,0x50
c0001a67:	77 5b                	ja     c0001ac4 <dlmallopt+0x83>
c0001a69:	ba 08 00 00 00       	mov    edx,0x8
c0001a6e:	85 db                	test   ebx,ebx
c0001a70:	74 12                	je     c0001a84 <dlmallopt+0x43>
c0001a72:	83 c3 0b             	add    ebx,0xb
c0001a75:	ba 10 00 00 00       	mov    edx,0x10
c0001a7a:	83 fb 0f             	cmp    ebx,0xf
c0001a7d:	76 05                	jbe    c0001a84 <dlmallopt+0x43>
c0001a7f:	89 da                	mov    edx,ebx
c0001a81:	83 e2 f8             	and    edx,0xfffffff8
c0001a84:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a89:	83 e0 03             	and    eax,0x3
c0001a8c:	09 d0                	or     eax,edx
c0001a8e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001a93:	eb 31                	jmp    c0001ac6 <dlmallopt+0x85>
c0001a95:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001a9b:	eb 06                	jmp    c0001aa3 <dlmallopt+0x62>
c0001a9d:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001aa3:	be 01 00 00 00       	mov    esi,0x1
c0001aa8:	eb 1c                	jmp    c0001ac6 <dlmallopt+0x85>
c0001aaa:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ab0:	eb f1                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ab2:	31 f6                	xor    esi,esi
c0001ab4:	85 db                	test   ebx,ebx
c0001ab6:	75 0e                	jne    c0001ac6 <dlmallopt+0x85>
c0001ab8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ac2:	eb df                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ac4:	31 f6                	xor    esi,esi
c0001ac6:	89 f0                	mov    eax,esi
c0001ac8:	5b                   	pop    ebx
c0001ac9:	5e                   	pop    esi
c0001aca:	c3                   	ret    
c0001acb:	90                   	nop

c0001acc <isblank>:
c0001acc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ad1:	74 09                	je     c0001adc <isblank+0x10>
c0001ad3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ad8:	75 0a                	jne    c0001ae4 <isblank+0x18>
c0001ada:	66 90                	xchg   ax,ax
c0001adc:	b8 01 00 00 00       	mov    eax,0x1
c0001ae1:	c3                   	ret    
c0001ae2:	66 90                	xchg   ax,ax
c0001ae4:	b8 00 00 00 00       	mov    eax,0x0
c0001ae9:	c3                   	ret    
c0001aea:	66 90                	xchg   ax,ax

c0001aec <iscntrl>:
c0001aec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001af1:	7e 09                	jle    c0001afc <iscntrl+0x10>
c0001af3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001af8:	75 0a                	jne    c0001b04 <iscntrl+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <isdigit>:
c0001b0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b11:	7e 0d                	jle    c0001b20 <isdigit+0x14>
c0001b13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b18:	7f 06                	jg     c0001b20 <isdigit+0x14>
c0001b1a:	b8 01 00 00 00       	mov    eax,0x1
c0001b1f:	c3                   	ret    
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <islower>:
c0001b28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b2d:	7e 0d                	jle    c0001b3c <islower+0x14>
c0001b2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b34:	7f 06                	jg     c0001b3c <islower+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <isspace>:
c0001b44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b49:	7c 19                	jl     c0001b64 <isspace+0x20>
c0001b4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b50:	7e 0a                	jle    c0001b5c <isspace+0x18>
c0001b52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b57:	75 0b                	jne    c0001b64 <isspace+0x20>
c0001b59:	8d 76 00             	lea    esi,[esi+0x0]
c0001b5c:	b8 01 00 00 00       	mov    eax,0x1
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax
c0001b64:	b8 00 00 00 00       	mov    eax,0x0
c0001b69:	c3                   	ret    
c0001b6a:	66 90                	xchg   ax,ax

c0001b6c <isupper>:
c0001b6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b71:	7e 0d                	jle    c0001b80 <isupper+0x14>
c0001b73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b78:	7f 06                	jg     c0001b80 <isupper+0x14>
c0001b7a:	b8 01 00 00 00       	mov    eax,0x1
c0001b7f:	c3                   	ret    
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isalpha>:
c0001b88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b8c:	e8 db ff ff ff       	call   c0001b6c <isupper>
c0001b91:	83 c4 04             	add    esp,0x4
c0001b94:	85 c0                	test   eax,eax
c0001b96:	75 10                	jne    c0001ba8 <isalpha+0x20>
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 87 ff ff ff       	call   c0001b28 <islower>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	74 08                	je     c0001bb0 <isalpha+0x28>
c0001ba8:	b8 01 00 00 00       	mov    eax,0x1
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalnum>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 c7 ff ff ff       	call   c0001b88 <isalpha>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalnum+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 3b ff ff ff       	call   c0001b0c <isdigit>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalnum+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <ispunct>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalnum>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 28                	jne    c0001c20 <ispunct+0x38>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 43 ff ff ff       	call   c0001b44 <isspace>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 18                	jne    c0001c20 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 db fe ff ff       	call   c0001aec <iscntrl>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 08                	jne    c0001c20 <ispunct+0x38>
c0001c18:	b8 01 00 00 00       	mov    eax,0x1
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <isgraph>:
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 87 ff ff ff       	call   c0001bb8 <isalnum>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 10                	jne    c0001c48 <isgraph+0x20>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 a7 ff ff ff       	call   c0001be8 <ispunct>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	74 08                	je     c0001c50 <isgraph+0x28>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isprint>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 c7 ff ff ff       	call   c0001c28 <isgraph>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 08                	jne    c0001c70 <isprint+0x18>
c0001c68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c6d:	75 09                	jne    c0001c78 <isprint+0x20>
c0001c6f:	90                   	nop
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isxdigit>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 83 fe ff ff       	call   c0001b0c <isdigit>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 20                	jne    c0001cb0 <isxdigit+0x30>
c0001c90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c95:	7e 09                	jle    c0001ca0 <isxdigit+0x20>
c0001c97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001c9c:	7e 12                	jle    c0001cb0 <isxdigit+0x30>
c0001c9e:	66 90                	xchg   ax,ax
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 11                	jle    c0001cb8 <isxdigit+0x38>
c0001ca7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cac:	7f 0a                	jg     c0001cb8 <isxdigit+0x38>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    

c0001cbe <disk_status>:
c0001cbe:	31 c0                	xor    eax,eax
c0001cc0:	c3                   	ret    

c0001cc1 <disk_initialize>:
c0001cc1:	31 c0                	xor    eax,eax
c0001cc3:	c3                   	ret    

c0001cc4 <disk_read>:
c0001cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cc9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cd5:	e9 82 62 01 00       	jmp    c0017f5c <fatWrapperReadDisk>

c0001cda <disk_write>:
c0001cda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cdf:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ceb:	e9 b0 62 01 00       	jmp    c0017fa0 <fatWrapperWriteDisk>

c0001cf0 <disk_ioctl>:
c0001cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001cf9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfe:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0a:	e9 d5 62 01 00       	jmp    c0017fe4 <fatWrapperIoctl>

c0001d0f <ld_word>:
c0001d0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d16:	c1 e2 08             	shl    edx,0x8
c0001d19:	09 d0                	or     eax,edx
c0001d1b:	c3                   	ret    

c0001d1c <ld_dword>:
c0001d1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d20:	89 d1                	mov    ecx,edx
c0001d22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d26:	c1 e1 08             	shl    ecx,0x8
c0001d29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d2c:	09 ca                	or     edx,ecx
c0001d2e:	c1 e2 08             	shl    edx,0x8
c0001d31:	09 d0                	or     eax,edx
c0001d33:	c3                   	ret    

c0001d34 <st_word>:
c0001d34:	66 89 10             	mov    WORD PTR [eax],dx
c0001d37:	c3                   	ret    

c0001d38 <st_dword>:
c0001d38:	89 10                	mov    DWORD PTR [eax],edx
c0001d3a:	c3                   	ret    

c0001d3b <mem_cpy>:
c0001d3b:	85 c9                	test   ecx,ecx
c0001d3d:	74 10                	je     c0001d4f <mem_cpy+0x14>
c0001d3f:	57                   	push   edi
c0001d40:	01 c1                	add    ecx,eax
c0001d42:	56                   	push   esi
c0001d43:	89 c7                	mov    edi,eax
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d48:	39 f9                	cmp    ecx,edi
c0001d4a:	75 fb                	jne    c0001d47 <mem_cpy+0xc>
c0001d4c:	5e                   	pop    esi
c0001d4d:	5f                   	pop    edi
c0001d4e:	c3                   	ret    
c0001d4f:	c3                   	ret    

c0001d50 <mem_set>:
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	40                   	inc    eax
c0001d53:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d56:	39 c8                	cmp    eax,ecx
c0001d58:	75 f8                	jne    c0001d52 <mem_set+0x2>
c0001d5a:	c3                   	ret    

c0001d5b <mem_cmp>:
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 c6                	mov    esi,eax
c0001d5f:	53                   	push   ebx
c0001d60:	46                   	inc    esi
c0001d61:	42                   	inc    edx
c0001d62:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d66:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d6a:	29 fb                	sub    ebx,edi
c0001d6c:	89 cf                	mov    edi,ecx
c0001d6e:	29 f7                	sub    edi,esi
c0001d70:	01 c7                	add    edi,eax
c0001d72:	74 04                	je     c0001d78 <mem_cmp+0x1d>
c0001d74:	85 db                	test   ebx,ebx
c0001d76:	74 e8                	je     c0001d60 <mem_cmp+0x5>
c0001d78:	89 d8                	mov    eax,ebx
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	c3                   	ret    

c0001d7e <chk_chr>:
c0001d7e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d81:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d84:	74 07                	je     c0001d8d <chk_chr+0xf>
c0001d86:	39 d1                	cmp    ecx,edx
c0001d88:	74 03                	je     c0001d8d <chk_chr+0xf>
c0001d8a:	40                   	inc    eax
c0001d8b:	eb f1                	jmp    c0001d7e <chk_chr>
c0001d8d:	89 c8                	mov    eax,ecx
c0001d8f:	c3                   	ret    

c0001d90 <dbc_1st>:
c0001d90:	31 c0                	xor    eax,eax
c0001d92:	c3                   	ret    

c0001d93 <dbc_2nd>:
c0001d93:	31 c0                	xor    eax,eax
c0001d95:	c3                   	ret    

c0001d96 <tchar2uni>:
c0001d96:	57                   	push   edi
c0001d97:	89 c7                	mov    edi,eax
c0001d99:	56                   	push   esi
c0001d9a:	53                   	push   ebx
c0001d9b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d9f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001da2:	84 c9                	test   cl,cl
c0001da4:	78 0a                	js     c0001db0 <tchar2uni+0x1a>
c0001da6:	0f b6 d1             	movzx  edx,cl
c0001da9:	89 f3                	mov    ebx,esi
c0001dab:	e9 9f 00 00 00       	jmp    c0001e4f <tchar2uni+0xb9>
c0001db0:	88 ca                	mov    dl,cl
c0001db2:	83 e2 e0             	and    edx,0xffffffe0
c0001db5:	80 fa c0             	cmp    dl,0xc0
c0001db8:	75 0c                	jne    c0001dc6 <tchar2uni+0x30>
c0001dba:	89 ca                	mov    edx,ecx
c0001dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dc1:	83 e2 1f             	and    edx,0x1f
c0001dc4:	eb 2e                	jmp    c0001df4 <tchar2uni+0x5e>
c0001dc6:	88 ca                	mov    dl,cl
c0001dc8:	83 e2 f0             	and    edx,0xfffffff0
c0001dcb:	80 fa e0             	cmp    dl,0xe0
c0001dce:	75 0c                	jne    c0001ddc <tchar2uni+0x46>
c0001dd0:	89 ca                	mov    edx,ecx
c0001dd2:	b9 02 00 00 00       	mov    ecx,0x2
c0001dd7:	83 e2 0f             	and    edx,0xf
c0001dda:	eb 18                	jmp    c0001df4 <tchar2uni+0x5e>
c0001ddc:	88 ca                	mov    dl,cl
c0001dde:	83 e2 f8             	and    edx,0xfffffff8
c0001de1:	88 d0                	mov    al,dl
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	3c f0                	cmp    al,0xf0
c0001de8:	75 6c                	jne    c0001e56 <tchar2uni+0xc0>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 03 00 00 00       	mov    ecx,0x3
c0001df1:	83 e2 07             	and    edx,0x7
c0001df4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001df8:	46                   	inc    esi
c0001df9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dfc:	88 c8                	mov    al,cl
c0001dfe:	83 e0 c0             	and    eax,0xffffffc0
c0001e01:	3c 80                	cmp    al,0x80
c0001e03:	75 4e                	jne    c0001e53 <tchar2uni+0xbd>
c0001e05:	c1 e2 06             	shl    edx,0x6
c0001e08:	83 e1 3f             	and    ecx,0x3f
c0001e0b:	09 ca                	or     edx,ecx
c0001e0d:	39 de                	cmp    esi,ebx
c0001e0f:	75 e7                	jne    c0001df8 <tchar2uni+0x62>
c0001e11:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e14:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e1a:	77 37                	ja     c0001e53 <tchar2uni+0xbd>
c0001e1c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e22:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e28:	76 29                	jbe    c0001e53 <tchar2uni+0xbd>
c0001e2a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e30:	76 1d                	jbe    c0001e4f <tchar2uni+0xb9>
c0001e32:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e38:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e3e:	c1 e1 06             	shl    ecx,0x6
c0001e41:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e47:	09 ca                	or     edx,ecx
c0001e49:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e51:	eb 03                	jmp    c0001e56 <tchar2uni+0xc0>
c0001e53:	83 ca ff             	or     edx,0xffffffff
c0001e56:	5b                   	pop    ebx
c0001e57:	89 d0                	mov    eax,edx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	c3                   	ret    

c0001e5c <put_utf>:
c0001e5c:	53                   	push   ebx
c0001e5d:	83 f8 7f             	cmp    eax,0x7f
c0001e60:	89 c3                	mov    ebx,eax
c0001e62:	b0 00                	mov    al,0x0
c0001e64:	77 11                	ja     c0001e77 <put_utf+0x1b>
c0001e66:	85 c9                	test   ecx,ecx
c0001e68:	0f 84 e5 00 00 00    	je     c0001f53 <put_utf+0xf7>
c0001e6e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e70:	b0 01                	mov    al,0x1
c0001e72:	e9 dc 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001e77:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e7d:	77 23                	ja     c0001ea2 <put_utf+0x46>
c0001e7f:	83 f9 01             	cmp    ecx,0x1
c0001e82:	0f 86 cb 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001e88:	89 d8                	mov    eax,ebx
c0001e8a:	83 e3 3f             	and    ebx,0x3f
c0001e8d:	c1 e8 06             	shr    eax,0x6
c0001e90:	83 cb 80             	or     ebx,0xffffff80
c0001e93:	83 c8 c0             	or     eax,0xffffffc0
c0001e96:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e99:	88 02                	mov    BYTE PTR [edx],al
c0001e9b:	b0 02                	mov    al,0x2
c0001e9d:	e9 b1 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001ea2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ea8:	77 40                	ja     c0001eea <put_utf+0x8e>
c0001eaa:	83 f9 02             	cmp    ecx,0x2
c0001ead:	0f 86 a0 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001eb3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001eb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ebf:	0f 86 8e 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001ec5:	89 d8                	mov    eax,ebx
c0001ec7:	c1 e8 0c             	shr    eax,0xc
c0001eca:	83 c8 e0             	or     eax,0xffffffe0
c0001ecd:	88 02                	mov    BYTE PTR [edx],al
c0001ecf:	89 d8                	mov    eax,ebx
c0001ed1:	83 e3 3f             	and    ebx,0x3f
c0001ed4:	c1 e8 06             	shr    eax,0x6
c0001ed7:	83 cb 80             	or     ebx,0xffffff80
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ee0:	83 c8 80             	or     eax,0xffffff80
c0001ee3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee6:	b0 03                	mov    al,0x3
c0001ee8:	eb 69                	jmp    c0001f53 <put_utf+0xf7>
c0001eea:	83 f9 03             	cmp    ecx,0x3
c0001eed:	76 64                	jbe    c0001f53 <put_utf+0xf7>
c0001eef:	89 d9                	mov    ecx,ebx
c0001ef1:	0f b7 c3             	movzx  eax,bx
c0001ef4:	66 31 c9             	xor    cx,cx
c0001ef7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001efd:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f03:	c1 e9 06             	shr    ecx,0x6
c0001f06:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f0c:	77 43                	ja     c0001f51 <put_utf+0xf5>
c0001f0e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f14:	77 3b                	ja     c0001f51 <put_utf+0xf5>
c0001f16:	09 cb                	or     ebx,ecx
c0001f18:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f1e:	89 d8                	mov    eax,ebx
c0001f20:	c1 e8 12             	shr    eax,0x12
c0001f23:	83 c8 f0             	or     eax,0xfffffff0
c0001f26:	88 02                	mov    BYTE PTR [edx],al
c0001f28:	89 d8                	mov    eax,ebx
c0001f2a:	c1 e8 0c             	shr    eax,0xc
c0001f2d:	83 e0 3f             	and    eax,0x3f
c0001f30:	83 c8 80             	or     eax,0xffffff80
c0001f33:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f36:	89 d8                	mov    eax,ebx
c0001f38:	83 e3 3f             	and    ebx,0x3f
c0001f3b:	c1 e8 06             	shr    eax,0x6
c0001f3e:	83 cb 80             	or     ebx,0xffffff80
c0001f41:	83 e0 3f             	and    eax,0x3f
c0001f44:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f47:	83 c8 80             	or     eax,0xffffff80
c0001f4a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f4d:	b0 04                	mov    al,0x4
c0001f4f:	eb 02                	jmp    c0001f53 <put_utf+0xf7>
c0001f51:	31 c0                	xor    eax,eax
c0001f53:	5b                   	pop    ebx
c0001f54:	c3                   	ret    

c0001f55 <clst2sect>:
c0001f55:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f5b:	83 ea 02             	sub    edx,0x2
c0001f5e:	39 ca                	cmp    edx,ecx
c0001f60:	76 0d                	jbe    c0001f6f <clst2sect+0x1a>
c0001f62:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f66:	0f af d1             	imul   edx,ecx
c0001f69:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f6c:	89 d0                	mov    eax,edx
c0001f6e:	c3                   	ret    
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <pick_lfn>:
c0001f72:	55                   	push   ebp
c0001f73:	57                   	push   edi
c0001f74:	56                   	push   esi
c0001f75:	89 d6                	mov    esi,edx
c0001f77:	53                   	push   ebx
c0001f78:	89 c3                	mov    ebx,eax
c0001f7a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7d:	e8 8d fd ff ff       	call   c0001d0f <ld_word>
c0001f82:	66 85 c0             	test   ax,ax
c0001f85:	74 04                	je     c0001f8b <pick_lfn+0x19>
c0001f87:	31 c0                	xor    eax,eax
c0001f89:	eb 5c                	jmp    c0001fe7 <pick_lfn+0x75>
c0001f8b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8e:	bd 01 00 00 00       	mov    ebp,0x1
c0001f93:	83 e1 bf             	and    ecx,0xffffffbf
c0001f96:	31 ff                	xor    edi,edi
c0001f98:	49                   	dec    ecx
c0001f99:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9c:	0f b6 87 e0 e9 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1620]
c0001fa3:	01 f0                	add    eax,esi
c0001fa5:	e8 65 fd ff ff       	call   c0001d0f <ld_word>
c0001faa:	66 85 ed             	test   bp,bp
c0001fad:	74 11                	je     c0001fc0 <pick_lfn+0x4e>
c0001faf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb5:	77 d0                	ja     c0001f87 <pick_lfn+0x15>
c0001fb7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbb:	89 c5                	mov    ebp,eax
c0001fbd:	41                   	inc    ecx
c0001fbe:	eb 04                	jmp    c0001fc4 <pick_lfn+0x52>
c0001fc0:	66 40                	inc    ax
c0001fc2:	75 c3                	jne    c0001f87 <pick_lfn+0x15>
c0001fc4:	47                   	inc    edi
c0001fc5:	83 ff 0d             	cmp    edi,0xd
c0001fc8:	75 d2                	jne    c0001f9c <pick_lfn+0x2a>
c0001fca:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fcd:	74 13                	je     c0001fe2 <pick_lfn+0x70>
c0001fcf:	66 85 ed             	test   bp,bp
c0001fd2:	74 0e                	je     c0001fe2 <pick_lfn+0x70>
c0001fd4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fda:	77 ab                	ja     c0001f87 <pick_lfn+0x15>
c0001fdc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe2:	b8 01 00 00 00       	mov    eax,0x1
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	5f                   	pop    edi
c0001fea:	5d                   	pop    ebp
c0001feb:	c3                   	ret    

c0001fec <put_lfn>:
c0001fec:	55                   	push   ebp
c0001fed:	31 ed                	xor    ebp,ebp
c0001fef:	57                   	push   edi
c0001ff0:	89 d7                	mov    edi,edx
c0001ff2:	56                   	push   esi
c0001ff3:	31 f6                	xor    esi,esi
c0001ff5:	53                   	push   ebx
c0001ff6:	83 ec 08             	sub    esp,0x8
c0001ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002004:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002010:	31 d2                	xor    edx,edx
c0002012:	e8 1d fd ff ff       	call   c0001d34 <st_word>
c0002017:	0f b6 d9             	movzx  ebx,cl
c000201a:	4b                   	dec    ebx
c000201b:	6b db 0d             	imul   ebx,ebx,0xd
c000201e:	66 83 fe ff          	cmp    si,0xffff
c0002022:	74 08                	je     c000202c <put_lfn+0x40>
c0002024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002027:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202b:	43                   	inc    ebx
c000202c:	0f b6 85 e0 e9 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1620]
c0002033:	0f b7 d6             	movzx  edx,si
c0002036:	01 f8                	add    eax,edi
c0002038:	e8 f7 fc ff ff       	call   c0001d34 <st_word>
c000203d:	66 85 f6             	test   si,si
c0002040:	75 03                	jne    c0002045 <put_lfn+0x59>
c0002042:	83 ce ff             	or     esi,0xffffffff
c0002045:	45                   	inc    ebp
c0002046:	83 fd 0d             	cmp    ebp,0xd
c0002049:	75 d3                	jne    c000201e <put_lfn+0x32>
c000204b:	66 46                	inc    si
c000204d:	74 0a                	je     c0002059 <put_lfn+0x6d>
c000204f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002052:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002057:	75 09                	jne    c0002062 <put_lfn+0x76>
c0002059:	88 c8                	mov    al,cl
c000205b:	83 c8 40             	or     eax,0x40
c000205e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002062:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002066:	88 07                	mov    BYTE PTR [edi],al
c0002068:	83 c4 08             	add    esp,0x8
c000206b:	5b                   	pop    ebx
c000206c:	5e                   	pop    esi
c000206d:	5f                   	pop    edi
c000206e:	5d                   	pop    ebp
c000206f:	c3                   	ret    

c0002070 <gen_numname>:
c0002070:	57                   	push   edi
c0002071:	89 cf                	mov    edi,ecx
c0002073:	56                   	push   esi
c0002074:	b9 0b 00 00 00       	mov    ecx,0xb
c0002079:	53                   	push   ebx
c000207a:	89 c6                	mov    esi,eax
c000207c:	83 ec 10             	sub    esp,0x10
c000207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002083:	e8 b3 fc ff ff       	call   c0001d3b <mem_cpy>
c0002088:	83 fb 05             	cmp    ebx,0x5
c000208b:	76 2d                	jbe    c00020ba <gen_numname+0x4a>
c000208d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002090:	66 85 c0             	test   ax,ax
c0002093:	74 25                	je     c00020ba <gen_numname+0x4a>
c0002095:	83 c7 02             	add    edi,0x2
c0002098:	ba 10 00 00 00       	mov    edx,0x10
c000209d:	01 db                	add    ebx,ebx
c000209f:	89 c1                	mov    ecx,eax
c00020a1:	66 d1 e8             	shr    ax,1
c00020a4:	83 e1 01             	and    ecx,0x1
c00020a7:	01 cb                	add    ebx,ecx
c00020a9:	0f ba e3 10          	bt     ebx,0x10
c00020ad:	73 06                	jae    c00020b5 <gen_numname+0x45>
c00020af:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b5:	4a                   	dec    edx
c00020b6:	75 e5                	jne    c000209d <gen_numname+0x2d>
c00020b8:	eb d3                	jmp    c000208d <gen_numname+0x1d>
c00020ba:	b8 07 00 00 00       	mov    eax,0x7
c00020bf:	88 d9                	mov    cl,bl
c00020c1:	83 e1 0f             	and    ecx,0xf
c00020c4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c7:	80 fa 39             	cmp    dl,0x39
c00020ca:	76 03                	jbe    c00020cf <gen_numname+0x5f>
c00020cc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020cf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d6:	89 da                	mov    edx,ebx
c00020d8:	c1 ea 04             	shr    edx,0x4
c00020db:	83 fb 0f             	cmp    ebx,0xf
c00020de:	76 06                	jbe    c00020e6 <gen_numname+0x76>
c00020e0:	89 c8                	mov    eax,ecx
c00020e2:	89 d3                	mov    ebx,edx
c00020e4:	eb d9                	jmp    c00020bf <gen_numname+0x4f>
c00020e6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020eb:	31 d2                	xor    edx,edx
c00020ed:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f0:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f3:	39 ca                	cmp    edx,ecx
c00020f5:	73 18                	jae    c000210f <gen_numname+0x9f>
c00020f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fa:	3c 20                	cmp    al,0x20
c00020fc:	74 11                	je     c000210f <gen_numname+0x9f>
c00020fe:	e8 8d fc ff ff       	call   c0001d90 <dbc_1st>
c0002103:	85 c0                	test   eax,eax
c0002105:	74 05                	je     c000210c <gen_numname+0x9c>
c0002107:	39 d3                	cmp    ebx,edx
c0002109:	74 04                	je     c000210f <gen_numname+0x9f>
c000210b:	42                   	inc    edx
c000210c:	42                   	inc    edx
c000210d:	eb e1                	jmp    c00020f0 <gen_numname+0x80>
c000210f:	b0 20                	mov    al,0x20
c0002111:	83 f9 07             	cmp    ecx,0x7
c0002114:	77 05                	ja     c000211b <gen_numname+0xab>
c0002116:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211a:	41                   	inc    ecx
c000211b:	42                   	inc    edx
c000211c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002120:	83 fa 07             	cmp    edx,0x7
c0002123:	76 ea                	jbe    c000210f <gen_numname+0x9f>
c0002125:	83 c4 10             	add    esp,0x10
c0002128:	5b                   	pop    ebx
c0002129:	5e                   	pop    esi
c000212a:	5f                   	pop    edi
c000212b:	c3                   	ret    

c000212c <sum_sfn>:
c000212c:	31 c9                	xor    ecx,ecx
c000212e:	31 d2                	xor    edx,edx
c0002130:	d0 ca                	ror    dl,1
c0002132:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002135:	41                   	inc    ecx
c0002136:	83 f9 0b             	cmp    ecx,0xb
c0002139:	75 f5                	jne    c0002130 <sum_sfn+0x4>
c000213b:	88 d0                	mov    al,dl
c000213d:	c3                   	ret    

c000213e <get_ldnumber>:
c000213e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002140:	85 d2                	test   edx,edx
c0002142:	74 14                	je     c0002158 <get_ldnumber+0x1a>
c0002144:	56                   	push   esi
c0002145:	53                   	push   ebx
c0002146:	89 d3                	mov    ebx,edx
c0002148:	43                   	inc    ebx
c0002149:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214c:	80 f9 1f             	cmp    cl,0x1f
c000214f:	76 0d                	jbe    c000215e <get_ldnumber+0x20>
c0002151:	80 f9 3a             	cmp    cl,0x3a
c0002154:	75 f2                	jne    c0002148 <get_ldnumber+0xa>
c0002156:	eb 0a                	jmp    c0002162 <get_ldnumber+0x24>
c0002158:	83 c9 ff             	or     ecx,0xffffffff
c000215b:	89 c8                	mov    eax,ecx
c000215d:	c3                   	ret    
c000215e:	31 c9                	xor    ecx,ecx
c0002160:	eb 24                	jmp    c0002186 <get_ldnumber+0x48>
c0002162:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002165:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002168:	80 f9 09             	cmp    cl,0x9
c000216b:	77 16                	ja     c0002183 <get_ldnumber+0x45>
c000216d:	83 c2 02             	add    edx,0x2
c0002170:	83 c9 ff             	or     ecx,0xffffffff
c0002173:	39 d3                	cmp    ebx,edx
c0002175:	75 0f                	jne    c0002186 <get_ldnumber+0x48>
c0002177:	89 f2                	mov    edx,esi
c0002179:	89 18                	mov    DWORD PTR [eax],ebx
c000217b:	0f be ca             	movsx  ecx,dl
c000217e:	83 e9 30             	sub    ecx,0x30
c0002181:	eb 03                	jmp    c0002186 <get_ldnumber+0x48>
c0002183:	83 c9 ff             	or     ecx,0xffffffff
c0002186:	89 c8                	mov    eax,ecx
c0002188:	5b                   	pop    ebx
c0002189:	5e                   	pop    esi
c000218a:	c3                   	ret    

c000218b <validate>:
c000218b:	56                   	push   esi
c000218c:	53                   	push   ebx
c000218d:	89 d6                	mov    esi,edx
c000218f:	51                   	push   ecx
c0002190:	85 c0                	test   eax,eax
c0002192:	75 09                	jne    c000219d <validate+0x12>
c0002194:	b8 09 00 00 00       	mov    eax,0x9
c0002199:	31 c9                	xor    ecx,ecx
c000219b:	eb 2f                	jmp    c00021cc <validate+0x41>
c000219d:	89 c3                	mov    ebx,eax
c000219f:	8b 00                	mov    eax,DWORD PTR [eax]
c00021a1:	85 c0                	test   eax,eax
c00021a3:	74 ef                	je     c0002194 <validate+0x9>
c00021a5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021a8:	74 ea                	je     c0002194 <validate+0x9>
c00021aa:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ae:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021b2:	75 e0                	jne    c0002194 <validate+0x9>
c00021b4:	83 ec 0c             	sub    esp,0xc
c00021b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bb:	50                   	push   eax
c00021bc:	e8 fd fa ff ff       	call   c0001cbe <disk_status>
c00021c1:	83 c4 10             	add    esp,0x10
c00021c4:	a8 01                	test   al,0x1
c00021c6:	75 cc                	jne    c0002194 <validate+0x9>
c00021c8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ca:	31 c0                	xor    eax,eax
c00021cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ce:	5a                   	pop    edx
c00021cf:	5b                   	pop    ebx
c00021d0:	5e                   	pop    esi
c00021d1:	c3                   	ret    

c00021d2 <sync_window>:
c00021d2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021d6:	74 58                	je     c0002230 <sync_window+0x5e>
c00021d8:	56                   	push   esi
c00021d9:	53                   	push   ebx
c00021da:	8d 70 34             	lea    esi,[eax+0x34]
c00021dd:	51                   	push   ecx
c00021de:	89 c3                	mov    ebx,eax
c00021e0:	6a 01                	push   0x1
c00021e2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021e5:	56                   	push   esi
c00021e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ea:	50                   	push   eax
c00021eb:	e8 ea fa ff ff       	call   c0001cda <disk_write>
c00021f0:	83 c4 10             	add    esp,0x10
c00021f3:	ba 01 00 00 00       	mov    edx,0x1
c00021f8:	85 c0                	test   eax,eax
c00021fa:	75 2e                	jne    c000222a <sync_window+0x58>
c00021fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00021ff:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002202:	89 c1                	mov    ecx,eax
c0002204:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002208:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000220b:	39 d1                	cmp    ecx,edx
c000220d:	73 19                	jae    c0002228 <sync_window+0x56>
c000220f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002213:	75 13                	jne    c0002228 <sync_window+0x56>
c0002215:	6a 01                	push   0x1
c0002217:	01 d0                	add    eax,edx
c0002219:	50                   	push   eax
c000221a:	56                   	push   esi
c000221b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221f:	50                   	push   eax
c0002220:	e8 b5 fa ff ff       	call   c0001cda <disk_write>
c0002225:	83 c4 10             	add    esp,0x10
c0002228:	31 d2                	xor    edx,edx
c000222a:	89 d0                	mov    eax,edx
c000222c:	5a                   	pop    edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	c3                   	ret    
c0002230:	31 d2                	xor    edx,edx
c0002232:	89 d0                	mov    eax,edx
c0002234:	c3                   	ret    

c0002235 <move_window>:
c0002235:	57                   	push   edi
c0002236:	56                   	push   esi
c0002237:	31 f6                	xor    esi,esi
c0002239:	53                   	push   ebx
c000223a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000223d:	74 32                	je     c0002271 <move_window+0x3c>
c000223f:	89 c3                	mov    ebx,eax
c0002241:	89 d7                	mov    edi,edx
c0002243:	e8 8a ff ff ff       	call   c00021d2 <sync_window>
c0002248:	89 c6                	mov    esi,eax
c000224a:	85 c0                	test   eax,eax
c000224c:	75 23                	jne    c0002271 <move_window+0x3c>
c000224e:	6a 01                	push   0x1
c0002250:	8d 43 34             	lea    eax,[ebx+0x34]
c0002253:	57                   	push   edi
c0002254:	50                   	push   eax
c0002255:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002259:	50                   	push   eax
c000225a:	e8 65 fa ff ff       	call   c0001cc4 <disk_read>
c000225f:	83 c4 10             	add    esp,0x10
c0002262:	85 c0                	test   eax,eax
c0002264:	74 08                	je     c000226e <move_window+0x39>
c0002266:	be 01 00 00 00       	mov    esi,0x1
c000226b:	83 cf ff             	or     edi,0xffffffff
c000226e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002271:	89 f0                	mov    eax,esi
c0002273:	5b                   	pop    ebx
c0002274:	5e                   	pop    esi
c0002275:	5f                   	pop    edi
c0002276:	c3                   	ret    

c0002277 <check_fs>:
c0002277:	53                   	push   ebx
c0002278:	89 c3                	mov    ebx,eax
c000227a:	83 ec 08             	sub    esp,0x8
c000227d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002281:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002288:	e8 a8 ff ff ff       	call   c0002235 <move_window>
c000228d:	ba 04 00 00 00       	mov    edx,0x4
c0002292:	85 c0                	test   eax,eax
c0002294:	75 68                	jne    c00022fe <check_fs+0x87>
c0002296:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000229c:	e8 6e fa ff ff       	call   c0001d0f <ld_word>
c00022a1:	ba 03 00 00 00       	mov    edx,0x3
c00022a6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022aa:	75 52                	jne    c00022fe <check_fs+0x87>
c00022ac:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022af:	8d 50 18             	lea    edx,[eax+0x18]
c00022b2:	80 fa 01             	cmp    dl,0x1
c00022b5:	76 09                	jbe    c00022c0 <check_fs+0x49>
c00022b7:	ba 02 00 00 00       	mov    edx,0x2
c00022bc:	3c eb                	cmp    al,0xeb
c00022be:	75 3e                	jne    c00022fe <check_fs+0x87>
c00022c0:	ba 04 0a 02 c0       	mov    edx,0xc0020a04
c00022c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022c8:	b9 03 00 00 00       	mov    ecx,0x3
c00022cd:	e8 89 fa ff ff       	call   c0001d5b <mem_cmp>
c00022d2:	31 d2                	xor    edx,edx
c00022d4:	85 c0                	test   eax,eax
c00022d6:	74 26                	je     c00022fe <check_fs+0x87>
c00022d8:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c00022dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022e3:	b9 05 00 00 00       	mov    ecx,0x5
c00022e8:	e8 6e fa ff ff       	call   c0001d5b <mem_cmp>
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	85 c0                	test   eax,eax
c00022f1:	74 0b                	je     c00022fe <check_fs+0x87>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00022f9:	0f 95 c2             	setne  dl
c00022fc:	01 d2                	add    edx,edx
c00022fe:	89 d0                	mov    eax,edx
c0002300:	83 c4 08             	add    esp,0x8
c0002303:	5b                   	pop    ebx
c0002304:	c3                   	ret    

c0002305 <find_volume>:
c0002305:	55                   	push   ebp
c0002306:	57                   	push   edi
c0002307:	56                   	push   esi
c0002308:	89 c6                	mov    esi,eax
c000230a:	53                   	push   ebx
c000230b:	89 d3                	mov    ebx,edx
c000230d:	83 ec 2c             	sub    esp,0x2c
c0002310:	31 d2                	xor    edx,edx
c0002312:	e8 60 ff ff ff       	call   c0002277 <check_fs>
c0002317:	83 f8 02             	cmp    eax,0x2
c000231a:	74 06                	je     c0002322 <find_volume+0x1d>
c000231c:	77 62                	ja     c0002380 <find_volume+0x7b>
c000231e:	85 db                	test   ebx,ebx
c0002320:	74 5e                	je     c0002380 <find_volume+0x7b>
c0002322:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002326:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000232c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002336:	89 cf                	mov    edi,ecx
c0002338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000233c:	89 e8                	mov    eax,ebp
c000233e:	83 c5 10             	add    ebp,0x10
c0002341:	e8 d6 f9 ff ff       	call   c0001d1c <ld_dword>
c0002346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000234a:	89 01                	mov    DWORD PTR [ecx],eax
c000234c:	83 c1 04             	add    ecx,0x4
c000234f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002353:	75 e3                	jne    c0002338 <find_volume+0x33>
c0002355:	31 ed                	xor    ebp,ebp
c0002357:	85 db                	test   ebx,ebx
c0002359:	74 03                	je     c000235e <find_volume+0x59>
c000235b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000235e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002361:	b8 03 00 00 00       	mov    eax,0x3
c0002366:	85 d2                	test   edx,edx
c0002368:	74 0c                	je     c0002376 <find_volume+0x71>
c000236a:	89 f0                	mov    eax,esi
c000236c:	e8 06 ff ff ff       	call   c0002277 <check_fs>
c0002371:	83 f8 01             	cmp    eax,0x1
c0002374:	76 0a                	jbe    c0002380 <find_volume+0x7b>
c0002376:	85 db                	test   ebx,ebx
c0002378:	75 06                	jne    c0002380 <find_volume+0x7b>
c000237a:	45                   	inc    ebp
c000237b:	83 fd 03             	cmp    ebp,0x3
c000237e:	76 de                	jbe    c000235e <find_volume+0x59>
c0002380:	83 c4 2c             	add    esp,0x2c
c0002383:	5b                   	pop    ebx
c0002384:	5e                   	pop    esi
c0002385:	5f                   	pop    edi
c0002386:	5d                   	pop    ebp
c0002387:	c3                   	ret    

c0002388 <mount_volume>:
c0002388:	55                   	push   ebp
c0002389:	89 d5                	mov    ebp,edx
c000238b:	57                   	push   edi
c000238c:	89 cf                	mov    edi,ecx
c000238e:	56                   	push   esi
c000238f:	53                   	push   ebx
c0002390:	bb 0b 00 00 00       	mov    ebx,0xb
c0002395:	83 ec 2c             	sub    esp,0x2c
c0002398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000239e:	e8 9b fd ff ff       	call   c000213e <get_ldnumber>
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 88 d6 02 00 00    	js     c0002681 <mount_volume+0x2f9>
c00023ab:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023b2:	89 c2                	mov    edx,eax
c00023b4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023b9:	85 f6                	test   esi,esi
c00023bb:	0f 84 c0 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023c1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023c4:	83 e7 fe             	and    edi,0xfffffffe
c00023c7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ca:	74 3a                	je     c0002406 <mount_volume+0x7e>
c00023cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023d0:	83 ec 0c             	sub    esp,0xc
c00023d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023d7:	50                   	push   eax
c00023d8:	e8 e1 f8 ff ff       	call   c0001cbe <disk_status>
c00023dd:	83 c4 10             	add    esp,0x10
c00023e0:	a8 01                	test   al,0x1
c00023e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023e6:	75 1e                	jne    c0002406 <mount_volume+0x7e>
c00023e8:	31 db                	xor    ebx,ebx
c00023ea:	89 f9                	mov    ecx,edi
c00023ec:	84 c9                	test   cl,cl
c00023ee:	0f 84 8d 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023f4:	a8 04                	test   al,0x4
c00023f6:	0f 84 85 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0002401:	e9 7b 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002406:	83 ec 0c             	sub    esp,0xc
c0002409:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000240c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000240f:	0f b6 c2             	movzx  eax,dl
c0002412:	bb 03 00 00 00       	mov    ebx,0x3
c0002417:	50                   	push   eax
c0002418:	e8 a4 f8 ff ff       	call   c0001cc1 <disk_initialize>
c000241d:	83 c4 10             	add    esp,0x10
c0002420:	a8 01                	test   al,0x1
c0002422:	0f 85 59 02 00 00    	jne    c0002681 <mount_volume+0x2f9>
c0002428:	89 f9                	mov    ecx,edi
c000242a:	84 c9                	test   cl,cl
c000242c:	74 04                	je     c0002432 <mount_volume+0xaa>
c000242e:	a8 04                	test   al,0x4
c0002430:	75 ca                	jne    c00023fc <mount_volume+0x74>
c0002432:	31 d2                	xor    edx,edx
c0002434:	89 f0                	mov    eax,esi
c0002436:	bb 01 00 00 00       	mov    ebx,0x1
c000243b:	e8 c5 fe ff ff       	call   c0002305 <find_volume>
c0002440:	83 f8 04             	cmp    eax,0x4
c0002443:	0f 84 38 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c0002449:	83 f8 01             	cmp    eax,0x1
c000244c:	76 0a                	jbe    c0002458 <mount_volume+0xd0>
c000244e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002453:	e9 29 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002458:	8d 46 3f             	lea    eax,[esi+0x3f]
c000245b:	e8 af f8 ff ff       	call   c0001d0f <ld_word>
c0002460:	66 3d 00 02          	cmp    ax,0x200
c0002464:	75 e8                	jne    c000244e <mount_volume+0xc6>
c0002466:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002469:	e8 a1 f8 ff ff       	call   c0001d0f <ld_word>
c000246e:	0f b7 c0             	movzx  eax,ax
c0002471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002475:	85 c0                	test   eax,eax
c0002477:	75 0c                	jne    c0002485 <mount_volume+0xfd>
c0002479:	8d 46 58             	lea    eax,[esi+0x58]
c000247c:	e8 9b f8 ff ff       	call   c0001d1c <ld_dword>
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002488:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000248b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000248f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002493:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002496:	89 e8                	mov    eax,ebp
c0002498:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000249b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000249e:	3c 01                	cmp    al,0x1
c00024a0:	77 ac                	ja     c000244e <mount_volume+0xc6>
c00024a2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024a6:	89 c3                	mov    ebx,eax
c00024a8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024ac:	66 85 c0             	test   ax,ax
c00024af:	74 9d                	je     c000244e <mount_volume+0xc6>
c00024b1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024b4:	85 d8                	test   eax,ebx
c00024b6:	75 96                	jne    c000244e <mount_volume+0xc6>
c00024b8:	8d 46 45             	lea    eax,[esi+0x45]
c00024bb:	e8 4f f8 ff ff       	call   c0001d0f <ld_word>
c00024c0:	89 c7                	mov    edi,eax
c00024c2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024c6:	a8 0f                	test   al,0xf
c00024c8:	75 84                	jne    c000244e <mount_volume+0xc6>
c00024ca:	8d 46 47             	lea    eax,[esi+0x47]
c00024cd:	e8 3d f8 ff ff       	call   c0001d0f <ld_word>
c00024d2:	0f b7 d0             	movzx  edx,ax
c00024d5:	85 d2                	test   edx,edx
c00024d7:	75 0a                	jne    c00024e3 <mount_volume+0x15b>
c00024d9:	8d 46 54             	lea    eax,[esi+0x54]
c00024dc:	e8 3b f8 ff ff       	call   c0001d1c <ld_dword>
c00024e1:	89 c2                	mov    edx,eax
c00024e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024e7:	8d 46 42             	lea    eax,[esi+0x42]
c00024ea:	e8 20 f8 ff ff       	call   c0001d0f <ld_word>
c00024ef:	66 85 c0             	test   ax,ax
c00024f2:	0f 84 56 ff ff ff    	je     c000244e <mount_volume+0xc6>
c00024f8:	89 e9                	mov    ecx,ebp
c00024fa:	0f b7 c0             	movzx  eax,ax
c00024fd:	0f b6 e9             	movzx  ebp,cl
c0002500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002508:	89 f8                	mov    eax,edi
c000250a:	0f af cd             	imul   ecx,ebp
c000250d:	66 c1 e8 04          	shr    ax,0x4
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b7 c0             	movzx  eax,ax
c0002518:	01 c8                	add    eax,ecx
c000251a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000251e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002522:	39 c2                	cmp    edx,eax
c0002524:	0f 82 24 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000252a:	29 c2                	sub    edx,eax
c000252c:	89 d5                	mov    ebp,edx
c000252e:	89 d0                	mov    eax,edx
c0002530:	31 d2                	xor    edx,edx
c0002532:	f7 f3                	div    ebx
c0002534:	39 dd                	cmp    ebp,ebx
c0002536:	0f 82 12 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000253c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002541:	0f 87 07 ff ff ff    	ja     c000244e <mount_volume+0xc6>
c0002547:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000254c:	0f 86 1f 01 00 00    	jbe    c0002671 <mount_volume+0x2e9>
c0002552:	bb 03 00 00 00       	mov    ebx,0x3
c0002557:	8d 68 02             	lea    ebp,[eax+0x2]
c000255a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002562:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002566:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002569:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000256c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002570:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002573:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002577:	83 fb 03             	cmp    ebx,0x3
c000257a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000257d:	75 21                	jne    c00025a0 <mount_volume+0x218>
c000257f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002582:	e8 88 f7 ff ff       	call   c0001d0f <ld_word>
c0002587:	66 09 c7             	or     di,ax
c000258a:	0f 85 be fe ff ff    	jne    c000244e <mount_volume+0xc6>
c0002590:	8d 46 60             	lea    eax,[esi+0x60]
c0002593:	c1 e5 02             	shl    ebp,0x2
c0002596:	e8 81 f7 ff ff       	call   c0001d1c <ld_dword>
c000259b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000259e:	eb 22                	jmp    c00025c2 <mount_volume+0x23a>
c00025a0:	66 85 ff             	test   di,di
c00025a3:	0f 84 a5 fe ff ff    	je     c000244e <mount_volume+0xc6>
c00025a9:	01 c8                	add    eax,ecx
c00025ab:	83 fb 02             	cmp    ebx,0x2
c00025ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b1:	75 04                	jne    c00025b7 <mount_volume+0x22f>
c00025b3:	01 ed                	add    ebp,ebp
c00025b5:	eb 0b                	jmp    c00025c2 <mount_volume+0x23a>
c00025b7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025bb:	83 e5 01             	and    ebp,0x1
c00025be:	d1 e8                	shr    eax,1
c00025c0:	01 c5                	add    ebp,eax
c00025c2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025c8:	c1 ed 09             	shr    ebp,0x9
c00025cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025cf:	0f 87 79 fe ff ff    	ja     c000244e <mount_volume+0xc6>
c00025d5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025dc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025e3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025e7:	83 fb 03             	cmp    ebx,0x3
c00025ea:	75 6e                	jne    c000265a <mount_volume+0x2d2>
c00025ec:	8d 46 64             	lea    eax,[esi+0x64]
c00025ef:	e8 1b f7 ff ff       	call   c0001d0f <ld_word>
c00025f4:	66 48                	dec    ax
c00025f6:	75 62                	jne    c000265a <mount_volume+0x2d2>
c00025f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00025fc:	89 f0                	mov    eax,esi
c00025fe:	42                   	inc    edx
c00025ff:	e8 31 fc ff ff       	call   c0002235 <move_window>
c0002604:	85 c0                	test   eax,eax
c0002606:	75 52                	jne    c000265a <mount_volume+0x2d2>
c0002608:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000260c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002612:	e8 f8 f6 ff ff       	call   c0001d0f <ld_word>
c0002617:	66 3d 55 aa          	cmp    ax,0xaa55
c000261b:	75 3d                	jne    c000265a <mount_volume+0x2d2>
c000261d:	8d 46 34             	lea    eax,[esi+0x34]
c0002620:	e8 f7 f6 ff ff       	call   c0001d1c <ld_dword>
c0002625:	3d 52 52 61 41       	cmp    eax,0x41615252
c000262a:	75 2e                	jne    c000265a <mount_volume+0x2d2>
c000262c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002632:	e8 e5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002637:	3d 72 72 41 61       	cmp    eax,0x61417272
c000263c:	75 1c                	jne    c000265a <mount_volume+0x2d2>
c000263e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002644:	e8 d3 f6 ff ff       	call   c0001d1c <ld_dword>
c0002649:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000264c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002652:	e8 c5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000265a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002660:	88 1e                	mov    BYTE PTR [esi],bl
c0002662:	40                   	inc    eax
c0002663:	31 db                	xor    ebx,ebx
c0002665:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000266b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000266f:	eb 10                	jmp    c0002681 <mount_volume+0x2f9>
c0002671:	31 db                	xor    ebx,ebx
c0002673:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002678:	0f 97 c3             	seta   bl
c000267b:	43                   	inc    ebx
c000267c:	e9 d6 fe ff ff       	jmp    c0002557 <mount_volume+0x1cf>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	89 d8                	mov    eax,ebx
c0002686:	5b                   	pop    ebx
c0002687:	5e                   	pop    esi
c0002688:	5f                   	pop    edi
c0002689:	5d                   	pop    ebp
c000268a:	c3                   	ret    

c000268b <put_fat>:
c000268b:	55                   	push   ebp
c000268c:	bd 02 00 00 00       	mov    ebp,0x2
c0002691:	57                   	push   edi
c0002692:	56                   	push   esi
c0002693:	53                   	push   ebx
c0002694:	83 ec 1c             	sub    esp,0x1c
c0002697:	83 fa 01             	cmp    edx,0x1
c000269a:	0f 86 31 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026a3:	0f 86 28 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a9:	89 c6                	mov    esi,eax
c00026ab:	89 cf                	mov    edi,ecx
c00026ad:	8a 00                	mov    al,BYTE PTR [eax]
c00026af:	89 d3                	mov    ebx,edx
c00026b1:	3c 02                	cmp    al,0x2
c00026b3:	0f 84 ac 00 00 00    	je     c0002765 <put_fat+0xda>
c00026b9:	3c 03                	cmp    al,0x3
c00026bb:	0f 84 d1 00 00 00    	je     c0002792 <put_fat+0x107>
c00026c1:	fe c8                	dec    al
c00026c3:	0f 85 08 01 00 00    	jne    c00027d1 <put_fat+0x146>
c00026c9:	89 d1                	mov    ecx,edx
c00026cb:	89 f0                	mov    eax,esi
c00026cd:	d1 e9                	shr    ecx,1
c00026cf:	01 d1                	add    ecx,edx
c00026d1:	89 ca                	mov    edx,ecx
c00026d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026d7:	c1 ea 09             	shr    edx,0x9
c00026da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026dd:	e8 53 fb ff ff       	call   c0002235 <move_window>
c00026e2:	89 c5                	mov    ebp,eax
c00026e4:	85 c0                	test   eax,eax
c00026e6:	0f 85 e5 00 00 00    	jne    c00027d1 <put_fat+0x146>
c00026ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f0:	8d 46 34             	lea    eax,[esi+0x34]
c00026f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026f7:	8d 41 01             	lea    eax,[ecx+0x1]
c00026fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002704:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002708:	89 f8                	mov    eax,edi
c000270a:	83 e3 01             	and    ebx,0x1
c000270d:	74 0c                	je     c000271b <put_fat+0x90>
c000270f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002711:	89 f8                	mov    eax,edi
c0002713:	83 e2 0f             	and    edx,0xf
c0002716:	c1 e0 04             	shl    eax,0x4
c0002719:	09 d0                	or     eax,edx
c000271b:	88 01                	mov    BYTE PTR [ecx],al
c000271d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002721:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002725:	c1 ea 09             	shr    edx,0x9
c0002728:	89 f0                	mov    eax,esi
c000272a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000272d:	e8 03 fb ff ff       	call   c0002235 <move_window>
c0002732:	89 c5                	mov    ebp,eax
c0002734:	85 c0                	test   eax,eax
c0002736:	0f 85 95 00 00 00    	jne    c00027d1 <put_fat+0x146>
c000273c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002740:	25 ff 01 00 00       	and    eax,0x1ff
c0002745:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002749:	85 db                	test   ebx,ebx
c000274b:	74 07                	je     c0002754 <put_fat+0xc9>
c000274d:	c1 ef 04             	shr    edi,0x4
c0002750:	89 f9                	mov    ecx,edi
c0002752:	eb 0d                	jmp    c0002761 <put_fat+0xd6>
c0002754:	8a 08                	mov    cl,BYTE PTR [eax]
c0002756:	c1 ef 08             	shr    edi,0x8
c0002759:	83 e1 f0             	and    ecx,0xfffffff0
c000275c:	83 e7 0f             	and    edi,0xf
c000275f:	09 f9                	or     ecx,edi
c0002761:	88 08                	mov    BYTE PTR [eax],cl
c0002763:	eb 27                	jmp    c000278c <put_fat+0x101>
c0002765:	c1 ea 08             	shr    edx,0x8
c0002768:	89 f0                	mov    eax,esi
c000276a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000276d:	e8 c3 fa ff ff       	call   c0002235 <move_window>
c0002772:	89 c5                	mov    ebp,eax
c0002774:	85 c0                	test   eax,eax
c0002776:	75 59                	jne    c00027d1 <put_fat+0x146>
c0002778:	01 db                	add    ebx,ebx
c000277a:	0f b7 d7             	movzx  edx,di
c000277d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002783:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002787:	e8 a8 f5 ff ff       	call   c0001d34 <st_word>
c000278c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002790:	eb 3f                	jmp    c00027d1 <put_fat+0x146>
c0002792:	c1 ea 07             	shr    edx,0x7
c0002795:	89 f0                	mov    eax,esi
c0002797:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279a:	e8 96 fa ff ff       	call   c0002235 <move_window>
c000279f:	89 c5                	mov    ebp,eax
c00027a1:	85 c0                	test   eax,eax
c00027a3:	75 2c                	jne    c00027d1 <put_fat+0x146>
c00027a5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027ab:	c1 e3 02             	shl    ebx,0x2
c00027ae:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027b4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027b8:	89 d8                	mov    eax,ebx
c00027ba:	e8 5d f5 ff ff       	call   c0001d1c <ld_dword>
c00027bf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027c4:	09 f8                	or     eax,edi
c00027c6:	89 c2                	mov    edx,eax
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 69 f5 ff ff       	call   c0001d38 <st_dword>
c00027cf:	eb bb                	jmp    c000278c <put_fat+0x101>
c00027d1:	83 c4 1c             	add    esp,0x1c
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	5b                   	pop    ebx
c00027d7:	5e                   	pop    esi
c00027d8:	5f                   	pop    edi
c00027d9:	5d                   	pop    ebp
c00027da:	c3                   	ret    

c00027db <dir_clear>:
c00027db:	55                   	push   ebp
c00027dc:	57                   	push   edi
c00027dd:	56                   	push   esi
c00027de:	89 c6                	mov    esi,eax
c00027e0:	53                   	push   ebx
c00027e1:	83 ec 1c             	sub    esp,0x1c
c00027e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e8:	e8 e5 f9 ff ff       	call   c00021d2 <sync_window>
c00027ed:	85 c0                	test   eax,eax
c00027ef:	0f 85 c0 00 00 00    	jne    c00028b5 <dir_clear+0xda>
c00027f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f9:	89 f0                	mov    eax,esi
c00027fb:	e8 55 f7 ff ff       	call   c0001f55 <clst2sect>
c0002800:	31 d2                	xor    edx,edx
c0002802:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002805:	89 c5                	mov    ebp,eax
c0002807:	b9 00 02 00 00       	mov    ecx,0x200
c000280c:	8d 46 34             	lea    eax,[esi+0x34]
c000280f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002813:	e8 38 f5 ff ff       	call   c0001d50 <mem_set>
c0002818:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000281c:	c1 e3 09             	shl    ebx,0x9
c000281f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002825:	76 1b                	jbe    c0002842 <dir_clear+0x67>
c0002827:	bb 00 80 00 00       	mov    ebx,0x8000
c000282c:	eb 14                	jmp    c0002842 <dir_clear+0x67>
c000282e:	83 ec 0c             	sub    esp,0xc
c0002831:	53                   	push   ebx
c0002832:	e8 25 32 00 00       	call   c0005a5c <ff_memalloc>
c0002837:	83 c4 10             	add    esp,0x10
c000283a:	89 c7                	mov    edi,eax
c000283c:	85 c0                	test   eax,eax
c000283e:	75 7c                	jne    c00028bc <dir_clear+0xe1>
c0002840:	d1 eb                	shr    ebx,1
c0002842:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002848:	77 e4                	ja     c000282e <dir_clear+0x53>
c000284a:	31 db                	xor    ebx,ebx
c000284c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002850:	39 d8                	cmp    eax,ebx
c0002852:	76 53                	jbe    c00028a7 <dir_clear+0xcc>
c0002854:	6a 01                	push   0x1
c0002856:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002859:	50                   	push   eax
c000285a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002862:	50                   	push   eax
c0002863:	e8 72 f4 ff ff       	call   c0001cda <disk_write>
c0002868:	83 c4 10             	add    esp,0x10
c000286b:	85 c0                	test   eax,eax
c000286d:	75 38                	jne    c00028a7 <dir_clear+0xcc>
c000286f:	43                   	inc    ebx
c0002870:	eb da                	jmp    c000284c <dir_clear+0x71>
c0002872:	52                   	push   edx
c0002873:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002876:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000287a:	50                   	push   eax
c000287b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287f:	57                   	push   edi
c0002880:	50                   	push   eax
c0002881:	e8 54 f4 ff ff       	call   c0001cda <disk_write>
c0002886:	83 c4 10             	add    esp,0x10
c0002889:	85 c0                	test   eax,eax
c000288b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000288f:	75 0a                	jne    c000289b <dir_clear+0xc0>
c0002891:	01 d3                	add    ebx,edx
c0002893:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002897:	39 d8                	cmp    eax,ebx
c0002899:	77 d7                	ja     c0002872 <dir_clear+0x97>
c000289b:	83 ec 0c             	sub    esp,0xc
c000289e:	57                   	push   edi
c000289f:	e8 d0 31 00 00       	call   c0005a74 <ff_memfree>
c00028a4:	83 c4 10             	add    esp,0x10
c00028a7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ab:	39 d8                	cmp    eax,ebx
c00028ad:	0f 95 c0             	setne  al
c00028b0:	0f b6 c0             	movzx  eax,al
c00028b3:	eb 19                	jmp    c00028ce <dir_clear+0xf3>
c00028b5:	b8 01 00 00 00       	mov    eax,0x1
c00028ba:	eb 12                	jmp    c00028ce <dir_clear+0xf3>
c00028bc:	89 d9                	mov    ecx,ebx
c00028be:	31 d2                	xor    edx,edx
c00028c0:	e8 8b f4 ff ff       	call   c0001d50 <mem_set>
c00028c5:	89 da                	mov    edx,ebx
c00028c7:	31 db                	xor    ebx,ebx
c00028c9:	c1 ea 09             	shr    edx,0x9
c00028cc:	eb c5                	jmp    c0002893 <dir_clear+0xb8>
c00028ce:	83 c4 1c             	add    esp,0x1c
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <create_name>:
c00028d6:	55                   	push   ebp
c00028d7:	89 d5                	mov    ebp,edx
c00028d9:	57                   	push   edi
c00028da:	89 c7                	mov    edi,eax
c00028dc:	56                   	push   esi
c00028dd:	31 f6                	xor    esi,esi
c00028df:	53                   	push   ebx
c00028e0:	83 ec 3c             	sub    esp,0x3c
c00028e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00028f6:	e8 9b f4 ff ff       	call   c0001d96 <tchar2uni>
c00028fb:	89 c3                	mov    ebx,eax
c00028fd:	83 f8 ff             	cmp    eax,0xffffffff
c0002900:	75 0a                	jne    c000290c <create_name+0x36>
c0002902:	b8 06 00 00 00       	mov    eax,0x6
c0002907:	e9 9e 02 00 00       	jmp    c0002baa <create_name+0x2d4>
c000290c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002911:	76 0c                	jbe    c000291f <create_name+0x49>
c0002913:	c1 e8 10             	shr    eax,0x10
c0002916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000291a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000291e:	46                   	inc    esi
c000291f:	66 83 fb 1f          	cmp    bx,0x1f
c0002923:	76 4f                	jbe    c0002974 <create_name+0x9e>
c0002925:	66 83 fb 5c          	cmp    bx,0x5c
c0002929:	74 35                	je     c0002960 <create_name+0x8a>
c000292b:	66 83 fb 2f          	cmp    bx,0x2f
c000292f:	74 2f                	je     c0002960 <create_name+0x8a>
c0002931:	66 83 fb 7f          	cmp    bx,0x7f
c0002935:	77 11                	ja     c0002948 <create_name+0x72>
c0002937:	0f b7 d3             	movzx  edx,bx
c000293a:	b8 a2 e8 01 c0       	mov    eax,0xc001e8a2
c000293f:	e8 3a f4 ff ff       	call   c0001d7e <chk_chr>
c0002944:	85 c0                	test   eax,eax
c0002946:	75 ba                	jne    c0002902 <create_name+0x2c>
c0002948:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000294e:	77 b2                	ja     c0002902 <create_name+0x2c>
c0002950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002954:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002958:	46                   	inc    esi
c0002959:	eb 97                	jmp    c00028f2 <create_name+0x1c>
c000295b:	40                   	inc    eax
c000295c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	8a 10                	mov    dl,BYTE PTR [eax]
c0002966:	80 fa 2f             	cmp    dl,0x2f
c0002969:	74 f0                	je     c000295b <create_name+0x85>
c000296b:	80 fa 5c             	cmp    dl,0x5c
c000296e:	74 eb                	je     c000295b <create_name+0x85>
c0002970:	31 db                	xor    ebx,ebx
c0002972:	eb 02                	jmp    c0002976 <create_name+0xa0>
c0002974:	b3 04                	mov    bl,0x4
c0002976:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000297a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000297d:	85 f6                	test   esi,esi
c000297f:	74 18                	je     c0002999 <create_name+0xc3>
c0002981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002985:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000298a:	66 83 f8 20          	cmp    ax,0x20
c000298e:	74 06                	je     c0002996 <create_name+0xc0>
c0002990:	66 83 f8 2e          	cmp    ax,0x2e
c0002994:	75 03                	jne    c0002999 <create_name+0xc3>
c0002996:	4e                   	dec    esi
c0002997:	eb e4                	jmp    c000297d <create_name+0xa7>
c0002999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000299d:	31 ed                	xor    ebp,ebp
c000299f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029a5:	85 f6                	test   esi,esi
c00029a7:	0f 84 55 ff ff ff    	je     c0002902 <create_name+0x2c>
c00029ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029b4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029b8:	66 83 f8 20          	cmp    ax,0x20
c00029bc:	75 04                	jne    c00029c2 <create_name+0xec>
c00029be:	89 d5                	mov    ebp,edx
c00029c0:	eb eb                	jmp    c00029ad <create_name+0xd7>
c00029c2:	85 ed                	test   ebp,ebp
c00029c4:	75 06                	jne    c00029cc <create_name+0xf6>
c00029c6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ca:	75 08                	jne    c00029d4 <create_name+0xfe>
c00029cc:	83 cb 03             	or     ebx,0x3
c00029cf:	eb 03                	jmp    c00029d4 <create_name+0xfe>
c00029d1:	4e                   	dec    esi
c00029d2:	74 0c                	je     c00029e0 <create_name+0x10a>
c00029d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029de:	75 f1                	jne    c00029d1 <create_name+0xfb>
c00029e0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029e5:	8d 47 20             	lea    eax,[edi+0x20]
c00029e8:	ba 20 00 00 00       	mov    edx,0x20
c00029ed:	e8 5e f3 ff ff       	call   c0001d50 <mem_set>
c00029f2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00029fa:	31 c9                	xor    ecx,ecx
c00029fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a01:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a0c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a10:	66 85 ed             	test   bp,bp
c0002a13:	0f 84 30 01 00 00    	je     c0002b49 <create_name+0x273>
c0002a19:	66 83 fd 20          	cmp    bp,0x20
c0002a1d:	74 10                	je     c0002a2f <create_name+0x159>
c0002a1f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a23:	75 13                	jne    c0002a38 <create_name+0x162>
c0002a25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a29:	0f 84 6b 01 00 00    	je     c0002b9a <create_name+0x2c4>
c0002a2f:	83 cb 03             	or     ebx,0x3
c0002a32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a36:	eb c9                	jmp    c0002a01 <create_name+0x12b>
c0002a38:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a3c:	73 0b                	jae    c0002a49 <create_name+0x173>
c0002a3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a42:	75 47                	jne    c0002a8b <create_name+0x1b5>
c0002a44:	e9 51 01 00 00       	jmp    c0002b9a <create_name+0x2c4>
c0002a49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a4e:	75 10                	jne    c0002a60 <create_name+0x18a>
c0002a50:	83 cb 03             	or     ebx,0x3
c0002a53:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a5b:	e9 e9 00 00 00       	jmp    c0002b49 <create_name+0x273>
c0002a60:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a64:	74 0d                	je     c0002a73 <create_name+0x19d>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a6d:	0f 87 d6 00 00 00    	ja     c0002b49 <create_name+0x273>
c0002a73:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a7c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a84:	b9 08 00 00 00       	mov    ecx,0x8
c0002a89:	eb a7                	jmp    c0002a32 <create_name+0x15c>
c0002a8b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a8f:	76 68                	jbe    c0002af9 <create_name+0x223>
c0002a91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002a95:	88 da                	mov    dl,bl
c0002a97:	83 ca 02             	or     edx,0x2
c0002a9a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002a9e:	50                   	push   eax
c0002a9f:	50                   	push   eax
c0002aa0:	68 b5 01 00 00       	push   0x1b5
c0002aa5:	55                   	push   ebp
c0002aa6:	e8 e1 2f 00 00       	call   c0005a8c <ff_uni2oem>
c0002aab:	83 c4 10             	add    esp,0x10
c0002aae:	89 c5                	mov    ebp,eax
c0002ab0:	a8 80                	test   al,0x80
c0002ab2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ab6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aba:	74 0c                	je     c0002ac8 <create_name+0x1f2>
c0002abc:	83 e5 7f             	and    ebp,0x7f
c0002abf:	0f b6 ad 60 e9 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe16a0]
c0002ac6:	eb 2a                	jmp    c0002af2 <create_name+0x21c>
c0002ac8:	66 3d ff 00          	cmp    ax,0xff
c0002acc:	76 24                	jbe    c0002af2 <create_name+0x21c>
c0002ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad2:	48                   	dec    eax
c0002ad3:	39 c8                	cmp    eax,ecx
c0002ad5:	77 0c                	ja     c0002ae3 <create_name+0x20d>
c0002ad7:	83 cb 03             	or     ebx,0x3
c0002ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ade:	e9 4f ff ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002ae3:	89 e8                	mov    eax,ebp
c0002ae5:	88 d3                	mov    bl,dl
c0002ae7:	66 c1 e8 08          	shr    ax,0x8
c0002aeb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aef:	41                   	inc    ecx
c0002af0:	eb 4b                	jmp    c0002b3d <create_name+0x267>
c0002af2:	88 d3                	mov    bl,dl
c0002af4:	66 85 ed             	test   bp,bp
c0002af7:	74 19                	je     c0002b12 <create_name+0x23c>
c0002af9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002afd:	0f b7 d5             	movzx  edx,bp
c0002b00:	b8 ab e8 01 c0       	mov    eax,0xc001e8ab
c0002b05:	e8 74 f2 ff ff       	call   c0001d7e <chk_chr>
c0002b0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b0e:	85 c0                	test   eax,eax
c0002b10:	74 0a                	je     c0002b1c <create_name+0x246>
c0002b12:	83 cb 03             	or     ebx,0x3
c0002b15:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b1a:	eb 21                	jmp    c0002b3d <create_name+0x267>
c0002b1c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b1f:	66 83 f8 19          	cmp    ax,0x19
c0002b23:	77 07                	ja     c0002b2c <create_name+0x256>
c0002b25:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b2a:	eb 11                	jmp    c0002b3d <create_name+0x267>
c0002b2c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 08                	ja     c0002b3d <create_name+0x267>
c0002b35:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b3a:	83 ed 20             	sub    ebp,0x20
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b43:	41                   	inc    ecx
c0002b44:	e9 e9 fe ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002b49:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b4d:	75 04                	jne    c0002b53 <create_name+0x27d>
c0002b4f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b53:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b58:	75 05                	jne    c0002b5f <create_name+0x289>
c0002b5a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b63:	83 e0 0c             	and    eax,0xc
c0002b66:	3c 0c                	cmp    al,0xc
c0002b68:	74 0b                	je     c0002b75 <create_name+0x29f>
c0002b6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b6e:	83 e0 03             	and    eax,0x3
c0002b71:	3c 03                	cmp    al,0x3
c0002b73:	75 05                	jne    c0002b7a <create_name+0x2a4>
c0002b75:	83 cb 02             	or     ebx,0x2
c0002b78:	eb 19                	jmp    c0002b93 <create_name+0x2bd>
c0002b7a:	f6 c3 02             	test   bl,0x2
c0002b7d:	75 14                	jne    c0002b93 <create_name+0x2bd>
c0002b7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b84:	74 03                	je     c0002b89 <create_name+0x2b3>
c0002b86:	83 cb 10             	or     ebx,0x10
c0002b89:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b8e:	74 03                	je     c0002b93 <create_name+0x2bd>
c0002b90:	83 cb 08             	or     ebx,0x8
c0002b93:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002b96:	31 c0                	xor    eax,eax
c0002b98:	eb 10                	jmp    c0002baa <create_name+0x2d4>
c0002b9a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002b9f:	0f 85 ce fe ff ff    	jne    c0002a73 <create_name+0x19d>
c0002ba5:	e9 a6 fe ff ff       	jmp    c0002a50 <create_name+0x17a>
c0002baa:	83 c4 3c             	add    esp,0x3c
c0002bad:	5b                   	pop    ebx
c0002bae:	5e                   	pop    esi
c0002baf:	5f                   	pop    edi
c0002bb0:	5d                   	pop    ebp
c0002bb1:	c3                   	ret    

c0002bb2 <cmp_lfn>:
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 d7                	mov    edi,edx
c0002bb6:	56                   	push   esi
c0002bb7:	53                   	push   ebx
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bc2:	e8 48 f1 ff ff       	call   c0001d0f <ld_word>
c0002bc7:	66 85 c0             	test   ax,ax
c0002bca:	74 07                	je     c0002bd3 <cmp_lfn+0x21>
c0002bcc:	31 c0                	xor    eax,eax
c0002bce:	e9 9a 00 00 00       	jmp    c0002c6d <cmp_lfn+0xbb>
c0002bd3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bda:	83 e3 3f             	and    ebx,0x3f
c0002bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be5:	4b                   	dec    ebx
c0002be6:	6b db 0d             	imul   ebx,ebx,0xd
c0002be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bed:	0f b6 80 e0 e9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1620]
c0002bf4:	01 f8                	add    eax,edi
c0002bf6:	e8 14 f1 ff ff       	call   c0001d0f <ld_word>
c0002bfb:	66 85 ed             	test   bp,bp
c0002bfe:	89 c6                	mov    esi,eax
c0002c00:	74 3c                	je     c0002c3e <cmp_lfn+0x8c>
c0002c02:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c08:	77 c2                	ja     c0002bcc <cmp_lfn+0x1a>
c0002c0a:	83 ec 0c             	sub    esp,0xc
c0002c0d:	0f b7 c0             	movzx  eax,ax
c0002c10:	50                   	push   eax
c0002c11:	e8 8e 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c16:	89 c5                	mov    ebp,eax
c0002c18:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c23:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c2a:	e8 75 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2f:	83 c4 10             	add    esp,0x10
c0002c32:	39 c5                	cmp    ebp,eax
c0002c34:	75 96                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c36:	89 f5                	mov    ebp,esi
c0002c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c3c:	eb 04                	jmp    c0002c42 <cmp_lfn+0x90>
c0002c3e:	66 46                	inc    si
c0002c40:	75 8a                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c4b:	75 9c                	jne    c0002be9 <cmp_lfn+0x37>
c0002c4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c50:	74 16                	je     c0002c68 <cmp_lfn+0xb6>
c0002c52:	66 85 ed             	test   bp,bp
c0002c55:	74 11                	je     c0002c68 <cmp_lfn+0xb6>
c0002c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c60:	0f 94 c0             	sete   al
c0002c63:	0f b6 c0             	movzx  eax,al
c0002c66:	eb 05                	jmp    c0002c6d <cmp_lfn+0xbb>
c0002c68:	b8 01 00 00 00       	mov    eax,0x1
c0002c6d:	83 c4 1c             	add    esp,0x1c
c0002c70:	5b                   	pop    ebx
c0002c71:	5e                   	pop    esi
c0002c72:	5f                   	pop    edi
c0002c73:	5d                   	pop    ebp
c0002c74:	c3                   	ret    

c0002c75 <sync_fs>:
c0002c75:	56                   	push   esi
c0002c76:	53                   	push   ebx
c0002c77:	53                   	push   ebx
c0002c78:	89 c3                	mov    ebx,eax
c0002c7a:	e8 53 f5 ff ff       	call   c00021d2 <sync_window>
c0002c7f:	85 c0                	test   eax,eax
c0002c81:	0f 85 9a 00 00 00    	jne    c0002d21 <sync_fs+0xac>
c0002c87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c8a:	75 7b                	jne    c0002d07 <sync_fs+0x92>
c0002c8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c90:	75 75                	jne    c0002d07 <sync_fs+0x92>
c0002c92:	b9 00 02 00 00       	mov    ecx,0x200
c0002c97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c9a:	31 d2                	xor    edx,edx
c0002c9c:	89 f0                	mov    eax,esi
c0002c9e:	e8 ad f0 ff ff       	call   c0001d50 <mem_set>
c0002ca3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cae:	e8 81 f0 ff ff       	call   c0001d34 <st_word>
c0002cb3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb8:	89 f0                	mov    eax,esi
c0002cba:	e8 79 f0 ff ff       	call   c0001d38 <st_dword>
c0002cbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cca:	e8 69 f0 ff ff       	call   c0001d38 <st_dword>
c0002ccf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd8:	e8 5b f0 ff ff       	call   c0001d38 <st_dword>
c0002cdd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ce0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce6:	e8 4d f0 ff ff       	call   c0001d38 <st_dword>
c0002ceb:	6a 01                	push   0x1
c0002ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cf0:	40                   	inc    eax
c0002cf1:	50                   	push   eax
c0002cf2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf5:	56                   	push   esi
c0002cf6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cfa:	50                   	push   eax
c0002cfb:	e8 da ef ff ff       	call   c0001cda <disk_write>
c0002d00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d04:	83 c4 10             	add    esp,0x10
c0002d07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0b:	51                   	push   ecx
c0002d0c:	6a 00                	push   0x0
c0002d0e:	6a 00                	push   0x0
c0002d10:	50                   	push   eax
c0002d11:	e8 da ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	0f 95 c0             	setne  al
c0002d1e:	0f b6 c0             	movzx  eax,al
c0002d21:	5a                   	pop    edx
c0002d22:	5b                   	pop    ebx
c0002d23:	5e                   	pop    esi
c0002d24:	c3                   	ret    

c0002d25 <create_partition>:
c0002d25:	55                   	push   ebp
c0002d26:	0f b6 c0             	movzx  eax,al
c0002d29:	57                   	push   edi
c0002d2a:	56                   	push   esi
c0002d2b:	53                   	push   ebx
c0002d2c:	83 ec 40             	sub    esp,0x40
c0002d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d3f:	50                   	push   eax
c0002d40:	6a 01                	push   0x1
c0002d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d46:	e8 a5 ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d4b:	83 c4 10             	add    esp,0x10
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	0f 85 69 01 00 00    	jne    c0002ebf <create_partition+0x19a>
c0002d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d63:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d68:	31 d2                	xor    edx,edx
c0002d6a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d73:	f7 f3                	div    ebx
c0002d75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d7a:	76 0c                	jbe    c0002d88 <create_partition+0x63>
c0002d7c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d80:	49                   	dec    ecx
c0002d81:	75 e5                	jne    c0002d68 <create_partition+0x43>
c0002d83:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d88:	b9 00 02 00 00       	mov    ecx,0x200
c0002d8d:	31 d2                	xor    edx,edx
c0002d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d93:	e8 b8 ef ff ff       	call   c0001d50 <mem_set>
c0002d98:	b9 64 00 00 00       	mov    ecx,0x64
c0002d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da1:	31 d2                	xor    edx,edx
c0002da3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dab:	f7 f1                	div    ecx
c0002dad:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dba:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dc0:	85 c9                	test   ecx,ecx
c0002dc2:	75 34                	jne    c0002df8 <create_partition+0xd3>
c0002dc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dcd:	05 fe 01 00 00       	add    eax,0x1fe
c0002dd2:	e8 5d ef ff ff       	call   c0001d34 <st_word>
c0002dd7:	6a 01                	push   0x1
c0002dd9:	6a 00                	push   0x0
c0002ddb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002de3:	e8 f2 ee ff ff       	call   c0001cda <disk_write>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 95 c0             	setne  al
c0002df0:	0f b6 c0             	movzx  eax,al
c0002df3:	e9 cc 00 00 00       	jmp    c0002ec4 <create_partition+0x19f>
c0002df8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002dfc:	76 c6                	jbe    c0002dc4 <create_partition+0x9f>
c0002dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e06:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e09:	83 fe 64             	cmp    esi,0x64
c0002e0c:	77 0d                	ja     c0002e1b <create_partition+0xf6>
c0002e0e:	74 07                	je     c0002e17 <create_partition+0xf2>
c0002e10:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e15:	eb 04                	jmp    c0002e1b <create_partition+0xf6>
c0002e17:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e1b:	31 c0                	xor    eax,eax
c0002e1d:	89 f2                	mov    edx,esi
c0002e1f:	01 ca                	add    edx,ecx
c0002e21:	0f 92 c0             	setb   al
c0002e24:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e28:	77 04                	ja     c0002e2e <create_partition+0x109>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <create_partition+0x111>
c0002e2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e32:	29 ce                	sub    esi,ecx
c0002e34:	eb 04                	jmp    c0002e3a <create_partition+0x115>
c0002e36:	85 f6                	test   esi,esi
c0002e38:	74 8a                	je     c0002dc4 <create_partition+0x9f>
c0002e3a:	89 ca                	mov    edx,ecx
c0002e3c:	89 d8                	mov    eax,ebx
c0002e3e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e43:	e8 f0 ee ff ff       	call   c0001d38 <st_dword>
c0002e48:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e4b:	89 f2                	mov    edx,esi
c0002e4d:	83 c3 10             	add    ebx,0x10
c0002e50:	e8 e3 ee ff ff       	call   c0001d38 <st_dword>
c0002e55:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e5a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e5e:	31 d2                	xor    edx,edx
c0002e60:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e67:	89 c8                	mov    eax,ecx
c0002e69:	01 f1                	add    ecx,esi
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d5                	mov    ebp,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	45                   	inc    ebp
c0002e72:	f7 f7                	div    edi
c0002e74:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e77:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e7a:	89 c2                	mov    edx,eax
c0002e7c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e7f:	c1 ea 02             	shr    edx,0x2
c0002e82:	83 e2 c0             	and    edx,0xffffffc0
c0002e85:	09 ea                	or     edx,ebp
c0002e87:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e8c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	f7 f5                	div    ebp
c0002e93:	89 d6                	mov    esi,edx
c0002e95:	31 d2                	xor    edx,edx
c0002e97:	46                   	inc    esi
c0002e98:	f7 f7                	div    edi
c0002e9a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002e9d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ea0:	89 c7                	mov    edi,eax
c0002ea2:	c1 ef 02             	shr    edi,0x2
c0002ea5:	83 e7 c0             	and    edi,0xffffffc0
c0002ea8:	09 fe                	or     esi,edi
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002eaf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002eb4:	0f 85 06 ff ff ff    	jne    c0002dc0 <create_partition+0x9b>
c0002eba:	e9 05 ff ff ff       	jmp    c0002dc4 <create_partition+0x9f>
c0002ebf:	b8 01 00 00 00       	mov    eax,0x1
c0002ec4:	83 c4 3c             	add    esp,0x3c
c0002ec7:	5b                   	pop    ebx
c0002ec8:	5e                   	pop    esi
c0002ec9:	5f                   	pop    edi
c0002eca:	5d                   	pop    ebp
c0002ecb:	c3                   	ret    

c0002ecc <get_fileinfo>:
c0002ecc:	55                   	push   ebp
c0002ecd:	57                   	push   edi
c0002ece:	56                   	push   esi
c0002ecf:	53                   	push   ebx
c0002ed0:	83 ec 1c             	sub    esp,0x1c
c0002ed3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ed9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002edd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee1:	0f 84 c1 01 00 00    	je     c00030a8 <get_fileinfo+0x1dc>
c0002ee7:	89 d3                	mov    ebx,edx
c0002ee9:	89 c6                	mov    esi,eax
c0002eeb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eef:	74 6a                	je     c0002f5b <get_fileinfo+0x8f>
c0002ef1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ef9:	31 ed                	xor    ebp,ebp
c0002efb:	31 ff                	xor    edi,edi
c0002efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f08:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0c:	66 85 d2             	test   dx,dx
c0002f0f:	74 3e                	je     c0002f4f <get_fileinfo+0x83>
c0002f11:	66 85 ed             	test   bp,bp
c0002f14:	75 0c                	jne    c0002f22 <get_fileinfo+0x56>
c0002f16:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f20:	76 22                	jbe    c0002f44 <get_fileinfo+0x78>
c0002f22:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f27:	89 e8                	mov    eax,ebp
c0002f29:	29 f9                	sub    ecx,edi
c0002f2b:	c1 e0 10             	shl    eax,0x10
c0002f2e:	09 d0                	or     eax,edx
c0002f30:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f34:	e8 23 ef ff ff       	call   c0001e5c <put_utf>
c0002f39:	84 c0                	test   al,al
c0002f3b:	74 10                	je     c0002f4d <get_fileinfo+0x81>
c0002f3d:	0f b6 c0             	movzx  eax,al
c0002f40:	31 d2                	xor    edx,edx
c0002f42:	01 c7                	add    edi,eax
c0002f44:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f49:	89 d5                	mov    ebp,edx
c0002f4b:	eb b0                	jmp    c0002efd <get_fileinfo+0x31>
c0002f4d:	31 ff                	xor    edi,edi
c0002f4f:	66 85 ed             	test   bp,bp
c0002f52:	74 02                	je     c0002f56 <get_fileinfo+0x8a>
c0002f54:	31 ff                	xor    edi,edi
c0002f56:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5b:	31 ff                	xor    edi,edi
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	83 f9 0a             	cmp    ecx,0xa
c0002f62:	0f 87 ad 00 00 00    	ja     c0003015 <get_fileinfo+0x149>
c0002f68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f6e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f72:	66 83 fa 20          	cmp    dx,0x20
c0002f76:	0f 84 92 00 00 00    	je     c000300e <get_fileinfo+0x142>
c0002f7c:	66 83 fa 05          	cmp    dx,0x5
c0002f80:	75 05                	jne    c0002f87 <get_fileinfo+0xbb>
c0002f82:	ba e5 00 00 00       	mov    edx,0xe5
c0002f87:	83 ff 0b             	cmp    edi,0xb
c0002f8a:	77 0b                	ja     c0002f97 <get_fileinfo+0xcb>
c0002f8c:	83 fd 09             	cmp    ebp,0x9
c0002f8f:	75 06                	jne    c0002f97 <get_fileinfo+0xcb>
c0002f91:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f96:	47                   	inc    edi
c0002f97:	0f b7 c2             	movzx  eax,dx
c0002f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f9e:	e8 ed ed ff ff       	call   c0001d90 <dbc_1st>
c0002fa3:	85 c0                	test   eax,eax
c0002fa5:	74 2f                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fa7:	83 fd 08             	cmp    ebp,0x8
c0002faa:	74 2a                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fac:	83 fd 0b             	cmp    ebp,0xb
c0002faf:	74 25                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbc:	e8 d2 ed ff ff       	call   c0001d93 <dbc_2nd>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 11                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fce:	c1 e2 08             	shl    edx,0x8
c0002fd1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fd4:	09 c2                	or     edx,eax
c0002fd6:	0f b7 d2             	movzx  edx,dx
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	52                   	push   edx
c0002fe1:	e8 46 2b 00 00       	call   c0005b2c <ff_oem2uni>
c0002fe6:	83 c4 10             	add    esp,0x10
c0002fe9:	66 85 c0             	test   ax,ax
c0002fec:	75 04                	jne    c0002ff2 <get_fileinfo+0x126>
c0002fee:	31 ff                	xor    edi,edi
c0002ff0:	eb 23                	jmp    c0003015 <get_fileinfo+0x149>
c0002ff2:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ff7:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffb:	29 f9                	sub    ecx,edi
c0002ffd:	0f b7 c0             	movzx  eax,ax
c0003000:	e8 57 ee ff ff       	call   c0001e5c <put_utf>
c0003005:	84 c0                	test   al,al
c0003007:	74 e5                	je     c0002fee <get_fileinfo+0x122>
c0003009:	0f b6 c0             	movzx  eax,al
c000300c:	01 c7                	add    edi,eax
c000300e:	89 e9                	mov    ecx,ebp
c0003010:	e9 4a ff ff ff       	jmp    c0002f5f <get_fileinfo+0x93>
c0003015:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000301e:	75 54                	jne    c0003074 <get_fileinfo+0x1a8>
c0003020:	85 ff                	test   edi,edi
c0003022:	75 0b                	jne    c000302f <get_fileinfo+0x163>
c0003024:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003028:	ba 01 00 00 00       	mov    edx,0x1
c000302d:	eb 33                	jmp    c0003062 <get_fileinfo+0x196>
c000302f:	b1 08                	mov    cl,0x8
c0003031:	31 d2                	xor    edx,edx
c0003033:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003039:	84 c0                	test   al,al
c000303b:	74 25                	je     c0003062 <get_fileinfo+0x196>
c000303d:	66 83 f8 2e          	cmp    ax,0x2e
c0003041:	74 16                	je     c0003059 <get_fileinfo+0x18d>
c0003043:	8d 78 bf             	lea    edi,[eax-0x41]
c0003046:	66 83 ff 19          	cmp    di,0x19
c000304a:	77 0f                	ja     c000305b <get_fileinfo+0x18f>
c000304c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000304f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003052:	74 07                	je     c000305b <get_fileinfo+0x18f>
c0003054:	83 c0 20             	add    eax,0x20
c0003057:	eb 02                	jmp    c000305b <get_fileinfo+0x18f>
c0003059:	b1 10                	mov    cl,0x10
c000305b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000305f:	42                   	inc    edx
c0003060:	eb d1                	jmp    c0003033 <get_fileinfo+0x167>
c0003062:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003067:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000306e:	75 04                	jne    c0003074 <get_fileinfo+0x1a8>
c0003070:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003074:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003077:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000307d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003080:	83 c0 1c             	add    eax,0x1c
c0003083:	e8 94 ec ff ff       	call   c0001d1c <ld_dword>
c0003088:	89 03                	mov    DWORD PTR [ebx],eax
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	83 c0 16             	add    eax,0x16
c0003090:	e8 7a ec ff ff       	call   c0001d0f <ld_word>
c0003095:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003099:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309c:	83 c0 18             	add    eax,0x18
c000309f:	e8 6b ec ff ff       	call   c0001d0f <ld_word>
c00030a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <ld_clust.isra.0>:
c00030b0:	56                   	push   esi
c00030b1:	89 c6                	mov    esi,eax
c00030b3:	53                   	push   ebx
c00030b4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b7:	89 d3                	mov    ebx,edx
c00030b9:	e8 51 ec ff ff       	call   c0001d0f <ld_word>
c00030be:	0f b7 c8             	movzx  ecx,ax
c00030c1:	89 f0                	mov    eax,esi
c00030c3:	3c 03                	cmp    al,0x3
c00030c5:	75 0d                	jne    c00030d4 <ld_clust.isra.0+0x24>
c00030c7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ca:	e8 40 ec ff ff       	call   c0001d0f <ld_word>
c00030cf:	c1 e0 10             	shl    eax,0x10
c00030d2:	09 c1                	or     ecx,eax
c00030d4:	89 c8                	mov    eax,ecx
c00030d6:	5b                   	pop    ebx
c00030d7:	5e                   	pop    esi
c00030d8:	c3                   	ret    

c00030d9 <st_clust.isra.1>:
c00030d9:	56                   	push   esi
c00030da:	89 c6                	mov    esi,eax
c00030dc:	53                   	push   ebx
c00030dd:	89 d3                	mov    ebx,edx
c00030df:	0f b7 d1             	movzx  edx,cx
c00030e2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e5:	e8 4a ec ff ff       	call   c0001d34 <st_word>
c00030ea:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030ed:	75 0f                	jne    c00030fe <st_clust.isra.1+0x25>
c00030ef:	c1 e9 10             	shr    ecx,0x10
c00030f2:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	5b                   	pop    ebx
c00030f8:	5e                   	pop    esi
c00030f9:	e9 36 ec ff ff       	jmp    c0001d34 <st_word>
c00030fe:	5b                   	pop    ebx
c00030ff:	5e                   	pop    esi
c0003100:	c3                   	ret    

c0003101 <get_fat.isra.2>:
c0003101:	b9 01 00 00 00       	mov    ecx,0x1
c0003106:	83 fa 01             	cmp    edx,0x1
c0003109:	0f 86 f1 00 00 00    	jbe    c0003200 <get_fat.isra.2+0xff>
c000310f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003112:	0f 83 e8 00 00 00    	jae    c0003200 <get_fat.isra.2+0xff>
c0003118:	55                   	push   ebp
c0003119:	57                   	push   edi
c000311a:	89 c7                	mov    edi,eax
c000311c:	56                   	push   esi
c000311d:	89 d6                	mov    esi,edx
c000311f:	53                   	push   ebx
c0003120:	83 ec 0c             	sub    esp,0xc
c0003123:	8a 00                	mov    al,BYTE PTR [eax]
c0003125:	3c 02                	cmp    al,0x2
c0003127:	74 78                	je     c00031a1 <get_fat.isra.2+0xa0>
c0003129:	3c 03                	cmp    al,0x3
c000312b:	0f 84 97 00 00 00    	je     c00031c8 <get_fat.isra.2+0xc7>
c0003131:	fe c8                	dec    al
c0003133:	0f 85 bd 00 00 00    	jne    c00031f6 <get_fat.isra.2+0xf5>
c0003139:	89 d3                	mov    ebx,edx
c000313b:	89 f8                	mov    eax,edi
c000313d:	d1 eb                	shr    ebx,1
c000313f:	01 d3                	add    ebx,edx
c0003141:	89 da                	mov    edx,ebx
c0003143:	c1 ea 09             	shr    edx,0x9
c0003146:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003149:	e8 e7 f0 ff ff       	call   c0002235 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	74 08                	je     c000315a <get_fat.isra.2+0x59>
c0003152:	83 c9 ff             	or     ecx,0xffffffff
c0003155:	e9 9c 00 00 00       	jmp    c00031f6 <get_fat.isra.2+0xf5>
c000315a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000315d:	89 f8                	mov    eax,edi
c000315f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003165:	89 ea                	mov    edx,ebp
c0003167:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000316b:	c1 ea 09             	shr    edx,0x9
c000316e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003171:	e8 bf f0 ff ff       	call   c0002235 <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	75 d8                	jne    c0003152 <get_fat.isra.2+0x51>
c000317a:	0f b6 c3             	movzx  eax,bl
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003188:	c1 e3 08             	shl    ebx,0x8
c000318b:	09 c3                	or     ebx,eax
c000318d:	89 d9                	mov    ecx,ebx
c000318f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003195:	83 e6 01             	and    esi,0x1
c0003198:	74 5c                	je     c00031f6 <get_fat.isra.2+0xf5>
c000319a:	89 d9                	mov    ecx,ebx
c000319c:	c1 e9 04             	shr    ecx,0x4
c000319f:	eb 55                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031a1:	c1 ea 08             	shr    edx,0x8
c00031a4:	89 f8                	mov    eax,edi
c00031a6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a9:	e8 87 f0 ff ff       	call   c0002235 <move_window>
c00031ae:	85 c0                	test   eax,eax
c00031b0:	75 a0                	jne    c0003152 <get_fat.isra.2+0x51>
c00031b2:	01 f6                	add    esi,esi
c00031b4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ba:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031be:	e8 4c eb ff ff       	call   c0001d0f <ld_word>
c00031c3:	0f b7 c8             	movzx  ecx,ax
c00031c6:	eb 2e                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031c8:	c1 ea 07             	shr    edx,0x7
c00031cb:	89 f8                	mov    eax,edi
c00031cd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d0:	e8 60 f0 ff ff       	call   c0002235 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	0f 85 75 ff ff ff    	jne    c0003152 <get_fat.isra.2+0x51>
c00031dd:	c1 e6 02             	shl    esi,0x2
c00031e0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ea:	e8 2d eb ff ff       	call   c0001d1c <ld_dword>
c00031ef:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f4:	89 c1                	mov    ecx,eax
c00031f6:	83 c4 0c             	add    esp,0xc
c00031f9:	89 c8                	mov    eax,ecx
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    
c0003200:	89 c8                	mov    eax,ecx
c0003202:	c3                   	ret    

c0003203 <dir_sdi>:
c0003203:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003209:	0f 87 b6 00 00 00    	ja     c00032c5 <dir_sdi+0xc2>
c000320f:	55                   	push   ebp
c0003210:	57                   	push   edi
c0003211:	56                   	push   esi
c0003212:	53                   	push   ebx
c0003213:	89 d3                	mov    ebx,edx
c0003215:	83 ec 1c             	sub    esp,0x1c
c0003218:	f6 c2 1f             	test   dl,0x1f
c000321b:	74 0a                	je     c0003227 <dir_sdi+0x24>
c000321d:	b8 02 00 00 00       	mov    eax,0x2
c0003222:	e9 96 00 00 00       	jmp    c00032bd <dir_sdi+0xba>
c0003227:	89 c6                	mov    esi,eax
c0003229:	8b 38                	mov    edi,DWORD PTR [eax]
c000322b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000322e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003231:	85 c9                	test   ecx,ecx
c0003233:	75 23                	jne    c0003258 <dir_sdi+0x55>
c0003235:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003238:	76 07                	jbe    c0003241 <dir_sdi+0x3e>
c000323a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000323d:	85 c0                	test   eax,eax
c000323f:	75 15                	jne    c0003256 <dir_sdi+0x53>
c0003241:	89 da                	mov    edx,ebx
c0003243:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003247:	c1 ea 05             	shr    edx,0x5
c000324a:	39 c2                	cmp    edx,eax
c000324c:	73 cf                	jae    c000321d <dir_sdi+0x1a>
c000324e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003251:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003254:	eb 3d                	jmp    c0003293 <dir_sdi+0x90>
c0003256:	89 c1                	mov    ecx,eax
c0003258:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325c:	c1 e5 09             	shl    ebp,0x9
c000325f:	89 ca                	mov    edx,ecx
c0003261:	39 eb                	cmp    ebx,ebp
c0003263:	72 1c                	jb     c0003281 <dir_sdi+0x7e>
c0003265:	8b 06                	mov    eax,DWORD PTR [esi]
c0003267:	e8 95 fe ff ff       	call   c0003101 <get_fat.isra.2>
c000326c:	89 c1                	mov    ecx,eax
c000326e:	83 f8 ff             	cmp    eax,0xffffffff
c0003271:	74 45                	je     c00032b8 <dir_sdi+0xb5>
c0003273:	83 f8 01             	cmp    eax,0x1
c0003276:	76 a5                	jbe    c000321d <dir_sdi+0x1a>
c0003278:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327b:	76 a0                	jbe    c000321d <dir_sdi+0x1a>
c000327d:	29 eb                	sub    ebx,ebp
c000327f:	eb de                	jmp    c000325f <dir_sdi+0x5c>
c0003281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003285:	89 f8                	mov    eax,edi
c0003287:	e8 c9 ec ff ff       	call   c0001f55 <clst2sect>
c000328c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003290:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003293:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003296:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003299:	85 d2                	test   edx,edx
c000329b:	74 80                	je     c000321d <dir_sdi+0x1a>
c000329d:	89 d8                	mov    eax,ebx
c000329f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a5:	c1 e8 09             	shr    eax,0x9
c00032a8:	01 d0                	add    eax,edx
c00032aa:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032ad:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xba>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    
c00032c5:	b8 02 00 00 00       	mov    eax,0x2
c00032ca:	c3                   	ret    

c00032cb <create_chain>:
c00032cb:	55                   	push   ebp
c00032cc:	89 c5                	mov    ebp,eax
c00032ce:	57                   	push   edi
c00032cf:	89 d7                	mov    edi,edx
c00032d1:	56                   	push   esi
c00032d2:	53                   	push   ebx
c00032d3:	83 ec 1c             	sub    esp,0x1c
c00032d6:	85 d2                	test   edx,edx
c00032d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032da:	75 0e                	jne    c00032ea <create_chain+0x1f>
c00032dc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032df:	85 c9                	test   ecx,ecx
c00032e1:	74 34                	je     c0003317 <create_chain+0x4c>
c00032e3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032e6:	77 34                	ja     c000331c <create_chain+0x51>
c00032e8:	eb 2d                	jmp    c0003317 <create_chain+0x4c>
c00032ea:	89 f0                	mov    eax,esi
c00032ec:	e8 10 fe ff ff       	call   c0003101 <get_fat.isra.2>
c00032f1:	89 c3                	mov    ebx,eax
c00032f3:	83 f8 01             	cmp    eax,0x1
c00032f6:	77 0a                	ja     c0003302 <create_chain+0x37>
c00032f8:	bb 01 00 00 00       	mov    ebx,0x1
c00032fd:	e9 f9 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003302:	83 f8 ff             	cmp    eax,0xffffffff
c0003305:	0f 84 ed 00 00 00    	je     c00033f8 <create_chain+0x12d>
c000330b:	89 f9                	mov    ecx,edi
c000330d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003310:	76 0a                	jbe    c000331c <create_chain+0x51>
c0003312:	e9 e4 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003317:	b9 01 00 00 00       	mov    ecx,0x1
c000331c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003320:	75 07                	jne    c0003329 <create_chain+0x5e>
c0003322:	31 db                	xor    ebx,ebx
c0003324:	e9 d2 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003329:	39 f9                	cmp    ecx,edi
c000332b:	75 46                	jne    c0003373 <create_chain+0xa8>
c000332d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003330:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003333:	77 05                	ja     c000333a <create_chain+0x6f>
c0003335:	bb 02 00 00 00       	mov    ebx,0x2
c000333a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000333e:	89 da                	mov    edx,ebx
c0003340:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003343:	e8 b9 fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003348:	83 f8 01             	cmp    eax,0x1
c000334b:	74 ab                	je     c00032f8 <create_chain+0x2d>
c000334d:	83 f8 ff             	cmp    eax,0xffffffff
c0003350:	0f 84 a2 00 00 00    	je     c00033f8 <create_chain+0x12d>
c0003356:	85 c0                	test   eax,eax
c0003358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335c:	74 11                	je     c000336f <create_chain+0xa4>
c000335e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003361:	83 f8 01             	cmp    eax,0x1
c0003364:	76 0d                	jbe    c0003373 <create_chain+0xa8>
c0003366:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003369:	73 08                	jae    c0003373 <create_chain+0xa8>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	eb 04                	jmp    c0003373 <create_chain+0xa8>
c000336f:	85 db                	test   ebx,ebx
c0003371:	75 3d                	jne    c00033b0 <create_chain+0xe5>
c0003373:	89 cb                	mov    ebx,ecx
c0003375:	43                   	inc    ebx
c0003376:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003379:	77 0a                	ja     c0003385 <create_chain+0xba>
c000337b:	83 f9 01             	cmp    ecx,0x1
c000337e:	76 a2                	jbe    c0003322 <create_chain+0x57>
c0003380:	bb 02 00 00 00       	mov    ebx,0x2
c0003385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003389:	89 da                	mov    edx,ebx
c000338b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338e:	e8 6e fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003393:	85 c0                	test   eax,eax
c0003395:	74 19                	je     c00033b0 <create_chain+0xe5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	0f 84 58 ff ff ff    	je     c00032f8 <create_chain+0x2d>
c00033a0:	40                   	inc    eax
c00033a1:	74 55                	je     c00033f8 <create_chain+0x12d>
c00033a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a7:	39 cb                	cmp    ebx,ecx
c00033a9:	75 ca                	jne    c0003375 <create_chain+0xaa>
c00033ab:	e9 72 ff ff ff       	jmp    c0003322 <create_chain+0x57>
c00033b0:	83 c9 ff             	or     ecx,0xffffffff
c00033b3:	89 da                	mov    edx,ebx
c00033b5:	89 f0                	mov    eax,esi
c00033b7:	e8 cf f2 ff ff       	call   c000268b <put_fat>
c00033bc:	85 c0                	test   eax,eax
c00033be:	75 31                	jne    c00033f1 <create_chain+0x126>
c00033c0:	85 ff                	test   edi,edi
c00033c2:	75 16                	jne    c00033da <create_chain+0x10f>
c00033c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ca:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033cd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033d0:	39 d0                	cmp    eax,edx
c00033d2:	77 17                	ja     c00033eb <create_chain+0x120>
c00033d4:	48                   	dec    eax
c00033d5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033d8:	eb 11                	jmp    c00033eb <create_chain+0x120>
c00033da:	89 d9                	mov    ecx,ebx
c00033dc:	89 fa                	mov    edx,edi
c00033de:	89 f0                	mov    eax,esi
c00033e0:	e8 a6 f2 ff ff       	call   c000268b <put_fat>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 db                	je     c00033c4 <create_chain+0xf9>
c00033e9:	eb 06                	jmp    c00033f1 <create_chain+0x126>
c00033eb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ef:	eb 0a                	jmp    c00033fb <create_chain+0x130>
c00033f1:	48                   	dec    eax
c00033f2:	0f 85 00 ff ff ff    	jne    c00032f8 <create_chain+0x2d>
c00033f8:	83 cb ff             	or     ebx,0xffffffff
c00033fb:	83 c4 1c             	add    esp,0x1c
c00033fe:	89 d8                	mov    eax,ebx
c0003400:	5b                   	pop    ebx
c0003401:	5e                   	pop    esi
c0003402:	5f                   	pop    edi
c0003403:	5d                   	pop    ebp
c0003404:	c3                   	ret    

c0003405 <remove_chain>:
c0003405:	55                   	push   ebp
c0003406:	57                   	push   edi
c0003407:	56                   	push   esi
c0003408:	89 d6                	mov    esi,edx
c000340a:	53                   	push   ebx
c000340b:	83 ec 0c             	sub    esp,0xc
c000340e:	83 fa 01             	cmp    edx,0x1
c0003411:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003413:	76 65                	jbe    c000347a <remove_chain+0x75>
c0003415:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003418:	76 60                	jbe    c000347a <remove_chain+0x75>
c000341a:	89 c5                	mov    ebp,eax
c000341c:	89 ca                	mov    edx,ecx
c000341e:	85 c9                	test   ecx,ecx
c0003420:	74 0e                	je     c0003430 <remove_chain+0x2b>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 d8                	mov    eax,ebx
c0003427:	e8 5f f2 ff ff       	call   c000268b <put_fat>
c000342c:	85 c0                	test   eax,eax
c000342e:	75 56                	jne    c0003486 <remove_chain+0x81>
c0003430:	89 f2                	mov    edx,esi
c0003432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003435:	e8 c7 fc ff ff       	call   c0003101 <get_fat.isra.2>
c000343a:	89 c7                	mov    edi,eax
c000343c:	85 c0                	test   eax,eax
c000343e:	75 04                	jne    c0003444 <remove_chain+0x3f>
c0003440:	31 c0                	xor    eax,eax
c0003442:	eb 42                	jmp    c0003486 <remove_chain+0x81>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	74 31                	je     c000347a <remove_chain+0x75>
c0003449:	83 f8 ff             	cmp    eax,0xffffffff
c000344c:	74 33                	je     c0003481 <remove_chain+0x7c>
c000344e:	31 c9                	xor    ecx,ecx
c0003450:	89 f2                	mov    edx,esi
c0003452:	89 d8                	mov    eax,ebx
c0003454:	e8 32 f2 ff ff       	call   c000268b <put_fat>
c0003459:	85 c0                	test   eax,eax
c000345b:	75 29                	jne    c0003486 <remove_chain+0x81>
c000345d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003463:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003466:	39 c8                	cmp    eax,ecx
c0003468:	73 08                	jae    c0003472 <remove_chain+0x6d>
c000346a:	40                   	inc    eax
c000346b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003472:	89 fe                	mov    esi,edi
c0003474:	39 fa                	cmp    edx,edi
c0003476:	77 b8                	ja     c0003430 <remove_chain+0x2b>
c0003478:	eb c6                	jmp    c0003440 <remove_chain+0x3b>
c000347a:	b8 02 00 00 00       	mov    eax,0x2
c000347f:	eb 05                	jmp    c0003486 <remove_chain+0x81>
c0003481:	b8 01 00 00 00       	mov    eax,0x1
c0003486:	83 c4 0c             	add    esp,0xc
c0003489:	5b                   	pop    ebx
c000348a:	5e                   	pop    esi
c000348b:	5f                   	pop    edi
c000348c:	5d                   	pop    ebp
c000348d:	c3                   	ret    

c000348e <dir_next>:
c000348e:	55                   	push   ebp
c000348f:	57                   	push   edi
c0003490:	56                   	push   esi
c0003491:	53                   	push   ebx
c0003492:	83 ec 1c             	sub    esp,0x1c
c0003495:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003498:	8b 28                	mov    ebp,DWORD PTR [eax]
c000349a:	83 c7 20             	add    edi,0x20
c000349d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a3:	76 07                	jbe    c00034ac <dir_next+0x1e>
c00034a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ac:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034af:	b9 04 00 00 00       	mov    ecx,0x4
c00034b4:	85 f6                	test   esi,esi
c00034b6:	0f 84 cd 00 00 00    	je     c0003589 <dir_next+0xfb>
c00034bc:	89 c3                	mov    ebx,eax
c00034be:	89 d1                	mov    ecx,edx
c00034c0:	89 f8                	mov    eax,edi
c00034c2:	25 ff 01 00 00       	and    eax,0x1ff
c00034c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034cb:	0f 85 a8 00 00 00    	jne    c0003579 <dir_next+0xeb>
c00034d1:	46                   	inc    esi
c00034d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d8:	85 d2                	test   edx,edx
c00034da:	75 22                	jne    c00034fe <dir_next+0x70>
c00034dc:	89 fa                	mov    edx,edi
c00034de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e2:	c1 ea 05             	shr    edx,0x5
c00034e5:	39 c2                	cmp    edx,eax
c00034e7:	0f 82 8c 00 00 00    	jb     c0003579 <dir_next+0xeb>
c00034ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f4:	b9 04 00 00 00       	mov    ecx,0x4
c00034f9:	e9 8b 00 00 00       	jmp    c0003589 <dir_next+0xfb>
c00034fe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003502:	89 fe                	mov    esi,edi
c0003504:	48                   	dec    eax
c0003505:	c1 ee 09             	shr    esi,0x9
c0003508:	85 f0                	test   eax,esi
c000350a:	75 6d                	jne    c0003579 <dir_next+0xeb>
c000350c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003510:	89 e8                	mov    eax,ebp
c0003512:	e8 ea fb ff ff       	call   c0003101 <get_fat.isra.2>
c0003517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351b:	89 c6                	mov    esi,eax
c000351d:	83 f8 01             	cmp    eax,0x1
c0003520:	77 07                	ja     c0003529 <dir_next+0x9b>
c0003522:	b9 02 00 00 00       	mov    ecx,0x2
c0003527:	eb 60                	jmp    c0003589 <dir_next+0xfb>
c0003529:	83 f8 ff             	cmp    eax,0xffffffff
c000352c:	75 07                	jne    c0003535 <dir_next+0xa7>
c000352e:	b9 01 00 00 00       	mov    ecx,0x1
c0003533:	eb 54                	jmp    c0003589 <dir_next+0xfb>
c0003535:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003538:	77 30                	ja     c000356a <dir_next+0xdc>
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 af                	je     c00034ed <dir_next+0x5f>
c000353e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 83 fd ff ff       	call   c00032cb <create_chain>
c0003548:	b9 07 00 00 00       	mov    ecx,0x7
c000354d:	89 c6                	mov    esi,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	74 36                	je     c0003589 <dir_next+0xfb>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	74 ca                	je     c0003522 <dir_next+0x94>
c0003558:	83 f8 ff             	cmp    eax,0xffffffff
c000355b:	74 d1                	je     c000352e <dir_next+0xa0>
c000355d:	89 c2                	mov    edx,eax
c000355f:	89 e8                	mov    eax,ebp
c0003561:	e8 75 f2 ff ff       	call   c00027db <dir_clear>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 c4                	jne    c000352e <dir_next+0xa0>
c000356a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356d:	89 f2                	mov    edx,esi
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 df e9 ff ff       	call   c0001f55 <clst2sect>
c0003576:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003580:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003584:	31 c9                	xor    ecx,ecx
c0003586:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003589:	83 c4 1c             	add    esp,0x1c
c000358c:	89 c8                	mov    eax,ecx
c000358e:	5b                   	pop    ebx
c000358f:	5e                   	pop    esi
c0003590:	5f                   	pop    edi
c0003591:	5d                   	pop    ebp
c0003592:	c3                   	ret    

c0003593 <dir_alloc>:
c0003593:	55                   	push   ebp
c0003594:	89 c5                	mov    ebp,eax
c0003596:	57                   	push   edi
c0003597:	89 d7                	mov    edi,edx
c0003599:	56                   	push   esi
c000359a:	31 d2                	xor    edx,edx
c000359c:	53                   	push   ebx
c000359d:	83 ec 0c             	sub    esp,0xc
c00035a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a2:	e8 5c fc ff ff       	call   c0003203 <dir_sdi>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	75 37                	jne    c00035e2 <dir_alloc+0x4f>
c00035ab:	31 db                	xor    ebx,ebx
c00035ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035b0:	89 f0                	mov    eax,esi
c00035b2:	e8 7e ec ff ff       	call   c0002235 <move_window>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 27                	jne    c00035e2 <dir_alloc+0x4f>
c00035bb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035be:	8a 12                	mov    dl,BYTE PTR [edx]
c00035c0:	84 d2                	test   dl,dl
c00035c2:	74 05                	je     c00035c9 <dir_alloc+0x36>
c00035c4:	80 fa e5             	cmp    dl,0xe5
c00035c7:	75 07                	jne    c00035d0 <dir_alloc+0x3d>
c00035c9:	43                   	inc    ebx
c00035ca:	39 fb                	cmp    ebx,edi
c00035cc:	75 04                	jne    c00035d2 <dir_alloc+0x3f>
c00035ce:	eb 1c                	jmp    c00035ec <dir_alloc+0x59>
c00035d0:	31 db                	xor    ebx,ebx
c00035d2:	ba 01 00 00 00       	mov    edx,0x1
c00035d7:	89 e8                	mov    eax,ebp
c00035d9:	e8 b0 fe ff ff       	call   c000348e <dir_next>
c00035de:	85 c0                	test   eax,eax
c00035e0:	74 cb                	je     c00035ad <dir_alloc+0x1a>
c00035e2:	83 f8 04             	cmp    eax,0x4
c00035e5:	75 05                	jne    c00035ec <dir_alloc+0x59>
c00035e7:	b8 07 00 00 00       	mov    eax,0x7
c00035ec:	83 c4 0c             	add    esp,0xc
c00035ef:	5b                   	pop    ebx
c00035f0:	5e                   	pop    esi
c00035f1:	5f                   	pop    edi
c00035f2:	5d                   	pop    ebp
c00035f3:	c3                   	ret    

c00035f4 <dir_read>:
c00035f4:	55                   	push   ebp
c00035f5:	57                   	push   edi
c00035f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fb:	56                   	push   esi
c00035fc:	be 04 00 00 00       	mov    esi,0x4
c0003601:	53                   	push   ebx
c0003602:	89 c3                	mov    ebx,eax
c0003604:	83 ec 1c             	sub    esp,0x1c
c0003607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000360d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003612:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003615:	85 d2                	test   edx,edx
c0003617:	0f 84 d8 00 00 00    	je     c00036f5 <dir_read+0x101>
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 11 ec ff ff       	call   c0002235 <move_window>
c0003624:	89 c6                	mov    esi,eax
c0003626:	85 c0                	test   eax,eax
c0003628:	0f 85 d2 00 00 00    	jne    c0003700 <dir_read+0x10c>
c000362e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003631:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003633:	84 c9                	test   cl,cl
c0003635:	0f 84 c0 00 00 00    	je     c00036fb <dir_read+0x107>
c000363b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363e:	83 e0 3f             	and    eax,0x3f
c0003641:	80 f9 2e             	cmp    cl,0x2e
c0003644:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003648:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364b:	0f 84 8a 00 00 00    	je     c00036db <dir_read+0xe7>
c0003651:	80 f9 e5             	cmp    cl,0xe5
c0003654:	0f 84 81 00 00 00    	je     c00036db <dir_read+0xe7>
c000365a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365e:	83 e0 1f             	and    eax,0x1f
c0003661:	83 f8 08             	cmp    eax,0x8
c0003664:	0f 94 c0             	sete   al
c0003667:	0f b6 c0             	movzx  eax,al
c000366a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366e:	75 6b                	jne    c00036db <dir_read+0xe7>
c0003670:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003675:	75 44                	jne    c00036bb <dir_read+0xc7>
c0003677:	f6 c1 40             	test   cl,0x40
c000367a:	74 12                	je     c000368e <dir_read+0x9a>
c000367c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367f:	83 e1 bf             	and    ecx,0xffffffbf
c0003682:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003686:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003689:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368c:	eb 06                	jmp    c0003694 <dir_read+0xa0>
c000368e:	89 f8                	mov    eax,edi
c0003690:	38 c8                	cmp    al,cl
c0003692:	75 47                	jne    c00036db <dir_read+0xe7>
c0003694:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003698:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036a0:	75 3e                	jne    c00036e0 <dir_read+0xec>
c00036a2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a9:	e8 c4 e8 ff ff       	call   c0001f72 <pick_lfn>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 2e                	je     c00036e0 <dir_read+0xec>
c00036b2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b9:	eb 25                	jmp    c00036e0 <dir_read+0xec>
c00036bb:	89 f8                	mov    eax,edi
c00036bd:	84 c0                	test   al,al
c00036bf:	75 11                	jne    c00036d2 <dir_read+0xde>
c00036c1:	89 d0                	mov    eax,edx
c00036c3:	e8 64 ea ff ff       	call   c000212c <sum_sfn>
c00036c8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cc:	75 04                	jne    c00036d2 <dir_read+0xde>
c00036ce:	31 f6                	xor    esi,esi
c00036d0:	eb 35                	jmp    c0003707 <dir_read+0x113>
c00036d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d9:	eb 2c                	jmp    c0003707 <dir_read+0x113>
c00036db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 a5 fd ff ff       	call   c000348e <dir_next>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	85 c0                	test   eax,eax
c00036ed:	0f 84 1f ff ff ff    	je     c0003612 <dir_read+0x1e>
c00036f3:	eb 0b                	jmp    c0003700 <dir_read+0x10c>
c00036f5:	85 f6                	test   esi,esi
c00036f7:	74 d5                	je     c00036ce <dir_read+0xda>
c00036f9:	eb 05                	jmp    c0003700 <dir_read+0x10c>
c00036fb:	be 04 00 00 00       	mov    esi,0x4
c0003700:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003707:	83 c4 1c             	add    esp,0x1c
c000370a:	89 f0                	mov    eax,esi
c000370c:	5b                   	pop    ebx
c000370d:	5e                   	pop    esi
c000370e:	5f                   	pop    edi
c000370f:	5d                   	pop    ebp
c0003710:	c3                   	ret    

c0003711 <dir_remove>:
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	53                   	push   ebx
c0003714:	89 c3                	mov    ebx,eax
c0003716:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003719:	8b 30                	mov    esi,DWORD PTR [eax]
c000371b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371e:	83 fa ff             	cmp    edx,0xffffffff
c0003721:	74 09                	je     c000372c <dir_remove+0x1b>
c0003723:	e8 db fa ff ff       	call   c0003203 <dir_sdi>
c0003728:	85 c0                	test   eax,eax
c000372a:	75 34                	jne    c0003760 <dir_remove+0x4f>
c000372c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372f:	89 f0                	mov    eax,esi
c0003731:	e8 ff ea ff ff       	call   c0002235 <move_window>
c0003736:	85 c0                	test   eax,eax
c0003738:	75 1c                	jne    c0003756 <dir_remove+0x45>
c000373a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003740:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003744:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003747:	73 17                	jae    c0003760 <dir_remove+0x4f>
c0003749:	31 d2                	xor    edx,edx
c000374b:	89 d8                	mov    eax,ebx
c000374d:	e8 3c fd ff ff       	call   c000348e <dir_next>
c0003752:	85 c0                	test   eax,eax
c0003754:	74 d6                	je     c000372c <dir_remove+0x1b>
c0003756:	83 f8 04             	cmp    eax,0x4
c0003759:	75 05                	jne    c0003760 <dir_remove+0x4f>
c000375b:	b8 02 00 00 00       	mov    eax,0x2
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	5f                   	pop    edi
c0003763:	c3                   	ret    

c0003764 <dir_find>:
c0003764:	55                   	push   ebp
c0003765:	31 d2                	xor    edx,edx
c0003767:	57                   	push   edi
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 1c             	sub    esp,0x1c
c000376f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003775:	89 d8                	mov    eax,ebx
c0003777:	e8 87 fa ff ff       	call   c0003203 <dir_sdi>
c000377c:	89 c6                	mov    esi,eax
c000377e:	85 c0                	test   eax,eax
c0003780:	0f 85 02 01 00 00    	jne    c0003888 <dir_find+0x124>
c0003786:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003792:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003797:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000379a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379e:	e8 92 ea ff ff       	call   c0002235 <move_window>
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 db 00 00 00    	jne    c0003888 <dir_find+0x124>
c00037ad:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037b0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 c8 00 00 00    	je     c0003883 <dir_find+0x11f>
c00037bb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037be:	88 d0                	mov    al,dl
c00037c0:	83 e0 3f             	and    eax,0x3f
c00037c3:	80 f9 e5             	cmp    cl,0xe5
c00037c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c9:	0f 84 93 00 00 00    	je     c0003862 <dir_find+0xfe>
c00037cf:	80 e2 08             	and    dl,0x8
c00037d2:	74 0a                	je     c00037de <dir_find+0x7a>
c00037d4:	3c 0f                	cmp    al,0xf
c00037d6:	0f 85 86 00 00 00    	jne    c0003862 <dir_find+0xfe>
c00037dc:	eb 04                	jmp    c00037e2 <dir_find+0x7e>
c00037de:	3c 0f                	cmp    al,0xf
c00037e0:	75 54                	jne    c0003836 <dir_find+0xd2>
c00037e2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e6:	0f 85 82 00 00 00    	jne    c000386e <dir_find+0x10a>
c00037ec:	f6 c1 40             	test   cl,0x40
c00037ef:	74 12                	je     c0003803 <dir_find+0x9f>
c00037f1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f4:	83 e1 bf             	and    ecx,0xffffffbf
c00037f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003801:	eb 06                	jmp    c0003809 <dir_find+0xa5>
c0003803:	89 f8                	mov    eax,edi
c0003805:	38 c8                	cmp    al,cl
c0003807:	75 60                	jne    c0003869 <dir_find+0x105>
c0003809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003812:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003815:	75 57                	jne    c000386e <dir_find+0x10a>
c0003817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000381f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003822:	89 ea                	mov    edx,ebp
c0003824:	e8 89 f3 ff ff       	call   c0002bb2 <cmp_lfn>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 41                	je     c000386e <dir_find+0x10a>
c000382d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003831:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003834:	eb 38                	jmp    c000386e <dir_find+0x10a>
c0003836:	89 f8                	mov    eax,edi
c0003838:	84 c0                	test   al,al
c000383a:	75 0d                	jne    c0003849 <dir_find+0xe5>
c000383c:	89 e8                	mov    eax,ebp
c000383e:	e8 e9 e8 ff ff       	call   c000212c <sum_sfn>
c0003843:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003847:	74 3f                	je     c0003888 <dir_find+0x124>
c0003849:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384d:	75 13                	jne    c0003862 <dir_find+0xfe>
c000384f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003852:	b9 0b 00 00 00       	mov    ecx,0xb
c0003857:	89 e8                	mov    eax,ebp
c0003859:	e8 fd e4 ff ff       	call   c0001d5b <mem_cmp>
c000385e:	85 c0                	test   eax,eax
c0003860:	74 26                	je     c0003888 <dir_find+0x124>
c0003862:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003869:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386e:	31 d2                	xor    edx,edx
c0003870:	89 d8                	mov    eax,ebx
c0003872:	e8 17 fc ff ff       	call   c000348e <dir_next>
c0003877:	89 c6                	mov    esi,eax
c0003879:	85 c0                	test   eax,eax
c000387b:	0f 84 16 ff ff ff    	je     c0003797 <dir_find+0x33>
c0003881:	eb 05                	jmp    c0003888 <dir_find+0x124>
c0003883:	be 04 00 00 00       	mov    esi,0x4
c0003888:	83 c4 1c             	add    esp,0x1c
c000388b:	89 f0                	mov    eax,esi
c000388d:	5b                   	pop    ebx
c000388e:	5e                   	pop    esi
c000388f:	5f                   	pop    edi
c0003890:	5d                   	pop    ebp
c0003891:	c3                   	ret    

c0003892 <follow_path>:
c0003892:	56                   	push   esi
c0003893:	53                   	push   ebx
c0003894:	89 c3                	mov    ebx,eax
c0003896:	83 ec 14             	sub    esp,0x14
c0003899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389d:	8b 30                	mov    esi,DWORD PTR [eax]
c000389f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a5:	80 fa 5c             	cmp    dl,0x5c
c00038a8:	75 07                	jne    c00038b1 <follow_path+0x1f>
c00038aa:	40                   	inc    eax
c00038ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038af:	eb ee                	jmp    c000389f <follow_path+0xd>
c00038b1:	80 fa 2f             	cmp    dl,0x2f
c00038b4:	74 f4                	je     c00038aa <follow_path+0x18>
c00038b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038c0:	77 3e                	ja     c0003900 <follow_path+0x6e>
c00038c2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c6:	31 d2                	xor    edx,edx
c00038c8:	89 d8                	mov    eax,ebx
c00038ca:	e8 34 f9 ff ff       	call   c0003203 <dir_sdi>
c00038cf:	eb 4f                	jmp    c0003920 <follow_path+0x8e>
c00038d1:	89 d8                	mov    eax,ebx
c00038d3:	e8 8c fe ff ff       	call   c0003764 <dir_find>
c00038d8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038db:	85 c0                	test   eax,eax
c00038dd:	75 32                	jne    c0003911 <follow_path+0x7f>
c00038df:	80 e2 04             	and    dl,0x4
c00038e2:	75 3c                	jne    c0003920 <follow_path+0x8e>
c00038e4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e8:	74 31                	je     c000391b <follow_path+0x89>
c00038ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ed:	25 ff 01 00 00       	and    eax,0x1ff
c00038f2:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f6:	8a 06                	mov    al,BYTE PTR [esi]
c00038f8:	e8 b3 f7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c00038fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003900:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 cb ef ff ff       	call   c00028d6 <create_name>
c000390b:	85 c0                	test   eax,eax
c000390d:	74 c2                	je     c00038d1 <follow_path+0x3f>
c000390f:	eb 0f                	jmp    c0003920 <follow_path+0x8e>
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	75 0a                	jne    c0003920 <follow_path+0x8e>
c0003916:	80 e2 04             	and    dl,0x4
c0003919:	75 05                	jne    c0003920 <follow_path+0x8e>
c000391b:	b8 05 00 00 00       	mov    eax,0x5
c0003920:	83 c4 14             	add    esp,0x14
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	c3                   	ret    

c0003926 <dir_register>:
c0003926:	55                   	push   ebp
c0003927:	57                   	push   edi
c0003928:	56                   	push   esi
c0003929:	be 06 00 00 00       	mov    esi,0x6
c000392e:	53                   	push   ebx
c000392f:	83 ec 2c             	sub    esp,0x2c
c0003932:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003936:	0f 85 65 01 00 00    	jne    c0003aa1 <dir_register+0x17b>
c000393c:	8b 38                	mov    edi,DWORD PTR [eax]
c000393e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003946:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003952:	74 06                	je     c000395a <dir_register+0x34>
c0003954:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003958:	eb ef                	jmp    c0003949 <dir_register+0x23>
c000395a:	89 c3                	mov    ebx,eax
c000395c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003961:	8d 40 20             	lea    eax,[eax+0x20]
c0003964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003968:	89 c2                	mov    edx,eax
c000396a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396e:	e8 c8 e3 ff ff       	call   c0001d3b <mem_cpy>
c0003973:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003978:	74 48                	je     c00039c2 <dir_register+0x9c>
c000397a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397e:	bd 01 00 00 00       	mov    ebp,0x1
c0003983:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003986:	55                   	push   ebp
c0003987:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398f:	e8 dc e6 ff ff       	call   c0002070 <gen_numname>
c0003994:	58                   	pop    eax
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 c8 fd ff ff       	call   c0003764 <dir_find>
c000399c:	89 c6                	mov    esi,eax
c000399e:	85 c0                	test   eax,eax
c00039a0:	75 10                	jne    c00039b2 <dir_register+0x8c>
c00039a2:	45                   	inc    ebp
c00039a3:	83 fd 64             	cmp    ebp,0x64
c00039a6:	75 db                	jne    c0003983 <dir_register+0x5d>
c00039a8:	be 07 00 00 00       	mov    esi,0x7
c00039ad:	e9 ef 00 00 00       	jmp    c0003aa1 <dir_register+0x17b>
c00039b2:	83 f8 04             	cmp    eax,0x4
c00039b5:	0f 85 e6 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039bb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039bf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c2:	bd 01 00 00 00       	mov    ebp,0x1
c00039c7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cc:	74 13                	je     c00039e1 <dir_register+0xbb>
c00039ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d7:	83 c0 0c             	add    eax,0xc
c00039da:	31 d2                	xor    edx,edx
c00039dc:	f7 f1                	div    ecx
c00039de:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e1:	89 ea                	mov    edx,ebp
c00039e3:	89 d8                	mov    eax,ebx
c00039e5:	e8 a9 fb ff ff       	call   c0003593 <dir_alloc>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	0f 85 ad 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039f4:	4d                   	dec    ebp
c00039f5:	74 6a                	je     c0003a61 <dir_register+0x13b>
c00039f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fa:	89 e8                	mov    eax,ebp
c00039fc:	c1 e0 05             	shl    eax,0x5
c00039ff:	29 c2                	sub    edx,eax
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 fb f7 ff ff       	call   c0003203 <dir_sdi>
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	0f 85 8f 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c0003a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a16:	e8 11 e7 ff ff       	call   c000212c <sum_sfn>
c0003a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a22:	89 f8                	mov    eax,edi
c0003a24:	e8 0c e8 ff ff       	call   c0002235 <move_window>
c0003a29:	89 c6                	mov    esi,eax
c0003a2b:	85 c0                	test   eax,eax
c0003a2d:	75 72                	jne    c0003aa1 <dir_register+0x17b>
c0003a2f:	83 ec 0c             	sub    esp,0xc
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a39:	0f b6 c8             	movzx  ecx,al
c0003a3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3f:	52                   	push   edx
c0003a40:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a43:	e8 a4 e5 ff ff       	call   c0001fec <put_lfn>
c0003a48:	31 d2                	xor    edx,edx
c0003a4a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 39 fa ff ff       	call   c000348e <dir_next>
c0003a55:	83 c4 10             	add    esp,0x10
c0003a58:	89 c6                	mov    esi,eax
c0003a5a:	85 c0                	test   eax,eax
c0003a5c:	75 43                	jne    c0003aa1 <dir_register+0x17b>
c0003a5e:	4d                   	dec    ebp
c0003a5f:	75 be                	jne    c0003a1f <dir_register+0xf9>
c0003a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a64:	89 f8                	mov    eax,edi
c0003a66:	e8 ca e7 ff ff       	call   c0002235 <move_window>
c0003a6b:	89 c6                	mov    esi,eax
c0003a6d:	85 c0                	test   eax,eax
c0003a6f:	75 30                	jne    c0003aa1 <dir_register+0x17b>
c0003a71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a74:	b9 20 00 00 00       	mov    ecx,0x20
c0003a79:	31 d2                	xor    edx,edx
c0003a7b:	e8 d0 e2 ff ff       	call   c0001d50 <mem_set>
c0003a80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a87:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8c:	e8 aa e2 ff ff       	call   c0001d3b <mem_cpy>
c0003a91:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a94:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a97:	83 e0 18             	and    eax,0x18
c0003a9a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa1:	83 c4 2c             	add    esp,0x2c
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	5b                   	pop    ebx
c0003aa7:	5e                   	pop    esi
c0003aa8:	5f                   	pop    edi
c0003aa9:	5d                   	pop    ebp
c0003aaa:	c3                   	ret    

c0003aab <f_mount>:
c0003aab:	53                   	push   ebx
c0003aac:	83 ec 18             	sub    esp,0x18
c0003aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abf:	e8 7a e6 ff ff       	call   c000213e <get_ldnumber>
c0003ac4:	89 c2                	mov    edx,eax
c0003ac6:	b8 0b 00 00 00       	mov    eax,0xb
c0003acb:	85 d2                	test   edx,edx
c0003acd:	78 39                	js     c0003b08 <f_mount+0x5d>
c0003acf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad6:	85 c0                	test   eax,eax
c0003ad8:	74 03                	je     c0003add <f_mount+0x32>
c0003ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 03                	je     c0003ae8 <f_mount+0x3d>
c0003ae5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aec:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af3:	31 c0                	xor    eax,eax
c0003af5:	84 db                	test   bl,bl
c0003af7:	74 0f                	je     c0003b08 <f_mount+0x5d>
c0003af9:	31 c9                	xor    ecx,ecx
c0003afb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003aff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b03:	e8 80 e8 ff ff       	call   c0002388 <mount_volume>
c0003b08:	83 c4 18             	add    esp,0x18
c0003b0b:	5b                   	pop    ebx
c0003b0c:	c3                   	ret    

c0003b0d <f_open>:
c0003b0d:	55                   	push   ebp
c0003b0e:	b8 09 00 00 00       	mov    eax,0x9
c0003b13:	57                   	push   edi
c0003b14:	56                   	push   esi
c0003b15:	53                   	push   ebx
c0003b16:	83 ec 5c             	sub    esp,0x5c
c0003b19:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	0f 84 a7 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b29:	89 fe                	mov    esi,edi
c0003b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2f:	83 e6 3f             	and    esi,0x3f
c0003b32:	89 f0                	mov    eax,esi
c0003b34:	0f b6 c8             	movzx  ecx,al
c0003b37:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3b:	e8 48 e8 ff ff       	call   c0002388 <mount_volume>
c0003b40:	85 c0                	test   eax,eax
c0003b42:	0f 85 82 02 00 00    	jne    c0003dca <f_open+0x2bd>
c0003b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4c:	83 ec 0c             	sub    esp,0xc
c0003b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b53:	68 00 02 00 00       	push   0x200
c0003b58:	e8 ff 1e 00 00       	call   c0005a5c <ff_memalloc>
c0003b5d:	83 c4 10             	add    esp,0x10
c0003b60:	89 c5                	mov    ebp,eax
c0003b62:	b8 11 00 00 00       	mov    eax,0x11
c0003b67:	85 ed                	test   ebp,ebp
c0003b69:	0f 84 61 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b73:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b77:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7e:	e8 0f fd ff ff       	call   c0003892 <follow_path>
c0003b83:	85 c0                	test   eax,eax
c0003b85:	75 0c                	jne    c0003b93 <f_open+0x86>
c0003b87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8c:	79 05                	jns    c0003b93 <f_open+0x86>
c0003b8e:	b8 06 00 00 00       	mov    eax,0x6
c0003b93:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b99:	0f 84 de 00 00 00    	je     c0003c7d <f_open+0x170>
c0003b9f:	85 c0                	test   eax,eax
c0003ba1:	74 1e                	je     c0003bc1 <f_open+0xb4>
c0003ba3:	83 f8 04             	cmp    eax,0x4
c0003ba6:	0f 85 06 02 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bb0:	83 ce 08             	or     esi,0x8
c0003bb3:	e8 6e fd ff ff       	call   c0003926 <dir_register>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	74 2f                	je     c0003beb <f_open+0xde>
c0003bbc:	e9 f1 01 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003bc1:	b8 07 00 00 00       	mov    eax,0x7
c0003bc6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bcb:	0f 85 e1 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bd1:	b8 08 00 00 00       	mov    eax,0x8
c0003bd6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdc:	0f 85 d0 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003be2:	83 e7 08             	and    edi,0x8
c0003be5:	0f 84 bf 00 00 00    	je     c0003caa <f_open+0x19d>
c0003beb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bf3:	89 ca                	mov    edx,ecx
c0003bf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfb:	e8 b0 f4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c04:	89 c7                	mov    edi,eax
c0003c06:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0e:	e8 25 e1 ff ff       	call   c0001d38 <st_dword>
c0003c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c17:	31 c9                	xor    ecx,ecx
c0003c19:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c25:	e8 af f4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0003c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2e:	31 d2                	xor    edx,edx
c0003c30:	83 c0 1c             	add    eax,0x1c
c0003c33:	e8 00 e1 ff ff       	call   c0001d38 <st_dword>
c0003c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3c:	85 ff                	test   edi,edi
c0003c3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c42:	74 66                	je     c0003caa <f_open+0x19d>
c0003c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c48:	31 c9                	xor    ecx,ecx
c0003c4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4d:	89 fa                	mov    edx,edi
c0003c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c57:	e8 a9 f7 ff ff       	call   c0003405 <remove_chain>
c0003c5c:	85 c0                	test   eax,eax
c0003c5e:	0f 85 4e 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c68:	4f                   	dec    edi
c0003c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6d:	e8 c3 e5 ff ff       	call   c0002235 <move_window>
c0003c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7b:	eb 27                	jmp    c0003ca4 <f_open+0x197>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	0f 85 2d 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c85:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c89:	b8 04 00 00 00       	mov    eax,0x4
c0003c8e:	f6 c2 10             	test   dl,0x10
c0003c91:	0f 85 1b 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c97:	83 e7 02             	and    edi,0x2
c0003c9a:	74 0e                	je     c0003caa <f_open+0x19d>
c0003c9c:	b8 07 00 00 00       	mov    eax,0x7
c0003ca1:	80 e2 01             	and    dl,0x1
c0003ca4:	0f 85 08 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003caa:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cb0:	74 03                	je     c0003cb5 <f_open+0x1a8>
c0003cb2:	83 ce 40             	or     esi,0x40
c0003cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc0:	89 fa                	mov    edx,edi
c0003cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cc9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ccc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cce:	e8 dd f3 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003cd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd9:	e8 3e e0 ff ff       	call   c0001d1c <ld_dword>
c0003cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce7:	31 d2                	xor    edx,edx
c0003ce9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003ced:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003cfc:	89 f0                	mov    eax,esi
c0003cfe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d05:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d08:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d14:	e8 37 e0 ff ff       	call   c0001d50 <mem_set>
c0003d19:	83 e6 20             	and    esi,0x20
c0003d1c:	75 07                	jne    c0003d25 <f_open+0x218>
c0003d1e:	31 c0                	xor    eax,eax
c0003d20:	e9 8d 00 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003d25:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d28:	85 ff                	test   edi,edi
c0003d2a:	74 f2                	je     c0003d1e <f_open+0x211>
c0003d2c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d33:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d36:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d3a:	c1 e6 09             	shl    esi,0x9
c0003d3d:	39 fe                	cmp    esi,edi
c0003d3f:	73 1c                	jae    c0003d5d <f_open+0x250>
c0003d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d43:	29 f7                	sub    edi,esi
c0003d45:	e8 b7 f3 ff ff       	call   c0003101 <get_fat.isra.2>
c0003d4a:	89 c2                	mov    edx,eax
c0003d4c:	83 f8 01             	cmp    eax,0x1
c0003d4f:	76 10                	jbe    c0003d61 <f_open+0x254>
c0003d51:	83 f8 ff             	cmp    eax,0xffffffff
c0003d54:	75 e7                	jne    c0003d3d <f_open+0x230>
c0003d56:	b8 01 00 00 00       	mov    eax,0x1
c0003d5b:	eb 09                	jmp    c0003d66 <f_open+0x259>
c0003d5d:	31 c0                	xor    eax,eax
c0003d5f:	eb 05                	jmp    c0003d66 <f_open+0x259>
c0003d61:	b8 02 00 00 00       	mov    eax,0x2
c0003d66:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d69:	85 c0                	test   eax,eax
c0003d6b:	75 45                	jne    c0003db2 <f_open+0x2a5>
c0003d6d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d73:	74 a9                	je     c0003d1e <f_open+0x211>
c0003d75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d79:	89 f0                	mov    eax,esi
c0003d7b:	e8 d5 e1 ff ff       	call   c0001f55 <clst2sect>
c0003d80:	89 c2                	mov    edx,eax
c0003d82:	b8 02 00 00 00       	mov    eax,0x2
c0003d87:	85 d2                	test   edx,edx
c0003d89:	74 27                	je     c0003db2 <f_open+0x2a5>
c0003d8b:	89 f9                	mov    ecx,edi
c0003d8d:	c1 e9 09             	shr    ecx,0x9
c0003d90:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d93:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d96:	6a 01                	push   0x1
c0003d98:	50                   	push   eax
c0003d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da1:	50                   	push   eax
c0003da2:	e8 1d df ff ff       	call   c0001cc4 <disk_read>
c0003da7:	83 c4 10             	add    esp,0x10
c0003daa:	85 c0                	test   eax,eax
c0003dac:	0f 95 c0             	setne  al
c0003daf:	0f b6 c0             	movzx  eax,al
c0003db2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db6:	83 ec 0c             	sub    esp,0xc
c0003db9:	55                   	push   ebp
c0003dba:	e8 b5 1c 00 00       	call   c0005a74 <ff_memfree>
c0003dbf:	83 c4 10             	add    esp,0x10
c0003dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc6:	85 c0                	test   eax,eax
c0003dc8:	74 06                	je     c0003dd0 <f_open+0x2c3>
c0003dca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dd0:	83 c4 5c             	add    esp,0x5c
c0003dd3:	5b                   	pop    ebx
c0003dd4:	5e                   	pop    esi
c0003dd5:	5f                   	pop    edi
c0003dd6:	5d                   	pop    ebp
c0003dd7:	c3                   	ret    

c0003dd8 <f_read>:
c0003dd8:	55                   	push   ebp
c0003dd9:	57                   	push   edi
c0003dda:	56                   	push   esi
c0003ddb:	53                   	push   ebx
c0003ddc:	83 ec 2c             	sub    esp,0x2c
c0003ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003df1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 8f e3 ff ff       	call   c000218b <validate>
c0003dfc:	89 c5                	mov    ebp,eax
c0003dfe:	85 c0                	test   eax,eax
c0003e00:	0f 85 c7 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e06:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e0a:	85 ed                	test   ebp,ebp
c0003e0c:	0f 85 bb 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e12:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e16:	0f 84 ac 01 00 00    	je     c0003fc8 <f_read+0x1f0>
c0003e1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e22:	89 c7                	mov    edi,eax
c0003e24:	39 f0                	cmp    eax,esi
c0003e26:	0f 86 ad 00 00 00    	jbe    c0003ed9 <f_read+0x101>
c0003e2c:	89 f7                	mov    edi,esi
c0003e2e:	e9 a6 00 00 00       	jmp    c0003ed9 <f_read+0x101>
c0003e33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e36:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3c:	0f 85 5b 01 00 00    	jne    c0003f9d <f_read+0x1c5>
c0003e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e46:	89 d1                	mov    ecx,edx
c0003e48:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4c:	c1 e9 09             	shr    ecx,0x9
c0003e4f:	48                   	dec    eax
c0003e50:	21 c8                	and    eax,ecx
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	0f 84 8a 00 00 00    	je     c0003ee6 <f_read+0x10e>
c0003e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e63:	89 c8                	mov    eax,ecx
c0003e65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e69:	e8 e7 e0 ff ff       	call   c0001f55 <clst2sect>
c0003e6e:	85 c0                	test   eax,eax
c0003e70:	0f 84 88 00 00 00    	je     c0003efe <f_read+0x126>
c0003e76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e82:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e88:	0f 86 bd 00 00 00    	jbe    c0003f4b <f_read+0x173>
c0003e8e:	89 fe                	mov    esi,edi
c0003e90:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e94:	c1 ee 09             	shr    esi,0x9
c0003e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e9b:	01 f2                	add    edx,esi
c0003e9d:	39 c2                	cmp    edx,eax
c0003e9f:	76 06                	jbe    c0003ea7 <f_read+0xcf>
c0003ea1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea5:	89 c6                	mov    esi,eax
c0003ea7:	56                   	push   esi
c0003ea8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb4:	50                   	push   eax
c0003eb5:	e8 0a de ff ff       	call   c0001cc4 <disk_read>
c0003eba:	83 c4 10             	add    esp,0x10
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	75 50                	jne    c0003f11 <f_read+0x139>
c0003ec1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec5:	78 60                	js     c0003f27 <f_read+0x14f>
c0003ec7:	c1 e6 09             	shl    esi,0x9
c0003eca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ece:	29 f7                	sub    edi,esi
c0003ed0:	01 30                	add    DWORD PTR [eax],esi
c0003ed2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed9:	85 ff                	test   edi,edi
c0003edb:	0f 85 52 ff ff ff    	jne    c0003e33 <f_read+0x5b>
c0003ee1:	e9 e7 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003ee6:	85 d2                	test   edx,edx
c0003ee8:	75 05                	jne    c0003eef <f_read+0x117>
c0003eea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eed:	eb 0a                	jmp    c0003ef9 <f_read+0x121>
c0003eef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef4:	e8 08 f2 ff ff       	call   c0003101 <get_fat.isra.2>
c0003ef9:	83 f8 01             	cmp    eax,0x1
c0003efc:	77 0e                	ja     c0003f0c <f_read+0x134>
c0003efe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f02:	bd 02 00 00 00       	mov    ebp,0x2
c0003f07:	e9 c1 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0f:	75 0e                	jne    c0003f1f <f_read+0x147>
c0003f11:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f15:	bd 01 00 00 00       	mov    ebp,0x1
c0003f1a:	e9 ae 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f22:	e9 35 ff ff ff       	jmp    c0003e5c <f_read+0x84>
c0003f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f2a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2e:	39 f0                	cmp    eax,esi
c0003f30:	73 95                	jae    c0003ec7 <f_read+0xef>
c0003f32:	c1 e0 09             	shl    eax,0x9
c0003f35:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	e8 f5 dd ff ff       	call   c0001d3b <mem_cpy>
c0003f46:	e9 7c ff ff ff       	jmp    c0003ec7 <f_read+0xef>
c0003f4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f52:	74 42                	je     c0003f96 <f_read+0x1be>
c0003f54:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f57:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5b:	79 19                	jns    c0003f76 <f_read+0x19e>
c0003f5d:	6a 01                	push   0x1
c0003f5f:	50                   	push   eax
c0003f60:	56                   	push   esi
c0003f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f65:	50                   	push   eax
c0003f66:	e8 6f dd ff ff       	call   c0001cda <disk_write>
c0003f6b:	83 c4 10             	add    esp,0x10
c0003f6e:	85 c0                	test   eax,eax
c0003f70:	75 9f                	jne    c0003f11 <f_read+0x139>
c0003f72:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f76:	6a 01                	push   0x1
c0003f78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7c:	56                   	push   esi
c0003f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 39 dd ff ff       	call   c0001cc4 <disk_read>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	0f 85 7b ff ff ff    	jne    c0003f11 <f_read+0x139>
c0003f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fa0:	ba 00 02 00 00       	mov    edx,0x200
c0003fa5:	25 ff 01 00 00       	and    eax,0x1ff
c0003faa:	89 fe                	mov    esi,edi
c0003fac:	29 c2                	sub    edx,eax
c0003fae:	39 d7                	cmp    edi,edx
c0003fb0:	76 02                	jbe    c0003fb4 <f_read+0x1dc>
c0003fb2:	89 d6                	mov    esi,edx
c0003fb4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb8:	89 f1                	mov    ecx,esi
c0003fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbe:	e8 78 dd ff ff       	call   c0001d3b <mem_cpy>
c0003fc3:	e9 02 ff ff ff       	jmp    c0003eca <f_read+0xf2>
c0003fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcd:	83 c4 2c             	add    esp,0x2c
c0003fd0:	89 e8                	mov    eax,ebp
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	5f                   	pop    edi
c0003fd5:	5d                   	pop    ebp
c0003fd6:	c3                   	ret    

c0003fd7 <f_write>:
c0003fd7:	55                   	push   ebp
c0003fd8:	57                   	push   edi
c0003fd9:	56                   	push   esi
c0003fda:	53                   	push   ebx
c0003fdb:	83 ec 2c             	sub    esp,0x2c
c0003fde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ff0:	89 d8                	mov    eax,ebx
c0003ff2:	e8 94 e1 ff ff       	call   c000218b <validate>
c0003ff7:	89 c5                	mov    ebp,eax
c0003ff9:	85 c0                	test   eax,eax
c0003ffb:	0f 85 00 02 00 00    	jne    c0004201 <f_write+0x22a>
c0004001:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004005:	85 ed                	test   ebp,ebp
c0004007:	0f 85 f4 01 00 00    	jne    c0004201 <f_write+0x22a>
c000400d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004011:	0f 84 e5 01 00 00    	je     c00041fc <f_write+0x225>
c0004017:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000401a:	89 c7                	mov    edi,eax
c000401c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004020:	0f 83 ea 00 00 00    	jae    c0004110 <f_write+0x139>
c0004026:	f7 d0                	not    eax
c0004028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402c:	e9 df 00 00 00       	jmp    c0004110 <f_write+0x139>
c0004031:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004034:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000403a:	0f 85 8b 01 00 00    	jne    c00041cb <f_write+0x1f4>
c0004040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004044:	89 d1                	mov    ecx,edx
c0004046:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404a:	c1 e9 09             	shr    ecx,0x9
c000404d:	48                   	dec    eax
c000404e:	21 c8                	and    eax,ecx
c0004050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004054:	0f 84 c3 00 00 00    	je     c000411d <f_write+0x146>
c000405a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405e:	0f 88 18 01 00 00    	js     c000417c <f_write+0x1a5>
c0004064:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004068:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406b:	89 c8                	mov    eax,ecx
c000406d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004071:	e8 df de ff ff       	call   c0001f55 <clst2sect>
c0004076:	85 c0                	test   eax,eax
c0004078:	0f 84 c8 00 00 00    	je     c0004146 <f_write+0x16f>
c000407e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004086:	01 c7                	add    edi,eax
c0004088:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004090:	0f 86 0d 01 00 00    	jbe    c00041a3 <f_write+0x1cc>
c0004096:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000409a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000409e:	c1 ee 09             	shr    esi,0x9
c00040a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040a5:	01 f2                	add    edx,esi
c00040a7:	39 c2                	cmp    edx,eax
c00040a9:	76 06                	jbe    c00040b1 <f_write+0xda>
c00040ab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040af:	89 c6                	mov    esi,eax
c00040b1:	56                   	push   esi
c00040b2:	57                   	push   edi
c00040b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 19 dc ff ff       	call   c0001cda <disk_write>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 8d 00 00 00    	jne    c0004159 <f_write+0x182>
c00040cc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cf:	29 fa                	sub    edx,edi
c00040d1:	39 f2                	cmp    edx,esi
c00040d3:	73 18                	jae    c00040ed <f_write+0x116>
c00040d5:	c1 e2 09             	shl    edx,0x9
c00040d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040db:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040df:	b9 00 02 00 00       	mov    ecx,0x200
c00040e4:	e8 52 dc ff ff       	call   c0001d3b <mem_cpy>
c00040e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ed:	c1 e6 09             	shl    esi,0x9
c00040f0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fc:	01 30                	add    DWORD PTR [eax],esi
c00040fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004101:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004107:	39 f0                	cmp    eax,esi
c0004109:	73 02                	jae    c000410d <f_write+0x136>
c000410b:	89 f0                	mov    eax,esi
c000410d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004110:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004115:	0f 85 16 ff ff ff    	jne    c0004031 <f_write+0x5a>
c000411b:	eb 1b                	jmp    c0004138 <f_write+0x161>
c000411d:	85 d2                	test   edx,edx
c000411f:	75 09                	jne    c000412a <f_write+0x153>
c0004121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004124:	85 c0                	test   eax,eax
c0004126:	75 19                	jne    c0004141 <f_write+0x16a>
c0004128:	eb 03                	jmp    c000412d <f_write+0x156>
c000412a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412d:	89 d8                	mov    eax,ebx
c000412f:	e8 97 f1 ff ff       	call   c00032cb <create_chain>
c0004134:	85 c0                	test   eax,eax
c0004136:	75 09                	jne    c0004141 <f_write+0x16a>
c0004138:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413c:	e9 c0 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004141:	83 f8 01             	cmp    eax,0x1
c0004144:	75 0e                	jne    c0004154 <f_write+0x17d>
c0004146:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000414a:	bd 02 00 00 00       	mov    ebp,0x2
c000414f:	e9 ad 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004154:	83 f8 ff             	cmp    eax,0xffffffff
c0004157:	75 0e                	jne    c0004167 <f_write+0x190>
c0004159:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415d:	bd 01 00 00 00       	mov    ebp,0x1
c0004162:	e9 9a 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004167:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000416a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416e:	0f 85 e6 fe ff ff    	jne    c000405a <f_write+0x83>
c0004174:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004177:	e9 de fe ff ff       	jmp    c000405a <f_write+0x83>
c000417c:	6a 01                	push   0x1
c000417e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004181:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004184:	50                   	push   eax
c0004185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004189:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418d:	50                   	push   eax
c000418e:	e8 47 db ff ff       	call   c0001cda <disk_write>
c0004193:	83 c4 10             	add    esp,0x10
c0004196:	85 c0                	test   eax,eax
c0004198:	75 bf                	jne    c0004159 <f_write+0x182>
c000419a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419e:	e9 c1 fe ff ff       	jmp    c0004064 <f_write+0x8d>
c00041a3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a6:	74 20                	je     c00041c8 <f_write+0x1f1>
c00041a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ab:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ae:	76 18                	jbe    c00041c8 <f_write+0x1f1>
c00041b0:	6a 01                	push   0x1
c00041b2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b5:	57                   	push   edi
c00041b6:	50                   	push   eax
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 03 db ff ff       	call   c0001cc4 <disk_read>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 91                	jne    c0004159 <f_write+0x182>
c00041c8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ce:	ba 00 02 00 00       	mov    edx,0x200
c00041d3:	25 ff 01 00 00       	and    eax,0x1ff
c00041d8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041dc:	29 c2                	sub    edx,eax
c00041de:	39 d6                	cmp    esi,edx
c00041e0:	76 02                	jbe    c00041e4 <f_write+0x20d>
c00041e2:	89 d6                	mov    esi,edx
c00041e4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e8:	89 f1                	mov    ecx,esi
c00041ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ee:	e8 48 db ff ff       	call   c0001d3b <mem_cpy>
c00041f3:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f7:	e9 f4 fe ff ff       	jmp    c00040f0 <f_write+0x119>
c00041fc:	bd 07 00 00 00       	mov    ebp,0x7
c0004201:	83 c4 2c             	add    esp,0x2c
c0004204:	89 e8                	mov    eax,ebp
c0004206:	5b                   	pop    ebx
c0004207:	5e                   	pop    esi
c0004208:	5f                   	pop    edi
c0004209:	5d                   	pop    ebp
c000420a:	c3                   	ret    

c000420b <f_sync>:
c000420b:	56                   	push   esi
c000420c:	53                   	push   ebx
c000420d:	83 ec 14             	sub    esp,0x14
c0004210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004214:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004218:	89 d8                	mov    eax,ebx
c000421a:	e8 6c df ff ff       	call   c000218b <validate>
c000421f:	85 c0                	test   eax,eax
c0004221:	0f 85 93 00 00 00    	jne    c00042ba <f_sync+0xaf>
c0004227:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000422a:	f6 c2 40             	test   dl,0x40
c000422d:	0f 84 87 00 00 00    	je     c00042ba <f_sync+0xaf>
c0004233:	84 d2                	test   dl,dl
c0004235:	79 29                	jns    c0004260 <f_sync+0x55>
c0004237:	6a 01                	push   0x1
c0004239:	8d 43 28             	lea    eax,[ebx+0x28]
c000423c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423f:	50                   	push   eax
c0004240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004248:	50                   	push   eax
c0004249:	e8 8c da ff ff       	call   c0001cda <disk_write>
c000424e:	83 c4 10             	add    esp,0x10
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 01 00 00 00       	mov    eax,0x1
c0004258:	85 d2                	test   edx,edx
c000425a:	75 5e                	jne    c00042ba <f_sync+0xaf>
c000425c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004260:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004267:	e8 c9 df ff ff       	call   c0002235 <move_window>
c000426c:	85 c0                	test   eax,eax
c000426e:	75 4a                	jne    c00042ba <f_sync+0xaf>
c0004270:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004273:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004277:	89 f2                	mov    edx,esi
c0004279:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427e:	e8 56 ee ff ff       	call   c00030d9 <st_clust.isra.1>
c0004283:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004286:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004289:	e8 aa da ff ff       	call   c0001d38 <st_dword>
c000428e:	8d 46 16             	lea    eax,[esi+0x16]
c0004291:	ba 00 00 21 50       	mov    edx,0x50210000
c0004296:	e8 9d da ff ff       	call   c0001d38 <st_dword>
c000429b:	8d 46 12             	lea    eax,[esi+0x12]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	e8 8f da ff ff       	call   c0001d34 <st_word>
c00042a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b1:	e8 bf e9 ff ff       	call   c0002c75 <sync_fs>
c00042b6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ba:	83 c4 14             	add    esp,0x14
c00042bd:	5b                   	pop    ebx
c00042be:	5e                   	pop    esi
c00042bf:	c3                   	ret    

c00042c0 <f_close>:
c00042c0:	53                   	push   ebx
c00042c1:	83 ec 24             	sub    esp,0x24
c00042c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c8:	53                   	push   ebx
c00042c9:	e8 3d ff ff ff       	call   c000420b <f_sync>
c00042ce:	83 c4 10             	add    esp,0x10
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 15                	jne    c00042ea <f_close+0x2a>
c00042d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 ab de ff ff       	call   c000218b <validate>
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 06                	jne    c00042ea <f_close+0x2a>
c00042e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042ea:	83 c4 18             	add    esp,0x18
c00042ed:	5b                   	pop    ebx
c00042ee:	c3                   	ret    

c00042ef <f_lseek>:
c00042ef:	55                   	push   ebp
c00042f0:	57                   	push   edi
c00042f1:	56                   	push   esi
c00042f2:	53                   	push   ebx
c00042f3:	83 ec 2c             	sub    esp,0x2c
c00042f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00042fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004302:	89 d8                	mov    eax,ebx
c0004304:	e8 82 de ff ff       	call   c000218b <validate>
c0004309:	89 c5                	mov    ebp,eax
c000430b:	85 c0                	test   eax,eax
c000430d:	0f 85 79 01 00 00    	jne    c000448c <f_lseek+0x19d>
c0004313:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004317:	85 ed                	test   ebp,ebp
c0004319:	0f 85 6d 01 00 00    	jne    c000448c <f_lseek+0x19d>
c000431f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004322:	39 f0                	cmp    eax,esi
c0004324:	73 08                	jae    c000432e <f_lseek+0x3f>
c0004326:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000432a:	75 02                	jne    c000432e <f_lseek+0x3f>
c000432c:	89 c6                	mov    esi,eax
c000432e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004331:	85 f6                	test   esi,esi
c0004333:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000433a:	75 07                	jne    c0004343 <f_lseek+0x54>
c000433c:	31 f6                	xor    esi,esi
c000433e:	e9 e2 00 00 00       	jmp    c0004425 <f_lseek+0x136>
c0004343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004347:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434b:	c1 e7 09             	shl    edi,0x9
c000434e:	85 c9                	test   ecx,ecx
c0004350:	74 28                	je     c000437a <f_lseek+0x8b>
c0004352:	49                   	dec    ecx
c0004353:	31 d2                	xor    edx,edx
c0004355:	8d 46 ff             	lea    eax,[esi-0x1]
c0004358:	f7 f7                	div    edi
c000435a:	31 d2                	xor    edx,edx
c000435c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004360:	89 c8                	mov    eax,ecx
c0004362:	f7 f7                	div    edi
c0004364:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004368:	72 10                	jb     c000437a <f_lseek+0x8b>
c000436a:	89 f8                	mov    eax,edi
c000436c:	f7 d8                	neg    eax
c000436e:	21 c1                	and    ecx,eax
c0004370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004373:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004376:	29 ce                	sub    esi,ecx
c0004378:	eb 3c                	jmp    c00043b6 <f_lseek+0xc7>
c000437a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437d:	85 c0                	test   eax,eax
c000437f:	75 32                	jne    c00043b3 <f_lseek+0xc4>
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 d8                	mov    eax,ebx
c0004385:	e8 41 ef ff ff       	call   c00032cb <create_chain>
c000438a:	83 f8 01             	cmp    eax,0x1
c000438d:	75 0e                	jne    c000439d <f_lseek+0xae>
c000438f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004393:	bd 02 00 00 00       	mov    ebp,0x2
c0004398:	e9 ef 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c000439d:	83 f8 ff             	cmp    eax,0xffffffff
c00043a0:	75 0e                	jne    c00043b0 <f_lseek+0xc1>
c00043a2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a6:	bd 01 00 00 00       	mov    ebp,0x1
c00043ab:	e9 dc 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c00043b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b6:	85 c0                	test   eax,eax
c00043b8:	74 82                	je     c000433c <f_lseek+0x4d>
c00043ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bd:	39 fe                	cmp    esi,edi
c00043bf:	76 3d                	jbe    c00043fe <f_lseek+0x10f>
c00043c1:	01 fa                	add    edx,edi
c00043c3:	29 fe                	sub    esi,edi
c00043c5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cc:	89 c2                	mov    edx,eax
c00043ce:	74 0d                	je     c00043dd <f_lseek+0xee>
c00043d0:	89 d8                	mov    eax,ebx
c00043d2:	e8 f4 ee ff ff       	call   c00032cb <create_chain>
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 09                	jne    c00043e4 <f_lseek+0xf5>
c00043db:	eb 1f                	jmp    c00043fc <f_lseek+0x10d>
c00043dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043df:	e8 1d ed ff ff       	call   c0003101 <get_fat.isra.2>
c00043e4:	83 f8 ff             	cmp    eax,0xffffffff
c00043e7:	74 b9                	je     c00043a2 <f_lseek+0xb3>
c00043e9:	83 f8 01             	cmp    eax,0x1
c00043ec:	76 a1                	jbe    c000438f <f_lseek+0xa0>
c00043ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f2:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f5:	76 98                	jbe    c000438f <f_lseek+0xa0>
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	eb be                	jmp    c00043ba <f_lseek+0xcb>
c00043fc:	31 f6                	xor    esi,esi
c00043fe:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004401:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004407:	0f 84 2f ff ff ff    	je     c000433c <f_lseek+0x4d>
c000440d:	89 c2                	mov    edx,eax
c000440f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004413:	e8 3d db ff ff       	call   c0001f55 <clst2sect>
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 84 6f ff ff ff    	je     c000438f <f_lseek+0xa0>
c0004420:	c1 ee 09             	shr    esi,0x9
c0004423:	01 c6                	add    esi,eax
c0004425:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004428:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442b:	76 07                	jbe    c0004434 <f_lseek+0x145>
c000442d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004430:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004434:	a9 ff 01 00 00       	test   eax,0x1ff
c0004439:	74 51                	je     c000448c <f_lseek+0x19d>
c000443b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443e:	39 f0                	cmp    eax,esi
c0004440:	74 4a                	je     c000448c <f_lseek+0x19d>
c0004442:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004445:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004449:	79 21                	jns    c000446c <f_lseek+0x17d>
c000444b:	6a 01                	push   0x1
c000444d:	50                   	push   eax
c000444e:	57                   	push   edi
c000444f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004453:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004457:	50                   	push   eax
c0004458:	e8 7d d8 ff ff       	call   c0001cda <disk_write>
c000445d:	83 c4 10             	add    esp,0x10
c0004460:	85 c0                	test   eax,eax
c0004462:	0f 85 3a ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004468:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446c:	6a 01                	push   0x1
c000446e:	56                   	push   esi
c000446f:	57                   	push   edi
c0004470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004478:	50                   	push   eax
c0004479:	e8 46 d8 ff ff       	call   c0001cc4 <disk_read>
c000447e:	83 c4 10             	add    esp,0x10
c0004481:	85 c0                	test   eax,eax
c0004483:	0f 85 19 ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004489:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448c:	83 c4 2c             	add    esp,0x2c
c000448f:	89 e8                	mov    eax,ebp
c0004491:	5b                   	pop    ebx
c0004492:	5e                   	pop    esi
c0004493:	5f                   	pop    edi
c0004494:	5d                   	pop    ebp
c0004495:	c3                   	ret    

c0004496 <f_opendir>:
c0004496:	56                   	push   esi
c0004497:	b8 09 00 00 00       	mov    eax,0x9
c000449c:	53                   	push   ebx
c000449d:	83 ec 24             	sub    esp,0x24
c00044a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a4:	85 db                	test   ebx,ebx
c00044a6:	0f 84 af 00 00 00    	je     c000455b <f_opendir+0xc5>
c00044ac:	31 c9                	xor    ecx,ecx
c00044ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b6:	e8 cd de ff ff       	call   c0002388 <mount_volume>
c00044bb:	85 c0                	test   eax,eax
c00044bd:	0f 85 92 00 00 00    	jne    c0004555 <f_opendir+0xbf>
c00044c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c7:	83 ec 0c             	sub    esp,0xc
c00044ca:	89 03                	mov    DWORD PTR [ebx],eax
c00044cc:	68 00 02 00 00       	push   0x200
c00044d1:	e8 86 15 00 00       	call   c0005a5c <ff_memalloc>
c00044d6:	83 c4 10             	add    esp,0x10
c00044d9:	89 c6                	mov    esi,eax
c00044db:	b8 11 00 00 00       	mov    eax,0x11
c00044e0:	85 f6                	test   esi,esi
c00044e2:	74 77                	je     c000455b <f_opendir+0xc5>
c00044e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044ec:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 9c f3 ff ff       	call   c0003892 <follow_path>
c00044f6:	85 c0                	test   eax,eax
c00044f8:	75 37                	jne    c0004531 <f_opendir+0x9b>
c00044fa:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fe:	78 1c                	js     c000451c <f_opendir+0x86>
c0004500:	b8 05 00 00 00       	mov    eax,0x5
c0004505:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004509:	74 26                	je     c0004531 <f_opendir+0x9b>
c000450b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000450e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004512:	8a 00                	mov    al,BYTE PTR [eax]
c0004514:	e8 97 eb ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004520:	31 d2                	xor    edx,edx
c0004522:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000452a:	89 d8                	mov    eax,ebx
c000452c:	e8 d2 ec ff ff       	call   c0003203 <dir_sdi>
c0004531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004535:	83 ec 0c             	sub    esp,0xc
c0004538:	56                   	push   esi
c0004539:	e8 36 15 00 00       	call   c0005a74 <ff_memfree>
c000453e:	83 c4 10             	add    esp,0x10
c0004541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004545:	83 f8 04             	cmp    eax,0x4
c0004548:	74 06                	je     c0004550 <f_opendir+0xba>
c000454a:	85 c0                	test   eax,eax
c000454c:	74 0d                	je     c000455b <f_opendir+0xc5>
c000454e:	eb 05                	jmp    c0004555 <f_opendir+0xbf>
c0004550:	b8 05 00 00 00       	mov    eax,0x5
c0004555:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455b:	83 c4 24             	add    esp,0x24
c000455e:	5b                   	pop    ebx
c000455f:	5e                   	pop    esi
c0004560:	c3                   	ret    

c0004561 <f_closedir>:
c0004561:	53                   	push   ebx
c0004562:	83 ec 18             	sub    esp,0x18
c0004565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004569:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456d:	89 d8                	mov    eax,ebx
c000456f:	e8 17 dc ff ff       	call   c000218b <validate>
c0004574:	85 c0                	test   eax,eax
c0004576:	75 06                	jne    c000457e <f_closedir+0x1d>
c0004578:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457e:	83 c4 18             	add    esp,0x18
c0004581:	5b                   	pop    ebx
c0004582:	c3                   	ret    

c0004583 <f_readdir>:
c0004583:	57                   	push   edi
c0004584:	56                   	push   esi
c0004585:	53                   	push   ebx
c0004586:	83 ec 20             	sub    esp,0x20
c0004589:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004591:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004595:	89 d8                	mov    eax,ebx
c0004597:	e8 ef db ff ff       	call   c000218b <validate>
c000459c:	85 c0                	test   eax,eax
c000459e:	75 6e                	jne    c000460e <f_readdir+0x8b>
c00045a0:	85 ff                	test   edi,edi
c00045a2:	75 0b                	jne    c00045af <f_readdir+0x2c>
c00045a4:	31 d2                	xor    edx,edx
c00045a6:	89 d8                	mov    eax,ebx
c00045a8:	e8 56 ec ff ff       	call   c0003203 <dir_sdi>
c00045ad:	eb 5f                	jmp    c000460e <f_readdir+0x8b>
c00045af:	83 ec 0c             	sub    esp,0xc
c00045b2:	68 00 02 00 00       	push   0x200
c00045b7:	e8 a0 14 00 00       	call   c0005a5c <ff_memalloc>
c00045bc:	83 c4 10             	add    esp,0x10
c00045bf:	89 c6                	mov    esi,eax
c00045c1:	b8 11 00 00 00       	mov    eax,0x11
c00045c6:	85 f6                	test   esi,esi
c00045c8:	74 44                	je     c000460e <f_readdir+0x8b>
c00045ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ce:	31 d2                	xor    edx,edx
c00045d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d3:	89 d8                	mov    eax,ebx
c00045d5:	e8 1a f0 ff ff       	call   c00035f4 <dir_read>
c00045da:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045df:	75 19                	jne    c00045fa <f_readdir+0x77>
c00045e1:	89 fa                	mov    edx,edi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 e2 e8 ff ff       	call   c0002ecc <get_fileinfo>
c00045ea:	31 d2                	xor    edx,edx
c00045ec:	89 d8                	mov    eax,ebx
c00045ee:	e8 9b ee ff ff       	call   c000348e <dir_next>
c00045f3:	83 f8 04             	cmp    eax,0x4
c00045f6:	75 02                	jne    c00045fa <f_readdir+0x77>
c00045f8:	31 c0                	xor    eax,eax
c00045fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fe:	83 ec 0c             	sub    esp,0xc
c0004601:	56                   	push   esi
c0004602:	e8 6d 14 00 00       	call   c0005a74 <ff_memfree>
c0004607:	83 c4 10             	add    esp,0x10
c000460a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460e:	83 c4 20             	add    esp,0x20
c0004611:	5b                   	pop    ebx
c0004612:	5e                   	pop    esi
c0004613:	5f                   	pop    edi
c0004614:	c3                   	ret    

c0004615 <f_stat>:
c0004615:	57                   	push   edi
c0004616:	31 c9                	xor    ecx,ecx
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 30             	sub    esp,0x30
c000461d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004621:	89 e2                	mov    edx,esp
c0004623:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004627:	e8 5c dd ff ff       	call   c0002388 <mount_volume>
c000462c:	89 c3                	mov    ebx,eax
c000462e:	85 c0                	test   eax,eax
c0004630:	75 59                	jne    c000468b <f_stat+0x76>
c0004632:	83 ec 0c             	sub    esp,0xc
c0004635:	bb 11 00 00 00       	mov    ebx,0x11
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 18 14 00 00       	call   c0005a5c <ff_memalloc>
c0004644:	83 c4 10             	add    esp,0x10
c0004647:	89 c6                	mov    esi,eax
c0004649:	85 c0                	test   eax,eax
c000464b:	74 3e                	je     c000468b <f_stat+0x76>
c000464d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004650:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004654:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004657:	89 e0                	mov    eax,esp
c0004659:	e8 34 f2 ff ff       	call   c0003892 <follow_path>
c000465e:	89 c3                	mov    ebx,eax
c0004660:	85 c0                	test   eax,eax
c0004662:	75 1b                	jne    c000467f <f_stat+0x6a>
c0004664:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004669:	78 0f                	js     c000467a <f_stat+0x65>
c000466b:	85 ff                	test   edi,edi
c000466d:	74 10                	je     c000467f <f_stat+0x6a>
c000466f:	89 fa                	mov    edx,edi
c0004671:	89 e0                	mov    eax,esp
c0004673:	e8 54 e8 ff ff       	call   c0002ecc <get_fileinfo>
c0004678:	eb 05                	jmp    c000467f <f_stat+0x6a>
c000467a:	bb 06 00 00 00       	mov    ebx,0x6
c000467f:	83 ec 0c             	sub    esp,0xc
c0004682:	56                   	push   esi
c0004683:	e8 ec 13 00 00       	call   c0005a74 <ff_memfree>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	83 c4 30             	add    esp,0x30
c000468e:	89 d8                	mov    eax,ebx
c0004690:	5b                   	pop    ebx
c0004691:	5e                   	pop    esi
c0004692:	5f                   	pop    edi
c0004693:	c3                   	ret    

c0004694 <f_getfree>:
c0004694:	55                   	push   ebp
c0004695:	31 c9                	xor    ecx,ecx
c0004697:	57                   	push   edi
c0004698:	56                   	push   esi
c0004699:	53                   	push   ebx
c000469a:	83 ec 2c             	sub    esp,0x2c
c000469d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a5:	e8 de dc ff ff       	call   c0002388 <mount_volume>
c00046aa:	89 c7                	mov    edi,eax
c00046ac:	85 c0                	test   eax,eax
c00046ae:	0f 85 d8 00 00 00    	jne    c000478c <f_getfree+0xf8>
c00046b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046bc:	89 30                	mov    DWORD PTR [eax],esi
c00046be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c7:	39 d0                	cmp    eax,edx
c00046c9:	77 0b                	ja     c00046d6 <f_getfree+0x42>
c00046cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046cf:	89 01                	mov    DWORD PTR [ecx],eax
c00046d1:	e9 b6 00 00 00       	jmp    c000478c <f_getfree+0xf8>
c00046d6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d9:	75 29                	jne    c0004704 <f_getfree+0x70>
c00046db:	bd 02 00 00 00       	mov    ebp,0x2
c00046e0:	31 db                	xor    ebx,ebx
c00046e2:	89 ea                	mov    edx,ebp
c00046e4:	89 f0                	mov    eax,esi
c00046e6:	e8 16 ea ff ff       	call   c0003101 <get_fat.isra.2>
c00046eb:	83 f8 ff             	cmp    eax,0xffffffff
c00046ee:	74 7b                	je     c000476b <f_getfree+0xd7>
c00046f0:	83 f8 01             	cmp    eax,0x1
c00046f3:	74 7d                	je     c0004772 <f_getfree+0xde>
c00046f5:	83 d3 00             	adc    ebx,0x0
c00046f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fc:	45                   	inc    ebp
c00046fd:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004700:	77 e0                	ja     c00046e2 <f_getfree+0x4e>
c0004702:	eb 77                	jmp    c000477b <f_getfree+0xe7>
c0004704:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004707:	31 db                	xor    ebx,ebx
c0004709:	31 f6                	xor    esi,esi
c000470b:	85 f6                	test   esi,esi
c000470d:	75 18                	jne    c0004727 <f_getfree+0x93>
c000470f:	8d 42 01             	lea    eax,[edx+0x1]
c0004712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471a:	e8 16 db ff ff       	call   c0002235 <move_window>
c000471f:	85 c0                	test   eax,eax
c0004721:	75 56                	jne    c0004779 <f_getfree+0xe5>
c0004723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004727:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004733:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004736:	75 11                	jne    c0004749 <f_getfree+0xb5>
c0004738:	e8 d2 d5 ff ff       	call   c0001d0f <ld_word>
c000473d:	66 83 f8 01          	cmp    ax,0x1
c0004741:	83 d3 00             	adc    ebx,0x0
c0004744:	83 c6 02             	add    esi,0x2
c0004747:	eb 13                	jmp    c000475c <f_getfree+0xc8>
c0004749:	e8 ce d5 ff ff       	call   c0001d1c <ld_dword>
c000474e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004753:	83 f8 01             	cmp    eax,0x1
c0004756:	83 d3 00             	adc    ebx,0x0
c0004759:	83 c6 04             	add    esi,0x4
c000475c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	4d                   	dec    ebp
c0004767:	75 a2                	jne    c000470b <f_getfree+0x77>
c0004769:	eb 10                	jmp    c000477b <f_getfree+0xe7>
c000476b:	bf 01 00 00 00       	mov    edi,0x1
c0004770:	eb 09                	jmp    c000477b <f_getfree+0xe7>
c0004772:	bf 02 00 00 00       	mov    edi,0x2
c0004777:	eb 02                	jmp    c000477b <f_getfree+0xe7>
c0004779:	89 c7                	mov    edi,eax
c000477b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477f:	89 18                	mov    DWORD PTR [eax],ebx
c0004781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004785:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004788:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000478c:	83 c4 2c             	add    esp,0x2c
c000478f:	89 f8                	mov    eax,edi
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	5f                   	pop    edi
c0004794:	5d                   	pop    ebp
c0004795:	c3                   	ret    

c0004796 <f_truncate>:
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 14             	sub    esp,0x14
c000479b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	e8 e1 d9 ff ff       	call   c000218b <validate>
c00047aa:	89 c6                	mov    esi,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 be 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047b4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b8:	85 f6                	test   esi,esi
c00047ba:	0f 85 b2 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047c0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c4:	0f 84 a3 00 00 00    	je     c000486d <f_truncate+0xd7>
c00047ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047d0:	0f 83 9c 00 00 00    	jae    c0004872 <f_truncate+0xdc>
c00047d6:	85 c0                	test   eax,eax
c00047d8:	75 15                	jne    c00047ef <f_truncate+0x59>
c00047da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dd:	31 c9                	xor    ecx,ecx
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 1f ec ff ff       	call   c0003405 <remove_chain>
c00047e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ed:	eb 35                	jmp    c0004824 <f_truncate+0x8e>
c00047ef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f4:	e8 08 e9 ff ff       	call   c0003101 <get_fat.isra.2>
c00047f9:	89 c2                	mov    edx,eax
c00047fb:	b8 01 00 00 00       	mov    eax,0x1
c0004800:	83 fa ff             	cmp    edx,0xffffffff
c0004803:	74 1f                	je     c0004824 <f_truncate+0x8e>
c0004805:	b8 02 00 00 00       	mov    eax,0x2
c000480a:	83 fa 01             	cmp    edx,0x1
c000480d:	74 15                	je     c0004824 <f_truncate+0x8e>
c000480f:	31 c0                	xor    eax,eax
c0004811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004815:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004818:	76 0a                	jbe    c0004824 <f_truncate+0x8e>
c000481a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 e1 eb ff ff       	call   c0003405 <remove_chain>
c0004824:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004827:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000482a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482d:	83 ca 40             	or     edx,0x40
c0004830:	85 c0                	test   eax,eax
c0004832:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004835:	75 2f                	jne    c0004866 <f_truncate+0xd0>
c0004837:	84 d2                	test   dl,dl
c0004839:	79 37                	jns    c0004872 <f_truncate+0xdc>
c000483b:	6a 01                	push   0x1
c000483d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004840:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004843:	50                   	push   eax
c0004844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484c:	50                   	push   eax
c000484d:	e8 88 d4 ff ff       	call   c0001cda <disk_write>
c0004852:	83 c4 10             	add    esp,0x10
c0004855:	85 c0                	test   eax,eax
c0004857:	75 08                	jne    c0004861 <f_truncate+0xcb>
c0004859:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485d:	31 f6                	xor    esi,esi
c000485f:	eb 11                	jmp    c0004872 <f_truncate+0xdc>
c0004861:	b8 01 00 00 00       	mov    eax,0x1
c0004866:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004869:	89 c6                	mov    esi,eax
c000486b:	eb 05                	jmp    c0004872 <f_truncate+0xdc>
c000486d:	be 07 00 00 00       	mov    esi,0x7
c0004872:	89 f0                	mov    eax,esi
c0004874:	83 c4 14             	add    esp,0x14
c0004877:	5b                   	pop    ebx
c0004878:	5e                   	pop    esi
c0004879:	c3                   	ret    

c000487a <f_unlink>:
c000487a:	55                   	push   ebp
c000487b:	b9 02 00 00 00       	mov    ecx,0x2
c0004880:	57                   	push   edi
c0004881:	56                   	push   esi
c0004882:	53                   	push   ebx
c0004883:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004894:	e8 ef da ff ff       	call   c0002388 <mount_volume>
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 f0 00 00 00    	jne    c0004991 <f_unlink+0x117>
c00048a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a5:	83 ec 0c             	sub    esp,0xc
c00048a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ac:	68 00 02 00 00       	push   0x200
c00048b1:	e8 a6 11 00 00       	call   c0005a5c <ff_memalloc>
c00048b6:	83 c4 10             	add    esp,0x10
c00048b9:	89 c3                	mov    ebx,eax
c00048bb:	b8 11 00 00 00       	mov    eax,0x11
c00048c0:	85 db                	test   ebx,ebx
c00048c2:	0f 84 c9 00 00 00    	je     c0004991 <f_unlink+0x117>
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048da:	e8 b3 ef ff ff       	call   c0003892 <follow_path>
c00048df:	85 c0                	test   eax,eax
c00048e1:	0f 85 96 00 00 00    	jne    c000497d <f_unlink+0x103>
c00048e7:	b8 06 00 00 00       	mov    eax,0x6
c00048ec:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f1:	0f 88 86 00 00 00    	js     c000497d <f_unlink+0x103>
c00048f7:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fc:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004902:	74 07                	je     c000490b <f_unlink+0x91>
c0004904:	b8 07 00 00 00       	mov    eax,0x7
c0004909:	eb 72                	jmp    c000497d <f_unlink+0x103>
c000490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004913:	8a 07                	mov    al,BYTE PTR [edi]
c0004915:	e8 96 e7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c000491a:	83 e5 10             	and    ebp,0x10
c000491d:	89 c6                	mov    esi,eax
c000491f:	75 0f                	jne    c0004930 <f_unlink+0xb6>
c0004921:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004925:	e8 e7 ed ff ff       	call   c0003711 <dir_remove>
c000492a:	85 c0                	test   eax,eax
c000492c:	74 2f                	je     c000495d <f_unlink+0xe3>
c000492e:	eb 4d                	jmp    c000497d <f_unlink+0x103>
c0004930:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004934:	31 d2                	xor    edx,edx
c0004936:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000493a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000493e:	e8 c0 e8 ff ff       	call   c0003203 <dir_sdi>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 36                	jne    c000497d <f_unlink+0x103>
c0004947:	31 d2                	xor    edx,edx
c0004949:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494d:	e8 a2 ec ff ff       	call   c00035f4 <dir_read>
c0004952:	85 c0                	test   eax,eax
c0004954:	74 ae                	je     c0004904 <f_unlink+0x8a>
c0004956:	83 f8 04             	cmp    eax,0x4
c0004959:	75 22                	jne    c000497d <f_unlink+0x103>
c000495b:	eb c4                	jmp    c0004921 <f_unlink+0xa7>
c000495d:	85 f6                	test   esi,esi
c000495f:	75 0b                	jne    c000496c <f_unlink+0xf2>
c0004961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004965:	e8 0b e3 ff ff       	call   c0002c75 <sync_fs>
c000496a:	eb 11                	jmp    c000497d <f_unlink+0x103>
c000496c:	31 c9                	xor    ecx,ecx
c000496e:	89 f2                	mov    edx,esi
c0004970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004974:	e8 8c ea ff ff       	call   c0003405 <remove_chain>
c0004979:	85 c0                	test   eax,eax
c000497b:	74 e4                	je     c0004961 <f_unlink+0xe7>
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	53                   	push   ebx
c0004985:	e8 ea 10 00 00       	call   c0005a74 <ff_memfree>
c000498a:	83 c4 10             	add    esp,0x10
c000498d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004991:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004997:	5b                   	pop    ebx
c0004998:	5e                   	pop    esi
c0004999:	5f                   	pop    edi
c000499a:	5d                   	pop    ebp
c000499b:	c3                   	ret    

c000499c <f_mkdir>:
c000499c:	57                   	push   edi
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	56                   	push   esi
c00049a3:	53                   	push   ebx
c00049a4:	83 ec 50             	sub    esp,0x50
c00049a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ab:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049af:	e8 d4 d9 ff ff       	call   c0002388 <mount_volume>
c00049b4:	89 c3                	mov    ebx,eax
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 85 70 01 00 00    	jne    c0004b2e <f_mkdir+0x192>
c00049be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c2:	bb 11 00 00 00       	mov    ebx,0x11
c00049c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049cb:	83 ec 0c             	sub    esp,0xc
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 84 10 00 00       	call   c0005a5c <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c7                	mov    edi,eax
c00049dd:	85 c0                	test   eax,eax
c00049df:	0f 84 49 01 00 00    	je     c0004b2e <f_mkdir+0x192>
c00049e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f4:	e8 99 ee ff ff       	call   c0003892 <follow_path>
c00049f9:	89 c3                	mov    ebx,eax
c00049fb:	85 c0                	test   eax,eax
c00049fd:	74 3e                	je     c0004a3d <f_mkdir+0xa1>
c00049ff:	83 f8 04             	cmp    eax,0x4
c0004a02:	75 3e                	jne    c0004a42 <f_mkdir+0xa6>
c0004a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a12:	e8 b4 e8 ff ff       	call   c00032cb <create_chain>
c0004a17:	89 c6                	mov    esi,eax
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	74 0c                	je     c0004a29 <f_mkdir+0x8d>
c0004a1d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a22:	83 f8 01             	cmp    eax,0x1
c0004a25:	74 07                	je     c0004a2e <f_mkdir+0x92>
c0004a27:	eb 2a                	jmp    c0004a53 <f_mkdir+0xb7>
c0004a29:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2e:	31 c9                	xor    ecx,ecx
c0004a30:	89 f2                	mov    edx,esi
c0004a32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a36:	e8 ca e9 ff ff       	call   c0003405 <remove_chain>
c0004a3b:	eb 05                	jmp    c0004a42 <f_mkdir+0xa6>
c0004a3d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a42:	83 ec 0c             	sub    esp,0xc
c0004a45:	57                   	push   edi
c0004a46:	e8 29 10 00 00       	call   c0005a74 <ff_memfree>
c0004a4b:	83 c4 10             	add    esp,0x10
c0004a4e:	e9 db 00 00 00       	jmp    c0004b2e <f_mkdir+0x192>
c0004a53:	bb 01 00 00 00       	mov    ebx,0x1
c0004a58:	83 f8 ff             	cmp    eax,0xffffffff
c0004a5b:	74 d1                	je     c0004a2e <f_mkdir+0x92>
c0004a5d:	89 f2                	mov    edx,esi
c0004a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a63:	e8 73 dd ff ff       	call   c00027db <dir_clear>
c0004a68:	89 c3                	mov    ebx,eax
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	75 c0                	jne    c0004a2e <f_mkdir+0x92>
c0004a6e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	83 c0 34             	add    eax,0x34
c0004a7f:	e8 cc d2 ff ff       	call   c0001d50 <mem_set>
c0004a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a88:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a8d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004a91:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004a95:	83 c0 4a             	add    eax,0x4a
c0004a98:	e8 9b d2 ff ff       	call   c0001d38 <st_dword>
c0004a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa1:	89 f1                	mov    ecx,esi
c0004aa3:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa6:	e8 2e e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab7:	83 c0 54             	add    eax,0x54
c0004aba:	e8 7c d2 ff ff       	call   c0001d3b <mem_cpy>
c0004abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aca:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ace:	e8 06 e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004adb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adf:	e8 42 ee ff ff       	call   c0003926 <dir_register>
c0004ae4:	89 c3                	mov    ebx,eax
c0004ae6:	85 c0                	test   eax,eax
c0004ae8:	0f 85 40 ff ff ff    	jne    c0004a2e <f_mkdir+0x92>
c0004aee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af2:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af7:	83 c0 16             	add    eax,0x16
c0004afa:	e8 39 d2 ff ff       	call   c0001d38 <st_dword>
c0004aff:	89 f1                	mov    ecx,esi
c0004b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	e8 cb e5 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b22:	e8 4e e1 ff ff       	call   c0002c75 <sync_fs>
c0004b27:	89 c3                	mov    ebx,eax
c0004b29:	e9 14 ff ff ff       	jmp    c0004a42 <f_mkdir+0xa6>
c0004b2e:	83 c4 50             	add    esp,0x50
c0004b31:	89 d8                	mov    eax,ebx
c0004b33:	5b                   	pop    ebx
c0004b34:	5e                   	pop    esi
c0004b35:	5f                   	pop    edi
c0004b36:	c3                   	ret    

c0004b37 <f_rename>:
c0004b37:	57                   	push   edi
c0004b38:	56                   	push   esi
c0004b39:	53                   	push   ebx
c0004b3a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b40:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b47:	e8 f2 d5 ff ff       	call   c000213e <get_ldnumber>
c0004b4c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b51:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b55:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b5c:	e8 27 d8 ff ff       	call   c0002388 <mount_volume>
c0004b61:	85 c0                	test   eax,eax
c0004b63:	0f 85 7a 01 00 00    	jne    c0004ce3 <f_rename+0x1ac>
c0004b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6d:	83 ec 0c             	sub    esp,0xc
c0004b70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b74:	68 00 02 00 00       	push   0x200
c0004b79:	e8 de 0e 00 00       	call   c0005a5c <ff_memalloc>
c0004b7e:	83 c4 10             	add    esp,0x10
c0004b81:	89 c6                	mov    esi,eax
c0004b83:	b8 11 00 00 00       	mov    eax,0x11
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	0f 84 53 01 00 00    	je     c0004ce3 <f_rename+0x1ac>
c0004b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b94:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ba2:	e8 eb ec ff ff       	call   c0003892 <follow_path>
c0004ba7:	85 c0                	test   eax,eax
c0004ba9:	0f 85 20 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004baf:	b8 06 00 00 00       	mov    eax,0x6
c0004bb4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb9:	0f 85 10 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004bbf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bcc:	e8 6a d1 ff ff       	call   c0001d3b <mem_cpy>
c0004bd1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bda:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bde:	e8 58 d1 ff ff       	call   c0001d3b <mem_cpy>
c0004be3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 9f ec ff ff       	call   c0003892 <follow_path>
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 20                	jne    c0004c17 <f_rename+0xe0>
c0004bf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bfb:	b8 08 00 00 00       	mov    eax,0x8
c0004c00:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c04:	0f 85 c5 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c0a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c15:	eb 03                	jmp    c0004c1a <f_rename+0xe3>
c0004c17:	83 f8 04             	cmp    eax,0x4
c0004c1a:	0f 85 af 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c24:	e8 fd ec ff ff       	call   c0003926 <dir_register>
c0004c29:	85 c0                	test   eax,eax
c0004c2b:	0f 85 9e 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c31:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c38:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c40:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c44:	e8 f2 d0 ff ff       	call   c0001d3b <mem_cpy>
c0004c49:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4d:	a8 10                	test   al,0x10
c0004c4f:	75 03                	jne    c0004c54 <f_rename+0x11d>
c0004c51:	83 c8 20             	or     eax,0x20
c0004c54:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c63:	74 54                	je     c0004cb9 <f_rename+0x182>
c0004c65:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c69:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6d:	74 4a                	je     c0004cb9 <f_rename+0x182>
c0004c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c73:	89 da                	mov    edx,ebx
c0004c75:	8a 07                	mov    al,BYTE PTR [edi]
c0004c77:	e8 34 e4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004c7c:	89 c2                	mov    edx,eax
c0004c7e:	89 f8                	mov    eax,edi
c0004c80:	e8 d0 d2 ff ff       	call   c0001f55 <clst2sect>
c0004c85:	89 c2                	mov    edx,eax
c0004c87:	b8 02 00 00 00       	mov    eax,0x2
c0004c8c:	85 d2                	test   edx,edx
c0004c8e:	74 3f                	je     c0004ccf <f_rename+0x198>
c0004c90:	89 f8                	mov    eax,edi
c0004c92:	e8 9e d5 ff ff       	call   c0002235 <move_window>
c0004c97:	85 c0                	test   eax,eax
c0004c99:	75 34                	jne    c0004ccf <f_rename+0x198>
c0004c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9f:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca3:	75 14                	jne    c0004cb9 <f_rename+0x182>
c0004ca5:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cac:	e8 28 e4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cbd:	e8 4f ea ff ff       	call   c0003711 <dir_remove>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 09                	jne    c0004ccf <f_rename+0x198>
c0004cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cca:	e8 a6 df ff ff       	call   c0002c75 <sync_fs>
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	83 ec 0c             	sub    esp,0xc
c0004cd6:	56                   	push   esi
c0004cd7:	e8 98 0d 00 00       	call   c0005a74 <ff_memfree>
c0004cdc:	83 c4 10             	add    esp,0x10
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce9:	5b                   	pop    ebx
c0004cea:	5e                   	pop    esi
c0004ceb:	5f                   	pop    edi
c0004cec:	c3                   	ret    

c0004ced <f_chmod>:
c0004ced:	57                   	push   edi
c0004cee:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf3:	56                   	push   esi
c0004cf4:	53                   	push   ebx
c0004cf5:	83 ec 50             	sub    esp,0x50
c0004cf8:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004cfc:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d04:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d08:	e8 7b d6 ff ff       	call   c0002388 <mount_volume>
c0004d0d:	85 c0                	test   eax,eax
c0004d0f:	75 7e                	jne    c0004d8f <f_chmod+0xa2>
c0004d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d15:	83 ec 0c             	sub    esp,0xc
c0004d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d1c:	68 00 02 00 00       	push   0x200
c0004d21:	e8 36 0d 00 00       	call   c0005a5c <ff_memalloc>
c0004d26:	83 c4 10             	add    esp,0x10
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	b8 11 00 00 00       	mov    eax,0x11
c0004d30:	85 f6                	test   esi,esi
c0004d32:	74 5b                	je     c0004d8f <f_chmod+0xa2>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d3c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d43:	e8 4a eb ff ff       	call   c0003892 <follow_path>
c0004d48:	85 c0                	test   eax,eax
c0004d4a:	75 2f                	jne    c0004d7b <f_chmod+0x8e>
c0004d4c:	b8 06 00 00 00       	mov    eax,0x6
c0004d51:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d56:	75 23                	jne    c0004d7b <f_chmod+0x8e>
c0004d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d5c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5f:	21 fb                	and    ebx,edi
c0004d61:	83 e3 27             	and    ebx,0x27
c0004d64:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d67:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d76:	e8 fa de ff ff       	call   c0002c75 <sync_fs>
c0004d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7f:	83 ec 0c             	sub    esp,0xc
c0004d82:	56                   	push   esi
c0004d83:	e8 ec 0c 00 00       	call   c0005a74 <ff_memfree>
c0004d88:	83 c4 10             	add    esp,0x10
c0004d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8f:	83 c4 50             	add    esp,0x50
c0004d92:	5b                   	pop    ebx
c0004d93:	5e                   	pop    esi
c0004d94:	5f                   	pop    edi
c0004d95:	c3                   	ret    

c0004d96 <f_utime>:
c0004d96:	56                   	push   esi
c0004d97:	b9 02 00 00 00       	mov    ecx,0x2
c0004d9c:	53                   	push   ebx
c0004d9d:	83 ec 54             	sub    esp,0x54
c0004da0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dac:	e8 d7 d5 ff ff       	call   c0002388 <mount_volume>
c0004db1:	85 c0                	test   eax,eax
c0004db3:	0f 85 85 00 00 00    	jne    c0004e3e <f_utime+0xa8>
c0004db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbd:	83 ec 0c             	sub    esp,0xc
c0004dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc4:	68 00 02 00 00       	push   0x200
c0004dc9:	e8 8e 0c 00 00       	call   c0005a5c <ff_memalloc>
c0004dce:	83 c4 10             	add    esp,0x10
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	b8 11 00 00 00       	mov    eax,0x11
c0004dd8:	85 db                	test   ebx,ebx
c0004dda:	74 62                	je     c0004e3e <f_utime+0xa8>
c0004ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004deb:	e8 a2 ea ff ff       	call   c0003892 <follow_path>
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 36                	jne    c0004e2a <f_utime+0x94>
c0004df4:	b8 06 00 00 00       	mov    eax,0x6
c0004df9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfe:	75 2a                	jne    c0004e2a <f_utime+0x94>
c0004e00:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e04:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e08:	c1 e2 10             	shl    edx,0x10
c0004e0b:	09 c2                	or     edx,eax
c0004e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e11:	83 c0 16             	add    eax,0x16
c0004e14:	e8 1f cf ff ff       	call   c0001d38 <st_dword>
c0004e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	e8 4b de ff ff       	call   c0002c75 <sync_fs>
c0004e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2e:	83 ec 0c             	sub    esp,0xc
c0004e31:	53                   	push   ebx
c0004e32:	e8 3d 0c 00 00       	call   c0005a74 <ff_memfree>
c0004e37:	83 c4 10             	add    esp,0x10
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	83 c4 54             	add    esp,0x54
c0004e41:	5b                   	pop    ebx
c0004e42:	5e                   	pop    esi
c0004e43:	c3                   	ret    

c0004e44 <f_getlabel>:
c0004e44:	55                   	push   ebp
c0004e45:	31 c9                	xor    ecx,ecx
c0004e47:	57                   	push   edi
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	83 ec 5c             	sub    esp,0x5c
c0004e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e55:	e8 2e d5 ff ff       	call   c0002388 <mount_volume>
c0004e5a:	89 c6                	mov    esi,eax
c0004e5c:	85 c0                	test   eax,eax
c0004e5e:	0f 85 27 01 00 00    	jne    c0004f8b <f_getlabel+0x147>
c0004e64:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e69:	0f 84 d1 00 00 00    	je     c0004f40 <f_getlabel+0xfc>
c0004e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e73:	31 d2                	xor    edx,edx
c0004e75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e85:	e8 79 e3 ff ff       	call   c0003203 <dir_sdi>
c0004e8a:	85 c0                	test   eax,eax
c0004e8c:	0f 85 a2 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004e92:	ba 01 00 00 00       	mov    edx,0x1
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 54 e7 ff ff       	call   c00035f4 <dir_read>
c0004ea0:	85 c0                	test   eax,eax
c0004ea2:	0f 85 8c 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004ea8:	31 db                	xor    ebx,ebx
c0004eaa:	31 c9                	xor    ecx,ecx
c0004eac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec1:	e8 ca ce ff ff       	call   c0001d90 <dbc_1st>
c0004ec6:	85 c0                	test   eax,eax
c0004ec8:	74 16                	je     c0004ee0 <f_getlabel+0x9c>
c0004eca:	83 ff 0b             	cmp    edi,0xb
c0004ecd:	74 11                	je     c0004ee0 <f_getlabel+0x9c>
c0004ecf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edb:	c1 e0 08             	shl    eax,0x8
c0004ede:	09 c2                	or     edx,eax
c0004ee0:	0f b7 d2             	movzx  edx,dx
c0004ee3:	50                   	push   eax
c0004ee4:	50                   	push   eax
c0004ee5:	68 b5 01 00 00       	push   0x1b5
c0004eea:	52                   	push   edx
c0004eeb:	e8 3c 0c 00 00       	call   c0005b2c <ff_oem2uni>
c0004ef0:	83 c4 10             	add    esp,0x10
c0004ef3:	66 85 c0             	test   ax,ax
c0004ef6:	74 25                	je     c0004f1d <f_getlabel+0xd9>
c0004ef8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efc:	0f b7 c0             	movzx  eax,ax
c0004eff:	01 da                	add    edx,ebx
c0004f01:	b9 04 00 00 00       	mov    ecx,0x4
c0004f06:	e8 51 cf ff ff       	call   c0001e5c <put_utf>
c0004f0b:	84 c0                	test   al,al
c0004f0d:	74 0e                	je     c0004f1d <f_getlabel+0xd9>
c0004f0f:	0f b6 c0             	movzx  eax,al
c0004f12:	01 c3                	add    ebx,eax
c0004f14:	83 ff 0b             	cmp    edi,0xb
c0004f17:	74 06                	je     c0004f1f <f_getlabel+0xdb>
c0004f19:	89 f9                	mov    ecx,edi
c0004f1b:	eb 8f                	jmp    c0004eac <f_getlabel+0x68>
c0004f1d:	31 db                	xor    ebx,ebx
c0004f1f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f26:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f2a:	74 14                	je     c0004f40 <f_getlabel+0xfc>
c0004f2c:	4b                   	dec    ebx
c0004f2d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f30:	74 f1                	je     c0004f23 <f_getlabel+0xdf>
c0004f32:	eb 0c                	jmp    c0004f40 <f_getlabel+0xfc>
c0004f34:	83 f8 04             	cmp    eax,0x4
c0004f37:	75 50                	jne    c0004f89 <f_getlabel+0x145>
c0004f39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f40:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f45:	74 44                	je     c0004f8b <f_getlabel+0x147>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f4e:	e8 e2 d2 ff ff       	call   c0002235 <move_window>
c0004f53:	89 c6                	mov    esi,eax
c0004f55:	85 c0                	test   eax,eax
c0004f57:	75 32                	jne    c0004f8b <f_getlabel+0x147>
c0004f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f5d:	b8 43 00 00 00       	mov    eax,0x43
c0004f62:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f64:	80 f9 03             	cmp    cl,0x3
c0004f67:	74 0f                	je     c0004f78 <f_getlabel+0x134>
c0004f69:	31 c0                	xor    eax,eax
c0004f6b:	80 f9 04             	cmp    cl,0x4
c0004f6e:	0f 94 c0             	sete   al
c0004f71:	48                   	dec    eax
c0004f72:	83 e0 c3             	and    eax,0xffffffc3
c0004f75:	83 c0 64             	add    eax,0x64
c0004f78:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f7c:	e8 9b cd ff ff       	call   c0001d1c <ld_dword>
c0004f81:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f85:	89 07                	mov    DWORD PTR [edi],eax
c0004f87:	eb 02                	jmp    c0004f8b <f_getlabel+0x147>
c0004f89:	89 c6                	mov    esi,eax
c0004f8b:	83 c4 5c             	add    esp,0x5c
c0004f8e:	89 f0                	mov    eax,esi
c0004f90:	5b                   	pop    ebx
c0004f91:	5e                   	pop    esi
c0004f92:	5f                   	pop    edi
c0004f93:	5d                   	pop    ebp
c0004f94:	c3                   	ret    

c0004f95 <f_setlabel>:
c0004f95:	56                   	push   esi
c0004f96:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9b:	53                   	push   ebx
c0004f9c:	83 ec 54             	sub    esp,0x54
c0004f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa7:	e8 dc d3 ff ff       	call   c0002388 <mount_volume>
c0004fac:	89 c6                	mov    esi,eax
c0004fae:	85 c0                	test   eax,eax
c0004fb0:	0f 85 67 01 00 00    	jne    c000511d <f_setlabel+0x188>
c0004fb6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbb:	ba 20 00 00 00       	mov    edx,0x20
c0004fc0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc4:	31 db                	xor    ebx,ebx
c0004fc6:	e8 85 cd ff ff       	call   c0001d50 <mem_set>
c0004fcb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fcf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd2:	76 5b                	jbe    c000502f <f_setlabel+0x9a>
c0004fd4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd8:	e8 b9 cd ff ff       	call   c0001d96 <tchar2uni>
c0004fdd:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe2:	76 0a                	jbe    c0004fee <f_setlabel+0x59>
c0004fe4:	be 06 00 00 00       	mov    esi,0x6
c0004fe9:	e9 2f 01 00 00       	jmp    c000511d <f_setlabel+0x188>
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	50                   	push   eax
c0004ff2:	e8 ad 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ff7:	5a                   	pop    edx
c0004ff8:	59                   	pop    ecx
c0004ff9:	68 b5 01 00 00       	push   0x1b5
c0004ffe:	50                   	push   eax
c0004fff:	e8 88 0a 00 00       	call   c0005a8c <ff_uni2oem>
c0005004:	83 c4 10             	add    esp,0x10
c0005007:	89 c6                	mov    esi,eax
c0005009:	66 85 c0             	test   ax,ax
c000500c:	74 d6                	je     c0004fe4 <f_setlabel+0x4f>
c000500e:	0f b7 d0             	movzx  edx,ax
c0005011:	b8 30 e9 01 c0       	mov    eax,0xc001e930
c0005016:	e8 63 cd ff ff       	call   c0001d7e <chk_chr>
c000501b:	85 c0                	test   eax,eax
c000501d:	75 c5                	jne    c0004fe4 <f_setlabel+0x4f>
c000501f:	66 81 fe ff 00       	cmp    si,0xff
c0005024:	0f 87 c9 00 00 00    	ja     c00050f3 <f_setlabel+0x15e>
c000502a:	e9 e4 00 00 00       	jmp    c0005113 <f_setlabel+0x17e>
c000502f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005034:	74 ae                	je     c0004fe4 <f_setlabel+0x4f>
c0005036:	85 db                	test   ebx,ebx
c0005038:	74 0e                	je     c0005048 <f_setlabel+0xb3>
c000503a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000503d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005042:	75 04                	jne    c0005048 <f_setlabel+0xb3>
c0005044:	89 c3                	mov    ebx,eax
c0005046:	eb ee                	jmp    c0005036 <f_setlabel+0xa1>
c0005048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504c:	31 d2                	xor    edx,edx
c000504e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000505a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000505e:	e8 a0 e1 ff ff       	call   c0003203 <dir_sdi>
c0005063:	89 c6                	mov    esi,eax
c0005065:	85 c0                	test   eax,eax
c0005067:	0f 85 b0 00 00 00    	jne    c000511d <f_setlabel+0x188>
c000506d:	ba 01 00 00 00       	mov    edx,0x1
c0005072:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005076:	e8 79 e5 ff ff       	call   c00035f4 <dir_read>
c000507b:	85 c0                	test   eax,eax
c000507d:	75 18                	jne    c0005097 <f_setlabel+0x102>
c000507f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005083:	85 db                	test   ebx,ebx
c0005085:	74 0b                	je     c0005092 <f_setlabel+0xfd>
c0005087:	b9 0b 00 00 00       	mov    ecx,0xb
c000508c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005090:	eb 47                	jmp    c00050d9 <f_setlabel+0x144>
c0005092:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005095:	eb 47                	jmp    c00050de <f_setlabel+0x149>
c0005097:	83 f8 04             	cmp    eax,0x4
c000509a:	75 53                	jne    c00050ef <f_setlabel+0x15a>
c000509c:	85 db                	test   ebx,ebx
c000509e:	74 7d                	je     c000511d <f_setlabel+0x188>
c00050a0:	ba 01 00 00 00       	mov    edx,0x1
c00050a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a9:	e8 e5 e4 ff ff       	call   c0003593 <dir_alloc>
c00050ae:	89 c6                	mov    esi,eax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	75 69                	jne    c000511d <f_setlabel+0x188>
c00050b4:	b9 20 00 00 00       	mov    ecx,0x20
c00050b9:	31 d2                	xor    edx,edx
c00050bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bf:	e8 8c cc ff ff       	call   c0001d50 <mem_set>
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050cd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050d1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d9:	e8 5d cc ff ff       	call   c0001d3b <mem_cpy>
c00050de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ea:	e8 86 db ff ff       	call   c0002c75 <sync_fs>
c00050ef:	89 c6                	mov    esi,eax
c00050f1:	eb 2a                	jmp    c000511d <f_setlabel+0x188>
c00050f3:	83 fb 09             	cmp    ebx,0x9
c00050f6:	0f 87 e8 fe ff ff    	ja     c0004fe4 <f_setlabel+0x4f>
c00050fc:	89 f0                	mov    eax,esi
c00050fe:	66 c1 e8 08          	shr    ax,0x8
c0005102:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005106:	43                   	inc    ebx
c0005107:	89 f0                	mov    eax,esi
c0005109:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000510d:	43                   	inc    ebx
c000510e:	e9 b8 fe ff ff       	jmp    c0004fcb <f_setlabel+0x36>
c0005113:	83 fb 0a             	cmp    ebx,0xa
c0005116:	76 ef                	jbe    c0005107 <f_setlabel+0x172>
c0005118:	e9 c7 fe ff ff       	jmp    c0004fe4 <f_setlabel+0x4f>
c000511d:	89 f0                	mov    eax,esi
c000511f:	83 c4 54             	add    esp,0x54
c0005122:	5b                   	pop    ebx
c0005123:	5e                   	pop    esi
c0005124:	c3                   	ret    

c0005125 <f_expand>:
c0005125:	55                   	push   ebp
c0005126:	57                   	push   edi
c0005127:	56                   	push   esi
c0005128:	53                   	push   ebx
c0005129:	83 ec 2c             	sub    esp,0x2c
c000512c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005130:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005138:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 48 d0 ff ff       	call   c000218b <validate>
c0005143:	89 c6                	mov    esi,eax
c0005145:	85 c0                	test   eax,eax
c0005147:	0f 85 2e 01 00 00    	jne    c000527b <f_expand+0x156>
c000514d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005151:	85 f6                	test   esi,esi
c0005153:	0f 85 22 01 00 00    	jne    c000527b <f_expand+0x156>
c0005159:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000515e:	75 0a                	jne    c000516a <f_expand+0x45>
c0005160:	be 07 00 00 00       	mov    esi,0x7
c0005165:	e9 11 01 00 00       	jmp    c000527b <f_expand+0x156>
c000516a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000516e:	75 f0                	jne    c0005160 <f_expand+0x3b>
c0005170:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005174:	74 ea                	je     c0005160 <f_expand+0x3b>
c0005176:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000517e:	c1 e1 09             	shl    ecx,0x9
c0005181:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005184:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005188:	0f 95 c0             	setne  al
c000518b:	31 d2                	xor    edx,edx
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	89 c7                	mov    edi,eax
c0005192:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005196:	f7 f1                	div    ecx
c0005198:	01 f8                	add    eax,edi
c000519a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000519d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a1:	83 ff 01             	cmp    edi,0x1
c00051a4:	76 05                	jbe    c00051ab <f_expand+0x86>
c00051a6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051a9:	77 05                	ja     c00051b0 <f_expand+0x8b>
c00051ab:	bf 02 00 00 00       	mov    edi,0x2
c00051b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b3:	89 fd                	mov    ebp,edi
c00051b5:	31 c9                	xor    ecx,ecx
c00051b7:	89 ea                	mov    edx,ebp
c00051b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051bf:	45                   	inc    ebp
c00051c0:	e8 3c df ff ff       	call   c0003101 <get_fat.isra.2>
c00051c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051cd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d0:	77 05                	ja     c00051d7 <f_expand+0xb2>
c00051d2:	bd 02 00 00 00       	mov    ebp,0x2
c00051d7:	83 f8 01             	cmp    eax,0x1
c00051da:	74 20                	je     c00051fc <f_expand+0xd7>
c00051dc:	83 f8 ff             	cmp    eax,0xffffffff
c00051df:	74 22                	je     c0005203 <f_expand+0xde>
c00051e1:	85 c0                	test   eax,eax
c00051e3:	75 09                	jne    c00051ee <f_expand+0xc9>
c00051e5:	41                   	inc    ecx
c00051e6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ea:	75 07                	jne    c00051f3 <f_expand+0xce>
c00051ec:	eb 1c                	jmp    c000520a <f_expand+0xe5>
c00051ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f1:	31 c9                	xor    ecx,ecx
c00051f3:	39 fd                	cmp    ebp,edi
c00051f5:	75 c0                	jne    c00051b7 <f_expand+0x92>
c00051f7:	e9 64 ff ff ff       	jmp    c0005160 <f_expand+0x3b>
c00051fc:	be 02 00 00 00       	mov    esi,0x2
c0005201:	eb 78                	jmp    c000527b <f_expand+0x156>
c0005203:	be 01 00 00 00       	mov    esi,0x1
c0005208:	eb 71                	jmp    c000527b <f_expand+0x156>
c000520a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000520f:	74 2b                	je     c000523c <f_expand+0x117>
c0005211:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005214:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005218:	85 ed                	test   ebp,ebp
c000521a:	74 24                	je     c0005240 <f_expand+0x11b>
c000521c:	83 c9 ff             	or     ecx,0xffffffff
c000521f:	83 fd 01             	cmp    ebp,0x1
c0005222:	74 03                	je     c0005227 <f_expand+0x102>
c0005224:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005227:	89 fa                	mov    edx,edi
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	e8 59 d4 ff ff       	call   c000268b <put_fat>
c0005232:	85 c0                	test   eax,eax
c0005234:	75 43                	jne    c0005279 <f_expand+0x154>
c0005236:	89 f8                	mov    eax,edi
c0005238:	4d                   	dec    ebp
c0005239:	47                   	inc    edi
c000523a:	eb dc                	jmp    c0005218 <f_expand+0xf3>
c000523c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000523f:	48                   	dec    eax
c0005240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005244:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005249:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524c:	74 2d                	je     c000527b <f_expand+0x156>
c000524e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005252:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005255:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005258:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000525f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005268:	39 c8                	cmp    eax,ecx
c000526a:	77 0f                	ja     c000527b <f_expand+0x156>
c000526c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005270:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005277:	eb 02                	jmp    c000527b <f_expand+0x156>
c0005279:	89 c6                	mov    esi,eax
c000527b:	83 c4 2c             	add    esp,0x2c
c000527e:	89 f0                	mov    eax,esi
c0005280:	5b                   	pop    ebx
c0005281:	5e                   	pop    esi
c0005282:	5f                   	pop    edi
c0005283:	5d                   	pop    ebp
c0005284:	c3                   	ret    

c0005285 <f_mkfs>:
c0005285:	55                   	push   ebp
c0005286:	57                   	push   edi
c0005287:	bf 0b 00 00 00       	mov    edi,0xb
c000528c:	56                   	push   esi
c000528d:	53                   	push   ebx
c000528e:	83 ec 4c             	sub    esp,0x4c
c0005291:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0005295:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 9c ce ff ff       	call   c000213e <get_ldnumber>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 88 a6 07 00 00    	js     c0005a50 <f_mkfs+0x7cb>
c00052aa:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b1:	85 d2                	test   edx,edx
c00052b3:	74 03                	je     c00052b8 <f_mkfs+0x33>
c00052b5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052b8:	85 db                	test   ebx,ebx
c00052ba:	75 05                	jne    c00052c1 <f_mkfs+0x3c>
c00052bc:	bb 20 e9 01 c0       	mov    ebx,0xc001e920
c00052c1:	83 ec 0c             	sub    esp,0xc
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	bf 03 00 00 00       	mov    edi,0x3
c00052cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d4:	e8 e8 c9 ff ff       	call   c0001cc1 <disk_initialize>
c00052d9:	83 c4 10             	add    esp,0x10
c00052dc:	a8 01                	test   al,0x1
c00052de:	0f 85 6c 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052e4:	bf 0a 00 00 00       	mov    edi,0xa
c00052e9:	a8 04                	test   al,0x4
c00052eb:	0f 85 5f 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052f8:	85 c0                	test   eax,eax
c00052fa:	75 20                	jne    c000531c <f_mkfs+0x97>
c00052fc:	51                   	push   ecx
c00052fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005301:	50                   	push   eax
c0005302:	6a 03                	push   0x3
c0005304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005308:	e8 e3 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c000530d:	83 c4 10             	add    esp,0x10
c0005310:	85 c0                	test   eax,eax
c0005312:	74 08                	je     c000531c <f_mkfs+0x97>
c0005314:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005320:	8d 42 ff             	lea    eax,[edx-0x1]
c0005323:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005328:	77 04                	ja     c000532e <f_mkfs+0xa9>
c000532a:	85 c2                	test   edx,eax
c000532c:	74 08                	je     c0005336 <f_mkfs+0xb1>
c000532e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005336:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005339:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000533d:	48                   	dec    eax
c000533e:	3c 01                	cmp    al,0x1
c0005340:	76 05                	jbe    c0005347 <f_mkfs+0xc2>
c0005342:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000534e:	48                   	dec    eax
c000534f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005354:	77 07                	ja     c000535d <f_mkfs+0xd8>
c0005356:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535b:	74 08                	je     c0005365 <f_mkfs+0xe0>
c000535d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005365:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005368:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000536e:	77 07                	ja     c0005377 <f_mkfs+0xf2>
c0005370:	8d 47 ff             	lea    eax,[edi-0x1]
c0005373:	85 f8                	test   eax,edi
c0005375:	74 02                	je     c0005379 <f_mkfs+0xf4>
c0005377:	31 ff                	xor    edi,edi
c0005379:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005381:	77 0a                	ja     c000538d <f_mkfs+0x108>
c0005383:	bf 11 00 00 00       	mov    edi,0x11
c0005388:	e9 c3 06 00 00       	jmp    c0005a50 <f_mkfs+0x7cb>
c000538d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000538f:	89 ee                	mov    esi,ebp
c0005391:	85 ed                	test   ebp,ebp
c0005393:	75 1b                	jne    c00053b0 <f_mkfs+0x12b>
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539c:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a1:	50                   	push   eax
c00053a2:	e8 b5 06 00 00       	call   c0005a5c <ff_memalloc>
c00053a7:	83 c4 10             	add    esp,0x10
c00053aa:	89 c6                	mov    esi,eax
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 d3                	je     c0005383 <f_mkfs+0xfe>
c00053b0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053b8:	52                   	push   edx
c00053b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053bd:	50                   	push   eax
c00053be:	6a 01                	push   0x1
c00053c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c4:	e8 27 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c00053c9:	83 c4 10             	add    esp,0x10
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 25 06 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00053d4:	88 d8                	mov    al,bl
c00053d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053de:	24 08                	and    al,0x8
c00053e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e4:	75 18                	jne    c00053fe <f_mkfs+0x179>
c00053e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ea:	83 f8 3f             	cmp    eax,0x3f
c00053ed:	76 0f                	jbe    c00053fe <f_mkfs+0x179>
c00053ef:	83 e8 3f             	sub    eax,0x3f
c00053f2:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00053fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005406:	83 f8 7f             	cmp    eax,0x7f
c0005409:	0f 86 52 02 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000540f:	b9 80 00 00 00       	mov    ecx,0x80
c0005414:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541a:	77 05                	ja     c0005421 <f_mkfs+0x19c>
c000541c:	89 f9                	mov    ecx,edi
c000541e:	c1 e9 09             	shr    ecx,0x9
c0005421:	88 d8                	mov    al,bl
c0005423:	83 e0 01             	and    eax,0x1
c0005426:	80 e3 02             	and    bl,0x2
c0005429:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000542d:	74 0a                	je     c0005439 <f_mkfs+0x1b4>
c000542f:	84 c0                	test   al,al
c0005431:	0f 84 4c 01 00 00    	je     c0005583 <f_mkfs+0x2fe>
c0005437:	eb 38                	jmp    c0005471 <f_mkfs+0x1ec>
c0005439:	bf 13 00 00 00       	mov    edi,0x13
c000543e:	84 c0                	test   al,al
c0005440:	75 2f                	jne    c0005471 <f_mkfs+0x1ec>
c0005442:	e9 c9 05 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c0005447:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544c:	0f 85 08 02 00 00    	jne    c000565a <f_mkfs+0x3d5>
c0005452:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005457:	0f 86 e1 01 00 00    	jbe    c000563e <f_mkfs+0x3b9>
c000545d:	85 c9                	test   ecx,ecx
c000545f:	0f 85 bd 05 00 00    	jne    c0005a22 <f_mkfs+0x79d>
c0005465:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005468:	83 f9 40             	cmp    ecx,0x40
c000546b:	0f 87 c1 05 00 00    	ja     c0005a32 <f_mkfs+0x7ad>
c0005471:	89 cf                	mov    edi,ecx
c0005473:	85 c9                	test   ecx,ecx
c0005475:	75 1d                	jne    c0005494 <f_mkfs+0x20f>
c0005477:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547b:	ba 00 e9 01 c0       	mov    edx,0xc001e900
c0005480:	c1 eb 0c             	shr    ebx,0xc
c0005483:	bf 01 00 00 00       	mov    edi,0x1
c0005488:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548b:	66 85 c0             	test   ax,ax
c000548e:	0f 85 5f 01 00 00    	jne    c00055f3 <f_mkfs+0x36e>
c0005494:	31 d2                	xor    edx,edx
c0005496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549a:	f7 f7                	div    edi
c000549c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a1:	0f 86 5e 01 00 00    	jbe    c0005605 <f_mkfs+0x380>
c00054a7:	83 c0 02             	add    eax,0x2
c00054aa:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054af:	01 c0                	add    eax,eax
c00054b1:	05 ff 01 00 00       	add    eax,0x1ff
c00054b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054be:	c1 e8 09             	shr    eax,0x9
c00054c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054c9:	c1 e0 05             	shl    eax,0x5
c00054cc:	c1 e8 09             	shr    eax,0x9
c00054cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ec:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00054fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005501:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005505:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005509:	f7 d8                	neg    eax
c000550b:	21 c3                	and    ebx,eax
c000550d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005511:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005516:	0f 85 fc 00 00 00    	jne    c0005618 <f_mkfs+0x393>
c000551c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005520:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005524:	89 f8                	mov    eax,edi
c0005526:	c1 e0 04             	shl    eax,0x4
c0005529:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000552d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005531:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005535:	0f 82 26 01 00 00    	jb     c0005661 <f_mkfs+0x3dc>
c000553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005543:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005547:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005550:	29 d0                	sub    eax,edx
c0005552:	31 d2                	xor    edx,edx
c0005554:	f7 f7                	div    edi
c0005556:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555b:	89 c3                	mov    ebx,eax
c000555d:	0f 85 e4 fe ff ff    	jne    c0005447 <f_mkfs+0x1c2>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 87 02 01 00 00    	ja     c0005670 <f_mkfs+0x3eb>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 eb 00 00 00    	jne    c0005661 <f_mkfs+0x3dc>
c0005576:	83 ff 01             	cmp    edi,0x1
c0005579:	0f 86 e2 00 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000557f:	89 f9                	mov    ecx,edi
c0005581:	d1 e9                	shr    ecx,1
c0005583:	89 cb                	mov    ebx,ecx
c0005585:	85 c9                	test   ecx,ecx
c0005587:	75 26                	jne    c00055af <f_mkfs+0x32a>
c0005589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000558d:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c0005592:	c1 eb 11             	shr    ebx,0x11
c0005595:	b9 01 00 00 00       	mov    ecx,0x1
c000559a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000559d:	66 85 c0             	test   ax,ax
c00055a0:	74 0b                	je     c00055ad <f_mkfs+0x328>
c00055a2:	83 c2 02             	add    edx,0x2
c00055a5:	39 d8                	cmp    eax,ebx
c00055a7:	77 04                	ja     c00055ad <f_mkfs+0x328>
c00055a9:	01 c9                	add    ecx,ecx
c00055ab:	eb ed                	jmp    c000559a <f_mkfs+0x315>
c00055ad:	31 db                	xor    ebx,ebx
c00055af:	31 d2                	xor    edx,edx
c00055b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b5:	f7 f1                	div    ecx
c00055b7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055be:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c3:	c1 ea 09             	shr    edx,0x9
c00055c6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055cf:	0f 87 8c 00 00 00    	ja     c0005661 <f_mkfs+0x3dc>
c00055d5:	89 cf                	mov    edi,ecx
c00055d7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055df:	89 d9                	mov    ecx,ebx
c00055e1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055e9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055ee:	e9 e0 fe ff ff       	jmp    c00054d3 <f_mkfs+0x24e>
c00055f3:	83 c2 02             	add    edx,0x2
c00055f6:	39 d8                	cmp    eax,ebx
c00055f8:	0f 87 96 fe ff ff    	ja     c0005494 <f_mkfs+0x20f>
c00055fe:	01 ff                	add    edi,edi
c0005600:	e9 83 fe ff ff       	jmp    c0005488 <f_mkfs+0x203>
c0005605:	8d 04 40             	lea    eax,[eax+eax*2]
c0005608:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000560d:	40                   	inc    eax
c000560e:	d1 e8                	shr    eax,1
c0005610:	83 c0 03             	add    eax,0x3
c0005613:	e9 99 fe ff ff       	jmp    c00054b1 <f_mkfs+0x22c>
c0005618:	31 d2                	xor    edx,edx
c000561a:	89 d8                	mov    eax,ebx
c000561c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005620:	85 d2                	test   edx,edx
c0005622:	74 09                	je     c000562d <f_mkfs+0x3a8>
c0005624:	4b                   	dec    ebx
c0005625:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000562d:	89 d8                	mov    eax,ebx
c000562f:	31 d2                	xor    edx,edx
c0005631:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005635:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005639:	e9 e6 fe ff ff       	jmp    c0005524 <f_mkfs+0x29f>
c000563e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005643:	77 2b                	ja     c0005670 <f_mkfs+0x3eb>
c0005645:	85 c9                	test   ecx,ecx
c0005647:	75 18                	jne    c0005661 <f_mkfs+0x3dc>
c0005649:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005652:	0f 86 19 fe ff ff    	jbe    c0005471 <f_mkfs+0x1ec>
c0005658:	eb 07                	jmp    c0005661 <f_mkfs+0x3dc>
c000565a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565f:	76 0a                	jbe    c000566b <f_mkfs+0x3e6>
c0005661:	bf 0e 00 00 00       	mov    edi,0xe
c0005666:	e9 a5 03 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c000566b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005670:	31 d2                	xor    edx,edx
c0005672:	b9 00 02 00 00       	mov    ecx,0x200
c0005677:	89 f0                	mov    eax,esi
c0005679:	e8 d2 c6 ff ff       	call   c0001d50 <mem_set>
c000567e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005683:	ba b2 e8 01 c0       	mov    edx,0xc001e8b2
c0005688:	89 f0                	mov    eax,esi
c000568a:	e8 ac c6 ff ff       	call   c0001d3b <mem_cpy>
c000568f:	8d 46 0b             	lea    eax,[esi+0xb]
c0005692:	ba 00 02 00 00       	mov    edx,0x200
c0005697:	e8 98 c6 ff ff       	call   c0001d34 <st_word>
c000569c:	89 f8                	mov    eax,edi
c000569e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056a9:	e8 86 c6 ff ff       	call   c0001d34 <st_word>
c00056ae:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ba:	75 08                	jne    c00056c4 <f_mkfs+0x43f>
c00056bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056c8:	8d 46 11             	lea    eax,[esi+0x11]
c00056cb:	e8 64 c6 ff ff       	call   c0001d34 <st_word>
c00056d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056da:	77 0a                	ja     c00056e6 <f_mkfs+0x461>
c00056dc:	8d 46 13             	lea    eax,[esi+0x13]
c00056df:	e8 50 c6 ff ff       	call   c0001d34 <st_word>
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0x469>
c00056e6:	8d 46 20             	lea    eax,[esi+0x20]
c00056e9:	e8 4a c6 ff ff       	call   c0001d38 <st_dword>
c00056ee:	8d 46 18             	lea    eax,[esi+0x18]
c00056f1:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f6:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fa:	e8 35 c6 ff ff       	call   c0001d34 <st_word>
c00056ff:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005702:	ba ff 00 00 00       	mov    edx,0xff
c0005707:	e8 28 c6 ff ff       	call   c0001d34 <st_word>
c000570c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000570f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005713:	e8 20 c6 ff ff       	call   c0001d38 <st_dword>
c0005718:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000571d:	75 57                	jne    c0005776 <f_mkfs+0x4f1>
c000571f:	8d 46 43             	lea    eax,[esi+0x43]
c0005722:	ba 00 00 21 50       	mov    edx,0x50210000
c0005727:	e8 0c c6 ff ff       	call   c0001d38 <st_dword>
c000572c:	8d 46 24             	lea    eax,[esi+0x24]
c000572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005733:	e8 00 c6 ff ff       	call   c0001d38 <st_dword>
c0005738:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573b:	ba 02 00 00 00       	mov    edx,0x2
c0005740:	e8 f3 c5 ff ff       	call   c0001d38 <st_dword>
c0005745:	8d 46 30             	lea    eax,[esi+0x30]
c0005748:	ba 01 00 00 00       	mov    edx,0x1
c000574d:	e8 e2 c5 ff ff       	call   c0001d34 <st_word>
c0005752:	8d 46 32             	lea    eax,[esi+0x32]
c0005755:	ba 06 00 00 00       	mov    edx,0x6
c000575a:	e8 d5 c5 ff ff       	call   c0001d34 <st_word>
c000575f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005763:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005767:	8d 46 47             	lea    eax,[esi+0x47]
c000576a:	b9 13 00 00 00       	mov    ecx,0x13
c000576f:	ba be e8 01 c0       	mov    edx,0xc001e8be
c0005774:	eb 2f                	jmp    c00057a5 <f_mkfs+0x520>
c0005776:	8d 46 27             	lea    eax,[esi+0x27]
c0005779:	ba 00 00 21 50       	mov    edx,0x50210000
c000577e:	e8 b5 c5 ff ff       	call   c0001d38 <st_dword>
c0005783:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005788:	8d 46 16             	lea    eax,[esi+0x16]
c000578b:	e8 a4 c5 ff ff       	call   c0001d34 <st_word>
c0005790:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005794:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005798:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579b:	b9 13 00 00 00       	mov    ecx,0x13
c00057a0:	ba d2 e8 01 c0       	mov    edx,0xc001e8d2
c00057a5:	e8 91 c5 ff ff       	call   c0001d3b <mem_cpy>
c00057aa:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057b9:	e8 76 c5 ff ff       	call   c0001d34 <st_word>
c00057be:	6a 01                	push   0x1
c00057c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c4:	56                   	push   esi
c00057c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057c9:	e8 0c c5 ff ff       	call   c0001cda <disk_write>
c00057ce:	83 c4 10             	add    esp,0x10
c00057d1:	85 c0                	test   eax,eax
c00057d3:	0f 85 20 02 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00057d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057de:	0f 85 98 00 00 00    	jne    c000587c <f_mkfs+0x5f7>
c00057e4:	6a 01                	push   0x1
c00057e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ea:	83 c0 06             	add    eax,0x6
c00057ed:	50                   	push   eax
c00057ee:	56                   	push   esi
c00057ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f3:	e8 e2 c4 ff ff       	call   c0001cda <disk_write>
c00057f8:	b9 00 02 00 00       	mov    ecx,0x200
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	89 f0                	mov    eax,esi
c0005801:	e8 4a c5 ff ff       	call   c0001d50 <mem_set>
c0005806:	ba 52 52 61 41       	mov    edx,0x41615252
c000580b:	89 f0                	mov    eax,esi
c000580d:	e8 26 c5 ff ff       	call   c0001d38 <st_dword>
c0005812:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005818:	ba 72 72 41 61       	mov    edx,0x61417272
c000581d:	e8 16 c5 ff ff       	call   c0001d38 <st_dword>
c0005822:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005825:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582b:	e8 08 c5 ff ff       	call   c0001d38 <st_dword>
c0005830:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005836:	ba 02 00 00 00       	mov    edx,0x2
c000583b:	e8 f8 c4 ff ff       	call   c0001d38 <st_dword>
c0005840:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005845:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584b:	e8 e4 c4 ff ff       	call   c0001d34 <st_word>
c0005850:	6a 01                	push   0x1
c0005852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005856:	83 c0 07             	add    eax,0x7
c0005859:	50                   	push   eax
c000585a:	56                   	push   esi
c000585b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000585f:	e8 76 c4 ff ff       	call   c0001cda <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	6a 01                	push   0x1
c0005869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586d:	40                   	inc    eax
c000586e:	50                   	push   eax
c000586f:	56                   	push   esi
c0005870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005874:	e8 61 c4 ff ff       	call   c0001cda <disk_write>
c0005879:	83 c4 10             	add    esp,0x10
c000587c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005880:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005884:	c1 e8 09             	shr    eax,0x9
c0005887:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005891:	31 d2                	xor    edx,edx
c0005893:	31 db                	xor    ebx,ebx
c0005895:	89 f0                	mov    eax,esi
c0005897:	e8 b4 c4 ff ff       	call   c0001d50 <mem_set>
c000589c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a9:	0f 94 c3             	sete   bl
c00058ac:	4b                   	dec    ebx
c00058ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058b9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058be:	75 21                	jne    c00058e1 <f_mkfs+0x65c>
c00058c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 6c c4 ff ff       	call   c0001d38 <st_dword>
c00058cc:	8d 46 04             	lea    eax,[esi+0x4]
c00058cf:	83 ca ff             	or     edx,0xffffffff
c00058d2:	e8 61 c4 ff ff       	call   c0001d38 <st_dword>
c00058d7:	8d 46 08             	lea    eax,[esi+0x8]
c00058da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058df:	eb 04                	jmp    c00058e5 <f_mkfs+0x660>
c00058e1:	89 da                	mov    edx,ebx
c00058e3:	89 f0                	mov    eax,esi
c00058e5:	e8 4e c4 ff ff       	call   c0001d38 <st_dword>
c00058ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fa:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00058fe:	76 08                	jbe    c0005908 <f_mkfs+0x683>
c0005900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005908:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005910:	56                   	push   esi
c0005911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005915:	e8 c0 c3 ff ff       	call   c0001cda <disk_write>
c000591a:	83 c4 10             	add    esp,0x10
c000591d:	85 c0                	test   eax,eax
c000591f:	0f 85 d4 00 00 00    	jne    c00059f9 <f_mkfs+0x774>
c0005925:	b9 00 02 00 00       	mov    ecx,0x200
c000592a:	31 d2                	xor    edx,edx
c000592c:	89 f0                	mov    eax,esi
c000592e:	e8 1d c4 ff ff       	call   c0001d50 <mem_set>
c0005933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005937:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000593f:	75 b1                	jne    c00058f2 <f_mkfs+0x66d>
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000594d:	40                   	inc    eax
c000594e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005952:	0f 87 61 ff ff ff    	ja     c00058b9 <f_mkfs+0x634>
c0005958:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000595d:	74 04                	je     c0005963 <f_mkfs+0x6de>
c000595f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005963:	89 fb                	mov    ebx,edi
c0005965:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005969:	76 04                	jbe    c000596f <f_mkfs+0x6ea>
c000596b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000596f:	53                   	push   ebx
c0005970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005974:	56                   	push   esi
c0005975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005979:	e8 5c c3 ff ff       	call   c0001cda <disk_write>
c000597e:	83 c4 10             	add    esp,0x10
c0005981:	85 c0                	test   eax,eax
c0005983:	75 74                	jne    c00059f9 <f_mkfs+0x774>
c0005985:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005989:	29 df                	sub    edi,ebx
c000598b:	75 d6                	jne    c0005963 <f_mkfs+0x6de>
c000598d:	b1 0c                	mov    cl,0xc
c000598f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005994:	74 18                	je     c00059ae <f_mkfs+0x729>
c0005996:	b1 06                	mov    cl,0x6
c0005998:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a0:	77 0c                	ja     c00059ae <f_mkfs+0x729>
c00059a2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059a7:	0f 94 c1             	sete   cl
c00059aa:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ae:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b3:	75 2d                	jne    c00059e2 <f_mkfs+0x75d>
c00059b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059b9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c5:	0f b6 c9             	movzx  ecx,cl
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	56                   	push   esi
c00059cc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d4:	e8 4c d3 ff ff       	call   c0002d25 <create_partition>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	89 c7                	mov    edi,eax
c00059de:	85 c0                	test   eax,eax
c00059e0:	75 2e                	jne    c0005a10 <f_mkfs+0x78b>
c00059e2:	31 ff                	xor    edi,edi
c00059e4:	50                   	push   eax
c00059e5:	6a 00                	push   0x0
c00059e7:	6a 00                	push   0x0
c00059e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059ed:	e8 fe c2 ff ff       	call   c0001cf0 <disk_ioctl>
c00059f2:	83 c4 10             	add    esp,0x10
c00059f5:	85 c0                	test   eax,eax
c00059f7:	74 17                	je     c0005a10 <f_mkfs+0x78b>
c00059f9:	85 ed                	test   ebp,ebp
c00059fb:	75 0c                	jne    c0005a09 <f_mkfs+0x784>
c00059fd:	83 ec 0c             	sub    esp,0xc
c0005a00:	56                   	push   esi
c0005a01:	e8 6e 00 00 00       	call   c0005a74 <ff_memfree>
c0005a06:	83 c4 10             	add    esp,0x10
c0005a09:	bf 01 00 00 00       	mov    edi,0x1
c0005a0e:	eb 40                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a10:	85 ed                	test   ebp,ebp
c0005a12:	75 3c                	jne    c0005a50 <f_mkfs+0x7cb>
c0005a14:	83 ec 0c             	sub    esp,0xc
c0005a17:	56                   	push   esi
c0005a18:	e8 57 00 00 00       	call   c0005a74 <ff_memfree>
c0005a1d:	83 c4 10             	add    esp,0x10
c0005a20:	eb 2e                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a22:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a27:	0f 85 56 fb ff ff    	jne    c0005583 <f_mkfs+0x2fe>
c0005a2d:	e9 2f fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 4c fb ff ff    	jne    c0005589 <f_mkfs+0x304>
c0005a3d:	89 cf                	mov    edi,ecx
c0005a3f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a45:	0f 86 49 fa ff ff    	jbe    c0005494 <f_mkfs+0x20f>
c0005a4b:	e9 11 fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a50:	83 c4 4c             	add    esp,0x4c
c0005a53:	89 f8                	mov    eax,edi
c0005a55:	5b                   	pop    ebx
c0005a56:	5e                   	pop    esi
c0005a57:	5f                   	pop    edi
c0005a58:	5d                   	pop    ebp
c0005a59:	c3                   	ret    
c0005a5a:	66 90                	xchg   ax,ax

c0005a5c <ff_memalloc>:
c0005a5c:	83 ec 0c             	sub    esp,0xc
c0005a5f:	83 ec 0c             	sub    esp,0xc
c0005a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a66:	e8 fa 1d 00 00       	call   c0007865 <malloc>
c0005a6b:	83 c4 10             	add    esp,0x10
c0005a6e:	83 c4 0c             	add    esp,0xc
c0005a71:	c3                   	ret    
c0005a72:	66 90                	xchg   ax,ax

c0005a74 <ff_memfree>:
c0005a74:	83 ec 0c             	sub    esp,0xc
c0005a77:	83 ec 0c             	sub    esp,0xc
c0005a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a7e:	e8 f2 1d 00 00       	call   c0007875 <free>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	90                   	nop
c0005a87:	83 c4 0c             	add    esp,0xc
c0005a8a:	c3                   	ret    
c0005a8b:	90                   	nop

c0005a8c <ff_uni2oem>:
c0005a8c:	83 ec 14             	sub    esp,0x14
c0005a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a9e:	c7 44 24 0c 00 ed 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ed00
c0005aa6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aab:	77 0b                	ja     c0005ab8 <ff_uni2oem+0x2c>
c0005aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ab6:	eb 68                	jmp    c0005b20 <ff_uni2oem+0x94>
c0005ab8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac0:	77 5e                	ja     c0005b20 <ff_uni2oem+0x94>
c0005ac2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ac8:	75 56                	jne    c0005b20 <ff_uni2oem+0x94>
c0005aca:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad1:	eb 0d                	jmp    c0005ae0 <ff_uni2oem+0x54>
c0005ad3:	90                   	nop
c0005ad4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ad9:	40                   	inc    eax
c0005ada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005adf:	90                   	nop
c0005ae0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005ae6:	77 24                	ja     c0005b0c <ff_uni2oem+0x80>
c0005ae8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aed:	25 ff ff 00 00       	and    eax,0xffff
c0005af2:	01 c0                	add    eax,eax
c0005af4:	89 c2                	mov    edx,eax
c0005af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afa:	01 d0                	add    eax,edx
c0005afc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005aff:	25 ff ff 00 00       	and    eax,0xffff
c0005b04:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b08:	75 ca                	jne    c0005ad4 <ff_uni2oem+0x48>
c0005b0a:	66 90                	xchg   ax,ax
c0005b0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b11:	83 e8 80             	sub    eax,0xffffff80
c0005b14:	25 ff 00 00 00       	and    eax,0xff
c0005b19:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b1e:	66 90                	xchg   ax,ax
c0005b20:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b25:	83 c4 14             	add    esp,0x14
c0005b28:	c3                   	ret    
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]

c0005b2c <ff_oem2uni>:
c0005b2c:	83 ec 18             	sub    esp,0x18
c0005b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b37:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b3c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b40:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b47:	c7 44 24 10 00 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ed00
c0005b4f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b55:	77 0d                	ja     c0005b64 <ff_oem2uni+0x38>
c0005b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b60:	eb 36                	jmp    c0005b98 <ff_oem2uni+0x6c>
c0005b62:	66 90                	xchg   ax,ax
c0005b64:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6a:	75 2c                	jne    c0005b98 <ff_oem2uni+0x6c>
c0005b6c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b73:	77 23                	ja     c0005b98 <ff_oem2uni+0x6c>
c0005b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b79:	25 ff ff 00 00       	and    eax,0xffff
c0005b7e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b83:	01 c0                	add    eax,eax
c0005b85:	89 c2                	mov    edx,eax
c0005b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8b:	01 d0                	add    eax,edx
c0005b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b90:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b95:	8d 76 00             	lea    esi,[esi+0x0]
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 00 eb 01 c0       	mov    eax,0xc001eb00
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 40 ea 01 c0       	mov    eax,0xc001ea40
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 00 ea 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1600]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	01 c0                	add    eax,eax
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c97:	01 d0                	add    eax,edx
c0005c99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca1:	eb 4d                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca3:	90                   	nop
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d43:	89 de                	mov    esi,ebx
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d72:	c1 e6 08             	shl    esi,0x8
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 de                	mov    esi,ebx
c0005d88:	89 df                	mov    edi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 5c aa ff ff       	call   c00008c0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 52 aa ff ff       	call   c00008c0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	85 db                	test   ebx,ebx
c0005e84:	0f 95 c2             	setne  dl
c0005e87:	31 c0                	xor    eax,eax
c0005e89:	83 fb 2f             	cmp    ebx,0x2f
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 e8 a9 ff ff       	call   c00008c0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 da a9 ff ff       	call   c00008c0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	84 d2                	test   dl,dl
c0005ef9:	0f 95 c1             	setne  cl
c0005efc:	31 c0                	xor    eax,eax
c0005efe:	80 fa 2f             	cmp    dl,0x2f
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 00 ee 01 c0       	push   0xc001ee00
c0005f1d:	e8 72 29 01 00       	call   c0018894 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f42:	83 f8 10             	cmp    eax,0x10
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 0e ee 01 c0       	push   0xc001ee0e
c0005f55:	e8 3a 29 01 00       	call   c0018894 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 a3 28 01 00       	call   c0018838 <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcb:	50                   	push   eax
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 72 a8 ff ff       	call   c00008c0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 ee                	mov    esi,ebp
c0006056:	89 04 24             	mov    DWORD PTR [esp],eax
c0006059:	e8 62 a8 ff ff       	call   c00008c0 <tolower>
c000605e:	83 c4 10             	add    esp,0x10
c0006061:	29 c7                	sub    edi,eax
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006088:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006090:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 5b 01 00 00       	jmp    c0006225 <find_object+0x1b2>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c00060ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006103:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006107:	89 ca                	mov    edx,ecx
c0006109:	85 f6                	test   esi,esi
c000610b:	74 2b                	je     c0006138 <find_object+0xc5>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c1 00 00 00    	je     c00061e2 <find_object+0x16f>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	0f 8e dc 00 00 00    	jle    c0006212 <find_object+0x19f>
c0006136:	eb b3                	jmp    c00060eb <find_object+0x78>
c0006138:	0f b6 f0             	movzx  esi,al
c000613b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000613f:	29 ce                	sub    esi,ecx
c0006141:	80 e2 01             	and    dl,0x1
c0006144:	74 05                	je     c000614b <find_object+0xd8>
c0006146:	83 ee 21             	sub    esi,0x21
c0006149:	eb 55                	jmp    c00061a0 <find_object+0x12d>
c000614b:	47                   	inc    edi
c000614c:	83 ee 22             	sub    esi,0x22
c000614f:	eb 4f                	jmp    c00061a0 <find_object+0x12d>
c0006151:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006154:	48                   	dec    eax
c0006155:	3c 01                	cmp    al,0x1
c0006157:	77 4c                	ja     c00061a5 <find_object+0x132>
c0006159:	50                   	push   eax
c000615a:	6a 02                	push   0x2
c000615c:	68 1d ee 01 c0       	push   0xc001ee1d
c0006161:	57                   	push   edi
c0006162:	e8 e9 a5 ff ff       	call   c0000750 <strncmp>
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	85 c0                	test   eax,eax
c000616c:	75 2a                	jne    c0006198 <find_object+0x125>
c000616e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006172:	8d 42 fb             	lea    eax,[edx-0x5]
c0006175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006179:	50                   	push   eax
c000617a:	8d 47 05             	lea    eax,[edi+0x5]
c000617d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006181:	50                   	push   eax
c0006182:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006186:	50                   	push   eax
c0006187:	e8 94 a4 ff ff       	call   c0000620 <strncpy>
c000618c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006190:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006195:	83 c4 10             	add    esp,0x10
c0006198:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000619c:	29 c6                	sub    esi,eax
c000619e:	01 c7                	add    edi,eax
c00061a0:	83 fe 03             	cmp    esi,0x3
c00061a3:	7f ac                	jg     c0006151 <find_object+0xde>
c00061a5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061aa:	7e 40                	jle    c00061ec <find_object+0x179>
c00061ac:	51                   	push   ecx
c00061ad:	51                   	push   ecx
c00061ae:	6a 2f                	push   0x2f
c00061b0:	55                   	push   ebp
c00061b1:	e8 6a a5 ff ff       	call   c0000720 <strchr>
c00061b6:	83 c4 10             	add    esp,0x10
c00061b9:	85 c0                	test   eax,eax
c00061bb:	74 04                	je     c00061c1 <find_object+0x14e>
c00061bd:	29 e8                	sub    eax,ebp
c00061bf:	eb 0c                	jmp    c00061cd <find_object+0x15a>
c00061c1:	83 ec 0c             	sub    esp,0xc
c00061c4:	55                   	push   ebp
c00061c5:	e8 66 a3 ff ff       	call   c0000530 <strlen>
c00061ca:	83 c4 10             	add    esp,0x10
c00061cd:	52                   	push   edx
c00061ce:	50                   	push   eax
c00061cf:	55                   	push   ebp
c00061d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061d4:	50                   	push   eax
c00061d5:	e8 3a fe ff ff       	call   c0006014 <strnicmp>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	e9 37 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061ea:	eb 1e                	jmp    c000620a <find_object+0x197>
c00061ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f3:	89 e9                	mov    ecx,ebp
c00061f5:	e8 a6 fc ff ff       	call   c0005ea0 <fncompare>
c00061fa:	85 c0                	test   eax,eax
c00061fc:	0f 85 1f ff ff ff    	jne    c0006121 <find_object+0xae>
c0006202:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006206:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000620a:	0f 85 11 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006210:	eb 13                	jmp    c0006225 <find_object+0x1b2>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000621a:	0f 8f b2 fe ff ff    	jg     c00060d2 <find_object+0x5f>
c0006220:	e9 c6 fe ff ff       	jmp    c00060eb <find_object+0x78>
c0006225:	81 c4 2c 01 00 00    	add    esp,0x12c
c000622b:	89 d8                	mov    eax,ebx
c000622d:	5b                   	pop    ebx
c000622e:	5e                   	pop    esi
c000622f:	5f                   	pop    edi
c0006230:	5d                   	pop    ebp
c0006231:	c3                   	ret    

c0006232 <find_object_path>:
c0006232:	55                   	push   ebp
c0006233:	57                   	push   edi
c0006234:	89 d7                	mov    edi,edx
c0006236:	56                   	push   esi
c0006237:	89 c6                	mov    esi,eax
c0006239:	53                   	push   ebx
c000623a:	89 cb                	mov    ebx,ecx
c000623c:	83 ec 0c             	sub    esp,0xc
c000623f:	50                   	push   eax
c0006240:	50                   	push   eax
c0006241:	6a 2f                	push   0x2f
c0006243:	56                   	push   esi
c0006244:	e8 d7 a4 ff ff       	call   c0000720 <strchr>
c0006249:	83 c4 10             	add    esp,0x10
c000624c:	89 c5                	mov    ebp,eax
c000624e:	85 c0                	test   eax,eax
c0006250:	74 3a                	je     c000628c <find_object_path+0x5a>
c0006252:	39 ee                	cmp    esi,ebp
c0006254:	74 31                	je     c0006287 <find_object_path+0x55>
c0006256:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006259:	e8 a5 fb ff ff       	call   c0005e03 <iso_733>
c000625e:	89 c2                	mov    edx,eax
c0006260:	8d 43 02             	lea    eax,[ebx+0x2]
c0006263:	e8 9b fb ff ff       	call   c0005e03 <iso_733>
c0006268:	83 ec 0c             	sub    esp,0xc
c000626b:	89 c1                	mov    ecx,eax
c000626d:	52                   	push   edx
c000626e:	89 f0                	mov    eax,esi
c0006270:	ba 01 00 00 00       	mov    edx,0x1
c0006275:	e8 f9 fd ff ff       	call   c0006073 <find_object>
c000627a:	83 c4 10             	add    esp,0x10
c000627d:	89 c3                	mov    ebx,eax
c000627f:	85 c0                	test   eax,eax
c0006281:	75 04                	jne    c0006287 <find_object_path+0x55>
c0006283:	31 db                	xor    ebx,ebx
c0006285:	eb 36                	jmp    c00062bd <find_object_path+0x8b>
c0006287:	8d 75 01             	lea    esi,[ebp+0x1]
c000628a:	eb b3                	jmp    c000623f <find_object_path+0xd>
c000628c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000628f:	74 28                	je     c00062b9 <find_object_path+0x87>
c0006291:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006294:	e8 6a fb ff ff       	call   c0005e03 <iso_733>
c0006299:	89 c2                	mov    edx,eax
c000629b:	8d 43 02             	lea    eax,[ebx+0x2]
c000629e:	e8 60 fb ff ff       	call   c0005e03 <iso_733>
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 c1                	mov    ecx,eax
c00062a8:	52                   	push   edx
c00062a9:	89 f0                	mov    eax,esi
c00062ab:	89 fa                	mov    edx,edi
c00062ad:	e8 c1 fd ff ff       	call   c0006073 <find_object>
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	eb 04                	jmp    c00062bd <find_object_path+0x8b>
c00062b9:	85 ff                	test   edi,edi
c00062bb:	74 c6                	je     c0006283 <find_object_path+0x51>
c00062bd:	83 c4 0c             	add    esp,0xc
c00062c0:	89 d8                	mov    eax,ebx
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <stricmp>:
c00062c7:	57                   	push   edi
c00062c8:	56                   	push   esi
c00062c9:	31 f6                	xor    esi,esi
c00062cb:	53                   	push   ebx
c00062cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d0:	83 ec 0c             	sub    esp,0xc
c00062d3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062df:	50                   	push   eax
c00062e0:	e8 bb a5 ff ff       	call   c00008a0 <toupper>
c00062e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e8:	e8 d3 a5 ff ff       	call   c00008c0 <tolower>
c00062ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f0:	89 c3                	mov    ebx,eax
c00062f2:	e8 a9 a5 ff ff       	call   c00008a0 <toupper>
c00062f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062fa:	e8 c1 a5 ff ff       	call   c00008c0 <tolower>
c00062ff:	83 c4 10             	add    esp,0x10
c0006302:	39 c3                	cmp    ebx,eax
c0006304:	75 05                	jne    c000630b <stricmp+0x44>
c0006306:	46                   	inc    esi
c0006307:	85 db                	test   ebx,ebx
c0006309:	75 c1                	jne    c00062cc <stricmp+0x5>
c000630b:	29 c3                	sub    ebx,eax
c000630d:	89 d8                	mov    eax,ebx
c000630f:	5b                   	pop    ebx
c0006310:	5e                   	pop    esi
c0006311:	5f                   	pop    edi
c0006312:	c3                   	ret    

c0006313 <iso_open>:
c0006313:	57                   	push   edi
c0006314:	31 c0                	xor    eax,eax
c0006316:	56                   	push   esi
c0006317:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000631c:	53                   	push   ebx
c000631d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006322:	0f 95 c0             	setne  al
c0006325:	89 c2                	mov    edx,eax
c0006327:	89 c6                	mov    esi,eax
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	e8 00 ff ff ff       	call   c0006232 <find_object_path>
c0006332:	83 ca ff             	or     edx,0xffffffff
c0006335:	85 c0                	test   eax,eax
c0006337:	74 5e                	je     c0006397 <iso_open+0x84>
c0006339:	89 c1                	mov    ecx,eax
c000633b:	31 d2                	xor    edx,edx
c000633d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006343:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000634a:	75 42                	jne    c000638e <iso_open+0x7b>
c000634c:	8d 41 02             	lea    eax,[ecx+0x2]
c000634f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006359:	e8 a5 fa ff ff       	call   c0005e03 <iso_733>
c000635e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006364:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000636a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 87 fa ff ff       	call   c0005e03 <iso_733>
c000637c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006386:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x84>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a9                	jne    c000633d <iso_open+0x2a>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	5b                   	pop    ebx
c0006398:	89 d0                	mov    eax,edx
c000639a:	5e                   	pop    esi
c000639b:	5f                   	pop    edi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063b6:	e9 5a fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063bb <iso_read>:
c00063bb:	55                   	push   ebp
c00063bc:	57                   	push   edi
c00063bd:	56                   	push   esi
c00063be:	53                   	push   ebx
c00063bf:	83 ec 1c             	sub    esp,0x1c
c00063c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c6:	83 fd 0f             	cmp    ebp,0xf
c00063c9:	7e 0a                	jle    c00063d5 <iso_read+0x1a>
c00063cb:	83 c8 ff             	or     eax,0xffffffff
c00063ce:	89 c2                	mov    edx,eax
c00063d0:	e9 f4 00 00 00       	jmp    c00064c9 <iso_read+0x10e>
c00063d5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063db:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063e2:	74 e7                	je     c00063cb <iso_read+0x10>
c00063e4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063ea:	85 d2                	test   edx,edx
c00063ec:	75 dd                	jne    c00063cb <iso_read+0x10>
c00063ee:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063f3:	0f 84 cd 00 00 00    	je     c00064c6 <iso_read+0x10b>
c00063f9:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063ff:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006405:	29 c1                	sub    ecx,eax
c0006407:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000640b:	76 04                	jbe    c0006411 <iso_read+0x56>
c000640d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006411:	85 c9                	test   ecx,ecx
c0006413:	0f 84 ad 00 00 00    	je     c00064c6 <iso_read+0x10b>
c0006419:	89 c6                	mov    esi,eax
c000641b:	bb 00 08 00 00       	mov    ebx,0x800
c0006420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006426:	c1 e8 0b             	shr    eax,0xb
c0006429:	29 f3                	sub    ebx,esi
c000642b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006431:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006437:	7e 3f                	jle    c0006478 <iso_read+0xbd>
c0006439:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643f:	75 37                	jne    c0006478 <iso_read+0xbd>
c0006441:	be 20 00 00 00       	mov    esi,0x20
c0006446:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000644c:	7f 05                	jg     c0006453 <iso_read+0x98>
c000644e:	89 ce                	mov    esi,ecx
c0006450:	c1 fe 0b             	sar    esi,0xb
c0006453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006457:	89 f3                	mov    ebx,esi
c0006459:	c1 e3 0b             	shl    ebx,0xb
c000645c:	52                   	push   edx
c000645d:	56                   	push   esi
c000645e:	50                   	push   eax
c000645f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006463:	e8 11 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	85 c0                	test   eax,eax
c000646d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006471:	7f 3e                	jg     c00064b1 <iso_read+0xf6>
c0006473:	e9 53 ff ff ff       	jmp    c00063cb <iso_read+0x10>
c0006478:	39 cb                	cmp    ebx,ecx
c000647a:	7e 02                	jle    c000647e <iso_read+0xc3>
c000647c:	89 cb                	mov    ebx,ecx
c000647e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006482:	e8 84 fb ff ff       	call   c000600b <bdread>
c0006487:	85 c0                	test   eax,eax
c0006489:	0f 88 3c ff ff ff    	js     c00063cb <iso_read+0x10>
c000648f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000649a:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a0:	25 ff 07 00 00       	and    eax,0x7ff
c00064a5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a9:	89 d9                	mov    ecx,ebx
c00064ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064bb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bf:	01 da                	add    edx,ebx
c00064c1:	e9 28 ff ff ff       	jmp    c00063ee <iso_read+0x33>
c00064c6:	89 d0                	mov    eax,edx
c00064c8:	99                   	cdq    
c00064c9:	83 c4 1c             	add    esp,0x1c
c00064cc:	5b                   	pop    ebx
c00064cd:	5e                   	pop    esi
c00064ce:	5f                   	pop    edi
c00064cf:	5d                   	pop    ebp
c00064d0:	c3                   	ret    

c00064d1 <iso_seek>:
c00064d1:	55                   	push   ebp
c00064d2:	83 c8 ff             	or     eax,0xffffffff
c00064d5:	57                   	push   edi
c00064d6:	89 c2                	mov    edx,eax
c00064d8:	56                   	push   esi
c00064d9:	53                   	push   ebx
c00064da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e6:	83 fe 0f             	cmp    esi,0xf
c00064e9:	7f 65                	jg     c0006550 <iso_seek+0x7f>
c00064eb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f1:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064f7:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064fe:	74 50                	je     c0006550 <iso_seek+0x7f>
c0006500:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006507:	75 47                	jne    c0006550 <iso_seek+0x7f>
c0006509:	83 fb 01             	cmp    ebx,0x1
c000650c:	74 0e                	je     c000651c <iso_seek+0x4b>
c000650e:	83 fb 02             	cmp    ebx,0x2
c0006511:	74 0e                	je     c0006521 <iso_seek+0x50>
c0006513:	85 db                	test   ebx,ebx
c0006515:	75 39                	jne    c0006550 <iso_seek+0x7f>
c0006517:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000651a:	eb 0d                	jmp    c0006529 <iso_seek+0x58>
c000651c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651f:	eb 08                	jmp    c0006529 <iso_seek+0x58>
c0006521:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006524:	01 f8                	add    eax,edi
c0006526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006529:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006535:	05 40 35 02 c0       	add    eax,0xc0023540
c000653a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000653d:	76 03                	jbe    c0006542 <iso_seek+0x71>
c000653f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006542:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006548:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000654e:	31 d2                	xor    edx,edx
c0006550:	5b                   	pop    ebx
c0006551:	5e                   	pop    esi
c0006552:	5f                   	pop    edi
c0006553:	5d                   	pop    ebp
c0006554:	c3                   	ret    

c0006555 <iso_tell>:
c0006555:	83 c8 ff             	or     eax,0xffffffff
c0006558:	53                   	push   ebx
c0006559:	89 c2                	mov    edx,eax
c000655b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655f:	83 f9 0f             	cmp    ecx,0xf
c0006562:	7f 20                	jg     c0006584 <iso_tell+0x2f>
c0006564:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000656a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006571:	74 11                	je     c0006584 <iso_tell+0x2f>
c0006573:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000657a:	75 08                	jne    c0006584 <iso_tell+0x2f>
c000657c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006582:	31 d2                	xor    edx,edx
c0006584:	5b                   	pop    ebx
c0006585:	c3                   	ret    

c0006586 <iso_total>:
c0006586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000658a:	83 c8 ff             	or     eax,0xffffffff
c000658d:	83 fa 0f             	cmp    edx,0xf
c0006590:	7f 1e                	jg     c00065b0 <iso_total+0x2a>
c0006592:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006598:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c000659f:	74 0f                	je     c00065b0 <iso_total+0x2a>
c00065a1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065a8:	75 06                	jne    c00065b0 <iso_total+0x2a>
c00065aa:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b0:	c3                   	ret    

c00065b1 <fn_postprocess>:
c00065b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065b5:	89 d0                	mov    eax,edx
c00065b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b9:	80 f9 3b             	cmp    cl,0x3b
c00065bc:	74 07                	je     c00065c5 <fn_postprocess+0x14>
c00065be:	84 c9                	test   cl,cl
c00065c0:	74 03                	je     c00065c5 <fn_postprocess+0x14>
c00065c2:	40                   	inc    eax
c00065c3:	eb f2                	jmp    c00065b7 <fn_postprocess+0x6>
c00065c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c8:	39 d0                	cmp    eax,edx
c00065ca:	76 0a                	jbe    c00065d6 <fn_postprocess+0x25>
c00065cc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d0:	75 04                	jne    c00065d6 <fn_postprocess+0x25>
c00065d2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d6:	c3                   	ret    

c00065d7 <iso_readdir>:
c00065d7:	55                   	push   ebp
c00065d8:	57                   	push   edi
c00065d9:	56                   	push   esi
c00065da:	53                   	push   ebx
c00065db:	83 ec 1c             	sub    esp,0x1c
c00065de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065e2:	83 fb 0f             	cmp    ebx,0xf
c00065e5:	7f 28                	jg     c000660f <iso_readdir+0x38>
c00065e7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065ed:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065f3:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fa:	74 13                	je     c000660f <iso_readdir+0x38>
c00065fc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006600:	74 0d                	je     c000660f <iso_readdir+0x38>
c0006602:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006609:	0f 84 b1 00 00 00    	je     c00066c0 <iso_readdir+0xe9>
c000660f:	83 ec 0c             	sub    esp,0xc
c0006612:	68 20 ee 01 c0       	push   0xc001ee20
c0006617:	e8 78 22 01 00       	call   c0018894 <iso_kprintf>
c000661c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000661f:	e8 8c 22 01 00       	call   c00188b0 <iso_kprintfd>
c0006624:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662a:	c7 04 24 25 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee25
c0006631:	e8 5e 22 01 00       	call   c0018894 <iso_kprintf>
c0006636:	5d                   	pop    ebp
c0006637:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000663d:	e8 6e 22 01 00       	call   c00188b0 <iso_kprintfd>
c0006642:	c7 04 24 2b ee 01 c0 	mov    DWORD PTR [esp],0xc001ee2b
c0006649:	e8 46 22 01 00       	call   c0018894 <iso_kprintf>
c000664e:	58                   	pop    eax
c000664f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006655:	e8 56 22 01 00       	call   c00188b0 <iso_kprintfd>
c000665a:	c7 04 24 31 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee31
c0006661:	e8 2e 22 01 00       	call   c0018894 <iso_kprintf>
c0006666:	58                   	pop    eax
c0006667:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000666d:	e8 3e 22 01 00       	call   c00188b0 <iso_kprintfd>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	eb 42                	jmp    c00066b9 <iso_readdir+0xe2>
c0006677:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000667a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006681:	89 d1                	mov    ecx,edx
c0006683:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006689:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000668d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006690:	75 35                	jne    c00066c7 <iso_readdir+0xf0>
c0006692:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006698:	81 c2 00 08 00 00    	add    edx,0x800
c000669e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066a4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066a7:	73 1e                	jae    c00066c7 <iso_readdir+0xf0>
c00066a9:	c1 ea 0b             	shr    edx,0xb
c00066ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00066ae:	01 d0                	add    eax,edx
c00066b0:	e8 4d f9 ff ff       	call   c0006002 <biread>
c00066b5:	85 c0                	test   eax,eax
c00066b7:	79 be                	jns    c0006677 <iso_readdir+0xa0>
c00066b9:	31 c0                	xor    eax,eax
c00066bb:	e9 66 01 00 00       	jmp    c0006826 <iso_readdir+0x24f>
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	83 c8 ff             	or     eax,0xffffffff
c00066c5:	eb da                	jmp    c00066a1 <iso_readdir+0xca>
c00066c7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066cd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066d3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066d9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066dc:	73 db                	jae    c00066b9 <iso_readdir+0xe2>
c00066de:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066e2:	75 34                	jne    c0006718 <iso_readdir+0x141>
c00066e4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066e8:	75 2e                	jne    c0006718 <iso_readdir+0x141>
c00066ea:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066ed:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066f4:	01 f9                	add    ecx,edi
c00066f6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066f9:	89 c8                	mov    eax,ecx
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006705:	01 c8                	add    eax,ecx
c0006707:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670a:	25 ff 07 00 00       	and    eax,0x7ff
c000670f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006713:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006716:	74 a1                	je     c00066b9 <iso_readdir+0xe2>
c0006718:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000671e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006722:	8d 56 21             	lea    edx,[esi+0x21]
c0006725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006729:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000672f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006736:	74 0c                	je     c0006744 <iso_readdir+0x16d>
c0006738:	89 e8                	mov    eax,ebp
c000673a:	e8 17 f6 ff ff       	call   c0005d56 <ucs2utfn>
c000673f:	e9 a6 00 00 00       	jmp    c00067ea <iso_readdir+0x213>
c0006744:	57                   	push   edi
c0006745:	51                   	push   ecx
c0006746:	52                   	push   edx
c0006747:	55                   	push   ebp
c0006748:	e8 d3 9e ff ff       	call   c0000620 <strncpy>
c000674d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006751:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006757:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000675a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006762:	e8 4a fe ff ff       	call   c00065b1 <fn_postprocess>
c0006767:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000676b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	29 d0                	sub    eax,edx
c0006773:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006777:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000677b:	74 05                	je     c0006782 <iso_readdir+0x1ab>
c000677d:	83 e8 21             	sub    eax,0x21
c0006780:	eb 04                	jmp    c0006786 <iso_readdir+0x1af>
c0006782:	47                   	inc    edi
c0006783:	83 e8 22             	sub    eax,0x22
c0006786:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000678a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006794:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006799:	7e 4f                	jle    c00067ea <iso_readdir+0x213>
c000679b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000679e:	48                   	dec    eax
c000679f:	3c 01                	cmp    al,0x1
c00067a1:	77 47                	ja     c00067ea <iso_readdir+0x213>
c00067a3:	52                   	push   edx
c00067a4:	6a 02                	push   0x2
c00067a6:	68 1d ee 01 c0       	push   0xc001ee1d
c00067ab:	57                   	push   edi
c00067ac:	e8 9f 9f ff ff       	call   c0000750 <strncmp>
c00067b1:	83 c4 10             	add    esp,0x10
c00067b4:	85 c0                	test   eax,eax
c00067b6:	75 26                	jne    c00067de <iso_readdir+0x207>
c00067b8:	50                   	push   eax
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 e8 05             	sub    eax,0x5
c00067c0:	50                   	push   eax
c00067c1:	8d 47 05             	lea    eax,[edi+0x5]
c00067c4:	50                   	push   eax
c00067c5:	55                   	push   ebp
c00067c6:	e8 55 9e ff ff       	call   c0000620 <strncpy>
c00067cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	83 c4 10             	add    esp,0x10
c00067d6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067de:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067e6:	01 c7                	add    edi,eax
c00067e8:	eb aa                	jmp    c0006794 <iso_readdir+0x1bd>
c00067ea:	83 c8 ff             	or     eax,0xffffffff
c00067ed:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067f1:	89 c2                	mov    edx,eax
c00067f3:	75 0a                	jne    c00067ff <iso_readdir+0x228>
c00067f5:	8d 46 0a             	lea    eax,[esi+0xa]
c00067f8:	e8 06 f6 ff ff       	call   c0005e03 <iso_733>
c00067fd:	31 d2                	xor    edx,edx
c00067ff:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006805:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000680b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006811:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006817:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000681a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000681d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006821:	05 50 35 02 c0       	add    eax,0xc0023550
c0006826:	83 c4 1c             	add    esp,0x1c
c0006829:	5b                   	pop    ebx
c000682a:	5e                   	pop    esi
c000682b:	5f                   	pop    edi
c000682c:	5d                   	pop    ebp
c000682d:	c3                   	ret    

c000682e <iso_reset>:
c000682e:	83 ec 18             	sub    esp,0x18
c0006831:	68 3a ee 01 c0       	push   0xc001ee3a
c0006836:	e8 59 20 01 00       	call   c0018894 <iso_kprintf>
c000683b:	e8 0d f7 ff ff       	call   c0005f4d <iso_break_all>
c0006840:	e8 06 f7 ff ff       	call   c0005f4b <bclear>
c0006845:	31 c0                	xor    eax,eax
c0006847:	83 c4 1c             	add    esp,0x1c
c000684a:	c3                   	ret    

c000684b <init_percd>:
c000684b:	57                   	push   edi
c000684c:	56                   	push   esi
c000684d:	53                   	push   ebx
c000684e:	bb 01 00 00 00       	mov    ebx,0x1
c0006853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006857:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000685c:	e8 cd ff ff ff       	call   c000682e <iso_reset>
c0006861:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000686b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006870:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006874:	e8 89 f7 ff ff       	call   c0006002 <biread>
c0006879:	89 c6                	mov    esi,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	0f 88 ba 00 00 00    	js     c000693d <init_percd+0xf2>
c0006883:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	52                   	push   edx
c000688e:	6a 06                	push   0x6
c0006890:	68 45 ee 01 c0       	push   0xc001ee45
c0006895:	50                   	push   eax
c0006896:	e8 e5 9a ff ff       	call   c0000380 <memcmp>
c000689b:	83 c4 10             	add    esp,0x10
c000689e:	85 c0                	test   eax,eax
c00068a0:	74 08                	je     c00068aa <init_percd+0x5f>
c00068a2:	43                   	inc    ebx
c00068a3:	83 fb 04             	cmp    ebx,0x4
c00068a6:	75 c3                	jne    c000686b <init_percd+0x20>
c00068a8:	eb 1a                	jmp    c00068c4 <init_percd+0x79>
c00068aa:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068b1:	83 c0 5c             	add    eax,0x5c
c00068b4:	e8 1b f5 ff ff       	call   c0005dd4 <isjoliet>
c00068b9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068be:	85 c0                	test   eax,eax
c00068c0:	74 e0                	je     c00068a2 <init_percd+0x57>
c00068c2:	eb 3e                	jmp    c0006902 <init_percd+0xb7>
c00068c4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068cb:	75 35                	jne    c0006902 <init_percd+0xb7>
c00068cd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068d2:	83 c0 10             	add    eax,0x10
c00068d5:	e8 28 f7 ff ff       	call   c0006002 <biread>
c00068da:	89 c6                	mov    esi,eax
c00068dc:	85 c0                	test   eax,eax
c00068de:	78 5f                	js     c000693f <init_percd+0xf4>
c00068e0:	83 cb ff             	or     ebx,0xffffffff
c00068e3:	50                   	push   eax
c00068e4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068eb:	6a 06                	push   0x6
c00068ed:	83 c0 04             	add    eax,0x4
c00068f0:	68 4c ee 01 c0       	push   0xc001ee4c
c00068f5:	50                   	push   eax
c00068f6:	e8 85 9a ff ff       	call   c0000380 <memcmp>
c00068fb:	83 c4 10             	add    esp,0x10
c00068fe:	85 c0                	test   eax,eax
c0006900:	75 3d                	jne    c000693f <init_percd+0xf4>
c0006902:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006909:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000690e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006914:	b9 22 00 00 00       	mov    ecx,0x22
c0006919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006920:	31 db                	xor    ebx,ebx
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000692c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006931:	e8 cd f4 ff ff       	call   c0005e03 <iso_733>
c0006936:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000693b:	eb 02                	jmp    c000693f <init_percd+0xf4>
c000693d:	89 c3                	mov    ebx,eax
c000693f:	89 d8                	mov    eax,ebx
c0006941:	5b                   	pop    ebx
c0006942:	5e                   	pop    esi
c0006943:	5f                   	pop    edi
c0006944:	c3                   	ret    

c0006945 <iso_ioctl>:
c0006945:	83 ec 18             	sub    esp,0x18
c0006948:	68 53 ee 01 c0       	push   0xc001ee53
c000694d:	e8 42 1f 01 00       	call   c0018894 <iso_kprintf>
c0006952:	e8 d7 fe ff ff       	call   c000682e <iso_reset>
c0006957:	31 c0                	xor    eax,eax
c0006959:	83 c4 1c             	add    esp,0x1c
c000695c:	c3                   	ret    

c000695d <fs_iso9660_init>:
c000695d:	53                   	push   ebx
c000695e:	31 db                	xor    ebx,ebx
c0006960:	83 ec 14             	sub    esp,0x14
c0006963:	68 5e ee 01 c0       	push   0xc001ee5e
c0006968:	e8 27 1f 01 00       	call   c0018894 <iso_kprintf>
c000696d:	83 c4 0c             	add    esp,0xc
c0006970:	68 40 09 00 00       	push   0x940
c0006975:	6a 00                	push   0x0
c0006977:	68 40 35 02 c0       	push   0xc0023540
c000697c:	e8 3f 9b ff ff       	call   c00004c0 <memset>
c0006981:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006988:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006992:	e8 ce 0e 00 00       	call   c0007865 <malloc>
c0006997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000699e:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069a3:	e8 bd 0e 00 00       	call   c0007865 <malloc>
c00069a8:	83 c4 10             	add    esp,0x10
c00069ab:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	68 04 08 00 00       	push   0x804
c00069b8:	e8 a8 0e 00 00       	call   c0007865 <malloc>
c00069bd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069c4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069ca:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069d1:	e8 8f 0e 00 00       	call   c0007865 <malloc>
c00069d6:	83 c4 10             	add    esp,0x10
c00069d9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069e0:	43                   	inc    ebx
c00069e1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e7:	83 fb 10             	cmp    ebx,0x10
c00069ea:	75 c4                	jne    c00069b0 <fs_iso9660_init+0x53>
c00069ec:	31 c0                	xor    eax,eax
c00069ee:	83 c4 08             	add    esp,0x8
c00069f1:	5b                   	pop    ebx
c00069f2:	c3                   	ret    

c00069f3 <fs_iso9660_shutdown>:
c00069f3:	53                   	push   ebx
c00069f4:	31 db                	xor    ebx,ebx
c00069f6:	83 ec 08             	sub    esp,0x8
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a03:	e8 6d 0e 00 00       	call   c0007875 <free>
c0006a08:	58                   	pop    eax
c0006a09:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a10:	43                   	inc    ebx
c0006a11:	e8 5f 0e 00 00       	call   c0007875 <free>
c0006a16:	83 c4 10             	add    esp,0x10
c0006a19:	83 fb 10             	cmp    ebx,0x10
c0006a1c:	75 db                	jne    c00069f9 <fs_iso9660_shutdown+0x6>
c0006a1e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a23:	85 c0                	test   eax,eax
c0006a25:	74 0c                	je     c0006a33 <fs_iso9660_shutdown+0x40>
c0006a27:	83 ec 0c             	sub    esp,0xc
c0006a2a:	50                   	push   eax
c0006a2b:	e8 45 0e 00 00       	call   c0007875 <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a38:	85 c0                	test   eax,eax
c0006a3a:	74 0c                	je     c0006a48 <fs_iso9660_shutdown+0x55>
c0006a3c:	83 ec 0c             	sub    esp,0xc
c0006a3f:	50                   	push   eax
c0006a40:	e8 30 0e 00 00       	call   c0007875 <free>
c0006a45:	83 c4 10             	add    esp,0x10
c0006a48:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a52:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a5c:	31 c0                	xor    eax,eax
c0006a5e:	83 c4 08             	add    esp,0x8
c0006a61:	5b                   	pop    ebx
c0006a62:	c3                   	ret    
c0006a63:	90                   	nop

c0006a64 <Computer::close(int, int, void*)>:
c0006a64:	57                   	push   edi
c0006a65:	56                   	push   esi
c0006a66:	53                   	push   ebx
c0006a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a73:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	50                   	push   eax
c0006a7d:	e8 d4 50 00 00       	call   c000bb56 <Device::closeAll()>
c0006a82:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a88:	83 c4 10             	add    esp,0x10
c0006a8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a8d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a91:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a99:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aa1:	5b                   	pop    ebx
c0006aa2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006aa5:	5e                   	pop    esi
c0006aa6:	5f                   	pop    edi
c0006aa7:	ff e0                	jmp    eax

c0006aa9 <Krnl::firstTask()>:
c0006aa9:	53                   	push   ebx
c0006aaa:	83 ec 14             	sub    esp,0x14
c0006aad:	fb                   	sti    
c0006aae:	68 6f ee 01 c0       	push   0xc001ee6f
c0006ab3:	e8 8b 92 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006ab8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006abf:	e8 a1 0d 00 00       	call   c0007865 <malloc>
c0006ac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006acb:	89 c3                	mov    ebx,eax
c0006acd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ad2:	50                   	push   eax
c0006ad3:	68 88 ee 01 c0       	push   0xc001ee88
c0006ad8:	6a 01                	push   0x1
c0006ada:	53                   	push   ebx
c0006adb:	e8 58 d8 00 00       	call   c0014338 <Process::Process(bool, char const*, Process*, char**)>
c0006ae0:	83 c4 20             	add    esp,0x20
c0006ae3:	68 ff 00 00 00       	push   0xff
c0006ae8:	6a 00                	push   0x0
c0006aea:	68 b9 72 00 c0       	push   0xc00072b9
c0006aef:	53                   	push   ebx
c0006af0:	e8 6b da 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c0006af5:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006afb:	6a 7a                	push   0x7a
c0006afd:	6a 00                	push   0x0
c0006aff:	68 dc 4f 01 c0       	push   0xc0014fdc
c0006b04:	52                   	push   edx
c0006b05:	e8 56 da 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c0006b0a:	83 c4 14             	add    esp,0x14
c0006b0d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b12:	68 84 ef 01 c0       	push   0xc001ef84
c0006b17:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b1e:	e8 20 92 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006b23:	e8 93 e8 00 00       	call   c00153bb <Vm::initialise8086()>
c0006b28:	e8 6f 3e 00 00       	call   c000a99c <Fs::initVFS()>
c0006b2d:	c7 04 24 95 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee95
c0006b34:	e8 0a 92 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006b39:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b3e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b46:	6a 00                	push   0x0
c0006b48:	6a 00                	push   0x0
c0006b4a:	6a 00                	push   0x0
c0006b4c:	50                   	push   eax
c0006b4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b50:	83 c4 14             	add    esp,0x14
c0006b53:	68 84 ef 01 c0       	push   0xc001ef84
c0006b58:	e8 e6 91 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006b5d:	e8 bc 96 00 00       	call   c001021e <Krnl::loadSystemEnv()>
c0006b62:	e8 19 99 00 00       	call   c0010480 <Krnl::setupPowerManager()>
c0006b67:	83 c4 0c             	add    esp,0xc
c0006b6a:	6a 3a                	push   0x3a
c0006b6c:	68 af ee 01 c0       	push   0xc001eeaf
c0006b71:	68 b8 ee 01 c0       	push   0xc001eeb8
c0006b76:	e8 5e bd 00 00       	call   c00128d9 <Reg::readIntWithDefault(char*, char*, int)>
c0006b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b7e:	e8 25 49 00 00       	call   c000b4a8 <User::loadClockSettings(int)>
c0006b83:	c7 04 24 a8 ef 01 c0 	mov    DWORD PTR [esp],0xc001efa8
c0006b8a:	e8 b4 91 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006b8f:	59                   	pop    ecx
c0006b90:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b95:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b9b:	53                   	push   ebx
c0006b9c:	e8 b3 4f 00 00       	call   c000bb54 <Device::loadDriversForAll()>
c0006ba1:	c7 04 24 c0 ee 01 c0 	mov    DWORD PTR [esp],0xc001eec0
c0006ba8:	e8 96 91 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006bad:	58                   	pop    eax
c0006bae:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bb4:	5a                   	pop    edx
c0006bb5:	6a 01                	push   0x1
c0006bb7:	68 d1 ee 01 c0       	push   0xc001eed1
c0006bbc:	e8 95 d1 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c0006bc1:	59                   	pop    ecx
c0006bc2:	5a                   	pop    edx
c0006bc3:	53                   	push   ebx
c0006bc4:	50                   	push   eax
c0006bc5:	e8 bd d3 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 ec 0c             	sub    esp,0xc
c0006bd0:	6a 02                	push   0x2
c0006bd2:	e8 cd dd 00 00       	call   c00149a4 <blockTask(TaskState)>
c0006bd7:	83 c4 10             	add    esp,0x10
c0006bda:	eb f1                	jmp    c0006bcd <Krnl::firstTask()+0x124>

c0006bdc <Computer::Computer()>:
c0006bdc:	83 ec 0c             	sub    esp,0xc
c0006bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be3:	83 ec 08             	sub    esp,0x8
c0006be6:	68 ed ee 01 c0       	push   0xc001eeed
c0006beb:	50                   	push   eax
c0006bec:	e8 df 4f 00 00       	call   c000bbd0 <Device::Device(char const*)>
c0006bf1:	83 c4 10             	add    esp,0x10
c0006bf4:	ba f4 ef 01 c0       	mov    edx,0xc001eff4
c0006bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfd:	89 10                	mov    DWORD PTR [eax],edx
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c11:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c25:	83 ca 04             	or     edx,0x4
c0006c28:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c38:	31 d2                	xor    edx,edx
c0006c3a:	88 c2                	mov    dl,al
c0006c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c40:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c51:	31 d2                	xor    edx,edx
c0006c53:	88 c2                	mov    dl,al
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c68:	8d 50 01             	lea    edx,[eax+0x1]
c0006c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c6f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c75:	31 d2                	xor    edx,edx
c0006c77:	88 c2                	mov    dl,al
c0006c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c81:	83 e1 3f             	and    ecx,0x3f
c0006c84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c88:	90                   	nop
c0006c89:	83 c4 0c             	add    esp,0xc
c0006c8c:	c3                   	ret    
c0006c8d:	90                   	nop

c0006c8e <Computer::setBootMessage(char const*)>:
c0006c8e:	c3                   	ret    
c0006c8f:	90                   	nop

c0006c90 <Computer::detectFeatures()>:
c0006c90:	55                   	push   ebp
c0006c91:	57                   	push   edi
c0006c92:	56                   	push   esi
c0006c93:	53                   	push   ebx
c0006c94:	83 ec 1c             	sub    esp,0x1c
c0006c97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c9b:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	83 e0 fd             	and    eax,0xfffffffd
c0006cb8:	01 d2                	add    edx,edx
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 46                	jne    c0006d0c <Computer::detectFeatures()+0x7c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 07                	je     c0006cd6 <Computer::detectFeatures()+0x46>
c0006ccf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cd6:	e8 9b 6a 01 00       	call   c001d776 <x87Detect>
c0006cdb:	83 e0 01             	and    eax,0x1
c0006cde:	c1 e0 04             	shl    eax,0x4
c0006ce1:	88 c2                	mov    dl,al
c0006ce3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce9:	83 e0 ef             	and    eax,0xffffffef
c0006cec:	09 d0                	or     eax,edx
c0006cee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cf4:	a8 10                	test   al,0x10
c0006cf6:	0f 85 2a 01 00 00    	jne    c0006e26 <Computer::detectFeatures()+0x196>
c0006cfc:	84 c0                	test   al,al
c0006cfe:	0f 88 45 01 00 00    	js     c0006e49 <Computer::detectFeatures()+0x1b9>
c0006d04:	83 c4 1c             	add    esp,0x1c
c0006d07:	5b                   	pop    ebx
c0006d08:	5e                   	pop    esi
c0006d09:	5f                   	pop    edi
c0006d0a:	5d                   	pop    ebp
c0006d0b:	c3                   	ret    
c0006d0c:	83 ec 0c             	sub    esp,0xc
c0006d0f:	6a 20                	push   0x20
c0006d11:	e8 5a 85 00 00       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c0006d16:	83 e0 01             	and    eax,0x1
c0006d19:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d26:	83 e0 f7             	and    eax,0xfffffff7
c0006d29:	09 d0                	or     eax,edx
c0006d2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d31:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d38:	e8 33 85 00 00       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c0006d3d:	83 e0 01             	and    eax,0x1
c0006d40:	88 c2                	mov    dl,al
c0006d42:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d48:	83 e0 fe             	and    eax,0xfffffffe
c0006d4b:	09 d0                	or     eax,edx
c0006d4d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d53:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d5a:	e8 11 85 00 00       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c0006d5f:	c1 e0 07             	shl    eax,0x7
c0006d62:	88 c2                	mov    dl,al
c0006d64:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d6a:	83 e0 7f             	and    eax,0x7f
c0006d6d:	09 d0                	or     eax,edx
c0006d6f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d75:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d7c:	e8 ef 84 00 00       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c0006d81:	83 c4 10             	add    esp,0x10
c0006d84:	83 e0 01             	and    eax,0x1
c0006d87:	c1 e0 05             	shl    eax,0x5
c0006d8a:	88 c2                	mov    dl,al
c0006d8c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d92:	83 e0 df             	and    eax,0xffffffdf
c0006d95:	09 d0                	or     eax,edx
c0006d97:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006da7:	0f 84 c2 00 00 00    	je     c0006e6f <Computer::detectFeatures()+0x1df>
c0006dad:	83 e0 fe             	and    eax,0xfffffffe
c0006db0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dbc:	88 c2                	mov    dl,al
c0006dbe:	83 e2 09             	and    edx,0x9
c0006dc1:	fe ca                	dec    dl
c0006dc3:	75 09                	jne    c0006dce <Computer::detectFeatures()+0x13e>
c0006dc5:	83 e0 fe             	and    eax,0xfffffffe
c0006dc8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dce:	83 ec 0c             	sub    esp,0xc
c0006dd1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006dd5:	50                   	push   eax
c0006dd6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dda:	55                   	push   ebp
c0006ddb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ddf:	57                   	push   edi
c0006de0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006de4:	56                   	push   esi
c0006de5:	68 00 00 00 80       	push   0x80000000
c0006dea:	e8 fd 83 00 00       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006def:	83 c4 20             	add    esp,0x20
c0006df2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006df9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006dfd:	0f 86 c3 fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e03:	83 ec 0c             	sub    esp,0xc
c0006e06:	50                   	push   eax
c0006e07:	55                   	push   ebp
c0006e08:	57                   	push   edi
c0006e09:	56                   	push   esi
c0006e0a:	68 01 00 00 80       	push   0x80000001
c0006e0f:	e8 d8 83 00 00       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e14:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e1e:	83 c4 20             	add    esp,0x20
c0006e21:	e9 a0 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e26:	e8 05 69 01 00       	call   c001d730 <absolutelyNoChanceInHell>
c0006e2b:	88 c2                	mov    dl,al
c0006e2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e33:	c1 e2 07             	shl    edx,0x7
c0006e36:	83 e0 7f             	and    eax,0x7f
c0006e39:	09 d0                	or     eax,edx
c0006e3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e41:	84 c0                	test   al,al
c0006e43:	0f 89 bb fe ff ff    	jns    c0006d04 <Computer::detectFeatures()+0x74>
c0006e49:	e8 52 65 01 00       	call   c001d3a0 <avxDetect>
c0006e4e:	83 e0 01             	and    eax,0x1
c0006e51:	c1 e0 05             	shl    eax,0x5
c0006e54:	88 c2                	mov    dl,al
c0006e56:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e5c:	83 e0 df             	and    eax,0xffffffdf
c0006e5f:	09 d0                	or     eax,edx
c0006e61:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e67:	83 c4 1c             	add    esp,0x1c
c0006e6a:	5b                   	pop    ebx
c0006e6b:	5e                   	pop    esi
c0006e6c:	5f                   	pop    edi
c0006e6d:	5d                   	pop    ebp
c0006e6e:	c3                   	ret    
c0006e6f:	83 ec 0c             	sub    esp,0xc
c0006e72:	68 00 02 00 00       	push   0x200
c0006e77:	e8 f4 83 00 00       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c0006e7c:	83 c4 10             	add    esp,0x10
c0006e7f:	83 e0 01             	and    eax,0x1
c0006e82:	88 c2                	mov    dl,al
c0006e84:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e8a:	83 e0 fe             	and    eax,0xfffffffe
c0006e8d:	09 d0                	or     eax,edx
c0006e8f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e95:	e9 1c ff ff ff       	jmp    c0006db6 <Computer::detectFeatures()+0x126>

c0006e9a <Computer::displayFeatures()>:
c0006e9a:	c3                   	ret    
c0006e9b:	90                   	nop

c0006e9c <Computer::rdmsr(unsigned int)>:
c0006e9c:	83 ec 0c             	sub    esp,0xc
c0006e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eaa:	74 0a                	je     c0006eb6 <Computer::rdmsr(unsigned int)+0x1a>
c0006eac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eb0:	0f 32                	rdmsr  
c0006eb2:	83 c4 0c             	add    esp,0xc
c0006eb5:	c3                   	ret    
c0006eb6:	83 ec 0c             	sub    esp,0xc
c0006eb9:	68 f6 ee 01 c0       	push   0xc001eef6
c0006ebe:	e8 f8 94 00 00       	call   c00103bb <KePanic(char const*)>
c0006ec3:	83 c4 10             	add    esp,0x10
c0006ec6:	eb e4                	jmp    c0006eac <Computer::rdmsr(unsigned int)+0x10>

c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ec8:	57                   	push   edi
c0006ec9:	56                   	push   esi
c0006eca:	52                   	push   edx
c0006ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ed3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ed7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ede:	74 0e                	je     c0006eee <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ee4:	89 f0                	mov    eax,esi
c0006ee6:	89 fa                	mov    edx,edi
c0006ee8:	0f 30                	wrmsr  
c0006eea:	58                   	pop    eax
c0006eeb:	5e                   	pop    esi
c0006eec:	5f                   	pop    edi
c0006eed:	c3                   	ret    
c0006eee:	83 ec 0c             	sub    esp,0xc
c0006ef1:	68 fc ee 01 c0       	push   0xc001eefc
c0006ef6:	e8 c0 94 00 00       	call   c00103bb <KePanic(char const*)>
c0006efb:	83 c4 10             	add    esp,0x10
c0006efe:	eb e0                	jmp    c0006ee0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f00 <Computer::shutdown()>:
c0006f00:	83 ec 0c             	sub    esp,0xc
c0006f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f07:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f09:	6a 00                	push   0x0
c0006f0b:	6a 00                	push   0x0
c0006f0d:	6a 00                	push   0x0
c0006f0f:	50                   	push   eax
c0006f10:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f13:	83 c4 1c             	add    esp,0x1c
c0006f16:	c3                   	ret    
c0006f17:	90                   	nop

c0006f18 <Computer::restart()>:
c0006f18:	83 ec 0c             	sub    esp,0xc
c0006f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f21:	6a 00                	push   0x0
c0006f23:	6a 00                	push   0x0
c0006f25:	6a 01                	push   0x1
c0006f27:	50                   	push   eax
c0006f28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f2b:	83 c4 1c             	add    esp,0x1c
c0006f2e:	c3                   	ret    
c0006f2f:	90                   	nop

c0006f30 <Computer::sleep()>:
c0006f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f34:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f3e:	e9 a5 7d 00 00       	jmp    c000ece8 <ACPI::sleep()>
c0006f43:	90                   	nop

c0006f44 <Computer::nmiEnabled()>:
c0006f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f48:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f4e:	c3                   	ret    
c0006f4f:	90                   	nop

c0006f50 <Computer::readCMOS(unsigned char)>:
c0006f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f54:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f5b:	19 c0                	sbb    eax,eax
c0006f5d:	83 e0 80             	and    eax,0xffffff80
c0006f60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f64:	e6 70                	out    0x70,al
c0006f66:	e4 71                	in     al,0x71
c0006f68:	c3                   	ret    
c0006f69:	90                   	nop

c0006f6a <Computer::enableNMI(bool)>:
c0006f6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f72:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f78:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f80:	eb ce                	jmp    c0006f50 <Computer::readCMOS(unsigned char)>

c0006f82 <Computer::open(int, int, void*)>:
c0006f82:	56                   	push   esi
c0006f83:	53                   	push   ebx
c0006f84:	83 ec 10             	sub    esp,0x10
c0006f87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f8b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006f92:	68 02 ef 01 c0       	push   0xc001ef02
c0006f97:	0f 94 05 40 12 02 c0 	sete   BYTE PTR ds:0xc0021240
c0006f9e:	e8 a0 8d 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006fa3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006faa:	e8 b6 08 00 00       	call   c0007865 <malloc>
c0006faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fb2:	89 c6                	mov    esi,eax
c0006fb4:	e8 c7 78 00 00       	call   c000e880 <ACPI::ACPI()>
c0006fb9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fbf:	58                   	pop    eax
c0006fc0:	5a                   	pop    edx
c0006fc1:	56                   	push   esi
c0006fc2:	53                   	push   ebx
c0006fc3:	e8 70 4a 00 00       	call   c000ba38 <Device::addChild(Device*)>
c0006fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fcb:	e8 c0 fc ff ff       	call   c0006c90 <Computer::detectFeatures()>
c0006fd0:	59                   	pop    ecx
c0006fd1:	5e                   	pop    esi
c0006fd2:	6a 01                	push   0x1
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 90 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0006fda:	c7 04 24 1a ef 01 c0 	mov    DWORD PTR [esp],0xc001ef1a
c0006fe1:	e8 5d 8d 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c0006fe6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fed:	e8 73 08 00 00       	call   c0007865 <malloc>
c0006ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ff5:	89 c6                	mov    esi,eax
c0006ff7:	e8 2c 83 00 00       	call   c000f328 <CPU::CPU()>
c0006ffc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007002:	58                   	pop    eax
c0007003:	5a                   	pop    edx
c0007004:	56                   	push   esi
c0007005:	53                   	push   ebx
c0007006:	e8 2d 4a 00 00       	call   c000ba38 <Device::addChild(Device*)>
c000700b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007011:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007015:	8b 10                	mov    edx,DWORD PTR [eax]
c0007017:	51                   	push   ecx
c0007018:	6a 00                	push   0x0
c000701a:	6a 00                	push   0x0
c000701c:	50                   	push   eax
c000701d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007020:	83 c4 14             	add    esp,0x14
c0007023:	68 c8 ef 01 c0       	push   0xc001efc8
c0007028:	e8 16 8d 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000702d:	e8 fb f4 00 00       	call   c001652d <HalInitialiseCoprocessor()>
c0007032:	c7 04 24 34 ef 01 c0 	mov    DWORD PTR [esp],0xc001ef34
c0007039:	e8 05 8d 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000703e:	c7 04 24 a9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006aa9
c0007045:	e8 42 d6 00 00       	call   c001468c <setupMultitasking(void (*)())>
c000704a:	83 c4 14             	add    esp,0x14
c000704d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007052:	5b                   	pop    ebx
c0007053:	5e                   	pop    esi
c0007054:	c3                   	ret    
c0007055:	90                   	nop

c0007056 <Computer::disableNMI()>:
c0007056:	6a 00                	push   0x0
c0007058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705c:	50                   	push   eax
c000705d:	e8 08 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0007062:	5a                   	pop    edx
c0007063:	59                   	pop    ecx
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007071:	19 c0                	sbb    eax,eax
c0007073:	83 e0 80             	and    eax,0xffffff80
c0007076:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000707a:	e6 70                	out    0x70,al
c000707c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007080:	e6 71                	out    0x71,al
c0007082:	c3                   	ret    
c0007083:	90                   	nop

c0007084 <Computer::handleNMI()>:
c0007084:	56                   	push   esi
c0007085:	53                   	push   ebx
c0007086:	83 ec 10             	sub    esp,0x10
c0007089:	e4 92                	in     al,0x92
c000708b:	89 c6                	mov    esi,eax
c000708d:	e4 61                	in     al,0x61
c000708f:	68 4f ef 01 c0       	push   0xc001ef4f
c0007094:	88 c3                	mov    bl,al
c0007096:	e8 5f 35 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	83 e6 10             	and    esi,0x10
c00070a1:	75 0d                	jne    c00070b0 <Computer::handleNMI()+0x2c>
c00070a3:	f6 c3 40             	test   bl,0x40
c00070a6:	75 1d                	jne    c00070c5 <Computer::handleNMI()+0x41>
c00070a8:	84 db                	test   bl,bl
c00070aa:	78 2d                	js     c00070d9 <Computer::handleNMI()+0x55>
c00070ac:	58                   	pop    eax
c00070ad:	5b                   	pop    ebx
c00070ae:	5e                   	pop    esi
c00070af:	c3                   	ret    
c00070b0:	83 ec 0c             	sub    esp,0xc
c00070b3:	68 60 ef 01 c0       	push   0xc001ef60
c00070b8:	e8 fe 92 00 00       	call   c00103bb <KePanic(char const*)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	f6 c3 40             	test   bl,0x40
c00070c3:	74 e3                	je     c00070a8 <Computer::handleNMI()+0x24>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 6d ef 01 c0       	push   0xc001ef6d
c00070cd:	e8 e9 92 00 00       	call   c00103bb <KePanic(char const*)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	84 db                	test   bl,bl
c00070d7:	79 d3                	jns    c00070ac <Computer::handleNMI()+0x28>
c00070d9:	c7 44 24 10 77 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ef77
c00070e1:	5a                   	pop    edx
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	e9 d2 92 00 00       	jmp    c00103bb <KePanic(char const*)>
c00070e9:	90                   	nop

c00070ea <GDTEntry::setBase(unsigned int)>:
c00070ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070f2:	89 c1                	mov    ecx,eax
c00070f4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070f8:	c1 e9 10             	shr    ecx,0x10
c00070fb:	c1 e8 18             	shr    eax,0x18
c00070fe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007101:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDTEntry::setLimit(unsigned int)>:
c0007106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000710a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000710e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007111:	66 89 01             	mov    WORD PTR [ecx],ax
c0007114:	83 e2 f0             	and    edx,0xfffffff0
c0007117:	c1 e8 10             	shr    eax,0x10
c000711a:	83 e0 0f             	and    eax,0xf
c000711d:	09 d0                	or     eax,edx
c000711f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007122:	c3                   	ret    
c0007123:	90                   	nop

c0007124 <GDT::GDT()>:
c0007124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007138:	90                   	nop
c0007139:	c3                   	ret    

c000713a <GDT::addEntry(GDTEntry)>:
c000713a:	53                   	push   ebx
c000713b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007143:	8b 02                	mov    eax,DWORD PTR [edx]
c0007145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007149:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000714d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007151:	8d 48 01             	lea    ecx,[eax+0x1]
c0007154:	c1 e0 03             	shl    eax,0x3
c0007157:	89 0a                	mov    DWORD PTR [edx],ecx
c0007159:	5b                   	pop    ebx
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <GDT::getNumberOfEntries()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 00                	mov    eax,DWORD PTR [eax]
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::flush()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8b 10                	mov    edx,DWORD PTR [eax]
c000716a:	83 c0 04             	add    eax,0x4
c000716d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007174:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007179:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007180:	e9 d5 91 ff ff       	jmp    c000035a <loadGDT>
c0007185:	90                   	nop

c0007186 <GDT::setup()>:
c0007186:	57                   	push   edi
c0007187:	56                   	push   esi
c0007188:	53                   	push   ebx
c0007189:	83 ec 30             	sub    esp,0x30
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	6a 00                	push   0x0
c0007192:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007196:	56                   	push   esi
c0007197:	e8 4e ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000719c:	6a 00                	push   0x0
c000719e:	56                   	push   esi
c000719f:	e8 62 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071a4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071b2:	56                   	push   esi
c00071b3:	e8 32 ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c00071b8:	68 ff ff ff 00       	push   0xffffff
c00071bd:	56                   	push   esi
c00071be:	e8 43 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071cf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071d3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071d8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071e5:	89 f8                	mov    eax,edi
c00071e7:	89 fa                	mov    edx,edi
c00071e9:	80 e4 f7             	and    ah,0xf7
c00071ec:	80 ce 60             	or     dh,0x60
c00071ef:	89 c7                	mov    edi,eax
c00071f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071f5:	80 cc 60             	or     ah,0x60
c00071f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00071fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007200:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007204:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000720c:	83 c4 20             	add    esp,0x20
c000720f:	6a 00                	push   0x0
c0007211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007215:	50                   	push   eax
c0007216:	e8 cf fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000721b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000721f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007223:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007228:	6a 00                	push   0x0
c000722a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000722e:	50                   	push   eax
c000722f:	e8 b6 fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0007234:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007239:	83 c4 0c             	add    esp,0xc
c000723c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007244:	53                   	push   ebx
c0007245:	e8 f0 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000724a:	83 c4 0c             	add    esp,0xc
c000724d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007255:	53                   	push   ebx
c0007256:	e8 df fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000725b:	83 c4 0c             	add    esp,0xc
c000725e:	57                   	push   edi
c000725f:	56                   	push   esi
c0007260:	53                   	push   ebx
c0007261:	e8 d4 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007266:	83 c4 0c             	add    esp,0xc
c0007269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000726d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007271:	53                   	push   ebx
c0007272:	e8 c3 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007277:	83 c4 0c             	add    esp,0xc
c000727a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000727e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007282:	53                   	push   ebx
c0007283:	e8 b2 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007288:	83 c4 0c             	add    esp,0xc
c000728b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000728f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007293:	53                   	push   ebx
c0007294:	e8 a1 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007299:	83 c4 0c             	add    esp,0xc
c000729c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a4:	53                   	push   ebx
c00072a5:	e8 90 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c00072aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072ad:	e8 b2 fe ff ff       	call   c0007164 <GDT::flush()>
c00072b2:	83 c4 40             	add    esp,0x40
c00072b5:	5b                   	pop    ebx
c00072b6:	5e                   	pop    esi
c00072b7:	5f                   	pop    edi
c00072b8:	c3                   	ret    

c00072b9 <idleFunction(void*)>:
c00072b9:	83 ec 0c             	sub    esp,0xc
c00072bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c1:	48                   	dec    eax
c00072c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072c7:	75 01                	jne    c00072ca <idleFunction(void*)+0x11>
c00072c9:	fb                   	sti    
c00072ca:	e8 38 ef 00 00       	call   c0016207 <HalSystemIdle()>
c00072cf:	e8 5e 6a 01 00       	call   c001dd32 <idleCommon()>
c00072d4:	eb f4                	jmp    c00072ca <idleFunction(void*)+0x11>
c00072d6:	66 90                	xchg   ax,ax

c00072d8 <IDTEntry::IDTEntry(bool)>:
c00072d8:	83 ec 04             	sub    esp,0x4
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	88 04 24             	mov    BYTE PTR [esp],al
c00072e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fb:	83 e2 f0             	and    edx,0xfffffff0
c00072fe:	83 ca 0e             	or     edx,0xe
c0007301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 ef             	and    edx,0xffffffef
c000730e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007315:	74 05                	je     c000731c <IDTEntry::IDTEntry(bool)+0x44>
c0007317:	b2 03                	mov    dl,0x3
c0007319:	eb 05                	jmp    c0007320 <IDTEntry::IDTEntry(bool)+0x48>
c000731b:	90                   	nop
c000731c:	b2 00                	mov    dl,0x0
c000731e:	66 90                	xchg   ax,ax
c0007320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007324:	83 e2 03             	and    edx,0x3
c0007327:	88 d1                	mov    cl,dl
c0007329:	c1 e1 05             	shl    ecx,0x5
c000732c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732f:	83 e2 9f             	and    edx,0xffffff9f
c0007332:	09 ca                	or     edx,ecx
c0007334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733e:	83 ca 80             	or     edx,0xffffff80
c0007341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007344:	90                   	nop
c0007345:	83 c4 04             	add    esp,0x4
c0007348:	c3                   	ret    
c0007349:	90                   	nop

c000734a <IDTEntry::setOffset(unsigned int)>:
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007352:	66 89 02             	mov    WORD PTR [edx],ax
c0007355:	c1 e8 10             	shr    eax,0x10
c0007358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000735c:	c3                   	ret    
c000735d:	90                   	nop
c000735e:	66 90                	xchg   ax,ax

c0007360 <IDT::IDT()>:
c0007360:	90                   	nop
c0007361:	c3                   	ret    

c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	83 c0 30             	add    eax,0x30
c0007369:	c3                   	ret    

c000736a <IDT::addEntry(IDTEntry, int)>:
c000736a:	53                   	push   ebx
c000736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000737b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000737e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007382:	5b                   	pop    ebx
c0007383:	c3                   	ret    

c0007384 <IDT::addEntry(int, void (*)(), bool)>:
c0007384:	53                   	push   ebx
c0007385:	83 ec 10             	sub    esp,0x10
c0007388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000738d:	50                   	push   eax
c000738e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007392:	53                   	push   ebx
c0007393:	e8 40 ff ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000739c:	53                   	push   ebx
c000739d:	e8 a8 ff ff ff       	call   c000734a <IDTEntry::setOffset(unsigned int)>
c00073a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073b2:	e8 b3 ff ff ff       	call   c000736a <IDT::addEntry(IDTEntry, int)>
c00073b7:	83 c4 30             	add    esp,0x30
c00073ba:	5b                   	pop    ebx
c00073bb:	c3                   	ret    

c00073bc <IDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073c9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073ce:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073d5:	c3                   	ret    

c00073d6 <IDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 10             	sub    esp,0x10
c00073dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e0:	6a 00                	push   0x0
c00073e2:	68 30 d4 01 c0       	push   0xc001d430
c00073e7:	6a 00                	push   0x0
c00073e9:	53                   	push   ebx
c00073ea:	e8 95 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073ef:	6a 00                	push   0x0
c00073f1:	68 40 d4 01 c0       	push   0xc001d440
c00073f6:	6a 01                	push   0x1
c00073f8:	53                   	push   ebx
c00073f9:	e8 86 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073fe:	83 c4 20             	add    esp,0x20
c0007401:	6a 00                	push   0x0
c0007403:	68 4a d4 01 c0       	push   0xc001d44a
c0007408:	6a 02                	push   0x2
c000740a:	53                   	push   ebx
c000740b:	e8 74 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007410:	6a 00                	push   0x0
c0007412:	68 54 d4 01 c0       	push   0xc001d454
c0007417:	6a 03                	push   0x3
c0007419:	53                   	push   ebx
c000741a:	e8 65 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000741f:	83 c4 20             	add    esp,0x20
c0007422:	6a 00                	push   0x0
c0007424:	68 5e d4 01 c0       	push   0xc001d45e
c0007429:	6a 04                	push   0x4
c000742b:	53                   	push   ebx
c000742c:	e8 53 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007431:	6a 00                	push   0x0
c0007433:	68 68 d4 01 c0       	push   0xc001d468
c0007438:	6a 05                	push   0x5
c000743a:	53                   	push   ebx
c000743b:	e8 44 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	6a 00                	push   0x0
c0007445:	68 72 d4 01 c0       	push   0xc001d472
c000744a:	6a 06                	push   0x6
c000744c:	53                   	push   ebx
c000744d:	e8 32 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007452:	6a 00                	push   0x0
c0007454:	68 7c d4 01 c0       	push   0xc001d47c
c0007459:	6a 07                	push   0x7
c000745b:	53                   	push   ebx
c000745c:	e8 23 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	6a 00                	push   0x0
c0007466:	68 86 d4 01 c0       	push   0xc001d486
c000746b:	6a 08                	push   0x8
c000746d:	53                   	push   ebx
c000746e:	e8 11 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007473:	6a 00                	push   0x0
c0007475:	68 8e d4 01 c0       	push   0xc001d48e
c000747a:	6a 09                	push   0x9
c000747c:	53                   	push   ebx
c000747d:	e8 02 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007482:	83 c4 20             	add    esp,0x20
c0007485:	6a 00                	push   0x0
c0007487:	68 98 d4 01 c0       	push   0xc001d498
c000748c:	6a 0a                	push   0xa
c000748e:	53                   	push   ebx
c000748f:	e8 f0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007494:	6a 00                	push   0x0
c0007496:	68 a0 d4 01 c0       	push   0xc001d4a0
c000749b:	6a 0b                	push   0xb
c000749d:	53                   	push   ebx
c000749e:	e8 e1 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074a3:	83 c4 20             	add    esp,0x20
c00074a6:	6a 00                	push   0x0
c00074a8:	68 a8 d4 01 c0       	push   0xc001d4a8
c00074ad:	6a 0c                	push   0xc
c00074af:	53                   	push   ebx
c00074b0:	e8 cf fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074b5:	6a 00                	push   0x0
c00074b7:	68 b0 d4 01 c0       	push   0xc001d4b0
c00074bc:	6a 0d                	push   0xd
c00074be:	53                   	push   ebx
c00074bf:	e8 c0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074c4:	83 c4 20             	add    esp,0x20
c00074c7:	6a 00                	push   0x0
c00074c9:	68 ca d4 01 c0       	push   0xc001d4ca
c00074ce:	6a 0e                	push   0xe
c00074d0:	53                   	push   ebx
c00074d1:	e8 ae fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074d6:	6a 00                	push   0x0
c00074d8:	68 d2 d4 01 c0       	push   0xc001d4d2
c00074dd:	6a 0f                	push   0xf
c00074df:	53                   	push   ebx
c00074e0:	e8 9f fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074e5:	83 c4 20             	add    esp,0x20
c00074e8:	6a 00                	push   0x0
c00074ea:	68 dc d4 01 c0       	push   0xc001d4dc
c00074ef:	6a 10                	push   0x10
c00074f1:	53                   	push   ebx
c00074f2:	e8 8d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074f7:	6a 00                	push   0x0
c00074f9:	68 e6 d4 01 c0       	push   0xc001d4e6
c00074fe:	6a 11                	push   0x11
c0007500:	53                   	push   ebx
c0007501:	e8 7e fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007506:	83 c4 20             	add    esp,0x20
c0007509:	6a 00                	push   0x0
c000750b:	68 f0 d4 01 c0       	push   0xc001d4f0
c0007510:	6a 12                	push   0x12
c0007512:	53                   	push   ebx
c0007513:	e8 6c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007518:	6a 01                	push   0x1
c000751a:	68 8a d5 01 c0       	push   0xc001d58a
c000751f:	6a 60                	push   0x60
c0007521:	53                   	push   ebx
c0007522:	e8 5d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007527:	83 c4 20             	add    esp,0x20
c000752a:	6a 00                	push   0x0
c000752c:	68 91 d5 01 c0       	push   0xc001d591
c0007531:	6a 20                	push   0x20
c0007533:	53                   	push   ebx
c0007534:	e8 4b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007539:	6a 00                	push   0x0
c000753b:	68 7c d5 01 c0       	push   0xc001d57c
c0007540:	6a 21                	push   0x21
c0007542:	53                   	push   ebx
c0007543:	e8 3c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007548:	83 c4 20             	add    esp,0x20
c000754b:	6a 00                	push   0x0
c000754d:	68 83 d5 01 c0       	push   0xc001d583
c0007552:	6a 22                	push   0x22
c0007554:	53                   	push   ebx
c0007555:	e8 2a fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000755a:	6a 00                	push   0x0
c000755c:	68 fa d4 01 c0       	push   0xc001d4fa
c0007561:	6a 23                	push   0x23
c0007563:	53                   	push   ebx
c0007564:	e8 1b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007569:	83 c4 20             	add    esp,0x20
c000756c:	6a 00                	push   0x0
c000756e:	68 04 d5 01 c0       	push   0xc001d504
c0007573:	6a 24                	push   0x24
c0007575:	53                   	push   ebx
c0007576:	e8 09 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000757b:	6a 00                	push   0x0
c000757d:	68 0e d5 01 c0       	push   0xc001d50e
c0007582:	6a 25                	push   0x25
c0007584:	53                   	push   ebx
c0007585:	e8 fa fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000758a:	83 c4 20             	add    esp,0x20
c000758d:	6a 00                	push   0x0
c000758f:	68 18 d5 01 c0       	push   0xc001d518
c0007594:	6a 26                	push   0x26
c0007596:	53                   	push   ebx
c0007597:	e8 e8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000759c:	6a 00                	push   0x0
c000759e:	68 22 d5 01 c0       	push   0xc001d522
c00075a3:	6a 27                	push   0x27
c00075a5:	53                   	push   ebx
c00075a6:	e8 d9 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ab:	83 c4 20             	add    esp,0x20
c00075ae:	6a 00                	push   0x0
c00075b0:	68 2c d5 01 c0       	push   0xc001d52c
c00075b5:	6a 28                	push   0x28
c00075b7:	53                   	push   ebx
c00075b8:	e8 c7 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075bd:	6a 00                	push   0x0
c00075bf:	68 36 d5 01 c0       	push   0xc001d536
c00075c4:	6a 29                	push   0x29
c00075c6:	53                   	push   ebx
c00075c7:	e8 b8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075cc:	83 c4 20             	add    esp,0x20
c00075cf:	6a 00                	push   0x0
c00075d1:	68 40 d5 01 c0       	push   0xc001d540
c00075d6:	6a 2a                	push   0x2a
c00075d8:	53                   	push   ebx
c00075d9:	e8 a6 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	6a 00                	push   0x0
c00075e0:	68 4a d5 01 c0       	push   0xc001d54a
c00075e5:	6a 2b                	push   0x2b
c00075e7:	53                   	push   ebx
c00075e8:	e8 97 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ed:	83 c4 20             	add    esp,0x20
c00075f0:	6a 00                	push   0x0
c00075f2:	68 54 d5 01 c0       	push   0xc001d554
c00075f7:	6a 2c                	push   0x2c
c00075f9:	53                   	push   ebx
c00075fa:	e8 85 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	6a 00                	push   0x0
c0007601:	68 5e d5 01 c0       	push   0xc001d55e
c0007606:	6a 2d                	push   0x2d
c0007608:	53                   	push   ebx
c0007609:	e8 76 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000760e:	83 c4 20             	add    esp,0x20
c0007611:	6a 00                	push   0x0
c0007613:	68 68 d5 01 c0       	push   0xc001d568
c0007618:	6a 2e                	push   0x2e
c000761a:	53                   	push   ebx
c000761b:	e8 64 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	6a 00                	push   0x0
c0007622:	68 72 d5 01 c0       	push   0xc001d572
c0007627:	6a 2f                	push   0x2f
c0007629:	53                   	push   ebx
c000762a:	e8 55 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000762f:	83 c4 20             	add    esp,0x20
c0007632:	6a 00                	push   0x0
c0007634:	68 cc d6 01 c0       	push   0xc001d6cc
c0007639:	6a 30                	push   0x30
c000763b:	53                   	push   ebx
c000763c:	e8 43 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	6a 00                	push   0x0
c0007643:	68 d6 d6 01 c0       	push   0xc001d6d6
c0007648:	6a 31                	push   0x31
c000764a:	53                   	push   ebx
c000764b:	e8 34 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007650:	83 c4 20             	add    esp,0x20
c0007653:	6a 00                	push   0x0
c0007655:	68 e0 d6 01 c0       	push   0xc001d6e0
c000765a:	6a 32                	push   0x32
c000765c:	53                   	push   ebx
c000765d:	e8 22 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	6a 00                	push   0x0
c0007664:	68 ea d6 01 c0       	push   0xc001d6ea
c0007669:	6a 33                	push   0x33
c000766b:	53                   	push   ebx
c000766c:	e8 13 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007671:	83 c4 20             	add    esp,0x20
c0007674:	6a 00                	push   0x0
c0007676:	68 f4 d6 01 c0       	push   0xc001d6f4
c000767b:	6a 34                	push   0x34
c000767d:	53                   	push   ebx
c000767e:	e8 01 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	6a 00                	push   0x0
c0007685:	68 fe d6 01 c0       	push   0xc001d6fe
c000768a:	6a 35                	push   0x35
c000768c:	53                   	push   ebx
c000768d:	e8 f2 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007692:	83 c4 20             	add    esp,0x20
c0007695:	6a 00                	push   0x0
c0007697:	68 08 d7 01 c0       	push   0xc001d708
c000769c:	6a 36                	push   0x36
c000769e:	53                   	push   ebx
c000769f:	e8 e0 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	6a 00                	push   0x0
c00076a6:	68 12 d7 01 c0       	push   0xc001d712
c00076ab:	6a 37                	push   0x37
c00076ad:	53                   	push   ebx
c00076ae:	e8 d1 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076b3:	83 c4 1c             	add    esp,0x1c
c00076b6:	6a 03                	push   0x3
c00076b8:	6a 02                	push   0x2
c00076ba:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c0:	e8 3f 24 00 00       	call   c0009b04 <VAS::allocatePages(int, int)>
c00076c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076cc:	89 c6                	mov    esi,eax
c00076ce:	e8 92 01 00 00       	call   c0007865 <malloc>
c00076d3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076dc:	89 c7                	mov    edi,eax
c00076de:	e8 9d 15 00 00       	call   c0008c80 <TSS::TSS()>
c00076e3:	83 c4 0c             	add    esp,0xc
c00076e6:	68 86 d4 01 c0       	push   0xc001d486
c00076eb:	56                   	push   esi
c00076ec:	57                   	push   edi
c00076ed:	e8 d2 15 00 00       	call   c0008cc4 <TSS::setup(unsigned long, unsigned long)>
c00076f2:	89 c6                	mov    esi,eax
c00076f4:	58                   	pop    eax
c00076f5:	5a                   	pop    edx
c00076f6:	6a 00                	push   0x0
c00076f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076fc:	50                   	push   eax
c00076fd:	e8 d6 fb ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000770b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000771c:	80 ce 05             	or     dh,0x5
c000771f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000772a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000772d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007730:	e8 87 fc ff ff       	call   c00073bc <IDT::flush()>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	5b                   	pop    ebx
c0007739:	5e                   	pop    esi
c000773a:	5f                   	pop    edi
c000773b:	c3                   	ret    

c000773c <sbrk>:
c000773c:	55                   	push   ebp
c000773d:	57                   	push   edi
c000773e:	56                   	push   esi
c000773f:	53                   	push   ebx
c0007740:	83 ec 1c             	sub    esp,0x1c
c0007743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007747:	85 c0                	test   eax,eax
c0007749:	74 5f                	je     c00077aa <sbrk+0x6e>
c000774b:	78 64                	js     c00077b1 <sbrk+0x75>
c000774d:	8b 15 2c 12 02 c0    	mov    edx,DWORD PTR ds:0xc002122c
c0007753:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007757:	05 ff 0f 00 00       	add    eax,0xfff
c000775c:	89 c5                	mov    ebp,eax
c000775e:	78 69                	js     c00077c9 <sbrk+0x8d>
c0007760:	c1 fd 0c             	sar    ebp,0xc
c0007763:	bb 00 00 00 00       	mov    ebx,0x0
c0007768:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000776e:	8b 3d 2c 12 02 c0    	mov    edi,DWORD PTR ds:0xc002122c
c0007774:	e8 c8 03 00 00       	call   c0007b41 <Phys::allocatePage()>
c0007779:	68 01 04 00 00       	push   0x401
c000777e:	57                   	push   edi
c000777f:	50                   	push   eax
c0007780:	56                   	push   esi
c0007781:	e8 7a 22 00 00       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007786:	81 05 2c 12 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002122c,0x1000
c0007790:	43                   	inc    ebx
c0007791:	83 c4 10             	add    esp,0x10
c0007794:	39 dd                	cmp    ebp,ebx
c0007796:	75 d0                	jne    c0007768 <sbrk+0x2c>
c0007798:	0f 20 d8             	mov    eax,cr3
c000779b:	0f 22 d8             	mov    cr3,eax
c000779e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077a2:	83 c4 1c             	add    esp,0x1c
c00077a5:	5b                   	pop    ebx
c00077a6:	5e                   	pop    esi
c00077a7:	5f                   	pop    edi
c00077a8:	5d                   	pop    ebp
c00077a9:	c3                   	ret    
c00077aa:	a1 2c 12 02 c0       	mov    eax,ds:0xc002122c
c00077af:	eb f1                	jmp    c00077a2 <sbrk+0x66>
c00077b1:	83 ec 08             	sub    esp,0x8
c00077b4:	50                   	push   eax
c00077b5:	68 18 f0 01 c0       	push   0xc001f018
c00077ba:	e8 3b 2e 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00077bf:	83 c4 10             	add    esp,0x10
c00077c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077c7:	eb d9                	jmp    c00077a2 <sbrk+0x66>
c00077c9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077cf:	eb 8f                	jmp    c0007760 <sbrk+0x24>

c00077d1 <mmap>:
c00077d1:	83 ec 18             	sub    esp,0x18
c00077d4:	68 48 f0 01 c0       	push   0xc001f048
c00077d9:	e8 dd 8b 00 00       	call   c00103bb <KePanic(char const*)>
c00077de:	b8 00 00 00 00       	mov    eax,0x0
c00077e3:	83 c4 1c             	add    esp,0x1c
c00077e6:	c3                   	ret    

c00077e7 <munmap>:
c00077e7:	83 ec 18             	sub    esp,0x18
c00077ea:	68 4d f0 01 c0       	push   0xc001f04d
c00077ef:	e8 c7 8b 00 00       	call   c00103bb <KePanic(char const*)>
c00077f4:	b8 00 00 00 00       	mov    eax,0x0
c00077f9:	83 c4 1c             	add    esp,0x1c
c00077fc:	c3                   	ret    

c00077fd <liballoc_lock()>:
c00077fd:	fa                   	cli    
c00077fe:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	c3                   	ret    

c000780a <liballoc_unlock()>:
c000780a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000780f:	48                   	dec    eax
c0007810:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007815:	75 01                	jne    c0007818 <liballoc_unlock()+0xe>
c0007817:	fb                   	sti    
c0007818:	b8 00 00 00 00       	mov    eax,0x0
c000781d:	c3                   	ret    

c000781e <liballoc_alloc(int)>:
c000781e:	83 ec 10             	sub    esp,0x10
c0007821:	6a 01                	push   0x1
c0007823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007827:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000782d:	e8 d2 22 00 00       	call   c0009b04 <VAS::allocatePages(int, int)>
c0007832:	83 c4 1c             	add    esp,0x1c
c0007835:	c3                   	ret    

c0007836 <liballoc_free(void*, int)>:
c0007836:	83 ec 14             	sub    esp,0x14
c0007839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007843:	e8 0e 1f 00 00       	call   c0009756 <VAS::freeAllocatedPages(unsigned long)>
c0007848:	b8 00 00 00 00       	mov    eax,0x0
c000784d:	83 c4 1c             	add    esp,0x1c
c0007850:	c3                   	ret    

c0007851 <realloc>:
c0007851:	83 ec 14             	sub    esp,0x14
c0007854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000785c:	e8 c0 9c ff ff       	call   c0001521 <dlrealloc>
c0007861:	83 c4 1c             	add    esp,0x1c
c0007864:	c3                   	ret    

c0007865 <malloc>:
c0007865:	83 ec 18             	sub    esp,0x18
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 73 97 ff ff       	call   c0000fe4 <dlmalloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <free>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 08 94 ff ff       	call   c0000c89 <dlfree>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <rfree>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 f8 93 ff ff       	call   c0000c89 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <calloc>:
c0007895:	56                   	push   esi
c0007896:	53                   	push   ebx
c0007897:	83 ec 10             	sub    esp,0x10
c000789a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000789e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078a3:	53                   	push   ebx
c00078a4:	e8 bc ff ff ff       	call   c0007865 <malloc>
c00078a9:	89 c6                	mov    esi,eax
c00078ab:	83 c4 0c             	add    esp,0xc
c00078ae:	53                   	push   ebx
c00078af:	6a 00                	push   0x0
c00078b1:	50                   	push   eax
c00078b2:	e8 09 8c ff ff       	call   c00004c0 <memset>
c00078b7:	89 f0                	mov    eax,esi
c00078b9:	83 c4 14             	add    esp,0x14
c00078bc:	5b                   	pop    ebx
c00078bd:	5e                   	pop    esi
c00078be:	c3                   	ret    

c00078bf <KeEntryPoint>:
c00078bf:	57                   	push   edi
c00078c0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078c5:	56                   	push   esi
c00078c6:	89 fa                	mov    edx,edi
c00078c8:	53                   	push   ebx
c00078c9:	31 f6                	xor    esi,esi
c00078cb:	83 ec 2c             	sub    esp,0x2c
c00078ce:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078d3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078d8:	89 f0                	mov    eax,esi
c00078da:	ee                   	out    dx,al
c00078db:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078e0:	b0 80                	mov    al,0x80
c00078e2:	89 da                	mov    edx,ebx
c00078e4:	ee                   	out    dx,al
c00078e5:	b1 03                	mov    cl,0x3
c00078e7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078ec:	88 c8                	mov    al,cl
c00078ee:	ee                   	out    dx,al
c00078ef:	89 f0                	mov    eax,esi
c00078f1:	89 fa                	mov    edx,edi
c00078f3:	ee                   	out    dx,al
c00078f4:	88 c8                	mov    al,cl
c00078f6:	89 da                	mov    edx,ebx
c00078f8:	ee                   	out    dx,al
c00078f9:	b0 c7                	mov    al,0xc7
c00078fb:	ba fa 03 00 00       	mov    edx,0x3fa
c0007900:	ee                   	out    dx,al
c0007901:	b0 0b                	mov    al,0xb
c0007903:	ba fc 03 00 00       	mov    edx,0x3fc
c0007908:	ee                   	out    dx,al
c0007909:	68 54 f0 01 c0       	push   0xc001f054
c000790e:	e8 e7 2c 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007913:	e8 bd 83 00 00       	call   c000fcd5 <KeDisplaySplashScreen()>
c0007918:	a1 24 05 00 00       	mov    eax,ds:0x524
c000791d:	05 ff 0f 00 00       	add    eax,0xfff
c0007922:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007927:	89 04 24             	mov    DWORD PTR [esp],eax
c000792a:	e8 64 03 00 00       	call   c0007c93 <Phys::physicalMemorySetup(unsigned int)>
c000792f:	e8 c8 1b 00 00       	call   c00094fc <Virt::virtualMemorySetup()>
c0007934:	58                   	pop    eax
c0007935:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007939:	53                   	push   ebx
c000793a:	e8 95 1e 00 00       	call   c00097d4 <VAS::VAS()>
c000793f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007945:	e8 80 63 01 00       	call   c001dcca <_init>
c000794a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007951:	e8 0f ff ff ff       	call   c0007865 <malloc>
c0007956:	89 04 24             	mov    DWORD PTR [esp],eax
c0007959:	89 c6                	mov    esi,eax
c000795b:	e8 7c f2 ff ff       	call   c0006bdc <Computer::Computer()>
c0007960:	6a 00                	push   0x0
c0007962:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007968:	6a 00                	push   0x0
c000796a:	6a 00                	push   0x0
c000796c:	56                   	push   esi
c000796d:	e8 10 f6 ff ff       	call   c0006f82 <Computer::open(int, int, void*)>
c0007972:	83 c4 14             	add    esp,0x14
c0007975:	53                   	push   ebx
c0007976:	e8 21 1f 00 00       	call   c000989c <VAS::~VAS()>
c000797b:	83 c4 30             	add    esp,0x30
c000797e:	5b                   	pop    ebx
c000797f:	5e                   	pop    esi
c0007980:	5f                   	pop    edi
c0007981:	c3                   	ret    

c0007982 <Phys::allocateDMA(unsigned long)>:
c0007982:	55                   	push   ebp
c0007983:	31 ed                	xor    ebp,ebp
c0007985:	57                   	push   edi
c0007986:	56                   	push   esi
c0007987:	53                   	push   ebx
c0007988:	31 db                	xor    ebx,ebx
c000798a:	83 ec 1c             	sub    esp,0x1c
c000798d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007991:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007999:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000799f:	31 c0                	xor    eax,eax
c00079a1:	c1 ef 0c             	shr    edi,0xc
c00079a4:	eb 19                	jmp    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079a6:	85 c0                	test   eax,eax
c00079a8:	75 06                	jne    c00079b0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079ae:	89 dd                	mov    ebp,ebx
c00079b0:	8d 70 01             	lea    esi,[eax+0x1]
c00079b3:	39 f7                	cmp    edi,esi
c00079b5:	74 33                	je     c00079ea <Phys::allocateDMA(unsigned long)+0x68>
c00079b7:	89 f0                	mov    eax,esi
c00079b9:	43                   	inc    ebx
c00079ba:	83 fb 0f             	cmp    ebx,0xf
c00079bd:	7f 11                	jg     c00079d0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079bf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079c6:	74 de                	je     c00079a6 <Phys::allocateDMA(unsigned long)+0x24>
c00079c8:	31 c0                	xor    eax,eax
c00079ca:	43                   	inc    ebx
c00079cb:	83 fb 0f             	cmp    ebx,0xf
c00079ce:	7e ef                	jle    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079d0:	83 ec 0c             	sub    esp,0xc
c00079d3:	68 6c f0 01 c0       	push   0xc001f06c
c00079d8:	e8 de 89 00 00       	call   c00103bb <KePanic(char const*)>
c00079dd:	83 c4 10             	add    esp,0x10
c00079e0:	31 c0                	xor    eax,eax
c00079e2:	83 c4 1c             	add    esp,0x1c
c00079e5:	5b                   	pop    ebx
c00079e6:	5e                   	pop    esi
c00079e7:	5f                   	pop    edi
c00079e8:	5d                   	pop    ebp
c00079e9:	c3                   	ret    
c00079ea:	89 e9                	mov    ecx,ebp
c00079ec:	c1 f9 04             	sar    ecx,0x4
c00079ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079f3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079f7:	89 ca                	mov    edx,ecx
c00079f9:	4a                   	dec    edx
c00079fa:	79 03                	jns    c00079ff <Phys::allocateDMA(unsigned long)+0x7d>
c00079fc:	8d 51 0e             	lea    edx,[ecx+0xe]
c00079ff:	c1 fa 04             	sar    edx,0x4
c0007a02:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a06:	74 08                	je     c0007a10 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a0c:	31 c0                	xor    eax,eax
c0007a0e:	eb ba                	jmp    c00079ca <Phys::allocateDMA(unsigned long)+0x48>
c0007a10:	85 f6                	test   esi,esi
c0007a12:	74 15                	je     c0007a29 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a14:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a1a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a21:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a24:	42                   	inc    edx
c0007a25:	39 d0                	cmp    eax,edx
c0007a27:	75 f8                	jne    c0007a21 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a29:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a33:	85 c0                	test   eax,eax
c0007a35:	74 17                	je     c0007a4e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a37:	83 ec 0c             	sub    esp,0xc
c0007a3a:	68 6c f0 01 c0       	push   0xc001f06c
c0007a3f:	e8 77 89 00 00       	call   c00103bb <KePanic(char const*)>
c0007a44:	83 c4 10             	add    esp,0x10
c0007a47:	89 f0                	mov    eax,esi
c0007a49:	e9 6b ff ff ff       	jmp    c00079b9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a4e:	c1 e5 0c             	shl    ebp,0xc
c0007a51:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a57:	eb 89                	jmp    c00079e2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a67:	c1 ea 0c             	shr    edx,0xc
c0007a6a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a6f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a75:	c1 e8 0c             	shr    eax,0xc
c0007a78:	85 d2                	test   edx,edx
c0007a7a:	74 0f                	je     c0007a8b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a7c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a81:	01 c2                	add    edx,eax
c0007a83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a86:	40                   	inc    eax
c0007a87:	39 d0                	cmp    eax,edx
c0007a89:	75 f8                	jne    c0007a83 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a8b:	c3                   	ret    

c0007a8c <Phys::setPageState(unsigned long, bool)>:
c0007a8c:	56                   	push   esi
c0007a8d:	ba 01 00 00 00       	mov    edx,0x1
c0007a92:	53                   	push   ebx
c0007a93:	8b 35 30 12 02 c0    	mov    esi,DWORD PTR ds:0xc0021230
c0007a99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa1:	89 c8                	mov    eax,ecx
c0007aa3:	83 e1 07             	and    ecx,0x7
c0007aa6:	c1 e8 03             	shr    eax,0x3
c0007aa9:	d3 e3                	shl    ebx,cl
c0007aab:	01 c6                	add    esi,eax
c0007aad:	d3 e2                	shl    edx,cl
c0007aaf:	f7 d2                	not    edx
c0007ab1:	20 16                	and    BYTE PTR [esi],dl
c0007ab3:	03 05 30 12 02 c0    	add    eax,DWORD PTR ds:0xc0021230
c0007ab9:	08 18                	or     BYTE PTR [eax],bl
c0007abb:	5b                   	pop    ebx
c0007abc:	5e                   	pop    esi
c0007abd:	c3                   	ret    

c0007abe <Phys::getPageState(unsigned long)>:
c0007abe:	53                   	push   ebx
c0007abf:	8b 15 30 12 02 c0    	mov    edx,DWORD PTR ds:0xc0021230
c0007ac5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ac9:	31 db                	xor    ebx,ebx
c0007acb:	89 c8                	mov    eax,ecx
c0007acd:	83 e1 07             	and    ecx,0x7
c0007ad0:	c1 e8 03             	shr    eax,0x3
c0007ad3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ad6:	89 d8                	mov    eax,ebx
c0007ad8:	5b                   	pop    ebx
c0007ad9:	d3 f8                	sar    eax,cl
c0007adb:	83 e0 01             	and    eax,0x1
c0007ade:	c3                   	ret    

c0007adf <Phys::freePage(unsigned long)>:
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 08             	sub    esp,0x8
c0007ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ae7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007af3:	76 3a                	jbe    c0007b2f <Phys::freePage(unsigned long)+0x50>
c0007af5:	c1 e8 0c             	shr    eax,0xc
c0007af8:	50                   	push   eax
c0007af9:	89 c3                	mov    ebx,eax
c0007afb:	e8 be ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b00:	5a                   	pop    edx
c0007b01:	84 c0                	test   al,al
c0007b03:	74 19                	je     c0007b1e <Phys::freePage(unsigned long)+0x3f>
c0007b05:	83 ec 08             	sub    esp,0x8
c0007b08:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b0e:	6a 00                	push   0x0
c0007b10:	53                   	push   ebx
c0007b11:	e8 76 ff ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007b16:	83 c4 10             	add    esp,0x10
c0007b19:	83 c4 08             	add    esp,0x8
c0007b1c:	5b                   	pop    ebx
c0007b1d:	c3                   	ret    
c0007b1e:	c7 44 24 10 11 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f111
c0007b26:	83 c4 08             	add    esp,0x8
c0007b29:	5b                   	pop    ebx
c0007b2a:	e9 8c 88 00 00       	jmp    c00103bb <KePanic(char const*)>
c0007b2f:	68 00 10 00 00       	push   0x1000
c0007b34:	50                   	push   eax
c0007b35:	e8 1f ff ff ff       	call   c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b3a:	59                   	pop    ecx
c0007b3b:	5b                   	pop    ebx
c0007b3c:	83 c4 08             	add    esp,0x8
c0007b3f:	5b                   	pop    ebx
c0007b40:	c3                   	ret    

c0007b41 <Phys::allocatePage()>:
c0007b41:	56                   	push   esi
c0007b42:	53                   	push   ebx
c0007b43:	83 ec 14             	sub    esp,0x14
c0007b46:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b4c:	89 f3                	mov    ebx,esi
c0007b4e:	eb 0a                	jmp    c0007b5a <Phys::allocatePage()+0x19>
c0007b50:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b56:	39 de                	cmp    esi,ebx
c0007b58:	74 24                	je     c0007b7e <Phys::allocatePage()+0x3d>
c0007b5a:	53                   	push   ebx
c0007b5b:	e8 5e ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b60:	5a                   	pop    edx
c0007b61:	84 c0                	test   al,al
c0007b63:	74 5f                	je     c0007bc4 <Phys::allocatePage()+0x83>
c0007b65:	43                   	inc    ebx
c0007b66:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b6c:	75 e2                	jne    c0007b50 <Phys::allocatePage()+0xf>
c0007b6e:	31 db                	xor    ebx,ebx
c0007b70:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b7a:	39 de                	cmp    esi,ebx
c0007b7c:	75 dc                	jne    c0007b5a <Phys::allocatePage()+0x19>
c0007b7e:	83 ec 0c             	sub    esp,0xc
c0007b81:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b96:	50                   	push   eax
c0007b97:	e8 42 27 00 00       	call   c000a2de <VAS::scanForEviction()>
c0007b9c:	83 c4 10             	add    esp,0x10
c0007b9f:	85 c0                	test   eax,eax
c0007ba1:	75 3f                	jne    c0007be2 <Phys::allocatePage()+0xa1>
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	68 94 f0 01 c0       	push   0xc001f094
c0007bab:	e8 0b 88 00 00       	call   c00103bb <KePanic(char const*)>
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bb9:	53                   	push   ebx
c0007bba:	e8 ff fe ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007bbf:	5a                   	pop    edx
c0007bc0:	84 c0                	test   al,al
c0007bc2:	75 a1                	jne    c0007b65 <Phys::allocatePage()+0x24>
c0007bc4:	6a 01                	push   0x1
c0007bc6:	53                   	push   ebx
c0007bc7:	e8 c0 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bcc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bd1:	5a                   	pop    edx
c0007bd2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007bd8:	c1 e0 0c             	shl    eax,0xc
c0007bdb:	59                   	pop    ecx
c0007bdc:	83 c4 14             	add    esp,0x14
c0007bdf:	5b                   	pop    ebx
c0007be0:	5e                   	pop    esi
c0007be1:	c3                   	ret    
c0007be2:	83 ec 08             	sub    esp,0x8
c0007be5:	89 c2                	mov    edx,eax
c0007be7:	6a 01                	push   0x1
c0007be9:	c1 ea 0c             	shr    edx,0xc
c0007bec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf0:	52                   	push   edx
c0007bf1:	e8 96 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bf6:	83 c4 10             	add    esp,0x10
c0007bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bfd:	eb dd                	jmp    c0007bdc <Phys::allocatePage()+0x9b>

c0007bff <Phys::allocateContiguousPages(int)>:
c0007bff:	57                   	push   edi
c0007c00:	56                   	push   esi
c0007c01:	53                   	push   ebx
c0007c02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c06:	fa                   	cli    
c0007c07:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	85 db                	test   ebx,ebx
c0007c11:	75 11                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c13:	e8 29 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c18:	83 fe 01             	cmp    esi,0x1
c0007c1b:	89 c7                	mov    edi,eax
c0007c1d:	74 21                	je     c0007c40 <Phys::allocateContiguousPages(int)+0x41>
c0007c1f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c24:	e8 18 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c29:	89 da                	mov    edx,ebx
c0007c2b:	c1 e2 0c             	shl    edx,0xc
c0007c2e:	01 fa                	add    edx,edi
c0007c30:	39 c2                	cmp    edx,eax
c0007c32:	74 20                	je     c0007c54 <Phys::allocateContiguousPages(int)+0x55>
c0007c34:	bb 01 00 00 00       	mov    ebx,0x1
c0007c39:	89 c7                	mov    edi,eax
c0007c3b:	83 fe 01             	cmp    esi,0x1
c0007c3e:	75 e4                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c45:	48                   	dec    eax
c0007c46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c4b:	75 01                	jne    c0007c4e <Phys::allocateContiguousPages(int)+0x4f>
c0007c4d:	fb                   	sti    
c0007c4e:	89 f8                	mov    eax,edi
c0007c50:	5b                   	pop    ebx
c0007c51:	5e                   	pop    esi
c0007c52:	5f                   	pop    edi
c0007c53:	c3                   	ret    
c0007c54:	43                   	inc    ebx
c0007c55:	39 f3                	cmp    ebx,esi
c0007c57:	75 b6                	jne    c0007c0f <Phys::allocateContiguousPages(int)+0x10>
c0007c59:	eb e5                	jmp    c0007c40 <Phys::allocateContiguousPages(int)+0x41>

c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c5b:	56                   	push   esi
c0007c5c:	53                   	push   ebx
c0007c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c61:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c67:	73 06                	jae    c0007c6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c69:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c73:	c1 eb 0c             	shr    ebx,0xc
c0007c76:	c1 e8 0c             	shr    eax,0xc
c0007c79:	39 d8                	cmp    eax,ebx
c0007c7b:	73 13                	jae    c0007c90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c7d:	6a 00                	push   0x0
c0007c7f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c82:	50                   	push   eax
c0007c83:	e8 04 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007c88:	5a                   	pop    edx
c0007c89:	89 f0                	mov    eax,esi
c0007c8b:	59                   	pop    ecx
c0007c8c:	39 f3                	cmp    ebx,esi
c0007c8e:	75 ed                	jne    c0007c7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c90:	5b                   	pop    ebx
c0007c91:	5e                   	pop    esi
c0007c92:	c3                   	ret    

c0007c93 <Phys::physicalMemorySetup(unsigned int)>:
c0007c93:	55                   	push   ebp
c0007c94:	57                   	push   edi
c0007c95:	56                   	push   esi
c0007c96:	53                   	push   ebx
c0007c97:	31 db                	xor    ebx,ebx
c0007c99:	83 ec 40             	sub    esp,0x40
c0007c9c:	6a 10                	push   0x10
c0007c9e:	6a 00                	push   0x0
c0007ca0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007ca5:	e8 16 88 ff ff       	call   c00004c0 <memset>
c0007caa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cb3:	05 00 10 00 00       	add    eax,0x1000
c0007cb8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007cbc:	5a                   	pop    edx
c0007cbd:	59                   	pop    ecx
c0007cbe:	50                   	push   eax
c0007cbf:	68 27 f1 01 c0       	push   0xc001f127
c0007cc4:	e8 31 29 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	83 ec 08             	sub    esp,0x8
c0007ccf:	6a 01                	push   0x1
c0007cd1:	53                   	push   ebx
c0007cd2:	43                   	inc    ebx
c0007cd3:	e8 b4 fd ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007cd8:	83 c4 10             	add    esp,0x10
c0007cdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ce1:	75 e9                	jne    c0007ccc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007ce3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007ce9:	66 85 c0             	test   ax,ax
c0007cec:	0f 84 97 01 00 00    	je     c0007e89 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cf2:	89 c7                	mov    edi,eax
c0007cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007cfc:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d02:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d07:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d0b:	eb 15                	jmp    c0007d22 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d11:	83 c3 18             	add    ebx,0x18
c0007d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d18:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d1c:	0f 84 77 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d33:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d35:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d38:	01 f0                	add    eax,esi
c0007d3a:	55                   	push   ebp
c0007d3b:	11 fa                	adc    edx,edi
c0007d3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d49:	50                   	push   eax
c0007d4a:	56                   	push   esi
c0007d4b:	68 c4 f0 01 c0       	push   0xc001f0c4
c0007d50:	e8 a5 28 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d59:	83 c4 10             	add    esp,0x10
c0007d5c:	09 f8                	or     eax,edi
c0007d5e:	0f 85 35 01 00 00    	jne    c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d64:	4d                   	dec    ebp
c0007d65:	75 a6                	jne    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d6b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d70:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d74:	39 f2                	cmp    edx,esi
c0007d76:	89 c1                	mov    ecx,eax
c0007d78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d80:	19 f9                	sbb    ecx,edi
c0007d82:	0f 82 a7 00 00 00    	jb     c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d88:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d8c:	89 c1                	mov    ecx,eax
c0007d8e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d92:	0f 83 97 00 00 00    	jae    c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007da1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007da5:	39 fa                	cmp    edx,edi
c0007da7:	19 e8                	sbb    eax,ebp
c0007da9:	0f 82 9a 01 00 00    	jb     c0007f49 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007daf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dbd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dc2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dc5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dc9:	31 c0                	xor    eax,eax
c0007dcb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007dcf:	39 fa                	cmp    edx,edi
c0007dd1:	89 c1                	mov    ecx,eax
c0007dd3:	19 e9                	sbb    ecx,ebp
c0007dd5:	0f 83 32 ff ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ddb:	be 00 00 08 00       	mov    esi,0x80000
c0007de0:	51                   	push   ecx
c0007de1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007de5:	57                   	push   edi
c0007de6:	56                   	push   esi
c0007de7:	68 e8 f0 01 c0       	push   0xc001f0e8
c0007dec:	e8 09 28 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007df1:	5d                   	pop    ebp
c0007df2:	58                   	pop    eax
c0007df3:	57                   	push   edi
c0007df4:	56                   	push   esi
c0007df5:	e8 61 fe ff ff       	call   c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007dfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e02:	83 c4 0c             	add    esp,0xc
c0007e05:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e09:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e16:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e1b:	52                   	push   edx
c0007e1c:	50                   	push   eax
c0007e1d:	68 4d f1 01 c0       	push   0xc001f14d
c0007e22:	e8 d3 27 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007e27:	83 c4 10             	add    esp,0x10
c0007e2a:	e9 de fe ff ff       	jmp    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e2f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e3b:	39 ea                	cmp    edx,ebp
c0007e3d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e41:	0f 82 c6 fe ff ff    	jb     c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e47:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e4c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e50:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e54:	0f 83 b3 fe ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e5a:	39 ee                	cmp    esi,ebp
c0007e5c:	89 f8                	mov    eax,edi
c0007e5e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e62:	0f 83 78 ff ff ff    	jae    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e70:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e74:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e78:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e84:	e9 57 ff ff ff       	jmp    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 3f f1 01 c0       	push   0xc001f13f
c0007e91:	e8 25 85 00 00       	call   c00103bb <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	83 ec 08             	sub    esp,0x8
c0007e9c:	bb 60 00 00 00       	mov    ebx,0x60
c0007ea1:	6a 00                	push   0x0
c0007ea3:	6a 06                	push   0x6
c0007ea5:	e8 e2 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eaa:	58                   	pop    eax
c0007eab:	5a                   	pop    edx
c0007eac:	6a 00                	push   0x0
c0007eae:	6a 07                	push   0x7
c0007eb0:	e8 d7 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ebc:	83 c4 10             	add    esp,0x10
c0007ebf:	83 ec 08             	sub    esp,0x8
c0007ec2:	6a 00                	push   0x0
c0007ec4:	53                   	push   ebx
c0007ec5:	43                   	inc    ebx
c0007ec6:	e8 c1 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ecb:	83 c4 10             	add    esp,0x10
c0007ece:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ed4:	75 e9                	jne    c0007ebf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ed6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007edb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ee0:	83 c0 20             	add    eax,0x20
c0007ee3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ee8:	eb 22                	jmp    c0007f0c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007eea:	83 ec 08             	sub    esp,0x8
c0007eed:	6a 00                	push   0x0
c0007eef:	53                   	push   ebx
c0007ef0:	43                   	inc    ebx
c0007ef1:	e8 96 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ef6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007efb:	83 c4 10             	add    esp,0x10
c0007efe:	40                   	inc    eax
c0007eff:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f05:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f0a:	74 07                	je     c0007f13 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f0c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f11:	7e d7                	jle    c0007eea <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f13:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f18:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f1d:	7f 22                	jg     c0007f41 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f1f:	83 ec 08             	sub    esp,0x8
c0007f22:	6a 00                	push   0x0
c0007f24:	53                   	push   ebx
c0007f25:	43                   	inc    ebx
c0007f26:	e8 61 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007f2b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f30:	83 c4 10             	add    esp,0x10
c0007f33:	40                   	inc    eax
c0007f34:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f3a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f3f:	75 d7                	jne    c0007f18 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f41:	83 c4 3c             	add    esp,0x3c
c0007f44:	5b                   	pop    ebx
c0007f45:	5e                   	pop    esi
c0007f46:	5f                   	pop    edi
c0007f47:	5d                   	pop    ebp
c0007f48:	c3                   	ret    
c0007f49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f59:	e9 51 fe ff ff       	jmp    c0007daf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f5e <Pipe::isAtty()>:
c0007f5e:	31 c0                	xor    eax,eax
c0007f60:	c3                   	ret    
c0007f61:	90                   	nop

c0007f62 <Pipe::~Pipe()>:
c0007f62:	83 ec 0c             	sub    esp,0xc
c0007f65:	ba ac f1 01 c0       	mov    edx,0xc001f1ac
c0007f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6e:	89 10                	mov    DWORD PTR [eax],edx
c0007f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f74:	83 ec 0c             	sub    esp,0xc
c0007f77:	50                   	push   eax
c0007f78:	e8 5f 11 00 00       	call   c00090dc <UnixFile::~UnixFile()>
c0007f7d:	83 c4 10             	add    esp,0x10
c0007f80:	90                   	nop
c0007f81:	83 c4 0c             	add    esp,0xc
c0007f84:	c3                   	ret    
c0007f85:	90                   	nop

c0007f86 <Pipe::~Pipe()>:
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	83 ec 0c             	sub    esp,0xc
c0007f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f90:	e8 cd ff ff ff       	call   c0007f62 <Pipe::~Pipe()>
c0007f95:	83 c4 10             	add    esp,0x10
c0007f98:	83 ec 08             	sub    esp,0x8
c0007f9b:	6a 20                	push   0x20
c0007f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa1:	e8 5e 25 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c0007fa6:	83 c4 10             	add    esp,0x10
c0007fa9:	83 c4 0c             	add    esp,0xc
c0007fac:	c3                   	ret    
c0007fad:	90                   	nop

c0007fae <Pipe::write(unsigned long long, void*, int*)>:
c0007fae:	55                   	push   ebp
c0007faf:	57                   	push   edi
c0007fb0:	56                   	push   esi
c0007fb1:	53                   	push   ebx
c0007fb2:	83 ec 1c             	sub    esp,0x1c
c0007fb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fbd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fc0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fcb:	89 d8                	mov    eax,ebx
c0007fcd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	89 d6                	mov    esi,edx
c0007fd6:	89 d7                	mov    edi,edx
c0007fd8:	c1 ff 1f             	sar    edi,0x1f
c0007fdb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fde:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007fe2:	c1 f8 1f             	sar    eax,0x1f
c0007fe5:	39 f3                	cmp    ebx,esi
c0007fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fef:	19 f8                	sbb    eax,edi
c0007ff1:	b8 01 00 00 00       	mov    eax,0x1
c0007ff6:	72 6e                	jb     c0008066 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007ff8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007ffb:	01 d0                	add    eax,edx
c0007ffd:	99                   	cdq    
c0007ffe:	f7 fb                	idiv   ebx
c0008000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008004:	29 d3                	sub    ebx,edx
c0008006:	89 d7                	mov    edi,edx
c0008008:	89 de                	mov    esi,ebx
c000800a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000800d:	c1 fb 1f             	sar    ebx,0x1f
c0008010:	39 f2                	cmp    edx,esi
c0008012:	19 d8                	sbb    eax,ebx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	72 04                	jb     c000801f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000801b:	89 d0                	mov    eax,edx
c000801d:	29 f0                	sub    eax,esi
c000801f:	89 d3                	mov    ebx,edx
c0008021:	29 c3                	sub    ebx,eax
c0008023:	74 0b                	je     c0008030 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008025:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008028:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000802c:	89 d9                	mov    ecx,ebx
c000802e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008030:	85 c0                	test   eax,eax
c0008032:	74 0d                	je     c0008041 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008034:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008038:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000803b:	89 de                	mov    esi,ebx
c000803d:	89 c1                	mov    ecx,eax
c000803f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008041:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008044:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008049:	75 10                	jne    c000805b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000804b:	83 ec 0c             	sub    esp,0xc
c000804e:	68 69 f1 01 c0       	push   0xc001f169
c0008053:	e8 63 83 00 00       	call   c00103bb <KePanic(char const*)>
c0008058:	83 c4 10             	add    esp,0x10
c000805b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008062:	89 08                	mov    DWORD PTR [eax],ecx
c0008064:	31 c0                	xor    eax,eax
c0008066:	83 c4 1c             	add    esp,0x1c
c0008069:	5b                   	pop    ebx
c000806a:	5e                   	pop    esi
c000806b:	5f                   	pop    edi
c000806c:	5d                   	pop    ebp
c000806d:	c3                   	ret    

c000806e <Pipe::read(unsigned long long, void*, int*)>:
c000806e:	55                   	push   ebp
c000806f:	57                   	push   edi
c0008070:	56                   	push   esi
c0008071:	53                   	push   ebx
c0008072:	83 ec 1c             	sub    esp,0x1c
c0008075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008079:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000807d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008081:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008084:	89 c8                	mov    eax,ecx
c0008086:	99                   	cdq    
c0008087:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000808b:	74 24                	je     c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000808d:	39 f9                	cmp    ecx,edi
c000808f:	89 d1                	mov    ecx,edx
c0008091:	19 f1                	sbb    ecx,esi
c0008093:	73 1c                	jae    c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008095:	fa                   	cli    
c0008096:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000809c:	e8 07 c7 00 00       	call   c00147a8 <schedule()>
c00080a1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080a6:	48                   	dec    eax
c00080a7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080ac:	75 d3                	jne    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080ae:	fb                   	sti    
c00080af:	eb d0                	jmp    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b1:	39 f8                	cmp    eax,edi
c00080b3:	89 d1                	mov    ecx,edx
c00080b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080bc:	19 f1                	sbb    ecx,esi
c00080be:	73 07                	jae    c00080c7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080cd:	29 f7                	sub    edi,esi
c00080cf:	89 f8                	mov    eax,edi
c00080d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080d5:	99                   	cdq    
c00080d6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080dd:	19 d0                	sbb    eax,edx
c00080df:	73 07                	jae    c00080e8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080e8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080eb:	89 ea                	mov    edx,ebp
c00080ed:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080f6:	74 0d                	je     c0008105 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00080f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00080fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00080ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008105:	85 d2                	test   edx,edx
c0008107:	74 11                	je     c000811a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000810d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008110:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008114:	89 d1                	mov    ecx,edx
c0008116:	89 c7                	mov    edi,eax
c0008118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000811a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000811d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008120:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008123:	99                   	cdq    
c0008124:	89 f7                	mov    edi,esi
c0008126:	03 04 24             	add    eax,DWORD PTR [esp]
c0008129:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000812d:	c1 ff 1f             	sar    edi,0x1f
c0008130:	57                   	push   edi
c0008131:	56                   	push   esi
c0008132:	52                   	push   edx
c0008133:	50                   	push   eax
c0008134:	e8 77 5a 01 00       	call   c001dbb0 <__umoddi3>
c0008139:	83 c4 10             	add    esp,0x10
c000813c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000813f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008144:	75 10                	jne    c0008156 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008146:	83 ec 0c             	sub    esp,0xc
c0008149:	68 86 f1 01 c0       	push   0xc001f186
c000814e:	e8 68 82 00 00       	call   c00103bb <KePanic(char const*)>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000815a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000815d:	89 10                	mov    DWORD PTR [eax],edx
c000815f:	83 c4 1c             	add    esp,0x1c
c0008162:	31 c0                	xor    eax,eax
c0008164:	5b                   	pop    ebx
c0008165:	5e                   	pop    esi
c0008166:	5f                   	pop    edi
c0008167:	5d                   	pop    ebp
c0008168:	c3                   	ret    
c0008169:	90                   	nop

c000816a <Pipe::Pipe(int)>:
c000816a:	83 ec 0c             	sub    esp,0xc
c000816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008171:	83 ec 08             	sub    esp,0x8
c0008174:	6a 00                	push   0x0
c0008176:	50                   	push   eax
c0008177:	e8 7e 0d 00 00       	call   c0008efa <UnixFile::UnixFile(int)>
c000817c:	83 c4 10             	add    esp,0x10
c000817f:	ba ac f1 01 c0       	mov    edx,0xc001f1ac
c0008184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008188:	89 10                	mov    DWORD PTR [eax],edx
c000818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000818e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008192:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008199:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	50                   	push   eax
c00081b3:	e8 ad f6 ff ff       	call   c0007865 <malloc>
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	89 c2                	mov    edx,eax
c00081bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081cc:	90                   	nop
c00081cd:	83 c4 0c             	add    esp,0xc
c00081d0:	c3                   	ret    
c00081d1:	90                   	nop

c00081d2 <VgaText::isAtty()>:
c00081d2:	b0 01                	mov    al,0x1
c00081d4:	c3                   	ret    
c00081d5:	90                   	nop

c00081d6 <VgaText::~VgaText()>:
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c00081de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e2:	89 10                	mov    DWORD PTR [eax],edx
c00081e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e8:	83 ec 0c             	sub    esp,0xc
c00081eb:	50                   	push   eax
c00081ec:	e8 eb 0e 00 00       	call   c00090dc <UnixFile::~UnixFile()>
c00081f1:	83 c4 10             	add    esp,0x10
c00081f4:	90                   	nop
c00081f5:	83 c4 0c             	add    esp,0xc
c00081f8:	c3                   	ret    
c00081f9:	90                   	nop

c00081fa <VgaText::~VgaText()>:
c00081fa:	83 ec 0c             	sub    esp,0xc
c00081fd:	83 ec 0c             	sub    esp,0xc
c0008200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008204:	e8 cd ff ff ff       	call   c00081d6 <VgaText::~VgaText()>
c0008209:	83 c4 10             	add    esp,0x10
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	68 84 01 00 00       	push   0x184
c0008214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008218:	e8 e7 22 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c000821d:	83 c4 10             	add    esp,0x10
c0008220:	83 c4 0c             	add    esp,0xc
c0008223:	c3                   	ret    

c0008224 <VgaText::read(unsigned long long, void*, int*)>:
c0008224:	83 ec 10             	sub    esp,0x10
c0008227:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000822b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000822f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008233:	e8 26 46 00 00       	call   c000c85e <readKeyboard(VgaText*, char*, unsigned long)>
c0008238:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000823c:	89 02                	mov    DWORD PTR [edx],eax
c000823e:	31 c0                	xor    eax,eax
c0008240:	83 c4 1c             	add    esp,0x1c
c0008243:	c3                   	ret    

c0008244 <setTerminalScrollLock(bool)>:
c0008244:	c3                   	ret    

c0008245 <doTerminalCycle()>:
c0008245:	c3                   	ret    

c0008246 <addToTerminalCycle(VgaText*)>:
c0008246:	c3                   	ret    

c0008247 <scrollTerminalScrollLock(int)>:
c0008247:	c3                   	ret    

c0008248 <VgaText::updateTitle()>:
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::load()>:
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <VgaText::updateCursor()>:
c000824c:	83 ec 14             	sub    esp,0x14
c000824f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008253:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008256:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008259:	e8 62 f1 00 00       	call   c00173c0 <HalConsoleCursorUpdate(int, int)>
c000825e:	83 c4 1c             	add    esp,0x1c
c0008261:	c3                   	ret    

c0008262 <VgaText::doANSI_SGR(int)>:
c0008262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826a:	85 d2                	test   edx,edx
c000826c:	75 0b                	jne    c0008279 <VgaText::doANSI_SGR(int)+0x17>
c000826e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008271:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008274:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008277:	eb 59                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008279:	83 fa 07             	cmp    edx,0x7
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x27>
c000827e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008281:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008284:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008287:	eb 49                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 1b             	cmp    edx,0x1b
c000828c:	74 e0                	je     c000826e <VgaText::doANSI_SGR(int)+0xc>
c000828e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008291:	83 f9 07             	cmp    ecx,0x7
c0008294:	77 09                	ja     c000829f <VgaText::doANSI_SGR(int)+0x3d>
c0008296:	8b 14 8d 60 12 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdeda0]
c000829d:	eb 20                	jmp    c00082bf <VgaText::doANSI_SGR(int)+0x5d>
c000829f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082a2:	83 f9 07             	cmp    ecx,0x7
c00082a5:	77 09                	ja     c00082b0 <VgaText::doANSI_SGR(int)+0x4e>
c00082a7:	8b 14 8d 60 12 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdeda0]
c00082ae:	eb 22                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c00082b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082b3:	83 f9 07             	cmp    ecx,0x7
c00082b6:	77 0b                	ja     c00082c3 <VgaText::doANSI_SGR(int)+0x61>
c00082b8:	8b 14 95 18 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeee8]
c00082bf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082c2:	c3                   	ret    
c00082c3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082c6:	83 f9 07             	cmp    ecx,0x7
c00082c9:	77 0a                	ja     c00082d5 <VgaText::doANSI_SGR(int)+0x73>
c00082cb:	8b 14 95 f0 10 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef10]
c00082d2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082d5:	c3                   	ret    

c00082d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082e1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e4:	c3                   	ret    
c00082e5:	90                   	nop

c00082e6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082f6:	53                   	push   ebx
c00082f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00082ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008303:	51                   	push   ecx
c0008304:	e8 cd ff ff ff       	call   c00082d6 <VgaText::setDefaultBgColour(VgaColour)>
c0008309:	58                   	pop    eax
c000830a:	5a                   	pop    edx
c000830b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000830f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008313:	5b                   	pop    ebx
c0008314:	eb d0                	jmp    c00082e6 <VgaText::setDefaultFgColour(VgaColour)>

c0008316 <VgaText::setTitleTextColour(VgaColour)>:
c0008316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000831e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008321:	c3                   	ret    

c0008322 <VgaText::setTitleColour(VgaColour)>:
c0008322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000832d:	c3                   	ret    

c000832e <VgaText::setTitle(char*)>:
c000832e:	c3                   	ret    
c000832f:	90                   	nop

c0008330 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008330:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008334:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008339:	83 e0 0f             	and    eax,0xf
c000833c:	c1 e2 04             	shl    edx,0x4
c000833f:	09 d0                	or     eax,edx
c0008341:	c3                   	ret    

c0008342 <VgaText::scrollScreen()>:
c0008342:	55                   	push   ebp
c0008343:	57                   	push   edi
c0008344:	56                   	push   esi
c0008345:	be 01 00 00 00       	mov    esi,0x1
c000834a:	53                   	push   ebx
c000834b:	83 ec 0c             	sub    esp,0xc
c000834e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008352:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008355:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000835b:	31 ff                	xor    edi,edi
c000835d:	01 e9                	add    ecx,ebp
c000835f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008361:	83 fe 18             	cmp    esi,0x18
c0008364:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000836a:	75 20                	jne    c000838c <VgaText::scrollScreen()+0x4a>
c000836c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008372:	74 15                	je     c0008389 <VgaText::scrollScreen()+0x47>
c0008374:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008378:	50                   	push   eax
c0008379:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000837d:	50                   	push   eax
c000837e:	e8 ad ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008383:	5a                   	pop    edx
c0008384:	5a                   	pop    edx
c0008385:	88 01                	mov    BYTE PTR [ecx],al
c0008387:	eb 03                	jmp    c000838c <VgaText::scrollScreen()+0x4a>
c0008389:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000838c:	47                   	inc    edi
c000838d:	41                   	inc    ecx
c000838e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008394:	75 c9                	jne    c000835f <VgaText::scrollScreen()+0x1d>
c0008396:	46                   	inc    esi
c0008397:	83 fe 19             	cmp    esi,0x19
c000839a:	75 b9                	jne    c0008355 <VgaText::scrollScreen()+0x13>
c000839c:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083a2:	75 1f                	jne    c00083c3 <VgaText::scrollScreen()+0x81>
c00083a4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083a8:	74 05                	je     c00083af <VgaText::scrollScreen()+0x6d>
c00083aa:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083ad:	eb 14                	jmp    c00083c3 <VgaText::scrollScreen()+0x81>
c00083af:	50                   	push   eax
c00083b0:	50                   	push   eax
c00083b1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083b5:	50                   	push   eax
c00083b6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ba:	50                   	push   eax
c00083bb:	e8 8c ee 00 00       	call   c001724c <HalConsoleScroll(int, int)>
c00083c0:	83 c4 10             	add    esp,0x10
c00083c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083c7:	83 c4 0c             	add    esp,0xc
c00083ca:	5b                   	pop    ebx
c00083cb:	5e                   	pop    esi
c00083cc:	5f                   	pop    edi
c00083cd:	5d                   	pop    ebp
c00083ce:	e9 79 fe ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00083d3:	90                   	nop

c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083d9:	c1 e0 08             	shl    eax,0x8
c00083dc:	89 c2                	mov    edx,eax
c00083de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083e3:	09 d0                	or     eax,edx
c00083e5:	c3                   	ret    

c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083e6:	55                   	push   ebp
c00083e7:	57                   	push   edi
c00083e8:	56                   	push   esi
c00083e9:	53                   	push   ebx
c00083ea:	83 ec 1c             	sub    esp,0x1c
c00083ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00083f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008401:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008405:	0f b6 c3             	movzx  eax,bl
c0008408:	50                   	push   eax
c0008409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000840e:	50                   	push   eax
c000840f:	e8 1c ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008414:	5a                   	pop    edx
c0008415:	0f b6 c0             	movzx  eax,al
c0008418:	59                   	pop    ecx
c0008419:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000841e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008422:	50                   	push   eax
c0008423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008427:	e8 a8 ff ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000842c:	5a                   	pop    edx
c000842d:	66 6b d7 50          	imul   dx,di,0x50
c0008431:	59                   	pop    ecx
c0008432:	01 f2                	add    edx,esi
c0008434:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008437:	0f b7 d2             	movzx  edx,dx
c000843a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000843e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008444:	75 28                	jne    c000846e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000844e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008452:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008456:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000845a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000845e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008462:	83 c4 1c             	add    esp,0x1c
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	5d                   	pop    ebp
c0008469:	e9 e6 ee 00 00       	jmp    c0017354 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000846e:	83 c4 1c             	add    esp,0x1c
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <VgaText::getCursorX()>:
c0008476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000847a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000847d:	c3                   	ret    

c000847e <VgaText::getCursorY()>:
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008485:	c3                   	ret    

c0008486 <VgaText::setCursor(int, int)>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000848e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008495:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008498:	e9 af fd ff ff       	jmp    c000824c <VgaText::updateCursor()>

c000849d <setActiveTerminal(VgaText*)>:
c000849d:	53                   	push   ebx
c000849e:	83 ec 08             	sub    esp,0x8
c00084a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084a5:	85 db                	test   ebx,ebx
c00084a7:	75 11                	jne    c00084ba <setActiveTerminal(VgaText*)+0x1d>
c00084a9:	c7 44 24 10 c0 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f1c0
c00084b1:	83 c4 08             	add    esp,0x8
c00084b4:	5b                   	pop    ebx
c00084b5:	e9 01 7f 00 00       	jmp    c00103bb <KePanic(char const*)>
c00084ba:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084bf:	85 c0                	test   eax,eax
c00084c1:	74 0c                	je     c00084cf <setActiveTerminal(VgaText*)+0x32>
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	50                   	push   eax
c00084c7:	e8 80 fd ff ff       	call   c000824c <VgaText::updateCursor()>
c00084cc:	83 c4 10             	add    esp,0x10
c00084cf:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084d5:	50                   	push   eax
c00084d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084dc:	53                   	push   ebx
c00084dd:	e8 a4 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084e2:	83 c4 18             	add    esp,0x18
c00084e5:	5b                   	pop    ebx
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::clearScreen()>:
c00084e8:	57                   	push   edi
c00084e9:	56                   	push   esi
c00084ea:	31 f6                	xor    esi,esi
c00084ec:	53                   	push   ebx
c00084ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084f1:	52                   	push   edx
c00084f2:	6a 00                	push   0x0
c00084f4:	6a 00                	push   0x0
c00084f6:	53                   	push   ebx
c00084f7:	e8 8a ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084fc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008509:	7e 20                	jle    c000852b <VgaText::clearScreen()+0x43>
c000850b:	31 ff                	xor    edi,edi
c000850d:	50                   	push   eax
c000850e:	50                   	push   eax
c000850f:	56                   	push   esi
c0008510:	57                   	push   edi
c0008511:	47                   	inc    edi
c0008512:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008515:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008518:	6a 20                	push   0x20
c000851a:	53                   	push   ebx
c000851b:	e8 c6 fe ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008520:	83 c4 20             	add    esp,0x20
c0008523:	83 ff 50             	cmp    edi,0x50
c0008526:	75 e5                	jne    c000850d <VgaText::clearScreen()+0x25>
c0008528:	46                   	inc    esi
c0008529:	eb db                	jmp    c0008506 <VgaText::clearScreen()+0x1e>
c000852b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008532:	5b                   	pop    ebx
c0008533:	5e                   	pop    esi
c0008534:	5f                   	pop    edi
c0008535:	c3                   	ret    

c0008536 <VgaText::setCursorX(int)>:
c0008536:	83 ec 10             	sub    esp,0x10
c0008539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008544:	50                   	push   eax
c0008545:	e8 3c ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000854a:	83 c4 1c             	add    esp,0x1c
c000854d:	c3                   	ret    

c000854e <VgaText::setCursorY(int)>:
c000854e:	83 ec 10             	sub    esp,0x10
c0008551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008559:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855c:	50                   	push   eax
c000855d:	e8 24 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::incrementCursor(bool)>:
c0008566:	56                   	push   esi
c0008567:	53                   	push   ebx
c0008568:	51                   	push   ecx
c0008569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008571:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008574:	40                   	inc    eax
c0008575:	83 f8 50             	cmp    eax,0x50
c0008578:	74 05                	je     c000857f <VgaText::incrementCursor(bool)+0x19>
c000857a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000857d:	eb 24                	jmp    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c000857f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008582:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008589:	8d 50 01             	lea    edx,[eax+0x1]
c000858c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000858f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008592:	75 0f                	jne    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c0008594:	83 ec 0c             	sub    esp,0xc
c0008597:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859a:	53                   	push   ebx
c000859b:	e8 a2 fd ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	89 f0                	mov    eax,esi
c00085a5:	84 c0                	test   al,al
c00085a7:	74 0c                	je     c00085b5 <VgaText::incrementCursor(bool)+0x4f>
c00085a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085ad:	5a                   	pop    edx
c00085ae:	5b                   	pop    ebx
c00085af:	5e                   	pop    esi
c00085b0:	e9 97 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085b5:	58                   	pop    eax
c00085b6:	5b                   	pop    ebx
c00085b7:	5e                   	pop    esi
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::decrementCursor(bool)>:
c00085ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085c5:	85 c0                	test   eax,eax
c00085c7:	74 04                	je     c00085cd <VgaText::decrementCursor(bool)+0x13>
c00085c9:	48                   	dec    eax
c00085ca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085cd:	84 c9                	test   cl,cl
c00085cf:	74 09                	je     c00085da <VgaText::decrementCursor(bool)+0x20>
c00085d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085d5:	e9 72 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085da:	c3                   	ret    
c00085db:	90                   	nop

c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085dc:	53                   	push   ebx
c00085dd:	83 ec 08             	sub    esp,0x8
c00085e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085f0:	3c 07                	cmp    al,0x7
c00085f2:	75 21                	jne    c0008615 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085fc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008604:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000860c:	83 c4 08             	add    esp,0x8
c000860f:	5b                   	pop    ebx
c0008610:	e9 3a 2e 00 00       	jmp    c000b44f <Krnl::beep(int, int, bool)>
c0008615:	3c 0d                	cmp    al,0xd
c0008617:	75 09                	jne    c0008622 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008619:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008620:	eb 2c                	jmp    c000864e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008622:	3c 0a                	cmp    al,0xa
c0008624:	75 31                	jne    c0008657 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008626:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	8d 50 01             	lea    edx,[eax+0x1]
c0008633:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008636:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008639:	75 0f                	jne    c000864a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000863b:	83 ec 0c             	sub    esp,0xc
c000863e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008641:	53                   	push   ebx
c0008642:	e8 fb fc ff ff       	call   c0008342 <VgaText::scrollScreen()>
c0008647:	83 c4 10             	add    esp,0x10
c000864a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000864e:	83 c4 08             	add    esp,0x8
c0008651:	5b                   	pop    ebx
c0008652:	e9 f5 fb ff ff       	jmp    c000824c <VgaText::updateCursor()>
c0008657:	3c 08                	cmp    al,0x8
c0008659:	75 25                	jne    c0008680 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000865b:	50                   	push   eax
c000865c:	50                   	push   eax
c000865d:	6a 01                	push   0x1
c000865f:	53                   	push   ebx
c0008660:	e8 55 ff ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c0008665:	5a                   	pop    edx
c0008666:	59                   	pop    ecx
c0008667:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000866a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000866d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008673:	6a 20                	push   0x20
c0008675:	53                   	push   ebx
c0008676:	e8 6b fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000867b:	83 c4 28             	add    esp,0x28
c000867e:	5b                   	pop    ebx
c000867f:	c3                   	ret    
c0008680:	83 ec 08             	sub    esp,0x8
c0008683:	0f be c0             	movsx  eax,al
c0008686:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008689:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000868c:	51                   	push   ecx
c000868d:	52                   	push   edx
c000868e:	50                   	push   eax
c000868f:	53                   	push   ebx
c0008690:	e8 51 fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008695:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008699:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086a1:	83 c4 28             	add    esp,0x28
c00086a4:	5b                   	pop    ebx
c00086a5:	e9 bc fe ff ff       	jmp    c0008566 <VgaText::incrementCursor(bool)>

c00086aa <VgaText::putchar(char)>:
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	83 ec 14             	sub    esp,0x14
c00086af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086b7:	3c 5b                	cmp    al,0x5b
c00086b9:	75 18                	jne    c00086d3 <VgaText::putchar(char)+0x29>
c00086bb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086bf:	74 1f                	je     c00086e0 <VgaText::putchar(char)+0x36>
c00086c1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086c7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086ce:	e9 bd 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086d3:	3c 1b                	cmp    al,0x1b
c00086d5:	75 09                	jne    c00086e0 <VgaText::putchar(char)+0x36>
c00086d7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086db:	e9 b0 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086e0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086e3:	84 c9                	test   cl,cl
c00086e5:	0f 84 92 00 00 00    	je     c000877d <VgaText::putchar(char)+0xd3>
c00086eb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086ee:	80 fa 3e             	cmp    dl,0x3e
c00086f1:	77 76                	ja     c0008769 <VgaText::putchar(char)+0xbf>
c00086f3:	3c 6d                	cmp    al,0x6d
c00086f5:	75 47                	jne    c000873e <VgaText::putchar(char)+0x94>
c00086f7:	31 f6                	xor    esi,esi
c00086f9:	31 d2                	xor    edx,edx
c00086fb:	31 c0                	xor    eax,eax
c00086fd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008700:	7e 2d                	jle    c000872f <VgaText::putchar(char)+0x85>
c0008702:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008707:	80 fa 3b             	cmp    dl,0x3b
c000870a:	75 17                	jne    c0008723 <VgaText::putchar(char)+0x79>
c000870c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008710:	50                   	push   eax
c0008711:	53                   	push   ebx
c0008712:	e8 4b fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c0008717:	59                   	pop    ecx
c0008718:	31 d2                	xor    edx,edx
c000871a:	58                   	pop    eax
c000871b:	31 c0                	xor    eax,eax
c000871d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008721:	eb 09                	jmp    c000872c <VgaText::putchar(char)+0x82>
c0008723:	6b c0 0a             	imul   eax,eax,0xa
c0008726:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000872a:	88 ca                	mov    dl,cl
c000872c:	46                   	inc    esi
c000872d:	eb ce                	jmp    c00086fd <VgaText::putchar(char)+0x53>
c000872f:	84 d2                	test   dl,dl
c0008731:	74 2e                	je     c0008761 <VgaText::putchar(char)+0xb7>
c0008733:	50                   	push   eax
c0008734:	53                   	push   ebx
c0008735:	e8 28 fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c000873a:	58                   	pop    eax
c000873b:	5a                   	pop    edx
c000873c:	eb 23                	jmp    c0008761 <VgaText::putchar(char)+0xb7>
c000873e:	3c 4a                	cmp    al,0x4a
c0008740:	75 1f                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008742:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008746:	75 19                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008748:	83 ec 0c             	sub    esp,0xc
c000874b:	53                   	push   ebx
c000874c:	e8 97 fd ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008751:	83 c4 0c             	add    esp,0xc
c0008754:	6a 00                	push   0x0
c0008756:	6a 00                	push   0x0
c0008758:	53                   	push   ebx
c0008759:	e8 28 fd ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008767:	eb 27                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c0008769:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000876c:	83 fa 0e             	cmp    edx,0xe
c000876f:	7f 1f                	jg     c0008790 <VgaText::putchar(char)+0xe6>
c0008771:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008774:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008777:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000877b:	eb 13                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	0f be c0             	movsx  eax,al
c0008783:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008786:	50                   	push   eax
c0008787:	53                   	push   ebx
c0008788:	e8 4f fe ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 14             	add    esp,0x14
c0008793:	5b                   	pop    ebx
c0008794:	5e                   	pop    esi
c0008795:	c3                   	ret    

c0008796 <VgaText::putx(unsigned int)>:
c0008796:	57                   	push   edi
c0008797:	b9 11 00 00 00       	mov    ecx,0x11
c000879c:	56                   	push   esi
c000879d:	be ce f1 01 c0       	mov    esi,0xc001f1ce
c00087a2:	53                   	push   ebx
c00087a3:	83 ec 20             	sub    esp,0x20
c00087a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087ae:	fc                   	cld    
c00087af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087b1:	be 08 00 00 00       	mov    esi,0x8
c00087b6:	50                   	push   eax
c00087b7:	50                   	push   eax
c00087b8:	89 d8                	mov    eax,ebx
c00087ba:	c1 e3 04             	shl    ebx,0x4
c00087bd:	c1 e8 1c             	shr    eax,0x1c
c00087c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087c5:	50                   	push   eax
c00087c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087ca:	e8 db fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087cf:	83 c4 10             	add    esp,0x10
c00087d2:	4e                   	dec    esi
c00087d3:	75 e1                	jne    c00087b6 <VgaText::putx(unsigned int)+0x20>
c00087d5:	83 c4 20             	add    esp,0x20
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::puts(char const*)>:
c00087dc:	53                   	push   ebx
c00087dd:	83 ec 08             	sub    esp,0x8
c00087e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087e7:	84 c0                	test   al,al
c00087e9:	74 12                	je     c00087fd <VgaText::puts(char const*)+0x21>
c00087eb:	43                   	inc    ebx
c00087ec:	51                   	push   ecx
c00087ed:	51                   	push   ecx
c00087ee:	50                   	push   eax
c00087ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f3:	e8 b2 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087f8:	83 c4 10             	add    esp,0x10
c00087fb:	eb e7                	jmp    c00087e4 <VgaText::puts(char const*)+0x8>
c00087fd:	83 c4 08             	add    esp,0x8
c0008800:	5b                   	pop    ebx
c0008801:	c3                   	ret    

c0008802 <VgaText::write(unsigned long long, void*, int*)>:
c0008802:	55                   	push   ebp
c0008803:	57                   	push   edi
c0008804:	56                   	push   esi
c0008805:	53                   	push   ebx
c0008806:	83 ec 0c             	sub    esp,0xc
c0008809:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000880d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008811:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008815:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000881c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000881f:	39 eb                	cmp    ebx,ebp
c0008821:	74 13                	je     c0008836 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008823:	43                   	inc    ebx
c0008824:	50                   	push   eax
c0008825:	50                   	push   eax
c0008826:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000882a:	50                   	push   eax
c000882b:	56                   	push   esi
c000882c:	e8 79 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	eb e9                	jmp    c000881f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008836:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000883d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008841:	89 38                	mov    DWORD PTR [eax],edi
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	31 c0                	xor    eax,eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	5f                   	pop    edi
c000884b:	5d                   	pop    ebp
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000884e:	55                   	push   ebp
c000884f:	57                   	push   edi
c0008850:	56                   	push   esi
c0008851:	53                   	push   ebx
c0008852:	83 ec 0c             	sub    esp,0xc
c0008855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000885e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008865:	50                   	push   eax
c0008866:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886b:	50                   	push   eax
c000886c:	e8 bf fa ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008871:	5a                   	pop    edx
c0008872:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008877:	59                   	pop    ecx
c0008878:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000887b:	89 c5                	mov    ebp,eax
c000887d:	0f b7 f6             	movzx  esi,si
c0008880:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008884:	01 f6                	add    esi,esi
c0008886:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008889:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000888c:	84 c0                	test   al,al
c000888e:	0f 84 f4 00 00 00    	je     c0008988 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008894:	3c 0d                	cmp    al,0xd
c0008896:	75 0c                	jne    c00088a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008898:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000889f:	e9 de 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088a4:	3c 0a                	cmp    al,0xa
c00088a6:	75 45                	jne    c00088ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088a8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088b5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088b8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088bb:	75 0f                	jne    c00088cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088bd:	83 ec 0c             	sub    esp,0xc
c00088c0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088c3:	53                   	push   ebx
c00088c4:	e8 79 fa ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 77 f9 ff ff       	call   c000824c <VgaText::updateCursor()>
c00088d5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088e0:	0f b7 f6             	movzx  esi,si
c00088e3:	01 f6                	add    esi,esi
c00088e5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088e8:	e9 95 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ed:	3c 08                	cmp    al,0x8
c00088ef:	75 35                	jne    c0008926 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088f1:	51                   	push   ecx
c00088f2:	51                   	push   ecx
c00088f3:	6a 01                	push   0x1
c00088f5:	53                   	push   ebx
c00088f6:	e8 bf fc ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c00088fb:	5e                   	pop    esi
c00088fc:	58                   	pop    eax
c00088fd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008900:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008903:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008906:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008909:	6a 20                	push   0x20
c000890b:	53                   	push   ebx
c000890c:	e8 d5 fa ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008911:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008916:	83 c4 20             	add    esp,0x20
c0008919:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000891c:	0f b7 f6             	movzx  esi,si
c000891f:	01 f6                	add    esi,esi
c0008921:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008924:	eb 5c                	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008926:	52                   	push   edx
c0008927:	52                   	push   edx
c0008928:	89 ea                	mov    edx,ebp
c000892a:	0f b6 ca             	movzx  ecx,dl
c000892d:	51                   	push   ecx
c000892e:	50                   	push   eax
c000892f:	e8 a0 fa ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	66 89 06             	mov    WORD PTR [esi],ax
c000893a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008940:	75 1d                	jne    c000895f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008942:	83 ec 0c             	sub    esp,0xc
c0008945:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008948:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000894f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008953:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008956:	50                   	push   eax
c0008957:	e8 f8 e9 00 00       	call   c0017354 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000895c:	83 c4 20             	add    esp,0x20
c000895f:	83 c6 02             	add    esi,0x2
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 00                	push   0x0
c0008966:	53                   	push   ebx
c0008967:	e8 fa fb ff ff       	call   c0008566 <VgaText::incrementCursor(bool)>
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008973:	75 0d                	jne    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008975:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000897a:	0f b7 f6             	movzx  esi,si
c000897d:	01 f6                	add    esi,esi
c000897f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008982:	47                   	inc    edi
c0008983:	e9 01 ff ff ff       	jmp    c0008889 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008988:	83 ec 0c             	sub    esp,0xc
c000898b:	53                   	push   ebx
c000898c:	e8 bb f8 ff ff       	call   c000824c <VgaText::updateCursor()>
c0008991:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008998:	83 c4 1c             	add    esp,0x1c
c000899b:	5b                   	pop    ebx
c000899c:	5e                   	pop    esi
c000899d:	5f                   	pop    edi
c000899e:	5d                   	pop    ebp
c000899f:	c3                   	ret    

c00089a0 <VgaText::VgaText(char const*)>:
c00089a0:	56                   	push   esi
c00089a1:	53                   	push   ebx
c00089a2:	83 ec 04             	sub    esp,0x4
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	83 ec 08             	sub    esp,0x8
c00089ac:	6a 00                	push   0x0
c00089ae:	50                   	push   eax
c00089af:	e8 46 05 00 00       	call   c0008efa <UnixFile::UnixFile(int)>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c00089bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c0:	89 10                	mov    DWORD PTR [eax],edx
c00089c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a1f:	83 ec 0c             	sub    esp,0xc
c0008a22:	6a 01                	push   0x1
c0008a24:	e8 14 09 00 00       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0008a29:	83 c4 10             	add    esp,0x10
c0008a2c:	89 c2                	mov    edx,eax
c0008a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a35:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a42:	89 c6                	mov    esi,eax
c0008a44:	e8 f8 f0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0008a49:	68 05 0c 00 00       	push   0xc05
c0008a4e:	56                   	push   esi
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 aa 0f 00 00       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a60:	83 ec 04             	sub    esp,0x4
c0008a63:	68 a0 0f 00 00       	push   0xfa0
c0008a68:	6a 00                	push   0x0
c0008a6a:	50                   	push   eax
c0008a6b:	e8 50 7a ff ff       	call   c00004c0 <memset>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	83 ec 04             	sub    esp,0x4
c0008a76:	6a 00                	push   0x0
c0008a78:	6a 07                	push   0x7
c0008a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a7e:	e8 73 f8 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	83 ec 04             	sub    esp,0x4
c0008a89:	6a 00                	push   0x0
c0008a8b:	6a 00                	push   0x0
c0008a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a91:	e8 f0 f9 ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	83 ec 0c             	sub    esp,0xc
c0008a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa0:	e8 43 fa ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab4:	05 82 00 00 00       	add    eax,0x82
c0008ab9:	83 ec 04             	sub    esp,0x4
c0008abc:	68 80 00 00 00       	push   0x80
c0008ac1:	6a 00                	push   0x0
c0008ac3:	50                   	push   eax
c0008ac4:	e8 f7 79 ff ff       	call   c00004c0 <memset>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad0:	05 02 01 00 00       	add    eax,0x102
c0008ad5:	83 ec 04             	sub    esp,0x4
c0008ad8:	68 80 00 00 00       	push   0x80
c0008add:	6a 00                	push   0x0
c0008adf:	50                   	push   eax
c0008ae0:	e8 db 79 ff ff       	call   c00004c0 <memset>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	90                   	nop
c0008ae9:	83 c4 04             	add    esp,0x4
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    
c0008aef:	90                   	nop

c0008af0 <VgaText::receiveKey(unsigned char)>:
c0008af0:	55                   	push   ebp
c0008af1:	57                   	push   edi
c0008af2:	56                   	push   esi
c0008af3:	53                   	push   ebx
c0008af4:	83 ec 1c             	sub    esp,0x1c
c0008af7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008afb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008aff:	89 f0                	mov    eax,esi
c0008b01:	84 c0                	test   al,al
c0008b03:	0f 84 47 01 00 00    	je     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008b09:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b0f:	3c 08                	cmp    al,0x8
c0008b11:	75 6b                	jne    c0008b7e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b13:	83 ec 0c             	sub    esp,0xc
c0008b16:	57                   	push   edi
c0008b17:	e8 14 7a ff ff       	call   c0000530 <strlen>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	85 c0                	test   eax,eax
c0008b21:	0f 84 ee 00 00 00    	je     c0008c15 <VgaText::receiveKey(unsigned char)+0x125>
c0008b27:	50                   	push   eax
c0008b28:	50                   	push   eax
c0008b29:	6a 08                	push   0x8
c0008b2b:	53                   	push   ebx
c0008b2c:	e8 79 fb ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b34:	e8 f7 79 ff ff       	call   c0000530 <strlen>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b43:	3c 0d                	cmp    al,0xd
c0008b45:	0f 95 c1             	setne  cl
c0008b48:	3c 1f                	cmp    al,0x1f
c0008b4a:	0f 9e c2             	setle  dl
c0008b4d:	84 d1                	test   cl,dl
c0008b4f:	74 17                	je     c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b51:	83 e8 08             	sub    eax,0x8
c0008b54:	3c 02                	cmp    al,0x2
c0008b56:	76 10                	jbe    c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b58:	55                   	push   ebp
c0008b59:	55                   	push   ebp
c0008b5a:	68 df f1 01 c0       	push   0xc001f1df
c0008b5f:	53                   	push   ebx
c0008b60:	e8 77 fc ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0008b65:	83 c4 10             	add    esp,0x10
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	57                   	push   edi
c0008b6c:	e8 bf 79 ff ff       	call   c0000530 <strlen>
c0008b71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b79:	e9 94 00 00 00       	jmp    c0008c12 <VgaText::receiveKey(unsigned char)+0x122>
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b87:	50                   	push   eax
c0008b88:	e8 a3 79 ff ff       	call   c0000530 <strlen>
c0008b8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b90:	89 c5                	mov    ebp,eax
c0008b92:	e8 99 79 ff ff       	call   c0000530 <strlen>
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008b9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ba3:	0f 87 a7 00 00 00    	ja     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008ba9:	89 f0                	mov    eax,esi
c0008bab:	3c 1f                	cmp    al,0x1f
c0008bad:	0f 96 c2             	setbe  dl
c0008bb0:	3c 0d                	cmp    al,0xd
c0008bb2:	0f 95 c0             	setne  al
c0008bb5:	84 c2                	test   dl,al
c0008bb7:	74 30                	je     c0008be9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bb9:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bbc:	3c 01                	cmp    al,0x1
c0008bbe:	76 29                	jbe    c0008be9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc6:	68 e5 f1 01 c0       	push   0xc001f1e5
c0008bcb:	53                   	push   ebx
c0008bcc:	e8 7d fc ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bd1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd4:	8d 46 40             	lea    eax,[esi+0x40]
c0008bd7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bda:	0f b6 c0             	movzx  eax,al
c0008bdd:	50                   	push   eax
c0008bde:	53                   	push   ebx
c0008bdf:	e8 f8 f9 ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008be4:	83 c4 20             	add    esp,0x20
c0008be7:	eb 11                	jmp    c0008bfa <VgaText::receiveKey(unsigned char)+0x10a>
c0008be9:	89 f0                	mov    eax,esi
c0008beb:	51                   	push   ecx
c0008bec:	0f be c0             	movsx  eax,al
c0008bef:	51                   	push   ecx
c0008bf0:	50                   	push   eax
c0008bf1:	53                   	push   ebx
c0008bf2:	e8 b3 fa ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008bff:	89 f0                	mov    eax,esi
c0008c01:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c05:	52                   	push   edx
c0008c06:	52                   	push   edx
c0008c07:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c0b:	50                   	push   eax
c0008c0c:	57                   	push   edi
c0008c0d:	e8 9e 7b ff ff       	call   c00007b0 <strcat>
c0008c12:	83 c4 10             	add    esp,0x10
c0008c15:	89 f0                	mov    eax,esi
c0008c17:	3c 03                	cmp    al,0x3
c0008c19:	0f 94 c2             	sete   dl
c0008c1c:	3c 0a                	cmp    al,0xa
c0008c1e:	0f 94 c0             	sete   al
c0008c21:	08 c2                	or     dl,al
c0008c23:	75 09                	jne    c0008c2e <VgaText::receiveKey(unsigned char)+0x13e>
c0008c25:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c2c:	74 22                	je     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008c2e:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c34:	50                   	push   eax
c0008c35:	50                   	push   eax
c0008c36:	57                   	push   edi
c0008c37:	53                   	push   ebx
c0008c38:	e8 73 7b ff ff       	call   c00007b0 <strcat>
c0008c3d:	83 c4 0c             	add    esp,0xc
c0008c40:	68 80 00 00 00       	push   0x80
c0008c45:	6a 00                	push   0x0
c0008c47:	57                   	push   edi
c0008c48:	e8 73 78 ff ff       	call   c00004c0 <memset>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	83 c4 1c             	add    esp,0x1c
c0008c53:	5b                   	pop    ebx
c0008c54:	5e                   	pop    esi
c0008c55:	5f                   	pop    edi
c0008c56:	5d                   	pop    ebp
c0008c57:	c3                   	ret    

c0008c58 <VgaText::doUpdate()>:
c0008c58:	c3                   	ret    

c0008c59 <newTerminal(char*)>:
c0008c59:	83 ec 28             	sub    esp,0x28
c0008c5c:	68 84 01 00 00       	push   0x184
c0008c61:	e8 ff eb ff ff       	call   c0007865 <malloc>
c0008c66:	5a                   	pop    edx
c0008c67:	59                   	pop    ecx
c0008c68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c6c:	50                   	push   eax
c0008c6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c71:	e8 2a fd ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0008c76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c7a:	83 c4 2c             	add    esp,0x2c
c0008c7d:	c3                   	ret    
c0008c7e:	66 90                	xchg   ax,ax

c0008c80 <TSS::TSS()>:
c0008c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c8b:	90                   	nop
c0008c8c:	c3                   	ret    
c0008c8d:	90                   	nop
c0008c8e:	66 90                	xchg   ax,ax

c0008c90 <TSS::setESP(unsigned long)>:
c0008c90:	55                   	push   ebp
c0008c91:	89 e5                	mov    ebp,esp
c0008c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c99:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c9f:	90                   	nop
c0008ca0:	5d                   	pop    ebp
c0008ca1:	c3                   	ret    
c0008ca2:	66 90                	xchg   ax,ax

c0008ca4 <TSS::flush()>:
c0008ca4:	55                   	push   ebp
c0008ca5:	89 e5                	mov    ebp,esp
c0008ca7:	83 ec 10             	sub    esp,0x10
c0008caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0008caf:	83 c8 03             	or     eax,0x3
c0008cb2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cb6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cba:	66 89 d0             	mov    ax,dx
c0008cbd:	0f 00 d8             	ltr    ax
c0008cc0:	90                   	nop
c0008cc1:	c9                   	leave  
c0008cc2:	c3                   	ret    
c0008cc3:	90                   	nop

c0008cc4 <TSS::setup(unsigned long, unsigned long)>:
c0008cc4:	55                   	push   ebp
c0008cc5:	89 e5                	mov    ebp,esp
c0008cc7:	83 ec 18             	sub    esp,0x18
c0008cca:	83 ec 0c             	sub    esp,0xc
c0008ccd:	6a 68                	push   0x68
c0008ccf:	e8 91 eb ff ff       	call   c0007865 <malloc>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	89 c2                	mov    edx,eax
c0008cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cdc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce5:	83 ec 04             	sub    esp,0x4
c0008ce8:	6a 68                	push   0x68
c0008cea:	6a 00                	push   0x0
c0008cec:	50                   	push   eax
c0008ced:	e8 ce 77 ff ff       	call   c00004c0 <memset>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cfb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d07:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d37:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d43:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d67:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d6a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8c:	0f 20 da             	mov    edx,cr3
c0008d8f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d92:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008d95:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9e:	83 ec 08             	sub    esp,0x8
c0008da1:	50                   	push   eax
c0008da2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008da5:	50                   	push   eax
c0008da6:	e8 3f e3 ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	83 ec 08             	sub    esp,0x8
c0008db1:	6a 68                	push   0x68
c0008db3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db6:	50                   	push   eax
c0008db7:	e8 4a e3 ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c0008dbc:	83 c4 10             	add    esp,0x10
c0008dbf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dc3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dc6:	83 e0 0f             	and    eax,0xf
c0008dc9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dcc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dcf:	83 c8 40             	or     eax,0x40
c0008dd2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dd5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008de0:	05 78 01 00 00       	add    eax,0x178
c0008de5:	83 ec 04             	sub    esp,0x4
c0008de8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008deb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dee:	50                   	push   eax
c0008def:	e8 46 e3 ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	89 c2                	mov    edx,eax
c0008df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dfc:	89 10                	mov    DWORD PTR [eax],edx
c0008dfe:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e09:	05 78 01 00 00       	add    eax,0x178
c0008e0e:	83 ec 0c             	sub    esp,0xc
c0008e11:	50                   	push   eax
c0008e12:	e8 4d e3 ff ff       	call   c0007164 <GDT::flush()>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e1f:	c9                   	leave  
c0008e20:	c3                   	ret    
c0008e21:	90                   	nop

c0008e22 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e2d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e32:	75 08                	jne    c0008e3c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e34:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e3a:	eb 38                	jmp    c0008e74 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e3c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e41:	75 17                	jne    c0008e5a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e51:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e57:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e5a:	89 c1                	mov    ecx,eax
c0008e5c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e5f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e65:	74 cd                	je     c0008e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e67:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e6c:	83 e0 ef             	and    eax,0xffffffef
c0008e6f:	83 f8 08             	cmp    eax,0x8
c0008e72:	76 c0                	jbe    c0008e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e74:	31 c0                	xor    eax,eax
c0008e76:	c3                   	ret    
c0008e77:	90                   	nop

c0008e78 <ReservedFilename::isAtty()>:
c0008e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e7f:	31 c0                	xor    eax,eax
c0008e81:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e87:	74 09                	je     c0008e92 <ReservedFilename::isAtty()+0x1a>
c0008e89:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e8f:	0f 94 c0             	sete   al
c0008e92:	c3                   	ret    
c0008e93:	90                   	nop

c0008e94 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008ea3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ea8:	75 08                	jne    c0008eb2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eaa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008eb0:	eb 3d                	jmp    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eb2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008eb7:	75 17                	jne    c0008ed0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ebe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ec1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ec7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ecd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ed0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ed5:	75 04                	jne    c0008edb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ed7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ed9:	eb 14                	jmp    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008edb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ee0:	74 c8                	je     c0008eaa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ee2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ee7:	83 e0 ef             	and    eax,0xffffffef
c0008eea:	83 f8 08             	cmp    eax,0x8
c0008eed:	76 bb                	jbe    c0008eaa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eef:	31 c0                	xor    eax,eax
c0008ef1:	c3                   	ret    

c0008ef2 <UnixFile::getFileDescriptor()>:
c0008ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ef9:	c3                   	ret    

c0008efa <UnixFile::UnixFile(int)>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 28             	sub    esp,0x28
c0008efe:	ba bc f2 01 c0       	mov    edx,0xc001f2bc
c0008f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f07:	89 10                	mov    DWORD PTR [eax],edx
c0008f09:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f11:	0f 8f 8c 01 00 00    	jg     c00090a3 <UnixFile::UnixFile(int)+0x1a9>
c0008f17:	a1 a0 12 02 c0       	mov    eax,ds:0xc00212a0
c0008f1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f1f:	89 15 a0 12 02 c0    	mov    DWORD PTR ds:0xc00212a0,edx
c0008f25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f2c:	83 ec 08             	sub    esp,0x8
c0008f2f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f33:	68 98 3f 02 c0       	push   0xc0023f98
c0008f38:	e8 5b 4e 01 00       	call   c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f45:	83 f0 01             	xor    eax,0x1
c0008f48:	84 c0                	test   al,al
c0008f4a:	0f 84 54 01 00 00    	je     c00090a4 <UnixFile::UnixFile(int)+0x1aa>
c0008f50:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f57:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f5f:	83 ec 0c             	sub    esp,0xc
c0008f62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f66:	e8 fa e8 ff ff       	call   c0007865 <malloc>
c0008f6b:	83 c4 10             	add    esp,0x10
c0008f6e:	89 c3                	mov    ebx,eax
c0008f70:	83 ec 08             	sub    esp,0x8
c0008f73:	68 03 ff ff 0f       	push   0xfffff03
c0008f78:	53                   	push   ebx
c0008f79:	e8 2c 01 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f87:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f8f:	83 ec 0c             	sub    esp,0xc
c0008f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f96:	e8 ca e8 ff ff       	call   c0007865 <malloc>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 c3                	mov    ebx,eax
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	68 01 ff ff 0f       	push   0xfffff01
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 fc 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fb7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fbf:	83 ec 0c             	sub    esp,0xc
c0008fc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fc6:	e8 9a e8 ff ff       	call   c0007865 <malloc>
c0008fcb:	83 c4 10             	add    esp,0x10
c0008fce:	89 c3                	mov    ebx,eax
c0008fd0:	83 ec 08             	sub    esp,0x8
c0008fd3:	68 00 ff ff 0f       	push   0xfffff00
c0008fd8:	53                   	push   ebx
c0008fd9:	e8 cc 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008fde:	83 c4 10             	add    esp,0x10
c0008fe1:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008fe7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008fef:	83 ec 0c             	sub    esp,0xc
c0008ff2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ff6:	e8 6a e8 ff ff       	call   c0007865 <malloc>
c0008ffb:	83 c4 10             	add    esp,0x10
c0008ffe:	89 c3                	mov    ebx,eax
c0009000:	83 ec 08             	sub    esp,0x8
c0009003:	68 02 ff ff 0f       	push   0xfffff02
c0009008:	53                   	push   ebx
c0009009:	e8 9c 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009017:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000901f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009024:	7f 7e                	jg     c00090a4 <UnixFile::UnixFile(int)+0x1aa>
c0009026:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000902e:	83 ec 0c             	sub    esp,0xc
c0009031:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009035:	e8 2b e8 ff ff       	call   c0007865 <malloc>
c000903a:	83 c4 10             	add    esp,0x10
c000903d:	89 c3                	mov    ebx,eax
c000903f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009043:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009048:	83 ec 08             	sub    esp,0x8
c000904b:	50                   	push   eax
c000904c:	53                   	push   ebx
c000904d:	e8 58 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009059:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009060:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009068:	83 ec 0c             	sub    esp,0xc
c000906b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906f:	e8 f1 e7 ff ff       	call   c0007865 <malloc>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	89 c3                	mov    ebx,eax
c0009079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000907d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	53                   	push   ebx
c0009087:	e8 1e 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009093:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c000909a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000909e:	e9 7c ff ff ff       	jmp    c000901f <UnixFile::UnixFile(int)+0x125>
c00090a3:	90                   	nop
c00090a4:	83 c4 28             	add    esp,0x28
c00090a7:	5b                   	pop    ebx
c00090a8:	c3                   	ret    
c00090a9:	90                   	nop

c00090aa <ReservedFilename::ReservedFilename(int)>:
c00090aa:	83 ec 0c             	sub    esp,0xc
c00090ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b1:	83 ec 08             	sub    esp,0x8
c00090b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090b8:	50                   	push   eax
c00090b9:	e8 3c fe ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c00090c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ca:	89 10                	mov    DWORD PTR [eax],edx
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090d7:	90                   	nop
c00090d8:	83 c4 0c             	add    esp,0xc
c00090db:	c3                   	ret    

c00090dc <UnixFile::~UnixFile()>:
c00090dc:	83 ec 1c             	sub    esp,0x1c
c00090df:	ba bc f2 01 c0       	mov    edx,0xc001f2bc
c00090e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090e8:	89 10                	mov    DWORD PTR [eax],edx
c00090ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00090f6:	7f 73                	jg     c000916b <UnixFile::~UnixFile()+0x8f>
c00090f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009100:	83 ec 0c             	sub    esp,0xc
c0009103:	68 98 3f 02 c0       	push   0xc0023f98
c0009108:	e8 5f 4d 01 00       	call   c001de6c <LinkedList<UnixFile>::getFirstElement()>
c000910d:	83 c4 10             	add    esp,0x10
c0009110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	68 98 3f 02 c0       	push   0xc0023f98
c000911c:	e8 53 4d 01 00       	call   c001de74 <LinkedList<UnixFile>::removeFirst()>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009128:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000912c:	74 40                	je     c000916e <UnixFile::~UnixFile()+0x92>
c000912e:	83 ec 08             	sub    esp,0x8
c0009131:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009135:	68 98 3f 02 c0       	push   0xc0023f98
c000913a:	e8 59 4c 01 00       	call   c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009146:	8d 50 01             	lea    edx,[eax+0x1]
c0009149:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000914d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009152:	0f 94 c0             	sete   al
c0009155:	84 c0                	test   al,al
c0009157:	74 a7                	je     c0009100 <UnixFile::~UnixFile()+0x24>
c0009159:	83 ec 0c             	sub    esp,0xc
c000915c:	68 94 f2 01 c0       	push   0xc001f294
c0009161:	e8 55 72 00 00       	call   c00103bb <KePanic(char const*)>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	eb 95                	jmp    c0009100 <UnixFile::~UnixFile()+0x24>
c000916b:	90                   	nop
c000916c:	eb 01                	jmp    c000916f <UnixFile::~UnixFile()+0x93>
c000916e:	90                   	nop
c000916f:	90                   	nop
c0009170:	83 c4 1c             	add    esp,0x1c
c0009173:	c3                   	ret    

c0009174 <UnixFile::~UnixFile()>:
c0009174:	83 ec 0c             	sub    esp,0xc
c0009177:	83 ec 0c             	sub    esp,0xc
c000917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917e:	e8 59 ff ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c0009183:	83 c4 10             	add    esp,0x10
c0009186:	83 ec 08             	sub    esp,0x8
c0009189:	6a 0c                	push   0xc
c000918b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918f:	e8 70 13 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c0009194:	83 c4 10             	add    esp,0x10
c0009197:	83 c4 0c             	add    esp,0xc
c000919a:	c3                   	ret    
c000919b:	90                   	nop

c000919c <ReservedFilename::~ReservedFilename()>:
c000919c:	83 ec 0c             	sub    esp,0xc
c000919f:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c00091a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a8:	89 10                	mov    DWORD PTR [eax],edx
c00091aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ae:	83 ec 0c             	sub    esp,0xc
c00091b1:	50                   	push   eax
c00091b2:	e8 25 ff ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c00091b7:	83 c4 10             	add    esp,0x10
c00091ba:	90                   	nop
c00091bb:	83 c4 0c             	add    esp,0xc
c00091be:	c3                   	ret    
c00091bf:	90                   	nop

c00091c0 <ReservedFilename::~ReservedFilename()>:
c00091c0:	83 ec 0c             	sub    esp,0xc
c00091c3:	83 ec 0c             	sub    esp,0xc
c00091c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ca:	e8 cd ff ff ff       	call   c000919c <ReservedFilename::~ReservedFilename()>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	83 ec 08             	sub    esp,0x8
c00091d5:	6a 0c                	push   0xc
c00091d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091db:	e8 24 13 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c00091e0:	83 c4 10             	add    esp,0x10
c00091e3:	83 c4 0c             	add    esp,0xc
c00091e6:	c3                   	ret    

c00091e7 <getFromFileDescriptor(int)>:
c00091e7:	53                   	push   ebx
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00091f5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00091fb:	7f 2c                	jg     c0009229 <getFromFileDescriptor(int)+0x42>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	68 98 3f 02 c0       	push   0xc0023f98
c0009205:	e8 62 4c 01 00       	call   c001de6c <LinkedList<UnixFile>::getFirstElement()>
c000920a:	83 c4 10             	add    esp,0x10
c000920d:	85 c0                	test   eax,eax
c000920f:	75 04                	jne    c0009215 <getFromFileDescriptor(int)+0x2e>
c0009211:	31 c0                	xor    eax,eax
c0009213:	eb 6e                	jmp    c0009283 <getFromFileDescriptor(int)+0x9c>
c0009215:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009218:	74 69                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c000921a:	52                   	push   edx
c000921b:	52                   	push   edx
c000921c:	50                   	push   eax
c000921d:	68 98 3f 02 c0       	push   0xc0023f98
c0009222:	e8 ef 4c 01 00       	call   c001df16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009227:	eb e1                	jmp    c000920a <getFromFileDescriptor(int)+0x23>
c0009229:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000922e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009234:	74 4d                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009236:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000923b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009241:	74 40                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009243:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009248:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000924e:	74 33                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009250:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009255:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000925b:	74 26                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c000925d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009263:	83 f8 08             	cmp    eax,0x8
c0009266:	77 09                	ja     c0009271 <getFromFileDescriptor(int)+0x8a>
c0009268:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000926f:	eb 12                	jmp    c0009283 <getFromFileDescriptor(int)+0x9c>
c0009271:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009277:	83 fb 08             	cmp    ebx,0x8
c000927a:	77 95                	ja     c0009211 <getFromFileDescriptor(int)+0x2a>
c000927c:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009283:	83 c4 08             	add    esp,0x8
c0009286:	5b                   	pop    ebx
c0009287:	c3                   	ret    

c0009288 <__static_initialization_and_destruction_0(int, int)>:
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009290:	75 34                	jne    c00092c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009292:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000929a:	75 2a                	jne    c00092c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000929c:	83 ec 0c             	sub    esp,0xc
c000929f:	68 98 3f 02 c0       	push   0xc0023f98
c00092a4:	e8 ad 4a 01 00       	call   c001dd56 <LinkedList<UnixFile>::LinkedList()>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 ec 04             	sub    esp,0x4
c00092af:	68 28 12 02 c0       	push   0xc0021228
c00092b4:	68 98 3f 02 c0       	push   0xc0023f98
c00092b9:	68 54 dd 01 c0       	push   0xc001dd54
c00092be:	e8 f1 11 00 00       	call   c000a4b4 <__cxa_atexit>
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	90                   	nop
c00092c7:	83 c4 0c             	add    esp,0xc
c00092ca:	c3                   	ret    

c00092cb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092cb:	83 ec 0c             	sub    esp,0xc
c00092ce:	83 ec 08             	sub    esp,0x8
c00092d1:	68 ff ff 00 00       	push   0xffff
c00092d6:	6a 01                	push   0x1
c00092d8:	e8 ab ff ff ff       	call   c0009288 <__static_initialization_and_destruction_0(int, int)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	83 c4 0c             	add    esp,0xc
c00092e3:	c3                   	ret    

c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092e4:	53                   	push   ebx
c00092e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092ed:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00092f3:	89 c8                	mov    eax,ecx
c00092f5:	d1 e8                	shr    eax,1
c00092f7:	03 05 a8 12 02 c0    	add    eax,DWORD PTR ds:0xc00212a8
c00092fd:	83 e1 01             	and    ecx,0x1
c0009300:	8a 10                	mov    dl,BYTE PTR [eax]
c0009302:	75 09                	jne    c000930d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009304:	83 e2 f0             	and    edx,0xfffffff0
c0009307:	09 da                	or     edx,ebx
c0009309:	88 10                	mov    BYTE PTR [eax],dl
c000930b:	5b                   	pop    ebx
c000930c:	c3                   	ret    
c000930d:	c1 e3 04             	shl    ebx,0x4
c0009310:	83 e2 0f             	and    edx,0xf
c0009313:	09 da                	or     edx,ebx
c0009315:	88 10                	mov    BYTE PTR [eax],dl
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    

c0009319 <Virt::getPageState(unsigned long)>:
c0009319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931d:	8b 0d a8 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212a8
c0009323:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009329:	89 d0                	mov    eax,edx
c000932b:	d1 e8                	shr    eax,1
c000932d:	83 e2 01             	and    edx,0x1
c0009330:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009333:	75 04                	jne    c0009339 <Virt::getPageState(unsigned long)+0x20>
c0009335:	83 e0 0f             	and    eax,0xf
c0009338:	c3                   	ret    
c0009339:	c0 e8 04             	shr    al,0x4
c000933c:	c3                   	ret    

c000933d <Virt::allocateKernelVirtualPages(int)>:
c000933d:	55                   	push   ebp
c000933e:	31 ed                	xor    ebp,ebp
c0009340:	57                   	push   edi
c0009341:	56                   	push   esi
c0009342:	53                   	push   ebx
c0009343:	31 db                	xor    ebx,ebx
c0009345:	83 ec 1c             	sub    esp,0x1c
c0009348:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000934c:	8b 3d a4 12 02 c0    	mov    edi,DWORD PTR ds:0xc00212a4
c0009352:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009357:	57                   	push   edi
c0009358:	e8 bc ff ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c000935d:	5a                   	pop    edx
c000935e:	84 c0                	test   al,al
c0009360:	75 3a                	jne    c000939c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009362:	85 db                	test   ebx,ebx
c0009364:	75 02                	jne    c0009368 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009366:	89 fd                	mov    ebp,edi
c0009368:	43                   	inc    ebx
c0009369:	39 f3                	cmp    ebx,esi
c000936b:	74 5a                	je     c00093c7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000936d:	47                   	inc    edi
c000936e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009374:	76 31                	jbe    c00093a7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009376:	c7 05 a4 12 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00212a4,0xc8000
c0009380:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009385:	75 28                	jne    c00093af <Virt::allocateKernelVirtualPages(int)+0x72>
c0009387:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000938c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009391:	57                   	push   edi
c0009392:	e8 82 ff ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c0009397:	5a                   	pop    edx
c0009398:	84 c0                	test   al,al
c000939a:	74 c6                	je     c0009362 <Virt::allocateKernelVirtualPages(int)+0x25>
c000939c:	31 db                	xor    ebx,ebx
c000939e:	47                   	inc    edi
c000939f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093a5:	77 cf                	ja     c0009376 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093a7:	89 3d a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,edi
c00093ad:	eb a8                	jmp    c0009357 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093af:	83 ec 0c             	sub    esp,0xc
c00093b2:	68 ec f2 01 c0       	push   0xc001f2ec
c00093b7:	e8 ff 6f 00 00       	call   c00103bb <KePanic(char const*)>
c00093bc:	8b 3d a4 12 02 c0    	mov    edi,DWORD PTR ds:0xc00212a4
c00093c2:	83 c4 10             	add    esp,0x10
c00093c5:	eb 90                	jmp    c0009357 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093c7:	89 2d a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,ebp
c00093cd:	4b                   	dec    ebx
c00093ce:	74 5f                	je     c000942f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093d0:	85 f6                	test   esi,esi
c00093d2:	74 3d                	je     c0009411 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093d4:	89 e8                	mov    eax,ebp
c00093d6:	31 db                	xor    ebx,ebx
c00093d8:	8d 7e ff             	lea    edi,[esi-0x1]
c00093db:	eb 14                	jmp    c00093f1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093dd:	6a 01                	push   0x1
c00093df:	43                   	inc    ebx
c00093e0:	50                   	push   eax
c00093e1:	e8 fe fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093e6:	58                   	pop    eax
c00093e7:	39 f3                	cmp    ebx,esi
c00093e9:	5a                   	pop    edx
c00093ea:	74 25                	je     c0009411 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093ec:	a1 a4 12 02 c0       	mov    eax,ds:0xc00212a4
c00093f1:	8d 50 01             	lea    edx,[eax+0x1]
c00093f4:	85 db                	test   ebx,ebx
c00093f6:	89 15 a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,edx
c00093fc:	74 20                	je     c000941e <Virt::allocateKernelVirtualPages(int)+0xe1>
c00093fe:	39 df                	cmp    edi,ebx
c0009400:	75 db                	jne    c00093dd <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009402:	6a 03                	push   0x3
c0009404:	43                   	inc    ebx
c0009405:	50                   	push   eax
c0009406:	e8 d9 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000940b:	59                   	pop    ecx
c000940c:	39 f3                	cmp    ebx,esi
c000940e:	58                   	pop    eax
c000940f:	75 db                	jne    c00093ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009411:	83 c4 1c             	add    esp,0x1c
c0009414:	89 e8                	mov    eax,ebp
c0009416:	5b                   	pop    ebx
c0009417:	c1 e0 0c             	shl    eax,0xc
c000941a:	5e                   	pop    esi
c000941b:	5f                   	pop    edi
c000941c:	5d                   	pop    ebp
c000941d:	c3                   	ret    
c000941e:	6a 02                	push   0x2
c0009420:	bb 01 00 00 00       	mov    ebx,0x1
c0009425:	50                   	push   eax
c0009426:	e8 b9 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000942b:	58                   	pop    eax
c000942c:	5a                   	pop    edx
c000942d:	eb bd                	jmp    c00093ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c000942f:	6a 04                	push   0x4
c0009431:	8d 45 01             	lea    eax,[ebp+0x1]
c0009434:	55                   	push   ebp
c0009435:	a3 a4 12 02 c0       	mov    ds:0xc00212a4,eax
c000943a:	e8 a5 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943f:	59                   	pop    ecx
c0009440:	89 e8                	mov    eax,ebp
c0009442:	5b                   	pop    ebx
c0009443:	c1 e0 0c             	shl    eax,0xc
c0009446:	83 c4 1c             	add    esp,0x1c
c0009449:	5b                   	pop    ebx
c000944a:	5e                   	pop    esi
c000944b:	5f                   	pop    edi
c000944c:	5d                   	pop    ebp
c000944d:	c3                   	ret    

c000944e <Virt::freeSwapfilePage(unsigned long)>:
c000944e:	53                   	push   ebx
c000944f:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009455:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009459:	b8 01 00 00 00       	mov    eax,0x1
c000945e:	89 cb                	mov    ebx,ecx
c0009460:	d3 e0                	shl    eax,cl
c0009462:	c1 eb 05             	shr    ebx,0x5
c0009465:	f7 d0                	not    eax
c0009467:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000946a:	5b                   	pop    ebx
c000946b:	c3                   	ret    

c000946c <Virt::swapIDToSector(unsigned long)>:
c000946c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009470:	0f af 05 ac 12 02 c0 	imul   eax,DWORD PTR ds:0xc00212ac
c0009477:	03 05 b4 12 02 c0    	add    eax,DWORD PTR ds:0xc00212b4
c000947d:	c3                   	ret    

c000947e <Virt::allocateSwapfilePage()>:
c000947e:	55                   	push   ebp
c000947f:	31 d2                	xor    edx,edx
c0009481:	57                   	push   edi
c0009482:	56                   	push   esi
c0009483:	53                   	push   ebx
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	8b 0d ac 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212ac
c000948d:	a1 b0 12 02 c0       	mov    eax,ds:0xc00212b0
c0009492:	f7 f1                	div    ecx
c0009494:	39 0d b0 12 02 c0    	cmp    DWORD PTR ds:0xc00212b0,ecx
c000949a:	72 2d                	jb     c00094c9 <Virt::allocateSwapfilePage()+0x4b>
c000949c:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094a2:	8b 16                	mov    edx,DWORD PTR [esi]
c00094a4:	f6 c2 01             	test   dl,0x1
c00094a7:	74 3c                	je     c00094e5 <Virt::allocateSwapfilePage()+0x67>
c00094a9:	31 c9                	xor    ecx,ecx
c00094ab:	bf 01 00 00 00       	mov    edi,0x1
c00094b0:	eb 12                	jmp    c00094c4 <Virt::allocateSwapfilePage()+0x46>
c00094b2:	89 fd                	mov    ebp,edi
c00094b4:	89 ca                	mov    edx,ecx
c00094b6:	d3 e5                	shl    ebp,cl
c00094b8:	c1 ea 05             	shr    edx,0x5
c00094bb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094c0:	85 ea                	test   edx,ebp
c00094c2:	74 2a                	je     c00094ee <Virt::allocateSwapfilePage()+0x70>
c00094c4:	41                   	inc    ecx
c00094c5:	39 c8                	cmp    eax,ecx
c00094c7:	77 e9                	ja     c00094b2 <Virt::allocateSwapfilePage()+0x34>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 53 f4 01 c0       	push   0xc001f453
c00094d1:	e8 e5 6e 00 00       	call   c00103bb <KePanic(char const*)>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	31 c9                	xor    ecx,ecx
c00094db:	83 c4 0c             	add    esp,0xc
c00094de:	89 c8                	mov    eax,ecx
c00094e0:	5b                   	pop    ebx
c00094e1:	5e                   	pop    esi
c00094e2:	5f                   	pop    edi
c00094e3:	5d                   	pop    ebp
c00094e4:	c3                   	ret    
c00094e5:	89 f3                	mov    ebx,esi
c00094e7:	bd 01 00 00 00       	mov    ebp,0x1
c00094ec:	31 c9                	xor    ecx,ecx
c00094ee:	09 ea                	or     edx,ebp
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	89 13                	mov    DWORD PTR [ebx],edx
c00094f4:	83 c4 0c             	add    esp,0xc
c00094f7:	5b                   	pop    ebx
c00094f8:	5e                   	pop    esi
c00094f9:	5f                   	pop    edi
c00094fa:	5d                   	pop    ebp
c00094fb:	c3                   	ret    

c00094fc <Virt::virtualMemorySetup()>:
c00094fc:	53                   	push   ebx
c00094fd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009502:	6a 0f                	push   0xf
c0009504:	53                   	push   ebx
c0009505:	43                   	inc    ebx
c0009506:	e8 d9 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000950b:	58                   	pop    eax
c000950c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009512:	5a                   	pop    edx
c0009513:	75 ed                	jne    c0009502 <Virt::virtualMemorySetup()+0x6>
c0009515:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000951a:	6a 00                	push   0x0
c000951c:	53                   	push   ebx
c000951d:	43                   	inc    ebx
c000951e:	e8 c1 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009523:	59                   	pop    ecx
c0009524:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000952a:	58                   	pop    eax
c000952b:	75 ed                	jne    c000951a <Virt::virtualMemorySetup()+0x1e>
c000952d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009532:	6a 0f                	push   0xf
c0009534:	53                   	push   ebx
c0009535:	43                   	inc    ebx
c0009536:	e8 a9 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000953b:	58                   	pop    eax
c000953c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009542:	5a                   	pop    edx
c0009543:	75 ed                	jne    c0009532 <Virt::virtualMemorySetup()+0x36>
c0009545:	5b                   	pop    ebx
c0009546:	c3                   	ret    

c0009547 <Virt::setupPageSwapping(int)>:
c0009547:	53                   	push   ebx
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000954f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009554:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000955a:	8b 10                	mov    edx,DWORD PTR [eax]
c000955c:	53                   	push   ebx
c000955d:	c1 e3 0b             	shl    ebx,0xb
c0009560:	68 6a f4 01 c0       	push   0xc001f46a
c0009565:	50                   	push   eax
c0009566:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009569:	89 1d b0 12 02 c0    	mov    DWORD PTR ds:0xc00212b0,ebx
c000956f:	c6 05 b8 12 02 c0 43 	mov    BYTE PTR ds:0xc00212b8,0x43
c0009576:	c1 eb 08             	shr    ebx,0x8
c0009579:	a3 b4 12 02 c0       	mov    ds:0xc00212b4,eax
c000957e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009581:	c7 05 ac 12 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00212ac,0x8
c000958b:	e8 d5 e2 ff ff       	call   c0007865 <malloc>
c0009590:	83 c4 0c             	add    esp,0xc
c0009593:	89 c1                	mov    ecx,eax
c0009595:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c000959a:	31 d2                	xor    edx,edx
c000959c:	a1 b0 12 02 c0       	mov    eax,ds:0xc00212b0
c00095a1:	f7 35 ac 12 02 c0    	div    DWORD PTR ds:0xc00212ac
c00095a7:	c1 e8 05             	shr    eax,0x5
c00095aa:	50                   	push   eax
c00095ab:	6a 00                	push   0x0
c00095ad:	51                   	push   ecx
c00095ae:	e8 0d 6f ff ff       	call   c00004c0 <memset>
c00095b3:	83 c4 18             	add    esp,0x18
c00095b6:	5b                   	pop    ebx
c00095b7:	c3                   	ret    

c00095b8 <VAS::VAS(VAS*)>:
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095d1:	83 ec 0c             	sub    esp,0xc
c00095d4:	68 0c f3 01 c0       	push   0xc001f30c
c00095d9:	e8 dd 6d 00 00       	call   c00103bb <KePanic(char const*)>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	90                   	nop
c00095e2:	83 c4 0c             	add    esp,0xc
c00095e5:	c3                   	ret    

c00095e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095ea:	89 c2                	mov    edx,eax
c00095ec:	c1 e8 0a             	shr    eax,0xa
c00095ef:	c1 ea 16             	shr    edx,0x16
c00095f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00095f7:	19 c9                	sbb    ecx,ecx
c00095f9:	c1 e2 0c             	shl    edx,0xc
c00095fc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009602:	25 fc 0f 00 00       	and    eax,0xffc
c0009607:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000960e:	01 d0                	add    eax,edx
c0009610:	c3                   	ret    
c0009611:	90                   	nop

c0009612 <VAS::getPageTableEntry(unsigned long)>:
c0009612:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009616:	89 ca                	mov    edx,ecx
c0009618:	c1 e9 0a             	shr    ecx,0xa
c000961b:	c1 ea 16             	shr    edx,0x16
c000961e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009624:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000962a:	c1 e0 0c             	shl    eax,0xc
c000962d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009630:	c3                   	ret    

c0009631 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009631:	57                   	push   edi
c0009632:	56                   	push   esi
c0009633:	be 01 00 00 00       	mov    esi,0x1
c0009638:	53                   	push   ebx
c0009639:	83 ec 10             	sub    esp,0x10
c000963c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009640:	c1 eb 0c             	shr    ebx,0xc
c0009643:	eb 3f                	jmp    c0009684 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009645:	83 ec 08             	sub    esp,0x8
c0009648:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000964d:	57                   	push   edi
c000964e:	50                   	push   eax
c000964f:	e8 be ff ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	8b 00                	mov    eax,DWORD PTR [eax]
c0009659:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965d:	f6 c4 04             	test   ah,0x4
c0009660:	75 60                	jne    c00096c2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009662:	80 fa 04             	cmp    dl,0x4
c0009665:	74 79                	je     c00096e0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009667:	80 fa 02             	cmp    dl,0x2
c000966a:	0f 84 89 00 00 00    	je     c00096f9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009670:	80 fa 03             	cmp    dl,0x3
c0009673:	0f 84 ae 00 00 00    	je     c0009727 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009679:	fe ca                	dec    dl
c000967b:	0f 84 93 00 00 00    	je     c0009714 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009681:	43                   	inc    ebx
c0009682:	31 f6                	xor    esi,esi
c0009684:	53                   	push   ebx
c0009685:	89 df                	mov    edi,ebx
c0009687:	e8 8d fc ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c000968c:	c1 e7 0c             	shl    edi,0xc
c000968f:	5a                   	pop    edx
c0009690:	84 c0                	test   al,al
c0009692:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009696:	75 ad                	jne    c0009645 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009698:	83 ec 0c             	sub    esp,0xc
c000969b:	68 81 f4 01 c0       	push   0xc001f481
c00096a0:	e8 16 6d 00 00       	call   c00103bb <KePanic(char const*)>
c00096a5:	5a                   	pop    edx
c00096a6:	59                   	pop    ecx
c00096a7:	57                   	push   edi
c00096a8:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096ae:	57                   	push   edi
c00096af:	e8 5e ff ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00096b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096bd:	f6 c4 04             	test   ah,0x4
c00096c0:	74 bf                	je     c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096c2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096cb:	83 ec 0c             	sub    esp,0xc
c00096ce:	50                   	push   eax
c00096cf:	e8 0b e4 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00096d4:	83 c4 10             	add    esp,0x10
c00096d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096db:	80 fa 04             	cmp    dl,0x4
c00096de:	75 87                	jne    c0009667 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096e0:	89 f0                	mov    eax,esi
c00096e2:	84 c0                	test   al,al
c00096e4:	75 47                	jne    c000972d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096e6:	c7 44 24 20 30 f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f330
c00096ee:	83 c4 10             	add    esp,0x10
c00096f1:	5b                   	pop    ebx
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	e9 c2 6c 00 00       	jmp    c00103bb <KePanic(char const*)>
c00096f9:	89 f0                	mov    eax,esi
c00096fb:	84 c0                	test   al,al
c00096fd:	75 15                	jne    c0009714 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096ff:	83 ec 0c             	sub    esp,0xc
c0009702:	68 9d f4 01 c0       	push   0xc001f49d
c0009707:	e8 af 6c 00 00       	call   c00103bb <KePanic(char const*)>
c000970c:	83 c4 10             	add    esp,0x10
c000970f:	e9 6d ff ff ff       	jmp    c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009714:	83 ec 08             	sub    esp,0x8
c0009717:	6a 00                	push   0x0
c0009719:	53                   	push   ebx
c000971a:	e8 c5 fb ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	83 c4 10             	add    esp,0x10
c0009722:	e9 5a ff ff ff       	jmp    c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009727:	89 f0                	mov    eax,esi
c0009729:	84 c0                	test   al,al
c000972b:	75 15                	jne    c0009742 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000972d:	83 ec 08             	sub    esp,0x8
c0009730:	6a 00                	push   0x0
c0009732:	53                   	push   ebx
c0009733:	e8 ac fb ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009738:	83 c4 10             	add    esp,0x10
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	5b                   	pop    ebx
c000973f:	5e                   	pop    esi
c0009740:	5f                   	pop    edi
c0009741:	c3                   	ret    
c0009742:	c7 44 24 20 b9 f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f4b9
c000974a:	83 c4 10             	add    esp,0x10
c000974d:	5b                   	pop    ebx
c000974e:	5e                   	pop    esi
c000974f:	5f                   	pop    edi
c0009750:	e9 66 6c 00 00       	jmp    c00103bb <KePanic(char const*)>
c0009755:	90                   	nop

c0009756 <VAS::freeAllocatedPages(unsigned long)>:
c0009756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000975e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009762:	74 09                	je     c000976d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009764:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009768:	e9 c4 fe ff ff       	jmp    c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c000976d:	c7 44 24 04 54 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f354
c0009775:	e9 80 0e 00 00       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>

c000977a <VAS::virtualToPhysical(unsigned long)>:
c000977a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977e:	50                   	push   eax
c000977f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009783:	52                   	push   edx
c0009784:	e8 89 fe ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0009789:	59                   	pop    ecx
c000978a:	8b 00                	mov    eax,DWORD PTR [eax]
c000978c:	5a                   	pop    edx
c000978d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009794:	55                   	push   ebp
c0009795:	57                   	push   edi
c0009796:	56                   	push   esi
c0009797:	53                   	push   ebx
c0009798:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000979c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097a8:	85 db                	test   ebx,ebx
c00097aa:	7e 22                	jle    c00097ce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097ac:	c1 e3 0c             	shl    ebx,0xc
c00097af:	01 f3                	add    ebx,esi
c00097b1:	56                   	push   esi
c00097b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097b8:	55                   	push   ebp
c00097b9:	e8 54 fe ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c00097be:	5a                   	pop    edx
c00097bf:	59                   	pop    ecx
c00097c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097c2:	21 f9                	and    ecx,edi
c00097c4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097c8:	39 f3                	cmp    ebx,esi
c00097ca:	89 08                	mov    DWORD PTR [eax],ecx
c00097cc:	75 e3                	jne    c00097b1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097ce:	5b                   	pop    ebx
c00097cf:	5e                   	pop    esi
c00097d0:	5f                   	pop    edi
c00097d1:	5d                   	pop    ebp
c00097d2:	c3                   	ret    
c00097d3:	90                   	nop

c00097d4 <VAS::VAS()>:
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ee:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c00097f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00097fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ff:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009806:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000980d:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009812:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009817:	29 c2                	sub    edx,eax
c0009819:	89 d0                	mov    eax,edx
c000981b:	05 ff 0f 00 00       	add    eax,0xfff
c0009820:	c1 e8 0c             	shr    eax,0xc
c0009823:	89 c2                	mov    edx,eax
c0009825:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000982a:	6a 04                	push   0x4
c000982c:	6a ff                	push   0xffffffff
c000982e:	52                   	push   edx
c000982f:	50                   	push   eax
c0009830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009834:	e8 5b ff ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c0009839:	83 c4 14             	add    esp,0x14
c000983c:	90                   	nop
c000983d:	c3                   	ret    

c000983e <VAS::setToWriteCombining(unsigned long, int)>:
c000983e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009849:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009850:	75 01                	jne    c0009853 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009852:	c3                   	ret    
c0009853:	68 80 00 00 00       	push   0x80
c0009858:	6a ff                	push   0xffffffff
c000985a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000985e:	50                   	push   eax
c000985f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009863:	52                   	push   edx
c0009864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009868:	51                   	push   ecx
c0009869:	e8 26 ff ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000986e:	83 c4 14             	add    esp,0x14
c0009871:	c3                   	ret    

c0009872 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009872:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000987b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000987e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009882:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009885:	19 c0                	sbb    eax,eax
c0009887:	83 ca 03             	or     edx,0x3
c000988a:	83 e0 fc             	and    eax,0xfffffffc
c000988d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009894:	0f 20 d8             	mov    eax,cr3
c0009897:	0f 22 d8             	mov    cr3,eax
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::~VAS()>:
c000989c:	83 ec 2c             	sub    esp,0x2c
c000989f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098a7:	fa                   	cli    
c00098a8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098ad:	40                   	inc    eax
c00098ae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098b3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098bd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098c7:	6a 01                	push   0x1
c00098c9:	50                   	push   eax
c00098ca:	e8 a3 ff ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c00098cf:	83 c4 0c             	add    esp,0xc
c00098d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098da:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098e2:	0f 8f d4 00 00 00    	jg     c00099bc <VAS::~VAS()+0x120>
c00098e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	c1 e2 02             	shl    edx,0x2
c00098f6:	01 d0                	add    eax,edx
c00098f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009902:	83 e0 01             	and    eax,0x1
c0009905:	0f 84 a8 00 00 00    	je     c00099b3 <VAS::~VAS()+0x117>
c000990b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009913:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000991b:	7f 72                	jg     c000998f <VAS::~VAS()+0xf3>
c000991d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009921:	c1 e0 0a             	shl    eax,0xa
c0009924:	89 c2                	mov    edx,eax
c0009926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000992a:	01 d0                	add    eax,edx
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009933:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009938:	8b 00                	mov    eax,DWORD PTR [eax]
c000993a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000993d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009947:	6a 01                	push   0x1
c0009949:	50                   	push   eax
c000994a:	e8 97 fc ff ff       	call   c00095e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000994f:	83 c4 0c             	add    esp,0xc
c0009952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995a:	8b 00                	mov    eax,DWORD PTR [eax]
c000995c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009964:	25 01 04 00 00       	and    eax,0x401
c0009969:	3d 01 04 00 00       	cmp    eax,0x401
c000996e:	75 19                	jne    c0009989 <VAS::~VAS()+0xed>
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	50                   	push   eax
c000997d:	e8 5d e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c0009982:	83 c4 10             	add    esp,0x10
c0009985:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009989:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000998d:	eb 84                	jmp    c0009913 <VAS::~VAS()+0x77>
c000998f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009993:	25 00 04 00 00       	and    eax,0x400
c0009998:	74 19                	je     c00099b3 <VAS::~VAS()+0x117>
c000999a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000999e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a3:	83 ec 0c             	sub    esp,0xc
c00099a6:	50                   	push   eax
c00099a7:	e8 33 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099ac:	83 c4 10             	add    esp,0x10
c00099af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099b7:	e9 1e ff ff ff       	jmp    c00098da <VAS::~VAS()+0x3e>
c00099bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099c3:	83 ec 0c             	sub    esp,0xc
c00099c6:	50                   	push   eax
c00099c7:	e8 65 fc ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c00099cc:	83 c4 10             	add    esp,0x10
c00099cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099d6:	83 ec 0c             	sub    esp,0xc
c00099d9:	50                   	push   eax
c00099da:	e8 00 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099df:	83 c4 10             	add    esp,0x10
c00099e2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099eb:	48                   	dec    eax
c00099ec:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00099f1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099f6:	85 c0                	test   eax,eax
c00099f8:	75 01                	jne    c00099fb <VAS::~VAS()+0x15f>
c00099fa:	fb                   	sti    
c00099fb:	90                   	nop
c00099fc:	83 c4 2c             	add    esp,0x2c
c00099ff:	c3                   	ret    

c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a00:	55                   	push   ebp
c0009a01:	57                   	push   edi
c0009a02:	56                   	push   esi
c0009a03:	53                   	push   ebx
c0009a04:	83 ec 1c             	sub    esp,0x1c
c0009a07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a0f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a15:	77 0b                	ja     c0009a22 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a17:	0f 20 d8             	mov    eax,cr3
c0009a1a:	0f 20 d8             	mov    eax,cr3
c0009a1d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a20:	75 47                	jne    c0009a69 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a26:	09 d8                	or     eax,ebx
c0009a28:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a2d:	75 57                	jne    c0009a86 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a2f:	89 de                	mov    esi,ebx
c0009a31:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a34:	c1 ee 16             	shr    esi,0x16
c0009a37:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a3e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a42:	74 54                	je     c0009a98 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a4e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a52:	c1 e6 0c             	shl    esi,0xc
c0009a55:	c1 eb 0a             	shr    ebx,0xa
c0009a58:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a5e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a61:	83 c4 1c             	add    esp,0x1c
c0009a64:	5b                   	pop    ebx
c0009a65:	5e                   	pop    esi
c0009a66:	5f                   	pop    edi
c0009a67:	5d                   	pop    ebp
c0009a68:	c3                   	ret    
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	68 78 f3 01 c0       	push   0xc001f378
c0009a71:	e8 84 0b 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0009a76:	83 c4 10             	add    esp,0x10
c0009a79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a7d:	09 d8                	or     eax,ebx
c0009a7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a84:	74 a9                	je     c0009a2f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a86:	83 ec 0c             	sub    esp,0xc
c0009a89:	68 e0 f3 01 c0       	push   0xc001f3e0
c0009a8e:	e8 28 69 00 00       	call   c00103bb <KePanic(char const*)>
c0009a93:	83 c4 10             	add    esp,0x10
c0009a96:	eb 97                	jmp    c0009a2f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a9c:	e8 a0 e0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009aa1:	83 ec 0c             	sub    esp,0xc
c0009aa4:	89 c5                	mov    ebp,eax
c0009aa6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009aac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ab0:	6a 01                	push   0x1
c0009ab2:	e8 86 f8 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009ab7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009abe:	6a 01                	push   0x1
c0009ac0:	50                   	push   eax
c0009ac1:	55                   	push   ebp
c0009ac2:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ac8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009acc:	51                   	push   ecx
c0009acd:	e8 28 02 00 00       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ad2:	83 c4 1c             	add    esp,0x1c
c0009ad5:	68 00 10 00 00       	push   0x1000
c0009ada:	6a 00                	push   0x0
c0009adc:	50                   	push   eax
c0009add:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ae1:	e8 da 69 ff ff       	call   c00004c0 <memset>
c0009ae6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009aea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aed:	e8 3f fb ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0009af2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009af6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009af9:	83 c4 10             	add    esp,0x10
c0009afc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009aff:	e9 40 ff ff ff       	jmp    c0009a44 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b04 <VAS::allocatePages(int, int)>:
c0009b04:	55                   	push   ebp
c0009b05:	57                   	push   edi
c0009b06:	56                   	push   esi
c0009b07:	53                   	push   ebx
c0009b08:	83 ec 1c             	sub    esp,0x1c
c0009b0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b0f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b1a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b20:	83 e0 01             	and    eax,0x1
c0009b23:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b27:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b2b:	0f 85 cc 00 00 00    	jne    c0009bfd <VAS::allocatePages(int, int)+0xf9>
c0009b31:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b38:	85 c0                	test   eax,eax
c0009b3a:	0f 84 a1 00 00 00    	je     c0009be1 <VAS::allocatePages(int, int)+0xdd>
c0009b40:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b48:	c1 e6 0c             	shl    esi,0xc
c0009b4b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b4f:	85 c0                	test   eax,eax
c0009b51:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b54:	7e 33                	jle    c0009b89 <VAS::allocatePages(int, int)+0x85>
c0009b56:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b5e:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b64:	e8 d8 df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009b69:	55                   	push   ebp
c0009b6a:	53                   	push   ebx
c0009b6b:	50                   	push   eax
c0009b6c:	57                   	push   edi
c0009b6d:	e8 8e fe ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b72:	83 c4 10             	add    esp,0x10
c0009b75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7a:	74 03                	je     c0009b7f <VAS::allocatePages(int, int)+0x7b>
c0009b7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b85:	39 de                	cmp    esi,ebx
c0009b87:	75 db                	jne    c0009b64 <VAS::allocatePages(int, int)+0x60>
c0009b89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8e:	75 12                	jne    c0009ba2 <VAS::allocatePages(int, int)+0x9e>
c0009b90:	0f 20 d8             	mov    eax,cr3
c0009b93:	0f 22 d8             	mov    cr3,eax
c0009b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b9a:	83 c4 1c             	add    esp,0x1c
c0009b9d:	5b                   	pop    ebx
c0009b9e:	5e                   	pop    esi
c0009b9f:	5f                   	pop    edi
c0009ba0:	5d                   	pop    ebp
c0009ba1:	c3                   	ret    
c0009ba2:	c1 ee 0a             	shr    esi,0xa
c0009ba5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ba9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009baf:	c1 eb 0a             	shr    ebx,0xa
c0009bb2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bb8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bbe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bc4:	39 c3                	cmp    ebx,eax
c0009bc6:	77 ce                	ja     c0009b96 <VAS::allocatePages(int, int)+0x92>
c0009bc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bd1:	39 d8                	cmp    eax,ebx
c0009bd3:	73 f3                	jae    c0009bc8 <VAS::allocatePages(int, int)+0xc4>
c0009bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd9:	83 c4 1c             	add    esp,0x1c
c0009bdc:	5b                   	pop    ebx
c0009bdd:	5e                   	pop    esi
c0009bde:	5f                   	pop    edi
c0009bdf:	5d                   	pop    ebp
c0009be0:	c3                   	ret    
c0009be1:	83 ec 0c             	sub    esp,0xc
c0009be4:	68 04 f4 01 c0       	push   0xc001f404
c0009be9:	e8 cd 67 00 00       	call   c00103bb <KePanic(char const*)>
c0009bee:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bf5:	83 c4 10             	add    esp,0x10
c0009bf8:	e9 43 ff ff ff       	jmp    c0009b40 <VAS::allocatePages(int, int)+0x3c>
c0009bfd:	83 ec 0c             	sub    esp,0xc
c0009c00:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c04:	51                   	push   ecx
c0009c05:	e8 33 f7 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009c0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c0e:	83 c4 10             	add    esp,0x10
c0009c11:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c16:	0f 87 9b 00 00 00    	ja     c0009cb7 <VAS::allocatePages(int, int)+0x1b3>
c0009c1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c20:	85 d2                	test   edx,edx
c0009c22:	7e 3c                	jle    c0009c60 <VAS::allocatePages(int, int)+0x15c>
c0009c24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c30:	c1 e5 0c             	shl    ebp,0xc
c0009c33:	81 ce 00 04 00 00    	or     esi,0x400
c0009c39:	01 dd                	add    ebp,ebx
c0009c3b:	e8 01 df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009c40:	56                   	push   esi
c0009c41:	53                   	push   ebx
c0009c42:	50                   	push   eax
c0009c43:	57                   	push   edi
c0009c44:	e8 b7 fd ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c49:	83 c4 10             	add    esp,0x10
c0009c4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c51:	74 03                	je     c0009c56 <VAS::allocatePages(int, int)+0x152>
c0009c53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c56:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c5c:	39 dd                	cmp    ebp,ebx
c0009c5e:	75 db                	jne    c0009c3b <VAS::allocatePages(int, int)+0x137>
c0009c60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c65:	0f 84 25 ff ff ff    	je     c0009b90 <VAS::allocatePages(int, int)+0x8c>
c0009c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c73:	89 d3                	mov    ebx,edx
c0009c75:	c1 e0 0c             	shl    eax,0xc
c0009c78:	c1 eb 0a             	shr    ebx,0xa
c0009c7b:	01 d0                	add    eax,edx
c0009c7d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c83:	c1 e8 0a             	shr    eax,0xa
c0009c86:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	2d 00 00 40 00       	sub    eax,0x400000
c0009c96:	39 c3                	cmp    ebx,eax
c0009c98:	0f 87 f8 fe ff ff    	ja     c0009b96 <VAS::allocatePages(int, int)+0x92>
c0009c9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca7:	39 d8                	cmp    eax,ebx
c0009ca9:	73 f3                	jae    c0009c9e <VAS::allocatePages(int, int)+0x19a>
c0009cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009caf:	83 c4 1c             	add    esp,0x1c
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cc2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cc9:	0f 84 4d ff ff ff    	je     c0009c1c <VAS::allocatePages(int, int)+0x118>
c0009ccf:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009cd7:	e9 40 ff ff ff       	jmp    c0009c1c <VAS::allocatePages(int, int)+0x118>

c0009cdc <VAS::setCPUSpecific(unsigned long)>:
c0009cdc:	83 ec 0c             	sub    esp,0xc
c0009cdf:	6a 05                	push   0x5
c0009ce1:	68 00 00 40 c2       	push   0xc2400000
c0009ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cea:	50                   	push   eax
c0009ceb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cef:	52                   	push   edx
c0009cf0:	e8 0b fd ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cf5:	83 c4 1c             	add    esp,0x1c
c0009cf8:	c3                   	ret    
c0009cf9:	90                   	nop

c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009cfa:	55                   	push   ebp
c0009cfb:	57                   	push   edi
c0009cfc:	56                   	push   esi
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 1c             	sub    esp,0x1c
c0009d01:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d06:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d10:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d14:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d1a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d1e:	83 e0 01             	and    eax,0x1
c0009d21:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d29:	85 c0                	test   eax,eax
c0009d2b:	7e 39                	jle    c0009d66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d31:	89 f3                	mov    ebx,esi
c0009d33:	c1 e0 0c             	shl    eax,0xc
c0009d36:	01 f0                	add    eax,esi
c0009d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d3c:	55                   	push   ebp
c0009d3d:	53                   	push   ebx
c0009d3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d42:	29 f0                	sub    eax,esi
c0009d44:	01 d8                	add    eax,ebx
c0009d46:	50                   	push   eax
c0009d47:	57                   	push   edi
c0009d48:	e8 b3 fc ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d4d:	83 c4 10             	add    esp,0x10
c0009d50:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d55:	74 03                	je     c0009d5a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d60:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d64:	75 d6                	jne    c0009d3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d6b:	75 10                	jne    c0009d7d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d6d:	0f 20 d8             	mov    eax,cr3
c0009d70:	0f 22 d8             	mov    cr3,eax
c0009d73:	83 c4 1c             	add    esp,0x1c
c0009d76:	89 f0                	mov    eax,esi
c0009d78:	5b                   	pop    ebx
c0009d79:	5e                   	pop    esi
c0009d7a:	5f                   	pop    edi
c0009d7b:	5d                   	pop    ebp
c0009d7c:	c3                   	ret    
c0009d7d:	89 f3                	mov    ebx,esi
c0009d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d83:	c1 eb 0a             	shr    ebx,0xa
c0009d86:	c1 e0 0c             	shl    eax,0xc
c0009d89:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d8f:	01 f0                	add    eax,esi
c0009d91:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d97:	c1 e8 0a             	shr    eax,0xa
c0009d9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d9f:	2d 00 00 40 00       	sub    eax,0x400000
c0009da4:	39 c3                	cmp    ebx,eax
c0009da6:	77 cb                	ja     c0009d73 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009da8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dab:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009db1:	39 d8                	cmp    eax,ebx
c0009db3:	73 f3                	jae    c0009da8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009db5:	83 c4 1c             	add    esp,0x1c
c0009db8:	89 f0                	mov    eax,esi
c0009dba:	5b                   	pop    ebx
c0009dbb:	5e                   	pop    esi
c0009dbc:	5f                   	pop    edi
c0009dbd:	5d                   	pop    ebp
c0009dbe:	c3                   	ret    
c0009dbf:	90                   	nop

c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dc0:	55                   	push   ebp
c0009dc1:	57                   	push   edi
c0009dc2:	56                   	push   esi
c0009dc3:	53                   	push   ebx
c0009dc4:	83 ec 1c             	sub    esp,0x1c
c0009dc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009dcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009dcf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009dd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009dd7:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ddc:	75 4a                	jne    c0009e28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dde:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009de2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009de5:	c1 eb 16             	shr    ebx,0x16
c0009de8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009def:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009df3:	74 4d                	je     c0009e42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009df5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009df9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009dfd:	c1 e8 0a             	shr    eax,0xa
c0009e00:	80 fa 01             	cmp    dl,0x1
c0009e03:	19 d2                	sbb    edx,edx
c0009e05:	c1 e3 0c             	shl    ebx,0xc
c0009e08:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e0c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e12:	25 fc 0f 00 00       	and    eax,0xffc
c0009e17:	01 d8                	add    eax,ebx
c0009e19:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e20:	83 c4 1c             	add    esp,0x1c
c0009e23:	5b                   	pop    ebx
c0009e24:	5e                   	pop    esi
c0009e25:	5f                   	pop    edi
c0009e26:	5d                   	pop    ebp
c0009e27:	c3                   	ret    
c0009e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e2c:	83 ec 0c             	sub    esp,0xc
c0009e2f:	68 30 f4 01 c0       	push   0xc001f430
c0009e34:	e8 82 65 00 00       	call   c00103bb <KePanic(char const*)>
c0009e39:	83 c4 10             	add    esp,0x10
c0009e3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e40:	eb 9c                	jmp    c0009dde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e46:	e8 f6 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009e4b:	83 ec 0c             	sub    esp,0xc
c0009e4e:	89 c5                	mov    ebp,eax
c0009e50:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e5a:	6a 01                	push   0x1
c0009e5c:	e8 dc f4 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009e61:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e68:	6a 01                	push   0x1
c0009e6a:	50                   	push   eax
c0009e6b:	55                   	push   ebp
c0009e6c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e72:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e76:	51                   	push   ecx
c0009e77:	e8 7e fe ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e7c:	83 c4 1c             	add    esp,0x1c
c0009e7f:	68 00 10 00 00       	push   0x1000
c0009e84:	6a 00                	push   0x0
c0009e86:	50                   	push   eax
c0009e87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e8b:	e8 30 66 ff ff       	call   c00004c0 <memset>
c0009e90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e94:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e97:	e8 95 f7 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e9c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e9f:	83 c4 10             	add    esp,0x10
c0009ea2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009ea5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ea9:	e9 47 ff ff ff       	jmp    c0009df5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009eae <VAS::VAS(bool)>:
c0009eae:	53                   	push   ebx
c0009eaf:	83 ec 28             	sub    esp,0x28
c0009eb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eb6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ed8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009edb:	e8 61 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009ee0:	89 c2                	mov    edx,eax
c0009ee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ee9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009eef:	83 ec 0c             	sub    esp,0xc
c0009ef2:	6a 01                	push   0x1
c0009ef4:	e8 44 f4 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	89 c2                	mov    edx,eax
c0009efe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f02:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f05:	83 ec 0c             	sub    esp,0xc
c0009f08:	6a 03                	push   0x3
c0009f0a:	6a 01                	push   0x1
c0009f0c:	52                   	push   edx
c0009f0d:	50                   	push   eax
c0009f0e:	53                   	push   ebx
c0009f0f:	e8 e6 fd ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f14:	83 c4 20             	add    esp,0x20
c0009f17:	89 c2                	mov    edx,eax
c0009f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f30:	7f 1c                	jg     c0009f4e <VAS::VAS(bool)+0xa0>
c0009f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f3d:	c1 e2 02             	shl    edx,0x2
c0009f40:	01 d0                	add    eax,edx
c0009f42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f4c:	eb da                	jmp    c0009f28 <VAS::VAS(bool)+0x7a>
c0009f4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f5e:	7f 7a                	jg     c0009fda <VAS::VAS(bool)+0x12c>
c0009f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f64:	2d 00 02 00 00       	sub    eax,0x200
c0009f69:	c1 e0 0c             	shl    eax,0xc
c0009f6c:	83 c8 05             	or     eax,0x5
c0009f6f:	89 c2                	mov    edx,eax
c0009f71:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f7c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f82:	83 e0 10             	and    eax,0x10
c0009f85:	84 c0                	test   al,al
c0009f87:	74 07                	je     c0009f90 <VAS::VAS(bool)+0xe2>
c0009f89:	b8 00 01 00 00       	mov    eax,0x100
c0009f8e:	eb 05                	jmp    c0009f95 <VAS::VAS(bool)+0xe7>
c0009f90:	b8 00 00 00 00       	mov    eax,0x0
c0009f95:	09 d0                	or     eax,edx
c0009f97:	89 c1                	mov    ecx,eax
c0009f99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fa0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fa4:	c1 e2 02             	shl    edx,0x2
c0009fa7:	01 d0                	add    eax,edx
c0009fa9:	89 ca                	mov    edx,ecx
c0009fab:	89 10                	mov    DWORD PTR [eax],edx
c0009fad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fb1:	2d 40 03 00 00       	sub    eax,0x340
c0009fb6:	83 f8 7f             	cmp    eax,0x7f
c0009fb9:	77 16                	ja     c0009fd1 <VAS::VAS(bool)+0x123>
c0009fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fbf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fc6:	c1 e2 02             	shl    edx,0x2
c0009fc9:	01 d0                	add    eax,edx
c0009fcb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fd1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fd5:	e9 7c ff ff ff       	jmp    c0009f56 <VAS::VAS(bool)+0xa8>
c0009fda:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fdf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009feb:	83 e0 10             	and    eax,0x10
c0009fee:	84 c0                	test   al,al
c0009ff0:	74 07                	je     c0009ff9 <VAS::VAS(bool)+0x14b>
c0009ff2:	b8 03 41 00 00       	mov    eax,0x4103
c0009ff7:	eb 05                	jmp    c0009ffe <VAS::VAS(bool)+0x150>
c0009ff9:	b8 03 40 00 00       	mov    eax,0x4003
c0009ffe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a002:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a005:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a00b:	89 02                	mov    DWORD PTR [edx],eax
c000a00d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a012:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a018:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a01e:	83 ec 08             	sub    esp,0x8
c000a021:	50                   	push   eax
c000a022:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a026:	e8 b1 fc ff ff       	call   c0009cdc <VAS::setCPUSpecific(unsigned long)>
c000a02b:	83 c4 10             	add    esp,0x10
c000a02e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a032:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a035:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a03a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a040:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a046:	83 e0 10             	and    eax,0x10
c000a049:	84 c0                	test   al,al
c000a04b:	74 07                	je     c000a054 <VAS::VAS(bool)+0x1a6>
c000a04d:	b8 00 01 00 00       	mov    eax,0x100
c000a052:	eb 05                	jmp    c000a059 <VAS::VAS(bool)+0x1ab>
c000a054:	b8 00 00 00 00       	mov    eax,0x0
c000a059:	09 c2                	or     edx,eax
c000a05b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a05f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a062:	05 fc 0f 00 00       	add    eax,0xffc
c000a067:	83 ca 03             	or     edx,0x3
c000a06a:	89 10                	mov    DWORD PTR [eax],edx
c000a06c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a071:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a077:	83 ec 0c             	sub    esp,0xc
c000a07a:	50                   	push   eax
c000a07b:	e8 4c 1c 00 00       	call   c000bccc <Device::getName()>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	83 ec 08             	sub    esp,0x8
c000a086:	68 d3 f4 01 c0       	push   0xc001f4d3
c000a08b:	50                   	push   eax
c000a08c:	e8 3f 66 ff ff       	call   c00006d0 <strcmp>
c000a091:	83 c4 10             	add    esp,0x10
c000a094:	85 c0                	test   eax,eax
c000a096:	0f 94 c0             	sete   al
c000a099:	84 c0                	test   al,al
c000a09b:	0f 84 87 00 00 00    	je     c000a128 <VAS::VAS(bool)+0x27a>
c000a0a1:	fa                   	cli    
c000a0a2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0a7:	40                   	inc    eax
c000a0a8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0ad:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0b8:	05 7c 09 00 00       	add    eax,0x97c
c000a0bd:	83 ec 0c             	sub    esp,0xc
c000a0c0:	50                   	push   eax
c000a0c1:	e8 9c d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0c6:	83 c4 10             	add    esp,0x10
c000a0c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0ce:	89 c3                	mov    ebx,eax
c000a0d0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0db:	05 7c 09 00 00       	add    eax,0x97c
c000a0e0:	83 ec 0c             	sub    esp,0xc
c000a0e3:	50                   	push   eax
c000a0e4:	e8 79 d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0e9:	83 c4 10             	add    esp,0x10
c000a0ec:	83 ec 08             	sub    esp,0x8
c000a0ef:	50                   	push   eax
c000a0f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a0f4:	e8 19 f5 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a0f9:	83 c4 10             	add    esp,0x10
c000a0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a103:	6a 11                	push   0x11
c000a105:	53                   	push   ebx
c000a106:	50                   	push   eax
c000a107:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10b:	e8 f0 f8 ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a110:	83 c4 10             	add    esp,0x10
c000a113:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a118:	48                   	dec    eax
c000a119:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a11e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a123:	85 c0                	test   eax,eax
c000a125:	75 01                	jne    c000a128 <VAS::VAS(bool)+0x27a>
c000a127:	fb                   	sti    
c000a128:	90                   	nop
c000a129:	83 c4 28             	add    esp,0x28
c000a12c:	5b                   	pop    ebx
c000a12d:	c3                   	ret    

c000a12e <VAS::evict(unsigned long)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a139:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a141:	e8 38 f3 ff ff       	call   c000947e <Virt::allocateSwapfilePage()>
c000a146:	8b 0d ac 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212ac
c000a14c:	89 c7                	mov    edi,eax
c000a14e:	85 c9                	test   ecx,ecx
c000a150:	7e 3e                	jle    c000a190 <VAS::evict(unsigned long)+0x62>
c000a152:	89 ee                	mov    esi,ebp
c000a154:	31 db                	xor    ebx,ebx
c000a156:	83 ec 0c             	sub    esp,0xc
c000a159:	57                   	push   edi
c000a15a:	e8 0d f3 ff ff       	call   c000946c <Virt::swapIDToSector(unsigned long)>
c000a15f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a162:	01 d8                	add    eax,ebx
c000a164:	6a 01                	push   0x1
c000a166:	31 d2                	xor    edx,edx
c000a168:	43                   	inc    ebx
c000a169:	52                   	push   edx
c000a16a:	81 c6 00 02 00 00    	add    esi,0x200
c000a170:	50                   	push   eax
c000a171:	0f be 05 b8 12 02 c0 	movsx  eax,BYTE PTR ds:0xc00212b8
c000a178:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a17f:	52                   	push   edx
c000a180:	e8 31 2c 00 00       	call   c000cdb6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a185:	83 c4 20             	add    esp,0x20
c000a188:	39 1d ac 12 02 c0    	cmp    DWORD PTR ds:0xc00212ac,ebx
c000a18e:	7f c6                	jg     c000a156 <VAS::evict(unsigned long)+0x28>
c000a190:	83 ec 08             	sub    esp,0x8
c000a193:	c1 e7 0b             	shl    edi,0xb
c000a196:	55                   	push   ebp
c000a197:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a19b:	50                   	push   eax
c000a19c:	e8 71 f4 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a1a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1a3:	89 d1                	mov    ecx,edx
c000a1a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1ab:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1b1:	09 cf                	or     edi,ecx
c000a1b3:	89 38                	mov    DWORD PTR [eax],edi
c000a1b5:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1b8:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1be:	e8 1c d9 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000a1c3:	0f 20 d8             	mov    eax,cr3
c000a1c6:	0f 22 d8             	mov    cr3,eax
c000a1c9:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1ce:	c7 44 24 40 e1 f4 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f4e1
c000a1d6:	8d 50 01             	lea    edx,[eax+0x1]
c000a1d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1dd:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1e3:	83 c4 2c             	add    esp,0x2c
c000a1e6:	5b                   	pop    ebx
c000a1e7:	5e                   	pop    esi
c000a1e8:	5f                   	pop    edi
c000a1e9:	5d                   	pop    ebp
c000a1ea:	e9 0b 04 00 00       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000a1ef:	90                   	nop

c000a1f0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1f0:	55                   	push   ebp
c000a1f1:	57                   	push   edi
c000a1f2:	56                   	push   esi
c000a1f3:	53                   	push   ebx
c000a1f4:	83 ec 14             	sub    esp,0x14
c000a1f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a1fb:	53                   	push   ebx
c000a1fc:	68 f2 f4 01 c0       	push   0xc001f4f2
c000a201:	e8 f4 03 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a20f:	74 21                	je     c000a232 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	53                   	push   ebx
c000a215:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a219:	57                   	push   edi
c000a21a:	e8 f3 f3 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	89 c6                	mov    esi,eax
c000a224:	85 c0                	test   eax,eax
c000a226:	74 0a                	je     c000a232 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a228:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a22a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a230:	74 0a                	je     c000a23c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a232:	31 c0                	xor    eax,eax
c000a234:	83 c4 0c             	add    esp,0xc
c000a237:	5b                   	pop    ebx
c000a238:	5e                   	pop    esi
c000a239:	5f                   	pop    edi
c000a23a:	5d                   	pop    ebp
c000a23b:	c3                   	ret    
c000a23c:	e8 00 d9 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a241:	c1 ed 0b             	shr    ebp,0xb
c000a244:	8b 16                	mov    edx,DWORD PTR [esi]
c000a246:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a24c:	09 c2                	or     edx,eax
c000a24e:	81 ca 01 08 00 00    	or     edx,0x801
c000a254:	89 16                	mov    DWORD PTR [esi],edx
c000a256:	8b 35 ac 12 02 c0    	mov    esi,DWORD PTR ds:0xc00212ac
c000a25c:	85 f6                	test   esi,esi
c000a25e:	7e 3e                	jle    c000a29e <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a260:	89 df                	mov    edi,ebx
c000a262:	31 f6                	xor    esi,esi
c000a264:	83 ec 0c             	sub    esp,0xc
c000a267:	55                   	push   ebp
c000a268:	e8 ff f1 ff ff       	call   c000946c <Virt::swapIDToSector(unsigned long)>
c000a26d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a270:	01 f0                	add    eax,esi
c000a272:	6a 01                	push   0x1
c000a274:	31 d2                	xor    edx,edx
c000a276:	46                   	inc    esi
c000a277:	52                   	push   edx
c000a278:	81 c7 00 02 00 00    	add    edi,0x200
c000a27e:	50                   	push   eax
c000a27f:	0f be 05 b8 12 02 c0 	movsx  eax,BYTE PTR ds:0xc00212b8
c000a286:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a28d:	51                   	push   ecx
c000a28e:	e8 b7 2a 00 00       	call   c000cd4a <LogicalDisk::read(unsigned long long, int, void*)>
c000a293:	83 c4 20             	add    esp,0x20
c000a296:	39 35 ac 12 02 c0    	cmp    DWORD PTR ds:0xc00212ac,esi
c000a29c:	7f c6                	jg     c000a264 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a29e:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2a3:	48                   	dec    eax
c000a2a4:	52                   	push   edx
c000a2a5:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2aa:	50                   	push   eax
c000a2ab:	53                   	push   ebx
c000a2ac:	68 05 f5 01 c0       	push   0xc001f505
c000a2b1:	e8 44 03 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a2b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2b9:	e8 90 f1 ff ff       	call   c000944e <Virt::freeSwapfilePage(unsigned long)>
c000a2be:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	48                   	dec    eax
c000a2c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	75 01                	jne    c000a2d1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2d0:	fb                   	sti    
c000a2d1:	0f 20 d8             	mov    eax,cr3
c000a2d4:	0f 22 d8             	mov    cr3,eax
c000a2d7:	b0 01                	mov    al,0x1
c000a2d9:	e9 56 ff ff ff       	jmp    c000a234 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2de <VAS::scanForEviction()>:
c000a2de:	57                   	push   edi
c000a2df:	31 ff                	xor    edi,edi
c000a2e1:	56                   	push   esi
c000a2e2:	53                   	push   ebx
c000a2e3:	83 ec 10             	sub    esp,0x10
c000a2e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2ea:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2ed:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2f3:	75 0e                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a2f5:	89 da                	mov    edx,ebx
c000a2f7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2fa:	c1 ea 16             	shr    edx,0x16
c000a2fd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a301:	74 4e                	je     c000a351 <VAS::scanForEviction()+0x73>
c000a303:	53                   	push   ebx
c000a304:	56                   	push   esi
c000a305:	e8 08 f3 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a30a:	5a                   	pop    edx
c000a30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a30d:	59                   	pop    ecx
c000a30e:	89 d1                	mov    ecx,edx
c000a310:	81 e1 01 08 00 00    	and    ecx,0x801
c000a316:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a31c:	74 3e                	je     c000a35c <VAS::scanForEviction()+0x7e>
c000a31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a324:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a32a:	76 2b                	jbe    c000a357 <VAS::scanForEviction()+0x79>
c000a32c:	47                   	inc    edi
c000a32d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a334:	83 ff 03             	cmp    edi,0x3
c000a337:	74 32                	je     c000a36b <VAS::scanForEviction()+0x8d>
c000a339:	31 db                	xor    ebx,ebx
c000a33b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a341:	75 c0                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a343:	89 da                	mov    edx,ebx
c000a345:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a348:	c1 ea 16             	shr    edx,0x16
c000a34b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a34f:	75 b2                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a351:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a357:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a35a:	eb 91                	jmp    c000a2ed <VAS::scanForEviction()+0xf>
c000a35c:	f6 c2 20             	test   dl,0x20
c000a35f:	74 13                	je     c000a374 <VAS::scanForEviction()+0x96>
c000a361:	83 e2 df             	and    edx,0xffffffdf
c000a364:	89 10                	mov    DWORD PTR [eax],edx
c000a366:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a369:	eb b3                	jmp    c000a31e <VAS::scanForEviction()+0x40>
c000a36b:	83 c4 10             	add    esp,0x10
c000a36e:	31 c0                	xor    eax,eax
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	5f                   	pop    edi
c000a373:	c3                   	ret    
c000a374:	83 ec 08             	sub    esp,0x8
c000a377:	89 d0                	mov    eax,edx
c000a379:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a37e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a382:	53                   	push   ebx
c000a383:	68 1a f5 01 c0       	push   0xc001f51a
c000a388:	e8 6d 02 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a38d:	58                   	pop    eax
c000a38e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a391:	5a                   	pop    edx
c000a392:	51                   	push   ecx
c000a393:	56                   	push   esi
c000a394:	e8 95 fd ff ff       	call   c000a12e <VAS::evict(unsigned long)>
c000a399:	5b                   	pop    ebx
c000a39a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a39d:	5f                   	pop    edi
c000a39e:	50                   	push   eax
c000a39f:	68 2e f5 01 c0       	push   0xc001f52e
c000a3a4:	e8 51 02 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a3a9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	5b                   	pop    ebx
c000a3bb:	5e                   	pop    esi
c000a3bc:	5f                   	pop    edi
c000a3bd:	c3                   	ret    

c000a3be <mapVASFirstTime>:
c000a3be:	55                   	push   ebp
c000a3bf:	57                   	push   edi
c000a3c0:	56                   	push   esi
c000a3c1:	53                   	push   ebx
c000a3c2:	83 ec 0c             	sub    esp,0xc
c000a3c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3ca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3cd:	4a                   	dec    edx
c000a3ce:	0f 84 c8 00 00 00    	je     c000a49c <mapVASFirstTime+0xde>
c000a3d4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3d7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3da:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3df:	c1 e5 15             	shl    ebp,0x15
c000a3e2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3e7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3ed:	29 eb                	sub    ebx,ebp
c000a3ef:	29 ef                	sub    edi,ebp
c000a3f1:	e8 4b d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a3f6:	83 ec 0c             	sub    esp,0xc
c000a3f9:	68 03 04 00 00       	push   0x403
c000a3fe:	6a 01                	push   0x1
c000a400:	53                   	push   ebx
c000a401:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a407:	50                   	push   eax
c000a408:	56                   	push   esi
c000a409:	e8 ec f8 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a40e:	83 c4 20             	add    esp,0x20
c000a411:	39 fb                	cmp    ebx,edi
c000a413:	75 dc                	jne    c000a3f1 <mapVASFirstTime+0x33>
c000a415:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a41a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a41f:	29 eb                	sub    ebx,ebp
c000a421:	29 ef                	sub    edi,ebp
c000a423:	e8 19 d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a428:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a42c:	19 d2                	sbb    edx,edx
c000a42e:	83 ec 0c             	sub    esp,0xc
c000a431:	83 e2 04             	and    edx,0x4
c000a434:	81 c2 03 04 00 00    	add    edx,0x403
c000a43a:	52                   	push   edx
c000a43b:	6a 01                	push   0x1
c000a43d:	53                   	push   ebx
c000a43e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a444:	50                   	push   eax
c000a445:	56                   	push   esi
c000a446:	e8 af f8 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a44b:	83 c4 20             	add    esp,0x20
c000a44e:	39 df                	cmp    edi,ebx
c000a450:	75 d1                	jne    c000a423 <mapVASFirstTime+0x65>
c000a452:	83 ec 0c             	sub    esp,0xc
c000a455:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a45a:	6a 04                	push   0x4
c000a45c:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a462:	6a ff                	push   0xffffffff
c000a464:	c1 eb 0c             	shr    ebx,0xc
c000a467:	53                   	push   ebx
c000a468:	68 00 20 02 c0       	push   0xc0022000
c000a46d:	56                   	push   esi
c000a46e:	e8 21 f3 ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000a473:	83 c4 14             	add    esp,0x14
c000a476:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a47b:	6a 04                	push   0x4
c000a47d:	6a ff                	push   0xffffffff
c000a47f:	53                   	push   ebx
c000a480:	68 00 20 02 c0       	push   0xc0022000
c000a485:	50                   	push   eax
c000a486:	e8 09 f3 ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000a48b:	0f 20 d8             	mov    eax,cr3
c000a48e:	0f 22 d8             	mov    cr3,eax
c000a491:	83 c4 20             	add    esp,0x20
c000a494:	83 c4 0c             	add    esp,0xc
c000a497:	5b                   	pop    ebx
c000a498:	5e                   	pop    esi
c000a499:	5f                   	pop    edi
c000a49a:	5d                   	pop    ebp
c000a49b:	c3                   	ret    
c000a49c:	83 ec 0c             	sub    esp,0xc
c000a49f:	68 41 f5 01 c0       	push   0xc001f541
c000a4a4:	e8 51 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4a9:	83 c4 10             	add    esp,0x10
c000a4ac:	83 c4 0c             	add    esp,0xc
c000a4af:	5b                   	pop    ebx
c000a4b0:	5e                   	pop    esi
c000a4b1:	5f                   	pop    edi
c000a4b2:	5d                   	pop    ebp
c000a4b3:	c3                   	ret    

c000a4b4 <__cxa_atexit>:
c000a4b4:	31 c0                	xor    eax,eax
c000a4b6:	c3                   	ret    

c000a4b7 <__cxa_finalize>:
c000a4b7:	c3                   	ret    

c000a4b8 <__stack_chk_fail>:
c000a4b8:	55                   	push   ebp
c000a4b9:	89 e5                	mov    ebp,esp
c000a4bb:	83 ec 10             	sub    esp,0x10
c000a4be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4c1:	68 5a f5 01 c0       	push   0xc001f55a
c000a4c6:	e8 2f 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4cb:	58                   	pop    eax
c000a4cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4cf:	5a                   	pop    edx
c000a4d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4d3:	68 5a f5 01 c0       	push   0xc001f55a
c000a4d8:	e8 1d 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4dd:	c7 04 24 62 f5 01 c0 	mov    DWORD PTR [esp],0xc001f562
c000a4e4:	e8 d2 5e 00 00       	call   c00103bb <KePanic(char const*)>
c000a4e9:	83 c4 10             	add    esp,0x10
c000a4ec:	c9                   	leave  
c000a4ed:	c3                   	ret    

c000a4ee <__cxa_pure_virtual>:
c000a4ee:	83 ec 18             	sub    esp,0x18
c000a4f1:	68 7a f5 01 c0       	push   0xc001f57a
c000a4f6:	e8 c0 5e 00 00       	call   c00103bb <KePanic(char const*)>
c000a4fb:	83 c4 1c             	add    esp,0x1c
c000a4fe:	c3                   	ret    

c000a4ff <operator new[](unsigned long)>:
c000a4ff:	e9 61 d3 ff ff       	jmp    c0007865 <malloc>

c000a504 <operator delete(void*, unsigned long)>:
c000a504:	e9 7c d3 ff ff       	jmp    c0007885 <rfree>

c000a509 <operator delete[](void*)>:
c000a509:	e9 77 d3 ff ff       	jmp    c0007885 <rfree>

c000a50e <operator delete[](void*, unsigned long)>:
c000a50e:	e9 72 d3 ff ff       	jmp    c0007885 <rfree>

c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a513:	55                   	push   ebp
c000a514:	b9 04 00 00 00       	mov    ecx,0x4
c000a519:	57                   	push   edi
c000a51a:	56                   	push   esi
c000a51b:	be cf f1 01 c0       	mov    esi,0xc001f1cf
c000a520:	53                   	push   ebx
c000a521:	83 ec 20             	sub    esp,0x20
c000a524:	a1 ce f1 01 c0       	mov    eax,ds:0xc001f1ce
c000a529:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a52d:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a531:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a535:	a1 db f1 01 c0       	mov    eax,ds:0xc001f1db
c000a53a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a53e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a542:	fc                   	cld    
c000a543:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a545:	89 ee                	mov    esi,ebp
c000a547:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a54b:	eb 02                	jmp    c000a54f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a54d:	89 c6                	mov    esi,eax
c000a54f:	31 d2                	xor    edx,edx
c000a551:	41                   	inc    ecx
c000a552:	89 f0                	mov    eax,esi
c000a554:	f7 f3                	div    ebx
c000a556:	39 de                	cmp    esi,ebx
c000a558:	73 f3                	jae    c000a54d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a55a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a55d:	eb 02                	jmp    c000a561 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a55f:	89 c5                	mov    ebp,eax
c000a561:	31 d2                	xor    edx,edx
c000a563:	49                   	dec    ecx
c000a564:	89 e8                	mov    eax,ebp
c000a566:	f7 f3                	div    ebx
c000a568:	39 dd                	cmp    ebp,ebx
c000a56a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a56e:	88 11                	mov    BYTE PTR [ecx],dl
c000a570:	73 ed                	jae    c000a55f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a572:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a576:	83 c4 20             	add    esp,0x20
c000a579:	5b                   	pop    ebx
c000a57a:	5e                   	pop    esi
c000a57b:	5f                   	pop    edi
c000a57c:	5d                   	pop    ebp
c000a57d:	c3                   	ret    

c000a57e <Dbg::logc(char)>:
c000a57e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a582:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a589:	75 12                	jne    c000a59d <Dbg::logc(char)+0x1f>
c000a58b:	ba fd 03 00 00       	mov    edx,0x3fd
c000a590:	ec                   	in     al,dx
c000a591:	a8 20                	test   al,0x20
c000a593:	74 fb                	je     c000a590 <Dbg::logc(char)+0x12>
c000a595:	ba f8 03 00 00       	mov    edx,0x3f8
c000a59a:	88 c8                	mov    al,cl
c000a59c:	ee                   	out    dx,al
c000a59d:	c3                   	ret    

c000a59e <Dbg::logs(char*)>:
c000a59e:	53                   	push   ebx
c000a59f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5a6:	84 c0                	test   al,al
c000a5a8:	74 0f                	je     c000a5b9 <Dbg::logs(char*)+0x1b>
c000a5aa:	50                   	push   eax
c000a5ab:	43                   	inc    ebx
c000a5ac:	e8 cd ff ff ff       	call   c000a57e <Dbg::logc(char)>
c000a5b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b4:	5a                   	pop    edx
c000a5b5:	84 c0                	test   al,al
c000a5b7:	75 f1                	jne    c000a5aa <Dbg::logs(char*)+0xc>
c000a5b9:	5b                   	pop    ebx
c000a5ba:	c3                   	ret    

c000a5bb <Dbg::logWriteInt(unsigned int)>:
c000a5bb:	83 ec 10             	sub    esp,0x10
c000a5be:	6a 0a                	push   0xa
c000a5c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5c4:	50                   	push   eax
c000a5c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c9:	50                   	push   eax
c000a5ca:	e8 44 ff ff ff       	call   c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5cf:	50                   	push   eax
c000a5d0:	e8 c9 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a5d5:	83 c4 20             	add    esp,0x20
c000a5d8:	c3                   	ret    

c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5d9:	83 ec 10             	sub    esp,0x10
c000a5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5e0:	50                   	push   eax
c000a5e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5e5:	50                   	push   eax
c000a5e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ea:	52                   	push   edx
c000a5eb:	e8 23 ff ff ff       	call   c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5f0:	50                   	push   eax
c000a5f1:	e8 a8 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a5f6:	83 c4 20             	add    esp,0x20
c000a5f9:	c3                   	ret    

c000a5fa <Dbg::kprintf(char const*, ...)>:
c000a5fa:	55                   	push   ebp
c000a5fb:	57                   	push   edi
c000a5fc:	56                   	push   esi
c000a5fd:	53                   	push   ebx
c000a5fe:	83 ec 0c             	sub    esp,0xc
c000a601:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a605:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a60c:	74 08                	je     c000a616 <Dbg::kprintf(char const*, ...)+0x1c>
c000a60e:	83 c4 0c             	add    esp,0xc
c000a611:	5b                   	pop    ebx
c000a612:	5e                   	pop    esi
c000a613:	5f                   	pop    edi
c000a614:	5d                   	pop    ebp
c000a615:	c3                   	ret    
c000a616:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a61a:	31 ff                	xor    edi,edi
c000a61c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a620:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a623:	84 c0                	test   al,al
c000a625:	74 e7                	je     c000a60e <Dbg::kprintf(char const*, ...)+0x14>
c000a627:	8d 77 01             	lea    esi,[edi+0x1]
c000a62a:	3c 25                	cmp    al,0x25
c000a62c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a62f:	75 47                	jne    c000a678 <Dbg::kprintf(char const*, ...)+0x7e>
c000a631:	83 c7 02             	add    edi,0x2
c000a634:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a637:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a63a:	83 e8 25             	sub    eax,0x25
c000a63d:	3c 53                	cmp    al,0x53
c000a63f:	0f 87 d2 00 00 00    	ja     c000a717 <Dbg::kprintf(char const*, ...)+0x11d>
c000a645:	25 ff 00 00 00       	and    eax,0xff
c000a64a:	ff 24 85 90 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a70]
c000a651:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a655:	89 c8                	mov    eax,ecx
c000a657:	83 c1 04             	add    ecx,0x4
c000a65a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a65e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a660:	55                   	push   ebp
c000a661:	e8 55 ff ff ff       	call   c000a5bb <Dbg::logWriteInt(unsigned int)>
c000a666:	58                   	pop    eax
c000a667:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a66a:	84 c0                	test   al,al
c000a66c:	74 a0                	je     c000a60e <Dbg::kprintf(char const*, ...)+0x14>
c000a66e:	8d 77 01             	lea    esi,[edi+0x1]
c000a671:	3c 25                	cmp    al,0x25
c000a673:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a676:	74 b9                	je     c000a631 <Dbg::kprintf(char const*, ...)+0x37>
c000a678:	50                   	push   eax
c000a679:	89 f7                	mov    edi,esi
c000a67b:	e8 fe fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a680:	89 ee                	mov    esi,ebp
c000a682:	58                   	pop    eax
c000a683:	eb e2                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a685:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a689:	89 c8                	mov    eax,ecx
c000a68b:	83 c1 04             	add    ecx,0x4
c000a68e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a690:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a694:	50                   	push   eax
c000a695:	e8 04 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a69a:	58                   	pop    eax
c000a69b:	eb ca                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a69d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6a1:	89 d0                	mov    eax,edx
c000a6a3:	83 c2 04             	add    edx,0x4
c000a6a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6ac:	50                   	push   eax
c000a6ad:	e8 09 ff ff ff       	call   c000a5bb <Dbg::logWriteInt(unsigned int)>
c000a6b2:	58                   	pop    eax
c000a6b3:	eb b2                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b9:	89 d0                	mov    eax,edx
c000a6bb:	83 c2 04             	add    edx,0x4
c000a6be:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6c5:	50                   	push   eax
c000a6c6:	e8 b3 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a6cb:	58                   	pop    eax
c000a6cc:	eb 99                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6d2:	89 c8                	mov    eax,ecx
c000a6d4:	83 c1 04             	add    ecx,0x4
c000a6d7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6db:	6a 10                	push   0x10
c000a6dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6df:	51                   	push   ecx
c000a6e0:	e8 f4 fe ff ff       	call   c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6e5:	5d                   	pop    ebp
c000a6e6:	58                   	pop    eax
c000a6e7:	e9 7b ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6f0:	89 d0                	mov    eax,edx
c000a6f2:	83 c2 08             	add    edx,0x8
c000a6f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6f9:	6a 10                	push   0x10
c000a6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6fd:	50                   	push   eax
c000a6fe:	e8 d6 fe ff ff       	call   c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a703:	58                   	pop    eax
c000a704:	5a                   	pop    edx
c000a705:	e9 5d ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a70a:	6a 25                	push   0x25
c000a70c:	e8 6d fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a711:	5a                   	pop    edx
c000a712:	e9 50 ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a717:	6a 25                	push   0x25
c000a719:	e8 60 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a71e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a722:	50                   	push   eax
c000a723:	e8 56 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a728:	5a                   	pop    edx
c000a729:	59                   	pop    ecx
c000a72a:	e9 38 ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a72f:	90                   	nop

c000a730 <File::read(unsigned long long, void*, int*)>:
c000a730:	53                   	push   ebx
c000a731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a735:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a739:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a740:	3c 19                	cmp    al,0x19
c000a742:	77 35                	ja     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a744:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a74b:	85 c0                	test   eax,eax
c000a74d:	74 2a                	je     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a74f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a755:	85 c0                	test   eax,eax
c000a757:	74 20                	je     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a759:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a75d:	74 21                	je     c000a780 <File::read(unsigned long long, void*, int*)+0x50>
c000a75f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a761:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a765:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a773:	5b                   	pop    ebx
c000a774:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a777:	ff e0                	jmp    eax
c000a779:	b8 0b 00 00 00       	mov    eax,0xb
c000a77e:	eb 05                	jmp    c000a785 <File::read(unsigned long long, void*, int*)+0x55>
c000a780:	b8 05 00 00 00       	mov    eax,0x5
c000a785:	5b                   	pop    ebx
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <File::write(unsigned long long, void*, int*)>:
c000a788:	53                   	push   ebx
c000a789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a78d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a791:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a798:	3c 19                	cmp    al,0x19
c000a79a:	77 35                	ja     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a79c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7a3:	85 c0                	test   eax,eax
c000a7a5:	74 2a                	je     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7ad:	85 c0                	test   eax,eax
c000a7af:	74 20                	je     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7b5:	74 21                	je     c000a7d8 <File::write(unsigned long long, void*, int*)+0x50>
c000a7b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7cb:	5b                   	pop    ebx
c000a7cc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7cf:	ff e0                	jmp    eax
c000a7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7d6:	eb 05                	jmp    c000a7dd <File::write(unsigned long long, void*, int*)+0x55>
c000a7d8:	b8 05 00 00 00       	mov    eax,0x5
c000a7dd:	5b                   	pop    ebx
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <Directory::read(unsigned long long, void*, int*)>:
c000a7e0:	53                   	push   ebx
c000a7e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7f0:	3c 19                	cmp    al,0x19
c000a7f2:	77 35                	ja     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7f4:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7fb:	85 c0                	test   eax,eax
c000a7fd:	74 2a                	je     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7ff:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a805:	85 c0                	test   eax,eax
c000a807:	74 20                	je     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a80d:	74 21                	je     c000a830 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a80f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a811:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a815:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a823:	5b                   	pop    ebx
c000a824:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a827:	ff e0                	jmp    eax
c000a829:	b8 0b 00 00 00       	mov    eax,0xb
c000a82e:	eb 05                	jmp    c000a835 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a830:	b8 05 00 00 00       	mov    eax,0x5
c000a835:	5b                   	pop    ebx
c000a836:	c3                   	ret    
c000a837:	90                   	nop

c000a838 <Directory::write(unsigned long long, void*, int*)>:
c000a838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a83c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a843:	b8 0b 00 00 00       	mov    eax,0xb
c000a848:	80 fa 19             	cmp    dl,0x19
c000a84b:	77 18                	ja     c000a865 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a84d:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a854:	85 d2                	test   edx,edx
c000a856:	74 0d                	je     c000a865 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a858:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a85f:	19 c0                	sbb    eax,eax
c000a861:	83 e0 0a             	and    eax,0xa
c000a864:	40                   	inc    eax
c000a865:	c3                   	ret    

c000a866 <File::isAtty()>:
c000a866:	31 c0                	xor    eax,eax
c000a868:	c3                   	ret    
c000a869:	90                   	nop

c000a86a <Directory::isAtty()>:
c000a86a:	31 c0                	xor    eax,eax
c000a86c:	c3                   	ret    
c000a86d:	90                   	nop

c000a86e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a86e:	b8 0a 00 00 00       	mov    eax,0xa
c000a873:	c3                   	ret    

c000a874 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a874:	b8 0a 00 00 00       	mov    eax,0xa
c000a879:	c3                   	ret    

c000a87a <Filesystem::allocateSwapfile(char const*, int)>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	31 d2                	xor    edx,edx
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <File::~File()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000a888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a88c:	89 10                	mov    DWORD PTR [eax],edx
c000a88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a892:	83 ec 0c             	sub    esp,0xc
c000a895:	50                   	push   eax
c000a896:	e8 41 e8 ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	90                   	nop
c000a89f:	83 c4 0c             	add    esp,0xc
c000a8a2:	c3                   	ret    
c000a8a3:	90                   	nop

c000a8a4 <File::~File()>:
c000a8a4:	83 ec 0c             	sub    esp,0xc
c000a8a7:	83 ec 0c             	sub    esp,0xc
c000a8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ae:	e8 cd ff ff ff       	call   c000a880 <File::~File()>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	83 ec 08             	sub    esp,0x8
c000a8b9:	68 14 01 00 00       	push   0x114
c000a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c2:	e8 3d fc ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	83 c4 0c             	add    esp,0xc
c000a8cd:	c3                   	ret    

c000a8ce <Directory::~Directory()>:
c000a8ce:	83 ec 0c             	sub    esp,0xc
c000a8d1:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000a8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8da:	89 10                	mov    DWORD PTR [eax],edx
c000a8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e0:	83 ec 0c             	sub    esp,0xc
c000a8e3:	50                   	push   eax
c000a8e4:	e8 f3 e7 ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	90                   	nop
c000a8ed:	83 c4 0c             	add    esp,0xc
c000a8f0:	c3                   	ret    
c000a8f1:	90                   	nop

c000a8f2 <Directory::~Directory()>:
c000a8f2:	83 ec 0c             	sub    esp,0xc
c000a8f5:	83 ec 0c             	sub    esp,0xc
c000a8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8fc:	e8 cd ff ff ff       	call   c000a8ce <Directory::~Directory()>
c000a901:	83 c4 10             	add    esp,0x10
c000a904:	83 ec 08             	sub    esp,0x8
c000a907:	68 14 01 00 00       	push   0x114
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 ef fb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 c4 0c             	add    esp,0xc
c000a91b:	c3                   	ret    

c000a91c <Filesystem::Filesystem()>:
c000a91c:	ba e8 f6 01 c0       	mov    edx,0xc001f6e8
c000a921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a925:	89 10                	mov    DWORD PTR [eax],edx
c000a927:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a931:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a938:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a93d:	90                   	nop
c000a93e:	c3                   	ret    
c000a93f:	90                   	nop

c000a940 <Filesystem::~Filesystem()>:
c000a940:	ba e8 f6 01 c0       	mov    edx,0xc001f6e8
c000a945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a949:	89 10                	mov    DWORD PTR [eax],edx
c000a94b:	90                   	nop
c000a94c:	c3                   	ret    
c000a94d:	90                   	nop

c000a94e <Filesystem::~Filesystem()>:
c000a94e:	83 ec 0c             	sub    esp,0xc
c000a951:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a955:	e8 e6 ff ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c000a95a:	83 c4 04             	add    esp,0x4
c000a95d:	83 ec 08             	sub    esp,0x8
c000a960:	6a 08                	push   0x8
c000a962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a966:	e8 99 fb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	83 c4 0c             	add    esp,0xc
c000a971:	c3                   	ret    

c000a972 <Fs::getcwd(Process*, char*, int)>:
c000a972:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a976:	31 c0                	xor    eax,eax
c000a978:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a97b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a97f:	7d 15                	jge    c000a996 <Fs::getcwd(Process*, char*, int)+0x24>
c000a981:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a985:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a98c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a98f:	84 c9                	test   cl,cl
c000a991:	74 06                	je     c000a999 <Fs::getcwd(Process*, char*, int)+0x27>
c000a993:	40                   	inc    eax
c000a994:	eb e2                	jmp    c000a978 <Fs::getcwd(Process*, char*, int)+0x6>
c000a996:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a999:	31 c0                	xor    eax,eax
c000a99b:	c3                   	ret    

c000a99c <Fs::initVFS()>:
c000a99c:	83 ec 18             	sub    esp,0x18
c000a99f:	6a 08                	push   0x8
c000a9a1:	e8 bf ce ff ff       	call   c0007865 <malloc>
c000a9a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a9:	e8 52 d7 00 00       	call   c0018100 <FAT::FAT()>
c000a9ae:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9b5:	e8 ab ce ff ff       	call   c0007865 <malloc>
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	e8 da e5 00 00       	call   c0018f9c <ISO9660::ISO9660()>
c000a9c2:	83 c4 1c             	add    esp,0x1c
c000a9c5:	c3                   	ret    

c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9c6:	55                   	push   ebp
c000a9c7:	57                   	push   edi
c000a9c8:	56                   	push   esi
c000a9c9:	53                   	push   ebx
c000a9ca:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9d0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9d7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9de:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9e5:	68 00 04 00 00       	push   0x400
c000a9ea:	6a 00                	push   0x0
c000a9ec:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9f0:	56                   	push   esi
c000a9f1:	e8 ca 5a ff ff       	call   c00004c0 <memset>
c000a9f6:	83 c4 10             	add    esp,0x10
c000a9f9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a9fd:	75 0b                	jne    c000aa0a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a9ff:	50                   	push   eax
c000aa00:	50                   	push   eax
c000aa01:	57                   	push   edi
c000aa02:	56                   	push   esi
c000aa03:	e8 e8 5b ff ff       	call   c00005f0 <strcpy>
c000aa08:	eb 41                	jmp    c000aa4b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa0a:	8a 07                	mov    al,BYTE PTR [edi]
c000aa0c:	3c 5c                	cmp    al,0x5c
c000aa0e:	74 04                	je     c000aa14 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa10:	3c 2f                	cmp    al,0x2f
c000aa12:	75 18                	jne    c000aa2c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa14:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa17:	3c 60                	cmp    al,0x60
c000aa19:	7e 03                	jle    c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa1b:	83 e8 20             	sub    eax,0x20
c000aa1e:	88 04 24             	mov    BYTE PTR [esp],al
c000aa21:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa28:	50                   	push   eax
c000aa29:	50                   	push   eax
c000aa2a:	eb 18                	jmp    c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa2c:	50                   	push   eax
c000aa2d:	50                   	push   eax
c000aa2e:	55                   	push   ebp
c000aa2f:	56                   	push   esi
c000aa30:	e8 bb 5b ff ff       	call   c00005f0 <strcpy>
c000aa35:	5a                   	pop    edx
c000aa36:	59                   	pop    ecx
c000aa37:	68 59 05 02 c0       	push   0xc0020559
c000aa3c:	56                   	push   esi
c000aa3d:	e8 6e 5d ff ff       	call   c00007b0 <strcat>
c000aa42:	5d                   	pop    ebp
c000aa43:	58                   	pop    eax
c000aa44:	57                   	push   edi
c000aa45:	56                   	push   esi
c000aa46:	e8 65 5d ff ff       	call   c00007b0 <strcat>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa51:	3c 60                	cmp    al,0x60
c000aa53:	7e 03                	jle    c000aa58 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa55:	83 e8 20             	sub    eax,0x20
c000aa58:	88 04 24             	mov    BYTE PTR [esp],al
c000aa5b:	88 03                	mov    BYTE PTR [ebx],al
c000aa5d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa64:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa6a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa6e:	bf 03 00 00 00       	mov    edi,0x3
c000aa73:	b8 03 00 00 00       	mov    eax,0x3
c000aa78:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa7b:	84 d2                	test   dl,dl
c000aa7d:	0f 84 91 00 00 00    	je     c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa83:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa86:	80 fa 5c             	cmp    dl,0x5c
c000aa89:	74 05                	je     c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa8b:	80 fa 2f             	cmp    dl,0x2f
c000aa8e:	75 12                	jne    c000aaa2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa90:	89 c5                	mov    ebp,eax
c000aa92:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa97:	74 09                	je     c000aaa2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa99:	40                   	inc    eax
c000aa9a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa9e:	89 cf                	mov    edi,ecx
c000aaa0:	eb d6                	jmp    c000aa78 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aaa2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aaa7:	75 5b                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaa9:	80 fa 2e             	cmp    dl,0x2e
c000aaac:	75 56                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaae:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aab2:	74 19                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aab4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aab9:	74 53                	je     c000ab0e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aabb:	89 f9                	mov    ecx,edi
c000aabd:	41                   	inc    ecx
c000aabe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aac1:	80 fa 2f             	cmp    dl,0x2f
c000aac4:	74 f7                	je     c000aabd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aac6:	80 fa 5c             	cmp    dl,0x5c
c000aac9:	74 f2                	je     c000aabd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aacb:	eb d1                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aacd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aad2:	74 3a                	je     c000ab0e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aad4:	83 f8 03             	cmp    eax,0x3
c000aad7:	74 c5                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad9:	41                   	inc    ecx
c000aada:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aadd:	80 fa 2f             	cmp    dl,0x2f
c000aae0:	74 f7                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aae2:	80 fa 5c             	cmp    dl,0x5c
c000aae5:	74 f2                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aae7:	48                   	dec    eax
c000aae8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaec:	75 06                	jne    c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aaee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aaf2:	eb f3                	jmp    c000aae7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aaf4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf8:	74 07                	je     c000ab01 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aafa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aafe:	48                   	dec    eax
c000aaff:	eb f3                	jmp    c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab01:	40                   	inc    eax
c000ab02:	eb 9a                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab04:	80 fa 2f             	cmp    dl,0x2f
c000ab07:	74 95                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab09:	80 fa 5c             	cmp    dl,0x5c
c000ab0c:	74 90                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab0e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab11:	40                   	inc    eax
c000ab12:	eb 8a                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab14:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	53                   	push   ebx
c000ab1c:	e8 0f 5a ff ff       	call   c0000530 <strlen>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab29:	75 26                	jne    c000ab51 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab2b:	83 ec 0c             	sub    esp,0xc
c000ab2e:	53                   	push   ebx
c000ab2f:	e8 fc 59 ff ff       	call   c0000530 <strlen>
c000ab34:	83 c4 10             	add    esp,0x10
c000ab37:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab3c:	74 26                	je     c000ab64 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab3e:	83 ec 0c             	sub    esp,0xc
c000ab41:	53                   	push   ebx
c000ab42:	e8 e9 59 ff ff       	call   c0000530 <strlen>
c000ab47:	83 c4 10             	add    esp,0x10
c000ab4a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab4f:	eb c7                	jmp    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab51:	83 ec 0c             	sub    esp,0xc
c000ab54:	53                   	push   ebx
c000ab55:	e8 d6 59 ff ff       	call   c0000530 <strlen>
c000ab5a:	83 c4 10             	add    esp,0x10
c000ab5d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab62:	74 c7                	je     c000ab2b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab64:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab6a:	5b                   	pop    ebx
c000ab6b:	5e                   	pop    esi
c000ab6c:	5f                   	pop    edi
c000ab6d:	5d                   	pop    ebp
c000ab6e:	c3                   	ret    
c000ab6f:	90                   	nop

c000ab70 <File::File(char const*, Process*)>:
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	83 ec 08             	sub    esp,0x8
c000ab7a:	6a 00                	push   0x0
c000ab7c:	50                   	push   eax
c000ab7d:	e8 78 e3 ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c000ab82:	83 c4 10             	add    esp,0x10
c000ab85:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000ab8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8e:	89 10                	mov    DWORD PTR [eax],edx
c000ab90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab94:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9e:	83 c0 0d             	add    eax,0xd
c000aba1:	83 ec 04             	sub    esp,0x4
c000aba4:	52                   	push   edx
c000aba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba9:	50                   	push   eax
c000abaa:	e8 17 fe ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abb9:	8d 50 bf             	lea    edx,[eax-0x41]
c000abbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abd8:	25 ff 00 00 00       	and    eax,0xff
c000abdd:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abe4:	85 c0                	test   eax,eax
c000abe6:	74 42                	je     c000ac2a <File::File(char const*, Process*)+0xba>
c000abe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abf2:	25 ff 00 00 00       	and    eax,0xff
c000abf7:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abfe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac04:	85 c0                	test   eax,eax
c000ac06:	75 22                	jne    c000ac2a <File::File(char const*, Process*)+0xba>
c000ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac12:	25 ff 00 00 00       	and    eax,0xff
c000ac17:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac1e:	83 ec 0c             	sub    esp,0xc
c000ac21:	50                   	push   eax
c000ac22:	e8 61 20 00 00       	call   c000cc88 <LogicalDisk::mount()>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	90                   	nop
c000ac2b:	83 c4 0c             	add    esp,0xc
c000ac2e:	c3                   	ret    
c000ac2f:	90                   	nop

c000ac30 <File::open(FileOpenMode)>:
c000ac30:	53                   	push   ebx
c000ac31:	b8 0b 00 00 00       	mov    eax,0xb
c000ac36:	83 ec 08             	sub    esp,0x8
c000ac39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac3d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac44:	80 fa 19             	cmp    dl,0x19
c000ac47:	77 40                	ja     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac49:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac50:	85 d2                	test   edx,edx
c000ac52:	74 35                	je     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac54:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac5a:	85 d2                	test   edx,edx
c000ac5c:	74 2b                	je     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac5e:	b8 06 00 00 00       	mov    eax,0x6
c000ac63:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac67:	75 20                	jne    c000ac89 <File::open(FileOpenMode)+0x59>
c000ac69:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac6b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac75:	51                   	push   ecx
c000ac76:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac79:	51                   	push   ecx
c000ac7a:	52                   	push   edx
c000ac7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	85 c0                	test   eax,eax
c000ac83:	75 04                	jne    c000ac89 <File::open(FileOpenMode)+0x59>
c000ac85:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac89:	83 c4 08             	add    esp,0x8
c000ac8c:	5b                   	pop    ebx
c000ac8d:	c3                   	ret    

c000ac8e <File::close()>:
c000ac8e:	53                   	push   ebx
c000ac8f:	b8 0b 00 00 00       	mov    eax,0xb
c000ac94:	83 ec 08             	sub    esp,0x8
c000ac97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac9b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aca2:	80 fa 19             	cmp    dl,0x19
c000aca5:	77 41                	ja     c000ace8 <File::close()+0x5a>
c000aca7:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acae:	85 db                	test   ebx,ebx
c000acb0:	74 36                	je     c000ace8 <File::close()+0x5a>
c000acb2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acb9:	74 2d                	je     c000ace8 <File::close()+0x5a>
c000acbb:	b8 05 00 00 00       	mov    eax,0x5
c000acc0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acc4:	74 22                	je     c000ace8 <File::close()+0x5a>
c000acc6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acca:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000acd1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000acd7:	53                   	push   ebx
c000acd8:	53                   	push   ebx
c000acd9:	8b 10                	mov    edx,DWORD PTR [eax]
c000acdb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ace1:	50                   	push   eax
c000ace2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	83 c4 08             	add    esp,0x8
c000aceb:	5b                   	pop    ebx
c000acec:	c3                   	ret    
c000aced:	90                   	nop

c000acee <File::seek(unsigned long long)>:
c000acee:	56                   	push   esi
c000acef:	53                   	push   ebx
c000acf0:	b8 0b 00 00 00       	mov    eax,0xb
c000acf5:	51                   	push   ecx
c000acf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000acfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000acfe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad09:	80 fa 19             	cmp    dl,0x19
c000ad0c:	77 31                	ja     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad0e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad15:	85 d2                	test   edx,edx
c000ad17:	74 26                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad19:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad1f:	85 d2                	test   edx,edx
c000ad21:	74 1c                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad23:	b8 05 00 00 00       	mov    eax,0x5
c000ad28:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad2c:	74 11                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad2e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad30:	53                   	push   ebx
c000ad31:	51                   	push   ecx
c000ad32:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad38:	52                   	push   edx
c000ad39:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	5a                   	pop    edx
c000ad40:	5b                   	pop    ebx
c000ad41:	5e                   	pop    esi
c000ad42:	c3                   	ret    
c000ad43:	90                   	nop

c000ad44 <File::tell(unsigned long long*)>:
c000ad44:	83 ec 0c             	sub    esp,0xc
c000ad47:	b8 0b 00 00 00       	mov    eax,0xb
c000ad4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad50:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad57:	80 fa 19             	cmp    dl,0x19
c000ad5a:	77 34                	ja     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad5c:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad63:	85 d2                	test   edx,edx
c000ad65:	74 29                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad67:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad6d:	85 d2                	test   edx,edx
c000ad6f:	74 1f                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad71:	b8 05 00 00 00       	mov    eax,0x5
c000ad76:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad7a:	74 14                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad7c:	50                   	push   eax
c000ad7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad83:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad89:	52                   	push   edx
c000ad8a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad8d:	83 c4 10             	add    esp,0x10
c000ad90:	83 c4 0c             	add    esp,0xc
c000ad93:	c3                   	ret    

c000ad94 <File::rewind()>:
c000ad94:	83 ec 10             	sub    esp,0x10
c000ad97:	6a 00                	push   0x0
c000ad99:	6a 00                	push   0x0
c000ad9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad9f:	e8 4a ff ff ff       	call   c000acee <File::seek(unsigned long long)>
c000ada4:	83 c4 1c             	add    esp,0x1c
c000ada7:	c3                   	ret    

c000ada8 <File::unlink()>:
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	b8 0b 00 00 00       	mov    eax,0xb
c000adb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adbb:	80 f9 19             	cmp    cl,0x19
c000adbe:	77 2f                	ja     c000adef <File::unlink()+0x47>
c000adc0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000adc7:	85 c9                	test   ecx,ecx
c000adc9:	74 24                	je     c000adef <File::unlink()+0x47>
c000adcb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000add1:	85 c9                	test   ecx,ecx
c000add3:	74 1a                	je     c000adef <File::unlink()+0x47>
c000add5:	b8 06 00 00 00       	mov    eax,0x6
c000adda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adde:	75 0f                	jne    c000adef <File::unlink()+0x47>
c000ade0:	83 c2 0d             	add    edx,0xd
c000ade3:	50                   	push   eax
c000ade4:	50                   	push   eax
c000ade5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ade7:	52                   	push   edx
c000ade8:	51                   	push   ecx
c000ade9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    
c000adf3:	90                   	nop

c000adf4 <File::rename(char const*)>:
c000adf4:	83 ec 0c             	sub    esp,0xc
c000adf7:	b8 0b 00 00 00       	mov    eax,0xb
c000adfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae07:	80 f9 19             	cmp    cl,0x19
c000ae0a:	77 32                	ja     c000ae3e <File::rename(char const*)+0x4a>
c000ae0c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae13:	85 c9                	test   ecx,ecx
c000ae15:	74 27                	je     c000ae3e <File::rename(char const*)+0x4a>
c000ae17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae1d:	85 c9                	test   ecx,ecx
c000ae1f:	74 1d                	je     c000ae3e <File::rename(char const*)+0x4a>
c000ae21:	b8 06 00 00 00       	mov    eax,0x6
c000ae26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae2a:	75 12                	jne    c000ae3e <File::rename(char const*)+0x4a>
c000ae2c:	83 c2 0d             	add    edx,0xd
c000ae2f:	50                   	push   eax
c000ae30:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae36:	52                   	push   edx
c000ae37:	51                   	push   ecx
c000ae38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 c4 0c             	add    esp,0xc
c000ae41:	c3                   	ret    

c000ae42 <File::chfatattr(unsigned char, unsigned char)>:
c000ae42:	57                   	push   edi
c000ae43:	b8 0b 00 00 00       	mov    eax,0xb
c000ae48:	56                   	push   esi
c000ae49:	53                   	push   ebx
c000ae4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae5d:	80 f9 19             	cmp    cl,0x19
c000ae60:	77 37                	ja     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae62:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae69:	85 c9                	test   ecx,ecx
c000ae6b:	74 2c                	je     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae6d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae73:	85 c9                	test   ecx,ecx
c000ae75:	74 22                	je     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae77:	b8 06 00 00 00       	mov    eax,0x6
c000ae7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae80:	75 17                	jne    c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae82:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae84:	89 f0                	mov    eax,esi
c000ae86:	83 c2 0d             	add    edx,0xd
c000ae89:	0f b6 f0             	movzx  esi,al
c000ae8c:	0f b6 db             	movzx  ebx,bl
c000ae8f:	56                   	push   esi
c000ae90:	53                   	push   ebx
c000ae91:	52                   	push   edx
c000ae92:	51                   	push   ecx
c000ae93:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae96:	83 c4 10             	add    esp,0x10
c000ae99:	5b                   	pop    ebx
c000ae9a:	5e                   	pop    esi
c000ae9b:	5f                   	pop    edi
c000ae9c:	c3                   	ret    
c000ae9d:	90                   	nop

c000ae9e <File::exists()>:
c000ae9e:	83 ec 0c             	sub    esp,0xc
c000aea1:	31 c0                	xor    eax,eax
c000aea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeae:	80 f9 19             	cmp    cl,0x19
c000aeb1:	77 24                	ja     c000aed7 <File::exists()+0x39>
c000aeb3:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aeba:	85 c9                	test   ecx,ecx
c000aebc:	74 19                	je     c000aed7 <File::exists()+0x39>
c000aebe:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aec4:	85 c9                	test   ecx,ecx
c000aec6:	74 0f                	je     c000aed7 <File::exists()+0x39>
c000aec8:	83 c2 0d             	add    edx,0xd
c000aecb:	50                   	push   eax
c000aecc:	50                   	push   eax
c000aecd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aecf:	52                   	push   edx
c000aed0:	51                   	push   ecx
c000aed1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	83 c4 0c             	add    esp,0xc
c000aeda:	c3                   	ret    
c000aedb:	90                   	nop

c000aedc <File::stat(unsigned long long*, bool*)>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	50                   	push   eax
c000aedf:	b8 0b 00 00 00       	mov    eax,0xb
c000aee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aee8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aeec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aef3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aef7:	80 f9 19             	cmp    cl,0x19
c000aefa:	77 3d                	ja     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000aefc:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af03:	85 c9                	test   ecx,ecx
c000af05:	74 32                	je     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000af07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af0d:	85 c9                	test   ecx,ecx
c000af0f:	74 28                	je     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000af11:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af17:	74 13                	je     c000af2c <File::stat(unsigned long long*, bool*)+0x50>
c000af19:	83 ec 04             	sub    esp,0x4
c000af1c:	56                   	push   esi
c000af1d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af23:	51                   	push   ecx
c000af24:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af27:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af2a:	eb 0a                	jmp    c000af36 <File::stat(unsigned long long*, bool*)+0x5a>
c000af2c:	53                   	push   ebx
c000af2d:	83 c2 0d             	add    edx,0xd
c000af30:	56                   	push   esi
c000af31:	52                   	push   edx
c000af32:	51                   	push   ecx
c000af33:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af36:	83 c4 10             	add    esp,0x10
c000af39:	5a                   	pop    edx
c000af3a:	5b                   	pop    ebx
c000af3b:	5e                   	pop    esi
c000af3c:	c3                   	ret    

c000af3d <Fs::setcwd(Process*, char*)>:
c000af3d:	55                   	push   ebp
c000af3e:	57                   	push   edi
c000af3f:	56                   	push   esi
c000af40:	53                   	push   ebx
c000af41:	81 ec 20 02 00 00    	sub    esp,0x220
c000af47:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af4e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af54:	57                   	push   edi
c000af55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af5c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af60:	56                   	push   esi
c000af61:	e8 60 fa ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af66:	89 34 24             	mov    DWORD PTR [esp],esi
c000af69:	e8 c2 55 ff ff       	call   c0000530 <strlen>
c000af6e:	83 c4 10             	add    esp,0x10
c000af71:	83 f8 02             	cmp    eax,0x2
c000af74:	77 15                	ja     c000af8b <Fs::setcwd(Process*, char*)+0x4e>
c000af76:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af7b:	83 eb 41             	sub    ebx,0x41
c000af7e:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af85:	85 c0                	test   eax,eax
c000af87:	75 1c                	jne    c000afa5 <Fs::setcwd(Process*, char*)+0x68>
c000af89:	eb 2f                	jmp    c000afba <Fs::setcwd(Process*, char*)+0x7d>
c000af8b:	83 ec 0c             	sub    esp,0xc
c000af8e:	56                   	push   esi
c000af8f:	e8 9c 55 ff ff       	call   c0000530 <strlen>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	83 f8 03             	cmp    eax,0x3
c000af9a:	75 57                	jne    c000aff3 <Fs::setcwd(Process*, char*)+0xb6>
c000af9c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afa1:	75 50                	jne    c000aff3 <Fs::setcwd(Process*, char*)+0xb6>
c000afa3:	eb d1                	jmp    c000af76 <Fs::setcwd(Process*, char*)+0x39>
c000afa5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afac:	75 0c                	jne    c000afba <Fs::setcwd(Process*, char*)+0x7d>
c000afae:	83 ec 0c             	sub    esp,0xc
c000afb1:	50                   	push   eax
c000afb2:	e8 d1 1c 00 00       	call   c000cc88 <LogicalDisk::mount()>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	b8 03 00 00 00       	mov    eax,0x3
c000afbf:	83 fb 19             	cmp    ebx,0x19
c000afc2:	0f 87 c6 00 00 00    	ja     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000afc8:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afcf:	b8 05 00 00 00       	mov    eax,0x5
c000afd4:	85 d2                	test   edx,edx
c000afd6:	0f 84 b2 00 00 00    	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000afdc:	b8 06 00 00 00       	mov    eax,0x6
c000afe1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000afe8:	0f 85 92 00 00 00    	jne    c000b080 <Fs::setcwd(Process*, char*)+0x143>
c000afee:	e9 9b 00 00 00       	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000aff3:	83 ec 0c             	sub    esp,0xc
c000aff6:	68 14 01 00 00       	push   0x114
c000affb:	e8 65 c8 ff ff       	call   c0007865 <malloc>
c000b000:	83 c4 0c             	add    esp,0xc
c000b003:	89 c3                	mov    ebx,eax
c000b005:	55                   	push   ebp
c000b006:	56                   	push   esi
c000b007:	50                   	push   eax
c000b008:	e8 63 fb ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000b00d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b012:	83 c4 0c             	add    esp,0xc
c000b015:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b019:	50                   	push   eax
c000b01a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b01e:	50                   	push   eax
c000b01f:	53                   	push   ebx
c000b020:	e8 b7 fe ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c000b025:	83 c4 10             	add    esp,0x10
c000b028:	83 f8 02             	cmp    eax,0x2
c000b02b:	74 27                	je     c000b054 <Fs::setcwd(Process*, char*)+0x117>
c000b02d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b032:	75 1c                	jne    c000b050 <Fs::setcwd(Process*, char*)+0x113>
c000b034:	b8 02 00 00 00       	mov    eax,0x2
c000b039:	85 db                	test   ebx,ebx
c000b03b:	74 51                	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b03d:	83 ec 0c             	sub    esp,0xc
c000b040:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b042:	53                   	push   ebx
c000b043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	b8 02 00 00 00       	mov    eax,0x2
c000b04e:	eb 3e                	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b050:	85 c0                	test   eax,eax
c000b052:	74 1c                	je     c000b070 <Fs::setcwd(Process*, char*)+0x133>
c000b054:	b8 01 00 00 00       	mov    eax,0x1
c000b059:	85 db                	test   ebx,ebx
c000b05b:	74 31                	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b05d:	83 ec 0c             	sub    esp,0xc
c000b060:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b062:	53                   	push   ebx
c000b063:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	b8 01 00 00 00       	mov    eax,0x1
c000b06e:	eb 1e                	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b070:	85 db                	test   ebx,ebx
c000b072:	74 0c                	je     c000b080 <Fs::setcwd(Process*, char*)+0x143>
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b079:	53                   	push   ebx
c000b07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	56                   	push   esi
c000b083:	57                   	push   edi
c000b084:	e8 67 55 ff ff       	call   c00005f0 <strcpy>
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	31 c0                	xor    eax,eax
c000b08e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b094:	5b                   	pop    ebx
c000b095:	5e                   	pop    esi
c000b096:	5f                   	pop    edi
c000b097:	5d                   	pop    ebp
c000b098:	c3                   	ret    
c000b099:	90                   	nop

c000b09a <Directory::Directory(char const*, Process*)>:
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a1:	83 ec 08             	sub    esp,0x8
c000b0a4:	6a 00                	push   0x0
c000b0a6:	50                   	push   eax
c000b0a7:	e8 4e de ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000b0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c8:	83 c0 0d             	add    eax,0xd
c000b0cb:	83 ec 04             	sub    esp,0x4
c000b0ce:	52                   	push   edx
c000b0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d3:	50                   	push   eax
c000b0d4:	e8 ed f8 ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0e3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b102:	25 ff 00 00 00       	and    eax,0xff
c000b107:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b10e:	85 c0                	test   eax,eax
c000b110:	74 42                	je     c000b154 <Directory::Directory(char const*, Process*)+0xba>
c000b112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b116:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b11c:	25 ff 00 00 00       	and    eax,0xff
c000b121:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b128:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b12e:	85 c0                	test   eax,eax
c000b130:	75 22                	jne    c000b154 <Directory::Directory(char const*, Process*)+0xba>
c000b132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b136:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b13c:	25 ff 00 00 00       	and    eax,0xff
c000b141:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	50                   	push   eax
c000b14c:	e8 37 1b 00 00       	call   c000cc88 <LogicalDisk::mount()>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	90                   	nop
c000b155:	83 c4 0c             	add    esp,0xc
c000b158:	c3                   	ret    
c000b159:	90                   	nop

c000b15a <Directory::open()>:
c000b15a:	53                   	push   ebx
c000b15b:	b8 0b 00 00 00       	mov    eax,0xb
c000b160:	83 ec 08             	sub    esp,0x8
c000b163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b167:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b16e:	80 fa 19             	cmp    dl,0x19
c000b171:	77 3d                	ja     c000b1b0 <Directory::open()+0x56>
c000b173:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b17a:	85 d2                	test   edx,edx
c000b17c:	74 32                	je     c000b1b0 <Directory::open()+0x56>
c000b17e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b184:	85 d2                	test   edx,edx
c000b186:	74 28                	je     c000b1b0 <Directory::open()+0x56>
c000b188:	b8 06 00 00 00       	mov    eax,0x6
c000b18d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b191:	75 1d                	jne    c000b1b0 <Directory::open()+0x56>
c000b193:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b199:	50                   	push   eax
c000b19a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b19c:	51                   	push   ecx
c000b19d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1a0:	51                   	push   ecx
c000b1a1:	52                   	push   edx
c000b1a2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	85 c0                	test   eax,eax
c000b1aa:	75 04                	jne    c000b1b0 <Directory::open()+0x56>
c000b1ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1b0:	83 c4 08             	add    esp,0x8
c000b1b3:	5b                   	pop    ebx
c000b1b4:	c3                   	ret    
c000b1b5:	90                   	nop

c000b1b6 <Directory::close()>:
c000b1b6:	53                   	push   ebx
c000b1b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1bc:	83 ec 08             	sub    esp,0x8
c000b1bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1ca:	80 fa 19             	cmp    dl,0x19
c000b1cd:	77 41                	ja     c000b210 <Directory::close()+0x5a>
c000b1cf:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1d6:	85 db                	test   ebx,ebx
c000b1d8:	74 36                	je     c000b210 <Directory::close()+0x5a>
c000b1da:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1e1:	74 2d                	je     c000b210 <Directory::close()+0x5a>
c000b1e3:	b8 05 00 00 00       	mov    eax,0x5
c000b1e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1ec:	74 22                	je     c000b210 <Directory::close()+0x5a>
c000b1ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1f2:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b1f9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b1ff:	53                   	push   ebx
c000b200:	53                   	push   ebx
c000b201:	8b 10                	mov    edx,DWORD PTR [eax]
c000b203:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b209:	50                   	push   eax
c000b20a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	83 c4 08             	add    esp,0x8
c000b213:	5b                   	pop    ebx
c000b214:	c3                   	ret    
c000b215:	90                   	nop

c000b216 <Directory::unlink()>:
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	b8 0b 00 00 00       	mov    eax,0xb
c000b21e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b222:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b229:	80 f9 19             	cmp    cl,0x19
c000b22c:	77 2f                	ja     c000b25d <Directory::unlink()+0x47>
c000b22e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b235:	85 c9                	test   ecx,ecx
c000b237:	74 24                	je     c000b25d <Directory::unlink()+0x47>
c000b239:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b23f:	85 c9                	test   ecx,ecx
c000b241:	74 1a                	je     c000b25d <Directory::unlink()+0x47>
c000b243:	b8 06 00 00 00       	mov    eax,0x6
c000b248:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24c:	75 0f                	jne    c000b25d <Directory::unlink()+0x47>
c000b24e:	83 c2 0d             	add    edx,0xd
c000b251:	50                   	push   eax
c000b252:	50                   	push   eax
c000b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b255:	52                   	push   edx
c000b256:	51                   	push   ecx
c000b257:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b25a:	83 c4 10             	add    esp,0x10
c000b25d:	83 c4 0c             	add    esp,0xc
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <Directory::rename(char const*)>:
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	b8 0b 00 00 00       	mov    eax,0xb
c000b26a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b26e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b275:	80 f9 19             	cmp    cl,0x19
c000b278:	77 32                	ja     c000b2ac <Directory::rename(char const*)+0x4a>
c000b27a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b281:	85 c9                	test   ecx,ecx
c000b283:	74 27                	je     c000b2ac <Directory::rename(char const*)+0x4a>
c000b285:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b28b:	85 c9                	test   ecx,ecx
c000b28d:	74 1d                	je     c000b2ac <Directory::rename(char const*)+0x4a>
c000b28f:	b8 06 00 00 00       	mov    eax,0x6
c000b294:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b298:	75 12                	jne    c000b2ac <Directory::rename(char const*)+0x4a>
c000b29a:	83 c2 0d             	add    edx,0xd
c000b29d:	50                   	push   eax
c000b29e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2a4:	52                   	push   edx
c000b2a5:	51                   	push   ecx
c000b2a6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	83 c4 0c             	add    esp,0xc
c000b2af:	c3                   	ret    

c000b2b0 <Directory::exists()>:
c000b2b0:	83 ec 0c             	sub    esp,0xc
c000b2b3:	31 c0                	xor    eax,eax
c000b2b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2c0:	80 f9 19             	cmp    cl,0x19
c000b2c3:	77 24                	ja     c000b2e9 <Directory::exists()+0x39>
c000b2c5:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2cc:	85 c9                	test   ecx,ecx
c000b2ce:	74 19                	je     c000b2e9 <Directory::exists()+0x39>
c000b2d0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2d6:	85 c9                	test   ecx,ecx
c000b2d8:	74 0f                	je     c000b2e9 <Directory::exists()+0x39>
c000b2da:	83 c2 0d             	add    edx,0xd
c000b2dd:	50                   	push   eax
c000b2de:	50                   	push   eax
c000b2df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e1:	52                   	push   edx
c000b2e2:	51                   	push   ecx
c000b2e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	83 c4 0c             	add    esp,0xc
c000b2ec:	c3                   	ret    
c000b2ed:	90                   	nop

c000b2ee <Directory::read(dirent*)>:
c000b2ee:	83 ec 1c             	sub    esp,0x1c
c000b2f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b301:	80 fa 19             	cmp    dl,0x19
c000b304:	77 30                	ja     c000b336 <Directory::read(dirent*)+0x48>
c000b306:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b30d:	85 d2                	test   edx,edx
c000b30f:	74 25                	je     c000b336 <Directory::read(dirent*)+0x48>
c000b311:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b318:	74 1c                	je     c000b336 <Directory::read(dirent*)+0x48>
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b31f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b323:	52                   	push   edx
c000b324:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b328:	6a 00                	push   0x0
c000b32a:	68 10 01 00 00       	push   0x110
c000b32f:	51                   	push   ecx
c000b330:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b333:	83 c4 20             	add    esp,0x20
c000b336:	83 c4 1c             	add    esp,0x1c
c000b339:	c3                   	ret    

c000b33a <Directory::create()>:
c000b33a:	83 ec 0c             	sub    esp,0xc
c000b33d:	b8 0b 00 00 00       	mov    eax,0xb
c000b342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b346:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b34d:	80 f9 19             	cmp    cl,0x19
c000b350:	77 2f                	ja     c000b381 <Directory::create()+0x47>
c000b352:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b359:	85 c9                	test   ecx,ecx
c000b35b:	74 24                	je     c000b381 <Directory::create()+0x47>
c000b35d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b363:	85 c9                	test   ecx,ecx
c000b365:	74 1a                	je     c000b381 <Directory::create()+0x47>
c000b367:	b8 06 00 00 00       	mov    eax,0x6
c000b36c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b370:	75 0f                	jne    c000b381 <Directory::create()+0x47>
c000b372:	83 c2 0d             	add    edx,0xd
c000b375:	50                   	push   eax
c000b376:	50                   	push   eax
c000b377:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b379:	52                   	push   edx
c000b37a:	51                   	push   ecx
c000b37b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	83 c4 0c             	add    esp,0xc
c000b384:	c3                   	ret    
c000b385:	90                   	nop

c000b386 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b386:	b8 0a 00 00 00       	mov    eax,0xa
c000b38b:	c3                   	ret    

c000b38c <Bus::Bus(char const*)>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b393:	83 ec 08             	sub    esp,0x8
c000b396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b39a:	50                   	push   eax
c000b39b:	e8 30 08 00 00       	call   c000bbd0 <Device::Device(char const*)>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	89 10                	mov    DWORD PTR [eax],edx
c000b3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3bc:	90                   	nop
c000b3bd:	83 c4 0c             	add    esp,0xc
c000b3c0:	c3                   	ret    
c000b3c1:	90                   	nop
c000b3c2:	66 90                	xchg   ax,ax

c000b3c4 <Bus::~Bus()>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c000b3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d0:	89 10                	mov    DWORD PTR [eax],edx
c000b3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d6:	83 ec 0c             	sub    esp,0xc
c000b3d9:	50                   	push   eax
c000b3da:	e8 5b 05 00 00       	call   c000b93a <Device::~Device()>
c000b3df:	83 c4 10             	add    esp,0x10
c000b3e2:	90                   	nop
c000b3e3:	83 c4 0c             	add    esp,0xc
c000b3e6:	c3                   	ret    
c000b3e7:	90                   	nop

c000b3e8 <Bus::~Bus()>:
c000b3e8:	83 ec 0c             	sub    esp,0xc
c000b3eb:	83 ec 0c             	sub    esp,0xc
c000b3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f2:	e8 cd ff ff ff       	call   c000b3c4 <Bus::~Bus()>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	83 ec 08             	sub    esp,0x8
c000b3fd:	68 58 01 00 00       	push   0x158
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 f9 f0 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 c4 0c             	add    esp,0xc
c000b411:	c3                   	ret    

c000b412 <beepThread(void*)>:
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b41a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b41e:	48                   	dec    eax
c000b41f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b424:	75 01                	jne    c000b427 <beepThread(void*)+0x15>
c000b426:	fb                   	sti    
c000b427:	83 ec 0c             	sub    esp,0xc
c000b42a:	6b c2 0a             	imul   eax,edx,0xa
c000b42d:	50                   	push   eax
c000b42e:	e8 75 96 00 00       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c000b433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b43a:	e8 56 b4 00 00       	call   c0016895 <HalMakeBeep(int)>
c000b43f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b447:	83 c4 1c             	add    esp,0x1c
c000b44a:	e9 55 95 00 00       	jmp    c00149a4 <blockTask(TaskState)>

c000b44f <Krnl::beep(int, int, bool)>:
c000b44f:	56                   	push   esi
c000b450:	53                   	push   ebx
c000b451:	83 ec 10             	sub    esp,0x10
c000b454:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b460:	e8 30 b4 00 00       	call   c0016895 <HalMakeBeep(int)>
c000b465:	83 c4 10             	add    esp,0x10
c000b468:	89 f0                	mov    eax,esi
c000b46a:	84 c0                	test   al,al
c000b46c:	74 1e                	je     c000b48c <Krnl::beep(int, int, bool)+0x3d>
c000b46e:	83 ec 0c             	sub    esp,0xc
c000b471:	6b db 0a             	imul   ebx,ebx,0xa
c000b474:	53                   	push   ebx
c000b475:	e8 2e 96 00 00       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c000b47a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b482:	83 c4 14             	add    esp,0x14
c000b485:	5b                   	pop    ebx
c000b486:	5e                   	pop    esi
c000b487:	e9 09 b4 00 00       	jmp    c0016895 <HalMakeBeep(int)>
c000b48c:	68 e6 00 00 00       	push   0xe6
c000b491:	53                   	push   ebx
c000b492:	68 12 b4 00 c0       	push   0xc000b412
c000b497:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b49d:	e8 be 90 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c000b4a2:	83 c4 14             	add    esp,0x14
c000b4a5:	5b                   	pop    ebx
c000b4a6:	5e                   	pop    esi
c000b4a7:	c3                   	ret    

c000b4a8 <User::loadClockSettings(int)>:
c000b4a8:	53                   	push   ebx
c000b4a9:	83 ec 14             	sub    esp,0x14
c000b4ac:	68 14 01 00 00       	push   0x114
c000b4b1:	e8 af c3 ff ff       	call   c0007865 <malloc>
c000b4b6:	83 c4 0c             	add    esp,0xc
c000b4b9:	89 c3                	mov    ebx,eax
c000b4bb:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4c1:	68 ac f7 01 c0       	push   0xc001f7ac
c000b4c6:	50                   	push   eax
c000b4c7:	e8 a4 f6 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000b4cc:	58                   	pop    eax
c000b4cd:	5a                   	pop    edx
c000b4ce:	6a 01                	push   0x1
c000b4d0:	53                   	push   ebx
c000b4d1:	e8 5a f7 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000b4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4d9:	e8 b0 f7 ff ff       	call   c000ac8e <File::close()>
c000b4de:	83 c4 10             	add    esp,0x10
c000b4e1:	85 db                	test   ebx,ebx
c000b4e3:	74 0f                	je     c000b4f4 <User::loadClockSettings(int)+0x4c>
c000b4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4ee:	83 c4 08             	add    esp,0x8
c000b4f1:	5b                   	pop    ebx
c000b4f2:	ff e0                	jmp    eax
c000b4f4:	83 c4 08             	add    esp,0x8
c000b4f7:	5b                   	pop    ebx
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <Clock::Clock(char const*)>:
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b501:	83 ec 08             	sub    esp,0x8
c000b504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b508:	50                   	push   eax
c000b509:	e8 c2 06 00 00       	call   c000bbd0 <Device::Device(char const*)>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	ba d4 f7 01 c0       	mov    edx,0xc001f7d4
c000b516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51a:	89 10                	mov    DWORD PTR [eax],edx
c000b51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b520:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b52a:	90                   	nop
c000b52b:	83 c4 0c             	add    esp,0xc
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <Clock::~Clock()>:
c000b530:	83 ec 0c             	sub    esp,0xc
c000b533:	ba d4 f7 01 c0       	mov    edx,0xc001f7d4
c000b538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53c:	89 10                	mov    DWORD PTR [eax],edx
c000b53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b542:	83 ec 0c             	sub    esp,0xc
c000b545:	50                   	push   eax
c000b546:	e8 ef 03 00 00       	call   c000b93a <Device::~Device()>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	90                   	nop
c000b54f:	83 c4 0c             	add    esp,0xc
c000b552:	c3                   	ret    
c000b553:	90                   	nop

c000b554 <Clock::~Clock()>:
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	83 ec 0c             	sub    esp,0xc
c000b55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55e:	e8 cd ff ff ff       	call   c000b530 <Clock::~Clock()>
c000b563:	83 c4 10             	add    esp,0x10
c000b566:	83 ec 08             	sub    esp,0x8
c000b569:	68 58 01 00 00       	push   0x158
c000b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b572:	e8 8d ef ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	83 c4 0c             	add    esp,0xc
c000b57d:	c3                   	ret    

c000b57e <Clock::timeInSecondsLocal()>:
c000b57e:	53                   	push   ebx
c000b57f:	83 ec 14             	sub    esp,0x14
c000b582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b586:	8b 10                	mov    edx,DWORD PTR [eax]
c000b588:	50                   	push   eax
c000b589:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b58c:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b593:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b599:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b59f:	89 cb                	mov    ebx,ecx
c000b5a1:	c1 fb 1f             	sar    ebx,0x1f
c000b5a4:	01 c8                	add    eax,ecx
c000b5a6:	11 da                	adc    edx,ebx
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	31 c9                	xor    ecx,ecx
c000b5ad:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5b4:	74 05                	je     c000b5bb <Clock::timeInSecondsLocal()+0x3d>
c000b5b6:	b9 08 07 00 00       	mov    ecx,0x708
c000b5bb:	31 db                	xor    ebx,ebx
c000b5bd:	01 c8                	add    eax,ecx
c000b5bf:	11 da                	adc    edx,ebx
c000b5c1:	83 c4 08             	add    esp,0x8
c000b5c4:	5b                   	pop    ebx
c000b5c5:	c3                   	ret    

c000b5c6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5c6:	57                   	push   edi
c000b5c7:	56                   	push   esi
c000b5c8:	53                   	push   ebx
c000b5c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5d7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5da:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5e1:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5e7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5ed:	99                   	cdq    
c000b5ee:	29 c6                	sub    esi,eax
c000b5f0:	19 d7                	sbb    edi,edx
c000b5f2:	89 f0                	mov    eax,esi
c000b5f4:	89 fa                	mov    edx,edi
c000b5f6:	31 f6                	xor    esi,esi
c000b5f8:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5ff:	74 05                	je     c000b606 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b601:	be 08 07 00 00       	mov    esi,0x708
c000b606:	31 ff                	xor    edi,edi
c000b608:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b60c:	29 f0                	sub    eax,esi
c000b60e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b612:	19 fa                	sbb    edx,edi
c000b614:	89 d8                	mov    eax,ebx
c000b616:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b61a:	5b                   	pop    ebx
c000b61b:	5e                   	pop    esi
c000b61c:	5f                   	pop    edi
c000b61d:	ff e0                	jmp    eax

c000b61f <datetimeToSeconds(datetime_t)>:
c000b61f:	55                   	push   ebp
c000b620:	57                   	push   edi
c000b621:	56                   	push   esi
c000b622:	53                   	push   ebx
c000b623:	83 ec 14             	sub    esp,0x14
c000b626:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b62a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b62e:	89 d3                	mov    ebx,edx
c000b630:	0f b6 c6             	movzx  eax,dh
c000b633:	c1 eb 10             	shr    ebx,0x10
c000b636:	48                   	dec    eax
c000b637:	66 81 eb 6c 07       	sub    bx,0x76c
c000b63c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b640:	0f b6 f5             	movzx  esi,ch
c000b643:	89 cf                	mov    edi,ecx
c000b645:	6b f6 3c             	imul   esi,esi,0x3c
c000b648:	c1 ef 10             	shr    edi,0x10
c000b64b:	0f b6 c9             	movzx  ecx,cl
c000b64e:	89 f8                	mov    eax,edi
c000b650:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b656:	0f b6 f8             	movzx  edi,al
c000b659:	0f b6 d2             	movzx  edx,dl
c000b65c:	01 fe                	add    esi,edi
c000b65e:	01 f1                	add    ecx,esi
c000b660:	0f b7 f3             	movzx  esi,bx
c000b663:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b667:	c1 f9 1f             	sar    ecx,0x1f
c000b66a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b66f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b673:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b678:	8b 0c 8d 20 f8 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe07e0]
c000b67f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b683:	76 29                	jbe    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b685:	f6 c3 03             	test   bl,0x3
c000b688:	75 24                	jne    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b68a:	31 d2                	xor    edx,edx
c000b68c:	bf 64 00 00 00       	mov    edi,0x64
c000b691:	89 d8                	mov    eax,ebx
c000b693:	66 f7 f7             	div    di
c000b696:	66 85 d2             	test   dx,dx
c000b699:	75 12                	jne    c000b6ad <datetimeToSeconds(datetime_t)+0x8e>
c000b69b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6a1:	bf 90 01 00 00       	mov    edi,0x190
c000b6a6:	99                   	cdq    
c000b6a7:	f7 ff                	idiv   edi
c000b6a9:	85 d2                	test   edx,edx
c000b6ab:	75 01                	jne    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b6ad:	41                   	inc    ecx
c000b6ae:	66 83 fb 46          	cmp    bx,0x46
c000b6b2:	76 45                	jbe    c000b6f9 <datetimeToSeconds(datetime_t)+0xda>
c000b6b4:	bb 46 00 00 00       	mov    ebx,0x46
c000b6b9:	bf 64 00 00 00       	mov    edi,0x64
c000b6be:	bd 90 01 00 00       	mov    ebp,0x190
c000b6c3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6c8:	f6 c3 03             	test   bl,0x3
c000b6cb:	75 23                	jne    c000b6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b6cd:	89 d8                	mov    eax,ebx
c000b6cf:	99                   	cdq    
c000b6d0:	f7 ff                	idiv   edi
c000b6d2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6d7:	85 d2                	test   edx,edx
c000b6d9:	75 15                	jne    c000b6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b6db:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6e1:	99                   	cdq    
c000b6e2:	f7 fd                	idiv   ebp
c000b6e4:	31 c0                	xor    eax,eax
c000b6e6:	85 d2                	test   edx,edx
c000b6e8:	0f 94 c0             	sete   al
c000b6eb:	05 6d 01 00 00       	add    eax,0x16d
c000b6f0:	01 c1                	add    ecx,eax
c000b6f2:	43                   	inc    ebx
c000b6f3:	39 f3                	cmp    ebx,esi
c000b6f5:	7c cc                	jl     c000b6c3 <datetimeToSeconds(datetime_t)+0xa4>
c000b6f7:	eb 3b                	jmp    c000b734 <datetimeToSeconds(datetime_t)+0x115>
c000b6f9:	74 39                	je     c000b734 <datetimeToSeconds(datetime_t)+0x115>
c000b6fb:	b8 45 00 00 00       	mov    eax,0x45
c000b700:	89 c2                	mov    edx,eax
c000b702:	83 e2 03             	and    edx,0x3
c000b705:	39 f0                	cmp    eax,esi
c000b707:	7e 13                	jle    c000b71c <datetimeToSeconds(datetime_t)+0xfd>
c000b709:	85 d2                	test   edx,edx
c000b70b:	0f 94 c2             	sete   dl
c000b70e:	48                   	dec    eax
c000b70f:	0f b6 d2             	movzx  edx,dl
c000b712:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b718:	29 d1                	sub    ecx,edx
c000b71a:	eb e4                	jmp    c000b700 <datetimeToSeconds(datetime_t)+0xe1>
c000b71c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b721:	85 d2                	test   edx,edx
c000b723:	75 0d                	jne    c000b732 <datetimeToSeconds(datetime_t)+0x113>
c000b725:	31 c0                	xor    eax,eax
c000b727:	66 85 db             	test   bx,bx
c000b72a:	0f 95 c0             	setne  al
c000b72d:	05 6d 01 00 00       	add    eax,0x16d
c000b732:	29 c1                	sub    ecx,eax
c000b734:	b8 80 51 01 00       	mov    eax,0x15180
c000b739:	f7 e9                	imul   ecx
c000b73b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b73f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b743:	83 c4 14             	add    esp,0x14
c000b746:	5b                   	pop    ebx
c000b747:	5e                   	pop    esi
c000b748:	5f                   	pop    edi
c000b749:	5d                   	pop    ebp
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b74c:	57                   	push   edi
c000b74d:	56                   	push   esi
c000b74e:	53                   	push   ebx
c000b74f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b753:	8b 06                	mov    eax,DWORD PTR [esi]
c000b755:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b75c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b760:	e8 ba fe ff ff       	call   c000b61f <datetimeToSeconds(datetime_t)>
c000b765:	59                   	pop    ecx
c000b766:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b76d:	5b                   	pop    ebx
c000b76e:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b774:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b77a:	89 cb                	mov    ebx,ecx
c000b77c:	c1 fb 1f             	sar    ebx,0x1f
c000b77f:	29 c8                	sub    eax,ecx
c000b781:	19 da                	sbb    edx,ebx
c000b783:	31 c9                	xor    ecx,ecx
c000b785:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b78c:	74 05                	je     c000b793 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b78e:	b9 08 07 00 00       	mov    ecx,0x708
c000b793:	31 db                	xor    ebx,ebx
c000b795:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b799:	29 c8                	sub    eax,ecx
c000b79b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b79f:	19 da                	sbb    edx,ebx
c000b7a1:	89 f8                	mov    eax,edi
c000b7a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	5f                   	pop    edi
c000b7aa:	ff e0                	jmp    eax

c000b7ac <secondsToDatetime(unsigned long long)>:
c000b7ac:	55                   	push   ebp
c000b7ad:	57                   	push   edi
c000b7ae:	56                   	push   esi
c000b7af:	53                   	push   ebx
c000b7b0:	83 ec 1c             	sub    esp,0x1c
c000b7b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7bf:	6a 00                	push   0x0
c000b7c1:	68 80 51 01 00       	push   0x15180
c000b7c6:	55                   	push   ebp
c000b7c7:	57                   	push   edi
c000b7c8:	e8 e3 22 01 00       	call   c001dab0 <__udivdi3>
c000b7cd:	83 c4 10             	add    esp,0x10
c000b7d0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7da:	6a 00                	push   0x0
c000b7dc:	68 80 51 01 00       	push   0x15180
c000b7e1:	55                   	push   ebp
c000b7e2:	57                   	push   edi
c000b7e3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7e8:	e8 c3 23 01 00       	call   c001dbb0 <__umoddi3>
c000b7ed:	83 c4 10             	add    esp,0x10
c000b7f0:	99                   	cdq    
c000b7f1:	f7 ff                	idiv   edi
c000b7f3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b7f8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b7fb:	89 d0                	mov    eax,edx
c000b7fd:	99                   	cdq    
c000b7fe:	f7 ff                	idiv   edi
c000b800:	85 db                	test   ebx,ebx
c000b802:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b805:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b808:	79 11                	jns    c000b81b <secondsToDatetime(unsigned long long)+0x6f>
c000b80a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b80e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b814:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b819:	eb 07                	jmp    c000b822 <secondsToDatetime(unsigned long long)+0x76>
c000b81b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b820:	89 d8                	mov    eax,ebx
c000b822:	bf b4 05 00 00       	mov    edi,0x5b4
c000b827:	99                   	cdq    
c000b828:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b82d:	f7 f9                	idiv   ecx
c000b82f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b834:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b838:	31 d2                	xor    edx,edx
c000b83a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b842:	01 c3                	add    ebx,eax
c000b844:	89 d8                	mov    eax,ebx
c000b846:	f7 f1                	div    ecx
c000b848:	31 d2                	xor    edx,edx
c000b84a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b84d:	89 d8                	mov    eax,ebx
c000b84f:	f7 f7                	div    edi
c000b851:	31 d2                	xor    edx,edx
c000b853:	29 c1                	sub    ecx,eax
c000b855:	89 d8                	mov    eax,ebx
c000b857:	f7 f5                	div    ebp
c000b859:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b85e:	29 c1                	sub    ecx,eax
c000b860:	31 d2                	xor    edx,edx
c000b862:	89 c8                	mov    eax,ecx
c000b864:	f7 f5                	div    ebp
c000b866:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b86b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b86f:	31 d2                	xor    edx,edx
c000b871:	89 c8                	mov    eax,ecx
c000b873:	f7 f5                	div    ebp
c000b875:	31 d2                	xor    edx,edx
c000b877:	01 c3                	add    ebx,eax
c000b879:	89 c8                	mov    eax,ecx
c000b87b:	f7 f7                	div    edi
c000b87d:	bf 99 00 00 00       	mov    edi,0x99
c000b882:	29 c3                	sub    ebx,eax
c000b884:	31 d2                	xor    edx,edx
c000b886:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b88e:	29 c3                	sub    ebx,eax
c000b890:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b893:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b896:	bb 05 00 00 00       	mov    ebx,0x5
c000b89b:	83 c1 02             	add    ecx,0x2
c000b89e:	89 c8                	mov    eax,ecx
c000b8a0:	f7 f7                	div    edi
c000b8a2:	31 d2                	xor    edx,edx
c000b8a4:	89 c7                	mov    edi,eax
c000b8a6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8ac:	83 c0 02             	add    eax,0x2
c000b8af:	f7 f3                	div    ebx
c000b8b1:	89 eb                	mov    ebx,ebp
c000b8b3:	29 c3                	sub    ebx,eax
c000b8b5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8bb:	88 1e                	mov    BYTE PTR [esi],bl
c000b8bd:	19 c0                	sbb    eax,eax
c000b8bf:	31 d2                	xor    edx,edx
c000b8c1:	83 e0 0c             	and    eax,0xc
c000b8c4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8c8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8d0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8d4:	83 f9 01             	cmp    ecx,0x1
c000b8d7:	0f 96 c2             	setbe  dl
c000b8da:	41                   	inc    ecx
c000b8db:	01 d0                	add    eax,edx
c000b8dd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8e0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8e4:	83 c4 1c             	add    esp,0x1c
c000b8e7:	89 f0                	mov    eax,esi
c000b8e9:	5b                   	pop    ebx
c000b8ea:	5e                   	pop    esi
c000b8eb:	5f                   	pop    edi
c000b8ec:	5d                   	pop    ebp
c000b8ed:	c2 04 00             	ret    0x4

c000b8f0 <Clock::timeInDatetimeLocal()>:
c000b8f0:	53                   	push   ebx
c000b8f1:	83 ec 14             	sub    esp,0x14
c000b8f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b8f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8fc:	e8 7d fc ff ff       	call   c000b57e <Clock::timeInSecondsLocal()>
c000b901:	83 c4 0c             	add    esp,0xc
c000b904:	52                   	push   edx
c000b905:	50                   	push   eax
c000b906:	53                   	push   ebx
c000b907:	e8 a0 fe ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c000b90c:	89 d8                	mov    eax,ebx
c000b90e:	83 c4 14             	add    esp,0x14
c000b911:	5b                   	pop    ebx
c000b912:	c2 04 00             	ret    0x4
c000b915:	90                   	nop

c000b916 <Device::hibernate()>:
c000b916:	c3                   	ret    
c000b917:	90                   	nop

c000b918 <Device::wake()>:
c000b918:	c3                   	ret    
c000b919:	90                   	nop

c000b91a <Device::detect()>:
c000b91a:	c3                   	ret    
c000b91b:	90                   	nop

c000b91c <Device::disableLegacy()>:
c000b91c:	c3                   	ret    
c000b91d:	90                   	nop

c000b91e <Device::powerSaving(PowerSavingLevel)>:
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <DriverlessDevice::close(int, int, void*)>:
c000b920:	31 c0                	xor    eax,eax
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <DriverlessDevice::detect()>:
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <DriverlessDevice::open(int, int, void*)>:
c000b926:	83 ec 18             	sub    esp,0x18
c000b929:	68 50 f8 01 c0       	push   0xc001f850
c000b92e:	e8 88 4a 00 00       	call   c00103bb <KePanic(char const*)>
c000b933:	83 c8 ff             	or     eax,0xffffffff
c000b936:	83 c4 1c             	add    esp,0x1c
c000b939:	c3                   	ret    

c000b93a <Device::~Device()>:
c000b93a:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c000b93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b943:	89 10                	mov    DWORD PTR [eax],edx
c000b945:	90                   	nop
c000b946:	c3                   	ret    
c000b947:	90                   	nop

c000b948 <Device::~Device()>:
c000b948:	83 ec 0c             	sub    esp,0xc
c000b94b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b94f:	e8 e6 ff ff ff       	call   c000b93a <Device::~Device()>
c000b954:	83 c4 04             	add    esp,0x4
c000b957:	83 ec 08             	sub    esp,0x8
c000b95a:	68 58 01 00 00       	push   0x158
c000b95f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b963:	e8 9c eb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b968:	83 c4 10             	add    esp,0x10
c000b96b:	83 c4 0c             	add    esp,0xc
c000b96e:	c3                   	ret    
c000b96f:	90                   	nop

c000b970 <Device::findAndLoadDriver()>:
c000b970:	c7 44 24 04 6e f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f86e
c000b978:	e9 7d ec ff ff       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000b97d:	90                   	nop

c000b97e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b97e:	57                   	push   edi
c000b97f:	b9 09 00 00 00       	mov    ecx,0x9
c000b984:	56                   	push   esi
c000b985:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b989:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b98d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b997:	81 c7 18 01 00 00    	add    edi,0x118
c000b99d:	fc                   	cld    
c000b99e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9a0:	5e                   	pop    esi
c000b9a1:	5f                   	pop    edi
c000b9a2:	c3                   	ret    
c000b9a3:	90                   	nop

c000b9a4 <Device::preOpenACPI(void*, char*, char*)>:
c000b9a4:	57                   	push   edi
c000b9a5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9aa:	56                   	push   esi
c000b9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9b3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9bd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9c3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9cf:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9d4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e0:	5e                   	pop    esi
c000b9e1:	5f                   	pop    edi
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9e4:	53                   	push   ebx
c000b9e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f5:	0f b6 c0             	movzx  eax,al
c000b9f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b9fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba08:	5b                   	pop    ebx
c000ba09:	e9 a6 05 00 00       	jmp    c000bfb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba0e <Device::getParent()>:
c000ba0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba12:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba22:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba33:	e9 e8 06 00 00       	jmp    c000c120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba38 <Device::addChild(Device*)>:
c000ba38:	53                   	push   ebx
c000ba39:	83 ec 08             	sub    esp,0x8
c000ba3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba44:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba4a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba50:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba52:	85 d2                	test   edx,edx
c000ba54:	74 04                	je     c000ba5a <Device::addChild(Device*)+0x22>
c000ba56:	89 d3                	mov    ebx,edx
c000ba58:	eb f6                	jmp    c000ba50 <Device::addChild(Device*)+0x18>
c000ba5a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba5d:	83 ec 0c             	sub    esp,0xc
c000ba60:	6a 08                	push   0x8
c000ba62:	e8 fe bd ff ff       	call   c0007865 <malloc>
c000ba67:	89 03                	mov    DWORD PTR [ebx],eax
c000ba69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba76:	83 c4 18             	add    esp,0x18
c000ba79:	5b                   	pop    ebx
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Device::removeAllChildren()>:
c000ba7c:	56                   	push   esi
c000ba7d:	53                   	push   ebx
c000ba7e:	52                   	push   edx
c000ba7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba83:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 17                	je     c000baa5 <Device::removeAllChildren()+0x29>
c000ba8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba91:	85 c0                	test   eax,eax
c000ba93:	74 0c                	je     c000baa1 <Device::removeAllChildren()+0x25>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba9a:	50                   	push   eax
c000ba9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e4                	jmp    c000ba89 <Device::removeAllChildren()+0xd>
c000baa5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000baab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bab1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000babe:	58                   	pop    eax
c000babf:	5b                   	pop    ebx
c000bac0:	5e                   	pop    esi
c000bac1:	c3                   	ret    

c000bac2 <Device::hibernateAll()>:
c000bac2:	53                   	push   ebx
c000bac3:	83 ec 14             	sub    esp,0x14
c000bac6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bacc:	53                   	push   ebx
c000bacd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bad0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000badc:	74 0f                	je     c000baed <Device::hibernateAll()+0x2b>
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bae4:	e8 d9 ff ff ff       	call   c000bac2 <Device::hibernateAll()>
c000bae9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baeb:	eb e9                	jmp    c000bad6 <Device::hibernateAll()+0x14>
c000baed:	83 c4 08             	add    esp,0x8
c000baf0:	5b                   	pop    ebx
c000baf1:	c3                   	ret    

c000baf2 <Device::wakeAll()>:
c000baf2:	53                   	push   ebx
c000baf3:	83 ec 14             	sub    esp,0x14
c000baf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bafc:	53                   	push   ebx
c000bafd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb0c:	74 0f                	je     c000bb1d <Device::wakeAll()+0x2b>
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb14:	e8 d9 ff ff ff       	call   c000baf2 <Device::wakeAll()>
c000bb19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb1b:	eb e9                	jmp    c000bb06 <Device::wakeAll()+0x14>
c000bb1d:	83 c4 08             	add    esp,0x8
c000bb20:	5b                   	pop    ebx
c000bb21:	c3                   	ret    

c000bb22 <Device::detectAll()>:
c000bb22:	53                   	push   ebx
c000bb23:	83 ec 14             	sub    esp,0x14
c000bb26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb2c:	53                   	push   ebx
c000bb2d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb3c:	74 0f                	je     c000bb4d <Device::detectAll()+0x2b>
c000bb3e:	83 ec 0c             	sub    esp,0xc
c000bb41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb44:	e8 d9 ff ff ff       	call   c000bb22 <Device::detectAll()>
c000bb49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb4b:	eb e9                	jmp    c000bb36 <Device::detectAll()+0x14>
c000bb4d:	83 c4 08             	add    esp,0x8
c000bb50:	5b                   	pop    ebx
c000bb51:	c3                   	ret    

c000bb52 <Device::disableLegacyAll()>:
c000bb52:	c3                   	ret    
c000bb53:	90                   	nop

c000bb54 <Device::loadDriversForAll()>:
c000bb54:	c3                   	ret    
c000bb55:	90                   	nop

c000bb56 <Device::closeAll()>:
c000bb56:	53                   	push   ebx
c000bb57:	83 ec 08             	sub    esp,0x8
c000bb5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb60:	6a 00                	push   0x0
c000bb62:	6a 00                	push   0x0
c000bb64:	6a 00                	push   0x0
c000bb66:	53                   	push   ebx
c000bb67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb76:	74 0f                	je     c000bb87 <Device::closeAll()+0x31>
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb7e:	e8 d3 ff ff ff       	call   c000bb56 <Device::closeAll()>
c000bb83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb85:	eb e9                	jmp    c000bb70 <Device::closeAll()+0x1a>
c000bb87:	83 c4 08             	add    esp,0x8
c000bb8a:	5b                   	pop    ebx
c000bb8b:	c3                   	ret    

c000bb8c <Device::powerSavingAll(PowerSavingLevel)>:
c000bb8c:	56                   	push   esi
c000bb8d:	53                   	push   ebx
c000bb8e:	83 ec 0c             	sub    esp,0xc
c000bb91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb99:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb9b:	56                   	push   esi
c000bb9c:	53                   	push   ebx
c000bb9d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bba0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bba6:	83 c4 10             	add    esp,0x10
c000bba9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbac:	74 0f                	je     c000bbbd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbae:	52                   	push   edx
c000bbaf:	52                   	push   edx
c000bbb0:	56                   	push   esi
c000bbb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbb4:	e8 d3 ff ff ff       	call   c000bb8c <Device::powerSavingAll(PowerSavingLevel)>
c000bbb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbbb:	eb e9                	jmp    c000bba6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbbd:	58                   	pop    eax
c000bbbe:	5b                   	pop    ebx
c000bbbf:	5e                   	pop    esi
c000bbc0:	c3                   	ret    
c000bbc1:	90                   	nop

c000bbc2 <Device::setName(char const*)>:
c000bbc2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbca:	e9 21 4a ff ff       	jmp    c00005f0 <strcpy>
c000bbcf:	90                   	nop

c000bbd0 <Device::Device(char const*)>:
c000bbd0:	83 ec 1c             	sub    esp,0x1c
c000bbd3:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c000bbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbdc:	89 10                	mov    DWORD PTR [eax],edx
c000bbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc16:	83 ec 08             	sub    esp,0x8
c000bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc21:	e8 9c ff ff ff       	call   c000bbc2 <Device::setName(char const*)>
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc31:	83 ec 0c             	sub    esp,0xc
c000bc34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc38:	e8 28 bc ff ff       	call   c0007865 <malloc>
c000bc3d:	83 c4 10             	add    esp,0x10
c000bc40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc51:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc87:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbc:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcc6:	90                   	nop
c000bcc7:	83 c4 1c             	add    esp,0x1c
c000bcca:	c3                   	ret    
c000bccb:	90                   	nop

c000bccc <Device::getName()>:
c000bccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd0:	05 d0 00 00 00       	add    eax,0xd0
c000bcd5:	c3                   	ret    

c000bcd6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcd6:	83 ec 0c             	sub    esp,0xc
c000bcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdd:	83 ec 08             	sub    esp,0x8
c000bce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce4:	50                   	push   eax
c000bce5:	e8 e6 fe ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c000bcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf6:	89 10                	mov    DWORD PTR [eax],edx
c000bcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd06:	90                   	nop
c000bd07:	83 c4 0c             	add    esp,0xc
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd0c:	57                   	push   edi
c000bd0d:	56                   	push   esi
c000bd0e:	53                   	push   ebx
c000bd0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd1b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd21:	75 0c                	jne    c000bd2f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd23:	52                   	push   edx
c000bd24:	52                   	push   edx
c000bd25:	53                   	push   ebx
c000bd26:	56                   	push   esi
c000bd27:	e8 36 22 01 00       	call   c001df62 <LinkedList<Device>::addElement(Device*)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd38:	74 12                	je     c000bd4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd3a:	50                   	push   eax
c000bd3b:	57                   	push   edi
c000bd3c:	56                   	push   esi
c000bd3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd40:	e8 c7 ff ff ff       	call   c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd47:	83 c4 10             	add    esp,0x10
c000bd4a:	eb e9                	jmp    c000bd35 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd4c:	5b                   	pop    ebx
c000bd4d:	5e                   	pop    esi
c000bd4e:	5f                   	pop    edi
c000bd4f:	c3                   	ret    

c000bd50 <getDevicesOfType(DeviceType)>:
c000bd50:	53                   	push   ebx
c000bd51:	83 ec 14             	sub    esp,0x14
c000bd54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd58:	53                   	push   ebx
c000bd59:	e8 e0 22 01 00       	call   c001e03e <LinkedList<Device>::LinkedList()>
c000bd5e:	83 c4 0c             	add    esp,0xc
c000bd61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd65:	53                   	push   ebx
c000bd66:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd6c:	e8 9b ff ff ff       	call   c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd71:	89 d8                	mov    eax,ebx
c000bd73:	83 c4 18             	add    esp,0x18
c000bd76:	5b                   	pop    ebx
c000bd77:	c2 04 00             	ret    0x4
c000bd7a:	66 90                	xchg   ax,ax

c000bd7c <HardDiskController::HardDiskController(char const*)>:
c000bd7c:	83 ec 0c             	sub    esp,0xc
c000bd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd83:	83 ec 08             	sub    esp,0x8
c000bd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd8a:	50                   	push   eax
c000bd8b:	e8 40 fe ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000bd90:	83 c4 10             	add    esp,0x10
c000bd93:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c000bd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9c:	89 10                	mov    DWORD PTR [eax],edx
c000bd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdac:	90                   	nop
c000bdad:	83 c4 0c             	add    esp,0xc
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop
c000bdb2:	66 90                	xchg   ax,ax

c000bdb4 <HardDiskController::~HardDiskController()>:
c000bdb4:	83 ec 0c             	sub    esp,0xc
c000bdb7:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c000bdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc0:	89 10                	mov    DWORD PTR [eax],edx
c000bdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc6:	83 ec 0c             	sub    esp,0xc
c000bdc9:	50                   	push   eax
c000bdca:	e8 6b fb ff ff       	call   c000b93a <Device::~Device()>
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	90                   	nop
c000bdd3:	83 c4 0c             	add    esp,0xc
c000bdd6:	c3                   	ret    
c000bdd7:	90                   	nop

c000bdd8 <HardDiskController::~HardDiskController()>:
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	83 ec 0c             	sub    esp,0xc
c000bdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde2:	e8 cd ff ff ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c000bde7:	83 c4 10             	add    esp,0x10
c000bdea:	83 ec 08             	sub    esp,0x8
c000bded:	68 58 01 00 00       	push   0x158
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	e8 09 e7 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 c4 0c             	add    esp,0xc
c000be01:	c3                   	ret    

c000be02 <PhysicalDisk::eject()>:
c000be02:	83 c8 ff             	or     eax,0xffffffff
c000be05:	c3                   	ret    

c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be06:	83 ec 0c             	sub    esp,0xc
c000be09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0d:	83 ec 08             	sub    esp,0x8
c000be10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be14:	50                   	push   eax
c000be15:	e8 b6 fd ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	ba 34 f9 01 c0       	mov    edx,0xc001f934
c000be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be26:	89 10                	mov    DWORD PTR [eax],edx
c000be28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be37:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be42:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be68:	90                   	nop
c000be69:	83 c4 0c             	add    esp,0xc
c000be6c:	c3                   	ret    
c000be6d:	90                   	nop

c000be6e <PhysicalDisk::startCache()>:
c000be6e:	56                   	push   esi
c000be6f:	53                   	push   ebx
c000be70:	83 ec 10             	sub    esp,0x10
c000be73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be77:	6a 44                	push   0x44
c000be79:	e8 e7 b9 ff ff       	call   c0007865 <malloc>
c000be7e:	89 c6                	mov    esi,eax
c000be80:	58                   	pop    eax
c000be81:	5a                   	pop    edx
c000be82:	53                   	push   ebx
c000be83:	56                   	push   esi
c000be84:	e8 a7 16 00 00       	call   c000d530 <VCache::VCache(PhysicalDisk*)>
c000be89:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be8f:	83 c4 14             	add    esp,0x14
c000be92:	5b                   	pop    ebx
c000be93:	5e                   	pop    esi
c000be94:	c3                   	ret    
c000be95:	90                   	nop

c000be96 <PhysicalDisk::~PhysicalDisk()>:
c000be96:	83 ec 0c             	sub    esp,0xc
c000be99:	ba 34 f9 01 c0       	mov    edx,0xc001f934
c000be9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea2:	89 10                	mov    DWORD PTR [eax],edx
c000bea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea8:	83 ec 0c             	sub    esp,0xc
c000beab:	50                   	push   eax
c000beac:	e8 89 fa ff ff       	call   c000b93a <Device::~Device()>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	90                   	nop
c000beb5:	83 c4 0c             	add    esp,0xc
c000beb8:	c3                   	ret    
c000beb9:	90                   	nop

c000beba <PhysicalDisk::~PhysicalDisk()>:
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	83 ec 0c             	sub    esp,0xc
c000bec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bec4:	e8 cd ff ff ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	83 ec 08             	sub    esp,0x8
c000becf:	68 6c 01 00 00       	push   0x16c
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	e8 27 e6 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	83 c4 0c             	add    esp,0xc
c000bee3:	c3                   	ret    

c000bee4 <int_handler>:
c000bee4:	55                   	push   ebp
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beef:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bef6:	74 0b                	je     c000bf03 <int_handler+0x1f>
c000bef8:	fa                   	cli    
c000bef9:	f4                   	hlt    
c000befa:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf01:	75 f5                	jne    c000bef8 <int_handler+0x14>
c000bf03:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf06:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf09:	83 f8 17             	cmp    eax,0x17
c000bf0c:	76 3e                	jbe    c000bf4c <int_handler+0x68>
c000bf0e:	c1 e6 04             	shl    esi,0x4
c000bf11:	31 db                	xor    ebx,ebx
c000bf13:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf19:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf1f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf23:	85 c0                	test   eax,eax
c000bf25:	74 13                	je     c000bf3a <int_handler+0x56>
c000bf27:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf2a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf2e:	74 2a                	je     c000bf5a <int_handler+0x76>
c000bf30:	83 ec 08             	sub    esp,0x8
c000bf33:	52                   	push   edx
c000bf34:	57                   	push   edi
c000bf35:	ff d0                	call   eax
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	43                   	inc    ebx
c000bf3b:	83 fb 04             	cmp    ebx,0x4
c000bf3e:	75 df                	jne    c000bf1f <int_handler+0x3b>
c000bf40:	83 c4 0c             	add    esp,0xc
c000bf43:	31 c0                	xor    eax,eax
c000bf45:	5b                   	pop    ebx
c000bf46:	31 d2                	xor    edx,edx
c000bf48:	5e                   	pop    esi
c000bf49:	5f                   	pop    edi
c000bf4a:	5d                   	pop    ebp
c000bf4b:	c3                   	ret    
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	50                   	push   eax
c000bf50:	e8 7d a9 00 00       	call   c00168d2 <HalEndOfInterrupt(int)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	eb b4                	jmp    c000bf0e <int_handler+0x2a>
c000bf5a:	83 ec 08             	sub    esp,0x8
c000bf5d:	52                   	push   edx
c000bf5e:	57                   	push   edi
c000bf5f:	ff d0                	call   eax
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	83 c4 0c             	add    esp,0xc
c000bf67:	5b                   	pop    ebx
c000bf68:	5e                   	pop    esi
c000bf69:	5f                   	pop    edi
c000bf6a:	5d                   	pop    ebp
c000bf6b:	c3                   	ret    

c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf6c:	56                   	push   esi
c000bf6d:	31 c0                	xor    eax,eax
c000bf6f:	53                   	push   ebx
c000bf70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf78:	89 ca                	mov    edx,ecx
c000bf7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf7e:	c1 e2 04             	shl    edx,0x4
c000bf81:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf89:	74 15                	je     c000bfa0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf8b:	40                   	inc    eax
c000bf8c:	83 f8 04             	cmp    eax,0x4
c000bf8f:	75 f0                	jne    c000bf81 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf91:	c7 44 24 0c 64 f9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f964
c000bf99:	5b                   	pop    ebx
c000bf9a:	5e                   	pop    esi
c000bf9b:	e9 1b 44 00 00       	jmp    c00103bb <KePanic(char const*)>
c000bfa0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfa3:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfaa:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfb1:	5b                   	pop    ebx
c000bfb2:	5e                   	pop    esi
c000bfb3:	c3                   	ret    

c000bfb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfb4:	57                   	push   edi
c000bfb5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfbb:	56                   	push   esi
c000bfbc:	53                   	push   ebx
c000bfbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfc5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfcc:	74 5b                	je     c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfce:	89 c7                	mov    edi,eax
c000bfd0:	84 c0                	test   al,al
c000bfd2:	74 24                	je     c000bff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfd4:	83 fe 0f             	cmp    esi,0xf
c000bfd7:	0f 8f d9 00 00 00    	jg     c000c0b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfdd:	8a 86 c0 12 02 c0    	mov    al,BYTE PTR [esi-0x3ffded40]
c000bfe3:	25 ff 00 00 00       	and    eax,0xff
c000bfe8:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000bff0:	89 c6                	mov    esi,eax
c000bff2:	66 d1 ef             	shr    di,1
c000bff5:	83 e7 01             	and    edi,0x1
c000bff8:	83 ec 08             	sub    esp,0x8
c000bffb:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c000:	31 db                	xor    ebx,ebx
c000c002:	50                   	push   eax
c000c003:	68 71 f9 01 c0       	push   0xc001f971
c000c008:	e8 ed e5 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c015:	85 c0                	test   eax,eax
c000c017:	7f 51                	jg     c000c06a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c019:	83 ec 0c             	sub    esp,0xc
c000c01c:	68 88 f9 01 c0       	push   0xc001f988
c000c021:	e8 95 43 00 00       	call   c00103bb <KePanic(char const*)>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c02c:	31 d2                	xor    edx,edx
c000c02e:	89 c8                	mov    eax,ecx
c000c030:	c1 e0 04             	shl    eax,0x4
c000c033:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c03a:	85 db                	test   ebx,ebx
c000c03c:	0f 84 8b 00 00 00    	je     c000c0cd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c042:	42                   	inc    edx
c000c043:	83 fa 04             	cmp    edx,0x4
c000c046:	75 eb                	jne    c000c033 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c048:	83 ec 0c             	sub    esp,0xc
c000c04b:	68 dc f9 01 c0       	push   0xc001f9dc
c000c050:	e8 66 43 00 00       	call   c00103bb <KePanic(char const*)>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c05d:	5b                   	pop    ebx
c000c05e:	5e                   	pop    esi
c000c05f:	5f                   	pop    edi
c000c060:	c3                   	ret    
c000c061:	43                   	inc    ebx
c000c062:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c068:	7e af                	jle    c000c019 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c06a:	83 ec 08             	sub    esp,0x8
c000c06d:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c074:	56                   	push   esi
c000c075:	50                   	push   eax
c000c076:	e8 01 0e 01 00       	call   c001ce7c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c07b:	83 c4 10             	add    esp,0x10
c000c07e:	84 c0                	test   al,al
c000c080:	74 df                	je     c000c061 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c082:	81 e7 ff 00 00 00    	and    edi,0xff
c000c088:	50                   	push   eax
c000c089:	8d 46 20             	lea    eax,[esi+0x20]
c000c08c:	57                   	push   edi
c000c08d:	25 ff 00 00 00       	and    eax,0xff
c000c092:	6a 00                	push   0x0
c000c094:	50                   	push   eax
c000c095:	89 f0                	mov    eax,esi
c000c097:	6a 00                	push   0x0
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	6a 00                	push   0x0
c000c0a0:	50                   	push   eax
c000c0a1:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0a8:	50                   	push   eax
c000c0a9:	e8 48 0f 01 00       	call   c001cff6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0ae:	83 c4 20             	add    esp,0x20
c000c0b1:	e9 73 ff ff ff       	jmp    c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0b6:	83 ec 0c             	sub    esp,0xc
c000c0b9:	31 ff                	xor    edi,edi
c000c0bb:	68 a4 f9 01 c0       	push   0xc001f9a4
c000c0c0:	e8 f6 42 00 00       	call   c00103bb <KePanic(char const*)>
c000c0c5:	83 c4 10             	add    esp,0x10
c000c0c8:	e9 2b ff ff ff       	jmp    c000bff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0cd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0d4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0df:	5b                   	pop    ebx
c000c0e0:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0e7:	89 f0                	mov    eax,esi
c000c0e9:	5e                   	pop    esi
c000c0ea:	5f                   	pop    edi
c000c0eb:	c3                   	ret    

c000c0ec <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0f4:	c1 e0 04             	shl    eax,0x4
c000c0f7:	8d 50 10             	lea    edx,[eax+0x10]
c000c0fa:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c100:	74 08                	je     c000c10a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c102:	83 c0 04             	add    eax,0x4
c000c105:	39 d0                	cmp    eax,edx
c000c107:	75 f1                	jne    c000c0fa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c109:	c3                   	ret    
c000c10a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c114:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c11e:	eb e2                	jmp    c000c102 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c120:	53                   	push   ebx
c000c121:	83 ec 08             	sub    esp,0x8
c000c124:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c128:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c12d:	74 0e                	je     c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c12f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c134:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c13b:	75 37                	jne    c000c174 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c141:	83 c0 20             	add    eax,0x20
c000c144:	c1 e0 04             	shl    eax,0x4
c000c147:	8d 50 10             	lea    edx,[eax+0x10]
c000c14a:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c150:	74 0c                	je     c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c152:	83 c0 04             	add    eax,0x4
c000c155:	39 d0                	cmp    eax,edx
c000c157:	75 f1                	jne    c000c14a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c159:	83 c4 08             	add    esp,0x8
c000c15c:	5b                   	pop    ebx
c000c15d:	c3                   	ret    
c000c15e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c168:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c172:	eb de                	jmp    c000c152 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c174:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c179:	7f 12                	jg     c000c18d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c17b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c17f:	31 c0                	xor    eax,eax
c000c181:	8a 81 c0 12 02 c0    	mov    al,BYTE PTR [ecx-0x3ffded40]
c000c187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18b:	eb b0                	jmp    c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c18d:	83 ec 0c             	sub    esp,0xc
c000c190:	68 95 f9 01 c0       	push   0xc001f995
c000c195:	e8 21 42 00 00       	call   c00103bb <KePanic(char const*)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	eb 9e                	jmp    c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c19f <setupINTS()>:
c000c19f:	31 c0                	xor    eax,eax
c000c1a1:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1ab:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1b5:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1bf:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1c9:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1d3:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1dd:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1e7:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1f1:	83 c0 10             	add    eax,0x10
c000c1f4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c1f9:	75 a6                	jne    c000c1a1 <setupINTS()+0x2>
c000c1fb:	c3                   	ret    

c000c1fc <convertLegacyIRQNumber(int)>:
c000c1fc:	83 ec 0c             	sub    esp,0xc
c000c1ff:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c209:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c210:	74 0f                	je     c000c221 <convertLegacyIRQNumber(int)+0x25>
c000c212:	83 f8 0f             	cmp    eax,0xf
c000c215:	7f 0e                	jg     c000c225 <convertLegacyIRQNumber(int)+0x29>
c000c217:	31 c9                	xor    ecx,ecx
c000c219:	8a 88 c0 12 02 c0    	mov    cl,BYTE PTR [eax-0x3ffded40]
c000c21f:	89 c8                	mov    eax,ecx
c000c221:	83 c4 0c             	add    esp,0xc
c000c224:	c3                   	ret    
c000c225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c229:	83 ec 0c             	sub    esp,0xc
c000c22c:	68 a4 f9 01 c0       	push   0xc001f9a4
c000c231:	e8 85 41 00 00       	call   c00103bb <KePanic(char const*)>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23d:	83 c4 0c             	add    esp,0xc
c000c240:	c3                   	ret    
c000c241:	90                   	nop

c000c242 <startGUI(void*)>:
c000c242:	55                   	push   ebp
c000c243:	89 e5                	mov    ebp,esp
c000c245:	53                   	push   ebx
c000c246:	83 ec 04             	sub    esp,0x4
c000c249:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c24e:	48                   	dec    eax
c000c24f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c254:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c259:	85 c0                	test   eax,eax
c000c25b:	75 01                	jne    c000c25e <startGUI(void*)+0x1c>
c000c25d:	fb                   	sti    
c000c25e:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c264:	83 ec 08             	sub    esp,0x8
c000c267:	6a 01                	push   0x1
c000c269:	68 01 fa 01 c0       	push   0xc001fa01
c000c26e:	e8 e3 7a 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 ec 08             	sub    esp,0x8
c000c279:	53                   	push   ebx
c000c27a:	50                   	push   eax
c000c27b:	e8 07 7d 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000c280:	83 c4 10             	add    esp,0x10
c000c283:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c289:	83 ec 08             	sub    esp,0x8
c000c28c:	6a 01                	push   0x1
c000c28e:	68 1b fa 01 c0       	push   0xc001fa1b
c000c293:	e8 be 7a 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000c298:	83 c4 10             	add    esp,0x10
c000c29b:	83 ec 08             	sub    esp,0x8
c000c29e:	53                   	push   ebx
c000c29f:	50                   	push   eax
c000c2a0:	e8 e2 7c 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000c2a5:	83 c4 10             	add    esp,0x10
c000c2a8:	90                   	nop
c000c2a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2ac:	c9                   	leave  
c000c2ad:	c3                   	ret    

c000c2ae <startGUIVESA(void*)>:
c000c2ae:	55                   	push   ebp
c000c2af:	89 e5                	mov    ebp,esp
c000c2b1:	53                   	push   ebx
c000c2b2:	83 ec 04             	sub    esp,0x4
c000c2b5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ba:	48                   	dec    eax
c000c2bb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2c0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2c5:	85 c0                	test   eax,eax
c000c2c7:	75 01                	jne    c000c2ca <startGUIVESA(void*)+0x1c>
c000c2c9:	fb                   	sti    
c000c2ca:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2d0:	83 ec 08             	sub    esp,0x8
c000c2d3:	6a 01                	push   0x1
c000c2d5:	68 39 fa 01 c0       	push   0xc001fa39
c000c2da:	e8 77 7a 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 ec 08             	sub    esp,0x8
c000c2e5:	53                   	push   ebx
c000c2e6:	50                   	push   eax
c000c2e7:	e8 9b 7c 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000c2ec:	83 c4 10             	add    esp,0x10
c000c2ef:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2f5:	83 ec 08             	sub    esp,0x8
c000c2f8:	6a 01                	push   0x1
c000c2fa:	68 1b fa 01 c0       	push   0xc001fa1b
c000c2ff:	e8 52 7a 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	83 ec 08             	sub    esp,0x8
c000c30a:	53                   	push   ebx
c000c30b:	50                   	push   eax
c000c30c:	e8 76 7c 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	90                   	nop
c000c315:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c318:	c9                   	leave  
c000c319:	c3                   	ret    

c000c31a <sendKeyToTerminal(unsigned char)>:
c000c31a:	55                   	push   ebp
c000c31b:	89 e5                	mov    ebp,esp
c000c31d:	83 ec 28             	sub    esp,0x28
c000c320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c323:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c326:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c32c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c32f:	25 ff 00 00 00       	and    eax,0xff
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	50                   	push   eax
c000c338:	52                   	push   edx
c000c339:	e8 b2 c7 ff ff       	call   c0008af0 <VgaText::receiveKey(unsigned char)>
c000c33e:	83 c4 10             	add    esp,0x10
c000c341:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c345:	74 10                	je     c000c357 <sendKeyToTerminal(unsigned char)+0x3d>
c000c347:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c34b:	74 0a                	je     c000c357 <sendKeyToTerminal(unsigned char)+0x3d>
c000c34d:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c351:	0f 85 8f 00 00 00    	jne    c000c3e6 <sendKeyToTerminal(unsigned char)+0xcc>
c000c357:	fa                   	cli    
c000c358:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c35d:	40                   	inc    eax
c000c35e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c363:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c368:	40                   	inc    eax
c000c369:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c36e:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c373:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c376:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c380:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c384:	74 1f                	je     c000c3a5 <sendKeyToTerminal(unsigned char)+0x8b>
c000c386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c389:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c38c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c38f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c392:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c395:	83 ec 0c             	sub    esp,0xc
c000c398:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c39b:	e8 cc 88 00 00       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	eb db                	jmp    c000c380 <sendKeyToTerminal(unsigned char)+0x66>
c000c3a5:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3aa:	48                   	dec    eax
c000c3ab:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3b0:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b5:	85 c0                	test   eax,eax
c000c3b7:	75 18                	jne    c000c3d1 <sendKeyToTerminal(unsigned char)+0xb7>
c000c3b9:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3be:	85 c0                	test   eax,eax
c000c3c0:	74 0f                	je     c000c3d1 <sendKeyToTerminal(unsigned char)+0xb7>
c000c3c2:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3cc:	e8 d7 83 00 00       	call   c00147a8 <schedule()>
c000c3d1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3d6:	48                   	dec    eax
c000c3d7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3e1:	85 c0                	test   eax,eax
c000c3e3:	75 01                	jne    c000c3e6 <sendKeyToTerminal(unsigned char)+0xcc>
c000c3e5:	fb                   	sti    
c000c3e6:	90                   	nop
c000c3e7:	c9                   	leave  
c000c3e8:	c3                   	ret    

c000c3e9 <sendKeyboardToken(KeyboardToken)>:
c000c3e9:	55                   	push   ebp
c000c3ea:	89 e5                	mov    ebp,esp
c000c3ec:	83 ec 18             	sub    esp,0x18
c000c3ef:	e8 17 40 00 00       	call   c001040b <Krnl::userIOReceived()>
c000c3f4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c3f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fa:	25 ff ff 00 00       	and    eax,0xffff
c000c3ff:	83 f2 01             	xor    edx,0x1
c000c402:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c408:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c40d:	85 c0                	test   eax,eax
c000c40f:	74 24                	je     c000c435 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c411:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c417:	83 ec 04             	sub    esp,0x4
c000c41a:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c41f:	83 ec 08             	sub    esp,0x8
c000c422:	89 e2                	mov    edx,esp
c000c424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c427:	89 02                	mov    DWORD PTR [edx],eax
c000c429:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c42c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c430:	ff d1                	call   ecx
c000c432:	83 c4 10             	add    esp,0x10
c000c435:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c439:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c43c:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c441:	38 c2                	cmp    dl,al
c000c443:	74 1e                	je     c000c463 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c445:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c448:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c44d:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c452:	25 ff 00 00 00       	and    eax,0xff
c000c457:	83 ec 0c             	sub    esp,0xc
c000c45a:	50                   	push   eax
c000c45b:	e8 e4 bd ff ff       	call   c0008244 <setTerminalScrollLock(bool)>
c000c460:	83 c4 10             	add    esp,0x10
c000c463:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c466:	84 c0                	test   al,al
c000c468:	0f 84 ae 00 00 00    	je     c000c51c <sendKeyboardToken(KeyboardToken)+0x133>
c000c46e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c471:	66 3d 18 03          	cmp    ax,0x318
c000c475:	75 06                	jne    c000c47d <sendKeyboardToken(KeyboardToken)+0x94>
c000c477:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c480:	66 3d 19 03          	cmp    ax,0x319
c000c484:	75 06                	jne    c000c48c <sendKeyboardToken(KeyboardToken)+0xa3>
c000c486:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c48c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48f:	66 3d 1a 03          	cmp    ax,0x31a
c000c493:	75 06                	jne    c000c49b <sendKeyboardToken(KeyboardToken)+0xb2>
c000c495:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49e:	66 3d 1b 03          	cmp    ax,0x31b
c000c4a2:	75 06                	jne    c000c4aa <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4a4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ad:	66 3d 1c 03          	cmp    ax,0x31c
c000c4b1:	75 06                	jne    c000c4b9 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4b3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bc:	66 3d 1d 03          	cmp    ax,0x31d
c000c4c0:	75 06                	jne    c000c4c8 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4c2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4cb:	66 3d 1e 03          	cmp    ax,0x31e
c000c4cf:	75 06                	jne    c000c4d7 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4d1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4da:	66 3d 1f 03          	cmp    ax,0x31f
c000c4de:	75 06                	jne    c000c4e6 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4e0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e9:	66 3d 20 03          	cmp    ax,0x320
c000c4ed:	75 06                	jne    c000c4f5 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4ef:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f8:	66 3d 21 03          	cmp    ax,0x321
c000c4fc:	75 06                	jne    c000c504 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c4fe:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c507:	66 3d 22 03          	cmp    ax,0x322
c000c50b:	0f 85 c9 00 00 00    	jne    c000c5da <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c511:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c517:	e9 be 00 00 00       	jmp    c000c5da <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51f:	66 3d 18 03          	cmp    ax,0x318
c000c523:	75 0a                	jne    c000c52f <sendKeyboardToken(KeyboardToken)+0x146>
c000c525:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c52b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c532:	66 3d 19 03          	cmp    ax,0x319
c000c536:	75 0a                	jne    c000c542 <sendKeyboardToken(KeyboardToken)+0x159>
c000c538:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c53e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c545:	66 3d 1a 03          	cmp    ax,0x31a
c000c549:	75 0a                	jne    c000c555 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c54b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c551:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c558:	66 3d 1b 03          	cmp    ax,0x31b
c000c55c:	75 0a                	jne    c000c568 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c55e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c564:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56b:	66 3d 1c 03          	cmp    ax,0x31c
c000c56f:	75 0a                	jne    c000c57b <sendKeyboardToken(KeyboardToken)+0x192>
c000c571:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c577:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57e:	66 3d 1d 03          	cmp    ax,0x31d
c000c582:	75 0a                	jne    c000c58e <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c584:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c58a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c591:	66 3d 1e 03          	cmp    ax,0x31e
c000c595:	75 0a                	jne    c000c5a1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c597:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c59d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a4:	66 3d 1f 03          	cmp    ax,0x31f
c000c5a8:	75 0a                	jne    c000c5b4 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5aa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b7:	66 3d 20 03          	cmp    ax,0x320
c000c5bb:	75 0a                	jne    c000c5c7 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5bd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ca:	66 3d 21 03          	cmp    ax,0x321
c000c5ce:	75 0a                	jne    c000c5da <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5d0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5dd:	66 3d 00 02          	cmp    ax,0x200
c000c5e1:	75 2c                	jne    c000c60f <sendKeyboardToken(KeyboardToken)+0x226>
c000c5e3:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5e8:	83 f0 01             	xor    eax,0x1
c000c5eb:	84 c0                	test   al,al
c000c5ed:	74 20                	je     c000c60f <sendKeyboardToken(KeyboardToken)+0x226>
c000c5ef:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c5f4:	6a 01                	push   0x1
c000c5f6:	6a 00                	push   0x0
c000c5f8:	68 42 c2 00 c0       	push   0xc000c242
c000c5fd:	50                   	push   eax
c000c5fe:	e8 5d 7f 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c000c603:	83 c4 10             	add    esp,0x10
c000c606:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c60d:	eb 33                	jmp    c000c642 <sendKeyboardToken(KeyboardToken)+0x259>
c000c60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c612:	66 3d 01 02          	cmp    ax,0x201
c000c616:	75 2a                	jne    c000c642 <sendKeyboardToken(KeyboardToken)+0x259>
c000c618:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c61d:	83 f0 01             	xor    eax,0x1
c000c620:	84 c0                	test   al,al
c000c622:	74 1e                	je     c000c642 <sendKeyboardToken(KeyboardToken)+0x259>
c000c624:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c629:	6a 01                	push   0x1
c000c62b:	6a 00                	push   0x0
c000c62d:	68 ae c2 00 c0       	push   0xc000c2ae
c000c632:	50                   	push   eax
c000c633:	e8 28 7f 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c645:	66 3d 25 03          	cmp    ax,0x325
c000c649:	75 06                	jne    c000c651 <sendKeyboardToken(KeyboardToken)+0x268>
c000c64b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c654:	66 3d 24 03          	cmp    ax,0x324
c000c658:	75 06                	jne    c000c660 <sendKeyboardToken(KeyboardToken)+0x277>
c000c65a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c663:	66 3d 23 03          	cmp    ax,0x323
c000c667:	75 06                	jne    c000c66f <sendKeyboardToken(KeyboardToken)+0x286>
c000c669:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c672:	66 3d 26 03          	cmp    ax,0x326
c000c676:	75 06                	jne    c000c67e <sendKeyboardToken(KeyboardToken)+0x295>
c000c678:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c681:	66 3d 27 03          	cmp    ax,0x327
c000c685:	75 06                	jne    c000c68d <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c687:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c690:	66 3d 22 03          	cmp    ax,0x322
c000c694:	75 06                	jne    c000c69c <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c696:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c69c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6a0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6a3:	83 f0 01             	xor    eax,0x1
c000c6a6:	84 c0                	test   al,al
c000c6a8:	74 7b                	je     c000c725 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6aa:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6af:	84 c0                	test   al,al
c000c6b1:	74 43                	je     c000c6f6 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6b3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6b7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6bb:	74 2d                	je     c000c6ea <sendKeyboardToken(KeyboardToken)+0x301>
c000c6bd:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6c3:	89 d0                	mov    eax,edx
c000c6c5:	c1 e0 02             	shl    eax,0x2
c000c6c8:	01 d0                	add    eax,edx
c000c6ca:	01 c0                	add    eax,eax
c000c6cc:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d4:	25 ff ff 00 00       	and    eax,0xffff
c000c6d9:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6dc:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6e1:	01 d0                	add    eax,edx
c000c6e3:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6e8:	eb 71                	jmp    c000c75b <sendKeyboardToken(KeyboardToken)+0x372>
c000c6ea:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c6f4:	eb 65                	jmp    c000c75b <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f6:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6fb:	85 c0                	test   eax,eax
c000c6fd:	74 1a                	je     c000c719 <sendKeyboardToken(KeyboardToken)+0x330>
c000c6ff:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c704:	25 ff 00 00 00       	and    eax,0xff
c000c709:	83 ec 0c             	sub    esp,0xc
c000c70c:	50                   	push   eax
c000c70d:	e8 08 fc ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c712:	83 c4 10             	add    esp,0x10
c000c715:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c719:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c723:	eb 36                	jmp    c000c75b <sendKeyboardToken(KeyboardToken)+0x372>
c000c725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c728:	66 3d 01 01          	cmp    ax,0x101
c000c72c:	75 2d                	jne    c000c75b <sendKeyboardToken(KeyboardToken)+0x372>
c000c72e:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c733:	85 c0                	test   eax,eax
c000c735:	74 1a                	je     c000c751 <sendKeyboardToken(KeyboardToken)+0x368>
c000c737:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73c:	25 ff 00 00 00       	and    eax,0xff
c000c741:	83 ec 0c             	sub    esp,0xc
c000c744:	50                   	push   eax
c000c745:	e8 d0 fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c74a:	83 c4 10             	add    esp,0x10
c000c74d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c751:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c75b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c75e:	83 f0 01             	xor    eax,0x1
c000c761:	84 c0                	test   al,al
c000c763:	74 4e                	je     c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c765:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c768:	83 f0 01             	xor    eax,0x1
c000c76b:	84 c0                	test   al,al
c000c76d:	74 44                	je     c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c76f:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c774:	83 f0 01             	xor    eax,0x1
c000c777:	84 c0                	test   al,al
c000c779:	74 38                	je     c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77e:	66 83 f8 1f          	cmp    ax,0x1f
c000c782:	76 09                	jbe    c000c78d <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c787:	66 83 f8 7e          	cmp    ax,0x7e
c000c78b:	76 12                	jbe    c000c79f <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c78d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c790:	66 83 f8 0a          	cmp    ax,0xa
c000c794:	74 09                	je     c000c79f <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c799:	66 83 f8 08          	cmp    ax,0x8
c000c79d:	75 14                	jne    c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c79f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a2:	25 ff 00 00 00       	and    eax,0xff
c000c7a7:	83 ec 0c             	sub    esp,0xc
c000c7aa:	50                   	push   eax
c000c7ab:	e8 6a fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c7b0:	83 c4 10             	add    esp,0x10
c000c7b3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7b6:	83 f0 01             	xor    eax,0x1
c000c7b9:	84 c0                	test   al,al
c000c7bb:	74 51                	je     c000c80e <sendKeyboardToken(KeyboardToken)+0x425>
c000c7bd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7c0:	83 f0 01             	xor    eax,0x1
c000c7c3:	84 c0                	test   al,al
c000c7c5:	74 47                	je     c000c80e <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c7:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7cc:	84 c0                	test   al,al
c000c7ce:	74 3e                	je     c000c80e <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d3:	66 83 f8 3f          	cmp    ax,0x3f
c000c7d7:	76 35                	jbe    c000c80e <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7dc:	66 83 f8 7f          	cmp    ax,0x7f
c000c7e0:	77 2c                	ja     c000c80e <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e5:	88 c2                	mov    dl,al
c000c7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ea:	66 83 f8 5f          	cmp    ax,0x5f
c000c7ee:	76 04                	jbe    c000c7f4 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7f0:	b0 20                	mov    al,0x20
c000c7f2:	eb 02                	jmp    c000c7f6 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7f4:	b0 00                	mov    al,0x0
c000c7f6:	29 c2                	sub    edx,eax
c000c7f8:	88 d0                	mov    al,dl
c000c7fa:	83 e8 40             	sub    eax,0x40
c000c7fd:	25 ff 00 00 00       	and    eax,0xff
c000c802:	83 ec 0c             	sub    esp,0xc
c000c805:	50                   	push   eax
c000c806:	e8 0f fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c811:	66 3d 00 03          	cmp    ax,0x300
c000c815:	75 0f                	jne    c000c826 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c817:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c81a:	83 f0 01             	xor    eax,0x1
c000c81d:	84 c0                	test   al,al
c000c81f:	74 05                	je     c000c826 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c821:	e8 1f ba ff ff       	call   c0008245 <doTerminalCycle()>
c000c826:	90                   	nop
c000c827:	c9                   	leave  
c000c828:	c3                   	ret    

c000c829 <clearInternalKeybuffer(VgaText*)>:
c000c829:	55                   	push   ebp
c000c82a:	89 e5                	mov    ebp,esp
c000c82c:	83 ec 08             	sub    esp,0x8
c000c82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c832:	05 02 01 00 00       	add    eax,0x102
c000c837:	83 ec 0c             	sub    esp,0xc
c000c83a:	50                   	push   eax
c000c83b:	e8 f0 3c ff ff       	call   c0000530 <strlen>
c000c840:	83 c4 10             	add    esp,0x10
c000c843:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c846:	81 c2 02 01 00 00    	add    edx,0x102
c000c84c:	83 ec 04             	sub    esp,0x4
c000c84f:	50                   	push   eax
c000c850:	6a 00                	push   0x0
c000c852:	52                   	push   edx
c000c853:	e8 68 3c ff ff       	call   c00004c0 <memset>
c000c858:	83 c4 10             	add    esp,0x10
c000c85b:	90                   	nop
c000c85c:	c9                   	leave  
c000c85d:	c3                   	ret    

c000c85e <readKeyboard(VgaText*, char*, unsigned long)>:
c000c85e:	55                   	push   ebp
c000c85f:	89 e5                	mov    ebp,esp
c000c861:	83 ec 18             	sub    esp,0x18
c000c864:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c869:	85 c0                	test   eax,eax
c000c86b:	74 2a                	je     c000c897 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c86d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c873:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c879:	83 ec 04             	sub    esp,0x4
c000c87c:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c881:	83 ec 08             	sub    esp,0x8
c000c884:	89 e2                	mov    edx,esp
c000c886:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c889:	89 02                	mov    DWORD PTR [edx],eax
c000c88b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c88e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c892:	ff d1                	call   ecx
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	fb                   	sti    
c000c898:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c89f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8a3:	0f 84 f5 00 00 00    	je     c000c99e <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c8a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ac:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8b2:	84 c0                	test   al,al
c000c8b4:	75 28                	jne    c000c8de <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8b6:	fa                   	cli    
c000c8b7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8bc:	40                   	inc    eax
c000c8bd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8c2:	e8 e1 7e 00 00       	call   c00147a8 <schedule()>
c000c8c7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8cc:	48                   	dec    eax
c000c8cd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8d2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d7:	85 c0                	test   eax,eax
c000c8d9:	75 ce                	jne    c000c8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8db:	fb                   	sti    
c000c8dc:	eb cb                	jmp    c000c8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8e1:	8d 50 01             	lea    edx,[eax+0x1]
c000c8e4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8ea:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8f0:	88 10                	mov    BYTE PTR [eax],dl
c000c8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f5:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8fb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c8fe:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c902:	75 1e                	jne    c000c922 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c904:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c909:	8b 00                	mov    eax,DWORD PTR [eax]
c000c90b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c90e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c914:	83 ec 08             	sub    esp,0x8
c000c917:	6a 02                	push   0x2
c000c919:	50                   	push   eax
c000c91a:	e8 70 3e 00 00       	call   c001078f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c926:	75 1e                	jne    c000c946 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c928:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c92d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c92f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c932:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c938:	83 ec 08             	sub    esp,0x8
c000c93b:	6a 09                	push   0x9
c000c93d:	50                   	push   eax
c000c93e:	e8 4c 3e 00 00       	call   c001078f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c943:	83 c4 10             	add    esp,0x10
c000c946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c949:	05 02 01 00 00       	add    eax,0x102
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	50                   	push   eax
c000c952:	e8 d9 3b ff ff       	call   c0000530 <strlen>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c95d:	81 c2 02 01 00 00    	add    edx,0x102
c000c963:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c966:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c969:	81 c2 02 01 00 00    	add    edx,0x102
c000c96f:	83 ec 04             	sub    esp,0x4
c000c972:	50                   	push   eax
c000c973:	51                   	push   ecx
c000c974:	52                   	push   edx
c000c975:	e8 56 3a ff ff       	call   c00003d0 <memmove>
c000c97a:	83 c4 10             	add    esp,0x10
c000c97d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c980:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c983:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c987:	74 10                	je     c000c999 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c989:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c98d:	74 0a                	je     c000c999 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c98f:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c993:	0f 85 06 ff ff ff    	jne    c000c89f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c999:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c99c:	eb 03                	jmp    c000c9a1 <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c99e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9a1:	c9                   	leave  
c000c9a2:	c3                   	ret    
c000c9a3:	90                   	nop

c000c9a4 <Keyboard::Keyboard(char const*)>:
c000c9a4:	83 ec 0c             	sub    esp,0xc
c000c9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ab:	83 ec 08             	sub    esp,0x8
c000c9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b2:	50                   	push   eax
c000c9b3:	e8 18 f2 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000c9b8:	83 c4 10             	add    esp,0x10
c000c9bb:	ba 5c fa 01 c0       	mov    edx,0xc001fa5c
c000c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c4:	89 10                	mov    DWORD PTR [eax],edx
c000c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9d4:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9db:	90                   	nop
c000c9dc:	83 c4 0c             	add    esp,0xc
c000c9df:	c3                   	ret    

c000c9e0 <Keyboard::~Keyboard()>:
c000c9e0:	83 ec 0c             	sub    esp,0xc
c000c9e3:	ba 5c fa 01 c0       	mov    edx,0xc001fa5c
c000c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ec:	89 10                	mov    DWORD PTR [eax],edx
c000c9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f2:	83 ec 0c             	sub    esp,0xc
c000c9f5:	50                   	push   eax
c000c9f6:	e8 3f ef ff ff       	call   c000b93a <Device::~Device()>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	90                   	nop
c000c9ff:	83 c4 0c             	add    esp,0xc
c000ca02:	c3                   	ret    
c000ca03:	90                   	nop

c000ca04 <Keyboard::~Keyboard()>:
c000ca04:	83 ec 0c             	sub    esp,0xc
c000ca07:	83 ec 0c             	sub    esp,0xc
c000ca0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0e:	e8 cd ff ff ff       	call   c000c9e0 <Keyboard::~Keyboard()>
c000ca13:	83 c4 10             	add    esp,0x10
c000ca16:	83 ec 08             	sub    esp,0x8
c000ca19:	68 5c 01 00 00       	push   0x15c
c000ca1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca22:	e8 dd da ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000ca27:	83 c4 10             	add    esp,0x10
c000ca2a:	83 c4 0c             	add    esp,0xc
c000ca2d:	c3                   	ret    

c000ca2e <LogicalDisk::close(int, int, void*)>:
c000ca2e:	83 c8 ff             	or     eax,0xffffffff
c000ca31:	c3                   	ret    

c000ca32 <LogicalDisk::~LogicalDisk()>:
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c000ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3e:	89 10                	mov    DWORD PTR [eax],edx
c000ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca44:	83 ec 0c             	sub    esp,0xc
c000ca47:	50                   	push   eax
c000ca48:	e8 ed ee ff ff       	call   c000b93a <Device::~Device()>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	90                   	nop
c000ca51:	83 c4 0c             	add    esp,0xc
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <LogicalDisk::~LogicalDisk()>:
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca60:	e8 cd ff ff ff       	call   c000ca32 <LogicalDisk::~LogicalDisk()>
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	83 ec 08             	sub    esp,0x8
c000ca6b:	68 78 01 00 00       	push   0x178
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	e8 8b da ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	83 c4 0c             	add    esp,0xc
c000ca7f:	c3                   	ret    

c000ca80 <LogicalDisk::open(int, int, void*)>:
c000ca80:	83 ec 18             	sub    esp,0x18
c000ca83:	68 88 fa 01 c0       	push   0xc001fa88
c000ca88:	e8 2e 39 00 00       	call   c00103bb <KePanic(char const*)>
c000ca8d:	83 c8 ff             	or     eax,0xffffffff
c000ca90:	83 c4 1c             	add    esp,0x1c
c000ca93:	c3                   	ret    

c000ca94 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca94:	53                   	push   ebx
c000ca95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caa1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000caa7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000caad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cab3:	77 10                	ja     c000cac5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cab5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cabb:	89 d3                	mov    ebx,edx
c000cabd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cac3:	72 05                	jb     c000caca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cac5:	83 c8 ff             	or     eax,0xffffffff
c000cac8:	89 c2                	mov    edx,eax
c000caca:	5b                   	pop    ebx
c000cacb:	c3                   	ret    

c000cacc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cacc:	56                   	push   esi
c000cacd:	83 c8 ff             	or     eax,0xffffffff
c000cad0:	53                   	push   ebx
c000cad1:	89 c2                	mov    edx,eax
c000cad3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cad7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cadb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cadf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cae5:	77 27                	ja     c000cb0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cae7:	89 d8                	mov    eax,ebx
c000cae9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000caef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000caf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cafa:	89 c2                	mov    edx,eax
c000cafc:	73 10                	jae    c000cb0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cafe:	89 c8                	mov    eax,ecx
c000cb00:	89 da                	mov    edx,ebx
c000cb02:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb08:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb0e:	5b                   	pop    ebx
c000cb0f:	5e                   	pop    esi
c000cb10:	c3                   	ret    
c000cb11:	90                   	nop

c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb12:	83 ec 1c             	sub    esp,0x1c
c000cb15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb29:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb38:	83 ec 08             	sub    esp,0x8
c000cb3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb3f:	50                   	push   eax
c000cb40:	e8 8b f0 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000cb45:	83 c4 10             	add    esp,0x10
c000cb48:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c000cb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb51:	89 10                	mov    DWORD PTR [eax],edx
c000cb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb57:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb62:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb78:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb8e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb94:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb9a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb9e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cba1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cba5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbab:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbb9:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbcd:	90                   	nop
c000cbce:	83 c4 1c             	add    esp,0x1c
c000cbd1:	c3                   	ret    

c000cbd2 <LogicalDisk::assignDriveLetter()>:
c000cbd2:	55                   	push   ebp
c000cbd3:	57                   	push   edi
c000cbd4:	56                   	push   esi
c000cbd5:	53                   	push   ebx
c000cbd6:	83 ec 14             	sub    esp,0x14
c000cbd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbdd:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbe3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbe9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbed:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbf3:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cbf9:	3c 01                	cmp    al,0x1
c000cbfb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc03:	19 c0                	sbb    eax,eax
c000cc05:	83 e0 02             	and    eax,0x2
c000cc08:	83 c0 41             	add    eax,0x41
c000cc0b:	0f be e8             	movsx  ebp,al
c000cc0e:	3c 43                	cmp    al,0x43
c000cc10:	75 10                	jne    c000cc22 <LogicalDisk::assignDriveLetter()+0x50>
c000cc12:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc19:	75 5d                	jne    c000cc78 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc1b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc20:	75 56                	jne    c000cc78 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc22:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc25:	ba 01 00 00 00       	mov    edx,0x1
c000cc2a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc2e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc32:	d3 e2                	shl    edx,cl
c000cc34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc38:	89 d7                	mov    edi,edx
c000cc3a:	89 d6                	mov    esi,edx
c000cc3c:	c1 ff 1f             	sar    edi,0x1f
c000cc3f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc43:	21 f9                	and    ecx,edi
c000cc45:	09 d1                	or     ecx,edx
c000cc47:	75 2f                	jne    c000cc78 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc51:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc57:	09 f2                	or     edx,esi
c000cc59:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc63:	09 fa                	or     edx,edi
c000cc65:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc69:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc6f:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc76:	eb 08                	jmp    c000cc80 <LogicalDisk::assignDriveLetter()+0xae>
c000cc78:	45                   	inc    ebp
c000cc79:	40                   	inc    eax
c000cc7a:	3c 5b                	cmp    al,0x5b
c000cc7c:	75 90                	jne    c000cc0e <LogicalDisk::assignDriveLetter()+0x3c>
c000cc7e:	31 c0                	xor    eax,eax
c000cc80:	83 c4 14             	add    esp,0x14
c000cc83:	5b                   	pop    ebx
c000cc84:	5e                   	pop    esi
c000cc85:	5f                   	pop    edi
c000cc86:	5d                   	pop    ebp
c000cc87:	c3                   	ret    

c000cc88 <LogicalDisk::mount()>:
c000cc88:	56                   	push   esi
c000cc89:	53                   	push   ebx
c000cc8a:	53                   	push   ebx
c000cc8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc8f:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cc95:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cc9f:	85 db                	test   ebx,ebx
c000cca1:	74 27                	je     c000ccca <LogicalDisk::mount()+0x42>
c000cca3:	51                   	push   ecx
c000cca4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccab:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccad:	83 e8 41             	sub    eax,0x41
c000ccb0:	50                   	push   eax
c000ccb1:	56                   	push   esi
c000ccb2:	53                   	push   ebx
c000ccb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	84 c0                	test   al,al
c000ccbb:	74 08                	je     c000ccc5 <LogicalDisk::mount()+0x3d>
c000ccbd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ccc3:	eb 07                	jmp    c000cccc <LogicalDisk::mount()+0x44>
c000ccc5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccc8:	eb d5                	jmp    c000cc9f <LogicalDisk::mount()+0x17>
c000ccca:	31 c0                	xor    eax,eax
c000cccc:	5a                   	pop    edx
c000cccd:	5b                   	pop    ebx
c000ccce:	5e                   	pop    esi
c000cccf:	c3                   	ret    

c000ccd0 <LogicalDisk::unmount()>:
c000ccd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccde:	c3                   	ret    
c000ccdf:	90                   	nop

c000cce0 <LogicalDisk::eject()>:
c000cce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccea:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccf0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccf3:	90                   	nop

c000ccf4 <LogicalDisk::unassignDriveLetter()>:
c000ccf4:	57                   	push   edi
c000ccf5:	56                   	push   esi
c000ccf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccfa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd01:	84 c9                	test   cl,cl
c000cd03:	75 0f                	jne    c000cd14 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd05:	c7 44 24 0c ac fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001faac
c000cd0d:	5e                   	pop    esi
c000cd0e:	5f                   	pop    edi
c000cd0f:	e9 a7 36 00 00       	jmp    c00103bb <KePanic(char const*)>
c000cd14:	83 e9 41             	sub    ecx,0x41
c000cd17:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd1e:	b8 01 00 00 00       	mov    eax,0x1
c000cd23:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd2e:	d3 e0                	shl    eax,cl
c000cd30:	89 c7                	mov    edi,eax
c000cd32:	f7 d0                	not    eax
c000cd34:	c1 ff 1f             	sar    edi,0x1f
c000cd37:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd3d:	89 fe                	mov    esi,edi
c000cd3f:	f7 d6                	not    esi
c000cd41:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd47:	5e                   	pop    esi
c000cd48:	5f                   	pop    edi
c000cd49:	c3                   	ret    

c000cd4a <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd4a:	57                   	push   edi
c000cd4b:	56                   	push   esi
c000cd4c:	53                   	push   ebx
c000cd4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd63:	77 41                	ja     c000cda6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd65:	99                   	cdq    
c000cd66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd6c:	01 c8                	add    eax,ecx
c000cd6e:	11 da                	adc    edx,ebx
c000cd70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd76:	19 d7                	sbb    edi,edx
c000cd78:	72 33                	jb     c000cdad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd9e:	5b                   	pop    ebx
c000cd9f:	5e                   	pop    esi
c000cda0:	5f                   	pop    edi
c000cda1:	e9 c0 0a 00 00       	jmp    c000d866 <VCache::read(unsigned long long, int, void*)>
c000cda6:	b8 05 00 00 00       	mov    eax,0x5
c000cdab:	eb 05                	jmp    c000cdb2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdad:	b8 07 00 00 00       	mov    eax,0x7
c000cdb2:	5b                   	pop    ebx
c000cdb3:	5e                   	pop    esi
c000cdb4:	5f                   	pop    edi
c000cdb5:	c3                   	ret    

c000cdb6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdb6:	57                   	push   edi
c000cdb7:	56                   	push   esi
c000cdb8:	53                   	push   ebx
c000cdb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdcf:	77 41                	ja     c000ce12 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdd1:	99                   	cdq    
c000cdd2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdd8:	01 c8                	add    eax,ecx
c000cdda:	11 da                	adc    edx,ebx
c000cddc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cde2:	19 d7                	sbb    edi,edx
c000cde4:	72 33                	jb     c000ce19 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cde6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdf2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdf6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdfa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce00:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce0a:	5b                   	pop    ebx
c000ce0b:	5e                   	pop    esi
c000ce0c:	5f                   	pop    edi
c000ce0d:	e9 66 09 00 00       	jmp    c000d778 <VCache::write(unsigned long long, int, void*)>
c000ce12:	b8 05 00 00 00       	mov    eax,0x5
c000ce17:	eb 05                	jmp    c000ce1e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce19:	b8 07 00 00 00       	mov    eax,0x7
c000ce1e:	5b                   	pop    ebx
c000ce1f:	5e                   	pop    esi
c000ce20:	5f                   	pop    edi
c000ce21:	c3                   	ret    
c000ce22:	66 90                	xchg   ax,ax

c000ce24 <Mouse::Mouse(char const*)>:
c000ce24:	83 ec 0c             	sub    esp,0xc
c000ce27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2b:	83 ec 08             	sub    esp,0x8
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	50                   	push   eax
c000ce33:	e8 98 ed ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c000ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce44:	89 10                	mov    DWORD PTR [eax],edx
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce54:	90                   	nop
c000ce55:	83 c4 0c             	add    esp,0xc
c000ce58:	c3                   	ret    
c000ce59:	90                   	nop
c000ce5a:	66 90                	xchg   ax,ax

c000ce5c <Mouse::~Mouse()>:
c000ce5c:	83 ec 0c             	sub    esp,0xc
c000ce5f:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c000ce64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce68:	89 10                	mov    DWORD PTR [eax],edx
c000ce6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6e:	83 ec 0c             	sub    esp,0xc
c000ce71:	50                   	push   eax
c000ce72:	e8 c3 ea ff ff       	call   c000b93a <Device::~Device()>
c000ce77:	83 c4 10             	add    esp,0x10
c000ce7a:	90                   	nop
c000ce7b:	83 c4 0c             	add    esp,0xc
c000ce7e:	c3                   	ret    
c000ce7f:	90                   	nop

c000ce80 <Mouse::~Mouse()>:
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	83 ec 0c             	sub    esp,0xc
c000ce86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8a:	e8 cd ff ff ff       	call   c000ce5c <Mouse::~Mouse()>
c000ce8f:	83 c4 10             	add    esp,0x10
c000ce92:	83 ec 08             	sub    esp,0x8
c000ce95:	68 58 01 00 00       	push   0x158
c000ce9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9e:	e8 61 d6 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	83 c4 0c             	add    esp,0xc
c000cea9:	c3                   	ret    

c000ceaa <NIC::getMAC()>:
c000ceaa:	31 c0                	xor    eax,eax
c000ceac:	31 d2                	xor    edx,edx
c000ceae:	c3                   	ret    
c000ceaf:	90                   	nop

c000ceb0 <NIC::write(int, unsigned char*, int*)>:
c000ceb0:	b8 01 00 00 00       	mov    eax,0x1
c000ceb5:	c3                   	ret    

c000ceb6 <NIC::NIC(char const*)>:
c000ceb6:	83 ec 0c             	sub    esp,0xc
c000ceb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cebd:	83 ec 08             	sub    esp,0x8
c000cec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec4:	50                   	push   eax
c000cec5:	e8 06 ed ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000ceca:	83 c4 10             	add    esp,0x10
c000cecd:	ba 2c fb 01 c0       	mov    edx,0xc001fb2c
c000ced2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced6:	89 10                	mov    DWORD PTR [eax],edx
c000ced8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cedc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cee6:	90                   	nop
c000cee7:	83 c4 0c             	add    esp,0xc
c000ceea:	c3                   	ret    
c000ceeb:	90                   	nop

c000ceec <NIC::~NIC()>:
c000ceec:	83 ec 0c             	sub    esp,0xc
c000ceef:	ba 2c fb 01 c0       	mov    edx,0xc001fb2c
c000cef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef8:	89 10                	mov    DWORD PTR [eax],edx
c000cefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefe:	83 ec 0c             	sub    esp,0xc
c000cf01:	50                   	push   eax
c000cf02:	e8 33 ea ff ff       	call   c000b93a <Device::~Device()>
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	90                   	nop
c000cf0b:	83 c4 0c             	add    esp,0xc
c000cf0e:	c3                   	ret    
c000cf0f:	90                   	nop

c000cf10 <NIC::~NIC()>:
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	83 ec 0c             	sub    esp,0xc
c000cf16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1a:	e8 cd ff ff ff       	call   c000ceec <NIC::~NIC()>
c000cf1f:	83 c4 10             	add    esp,0x10
c000cf22:	83 ec 08             	sub    esp,0x8
c000cf25:	68 58 01 00 00       	push   0x158
c000cf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2e:	e8 d1 d5 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	83 c4 0c             	add    esp,0xc
c000cf39:	c3                   	ret    

c000cf3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf3a:	55                   	push   ebp
c000cf3b:	57                   	push   edi
c000cf3c:	56                   	push   esi
c000cf3d:	53                   	push   ebx
c000cf3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf44:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf4b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf52:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf59:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf6f:	e8 58 ed ff ff       	call   c000bccc <Device::getName()>
c000cf74:	5a                   	pop    edx
c000cf75:	59                   	pop    ecx
c000cf76:	50                   	push   eax
c000cf77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf7b:	55                   	push   ebp
c000cf7c:	e8 6f 36 ff ff       	call   c00005f0 <strcpy>
c000cf81:	5b                   	pop    ebx
c000cf82:	58                   	pop    eax
c000cf83:	68 58 fb 01 c0       	push   0xc001fb58
c000cf88:	55                   	push   ebp
c000cf89:	e8 22 38 ff ff       	call   c00007b0 <strcat>
c000cf8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cf95:	e8 cb a8 ff ff       	call   c0007865 <malloc>
c000cf9a:	83 c4 0c             	add    esp,0xc
c000cf9d:	89 c3                	mov    ebx,eax
c000cf9f:	57                   	push   edi
c000cfa0:	56                   	push   esi
c000cfa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfa9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfb0:	55                   	push   ebp
c000cfb1:	50                   	push   eax
c000cfb2:	e8 5b fb ff ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfb7:	83 c4 14             	add    esp,0x14
c000cfba:	53                   	push   ebx
c000cfbb:	e8 12 fc ff ff       	call   c000cbd2 <LogicalDisk::assignDriveLetter()>
c000cfc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfc3:	e8 c0 fc ff ff       	call   c000cc88 <LogicalDisk::mount()>
c000cfc8:	58                   	pop    eax
c000cfc9:	5a                   	pop    edx
c000cfca:	53                   	push   ebx
c000cfcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfd2:	e8 61 ea ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000cfd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cfdd:	5b                   	pop    ebx
c000cfde:	5e                   	pop    esi
c000cfdf:	5f                   	pop    edi
c000cfe0:	5d                   	pop    ebp
c000cfe1:	c3                   	ret    

c000cfe2 <createPartitionsForDisk(PhysicalDisk*)>:
c000cfe2:	55                   	push   ebp
c000cfe3:	57                   	push   edi
c000cfe4:	56                   	push   esi
c000cfe5:	53                   	push   ebx
c000cfe6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cfec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cff3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cff9:	3d 00 02 00 00       	cmp    eax,0x200
c000cffe:	74 27                	je     c000d027 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d000:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d006:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d00c:	83 ec 10             	sub    esp,0x10
c000d00f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d013:	99                   	cdq    
c000d014:	c1 e6 0a             	shl    esi,0xa
c000d017:	52                   	push   edx
c000d018:	89 fd                	mov    ebp,edi
c000d01a:	50                   	push   eax
c000d01b:	55                   	push   ebp
c000d01c:	56                   	push   esi
c000d01d:	e8 8e 0a 01 00       	call   c001dab0 <__udivdi3>
c000d022:	e9 b1 00 00 00       	jmp    c000d0d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d027:	83 ec 0c             	sub    esp,0xc
c000d02a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d02c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d030:	56                   	push   esi
c000d031:	6a 01                	push   0x1
c000d033:	6a 00                	push   0x0
c000d035:	6a 00                	push   0x0
c000d037:	53                   	push   ebx
c000d038:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d03b:	83 c4 20             	add    esp,0x20
c000d03e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d046:	75 0a                	jne    c000d052 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d048:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d050:	74 2c                	je     c000d07e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d052:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d058:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d05e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d064:	83 ec 10             	sub    esp,0x10
c000d067:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d06b:	89 f7                	mov    edi,esi
c000d06d:	c1 e0 0a             	shl    eax,0xa
c000d070:	c1 ff 1f             	sar    edi,0x1f
c000d073:	57                   	push   edi
c000d074:	56                   	push   esi
c000d075:	52                   	push   edx
c000d076:	50                   	push   eax
c000d077:	e8 34 0a 01 00       	call   c001dab0 <__udivdi3>
c000d07c:	eb 5a                	jmp    c000d0d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d07e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d085:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d08c:	83 e1 7f             	and    ecx,0x7f
c000d08f:	83 e0 7f             	and    eax,0x7f
c000d092:	01 c1                	add    ecx,eax
c000d094:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d09b:	83 e0 7f             	and    eax,0x7f
c000d09e:	01 c1                	add    ecx,eax
c000d0a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0a7:	83 e0 7f             	and    eax,0x7f
c000d0aa:	00 c1                	add    cl,al
c000d0ac:	74 41                	je     c000d0ef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0c0:	83 ec 10             	sub    esp,0x10
c000d0c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0c7:	89 f7                	mov    edi,esi
c000d0c9:	c1 e0 0a             	shl    eax,0xa
c000d0cc:	c1 ff 1f             	sar    edi,0x1f
c000d0cf:	57                   	push   edi
c000d0d0:	56                   	push   esi
c000d0d1:	52                   	push   edx
c000d0d2:	50                   	push   eax
c000d0d3:	e8 d8 09 01 00       	call   c001dab0 <__udivdi3>
c000d0d8:	83 c4 14             	add    esp,0x14
c000d0db:	52                   	push   edx
c000d0dc:	50                   	push   eax
c000d0dd:	6a 00                	push   0x0
c000d0df:	6a 00                	push   0x0
c000d0e1:	53                   	push   ebx
c000d0e2:	e8 53 fe ff ff       	call   c000cf3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0e7:	83 c4 20             	add    esp,0x20
c000d0ea:	e9 79 01 00 00       	jmp    c000d268 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0ef:	89 f0                	mov    eax,esi
c000d0f1:	31 f6                	xor    esi,esi
c000d0f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d0fa:	75 02                	jne    c000d0fe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d0fc:	89 f1                	mov    ecx,esi
c000d0fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d105:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d10c:	c1 e2 08             	shl    edx,0x8
c000d10f:	c1 e7 10             	shl    edi,0x10
c000d112:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d11a:	09 fa                	or     edx,edi
c000d11c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d124:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d12b:	83 c0 10             	add    eax,0x10
c000d12e:	09 fa                	or     edx,edi
c000d130:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d137:	c1 e7 18             	shl    edi,0x18
c000d13a:	09 fa                	or     edx,edi
c000d13c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d143:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d147:	c1 e7 10             	shl    edi,0x10
c000d14a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d151:	c1 e2 08             	shl    edx,0x8
c000d154:	09 fa                	or     edx,edi
c000d156:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d15d:	09 fa                	or     edx,edi
c000d15f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d166:	c1 e7 18             	shl    edi,0x18
c000d169:	09 fa                	or     edx,edi
c000d16b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d16f:	46                   	inc    esi
c000d170:	83 fe 04             	cmp    esi,0x4
c000d173:	0f 85 7a ff ff ff    	jne    c000d0f3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17d:	83 f0 01             	xor    eax,0x1
c000d180:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d184:	75 57                	jne    c000d1dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d18a:	83 f0 01             	xor    eax,0x1
c000d18d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d191:	75 4a                	jne    c000d1dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d193:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d197:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d19f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1bd:	89 f7                	mov    edi,esi
c000d1bf:	c1 e0 0a             	shl    eax,0xa
c000d1c2:	c1 ff 1f             	sar    edi,0x1f
c000d1c5:	57                   	push   edi
c000d1c6:	56                   	push   esi
c000d1c7:	52                   	push   edx
c000d1c8:	50                   	push   eax
c000d1c9:	e8 e2 08 01 00       	call   c001dab0 <__udivdi3>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1dd:	84 c9                	test   cl,cl
c000d1df:	74 53                	je     c000d234 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1e1:	0f b6 c9             	movzx  ecx,cl
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d1f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d200:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d208:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d20c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d210:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d214:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d218:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d21c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d220:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d224:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d228:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d22c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d230:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d234:	31 ed                	xor    ebp,ebp
c000d236:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d23a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d23e:	89 f8                	mov    eax,edi
c000d240:	09 f0                	or     eax,esi
c000d242:	74 1e                	je     c000d262 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d244:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d248:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d24c:	89 d1                	mov    ecx,edx
c000d24e:	09 c1                	or     ecx,eax
c000d250:	74 10                	je     c000d262 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	57                   	push   edi
c000d256:	56                   	push   esi
c000d257:	52                   	push   edx
c000d258:	50                   	push   eax
c000d259:	53                   	push   ebx
c000d25a:	e8 db fc ff ff       	call   c000cf3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d25f:	83 c4 20             	add    esp,0x20
c000d262:	45                   	inc    ebp
c000d263:	83 fd 04             	cmp    ebp,0x4
c000d266:	75 ce                	jne    c000d236 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d268:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d26e:	5b                   	pop    ebx
c000d26f:	5e                   	pop    esi
c000d270:	5f                   	pop    edi
c000d271:	5d                   	pop    ebp
c000d272:	c3                   	ret    
c000d273:	90                   	nop

c000d274 <Serial::Serial(char const*)>:
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27b:	83 ec 08             	sub    esp,0x8
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	50                   	push   eax
c000d283:	e8 48 e9 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000d288:	83 c4 10             	add    esp,0x10
c000d28b:	ba 6c fb 01 c0       	mov    edx,0xc001fb6c
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	89 10                	mov    DWORD PTR [eax],edx
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2a4:	90                   	nop
c000d2a5:	83 c4 0c             	add    esp,0xc
c000d2a8:	c3                   	ret    
c000d2a9:	90                   	nop
c000d2aa:	66 90                	xchg   ax,ax

c000d2ac <Serial::~Serial()>:
c000d2ac:	83 ec 0c             	sub    esp,0xc
c000d2af:	ba 6c fb 01 c0       	mov    edx,0xc001fb6c
c000d2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b8:	89 10                	mov    DWORD PTR [eax],edx
c000d2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2be:	83 ec 0c             	sub    esp,0xc
c000d2c1:	50                   	push   eax
c000d2c2:	e8 73 e6 ff ff       	call   c000b93a <Device::~Device()>
c000d2c7:	83 c4 10             	add    esp,0x10
c000d2ca:	90                   	nop
c000d2cb:	83 c4 0c             	add    esp,0xc
c000d2ce:	c3                   	ret    
c000d2cf:	90                   	nop

c000d2d0 <Serial::~Serial()>:
c000d2d0:	83 ec 0c             	sub    esp,0xc
c000d2d3:	83 ec 0c             	sub    esp,0xc
c000d2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2da:	e8 cd ff ff ff       	call   c000d2ac <Serial::~Serial()>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	83 ec 08             	sub    esp,0x8
c000d2e5:	68 58 01 00 00       	push   0x158
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	e8 11 d2 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	83 c4 0c             	add    esp,0xc
c000d2f9:	c3                   	ret    
c000d2fa:	66 90                	xchg   ax,ax

c000d2fc <Timer::Timer(char const*)>:
c000d2fc:	83 ec 0c             	sub    esp,0xc
c000d2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d303:	83 ec 08             	sub    esp,0x8
c000d306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30a:	50                   	push   eax
c000d30b:	e8 c0 e8 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000d310:	83 c4 10             	add    esp,0x10
c000d313:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d32c:	90                   	nop
c000d32d:	83 c4 0c             	add    esp,0xc
c000d330:	c3                   	ret    
c000d331:	90                   	nop
c000d332:	66 90                	xchg   ax,ax

c000d334 <Timer::~Timer()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c000d33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d340:	89 10                	mov    DWORD PTR [eax],edx
c000d342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d346:	83 ec 0c             	sub    esp,0xc
c000d349:	50                   	push   eax
c000d34a:	e8 eb e5 ff ff       	call   c000b93a <Device::~Device()>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	90                   	nop
c000d353:	83 c4 0c             	add    esp,0xc
c000d356:	c3                   	ret    
c000d357:	90                   	nop

c000d358 <Timer::~Timer()>:
c000d358:	83 ec 0c             	sub    esp,0xc
c000d35b:	83 ec 0c             	sub    esp,0xc
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	e8 cd ff ff ff       	call   c000d334 <Timer::~Timer()>
c000d367:	83 c4 10             	add    esp,0x10
c000d36a:	83 ec 08             	sub    esp,0x8
c000d36d:	68 5c 01 00 00       	push   0x15c
c000d372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d376:	e8 89 d1 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	83 c4 0c             	add    esp,0xc
c000d381:	c3                   	ret    

c000d382 <Timer::read()>:
c000d382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d386:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d38c:	c3                   	ret    

c000d38d <setupTimer(int)>:
c000d38d:	53                   	push   ebx
c000d38e:	83 ec 14             	sub    esp,0x14
c000d391:	68 5c 01 00 00       	push   0x15c
c000d396:	e8 ca a4 ff ff       	call   c0007865 <malloc>
c000d39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d39e:	89 c3                	mov    ebx,eax
c000d3a0:	e8 6f ff 00 00       	call   c001d314 <PIT::PIT()>
c000d3a5:	58                   	pop    eax
c000d3a6:	5a                   	pop    edx
c000d3a7:	53                   	push   ebx
c000d3a8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3ae:	e8 85 e6 ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000d3b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3b5:	6a 00                	push   0x0
c000d3b7:	6a 00                	push   0x0
c000d3b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3bd:	53                   	push   ebx
c000d3be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3c1:	89 d8                	mov    eax,ebx
c000d3c3:	83 c4 28             	add    esp,0x28
c000d3c6:	5b                   	pop    ebx
c000d3c7:	c3                   	ret    

c000d3c8 <timerHandler(unsigned int)>:
c000d3c8:	56                   	push   esi
c000d3c9:	53                   	push   ebx
c000d3ca:	51                   	push   ecx
c000d3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3cf:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3d5:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3dc:	0f 84 4a 01 00 00    	je     c000d52c <timerHandler(unsigned int)+0x164>
c000d3e2:	fa                   	cli    
c000d3e3:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3e9:	83 ec 0c             	sub    esp,0xc
c000d3ec:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d3f2:	68 78 71 02 c0       	push   0xc0027178
c000d3f7:	e8 84 0c 01 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	84 c0                	test   al,al
c000d401:	0f 85 a1 00 00 00    	jne    c000d4a8 <timerHandler(unsigned int)+0xe0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	68 78 71 02 c0       	push   0xc0027178
c000d40f:	e8 88 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d414:	83 c4 10             	add    esp,0x10
c000d417:	89 c6                	mov    esi,eax
c000d419:	8d 76 00             	lea    esi,[esi+0x0]
c000d41c:	83 ec 0c             	sub    esp,0xc
c000d41f:	68 78 71 02 c0       	push   0xc0027178
c000d424:	e8 73 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d429:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d430:	89 c3                	mov    ebx,eax
c000d432:	e8 6d 0c 01 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d437:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d43a:	83 c4 10             	add    esp,0x10
c000d43d:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d443:	77 23                	ja     c000d468 <timerHandler(unsigned int)+0xa0>
c000d445:	83 ec 0c             	sub    esp,0xc
c000d448:	53                   	push   ebx
c000d449:	e8 1e 78 00 00       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c000d44e:	83 c4 10             	add    esp,0x10
c000d451:	39 de                	cmp    esi,ebx
c000d453:	75 27                	jne    c000d47c <timerHandler(unsigned int)+0xb4>
c000d455:	83 ec 0c             	sub    esp,0xc
c000d458:	68 78 71 02 c0       	push   0xc0027178
c000d45d:	e8 3a 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d462:	89 c6                	mov    esi,eax
c000d464:	eb 12                	jmp    c000d478 <timerHandler(unsigned int)+0xb0>
c000d466:	66 90                	xchg   ax,ax
c000d468:	52                   	push   edx
c000d469:	52                   	push   edx
c000d46a:	53                   	push   ebx
c000d46b:	68 78 71 02 c0       	push   0xc0027178
c000d470:	e8 e7 0c 01 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d475:	8d 76 00             	lea    esi,[esi+0x0]
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	90                   	nop
c000d47c:	83 ec 0c             	sub    esp,0xc
c000d47f:	68 78 71 02 c0       	push   0xc0027178
c000d484:	e8 f7 0b 01 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	84 c0                	test   al,al
c000d48e:	75 18                	jne    c000d4a8 <timerHandler(unsigned int)+0xe0>
c000d490:	83 ec 0c             	sub    esp,0xc
c000d493:	68 78 71 02 c0       	push   0xc0027178
c000d498:	e8 ff 0b 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	39 f0                	cmp    eax,esi
c000d4a2:	0f 85 74 ff ff ff    	jne    c000d41c <timerHandler(unsigned int)+0x54>
c000d4a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4ad:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4b1:	74 41                	je     c000d4f4 <timerHandler(unsigned int)+0x12c>
c000d4b3:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d4ba:	74 38                	je     c000d4f4 <timerHandler(unsigned int)+0x12c>
c000d4bc:	fa                   	cli    
c000d4bd:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4c3:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4ce:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4d7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4da:	72 08                	jb     c000d4e4 <timerHandler(unsigned int)+0x11c>
c000d4dc:	e8 c7 72 00 00       	call   c00147a8 <schedule()>
c000d4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4e4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4e9:	48                   	dec    eax
c000d4ea:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d4ef:	75 03                	jne    c000d4f4 <timerHandler(unsigned int)+0x12c>
c000d4f1:	fb                   	sti    
c000d4f2:	66 90                	xchg   ax,ax
c000d4f4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d4f9:	48                   	dec    eax
c000d4fa:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d4ff:	75 1b                	jne    c000d51c <timerHandler(unsigned int)+0x154>
c000d501:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d508:	74 12                	je     c000d51c <timerHandler(unsigned int)+0x154>
c000d50a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d514:	e8 8f 72 00 00       	call   c00147a8 <schedule()>
c000d519:	8d 76 00             	lea    esi,[esi+0x0]
c000d51c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d521:	48                   	dec    eax
c000d522:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d527:	75 03                	jne    c000d52c <timerHandler(unsigned int)+0x164>
c000d529:	fb                   	sti    
c000d52a:	66 90                	xchg   ax,ax
c000d52c:	58                   	pop    eax
c000d52d:	5b                   	pop    ebx
c000d52e:	5e                   	pop    esi
c000d52f:	c3                   	ret    

c000d530 <VCache::VCache(PhysicalDisk*)>:
c000d530:	53                   	push   ebx
c000d531:	83 ec 18             	sub    esp,0x18
c000d534:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c000d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53d:	89 10                	mov    DWORD PTR [eax],edx
c000d53f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d543:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d559:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d560:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d56b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d572:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d588:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d58c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d590:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d597:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d59e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5d0:	e8 90 a2 ff ff       	call   c0007865 <malloc>
c000d5d5:	83 c4 10             	add    esp,0x10
c000d5d8:	89 c3                	mov    ebx,eax
c000d5da:	83 ec 0c             	sub    esp,0xc
c000d5dd:	53                   	push   ebx
c000d5de:	e8 69 6f 00 00       	call   c001454c <Mutex::Mutex()>
c000d5e3:	83 c4 10             	add    esp,0x10
c000d5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d5f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d603:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d607:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d611:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d614:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d618:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d61e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d624:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d628:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d62b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d632:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d636:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d63a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d640:	05 00 02 00 00       	add    eax,0x200
c000d645:	c1 e0 03             	shl    eax,0x3
c000d648:	83 ec 0c             	sub    esp,0xc
c000d64b:	50                   	push   eax
c000d64c:	e8 14 a2 ff ff       	call   c0007865 <malloc>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	89 c2                	mov    edx,eax
c000d656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d65a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d661:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d670:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d674:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d67a:	89 d0                	mov    eax,edx
c000d67c:	c1 e0 02             	shl    eax,0x2
c000d67f:	01 d0                	add    eax,edx
c000d681:	c1 e0 04             	shl    eax,0x4
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	50                   	push   eax
c000d688:	e8 d8 a1 ff ff       	call   c0007865 <malloc>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	89 c2                	mov    edx,eax
c000d692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d696:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d699:	90                   	nop
c000d69a:	83 c4 18             	add    esp,0x18
c000d69d:	5b                   	pop    ebx
c000d69e:	c3                   	ret    
c000d69f:	90                   	nop

c000d6a0 <VCache::invalidateReadBuffer()>:
c000d6a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6ae:	c3                   	ret    
c000d6af:	90                   	nop

c000d6b0 <VCache::writeWriteBuffer()>:
c000d6b0:	53                   	push   ebx
c000d6b1:	83 ec 08             	sub    esp,0x8
c000d6b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6bc:	74 1e                	je     c000d6dc <VCache::writeWriteBuffer()+0x2c>
c000d6be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6c1:	83 ec 0c             	sub    esp,0xc
c000d6c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6d2:	50                   	push   eax
c000d6d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6d6:	83 c4 20             	add    esp,0x20
c000d6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d6dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d6ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d6f5:	83 c4 08             	add    esp,0x8
c000d6f8:	5b                   	pop    ebx
c000d6f9:	c3                   	ret    
c000d6fa:	66 90                	xchg   ax,ax

c000d6fc <VCache::~VCache()>:
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c000d704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d708:	89 10                	mov    DWORD PTR [eax],edx
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d711:	84 c0                	test   al,al
c000d713:	74 0f                	je     c000d724 <VCache::~VCache()+0x28>
c000d715:	83 ec 0c             	sub    esp,0xc
c000d718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71c:	e8 8f ff ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c000d721:	83 c4 10             	add    esp,0x10
c000d724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d728:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d72b:	83 ec 0c             	sub    esp,0xc
c000d72e:	50                   	push   eax
c000d72f:	e8 41 a1 ff ff       	call   c0007875 <free>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d73e:	83 ec 0c             	sub    esp,0xc
c000d741:	50                   	push   eax
c000d742:	e8 2e a1 ff ff       	call   c0007875 <free>
c000d747:	83 c4 10             	add    esp,0x10
c000d74a:	90                   	nop
c000d74b:	83 c4 0c             	add    esp,0xc
c000d74e:	c3                   	ret    
c000d74f:	90                   	nop

c000d750 <VCache::~VCache()>:
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	83 ec 0c             	sub    esp,0xc
c000d756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d75a:	e8 9d ff ff ff       	call   c000d6fc <VCache::~VCache()>
c000d75f:	83 c4 10             	add    esp,0x10
c000d762:	83 ec 08             	sub    esp,0x8
c000d765:	6a 44                	push   0x44
c000d767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76b:	e8 94 cd ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	83 c4 0c             	add    esp,0xc
c000d776:	c3                   	ret    
c000d777:	90                   	nop

c000d778 <VCache::write(unsigned long long, int, void*)>:
c000d778:	55                   	push   ebp
c000d779:	57                   	push   edi
c000d77a:	56                   	push   esi
c000d77b:	53                   	push   ebx
c000d77c:	83 ec 1c             	sub    esp,0x1c
c000d77f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d783:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d787:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d78b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d793:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d797:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d79b:	74 07                	je     c000d7a4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d79d:	53                   	push   ebx
c000d79e:	e8 fd fe ff ff       	call   c000d6a0 <VCache::invalidateReadBuffer()>
c000d7a3:	58                   	pop    eax
c000d7a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7a8:	74 62                	je     c000d80c <VCache::write(unsigned long long, int, void*)+0x94>
c000d7aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7b1:	99                   	cdq    
c000d7b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7b6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7b9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7bc:	31 c1                	xor    ecx,eax
c000d7be:	89 d0                	mov    eax,edx
c000d7c0:	89 ca                	mov    edx,ecx
c000d7c2:	31 e8                	xor    eax,ebp
c000d7c4:	09 c2                	or     edx,eax
c000d7c6:	75 38                	jne    c000d800 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7c8:	83 ff 01             	cmp    edi,0x1
c000d7cb:	75 33                	jne    c000d800 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7d4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7da:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7dd:	0f af c8             	imul   ecx,eax
c000d7e0:	01 cf                	add    edi,ecx
c000d7e2:	89 c1                	mov    ecx,eax
c000d7e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7e9:	40                   	inc    eax
c000d7ea:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7ed:	83 f8 50             	cmp    eax,0x50
c000d7f0:	75 6a                	jne    c000d85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7f2:	83 ec 0c             	sub    esp,0xc
c000d7f5:	53                   	push   ebx
c000d7f6:	e8 b5 fe ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	eb 5c                	jmp    c000d85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d800:	83 ec 0c             	sub    esp,0xc
c000d803:	53                   	push   ebx
c000d804:	e8 a7 fe ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c000d809:	83 c4 10             	add    esp,0x10
c000d80c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d80f:	83 ff 4f             	cmp    edi,0x4f
c000d812:	7f 20                	jg     c000d834 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d814:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d817:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d81b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d81e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d821:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d825:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d828:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d82e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d830:	eb 2a                	jmp    c000d85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d832:	66 90                	xchg   ax,ax
c000d834:	8b 10                	mov    edx,DWORD PTR [eax]
c000d836:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d83a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d83e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d842:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d846:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d84a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d84e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d851:	83 c4 1c             	add    esp,0x1c
c000d854:	5b                   	pop    ebx
c000d855:	5e                   	pop    esi
c000d856:	5f                   	pop    edi
c000d857:	5d                   	pop    ebp
c000d858:	ff e0                	jmp    eax
c000d85a:	66 90                	xchg   ax,ax
c000d85c:	83 c4 1c             	add    esp,0x1c
c000d85f:	31 c0                	xor    eax,eax
c000d861:	5b                   	pop    ebx
c000d862:	5e                   	pop    esi
c000d863:	5f                   	pop    edi
c000d864:	5d                   	pop    ebp
c000d865:	c3                   	ret    

c000d866 <VCache::read(unsigned long long, int, void*)>:
c000d866:	55                   	push   ebp
c000d867:	57                   	push   edi
c000d868:	56                   	push   esi
c000d869:	53                   	push   ebx
c000d86a:	83 ec 1c             	sub    esp,0x1c
c000d86d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d875:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d879:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d87d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d881:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d885:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d889:	74 0d                	je     c000d898 <VCache::read(unsigned long long, int, void*)+0x32>
c000d88b:	83 ec 0c             	sub    esp,0xc
c000d88e:	57                   	push   edi
c000d88f:	e8 1c fe ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	90                   	nop
c000d898:	83 fd 01             	cmp    ebp,0x1
c000d89b:	0f 85 93 00 00 00    	jne    c000d934 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8a7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8ae:	0f 85 80 00 00 00    	jne    c000d934 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8b4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d8b7:	89 e9                	mov    ecx,ebp
c000d8b9:	f7 d9                	neg    ecx
c000d8bb:	89 c8                	mov    eax,ecx
c000d8bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8c1:	c1 f8 1f             	sar    eax,0x1f
c000d8c4:	21 d9                	and    ecx,ebx
c000d8c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8ca:	89 c8                	mov    eax,ecx
c000d8cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8d0:	21 f1                	and    ecx,esi
c000d8d2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8d6:	89 ca                	mov    edx,ecx
c000d8d8:	74 2e                	je     c000d908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8da:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8dd:	75 29                	jne    c000d908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8df:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8e2:	75 24                	jne    c000d908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8e7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8ed:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d8f0:	8d 70 ff             	lea    esi,[eax-0x1]
c000d8f3:	21 f3                	and    ebx,esi
c000d8f5:	0f af d9             	imul   ebx,ecx
c000d8f8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d8fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d8ff:	89 de                	mov    esi,ebx
c000d901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d903:	31 c0                	xor    eax,eax
c000d905:	eb 61                	jmp    c000d968 <VCache::read(unsigned long long, int, void*)+0x102>
c000d907:	90                   	nop
c000d908:	83 ec 0c             	sub    esp,0xc
c000d90b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d90f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d913:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d916:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d919:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d91b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d91e:	55                   	push   ebp
c000d91f:	52                   	push   edx
c000d920:	50                   	push   eax
c000d921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d925:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d928:	83 c4 20             	add    esp,0x20
c000d92b:	85 c0                	test   eax,eax
c000d92d:	75 39                	jne    c000d968 <VCache::read(unsigned long long, int, void*)+0x102>
c000d92f:	eb b3                	jmp    c000d8e4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d931:	8d 76 00             	lea    esi,[esi+0x0]
c000d934:	83 ec 0c             	sub    esp,0xc
c000d937:	57                   	push   edi
c000d938:	e8 63 fd ff ff       	call   c000d6a0 <VCache::invalidateReadBuffer()>
c000d93d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d940:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d944:	8b 10                	mov    edx,DWORD PTR [eax]
c000d946:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d94a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d94e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d952:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d956:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d95a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d95d:	83 c4 2c             	add    esp,0x2c
c000d960:	5b                   	pop    ebx
c000d961:	5e                   	pop    esi
c000d962:	5f                   	pop    edi
c000d963:	5d                   	pop    ebp
c000d964:	ff e0                	jmp    eax
c000d966:	66 90                	xchg   ax,ax
c000d968:	83 c4 1c             	add    esp,0x1c
c000d96b:	5b                   	pop    ebx
c000d96c:	5e                   	pop    esi
c000d96d:	5f                   	pop    edi
c000d96e:	5d                   	pop    ebp
c000d96f:	c3                   	ret    

c000d970 <Video::putrect(int, int, int, int, unsigned int)>:
c000d970:	55                   	push   ebp
c000d971:	57                   	push   edi
c000d972:	56                   	push   esi
c000d973:	53                   	push   ebx
c000d974:	83 ec 1c             	sub    esp,0x1c
c000d977:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d97b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d97f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d983:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d98b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d98f:	01 df                	add    edi,ebx
c000d991:	39 fb                	cmp    ebx,edi
c000d993:	7d 1f                	jge    c000d9b4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d995:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d999:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d99d:	7d 12                	jge    c000d9b1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d99f:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9a5:	53                   	push   ebx
c000d9a6:	55                   	push   ebp
c000d9a7:	45                   	inc    ebp
c000d9a8:	56                   	push   esi
c000d9a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	eb e8                	jmp    c000d999 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9b1:	43                   	inc    ebx
c000d9b2:	eb dd                	jmp    c000d991 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9b4:	83 c4 1c             	add    esp,0x1c
c000d9b7:	5b                   	pop    ebx
c000d9b8:	5e                   	pop    esi
c000d9b9:	5f                   	pop    edi
c000d9ba:	5d                   	pop    ebp
c000d9bb:	c3                   	ret    

c000d9bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9bc:	55                   	push   ebp
c000d9bd:	57                   	push   edi
c000d9be:	31 ff                	xor    edi,edi
c000d9c0:	56                   	push   esi
c000d9c1:	53                   	push   ebx
c000d9c2:	83 ec 1c             	sub    esp,0x1c
c000d9c5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9cd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9d4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9dd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9e5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9ec:	01 f9                	add    ecx,edi
c000d9ee:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d9f2:	7d 2f                	jge    c000da23 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d9f4:	31 f6                	xor    esi,esi
c000d9f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d9fa:	01 f2                	add    edx,esi
c000d9fc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da00:	7d 1a                	jge    c000da1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da05:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da08:	46                   	inc    esi
c000da09:	51                   	push   ecx
c000da0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da0e:	52                   	push   edx
c000da0f:	55                   	push   ebp
c000da10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da1a:	eb da                	jmp    c000d9f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da1c:	47                   	inc    edi
c000da1d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da21:	eb c5                	jmp    c000d9e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da23:	83 c4 1c             	add    esp,0x1c
c000da26:	5b                   	pop    ebx
c000da27:	5e                   	pop    esi
c000da28:	5f                   	pop    edi
c000da29:	5d                   	pop    ebp
c000da2a:	c3                   	ret    
c000da2b:	90                   	nop

c000da2c <Video::blit(unsigned int*, int, int, int, int)>:
c000da2c:	55                   	push   ebp
c000da2d:	57                   	push   edi
c000da2e:	56                   	push   esi
c000da2f:	53                   	push   ebx
c000da30:	83 ec 1c             	sub    esp,0x1c
c000da33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da3b:	85 c0                	test   eax,eax
c000da3d:	79 02                	jns    c000da41 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da3f:	31 c0                	xor    eax,eax
c000da41:	c1 e0 02             	shl    eax,0x2
c000da44:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da50:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da54:	39 d8                	cmp    eax,ebx
c000da56:	7e 49                	jle    c000daa1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da58:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da5e:	7c 41                	jl     c000daa1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da60:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da68:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da6c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da70:	39 f9                	cmp    ecx,edi
c000da72:	7e 22                	jle    c000da96 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da74:	83 c5 04             	add    ebp,0x4
c000da77:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da7d:	7c 14                	jl     c000da93 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da81:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da8c:	56                   	push   esi
c000da8d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da90:	83 c4 10             	add    esp,0x10
c000da93:	47                   	inc    edi
c000da94:	eb d2                	jmp    c000da68 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000da96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da9a:	43                   	inc    ebx
c000da9b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000da9f:	eb ab                	jmp    c000da4c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000daa1:	83 c4 1c             	add    esp,0x1c
c000daa4:	5b                   	pop    ebx
c000daa5:	5e                   	pop    esi
c000daa6:	5f                   	pop    edi
c000daa7:	5d                   	pop    ebp
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <Video::clearScreen(unsigned int)>:
c000daaa:	57                   	push   edi
c000daab:	56                   	push   esi
c000daac:	53                   	push   ebx
c000daad:	31 db                	xor    ebx,ebx
c000daaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dab3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dab9:	7e 1f                	jle    c000dada <Video::clearScreen(unsigned int)+0x30>
c000dabb:	31 ff                	xor    edi,edi
c000dabd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dac3:	7e 12                	jle    c000dad7 <Video::clearScreen(unsigned int)+0x2d>
c000dac5:	8b 06                	mov    eax,DWORD PTR [esi]
c000dac7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dacb:	53                   	push   ebx
c000dacc:	57                   	push   edi
c000dacd:	47                   	inc    edi
c000dace:	56                   	push   esi
c000dacf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	eb e6                	jmp    c000dabd <Video::clearScreen(unsigned int)+0x13>
c000dad7:	43                   	inc    ebx
c000dad8:	eb d9                	jmp    c000dab3 <Video::clearScreen(unsigned int)+0x9>
c000dada:	5b                   	pop    ebx
c000dadb:	5e                   	pop    esi
c000dadc:	5f                   	pop    edi
c000dadd:	c3                   	ret    

c000dade <Video::putpixel(int, int, unsigned int)>:
c000dade:	c7 44 24 04 e8 fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fbe8
c000dae6:	e9 d0 28 00 00       	jmp    c00103bb <KePanic(char const*)>
c000daeb:	90                   	nop

c000daec <Video::readPixelApprox(int, int)>:
c000daec:	83 ec 18             	sub    esp,0x18
c000daef:	68 09 fc 01 c0       	push   0xc001fc09
c000daf4:	e8 c2 28 00 00       	call   c00103bb <KePanic(char const*)>
c000daf9:	31 c0                	xor    eax,eax
c000dafb:	83 c4 1c             	add    esp,0x1c
c000dafe:	c3                   	ret    
c000daff:	90                   	nop

c000db00 <Video::Video(char const*)>:
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db07:	83 ec 08             	sub    esp,0x8
c000db0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0e:	50                   	push   eax
c000db0f:	e8 bc e0 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000db14:	83 c4 10             	add    esp,0x10
c000db17:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c000db1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db20:	89 10                	mov    DWORD PTR [eax],edx
c000db22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db26:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db30:	90                   	nop
c000db31:	83 c4 0c             	add    esp,0xc
c000db34:	c3                   	ret    
c000db35:	90                   	nop

c000db36 <Video::~Video()>:
c000db36:	83 ec 0c             	sub    esp,0xc
c000db39:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c000db3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db42:	89 10                	mov    DWORD PTR [eax],edx
c000db44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	50                   	push   eax
c000db4c:	e8 e9 dd ff ff       	call   c000b93a <Device::~Device()>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	90                   	nop
c000db55:	83 c4 0c             	add    esp,0xc
c000db58:	c3                   	ret    
c000db59:	90                   	nop

c000db5a <Video::~Video()>:
c000db5a:	83 ec 0c             	sub    esp,0xc
c000db5d:	83 ec 0c             	sub    esp,0xc
c000db60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db64:	e8 cd ff ff ff       	call   c000db36 <Video::~Video()>
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	83 ec 08             	sub    esp,0x8
c000db6f:	68 64 01 00 00       	push   0x164
c000db74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db78:	e8 87 c9 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	83 c4 0c             	add    esp,0xc
c000db83:	c3                   	ret    

c000db84 <Video::isMonochrome()>:
c000db84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db88:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <Video::getWidth()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <Video::getHeight()>:
c000db9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dba8:	55                   	push   ebp
c000dba9:	57                   	push   edi
c000dbaa:	56                   	push   esi
c000dbab:	53                   	push   ebx
c000dbac:	83 ec 2c             	sub    esp,0x2c
c000dbaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbb7:	83 f8 01             	cmp    eax,0x1
c000dbba:	19 c9                	sbb    ecx,ecx
c000dbbc:	31 db                	xor    ebx,ebx
c000dbbe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbc2:	89 cd                	mov    ebp,ecx
c000dbc4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbcc:	f7 d5                	not    ebp
c000dbce:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbd4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbd8:	01 d8                	add    eax,ebx
c000dbda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbde:	56                   	push   esi
c000dbdf:	e8 b8 ff ff ff       	call   c000db9c <Video::getHeight()>
c000dbe4:	59                   	pop    ecx
c000dbe5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbe9:	7e 70                	jle    c000dc5b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbef:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dbf3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dbf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbfa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbfe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 f8                	mov    eax,edi
c000dc0b:	83 c0 20             	add    eax,0x20
c000dc0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc12:	56                   	push   esi
c000dc13:	e8 78 ff ff ff       	call   c000db90 <Video::getWidth()>
c000dc18:	5a                   	pop    edx
c000dc19:	39 c7                	cmp    edi,eax
c000dc1b:	7d 34                	jge    c000dc51 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc1d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc22:	74 05                	je     c000dc29 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc24:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc26:	55                   	push   ebp
c000dc27:	eb 0d                	jmp    c000dc36 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc29:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc2e:	74 12                	je     c000dc42 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc30:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc3a:	57                   	push   edi
c000dc3b:	56                   	push   esi
c000dc3c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc3f:	83 c4 10             	add    esp,0x10
c000dc42:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc46:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc4a:	47                   	inc    edi
c000dc4b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc4f:	75 c1                	jne    c000dc12 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc51:	43                   	inc    ebx
c000dc52:	83 fb 20             	cmp    ebx,0x20
c000dc55:	0f 85 79 ff ff ff    	jne    c000dbd4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc5b:	83 c4 2c             	add    esp,0x2c
c000dc5e:	5b                   	pop    ebx
c000dc5f:	5e                   	pop    esi
c000dc60:	5f                   	pop    edi
c000dc61:	5d                   	pop    ebp
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	56                   	push   esi
c000dc67:	53                   	push   ebx
c000dc68:	83 ec 28             	sub    esp,0x28
c000dc6b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc6f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc73:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc77:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc7b:	c1 e6 08             	shl    esi,0x8
c000dc7e:	01 c6                	add    esi,eax
c000dc80:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc84:	c1 e0 08             	shl    eax,0x8
c000dc87:	01 d0                	add    eax,edx
c000dc89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc91:	0f af c6             	imul   eax,esi
c000dc94:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dc9b:	50                   	push   eax
c000dc9c:	e8 c4 9b ff ff       	call   c0007865 <malloc>
c000dca1:	83 c4 10             	add    esp,0x10
c000dca4:	89 c7                	mov    edi,eax
c000dca6:	85 c0                	test   eax,eax
c000dca8:	75 10                	jne    c000dcba <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	68 34 fc 01 c0       	push   0xc001fc34
c000dcb2:	e8 04 27 00 00       	call   c00103bb <KePanic(char const*)>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcbd:	ba 12 00 00 00       	mov    edx,0x12
c000dcc2:	84 c0                	test   al,al
c000dcc4:	74 11                	je     c000dcd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dcc6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcca:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcce:	c1 fa 03             	sar    edx,0x3
c000dcd1:	0f af d1             	imul   edx,ecx
c000dcd4:	83 c2 12             	add    edx,0x12
c000dcd7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dcdb:	74 04                	je     c000dce1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dcdd:	85 f6                	test   esi,esi
c000dcdf:	75 12                	jne    c000dcf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dce1:	83 ec 0c             	sub    esp,0xc
c000dce4:	68 44 fc 01 c0       	push   0xc001fc44
c000dce9:	e8 0c c9 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000dcee:	e9 b8 00 00 00       	jmp    c000ddab <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dcf3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dcf7:	80 f9 02             	cmp    cl,0x2
c000dcfa:	0f 85 96 00 00 00    	jne    c000dd96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd00:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd05:	75 0e                	jne    c000dd15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd07:	84 c0                	test   al,al
c000dd09:	75 0a                	jne    c000dd15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd0b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd0e:	83 e8 18             	sub    eax,0x18
c000dd11:	a8 f7                	test   al,0xf7
c000dd13:	74 0a                	je     c000dd1f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd15:	83 ec 0c             	sub    esp,0xc
c000dd18:	68 59 fc 01 c0       	push   0xc001fc59
c000dd1d:	eb 7f                	jmp    c000dd9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd27:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd2f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd33:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd3b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd3f:	75 0c                	jne    c000dd4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd41:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd46:	c1 e0 18             	shl    eax,0x18
c000dd49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4d:	45                   	inc    ebp
c000dd4e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd53:	c1 e1 10             	shl    ecx,0x10
c000dd56:	89 c8                	mov    eax,ecx
c000dd58:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd5d:	c1 e1 08             	shl    ecx,0x8
c000dd60:	09 c1                	or     ecx,eax
c000dd62:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd66:	09 c1                	or     ecx,eax
c000dd68:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd6c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd70:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd74:	c1 f8 03             	sar    eax,0x3
c000dd77:	01 c2                	add    edx,eax
c000dd79:	89 e8                	mov    eax,ebp
c000dd7b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd7f:	39 c6                	cmp    esi,eax
c000dd81:	7f b0                	jg     c000dd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd83:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd8b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dd8e:	7e 22                	jle    c000ddb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dd90:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dd94:	eb 99                	jmp    c000dd2f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dd96:	50                   	push   eax
c000dd97:	50                   	push   eax
c000dd98:	51                   	push   ecx
c000dd99:	68 67 fc 01 c0       	push   0xc001fc67
c000dd9e:	e8 57 c8 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000dda3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dda6:	e8 ca 9a ff ff       	call   c0007875 <free>
c000ddab:	83 c4 10             	add    esp,0x10
c000ddae:	31 ff                	xor    edi,edi
c000ddb0:	eb 0f                	jmp    c000ddc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddb6:	89 30                	mov    DWORD PTR [eax],esi
c000ddb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddbc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddbf:	89 30                	mov    DWORD PTR [eax],esi
c000ddc1:	83 c4 1c             	add    esp,0x1c
c000ddc4:	89 f8                	mov    eax,edi
c000ddc6:	5b                   	pop    ebx
c000ddc7:	5e                   	pop    esi
c000ddc8:	5f                   	pop    edi
c000ddc9:	5d                   	pop    ebp
c000ddca:	c3                   	ret    
c000ddcb:	90                   	nop

c000ddcc <Video::putTGA(int, int, unsigned char*, int)>:
c000ddcc:	55                   	push   ebp
c000ddcd:	57                   	push   edi
c000ddce:	56                   	push   esi
c000ddcf:	53                   	push   ebx
c000ddd0:	83 ec 28             	sub    esp,0x28
c000ddd3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dddb:	50                   	push   eax
c000dddc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dde0:	50                   	push   eax
c000dde1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dde5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dde9:	56                   	push   esi
c000ddea:	e8 75 fe ff ff       	call   c000dc64 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ddef:	83 c4 20             	add    esp,0x20
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddf8:	74 35                	je     c000de2f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ddfa:	89 c7                	mov    edi,eax
c000ddfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de00:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de04:	39 d8                	cmp    eax,ebx
c000de06:	7e 27                	jle    c000de2f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de10:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de14:	39 e8                	cmp    eax,ebp
c000de16:	7e 14                	jle    c000de2c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de18:	8b 06                	mov    eax,DWORD PTR [esi]
c000de1a:	83 c7 04             	add    edi,0x4
c000de1d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de20:	53                   	push   ebx
c000de21:	55                   	push   ebp
c000de22:	45                   	inc    ebp
c000de23:	56                   	push   esi
c000de24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	eb e0                	jmp    c000de0c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de2c:	43                   	inc    ebx
c000de2d:	eb cd                	jmp    c000ddfc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de2f:	83 c4 1c             	add    esp,0x1c
c000de32:	5b                   	pop    ebx
c000de33:	5e                   	pop    esi
c000de34:	5f                   	pop    edi
c000de35:	5d                   	pop    ebp
c000de36:	c3                   	ret    
c000de37:	90                   	nop

c000de38 <ACPI::close(int, int, void*)>:
c000de38:	83 ec 1c             	sub    esp,0x1c
c000de3b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de43:	74 0b                	je     c000de50 <ACPI::close(int, int, void*)+0x18>
c000de45:	b8 00 00 00 00       	mov    eax,0x0
c000de4a:	e9 9d 00 00 00       	jmp    c000deec <ACPI::close(int, int, void*)+0xb4>
c000de4f:	90                   	nop
c000de50:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de55:	75 29                	jne    c000de80 <ACPI::close(int, int, void*)+0x48>
c000de57:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de5c:	85 c0                	test   eax,eax
c000de5e:	74 08                	je     c000de68 <ACPI::close(int, int, void*)+0x30>
c000de60:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de65:	ff d0                	call   eax
c000de67:	90                   	nop
c000de68:	83 ec 0c             	sub    esp,0xc
c000de6b:	68 c8 fc 01 c0       	push   0xc001fcc8
c000de70:	e8 46 25 00 00       	call   c00103bb <KePanic(char const*)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de7d:	eb 6d                	jmp    c000deec <ACPI::close(int, int, void*)+0xb4>
c000de7f:	90                   	nop
c000de80:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de85:	75 5d                	jne    c000dee4 <ACPI::close(int, int, void*)+0xac>
c000de87:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de8c:	85 c0                	test   eax,eax
c000de8e:	74 08                	je     c000de98 <ACPI::close(int, int, void*)+0x60>
c000de90:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de95:	ff d0                	call   eax
c000de97:	90                   	nop
c000de98:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000de9d:	8d 76 00             	lea    esi,[esi+0x0]
c000dea0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dea4:	25 ff 00 00 00       	and    eax,0xff
c000dea9:	83 e0 02             	and    eax,0x2
c000deac:	74 1e                	je     c000decc <ACPI::close(int, int, void*)+0x94>
c000deae:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000deb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deb9:	89 c2                	mov    edx,eax
c000debb:	ec                   	in     al,dx
c000debc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dec0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dec4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dec8:	eb d6                	jmp    c000dea0 <ACPI::close(int, int, void*)+0x68>
c000deca:	66 90                	xchg   ax,ax
c000decc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ded3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ded8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dedc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dee0:	ee                   	out    dx,al
c000dee1:	8d 76 00             	lea    esi,[esi+0x0]
c000dee4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	83 c4 1c             	add    esp,0x1c
c000deef:	c3                   	ret    

c000def0 <findRSDP()>:
c000def0:	83 ec 1c             	sub    esp,0x1c
c000def3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000def8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000defe:	83 e0 04             	and    eax,0x4
c000df01:	84 c0                	test   al,al
c000df03:	75 07                	jne    c000df0c <findRSDP()+0x1c>
c000df05:	b8 00 00 00 00       	mov    eax,0x0
c000df0a:	eb 70                	jmp    c000df7c <findRSDP()+0x8c>
c000df0c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df11:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df16:	7f 1c                	jg     c000df34 <findRSDP()+0x44>
c000df18:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df1d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df23:	83 e2 fb             	and    edx,0xfffffffb
c000df26:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df2c:	b8 00 00 00 00       	mov    eax,0x0
c000df31:	eb 49                	jmp    c000df7c <findRSDP()+0x8c>
c000df33:	90                   	nop
c000df34:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df3c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df44:	77 2e                	ja     c000df74 <findRSDP()+0x84>
c000df46:	83 ec 04             	sub    esp,0x4
c000df49:	6a 08                	push   0x8
c000df4b:	68 63 fd 01 c0       	push   0xc001fd63
c000df50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df54:	e8 27 24 ff ff       	call   c0000380 <memcmp>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	85 c0                	test   eax,eax
c000df5e:	0f 94 c0             	sete   al
c000df61:	84 c0                	test   al,al
c000df63:	74 07                	je     c000df6c <findRSDP()+0x7c>
c000df65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df69:	eb 11                	jmp    c000df7c <findRSDP()+0x8c>
c000df6b:	90                   	nop
c000df6c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df71:	eb c9                	jmp    c000df3c <findRSDP()+0x4c>
c000df73:	90                   	nop
c000df74:	b8 00 00 00 00       	mov    eax,0x0
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	83 c4 1c             	add    esp,0x1c
c000df7f:	c3                   	ret    

c000df80 <loadACPITables(unsigned char*)>:
c000df80:	57                   	push   edi
c000df81:	56                   	push   esi
c000df82:	53                   	push   ebx
c000df83:	83 ec 60             	sub    esp,0x60
c000df86:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df8b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df91:	83 e0 04             	and    eax,0x4
c000df94:	84 c0                	test   al,al
c000df96:	0f 84 3c 02 00 00    	je     c000e1d8 <loadACPITables(unsigned char*)+0x258>
c000df9c:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dfa1:	84 c0                	test   al,al
c000dfa3:	74 77                	je     c000e01c <loadACPITables(unsigned char*)+0x9c>
c000dfa5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfa9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfb4:	83 e8 24             	sub    eax,0x24
c000dfb7:	c1 e8 03             	shr    eax,0x3
c000dfba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfbe:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfc6:	66 90                	xchg   ax,ax
c000dfc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfcc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfd0:	0f 8d b6 00 00 00    	jge    c000e08c <loadACPITables(unsigned char*)+0x10c>
c000dfd6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfda:	83 c0 24             	add    eax,0x24
c000dfdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dfe1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dfe5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfe9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfed:	c1 e0 03             	shl    eax,0x3
c000dff0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dff4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dff8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dffb:	8b 00                	mov    eax,DWORD PTR [eax]
c000dffd:	89 c1                	mov    ecx,eax
c000dfff:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e004:	8d 50 01             	lea    edx,[eax+0x1]
c000e007:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e00d:	89 ca                	mov    edx,ecx
c000e00f:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e016:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e01a:	eb ac                	jmp    c000dfc8 <loadACPITables(unsigned char*)+0x48>
c000e01c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e020:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e024:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e02b:	83 e8 24             	sub    eax,0x24
c000e02e:	c1 e8 02             	shr    eax,0x2
c000e031:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e035:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e03d:	8d 76 00             	lea    esi,[esi+0x0]
c000e040:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e044:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e048:	7d 42                	jge    c000e08c <loadACPITables(unsigned char*)+0x10c>
c000e04a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e04e:	83 c0 24             	add    eax,0x24
c000e051:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e055:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e059:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e05d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e061:	c1 e0 02             	shl    eax,0x2
c000e064:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e068:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e06c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e06e:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e073:	8d 50 01             	lea    edx,[eax+0x1]
c000e076:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e07c:	89 ca                	mov    edx,ecx
c000e07e:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e085:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e089:	eb b5                	jmp    c000e040 <loadACPITables(unsigned char*)+0xc0>
c000e08b:	90                   	nop
c000e08c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e094:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e099:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e09d:	0f 8d 39 01 00 00    	jge    c000e1dc <loadACPITables(unsigned char*)+0x25c>
c000e0a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0a7:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0be:	25 ff 0f 00 00       	and    eax,0xfff
c000e0c3:	89 c6                	mov    esi,eax
c000e0c5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0cb:	83 ec 0c             	sub    esp,0xc
c000e0ce:	6a 01                	push   0x1
c000e0d0:	e8 68 b2 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0e2:	83 ec 0c             	sub    esp,0xc
c000e0e5:	6a 01                	push   0x1
c000e0e7:	6a 01                	push   0x1
c000e0e9:	50                   	push   eax
c000e0ea:	52                   	push   edx
c000e0eb:	53                   	push   ebx
c000e0ec:	e8 09 bc ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0f1:	83 c4 20             	add    esp,0x20
c000e0f4:	09 f0                	or     eax,esi
c000e0f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0fa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0fe:	c1 e0 03             	shl    eax,0x3
c000e101:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e106:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e10e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e112:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e11a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e11e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e126:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e12a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e12e:	89 c6                	mov    esi,eax
c000e130:	89 d7                	mov    edi,edx
c000e132:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e134:	89 c8                	mov    eax,ecx
c000e136:	89 fa                	mov    edx,edi
c000e138:	89 f3                	mov    ebx,esi
c000e13a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e13e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e142:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e146:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e14a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e14d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e151:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e155:	05 00 10 00 00       	add    eax,0x1000
c000e15a:	c1 e8 0c             	shr    eax,0xc
c000e15d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e165:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e169:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e16d:	25 ff 0f 00 00       	and    eax,0xfff
c000e172:	89 c6                	mov    esi,eax
c000e174:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e17a:	83 ec 0c             	sub    esp,0xc
c000e17d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e181:	e8 b7 b1 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e186:	83 c4 10             	add    esp,0x10
c000e189:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e18d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e193:	83 ec 0c             	sub    esp,0xc
c000e196:	6a 01                	push   0x1
c000e198:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e19c:	50                   	push   eax
c000e19d:	52                   	push   edx
c000e19e:	53                   	push   ebx
c000e19f:	e8 56 bb ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1a4:	83 c4 20             	add    esp,0x20
c000e1a7:	09 f0                	or     eax,esi
c000e1a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	50                   	push   eax
c000e1b5:	e8 77 b4 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1c5:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1cc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1d0:	e9 bf fe ff ff       	jmp    c000e094 <loadACPITables(unsigned char*)+0x114>
c000e1d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d8:	90                   	nop
c000e1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1dc:	83 c4 60             	add    esp,0x60
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	c3                   	ret    
c000e1e3:	90                   	nop

c000e1e4 <findRSDT(unsigned char*)>:
c000e1e4:	57                   	push   edi
c000e1e5:	56                   	push   esi
c000e1e6:	53                   	push   ebx
c000e1e7:	83 ec 50             	sub    esp,0x50
c000e1ea:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e1ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1f5:	83 e0 04             	and    eax,0x4
c000e1f8:	84 c0                	test   al,al
c000e1fa:	75 0c                	jne    c000e208 <findRSDT(unsigned char*)+0x24>
c000e1fc:	b8 00 00 00 00       	mov    eax,0x0
c000e201:	e9 26 01 00 00       	jmp    c000e32c <findRSDT(unsigned char*)+0x148>
c000e206:	66 90                	xchg   ax,ax
c000e208:	89 e0                	mov    eax,esp
c000e20a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e20e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e212:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e216:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e21e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e222:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e226:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e22a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e22e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e232:	89 c6                	mov    esi,eax
c000e234:	89 d7                	mov    edi,edx
c000e236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e238:	89 c8                	mov    eax,ecx
c000e23a:	89 fa                	mov    edx,edi
c000e23c:	89 f3                	mov    ebx,esi
c000e23e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e242:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e246:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e24a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e24e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e252:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e25a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e25e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e262:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e26e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e272:	25 ff 0f 00 00       	and    eax,0xfff
c000e277:	89 c6                	mov    esi,eax
c000e279:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e27f:	83 ec 0c             	sub    esp,0xc
c000e282:	6a 02                	push   0x2
c000e284:	e8 b4 b0 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e290:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e296:	83 ec 0c             	sub    esp,0xc
c000e299:	6a 01                	push   0x1
c000e29b:	6a 02                	push   0x2
c000e29d:	50                   	push   eax
c000e29e:	52                   	push   edx
c000e29f:	53                   	push   ebx
c000e2a0:	e8 55 ba ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2a5:	83 c4 20             	add    esp,0x20
c000e2a8:	09 f0                	or     eax,esi
c000e2aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2b2:	25 ff 0f 00 00       	and    eax,0xfff
c000e2b7:	89 c6                	mov    esi,eax
c000e2b9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2bf:	83 ec 0c             	sub    esp,0xc
c000e2c2:	6a 02                	push   0x2
c000e2c4:	e8 74 b0 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	6a 01                	push   0x1
c000e2db:	6a 02                	push   0x2
c000e2dd:	50                   	push   eax
c000e2de:	52                   	push   edx
c000e2df:	53                   	push   ebx
c000e2e0:	e8 15 ba ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2e5:	83 c4 20             	add    esp,0x20
c000e2e8:	09 f0                	or     eax,esi
c000e2ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2ee:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e2f3:	75 13                	jne    c000e308 <findRSDT(unsigned char*)+0x124>
c000e2f5:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e2fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e300:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e304:	eb 22                	jmp    c000e328 <findRSDT(unsigned char*)+0x144>
c000e306:	66 90                	xchg   ax,ax
c000e308:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e30d:	75 11                	jne    c000e320 <findRSDT(unsigned char*)+0x13c>
c000e30f:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e316:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e31a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e31e:	eb 08                	jmp    c000e328 <findRSDT(unsigned char*)+0x144>
c000e320:	b8 00 00 00 00       	mov    eax,0x0
c000e325:	eb 05                	jmp    c000e32c <findRSDT(unsigned char*)+0x148>
c000e327:	90                   	nop
c000e328:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e32c:	83 c4 50             	add    esp,0x50
c000e32f:	5b                   	pop    ebx
c000e330:	5e                   	pop    esi
c000e331:	5f                   	pop    edi
c000e332:	c3                   	ret    
c000e333:	90                   	nop

c000e334 <findDataTable(unsigned char*, char*)>:
c000e334:	83 ec 1c             	sub    esp,0x1c
c000e337:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e33c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e342:	83 e0 04             	and    eax,0x4
c000e345:	84 c0                	test   al,al
c000e347:	75 07                	jne    c000e350 <findDataTable(unsigned char*, char*)+0x1c>
c000e349:	b8 00 00 00 00       	mov    eax,0x0
c000e34e:	eb 58                	jmp    c000e3a8 <findDataTable(unsigned char*, char*)+0x74>
c000e350:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e358:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e35d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e361:	7d 3d                	jge    c000e3a0 <findDataTable(unsigned char*, char*)+0x6c>
c000e363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e367:	c1 e0 03             	shl    eax,0x3
c000e36a:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e36f:	83 ec 04             	sub    esp,0x4
c000e372:	6a 04                	push   0x4
c000e374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e378:	50                   	push   eax
c000e379:	e8 02 20 ff ff       	call   c0000380 <memcmp>
c000e37e:	83 c4 10             	add    esp,0x10
c000e381:	85 c0                	test   eax,eax
c000e383:	0f 94 c0             	sete   al
c000e386:	84 c0                	test   al,al
c000e388:	74 0e                	je     c000e398 <findDataTable(unsigned char*, char*)+0x64>
c000e38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e38e:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e395:	eb 11                	jmp    c000e3a8 <findDataTable(unsigned char*, char*)+0x74>
c000e397:	90                   	nop
c000e398:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e39c:	eb ba                	jmp    c000e358 <findDataTable(unsigned char*, char*)+0x24>
c000e39e:	66 90                	xchg   ax,ax
c000e3a0:	b8 00 00 00 00       	mov    eax,0x0
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	83 c4 1c             	add    esp,0x1c
c000e3ab:	c3                   	ret    

c000e3ac <scanMADT()>:
c000e3ac:	53                   	push   ebx
c000e3ad:	83 ec 38             	sub    esp,0x38
c000e3b0:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e3b5:	25 00 04 00 00       	and    eax,0x400
c000e3ba:	74 14                	je     c000e3d0 <scanMADT()+0x24>
c000e3bc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3c1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3c7:	83 e2 fb             	and    edx,0xfffffffb
c000e3ca:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3d0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3d5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3db:	83 e0 04             	and    eax,0x4
c000e3de:	84 c0                	test   al,al
c000e3e0:	0f 84 8a 04 00 00    	je     c000e870 <scanMADT()+0x4c4>
c000e3e6:	e8 05 fb ff ff       	call   c000def0 <findRSDP()>
c000e3eb:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e3f0:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e3f5:	85 c0                	test   eax,eax
c000e3f7:	75 1b                	jne    c000e414 <scanMADT()+0x68>
c000e3f9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3fe:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e404:	83 e2 fb             	and    edx,0xfffffffb
c000e407:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e40d:	e9 66 04 00 00       	jmp    c000e878 <scanMADT()+0x4cc>
c000e412:	66 90                	xchg   ax,ax
c000e414:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e419:	83 ec 0c             	sub    esp,0xc
c000e41c:	50                   	push   eax
c000e41d:	e8 c2 fd ff ff       	call   c000e1e4 <findRSDT(unsigned char*)>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e42a:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e42f:	85 c0                	test   eax,eax
c000e431:	75 19                	jne    c000e44c <scanMADT()+0xa0>
c000e433:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e438:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e43e:	83 e2 fb             	and    edx,0xfffffffb
c000e441:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e447:	e9 2c 04 00 00       	jmp    c000e878 <scanMADT()+0x4cc>
c000e44c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	50                   	push   eax
c000e455:	e8 26 fb ff ff       	call   c000df80 <loadACPITables(unsigned char*)>
c000e45a:	83 c4 10             	add    esp,0x10
c000e45d:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e462:	83 ec 08             	sub    esp,0x8
c000e465:	68 6c fd 01 c0       	push   0xc001fd6c
c000e46a:	50                   	push   eax
c000e46b:	e8 c4 fe ff ff       	call   c000e334 <findDataTable(unsigned char*, char*)>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e477:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e47c:	75 1a                	jne    c000e498 <scanMADT()+0xec>
c000e47e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e483:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e489:	83 e2 fe             	and    edx,0xfffffffe
c000e48c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e492:	e9 e1 03 00 00       	jmp    c000e878 <scanMADT()+0x4cc>
c000e497:	90                   	nop
c000e498:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4a7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4ab:	0f 87 c7 03 00 00    	ja     c000e878 <scanMADT()+0x4cc>
c000e4b1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4b9:	0f 87 b9 03 00 00    	ja     c000e878 <scanMADT()+0x4cc>
c000e4bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4da:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e2:	8d 50 01             	lea    edx,[eax+0x1]
c000e4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4f1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e4f5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e4fa:	0f 86 74 03 00 00    	jbe    c000e874 <scanMADT()+0x4c8>
c000e500:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e505:	75 5d                	jne    c000e564 <scanMADT()+0x1b8>
c000e507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50b:	8d 50 01             	lea    edx,[eax+0x1]
c000e50e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e512:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e518:	81 e2 ff 00 00 00    	and    edx,0xff
c000e51e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e522:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e526:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e52c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e530:	8d 42 01             	lea    eax,[edx+0x1]
c000e533:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e537:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e53c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e53f:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e545:	25 ff 00 00 00       	and    eax,0xff
c000e54a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e54e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e552:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e558:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e55d:	e9 f6 02 00 00       	jmp    c000e858 <scanMADT()+0x4ac>
c000e562:	66 90                	xchg   ax,ax
c000e564:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e569:	0f 85 29 01 00 00    	jne    c000e698 <scanMADT()+0x2ec>
c000e56f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e573:	8d 50 01             	lea    edx,[eax+0x1]
c000e576:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e57a:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e580:	81 e2 ff 00 00 00    	and    edx,0xff
c000e586:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e58a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e58e:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e594:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a0:	01 d0                	add    eax,edx
c000e5a2:	83 c0 2c             	add    eax,0x2c
c000e5a5:	8a 00                	mov    al,BYTE PTR [eax]
c000e5a7:	31 d2                	xor    edx,edx
c000e5a9:	88 c2                	mov    dl,al
c000e5ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5af:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5ba:	25 ff 00 00 00       	and    eax,0xff
c000e5bf:	c1 e0 08             	shl    eax,0x8
c000e5c2:	89 d1                	mov    ecx,edx
c000e5c4:	09 c1                	or     ecx,eax
c000e5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ca:	8d 50 02             	lea    edx,[eax+0x2]
c000e5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5d5:	25 ff 00 00 00       	and    eax,0xff
c000e5da:	c1 e0 10             	shl    eax,0x10
c000e5dd:	09 c1                	or     ecx,eax
c000e5df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5e3:	8d 50 03             	lea    edx,[eax+0x3]
c000e5e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ee:	25 ff 00 00 00       	and    eax,0xff
c000e5f3:	c1 e0 18             	shl    eax,0x18
c000e5f6:	09 c1                	or     ecx,eax
c000e5f8:	89 ca                	mov    edx,ecx
c000e5fa:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e5ff:	25 ff 00 00 00       	and    eax,0xff
c000e604:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e60b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e610:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e614:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e618:	01 d0                	add    eax,edx
c000e61a:	83 c0 2c             	add    eax,0x2c
c000e61d:	8a 00                	mov    al,BYTE PTR [eax]
c000e61f:	31 d2                	xor    edx,edx
c000e621:	88 c2                	mov    dl,al
c000e623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e627:	8d 48 01             	lea    ecx,[eax+0x1]
c000e62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e632:	25 ff 00 00 00       	and    eax,0xff
c000e637:	c1 e0 08             	shl    eax,0x8
c000e63a:	89 d1                	mov    ecx,edx
c000e63c:	09 c1                	or     ecx,eax
c000e63e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e642:	8d 50 02             	lea    edx,[eax+0x2]
c000e645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e649:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e64d:	25 ff 00 00 00       	and    eax,0xff
c000e652:	c1 e0 10             	shl    eax,0x10
c000e655:	09 c1                	or     ecx,eax
c000e657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e65b:	8d 50 03             	lea    edx,[eax+0x3]
c000e65e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e662:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e666:	25 ff 00 00 00       	and    eax,0xff
c000e66b:	c1 e0 18             	shl    eax,0x18
c000e66e:	09 c1                	or     ecx,eax
c000e670:	89 ca                	mov    edx,ecx
c000e672:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e677:	25 ff 00 00 00       	and    eax,0xff
c000e67c:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e683:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e688:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e68d:	40                   	inc    eax
c000e68e:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e693:	e9 c0 01 00 00       	jmp    c000e858 <scanMADT()+0x4ac>
c000e698:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e69d:	0f 85 fd 00 00 00    	jne    c000e7a0 <scanMADT()+0x3f4>
c000e6a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e6aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6b6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6be:	8d 50 01             	lea    edx,[eax+0x1]
c000e6c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6cd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6d9:	01 d0                	add    eax,edx
c000e6db:	83 c0 2c             	add    eax,0x2c
c000e6de:	8a 00                	mov    al,BYTE PTR [eax]
c000e6e0:	31 d2                	xor    edx,edx
c000e6e2:	88 c2                	mov    dl,al
c000e6e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6ef:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6f3:	25 ff 00 00 00       	and    eax,0xff
c000e6f8:	c1 e0 08             	shl    eax,0x8
c000e6fb:	89 d1                	mov    ecx,edx
c000e6fd:	09 c1                	or     ecx,eax
c000e6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e703:	8d 50 02             	lea    edx,[eax+0x2]
c000e706:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e70a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e70e:	25 ff 00 00 00       	and    eax,0xff
c000e713:	c1 e0 10             	shl    eax,0x10
c000e716:	09 c1                	or     ecx,eax
c000e718:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e71c:	8d 50 03             	lea    edx,[eax+0x3]
c000e71f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e723:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e727:	25 ff 00 00 00       	and    eax,0xff
c000e72c:	c1 e0 18             	shl    eax,0x18
c000e72f:	09 c8                	or     eax,ecx
c000e731:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e735:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e73a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e73e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e742:	01 d0                	add    eax,edx
c000e744:	83 c0 2c             	add    eax,0x2c
c000e747:	8a 00                	mov    al,BYTE PTR [eax]
c000e749:	25 ff 00 00 00       	and    eax,0xff
c000e74e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e752:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e755:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e759:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e75d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e763:	c1 e2 08             	shl    edx,0x8
c000e766:	09 d0                	or     eax,edx
c000e768:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e76d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e772:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e776:	25 ff 00 00 00       	and    eax,0xff
c000e77b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e77f:	88 90 c0 12 02 c0    	mov    BYTE PTR [eax-0x3ffded40],dl
c000e785:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e789:	31 d2                	xor    edx,edx
c000e78b:	88 c2                	mov    dl,al
c000e78d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e792:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e79a:	e9 b9 00 00 00       	jmp    c000e858 <scanMADT()+0x4ac>
c000e79f:	90                   	nop
c000e7a0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7a5:	0f 85 a1 00 00 00    	jne    c000e84c <scanMADT()+0x4a0>
c000e7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7af:	8d 50 01             	lea    edx,[eax+0x1]
c000e7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7be:	25 ff 00 00 00       	and    eax,0xff
c000e7c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7cf:	01 d0                	add    eax,edx
c000e7d1:	83 c0 2c             	add    eax,0x2c
c000e7d4:	8a 00                	mov    al,BYTE PTR [eax]
c000e7d6:	31 d2                	xor    edx,edx
c000e7d8:	88 c2                	mov    dl,al
c000e7da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7de:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7e5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7e9:	25 ff 00 00 00       	and    eax,0xff
c000e7ee:	c1 e0 08             	shl    eax,0x8
c000e7f1:	09 d0                	or     eax,edx
c000e7f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7f7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e800:	8d 50 01             	lea    edx,[eax+0x1]
c000e803:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e807:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e80b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e80f:	25 ff 00 00 00       	and    eax,0xff
c000e814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81c:	c1 e0 08             	shl    eax,0x8
c000e81f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e823:	89 c1                	mov    ecx,eax
c000e825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e829:	c1 e0 18             	shl    eax,0x18
c000e82c:	89 c3                	mov    ebx,eax
c000e82e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e833:	8d 50 01             	lea    edx,[eax+0x1]
c000e836:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e83c:	09 d9                	or     ecx,ebx
c000e83e:	89 ca                	mov    edx,ecx
c000e840:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e847:	eb 0f                	jmp    c000e858 <scanMADT()+0x4ac>
c000e849:	8d 76 00             	lea    esi,[esi+0x0]
c000e84c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e851:	75 05                	jne    c000e858 <scanMADT()+0x4ac>
c000e853:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e858:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e85c:	31 d2                	xor    edx,edx
c000e85e:	88 c2                	mov    dl,al
c000e860:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e864:	01 d0                	add    eax,edx
c000e866:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e86a:	e9 31 fc ff ff       	jmp    c000e4a0 <scanMADT()+0xf4>
c000e86f:	90                   	nop
c000e870:	90                   	nop
c000e871:	eb 05                	jmp    c000e878 <scanMADT()+0x4cc>
c000e873:	90                   	nop
c000e874:	90                   	nop
c000e875:	8d 76 00             	lea    esi,[esi+0x0]
c000e878:	83 c4 38             	add    esp,0x38
c000e87b:	5b                   	pop    ebx
c000e87c:	c3                   	ret    
c000e87d:	90                   	nop
c000e87e:	66 90                	xchg   ax,ax

c000e880 <ACPI::ACPI()>:
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e887:	83 ec 08             	sub    esp,0x8
c000e88a:	68 71 fd 01 c0       	push   0xc001fd71
c000e88f:	50                   	push   eax
c000e890:	e8 3b d3 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000e895:	83 c4 10             	add    esp,0x10
c000e898:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c000e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a1:	89 10                	mov    DWORD PTR [eax],edx
c000e8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8ca:	e8 dd fa ff ff       	call   c000e3ac <scanMADT()>
c000e8cf:	90                   	nop
c000e8d0:	83 c4 0c             	add    esp,0xc
c000e8d3:	c3                   	ret    

c000e8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8d4:	83 ec 2c             	sub    esp,0x2c
c000e8d7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8df:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8ec:	88 d0                	mov    al,dl
c000e8ee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8f7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e8ff:	90                   	nop
c000e900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e904:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e90a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e90e:	0f 8d 9c 00 00 00    	jge    c000e9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e91c:	83 c2 2a             	add    edx,0x2a
c000e91f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e923:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e928:	75 7a                	jne    c000e9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e92a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e92e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e932:	83 c2 2a             	add    edx,0x2a
c000e935:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e939:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e93d:	75 65                	jne    c000e9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e93f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e944:	74 3a                	je     c000e980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e946:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e94a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e94e:	83 c2 2a             	add    edx,0x2a
c000e951:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95c:	39 c2                	cmp    edx,eax
c000e95e:	74 10                	je     c000e970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e960:	83 ec 0c             	sub    esp,0xc
c000e963:	68 ec fc 01 c0       	push   0xc001fcec
c000e968:	e8 4e 1a 00 00       	call   c00103bb <KePanic(char const*)>
c000e96d:	83 c4 10             	add    esp,0x10
c000e970:	83 ec 0c             	sub    esp,0xc
c000e973:	68 76 fd 01 c0       	push   0xc001fd76
c000e978:	e8 3e 1a 00 00       	call   c00103bb <KePanic(char const*)>
c000e97d:	83 c4 10             	add    esp,0x10
c000e980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e98c:	83 c2 2a             	add    edx,0x2a
c000e98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e993:	8b 02                	mov    eax,DWORD PTR [edx]
c000e995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e998:	89 01                	mov    DWORD PTR [ecx],eax
c000e99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9a2:	66 90                	xchg   ax,ax
c000e9a4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9a8:	e9 53 ff ff ff       	jmp    c000e900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b0:	90                   	nop
c000e9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b5:	83 c4 2c             	add    esp,0x2c
c000e9b8:	c2 04 00             	ret    0x4
c000e9bb:	90                   	nop

c000e9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9bc:	83 ec 1c             	sub    esp,0x1c
c000e9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9d0:	88 c8                	mov    al,cl
c000e9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9d6:	88 d0                	mov    al,dl
c000e9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea1d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea24:	83 c2 2a             	add    edx,0x2a
c000ea27:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea2f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea39:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea40:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea48:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea4e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea55:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea5f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea65:	3d 00 02 00 00       	cmp    eax,0x200
c000ea6a:	75 10                	jne    c000ea7c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea6c:	83 ec 0c             	sub    esp,0xc
c000ea6f:	68 85 fd 01 c0       	push   0xc001fd85
c000ea74:	e8 42 19 00 00       	call   c00103bb <KePanic(char const*)>
c000ea79:	83 c4 10             	add    esp,0x10
c000ea7c:	90                   	nop
c000ea7d:	83 c4 1c             	add    esp,0x1c
c000ea80:	c3                   	ret    
c000ea81:	90                   	nop
c000ea82:	66 90                	xchg   ax,ax

c000ea84 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea84:	b8 00 00 00 00       	mov    eax,0x0
c000ea89:	c3                   	ret    
c000ea8a:	66 90                	xchg   ax,ax

c000ea8c <ACPI::detectPCI()>:
c000ea8c:	53                   	push   ebx
c000ea8d:	83 ec 28             	sub    esp,0x28
c000ea90:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ea95:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ea9a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000ea9f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eaa5:	83 e0 04             	and    eax,0x4
c000eaa8:	84 c0                	test   al,al
c000eaaa:	74 2c                	je     c000ead8 <ACPI::detectPCI()+0x4c>
c000eaac:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eab1:	83 ec 08             	sub    esp,0x8
c000eab4:	68 a2 fd 01 c0       	push   0xc001fda2
c000eab9:	50                   	push   eax
c000eaba:	e8 75 f8 ff ff       	call   c000e334 <findDataTable(unsigned char*, char*)>
c000eabf:	83 c4 10             	add    esp,0x10
c000eac2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eac6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eacb:	74 0b                	je     c000ead8 <ACPI::detectPCI()+0x4c>
c000eacd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ead2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ead7:	90                   	nop
c000ead8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eae4:	8a 00                	mov    al,BYTE PTR [eax]
c000eae6:	3c 01                	cmp    al,0x1
c000eae8:	75 0e                	jne    c000eaf8 <ACPI::detectPCI()+0x6c>
c000eaea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eaef:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eaf4:	eb 2a                	jmp    c000eb20 <ACPI::detectPCI()+0x94>
c000eaf6:	66 90                	xchg   ax,ax
c000eaf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eafc:	8a 00                	mov    al,BYTE PTR [eax]
c000eafe:	3c 02                	cmp    al,0x2
c000eb00:	75 1e                	jne    c000eb20 <ACPI::detectPCI()+0x94>
c000eb02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb07:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb0c:	74 12                	je     c000eb20 <ACPI::detectPCI()+0x94>
c000eb0e:	83 ec 0c             	sub    esp,0xc
c000eb11:	68 1c fd 01 c0       	push   0xc001fd1c
c000eb16:	e8 a0 18 00 00       	call   c00103bb <KePanic(char const*)>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	66 90                	xchg   ax,ax
c000eb20:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb24:	83 f0 01             	xor    eax,0x1
c000eb27:	84 c0                	test   al,al
c000eb29:	74 41                	je     c000eb6c <ACPI::detectPCI()+0xe0>
c000eb2b:	e8 00 16 ff ff       	call   c0000130 <manualPCIProbe>
c000eb30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb34:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb39:	75 0d                	jne    c000eb48 <ACPI::detectPCI()+0xbc>
c000eb3b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb40:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb45:	eb 25                	jmp    c000eb6c <ACPI::detectPCI()+0xe0>
c000eb47:	90                   	nop
c000eb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb4d:	75 1d                	jne    c000eb6c <ACPI::detectPCI()+0xe0>
c000eb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb54:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb59:	74 11                	je     c000eb6c <ACPI::detectPCI()+0xe0>
c000eb5b:	83 ec 0c             	sub    esp,0xc
c000eb5e:	68 1c fd 01 c0       	push   0xc001fd1c
c000eb63:	e8 53 18 00 00       	call   c00103bb <KePanic(char const*)>
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	90                   	nop
c000eb6c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb71:	0f 84 85 00 00 00    	je     c000ebfc <ACPI::detectPCI()+0x170>
c000eb77:	83 ec 0c             	sub    esp,0xc
c000eb7a:	68 a7 fd 01 c0       	push   0xc001fda7
c000eb7f:	e8 bf 11 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eb8f:	83 ec 0c             	sub    esp,0xc
c000eb92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb96:	e8 ca 8c ff ff       	call   c0007865 <malloc>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	89 c3                	mov    ebx,eax
c000eba0:	83 ec 0c             	sub    esp,0xc
c000eba3:	53                   	push   ebx
c000eba4:	e8 21 aa 00 00       	call   c00195ca <PCI::PCI()>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebb4:	83 ec 08             	sub    esp,0x8
c000ebb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebbb:	50                   	push   eax
c000ebbc:	e8 77 ce ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000ebc1:	83 c4 10             	add    esp,0x10
c000ebc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebca:	83 c0 08             	add    eax,0x8
c000ebcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebcf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebd4:	74 0a                	je     c000ebe0 <ACPI::detectPCI()+0x154>
c000ebd6:	ba 01 00 00 00       	mov    edx,0x1
c000ebdb:	eb 0b                	jmp    c000ebe8 <ACPI::detectPCI()+0x15c>
c000ebdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe0:	ba 02 00 00 00       	mov    edx,0x2
c000ebe5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe8:	6a 00                	push   0x0
c000ebea:	6a 00                	push   0x0
c000ebec:	52                   	push   edx
c000ebed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebf1:	ff d0                	call   eax
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	e9 91 00 00 00       	jmp    c000ec8c <ACPI::detectPCI()+0x200>
c000ebfb:	90                   	nop
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	68 bf fd 01 c0       	push   0xc001fdbf
c000ec04:	e8 3a 11 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000ec09:	83 c4 10             	add    esp,0x10
c000ec0c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec13:	83 ec 0c             	sub    esp,0xc
c000ec16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec1a:	e8 46 8c ff ff       	call   c0007865 <malloc>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	89 c3                	mov    ebx,eax
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	53                   	push   ebx
c000ec28:	e8 03 b5 00 00       	call   c001a130 <IDE::IDE()>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec38:	83 ec 08             	sub    esp,0x8
c000ec3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec3f:	50                   	push   eax
c000ec40:	e8 f3 cd ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec4c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec5a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec67:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec74:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec76:	83 c0 08             	add    eax,0x8
c000ec79:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec7b:	6a 00                	push   0x0
c000ec7d:	6a 00                	push   0x0
c000ec7f:	6a 00                	push   0x0
c000ec81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec85:	ff d0                	call   eax
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	66 90                	xchg   ax,ax
c000ec8c:	90                   	nop
c000ec8d:	83 c4 28             	add    esp,0x28
c000ec90:	5b                   	pop    ebx
c000ec91:	c3                   	ret    
c000ec92:	66 90                	xchg   ax,ax

c000ec94 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ec94:	83 ec 1c             	sub    esp,0x1c
c000ec97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec9b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec9e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eca2:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000eca8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecac:	25 ff 00 00 00       	and    eax,0xff
c000ecb1:	83 ec 08             	sub    esp,0x8
c000ecb4:	50                   	push   eax
c000ecb5:	52                   	push   edx
c000ecb6:	e8 95 82 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c000ecbb:	83 c4 10             	add    esp,0x10
c000ecbe:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ecc2:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecc8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eccc:	25 ff 00 00 00       	and    eax,0xff
c000ecd1:	83 ec 04             	sub    esp,0x4
c000ecd4:	6a 01                	push   0x1
c000ecd6:	50                   	push   eax
c000ecd7:	52                   	push   edx
c000ecd8:	e8 89 83 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ecdd:	83 c4 10             	add    esp,0x10
c000ece0:	90                   	nop
c000ece1:	83 c4 1c             	add    esp,0x1c
c000ece4:	c3                   	ret    
c000ece5:	90                   	nop
c000ece6:	66 90                	xchg   ax,ax

c000ece8 <ACPI::sleep()>:
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecf0:	85 c0                	test   eax,eax
c000ecf2:	74 08                	je     c000ecfc <ACPI::sleep()+0x14>
c000ecf4:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecf9:	ff d0                	call   eax
c000ecfb:	90                   	nop
c000ecfc:	90                   	nop
c000ecfd:	83 c4 0c             	add    esp,0xc
c000ed00:	c3                   	ret    
c000ed01:	90                   	nop
c000ed02:	66 90                	xchg   ax,ax

c000ed04 <ACPI::open(int, int, void*)>:
c000ed04:	57                   	push   edi
c000ed05:	56                   	push   esi
c000ed06:	53                   	push   ebx
c000ed07:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed0d:	83 ec 0c             	sub    esp,0xc
c000ed10:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed17:	e8 70 fd ff ff       	call   c000ea8c <ACPI::detectPCI()>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	83 ec 0c             	sub    esp,0xc
c000ed22:	68 44 fd 01 c0       	push   0xc001fd44
c000ed27:	e8 17 10 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	83 ec 0c             	sub    esp,0xc
c000ed32:	68 d4 fd 01 c0       	push   0xc001fdd4
c000ed37:	e8 a3 45 00 00       	call   c00132df <Thr::loadKernelSymbolTable(char const*)>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed47:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed52:	83 ec 0c             	sub    esp,0xc
c000ed55:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed5c:	e8 04 8b ff ff       	call   c0007865 <malloc>
c000ed61:	83 c4 10             	add    esp,0x10
c000ed64:	89 c3                	mov    ebx,eax
c000ed66:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed6b:	83 ec 04             	sub    esp,0x4
c000ed6e:	50                   	push   eax
c000ed6f:	68 f2 fd 01 c0       	push   0xc001fdf2
c000ed74:	53                   	push   ebx
c000ed75:	e8 f6 bd ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000ed7a:	83 c4 10             	add    esp,0x10
c000ed7d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed84:	83 ec 08             	sub    esp,0x8
c000ed87:	6a 01                	push   0x1
c000ed89:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed90:	e8 9b be ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000ed95:	83 c4 10             	add    esp,0x10
c000ed98:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ed9f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eda7:	75 17                	jne    c000edc0 <ACPI::open(int, int, void*)+0xbc>
c000eda9:	83 ec 0c             	sub    esp,0xc
c000edac:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edb3:	e8 d6 be ff ff       	call   c000ac8e <File::close()>
c000edb8:	83 c4 10             	add    esp,0x10
c000edbb:	eb 0b                	jmp    c000edc8 <ACPI::open(int, int, void*)+0xc4>
c000edbd:	8d 76 00             	lea    esi,[esi+0x0]
c000edc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000edc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000edd0:	74 1e                	je     c000edf0 <ACPI::open(int, int, void*)+0xec>
c000edd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000edd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eddb:	83 c0 08             	add    eax,0x8
c000edde:	8b 00                	mov    eax,DWORD PTR [eax]
c000ede0:	83 ec 0c             	sub    esp,0xc
c000ede3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edea:	ff d0                	call   eax
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	90                   	nop
c000edf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000edf7:	83 f0 01             	xor    eax,0x1
c000edfa:	84 c0                	test   al,al
c000edfc:	74 42                	je     c000ee40 <ACPI::open(int, int, void*)+0x13c>
c000edfe:	83 ec 0c             	sub    esp,0xc
c000ee01:	68 10 fe 01 c0       	push   0xc001fe10
c000ee06:	e8 38 0f 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000ee0b:	83 c4 10             	add    esp,0x10
c000ee0e:	83 ec 04             	sub    esp,0x4
c000ee11:	6a 0c                	push   0xc
c000ee13:	68 2b fe 01 c0       	push   0xc001fe2b
c000ee18:	68 3c fe 01 c0       	push   0xc001fe3c
c000ee1d:	e8 b7 3a 00 00       	call   c00128d9 <Reg::readIntWithDefault(char*, char*, int)>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee2c:	83 ec 0c             	sub    esp,0xc
c000ee2f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee36:	e8 0c a7 ff ff       	call   c0009547 <Virt::setupPageSwapping(int)>
c000ee3b:	83 c4 10             	add    esp,0x10
c000ee3e:	66 90                	xchg   ax,ax
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 95 ee 01 c0       	push   0xc001ee95
c000ee48:	e8 f6 0e 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee57:	83 ec 08             	sub    esp,0x8
c000ee5a:	6a 13                	push   0x13
c000ee5c:	50                   	push   eax
c000ee5d:	e8 ee ce ff ff       	call   c000bd50 <getDevicesOfType(DeviceType)>
c000ee62:	83 c4 0c             	add    esp,0xc
c000ee65:	8d 76 00             	lea    esi,[esi+0x0]
c000ee68:	83 ec 0c             	sub    esp,0xc
c000ee6b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee72:	50                   	push   eax
c000ee73:	e8 14 f4 00 00       	call   c001e28c <LinkedList<Device>::isEmpty()>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	83 f0 01             	xor    eax,0x1
c000ee7e:	84 c0                	test   al,al
c000ee80:	0f 84 46 01 00 00    	je     c000efcc <ACPI::open(int, int, void*)+0x2c8>
c000ee86:	83 ec 0c             	sub    esp,0xc
c000ee89:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee90:	50                   	push   eax
c000ee91:	e8 12 f4 00 00       	call   c001e2a8 <LinkedList<Device>::getFirstElement()>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeaa:	50                   	push   eax
c000eeab:	e8 00 f4 00 00       	call   c001e2b0 <LinkedList<Device>::removeFirst()>
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eeba:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eec1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eec8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eecc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eed2:	ba 09 00 00 00       	mov    edx,0x9
c000eed7:	fc                   	cld    
c000eed8:	89 c7                	mov    edi,eax
c000eeda:	89 de                	mov    esi,ebx
c000eedc:	89 d1                	mov    ecx,edx
c000eede:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eee0:	83 ec 08             	sub    esp,0x8
c000eee3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eee7:	50                   	push   eax
c000eee8:	83 ec 24             	sub    esp,0x24
c000eeeb:	89 e0                	mov    eax,esp
c000eeed:	89 c3                	mov    ebx,eax
c000eeef:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eef3:	ba 09 00 00 00       	mov    edx,0x9
c000eef8:	89 df                	mov    edi,ebx
c000eefa:	89 c6                	mov    esi,eax
c000eefc:	89 d1                	mov    ecx,edx
c000eefe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef00:	e8 a7 ab 00 00       	call   c0019aac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef05:	83 c4 30             	add    esp,0x30
c000ef08:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef0f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef17:	0f 84 4b ff ff ff    	je     c000ee68 <ACPI::open(int, int, void*)+0x164>
c000ef1d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef28:	83 ec 0c             	sub    esp,0xc
c000ef2b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef32:	e8 2e 89 ff ff       	call   c0007865 <malloc>
c000ef37:	83 c4 10             	add    esp,0x10
c000ef3a:	89 c3                	mov    ebx,eax
c000ef3c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef41:	83 ec 04             	sub    esp,0x4
c000ef44:	50                   	push   eax
c000ef45:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef4c:	53                   	push   ebx
c000ef4d:	e8 1e bc ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000ef52:	83 c4 10             	add    esp,0x10
c000ef55:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef66:	e8 33 bf ff ff       	call   c000ae9e <File::exists()>
c000ef6b:	83 c4 10             	add    esp,0x10
c000ef6e:	84 c0                	test   al,al
c000ef70:	74 2a                	je     c000ef9c <ACPI::open(int, int, void*)+0x298>
c000ef72:	83 ec 08             	sub    esp,0x8
c000ef75:	6a 01                	push   0x1
c000ef77:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef7e:	e8 d3 4d 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000ef83:	83 c4 10             	add    esp,0x10
c000ef86:	83 ec 08             	sub    esp,0x8
c000ef89:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef90:	50                   	push   eax
c000ef91:	e8 f1 4f 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000ef96:	83 c4 10             	add    esp,0x10
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000efa4:	0f 84 be fe ff ff    	je     c000ee68 <ACPI::open(int, int, void*)+0x164>
c000efaa:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb3:	83 c0 08             	add    eax,0x8
c000efb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efc2:	ff d0                	call   eax
c000efc4:	83 c4 10             	add    esp,0x10
c000efc7:	e9 9c fe ff ff       	jmp    c000ee68 <ACPI::open(int, int, void*)+0x164>
c000efcc:	83 ec 0c             	sub    esp,0xc
c000efcf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efd6:	50                   	push   eax
c000efd7:	e8 ac f2 00 00       	call   c001e288 <LinkedList<Device>::~LinkedList()>
c000efdc:	83 c4 10             	add    esp,0x10
c000efdf:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000efe5:	83 ec 08             	sub    esp,0x8
c000efe8:	6a 01                	push   0x1
c000efea:	68 43 fe 01 c0       	push   0xc001fe43
c000efef:	e8 62 4d 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000eff4:	83 c4 10             	add    esp,0x10
c000eff7:	83 ec 08             	sub    esp,0x8
c000effa:	53                   	push   ebx
c000effb:	50                   	push   eax
c000effc:	e8 86 4f 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f009:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f00f:	83 e0 04             	and    eax,0x4
c000f012:	84 c0                	test   al,al
c000f014:	0f 84 16 01 00 00    	je     c000f130 <ACPI::open(int, int, void*)+0x42c>
c000f01a:	83 ec 0c             	sub    esp,0xc
c000f01d:	68 60 fe 01 c0       	push   0xc001fe60
c000f022:	e8 1c 0d 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000f027:	83 c4 10             	add    esp,0x10
c000f02a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f035:	83 ec 0c             	sub    esp,0xc
c000f038:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f03f:	e8 21 88 ff ff       	call   c0007865 <malloc>
c000f044:	83 c4 10             	add    esp,0x10
c000f047:	89 c3                	mov    ebx,eax
c000f049:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f04e:	83 ec 04             	sub    esp,0x4
c000f051:	50                   	push   eax
c000f052:	68 7d fe 01 c0       	push   0xc001fe7d
c000f057:	53                   	push   ebx
c000f058:	e8 13 bb ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f067:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f06f:	74 1b                	je     c000f08c <ACPI::open(int, int, void*)+0x388>
c000f071:	83 ec 0c             	sub    esp,0xc
c000f074:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f07b:	e8 1e be ff ff       	call   c000ae9e <File::exists()>
c000f080:	83 c4 10             	add    esp,0x10
c000f083:	84 c0                	test   al,al
c000f085:	74 05                	je     c000f08c <ACPI::open(int, int, void*)+0x388>
c000f087:	b0 01                	mov    al,0x1
c000f089:	eb 05                	jmp    c000f090 <ACPI::open(int, int, void*)+0x38c>
c000f08b:	90                   	nop
c000f08c:	b0 00                	mov    al,0x0
c000f08e:	66 90                	xchg   ax,ax
c000f090:	84 c0                	test   al,al
c000f092:	74 28                	je     c000f0bc <ACPI::open(int, int, void*)+0x3b8>
c000f094:	83 ec 08             	sub    esp,0x8
c000f097:	6a 01                	push   0x1
c000f099:	68 7d fe 01 c0       	push   0xc001fe7d
c000f09e:	e8 b3 4c 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	83 ec 08             	sub    esp,0x8
c000f0a9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0b0:	50                   	push   eax
c000f0b1:	e8 d1 4e 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c000f0b6:	83 c4 10             	add    esp,0x10
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0c4:	74 2a                	je     c000f0f0 <ACPI::open(int, int, void*)+0x3ec>
c000f0c6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0ce:	74 20                	je     c000f0f0 <ACPI::open(int, int, void*)+0x3ec>
c000f0d0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d9:	83 c0 08             	add    eax,0x8
c000f0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0de:	83 ec 0c             	sub    esp,0xc
c000f0e1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0e8:	ff d0                	call   eax
c000f0ea:	83 c4 10             	add    esp,0x10
c000f0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f0:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f0f5:	83 ec 08             	sub    esp,0x8
c000f0f8:	68 9a fe 01 c0       	push   0xc001fe9a
c000f0fd:	50                   	push   eax
c000f0fe:	e8 31 f2 ff ff       	call   c000e334 <findDataTable(unsigned char*, char*)>
c000f103:	83 c4 10             	add    esp,0x10
c000f106:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f10d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f115:	74 19                	je     c000f130 <ACPI::open(int, int, void*)+0x42c>
c000f117:	83 ec 08             	sub    esp,0x8
c000f11a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f121:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f128:	e8 67 fb ff ff       	call   c000ec94 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f12d:	83 c4 10             	add    esp,0x10
c000f130:	b8 00 00 00 00       	mov    eax,0x0
c000f135:	81 c4 70 01 00 00    	add    esp,0x170
c000f13b:	5b                   	pop    ebx
c000f13c:	5e                   	pop    esi
c000f13d:	5f                   	pop    edi
c000f13e:	c3                   	ret    
c000f13f:	90                   	nop

c000f140 <CPU::close(int, int, void*)>:
c000f140:	31 c0                	xor    eax,eax
c000f142:	c3                   	ret    
c000f143:	90                   	nop

c000f144 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f144:	60                   	pusha  
c000f145:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f151:	9c                   	pushf  
c000f152:	fa                   	cli    
c000f153:	0f 09                	wbinvd 
c000f155:	0f 30                	wrmsr  
c000f157:	9d                   	popf   
c000f158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f15c:	89 02                	mov    DWORD PTR [edx],eax
c000f15e:	61                   	popa   
c000f15f:	c3                   	ret    

c000f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f160:	60                   	pusha  
c000f161:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f165:	9c                   	pushf  
c000f166:	fa                   	cli    
c000f167:	0f 09                	wbinvd 
c000f169:	31 c0                	xor    eax,eax
c000f16b:	31 d2                	xor    edx,edx
c000f16d:	0f 32                	rdmsr  
c000f16f:	9d                   	popf   
c000f170:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f174:	89 02                	mov    DWORD PTR [edx],eax
c000f176:	61                   	popa   
c000f177:	c3                   	ret    

c000f178 <CPU::AMD_K6_writeback(int, int, int)>:
c000f178:	56                   	push   esi
c000f179:	53                   	push   ebx
c000f17a:	83 ec 10             	sub    esp,0x10
c000f17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f181:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f186:	75 5d                	jne    c000f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f188:	83 f8 08             	cmp    eax,0x8
c000f18b:	75 09                	jne    c000f196 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f18d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f192:	7e 13                	jle    c000f1a7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f194:	eb 30                	jmp    c000f1c6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f196:	83 f8 06             	cmp    eax,0x6
c000f199:	7c 4a                	jl     c000f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f19b:	83 f8 07             	cmp    eax,0x7
c000f19e:	7e 07                	jle    c000f1a7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1a0:	83 f8 09             	cmp    eax,0x9
c000f1a3:	74 21                	je     c000f1c6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1a5:	eb 3e                	jmp    c000f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1a7:	89 e6                	mov    esi,esp
c000f1a9:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1af:	56                   	push   esi
c000f1b0:	c1 eb 15             	shr    ebx,0x15
c000f1b3:	68 82 00 00 c0       	push   0xc0000082
c000f1b8:	83 e3 7e             	and    ebx,0x7e
c000f1bb:	e8 a0 ff ff ff       	call   c000f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1c0:	56                   	push   esi
c000f1c1:	6a 00                	push   0x0
c000f1c3:	53                   	push   ebx
c000f1c4:	eb 12                	jmp    c000f1d8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1c6:	89 e3                	mov    ebx,esp
c000f1c8:	53                   	push   ebx
c000f1c9:	68 82 00 00 c0       	push   0xc0000082
c000f1ce:	e8 8d ff ff ff       	call   c000f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1d3:	53                   	push   ebx
c000f1d4:	6a 00                	push   0x0
c000f1d6:	6a 00                	push   0x0
c000f1d8:	68 82 00 00 c0       	push   0xc0000082
c000f1dd:	e8 62 ff ff ff       	call   c000f144 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1e2:	83 c4 18             	add    esp,0x18
c000f1e5:	83 c4 10             	add    esp,0x10
c000f1e8:	5b                   	pop    ebx
c000f1e9:	5e                   	pop    esi
c000f1ea:	c3                   	ret    
c000f1eb:	90                   	nop

c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f1ec:	55                   	push   ebp
c000f1ed:	57                   	push   edi
c000f1ee:	56                   	push   esi
c000f1ef:	53                   	push   ebx
c000f1f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f1f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f1fc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f200:	39 05 d0 12 02 c0    	cmp    DWORD PTR ds:0xc00212d0,eax
c000f206:	75 23                	jne    c000f22b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f208:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f20d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f211:	89 06                	mov    DWORD PTR [esi],eax
c000f213:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f218:	89 07                	mov    DWORD PTR [edi],eax
c000f21a:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f21f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f222:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f227:	89 02                	mov    DWORD PTR [edx],eax
c000f229:	eb 3f                	jmp    c000f26a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f22b:	31 c9                	xor    ecx,ecx
c000f22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f231:	0f a2                	cpuid  
c000f233:	89 06                	mov    DWORD PTR [esi],eax
c000f235:	89 1f                	mov    DWORD PTR [edi],ebx
c000f237:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f23b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f23e:	89 10                	mov    DWORD PTR [eax],edx
c000f240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f244:	a3 d0 12 02 c0       	mov    ds:0xc00212d0,eax
c000f249:	8b 06                	mov    eax,DWORD PTR [esi]
c000f24b:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f250:	8b 07                	mov    eax,DWORD PTR [edi]
c000f252:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f257:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f25a:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f25f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f263:	8b 00                	mov    eax,DWORD PTR [eax]
c000f265:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f26a:	5b                   	pop    ebx
c000f26b:	5e                   	pop    esi
c000f26c:	5f                   	pop    edi
c000f26d:	5d                   	pop    ebp
c000f26e:	c3                   	ret    
c000f26f:	90                   	nop

c000f270 <CPU::cpuidCheckEDX(unsigned int)>:
c000f270:	83 ec 10             	sub    esp,0x10
c000f273:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f277:	50                   	push   eax
c000f278:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f27c:	50                   	push   eax
c000f27d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f281:	50                   	push   eax
c000f282:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f286:	50                   	push   eax
c000f287:	6a 01                	push   0x1
c000f289:	e8 5e ff ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f28e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f292:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f296:	0f 95 c0             	setne  al
c000f299:	83 c4 24             	add    esp,0x24
c000f29c:	c3                   	ret    
c000f29d:	90                   	nop

c000f29e <CPU::cpuidCheckECX(unsigned int)>:
c000f29e:	83 ec 10             	sub    esp,0x10
c000f2a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2a5:	50                   	push   eax
c000f2a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2aa:	50                   	push   eax
c000f2ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2af:	50                   	push   eax
c000f2b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b4:	50                   	push   eax
c000f2b5:	6a 01                	push   0x1
c000f2b7:	e8 30 ff ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2c4:	0f 95 c0             	setne  al
c000f2c7:	83 c4 24             	add    esp,0x24
c000f2ca:	c3                   	ret    
c000f2cb:	90                   	nop

c000f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2cc:	83 ec 10             	sub    esp,0x10
c000f2cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d3:	50                   	push   eax
c000f2d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d8:	50                   	push   eax
c000f2d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2dd:	50                   	push   eax
c000f2de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e2:	50                   	push   eax
c000f2e3:	6a 07                	push   0x7
c000f2e5:	e8 02 ff ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ee:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f2f2:	0f 95 c0             	setne  al
c000f2f5:	83 c4 24             	add    esp,0x24
c000f2f8:	c3                   	ret    
c000f2f9:	90                   	nop

c000f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f2fa:	83 ec 10             	sub    esp,0x10
c000f2fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f301:	50                   	push   eax
c000f302:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f306:	50                   	push   eax
c000f307:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f30b:	50                   	push   eax
c000f30c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f310:	50                   	push   eax
c000f311:	6a 07                	push   0x7
c000f313:	e8 d4 fe ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f320:	0f 95 c0             	setne  al
c000f323:	83 c4 24             	add    esp,0x24
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <CPU::CPU()>:
c000f328:	83 ec 0c             	sub    esp,0xc
c000f32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32f:	83 ec 08             	sub    esp,0x8
c000f332:	68 bd ff 01 c0       	push   0xc001ffbd
c000f337:	50                   	push   eax
c000f338:	e8 93 c8 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000f33d:	83 c4 10             	add    esp,0x10
c000f340:	ba 44 00 02 c0       	mov    edx,0xc0020044
c000f345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f349:	89 10                	mov    DWORD PTR [eax],edx
c000f34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35d:	05 78 01 00 00       	add    eax,0x178
c000f362:	83 ec 0c             	sub    esp,0xc
c000f365:	50                   	push   eax
c000f366:	e8 b9 7d ff ff       	call   c0007124 <GDT::GDT()>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f372:	05 7c 09 00 00       	add    eax,0x97c
c000f377:	83 ec 0c             	sub    esp,0xc
c000f37a:	50                   	push   eax
c000f37b:	e8 e0 7f ff ff       	call   c0007360 <IDT::IDT()>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f387:	05 7c 11 00 00       	add    eax,0x117c
c000f38c:	83 ec 0c             	sub    esp,0xc
c000f38f:	50                   	push   eax
c000f390:	e8 eb 98 ff ff       	call   c0008c80 <TSS::TSS()>
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3b1:	90                   	nop
c000f3b2:	83 c4 0c             	add    esp,0xc
c000f3b5:	c3                   	ret    

c000f3b6 <CPU::displayFeatures()>:
c000f3b6:	c3                   	ret    
c000f3b7:	90                   	nop

c000f3b8 <CPU::detectFeatures()>:
c000f3b8:	55                   	push   ebp
c000f3b9:	57                   	push   edi
c000f3ba:	56                   	push   esi
c000f3bb:	53                   	push   ebx
c000f3bc:	83 ec 30             	sub    esp,0x30
c000f3bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3c3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3cd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3d4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3da:	6a 0d                	push   0xd
c000f3dc:	6a 00                	push   0x0
c000f3de:	55                   	push   ebp
c000f3df:	e8 dc 10 ff ff       	call   c00004c0 <memset>
c000f3e4:	83 c4 10             	add    esp,0x10
c000f3e7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f3ec:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f3f3:	0f 84 d5 05 00 00    	je     c000f9ce <CPU::detectFeatures()+0x616>
c000f3f9:	83 ec 0c             	sub    esp,0xc
c000f3fc:	89 ef                	mov    edi,ebp
c000f3fe:	6a 10                	push   0x10
c000f400:	e8 6b fe ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f405:	83 e0 01             	and    eax,0x1
c000f408:	8d 14 00             	lea    edx,[eax+eax*1]
c000f40b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f411:	83 e0 fd             	and    eax,0xfffffffd
c000f414:	09 d0                	or     eax,edx
c000f416:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f41c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f423:	e8 48 fe ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f428:	83 e0 01             	and    eax,0x1
c000f42b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f432:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f438:	83 e0 fb             	and    eax,0xfffffffb
c000f43b:	09 d0                	or     eax,edx
c000f43d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f443:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f44a:	e8 21 fe ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f44f:	83 e0 01             	and    eax,0x1
c000f452:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f459:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f45f:	83 e0 f7             	and    eax,0xfffffff7
c000f462:	09 d0                	or     eax,edx
c000f464:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f46a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f471:	e8 fa fd ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f476:	83 e0 01             	and    eax,0x1
c000f479:	c1 e0 04             	shl    eax,0x4
c000f47c:	88 c2                	mov    dl,al
c000f47e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f484:	83 e0 ef             	and    eax,0xffffffef
c000f487:	09 d0                	or     eax,edx
c000f489:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f48f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f496:	e8 d5 fd ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f49b:	83 e0 01             	and    eax,0x1
c000f49e:	c1 e0 05             	shl    eax,0x5
c000f4a1:	88 c2                	mov    dl,al
c000f4a3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4a9:	83 e0 df             	and    eax,0xffffffdf
c000f4ac:	09 d0                	or     eax,edx
c000f4ae:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4bb:	e8 b0 fd ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f4c0:	83 e0 01             	and    eax,0x1
c000f4c3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4c6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4cc:	83 e0 fd             	and    eax,0xfffffffd
c000f4cf:	09 d0                	or     eax,edx
c000f4d1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4d7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4de:	e8 8d fd ff ff       	call   c000f270 <CPU::cpuidCheckEDX(unsigned int)>
c000f4e3:	83 e0 01             	and    eax,0x1
c000f4e6:	c1 e0 06             	shl    eax,0x6
c000f4e9:	88 c2                	mov    dl,al
c000f4eb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4f1:	83 e0 bf             	and    eax,0xffffffbf
c000f4f4:	09 d0                	or     eax,edx
c000f4f6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f4fc:	58                   	pop    eax
c000f4fd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f501:	50                   	push   eax
c000f502:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f506:	50                   	push   eax
c000f507:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f50b:	56                   	push   esi
c000f50c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f510:	50                   	push   eax
c000f511:	6a 00                	push   0x0
c000f513:	e8 d4 fc ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f518:	b8 04 00 00 00       	mov    eax,0x4
c000f51d:	89 c1                	mov    ecx,eax
c000f51f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f521:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f527:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f52b:	89 c1                	mov    ecx,eax
c000f52d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f52f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f535:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f539:	89 c1                	mov    ecx,eax
c000f53b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f53d:	83 c4 18             	add    esp,0x18
c000f540:	68 cc fe 01 c0       	push   0xc001fecc
c000f545:	55                   	push   ebp
c000f546:	e8 85 11 ff ff       	call   c00006d0 <strcmp>
c000f54b:	83 c4 10             	add    esp,0x10
c000f54e:	85 c0                	test   eax,eax
c000f550:	75 0f                	jne    c000f561 <CPU::detectFeatures()+0x1a9>
c000f552:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f55c:	e9 22 02 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f561:	50                   	push   eax
c000f562:	50                   	push   eax
c000f563:	68 d9 fe 01 c0       	push   0xc001fed9
c000f568:	55                   	push   ebp
c000f569:	e8 62 11 ff ff       	call   c00006d0 <strcmp>
c000f56e:	83 c4 10             	add    esp,0x10
c000f571:	85 c0                	test   eax,eax
c000f573:	74 dd                	je     c000f552 <CPU::detectFeatures()+0x19a>
c000f575:	50                   	push   eax
c000f576:	50                   	push   eax
c000f577:	68 e6 fe 01 c0       	push   0xc001fee6
c000f57c:	55                   	push   ebp
c000f57d:	e8 4e 11 ff ff       	call   c00006d0 <strcmp>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	85 c0                	test   eax,eax
c000f587:	74 2a                	je     c000f5b3 <CPU::detectFeatures()+0x1fb>
c000f589:	50                   	push   eax
c000f58a:	50                   	push   eax
c000f58b:	68 f3 fe 01 c0       	push   0xc001fef3
c000f590:	55                   	push   ebp
c000f591:	e8 3a 11 ff ff       	call   c00006d0 <strcmp>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	85 c0                	test   eax,eax
c000f59b:	74 16                	je     c000f5b3 <CPU::detectFeatures()+0x1fb>
c000f59d:	50                   	push   eax
c000f59e:	50                   	push   eax
c000f59f:	68 00 ff 01 c0       	push   0xc001ff00
c000f5a4:	55                   	push   ebp
c000f5a5:	e8 26 11 ff ff       	call   c00006d0 <strcmp>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	85 c0                	test   eax,eax
c000f5af:	74 48                	je     c000f5f9 <CPU::detectFeatures()+0x241>
c000f5b1:	eb 0f                	jmp    c000f5c2 <CPU::detectFeatures()+0x20a>
c000f5b3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5bd:	e9 c1 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f5c2:	50                   	push   eax
c000f5c3:	50                   	push   eax
c000f5c4:	68 0d ff 01 c0       	push   0xc001ff0d
c000f5c9:	55                   	push   ebp
c000f5ca:	e8 01 11 ff ff       	call   c00006d0 <strcmp>
c000f5cf:	83 c4 10             	add    esp,0x10
c000f5d2:	85 c0                	test   eax,eax
c000f5d4:	74 23                	je     c000f5f9 <CPU::detectFeatures()+0x241>
c000f5d6:	57                   	push   edi
c000f5d7:	57                   	push   edi
c000f5d8:	68 1a ff 01 c0       	push   0xc001ff1a
c000f5dd:	55                   	push   ebp
c000f5de:	e8 ed 10 ff ff       	call   c00006d0 <strcmp>
c000f5e3:	83 c4 10             	add    esp,0x10
c000f5e6:	85 c0                	test   eax,eax
c000f5e8:	75 1e                	jne    c000f608 <CPU::detectFeatures()+0x250>
c000f5ea:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f5f4:	e9 8a 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f5f9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f603:	e9 7b 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f608:	56                   	push   esi
c000f609:	56                   	push   esi
c000f60a:	68 27 ff 01 c0       	push   0xc001ff27
c000f60f:	55                   	push   ebp
c000f610:	e8 bb 10 ff ff       	call   c00006d0 <strcmp>
c000f615:	83 c4 10             	add    esp,0x10
c000f618:	85 c0                	test   eax,eax
c000f61a:	75 0f                	jne    c000f62b <CPU::detectFeatures()+0x273>
c000f61c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f626:	e9 58 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f62b:	51                   	push   ecx
c000f62c:	51                   	push   ecx
c000f62d:	68 e6 fe 01 c0       	push   0xc001fee6
c000f632:	55                   	push   ebp
c000f633:	e8 98 10 ff ff       	call   c00006d0 <strcmp>
c000f638:	83 c4 10             	add    esp,0x10
c000f63b:	85 c0                	test   eax,eax
c000f63d:	75 0f                	jne    c000f64e <CPU::detectFeatures()+0x296>
c000f63f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f649:	e9 35 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f64e:	52                   	push   edx
c000f64f:	52                   	push   edx
c000f650:	68 34 ff 01 c0       	push   0xc001ff34
c000f655:	55                   	push   ebp
c000f656:	e8 75 10 ff ff       	call   c00006d0 <strcmp>
c000f65b:	83 c4 10             	add    esp,0x10
c000f65e:	85 c0                	test   eax,eax
c000f660:	75 0f                	jne    c000f671 <CPU::detectFeatures()+0x2b9>
c000f662:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f66c:	e9 12 01 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f671:	50                   	push   eax
c000f672:	50                   	push   eax
c000f673:	68 41 ff 01 c0       	push   0xc001ff41
c000f678:	55                   	push   ebp
c000f679:	e8 52 10 ff ff       	call   c00006d0 <strcmp>
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	85 c0                	test   eax,eax
c000f683:	75 0f                	jne    c000f694 <CPU::detectFeatures()+0x2dc>
c000f685:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f68f:	e9 ef 00 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f694:	50                   	push   eax
c000f695:	50                   	push   eax
c000f696:	68 4e ff 01 c0       	push   0xc001ff4e
c000f69b:	55                   	push   ebp
c000f69c:	e8 2f 10 ff ff       	call   c00006d0 <strcmp>
c000f6a1:	83 c4 10             	add    esp,0x10
c000f6a4:	85 c0                	test   eax,eax
c000f6a6:	75 0f                	jne    c000f6b7 <CPU::detectFeatures()+0x2ff>
c000f6a8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6b2:	e9 cc 00 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f6b7:	50                   	push   eax
c000f6b8:	50                   	push   eax
c000f6b9:	68 5b ff 01 c0       	push   0xc001ff5b
c000f6be:	55                   	push   ebp
c000f6bf:	e8 0c 10 ff ff       	call   c00006d0 <strcmp>
c000f6c4:	83 c4 10             	add    esp,0x10
c000f6c7:	85 c0                	test   eax,eax
c000f6c9:	75 0f                	jne    c000f6da <CPU::detectFeatures()+0x322>
c000f6cb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6d5:	e9 a9 00 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f6da:	50                   	push   eax
c000f6db:	50                   	push   eax
c000f6dc:	68 68 ff 01 c0       	push   0xc001ff68
c000f6e1:	55                   	push   ebp
c000f6e2:	e8 e9 0f ff ff       	call   c00006d0 <strcmp>
c000f6e7:	83 c4 10             	add    esp,0x10
c000f6ea:	85 c0                	test   eax,eax
c000f6ec:	75 0f                	jne    c000f6fd <CPU::detectFeatures()+0x345>
c000f6ee:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f6f8:	e9 86 00 00 00       	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f6fd:	50                   	push   eax
c000f6fe:	50                   	push   eax
c000f6ff:	68 75 ff 01 c0       	push   0xc001ff75
c000f704:	55                   	push   ebp
c000f705:	e8 c6 0f ff ff       	call   c00006d0 <strcmp>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	85 c0                	test   eax,eax
c000f70f:	75 0c                	jne    c000f71d <CPU::detectFeatures()+0x365>
c000f711:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f71b:	eb 66                	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f71d:	50                   	push   eax
c000f71e:	50                   	push   eax
c000f71f:	68 82 ff 01 c0       	push   0xc001ff82
c000f724:	55                   	push   ebp
c000f725:	e8 a6 0f ff ff       	call   c00006d0 <strcmp>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 0c                	jne    c000f73d <CPU::detectFeatures()+0x385>
c000f731:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f73b:	eb 46                	jmp    c000f783 <CPU::detectFeatures()+0x3cb>
c000f73d:	57                   	push   edi
c000f73e:	57                   	push   edi
c000f73f:	68 8f ff 01 c0       	push   0xc001ff8f
c000f744:	55                   	push   ebp
c000f745:	e8 86 0f ff ff       	call   c00006d0 <strcmp>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	85 c0                	test   eax,eax
c000f74f:	74 e0                	je     c000f731 <CPU::detectFeatures()+0x379>
c000f751:	56                   	push   esi
c000f752:	56                   	push   esi
c000f753:	68 9c ff 01 c0       	push   0xc001ff9c
c000f758:	55                   	push   ebp
c000f759:	e8 72 0f ff ff       	call   c00006d0 <strcmp>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	85 c0                	test   eax,eax
c000f763:	74 cc                	je     c000f731 <CPU::detectFeatures()+0x379>
c000f765:	51                   	push   ecx
c000f766:	51                   	push   ecx
c000f767:	68 a9 ff 01 c0       	push   0xc001ffa9
c000f76c:	55                   	push   ebp
c000f76d:	e8 5e 0f ff ff       	call   c00006d0 <strcmp>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	85 c0                	test   eax,eax
c000f777:	74 b8                	je     c000f731 <CPU::detectFeatures()+0x379>
c000f779:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f783:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f788:	0f 86 be 00 00 00    	jbe    c000f84c <CPU::detectFeatures()+0x494>
c000f78e:	83 ec 0c             	sub    esp,0xc
c000f791:	68 80 00 00 00       	push   0x80
c000f796:	e8 31 fb ff ff       	call   c000f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f79b:	83 e0 01             	and    eax,0x1
c000f79e:	c1 e0 06             	shl    eax,0x6
c000f7a1:	88 c2                	mov    dl,al
c000f7a3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7a9:	83 e0 bf             	and    eax,0xffffffbf
c000f7ac:	09 d0                	or     eax,edx
c000f7ae:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7b4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7bb:	e8 0c fb ff ff       	call   c000f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7c0:	83 e0 01             	and    eax,0x1
c000f7c3:	c1 e0 04             	shl    eax,0x4
c000f7c6:	88 c2                	mov    dl,al
c000f7c8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7ce:	83 e0 ef             	and    eax,0xffffffef
c000f7d1:	09 d0                	or     eax,edx
c000f7d3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7d9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7e0:	e8 e7 fa ff ff       	call   c000f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7e5:	c1 e0 07             	shl    eax,0x7
c000f7e8:	88 c2                	mov    dl,al
c000f7ea:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7f0:	83 e0 7f             	and    eax,0x7f
c000f7f3:	09 d0                	or     eax,edx
c000f7f5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f802:	e8 f3 fa ff ff       	call   c000f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f807:	83 e0 01             	and    eax,0x1
c000f80a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f811:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f817:	83 e0 f7             	and    eax,0xfffffff7
c000f81a:	09 d0                	or     eax,edx
c000f81c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f822:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f829:	e8 cc fa ff ff       	call   c000f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	83 e0 01             	and    eax,0x1
c000f834:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f83b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f841:	83 e0 fb             	and    eax,0xfffffffb
c000f844:	09 d0                	or     eax,edx
c000f846:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f84c:	83 ec 0c             	sub    esp,0xc
c000f84f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f853:	50                   	push   eax
c000f854:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f858:	50                   	push   eax
c000f859:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f85d:	56                   	push   esi
c000f85e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f862:	50                   	push   eax
c000f863:	6a 01                	push   0x1
c000f865:	e8 82 f9 ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f86a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f86e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f874:	88 ca                	mov    dl,cl
c000f876:	83 e0 f0             	and    eax,0xfffffff0
c000f879:	83 e2 0f             	and    edx,0xf
c000f87c:	09 d0                	or     eax,edx
c000f87e:	88 ca                	mov    dl,cl
c000f880:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f886:	c0 ea 04             	shr    dl,0x4
c000f889:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f88d:	0f b6 c2             	movzx  eax,dl
c000f890:	83 c4 20             	add    esp,0x20
c000f893:	c1 e0 06             	shl    eax,0x6
c000f896:	89 c7                	mov    edi,eax
c000f898:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f89e:	66 25 3f c0          	and    ax,0xc03f
c000f8a2:	09 f8                	or     eax,edi
c000f8a4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8ab:	89 c8                	mov    eax,ecx
c000f8ad:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8b4:	c1 e8 08             	shr    eax,0x8
c000f8b7:	83 e5 3f             	and    ebp,0x3f
c000f8ba:	83 e0 0f             	and    eax,0xf
c000f8bd:	89 c7                	mov    edi,eax
c000f8bf:	c1 e7 06             	shl    edi,0x6
c000f8c2:	09 ef                	or     edi,ebp
c000f8c4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8cb:	89 fa                	mov    edx,edi
c000f8cd:	83 e5 c0             	and    ebp,0xffffffc0
c000f8d0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8d6:	88 c2                	mov    dl,al
c000f8d8:	c0 ea 02             	shr    dl,0x2
c000f8db:	89 d7                	mov    edi,edx
c000f8dd:	09 ef                	or     edi,ebp
c000f8df:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8e5:	89 fa                	mov    edx,edi
c000f8e7:	83 e5 cf             	and    ebp,0xffffffcf
c000f8ea:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f8f0:	89 cf                	mov    edi,ecx
c000f8f2:	c1 ef 0c             	shr    edi,0xc
c000f8f5:	83 e7 03             	and    edi,0x3
c000f8f8:	c1 e7 04             	shl    edi,0x4
c000f8fb:	09 ef                	or     edi,ebp
c000f8fd:	3c 06                	cmp    al,0x6
c000f8ff:	89 fa                	mov    edx,edi
c000f901:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f907:	74 04                	je     c000f90d <CPU::detectFeatures()+0x555>
c000f909:	3c 0f                	cmp    al,0xf
c000f90b:	75 5c                	jne    c000f969 <CPU::detectFeatures()+0x5b1>
c000f90d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f911:	89 cf                	mov    edi,ecx
c000f913:	c1 ef 10             	shr    edi,0x10
c000f916:	c1 e7 04             	shl    edi,0x4
c000f919:	09 fa                	or     edx,edi
c000f91b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f921:	0f b6 d2             	movzx  edx,dl
c000f924:	66 81 e7 3f c0       	and    di,0xc03f
c000f929:	c1 e2 06             	shl    edx,0x6
c000f92c:	09 fa                	or     edx,edi
c000f92e:	3c 0f                	cmp    al,0xf
c000f930:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f937:	75 30                	jne    c000f969 <CPU::detectFeatures()+0x5b1>
c000f939:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f93f:	c1 e9 14             	shr    ecx,0x14
c000f942:	83 e0 3f             	and    eax,0x3f
c000f945:	83 c1 0f             	add    ecx,0xf
c000f948:	88 ca                	mov    dl,cl
c000f94a:	c0 e9 02             	shr    cl,0x2
c000f94d:	c1 e2 06             	shl    edx,0x6
c000f950:	09 d0                	or     eax,edx
c000f952:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f958:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f95e:	83 e0 c0             	and    eax,0xffffffc0
c000f961:	09 c1                	or     ecx,eax
c000f963:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f969:	83 ec 0c             	sub    esp,0xc
c000f96c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f973:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f977:	50                   	push   eax
c000f978:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f97c:	55                   	push   ebp
c000f97d:	56                   	push   esi
c000f97e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f982:	57                   	push   edi
c000f983:	68 00 00 00 80       	push   0x80000000
c000f988:	e8 5f f8 ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f98d:	83 c4 20             	add    esp,0x20
c000f990:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f998:	76 22                	jbe    c000f9bc <CPU::detectFeatures()+0x604>
c000f99a:	83 ec 0c             	sub    esp,0xc
c000f99d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a1:	50                   	push   eax
c000f9a2:	55                   	push   ebp
c000f9a3:	56                   	push   esi
c000f9a4:	57                   	push   edi
c000f9a5:	68 01 00 00 80       	push   0x80000001
c000f9aa:	e8 3d f8 ff ff       	call   c000f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9af:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9b9:	83 c4 20             	add    esp,0x20
c000f9bc:	52                   	push   edx
c000f9bd:	52                   	push   edx
c000f9be:	68 b5 ff 01 c0       	push   0xc001ffb5
c000f9c3:	53                   	push   ebx
c000f9c4:	e8 f9 c1 ff ff       	call   c000bbc2 <Device::setName(char const*)>
c000f9c9:	83 c4 10             	add    esp,0x10
c000f9cc:	eb 67                	jmp    c000fa35 <CPU::detectFeatures()+0x67d>
c000f9ce:	50                   	push   eax
c000f9cf:	50                   	push   eax
c000f9d0:	68 1a ff 01 c0       	push   0xc001ff1a
c000f9d5:	55                   	push   ebp
c000f9d6:	e8 15 0c ff ff       	call   c00005f0 <strcpy>
c000f9db:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9e5:	e8 d9 07 ff ff       	call   c00001c3 <is486>
c000f9ea:	83 c4 10             	add    esp,0x10
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9f5:	74 1d                	je     c000fa14 <CPU::detectFeatures()+0x65c>
c000f9f7:	83 c8 07             	or     eax,0x7
c000f9fa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa00:	0f 20 c0             	mov    eax,cr0
c000fa03:	83 e0 14             	and    eax,0x14
c000fa06:	83 f8 04             	cmp    eax,0x4
c000fa09:	75 0e                	jne    c000fa19 <CPU::detectFeatures()+0x661>
c000fa0b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa12:	eb 21                	jmp    c000fa35 <CPU::detectFeatures()+0x67d>
c000fa14:	83 e0 f8             	and    eax,0xfffffff8
c000fa17:	eb e1                	jmp    c000f9fa <CPU::detectFeatures()+0x642>
c000fa19:	e8 80 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa1e:	83 e0 01             	and    eax,0x1
c000fa21:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa24:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa2a:	83 e0 fd             	and    eax,0xfffffffd
c000fa2d:	09 d0                	or     eax,edx
c000fa2f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa35:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa3c:	74 0e                	je     c000fa4c <CPU::detectFeatures()+0x694>
c000fa3e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa43:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa4a:	eb 20                	jmp    c000fa6c <CPU::detectFeatures()+0x6b4>
c000fa4c:	e8 4d 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa51:	83 e0 01             	and    eax,0x1
c000fa54:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa57:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa5d:	83 e0 fd             	and    eax,0xfffffffd
c000fa60:	09 d0                	or     eax,edx
c000fa62:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa68:	a8 02                	test   al,0x2
c000fa6a:	75 d2                	jne    c000fa3e <CPU::detectFeatures()+0x686>
c000fa6c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa73:	83 c4 2c             	add    esp,0x2c
c000fa76:	5b                   	pop    ebx
c000fa77:	5e                   	pop    esi
c000fa78:	5f                   	pop    edi
c000fa79:	5d                   	pop    ebp
c000fa7a:	c3                   	ret    
c000fa7b:	90                   	nop

c000fa7c <CPU::setupSMEP()>:
c000fa7c:	0f 20 e0             	mov    eax,cr4
c000fa7f:	0d 00 00 10 00       	or     eax,0x100000
c000fa84:	0f 22 e0             	mov    cr4,eax
c000fa87:	c3                   	ret    

c000fa88 <CPU::setupUMIP()>:
c000fa88:	0f 20 e0             	mov    eax,cr4
c000fa8b:	80 cc 08             	or     ah,0x8
c000fa8e:	0f 22 e0             	mov    cr4,eax
c000fa91:	c3                   	ret    

c000fa92 <CPU::setupTSC()>:
c000fa92:	0f 20 e0             	mov    eax,cr4
c000fa95:	83 c8 04             	or     eax,0x4
c000fa98:	0f 22 e0             	mov    cr4,eax
c000fa9b:	c3                   	ret    

c000fa9c <CPU::setupLargePages()>:
c000fa9c:	0f 20 e0             	mov    eax,cr4
c000fa9f:	83 c8 10             	or     eax,0x10
c000faa2:	0f 22 e0             	mov    cr4,eax
c000faa5:	c3                   	ret    

c000faa6 <CPU::setupPAT()>:
c000faa6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000faab:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fab2:	74 2c                	je     c000fae0 <CPU::setupPAT()+0x3a>
c000fab4:	53                   	push   ebx
c000fab5:	83 ec 10             	sub    esp,0x10
c000fab8:	68 77 02 00 00       	push   0x277
c000fabd:	50                   	push   eax
c000fabe:	e8 d9 73 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c000fac3:	83 e2 f8             	and    edx,0xfffffff8
c000fac6:	83 ca 01             	or     edx,0x1
c000fac9:	52                   	push   edx
c000faca:	50                   	push   eax
c000facb:	68 77 02 00 00       	push   0x277
c000fad0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fad6:	e8 ed 73 ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fadb:	83 c4 28             	add    esp,0x28
c000fade:	5b                   	pop    ebx
c000fadf:	c3                   	ret    
c000fae0:	c3                   	ret    
c000fae1:	90                   	nop

c000fae2 <CPU::setupMTRR()>:
c000fae2:	c3                   	ret    
c000fae3:	90                   	nop

c000fae4 <CPU::setupGlobalPages()>:
c000fae4:	0f 20 e0             	mov    eax,cr4
c000fae7:	0c 80                	or     al,0x80
c000fae9:	0f 22 e0             	mov    cr4,eax
c000faec:	c3                   	ret    
c000faed:	90                   	nop

c000faee <CPU::allowUsermodeDataAccess()>:
c000faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000faf2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000faf9:	74 03                	je     c000fafe <CPU::allowUsermodeDataAccess()+0x10>
c000fafb:	0f 01 cb             	stac   
c000fafe:	c3                   	ret    
c000faff:	90                   	nop

c000fb00 <CPU::prohibitUsermodeDataAccess()>:
c000fb00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb04:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb0b:	74 03                	je     c000fb10 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb0d:	0f 01 ca             	clac   
c000fb10:	c3                   	ret    
c000fb11:	90                   	nop

c000fb12 <CPU::setupSMAP()>:
c000fb12:	0f 20 e0             	mov    eax,cr4
c000fb15:	0d 00 00 20 00       	or     eax,0x200000
c000fb1a:	0f 22 e0             	mov    cr4,eax
c000fb1d:	eb e1                	jmp    c000fb00 <CPU::prohibitUsermodeDataAccess()>
c000fb1f:	90                   	nop

c000fb20 <CPU::setupFeatures()>:
c000fb20:	53                   	push   ebx
c000fb21:	83 ec 08             	sub    esp,0x8
c000fb24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb28:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb2f:	74 18                	je     c000fb49 <CPU::setupFeatures()+0x29>
c000fb31:	83 ec 0c             	sub    esp,0xc
c000fb34:	68 c1 ff 01 c0       	push   0xc001ffc1
c000fb39:	e8 bc aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb41:	e8 42 ff ff ff       	call   c000fa88 <CPU::setupUMIP()>
c000fb46:	83 c4 10             	add    esp,0x10
c000fb49:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb50:	74 18                	je     c000fb6a <CPU::setupFeatures()+0x4a>
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	68 cb ff 01 c0       	push   0xc001ffcb
c000fb5a:	e8 9b aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb62:	e8 2b ff ff ff       	call   c000fa92 <CPU::setupTSC()>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb71:	74 18                	je     c000fb8b <CPU::setupFeatures()+0x6b>
c000fb73:	83 ec 0c             	sub    esp,0xc
c000fb76:	68 d4 ff 01 c0       	push   0xc001ffd4
c000fb7b:	e8 7a aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb83:	e8 14 ff ff ff       	call   c000fa9c <CPU::setupLargePages()>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fb92:	74 18                	je     c000fbac <CPU::setupFeatures()+0x8c>
c000fb94:	83 ec 0c             	sub    esp,0xc
c000fb97:	68 dd ff 01 c0       	push   0xc001ffdd
c000fb9c:	e8 59 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba4:	e8 3b ff ff ff       	call   c000fae4 <CPU::setupGlobalPages()>
c000fba9:	83 c4 10             	add    esp,0x10
c000fbac:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbb3:	74 18                	je     c000fbcd <CPU::setupFeatures()+0xad>
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	68 ef ff 01 c0       	push   0xc001ffef
c000fbbd:	e8 38 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fbc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbc5:	e8 dc fe ff ff       	call   c000faa6 <CPU::setupPAT()>
c000fbca:	83 c4 10             	add    esp,0x10
c000fbcd:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbd4:	74 11                	je     c000fbe7 <CPU::setupFeatures()+0xc7>
c000fbd6:	c7 44 24 10 f8 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fff8
c000fbde:	83 c4 08             	add    esp,0x8
c000fbe1:	5b                   	pop    ebx
c000fbe2:	e9 13 aa ff ff       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000fbe7:	83 c4 08             	add    esp,0x8
c000fbea:	5b                   	pop    ebx
c000fbeb:	c3                   	ret    

c000fbec <CPU::open(int, int, void*)>:
c000fbec:	57                   	push   edi
c000fbed:	56                   	push   esi
c000fbee:	53                   	push   ebx
c000fbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fbf7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fbfd:	83 ec 0c             	sub    esp,0xc
c000fc00:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc06:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc0c:	50                   	push   eax
c000fc0d:	e8 74 75 ff ff       	call   c0007186 <GDT::setup()>
c000fc12:	83 c4 0c             	add    esp,0xc
c000fc15:	6a 00                	push   0x0
c000fc17:	68 ef be ad de       	push   0xdeadbeef
c000fc1c:	57                   	push   edi
c000fc1d:	e8 a2 90 ff ff       	call   c0008cc4 <TSS::setup(unsigned long, unsigned long)>
c000fc22:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc25:	e8 7a 90 ff ff       	call   c0008ca4 <TSS::flush()>
c000fc2a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc30:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc33:	e8 9e 77 ff ff       	call   c00073d6 <IDT::setup()>
c000fc38:	b8 00 04 00 00       	mov    eax,0x400
c000fc3d:	0f 23 f8             	mov    db7,eax
c000fc40:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc4a:	e8 f2 7e ff ff       	call   c0007b41 <Phys::allocatePage()>
c000fc4f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc55:	89 30                	mov    DWORD PTR [eax],esi
c000fc57:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc5d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc60:	58                   	pop    eax
c000fc61:	5a                   	pop    edx
c000fc62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc6c:	e8 6b a0 ff ff       	call   c0009cdc <VAS::setCPUSpecific(unsigned long)>
c000fc71:	c7 04 24 02 00 02 c0 	mov    DWORD PTR [esp],0xc0020002
c000fc78:	e8 c6 00 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000fc7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc80:	e8 33 f7 ff ff       	call   c000f3b8 <CPU::detectFeatures()>
c000fc85:	c7 04 24 25 00 02 c0 	mov    DWORD PTR [esp],0xc0020025
c000fc8c:	e8 b2 00 00 00       	call   c000fd43 <KeSetBootMessage(char const*)>
c000fc91:	e8 59 6a 00 00       	call   c00166ef <HalInitialise()>
c000fc96:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fc9b:	83 e0 10             	and    eax,0x10
c000fc9e:	83 f8 01             	cmp    eax,0x1
c000fca1:	19 c0                	sbb    eax,eax
c000fca3:	83 e0 46             	and    eax,0x46
c000fca6:	83 c0 1e             	add    eax,0x1e
c000fca9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcac:	e8 dc d6 ff ff       	call   c000d38d <setupTimer(int)>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcba:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fcc1:	74 0c                	je     c000fccf <CPU::open(int, int, void*)+0xe3>
c000fcc3:	83 ec 0c             	sub    esp,0xc
c000fcc6:	53                   	push   ebx
c000fcc7:	e8 54 fe ff ff       	call   c000fb20 <CPU::setupFeatures()>
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	5b                   	pop    ebx
c000fcd0:	31 c0                	xor    eax,eax
c000fcd2:	5e                   	pop    esi
c000fcd3:	5f                   	pop    edi
c000fcd4:	c3                   	ret    

c000fcd5 <KeDisplaySplashScreen()>:
c000fcd5:	55                   	push   ebp
c000fcd6:	bd 05 00 00 00       	mov    ebp,0x5
c000fcdb:	57                   	push   edi
c000fcdc:	bf e0 12 02 c0       	mov    edi,0xc00212e0
c000fce1:	56                   	push   esi
c000fce2:	be 0a 00 00 00       	mov    esi,0xa
c000fce7:	53                   	push   ebx
c000fce8:	31 db                	xor    ebx,ebx
c000fcea:	83 ec 0c             	sub    esp,0xc
c000fced:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fcf0:	84 c0                	test   al,al
c000fcf2:	74 47                	je     c000fd3b <KeDisplaySplashScreen()+0x66>
c000fcf4:	80 bb 16 13 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdecea],0xdb
c000fcfb:	75 13                	jne    c000fd10 <KeDisplaySplashScreen()+0x3b>
c000fcfd:	0f b6 93 15 13 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdeceb]
c000fd04:	83 e2 fe             	and    edx,0xfffffffe
c000fd07:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd0d:	75 01                	jne    c000fd10 <KeDisplaySplashScreen()+0x3b>
c000fd0f:	46                   	inc    esi
c000fd10:	3c 0d                	cmp    al,0xd
c000fd12:	74 24                	je     c000fd38 <KeDisplaySplashScreen()+0x63>
c000fd14:	3c 0a                	cmp    al,0xa
c000fd16:	75 0a                	jne    c000fd22 <KeDisplaySplashScreen()+0x4d>
c000fd18:	45                   	inc    ebp
c000fd19:	be 0a 00 00 00       	mov    esi,0xa
c000fd1e:	31 db                	xor    ebx,ebx
c000fd20:	eb 16                	jmp    c000fd38 <KeDisplaySplashScreen()+0x63>
c000fd22:	83 ec 0c             	sub    esp,0xc
c000fd25:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd28:	55                   	push   ebp
c000fd29:	43                   	inc    ebx
c000fd2a:	52                   	push   edx
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 0e                	push   0xe
c000fd2f:	50                   	push   eax
c000fd30:	e8 1f 76 00 00       	call   c0017354 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd35:	83 c4 20             	add    esp,0x20
c000fd38:	47                   	inc    edi
c000fd39:	eb b2                	jmp    c000fced <KeDisplaySplashScreen()+0x18>
c000fd3b:	83 c4 0c             	add    esp,0xc
c000fd3e:	5b                   	pop    ebx
c000fd3f:	5e                   	pop    esi
c000fd40:	5f                   	pop    edi
c000fd41:	5d                   	pop    ebp
c000fd42:	c3                   	ret    

c000fd43 <KeSetBootMessage(char const*)>:
c000fd43:	57                   	push   edi
c000fd44:	56                   	push   esi
c000fd45:	53                   	push   ebx
c000fd46:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd4c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd53:	68 9e 00 00 00       	push   0x9e
c000fd58:	6a 00                	push   0x0
c000fd5a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd5e:	56                   	push   esi
c000fd5f:	e8 5c 07 ff ff       	call   c00004c0 <memset>
c000fd64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd67:	e8 c4 07 ff ff       	call   c0000530 <strlen>
c000fd6c:	ba 50 00 00 00       	mov    edx,0x50
c000fd71:	83 c4 10             	add    esp,0x10
c000fd74:	29 c2                	sub    edx,eax
c000fd76:	31 c9                	xor    ecx,ecx
c000fd78:	83 e2 fe             	and    edx,0xfffffffe
c000fd7b:	01 f2                	add    edx,esi
c000fd7d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd82:	84 c0                	test   al,al
c000fd84:	74 0a                	je     c000fd90 <KeSetBootMessage(char const*)+0x4d>
c000fd86:	80 cc 0f             	or     ah,0xf
c000fd89:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fd8d:	41                   	inc    ecx
c000fd8e:	eb ed                	jmp    c000fd7d <KeSetBootMessage(char const*)+0x3a>
c000fd90:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fd95:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fd9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd9c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fda2:	5b                   	pop    ebx
c000fda3:	5e                   	pop    esi
c000fda4:	5f                   	pop    edi
c000fda5:	c3                   	ret    

c000fda6 <EnvVarContainer::getEnv(char const*)>:
c000fda6:	57                   	push   edi
c000fda7:	56                   	push   esi
c000fda8:	53                   	push   ebx
c000fda9:	31 db                	xor    ebx,ebx
c000fdab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdaf:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fdb1:	7e 2b                	jle    c000fdde <EnvVarContainer::getEnv(char const*)+0x38>
c000fdb3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fdba:	50                   	push   eax
c000fdbb:	50                   	push   eax
c000fdbc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdbf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fdc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fdc6:	e8 05 09 ff ff       	call   c00006d0 <strcmp>
c000fdcb:	83 c4 10             	add    esp,0x10
c000fdce:	85 c0                	test   eax,eax
c000fdd0:	75 09                	jne    c000fddb <EnvVarContainer::getEnv(char const*)+0x35>
c000fdd2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdd5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fdd9:	eb 05                	jmp    c000fde0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fddb:	43                   	inc    ebx
c000fddc:	eb d1                	jmp    c000fdaf <EnvVarContainer::getEnv(char const*)+0x9>
c000fdde:	31 c0                	xor    eax,eax
c000fde0:	5b                   	pop    ebx
c000fde1:	5e                   	pop    esi
c000fde2:	5f                   	pop    edi
c000fde3:	c3                   	ret    

c000fde4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fde4:	55                   	push   ebp
c000fde5:	57                   	push   edi
c000fde6:	56                   	push   esi
c000fde7:	53                   	push   ebx
c000fde8:	83 ec 28             	sub    esp,0x28
c000fdeb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fdef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fdf3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fdf7:	56                   	push   esi
c000fdf8:	e8 33 07 ff ff       	call   c0000530 <strlen>
c000fdfd:	40                   	inc    eax
c000fdfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe01:	e8 5f 7a ff ff       	call   c0007865 <malloc>
c000fe06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe0d:	e8 1e 07 ff ff       	call   c0000530 <strlen>
c000fe12:	40                   	inc    eax
c000fe13:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe16:	e8 4a 7a ff ff       	call   c0007865 <malloc>
c000fe1b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe22:	e8 09 07 ff ff       	call   c0000530 <strlen>
c000fe27:	83 c4 0c             	add    esp,0xc
c000fe2a:	40                   	inc    eax
c000fe2b:	50                   	push   eax
c000fe2c:	6a 00                	push   0x0
c000fe2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe32:	e8 89 06 ff ff       	call   c00004c0 <memset>
c000fe37:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe3a:	e8 f1 06 ff ff       	call   c0000530 <strlen>
c000fe3f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe43:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe4b:	89 de                	mov    esi,ebx
c000fe4d:	e8 de 06 ff ff       	call   c0000530 <strlen>
c000fe52:	83 c4 0c             	add    esp,0xc
c000fe55:	40                   	inc    eax
c000fe56:	50                   	push   eax
c000fe57:	6a 00                	push   0x0
c000fe59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe5d:	e8 5e 06 ff ff       	call   c00004c0 <memset>
c000fe62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe65:	e8 c6 06 ff ff       	call   c0000530 <strlen>
c000fe6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe6e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe76:	40                   	inc    eax
c000fe77:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe7a:	c1 e0 03             	shl    eax,0x3
c000fe7d:	5a                   	pop    edx
c000fe7e:	59                   	pop    ecx
c000fe7f:	50                   	push   eax
c000fe80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe83:	e8 c9 79 ff ff       	call   c0007851 <realloc>
c000fe88:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe8c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe8f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe92:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe96:	b9 08 00 00 00       	mov    ecx,0x8
c000fe9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe9d:	83 c4 2c             	add    esp,0x2c
c000fea0:	5b                   	pop    ebx
c000fea1:	5e                   	pop    esi
c000fea2:	5f                   	pop    edi
c000fea3:	5d                   	pop    ebp
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <EnvVarContainer::deleteEnv(char const*)>:
c000fea6:	c3                   	ret    
c000fea7:	90                   	nop

c000fea8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fea8:	55                   	push   ebp
c000fea9:	57                   	push   edi
c000feaa:	56                   	push   esi
c000feab:	53                   	push   ebx
c000feac:	81 ec 38 01 00 00    	sub    esp,0x138
c000feb2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000feb9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fec0:	68 14 01 00 00       	push   0x114
c000fec5:	e8 9b 79 ff ff       	call   c0007865 <malloc>
c000feca:	83 c4 0c             	add    esp,0xc
c000fecd:	89 c3                	mov    ebx,eax
c000fecf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fed2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fed9:	50                   	push   eax
c000feda:	e8 91 ac ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000fedf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fee2:	e8 b7 af ff ff       	call   c000ae9e <File::exists()>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	84 c0                	test   al,al
c000feec:	75 31                	jne    c000ff1f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000feee:	50                   	push   eax
c000feef:	50                   	push   eax
c000fef0:	6a 12                	push   0x12
c000fef2:	53                   	push   ebx
c000fef3:	e8 38 ad ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000fef8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fefa:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fefd:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff00:	e8 2b 06 ff ff       	call   c0000530 <strlen>
c000ff05:	5a                   	pop    edx
c000ff06:	31 d2                	xor    edx,edx
c000ff08:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff0c:	51                   	push   ecx
c000ff0d:	56                   	push   esi
c000ff0e:	52                   	push   edx
c000ff0f:	50                   	push   eax
c000ff10:	53                   	push   ebx
c000ff11:	ff d7                	call   edi
c000ff13:	83 c4 14             	add    esp,0x14
c000ff16:	53                   	push   ebx
c000ff17:	e8 72 ad ff ff       	call   c000ac8e <File::close()>
c000ff1c:	83 c4 10             	add    esp,0x10
c000ff1f:	56                   	push   esi
c000ff20:	31 f6                	xor    esi,esi
c000ff22:	68 00 01 00 00       	push   0x100
c000ff27:	6a 00                	push   0x0
c000ff29:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff2d:	50                   	push   eax
c000ff2e:	e8 8d 05 ff ff       	call   c00004c0 <memset>
c000ff33:	5f                   	pop    edi
c000ff34:	58                   	pop    eax
c000ff35:	6a 01                	push   0x1
c000ff37:	53                   	push   ebx
c000ff38:	e8 f3 ac ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000ff3d:	83 c4 10             	add    esp,0x10
c000ff40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff4d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff51:	51                   	push   ecx
c000ff52:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff56:	52                   	push   edx
c000ff57:	6a 00                	push   0x0
c000ff59:	6a 01                	push   0x1
c000ff5b:	53                   	push   ebx
c000ff5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff5f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff63:	83 c4 20             	add    esp,0x20
c000ff66:	3c 0d                	cmp    al,0xd
c000ff68:	0f 84 09 01 00 00    	je     c0010077 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff6e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff73:	0f 84 ef 00 00 00    	je     c0010068 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff79:	3c 0a                	cmp    al,0xa
c000ff7b:	74 13                	je     c000ff90 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff7d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff82:	74 0c                	je     c000ff90 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff84:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff8a:	0f 8e d8 00 00 00    	jle    c0010068 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	8d 78 01             	lea    edi,[eax+0x1]
c000ff9a:	57                   	push   edi
c000ff9b:	e8 c5 78 ff ff       	call   c0007865 <malloc>
c000ffa0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ffa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffa8:	8d 56 04             	lea    edx,[esi+0x4]
c000ffab:	89 14 24             	mov    DWORD PTR [esp],edx
c000ffae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffb2:	e8 ae 78 ff ff       	call   c0007865 <malloc>
c000ffb7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ffbb:	83 c4 0c             	add    esp,0xc
c000ffbe:	57                   	push   edi
c000ffbf:	6a 00                	push   0x0
c000ffc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffc5:	e8 f6 04 ff ff       	call   c00004c0 <memset>
c000ffca:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffd8:	83 c4 0c             	add    esp,0xc
c000ffdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffdf:	52                   	push   edx
c000ffe0:	6a 00                	push   0x0
c000ffe2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffe6:	e8 d5 04 ff ff       	call   c00004c0 <memset>
c000ffeb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffef:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fff6:	e8 35 05 ff ff       	call   c0000530 <strlen>
c000fffb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ffff:	89 c1                	mov    ecx,eax
c0010001:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010003:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010006:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010009:	40                   	inc    eax
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010010:	85 d2                	test   edx,edx
c0010012:	75 0c                	jne    c0010020 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	6a 08                	push   0x8
c0010019:	e8 47 78 ff ff       	call   c0007865 <malloc>
c001001e:	eb 0c                	jmp    c001002c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010020:	c1 e0 03             	shl    eax,0x3
c0010023:	51                   	push   ecx
c0010024:	51                   	push   ecx
c0010025:	50                   	push   eax
c0010026:	52                   	push   edx
c0010027:	e8 25 78 ff ff       	call   c0007851 <realloc>
c001002c:	83 c4 10             	add    esp,0x10
c001002f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010032:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010035:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010038:	8d 74 24 18          	lea    esi,[esp+0x18]
c001003c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010040:	b9 08 00 00 00       	mov    ecx,0x8
c0010045:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010047:	31 f6                	xor    esi,esi
c0010049:	50                   	push   eax
c001004a:	68 00 01 00 00       	push   0x100
c001004f:	6a 00                	push   0x0
c0010051:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010055:	50                   	push   eax
c0010056:	e8 65 04 ff ff       	call   c00004c0 <memset>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010066:	eb 0f                	jmp    c0010077 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010068:	3c 3d                	cmp    al,0x3d
c001006a:	74 07                	je     c0010073 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001006c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010070:	46                   	inc    esi
c0010071:	eb 04                	jmp    c0010077 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010073:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010077:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001007c:	0f 85 c6 fe ff ff    	jne    c000ff48 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010082:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010088:	5b                   	pop    ebx
c0010089:	5e                   	pop    esi
c001008a:	5f                   	pop    edi
c001008b:	5d                   	pop    ebp
c001008c:	c3                   	ret    
c001008d:	90                   	nop

c001008e <EnvVarContainer::__loadSystem()>:
c001008e:	83 ec 10             	sub    esp,0x10
c0010091:	68 40 14 02 c0       	push   0xc0021440
c0010096:	68 68 00 02 c0       	push   0xc0020068
c001009b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009f:	e8 04 fe ff ff       	call   c000fea8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00100a4:	83 c4 1c             	add    esp,0x1c
c00100a7:	c3                   	ret    

c00100a8 <EnvVarContainer::__loadUser()>:
c00100a8:	c3                   	ret    
c00100a9:	90                   	nop

c00100aa <EnvVarContainer::EnvVarContainer(Process*)>:
c00100aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00100bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100ca:	90                   	nop
c00100cb:	c3                   	ret    

c00100cc <EnvVarContainer::~EnvVarContainer()>:
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100d6:	85 c0                	test   eax,eax
c00100d8:	74 1d                	je     c00100f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100de:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e0:	85 c0                	test   eax,eax
c00100e2:	74 13                	je     c00100f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100eb:	83 ec 0c             	sub    esp,0xc
c00100ee:	50                   	push   eax
c00100ef:	e8 81 77 ff ff       	call   c0007875 <free>
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	90                   	nop
c00100f8:	83 c4 0c             	add    esp,0xc
c00100fb:	c3                   	ret    

c00100fc <Krnl::getEnv(Process*, char const*)>:
c00100fc:	53                   	push   ebx
c00100fd:	83 ec 08             	sub    esp,0x8
c0010100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010104:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010108:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001010e:	74 04                	je     c0010114 <Krnl::getEnv(Process*, char const*)+0x18>
c0010110:	85 c0                	test   eax,eax
c0010112:	75 0b                	jne    c001011f <Krnl::getEnv(Process*, char const*)+0x23>
c0010114:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010119:	85 c0                	test   eax,eax
c001011b:	75 19                	jne    c0010136 <Krnl::getEnv(Process*, char const*)+0x3a>
c001011d:	eb 27                	jmp    c0010146 <Krnl::getEnv(Process*, char const*)+0x4a>
c001011f:	52                   	push   edx
c0010120:	52                   	push   edx
c0010121:	53                   	push   ebx
c0010122:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010128:	e8 79 fc ff ff       	call   c000fda6 <EnvVarContainer::getEnv(char const*)>
c001012d:	83 c4 10             	add    esp,0x10
c0010130:	85 c0                	test   eax,eax
c0010132:	75 28                	jne    c001015c <Krnl::getEnv(Process*, char const*)+0x60>
c0010134:	eb de                	jmp    c0010114 <Krnl::getEnv(Process*, char const*)+0x18>
c0010136:	52                   	push   edx
c0010137:	52                   	push   edx
c0010138:	53                   	push   ebx
c0010139:	50                   	push   eax
c001013a:	e8 67 fc ff ff       	call   c000fda6 <EnvVarContainer::getEnv(char const*)>
c001013f:	83 c4 10             	add    esp,0x10
c0010142:	85 c0                	test   eax,eax
c0010144:	75 16                	jne    c001015c <Krnl::getEnv(Process*, char const*)+0x60>
c0010146:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001014a:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001014f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010153:	83 c4 08             	add    esp,0x8
c0010156:	5b                   	pop    ebx
c0010157:	e9 4a fc ff ff       	jmp    c000fda6 <EnvVarContainer::getEnv(char const*)>
c001015c:	83 c4 08             	add    esp,0x8
c001015f:	5b                   	pop    ebx
c0010160:	c3                   	ret    

c0010161 <Krnl::setEnvSystem(char const*, char const*)>:
c0010161:	83 ec 10             	sub    esp,0x10
c0010164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010168:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001016c:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c0010172:	e8 6d fc ff ff       	call   c000fde4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010177:	83 c4 1c             	add    esp,0x1c
c001017a:	c3                   	ret    

c001017b <Krnl::setEnvUser(char const*, char const*)>:
c001017b:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010180:	85 c0                	test   eax,eax
c0010182:	74 15                	je     c0010199 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010184:	83 ec 10             	sub    esp,0x10
c0010187:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001018b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001018f:	50                   	push   eax
c0010190:	e8 4f fc ff ff       	call   c000fde4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010195:	83 c4 1c             	add    esp,0x1c
c0010198:	c3                   	ret    
c0010199:	c3                   	ret    

c001019a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001019a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001019e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00101a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101a8:	e9 37 fc ff ff       	jmp    c000fde4 <EnvVarContainer::setEnv(char const*, char const*)>

c00101ad <Krnl::deleteEnvSystem(char const*)>:
c00101ad:	c3                   	ret    

c00101ae <Krnl::deleteEnvUser(char const*)>:
c00101ae:	c3                   	ret    

c00101af <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101af:	c3                   	ret    

c00101b0 <Krnl::newProcessEnv(Process*)>:
c00101b0:	83 ec 28             	sub    esp,0x28
c00101b3:	6a 0c                	push   0xc
c00101b5:	e8 ab 76 ff ff       	call   c0007865 <malloc>
c00101ba:	5a                   	pop    edx
c00101bb:	59                   	pop    ecx
c00101bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101c0:	50                   	push   eax
c00101c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101c5:	e8 e0 fe ff ff       	call   c00100aa <EnvVarContainer::EnvVarContainer(Process*)>
c00101ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ce:	83 c4 2c             	add    esp,0x2c
c00101d1:	c3                   	ret    

c00101d2 <Krnl::copyProcessEnv(Process*, Process*)>:
c00101d2:	57                   	push   edi
c00101d3:	56                   	push   esi
c00101d4:	53                   	push   ebx
c00101d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d9:	83 ec 0c             	sub    esp,0xc
c00101dc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101e2:	6a 0c                	push   0xc
c00101e4:	e8 7c 76 ff ff       	call   c0007865 <malloc>
c00101e9:	89 c3                	mov    ebx,eax
c00101eb:	58                   	pop    eax
c00101ec:	5a                   	pop    edx
c00101ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101f1:	53                   	push   ebx
c00101f2:	e8 b3 fe ff ff       	call   c00100aa <EnvVarContainer::EnvVarContainer(Process*)>
c00101f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00101f9:	89 03                	mov    DWORD PTR [ebx],eax
c00101fb:	c1 e0 03             	shl    eax,0x3
c00101fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0010201:	e8 5f 76 ff ff       	call   c0007865 <malloc>
c0010206:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010209:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001020b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001020e:	c1 e1 03             	shl    ecx,0x3
c0010211:	89 c7                	mov    edi,eax
c0010213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	89 d8                	mov    eax,ebx
c001021a:	5b                   	pop    ebx
c001021b:	5e                   	pop    esi
c001021c:	5f                   	pop    edi
c001021d:	c3                   	ret    

c001021e <Krnl::loadSystemEnv()>:
c001021e:	53                   	push   ebx
c001021f:	83 ec 14             	sub    esp,0x14
c0010222:	6a 0c                	push   0xc
c0010224:	e8 3c 76 ff ff       	call   c0007865 <malloc>
c0010229:	89 c3                	mov    ebx,eax
c001022b:	58                   	pop    eax
c001022c:	5a                   	pop    edx
c001022d:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010233:	53                   	push   ebx
c0010234:	e8 71 fe ff ff       	call   c00100aa <EnvVarContainer::EnvVarContainer(Process*)>
c0010239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001023c:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010242:	e8 47 fe ff ff       	call   c001008e <EnvVarContainer::__loadSystem()>
c0010247:	83 c4 18             	add    esp,0x18
c001024a:	5b                   	pop    ebx
c001024b:	c3                   	ret    

c001024c <Krnl::loadUserEnv()>:
c001024c:	53                   	push   ebx
c001024d:	83 ec 14             	sub    esp,0x14
c0010250:	6a 0c                	push   0xc
c0010252:	e8 0e 76 ff ff       	call   c0007865 <malloc>
c0010257:	89 c3                	mov    ebx,eax
c0010259:	58                   	pop    eax
c001025a:	5a                   	pop    edx
c001025b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010261:	53                   	push   ebx
c0010262:	e8 43 fe ff ff       	call   c00100aa <EnvVarContainer::EnvVarContainer(Process*)>
c0010267:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c001026d:	83 c4 18             	add    esp,0x18
c0010270:	5b                   	pop    ebx
c0010271:	c3                   	ret    

c0010272 <Krnl::flushEnv()>:
c0010272:	c3                   	ret    

c0010273 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010277:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c001027d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010283:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010288:	8b 00                	mov    eax,DWORD PTR [eax]
c001028a:	03 01                	add    eax,DWORD PTR [ecx]
c001028c:	85 d2                	test   edx,edx
c001028e:	74 02                	je     c0010292 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010290:	03 02                	add    eax,DWORD PTR [edx]
c0010292:	c3                   	ret    

c0010293 <Krnl::getProcessEnvPair(Process*, int)>:
c0010293:	57                   	push   edi
c0010294:	56                   	push   esi
c0010295:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c001029b:	53                   	push   ebx
c001029c:	85 f6                	test   esi,esi
c001029e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102a6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102b2:	75 16                	jne    c00102ca <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00102b4:	39 c2                	cmp    edx,eax
c00102b6:	7c 16                	jl     c00102ce <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102b8:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00102be:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102c0:	01 c6                	add    esi,eax
c00102c2:	39 d6                	cmp    esi,edx
c00102c4:	7e 3c                	jle    c0010302 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102c6:	29 c2                	sub    edx,eax
c00102c8:	eb 04                	jmp    c00102ce <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102ca:	39 c2                	cmp    edx,eax
c00102cc:	7d 05                	jge    c00102d3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102ce:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102d1:	eb 20                	jmp    c00102f3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102d5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102d8:	39 d1                	cmp    ecx,edx
c00102da:	7e 04                	jle    c00102e0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102dc:	29 c2                	sub    edx,eax
c00102de:	eb 10                	jmp    c00102f0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102e0:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102e6:	03 0e                	add    ecx,DWORD PTR [esi]
c00102e8:	39 d1                	cmp    ecx,edx
c00102ea:	7e 16                	jle    c0010302 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102ec:	29 c2                	sub    edx,eax
c00102ee:	29 fa                	sub    edx,edi
c00102f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102f3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00102f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00102f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00102fb:	89 03                	mov    DWORD PTR [ebx],eax
c00102fd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010300:	eb 1d                	jmp    c001031f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010302:	83 ec 0c             	sub    esp,0xc
c0010305:	68 8a 00 02 c0       	push   0xc002008a
c001030a:	e8 ac 00 00 00       	call   c00103bb <KePanic(char const*)>
c001030f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010315:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	89 d8                	mov    eax,ebx
c0010321:	5b                   	pop    ebx
c0010322:	5e                   	pop    esi
c0010323:	5f                   	pop    edi
c0010324:	c2 04 00             	ret    0x4

c0010327 <CPU::current()>:
c0010327:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001032c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010332:	c3                   	ret    

c0010333 <operator new(unsigned long)>:
c0010333:	e9 2d 75 ff ff       	jmp    c0007865 <malloc>

c0010338 <operator delete(void*)>:
c0010338:	e9 48 75 ff ff       	jmp    c0007885 <rfree>

c001033d <disableIRQs()>:
c001033d:	fa                   	cli    
c001033e:	c3                   	ret    

c001033f <enableIRQs()>:
c001033f:	fb                   	sti    
c0010340:	c3                   	ret    

c0010341 <lockScheduler()>:
c0010341:	fa                   	cli    
c0010342:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010348:	c3                   	ret    

c0010349 <unlockScheduler()>:
c0010349:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001034e:	48                   	dec    eax
c001034f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010354:	75 01                	jne    c0010357 <unlockScheduler()+0xe>
c0010356:	fb                   	sti    
c0010357:	c3                   	ret    

c0010358 <lockStuff()>:
c0010358:	fa                   	cli    
c0010359:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001035f:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010365:	c3                   	ret    

c0010366 <unlockStuff()>:
c0010366:	83 ec 0c             	sub    esp,0xc
c0010369:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001036e:	48                   	dec    eax
c001036f:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010374:	75 18                	jne    c001038e <unlockStuff()+0x28>
c0010376:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c001037d:	74 0f                	je     c001038e <unlockStuff()+0x28>
c001037f:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0010389:	e8 1a 44 00 00       	call   c00147a8 <schedule()>
c001038e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010393:	48                   	dec    eax
c0010394:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010399:	75 01                	jne    c001039c <unlockStuff()+0x36>
c001039b:	fb                   	sti    
c001039c:	83 c4 0c             	add    esp,0xc
c001039f:	c3                   	ret    

c00103a0 <Virt::getAKernelVAS()>:
c00103a0:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00103a5:	c3                   	ret    

c00103a6 <__not_memcpy>:
c00103a6:	57                   	push   edi
c00103a7:	56                   	push   esi
c00103a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103b4:	89 c7                	mov    edi,eax
c00103b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b8:	5e                   	pop    esi
c00103b9:	5f                   	pop    edi
c00103ba:	c3                   	ret    

c00103bb <KePanic(char const*)>:
c00103bb:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103c2:	e9 14 62 00 00       	jmp    c00165db <HalPanic(char const*)>

c00103c7 <Krnl::powerThread(void*)>:
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103cf:	48                   	dec    eax
c00103d0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103d5:	75 01                	jne    c00103d8 <Krnl::powerThread(void*)+0x11>
c00103d7:	fb                   	sti    
c00103d8:	83 ec 0c             	sub    esp,0xc
c00103db:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103e2:	6a 0a                	push   0xa
c00103e4:	e8 cf 46 00 00       	call   c0014ab8 <sleep(unsigned int)>
c00103e9:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00103f0:	83 c4 10             	add    esp,0x10
c00103f3:	eb e3                	jmp    c00103d8 <Krnl::powerThread(void*)+0x11>

c00103f5 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00103f5:	57                   	push   edi
c00103f6:	b9 09 00 00 00       	mov    ecx,0x9
c00103fb:	56                   	push   esi
c00103fc:	bf 60 69 02 c0       	mov    edi,0xc0026960
c0010401:	fc                   	cld    
c0010402:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010406:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010408:	5e                   	pop    esi
c0010409:	5f                   	pop    edi
c001040a:	c3                   	ret    

c001040b <Krnl::userIOReceived()>:
c001040b:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010415:	c3                   	ret    

c0010416 <Krnl::handlePowerButton()>:
c0010416:	83 ec 0c             	sub    esp,0xc
c0010419:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001041e:	83 f8 02             	cmp    eax,0x2
c0010421:	75 10                	jne    c0010433 <Krnl::handlePowerButton()+0x1d>
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001042c:	e8 cf 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c0010431:	eb 11                	jmp    c0010444 <Krnl::handlePowerButton()+0x2e>
c0010433:	48                   	dec    eax
c0010434:	75 11                	jne    c0010447 <Krnl::handlePowerButton()+0x31>
c0010436:	83 ec 0c             	sub    esp,0xc
c0010439:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001043f:	e8 ec 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010444:	83 c4 10             	add    esp,0x10
c0010447:	83 c4 0c             	add    esp,0xc
c001044a:	c3                   	ret    

c001044b <Krnl::handleSleepButton()>:
c001044b:	83 ec 0c             	sub    esp,0xc
c001044e:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c0010453:	83 f8 02             	cmp    eax,0x2
c0010456:	75 10                	jne    c0010468 <Krnl::handleSleepButton()+0x1d>
c0010458:	83 ec 0c             	sub    esp,0xc
c001045b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010461:	e8 9a 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c0010466:	eb 11                	jmp    c0010479 <Krnl::handleSleepButton()+0x2e>
c0010468:	48                   	dec    eax
c0010469:	75 11                	jne    c001047c <Krnl::handleSleepButton()+0x31>
c001046b:	83 ec 0c             	sub    esp,0xc
c001046e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010474:	e8 b7 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	83 c4 0c             	add    esp,0xc
c001047f:	c3                   	ret    

c0010480 <Krnl::setupPowerManager()>:
c0010480:	83 ec 0c             	sub    esp,0xc
c0010483:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c001048d:	68 f0 00 00 00       	push   0xf0
c0010492:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c0010499:	6a 00                	push   0x0
c001049b:	68 c7 03 01 c0       	push   0xc00103c7
c00104a0:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00104a6:	e8 b5 40 00 00       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c00104ab:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00104b5:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00104bf:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104c9:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104d3:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104dd:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104e7:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00104f1:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c00104fb:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010505:	83 c4 1c             	add    esp,0x1c
c0010508:	c3                   	ret    
c0010509:	66 90                	xchg   ax,ax
c001050b:	90                   	nop

c001050c <KeResolveCompatibilitySymbol(char*)>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	83 ec 08             	sub    esp,0x8
c0010512:	68 a4 00 02 c0       	push   0xc00200a4
c0010517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051b:	e8 b0 01 ff ff       	call   c00006d0 <strcmp>
c0010520:	83 c4 10             	add    esp,0x10
c0010523:	85 c0                	test   eax,eax
c0010525:	0f 94 c0             	sete   al
c0010528:	84 c0                	test   al,al
c001052a:	74 0c                	je     c0010538 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001052c:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010531:	e9 62 01 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010536:	66 90                	xchg   ax,ax
c0010538:	83 ec 08             	sub    esp,0x8
c001053b:	68 ad 00 02 c0       	push   0xc00200ad
c0010540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010544:	e8 87 01 ff ff       	call   c00006d0 <strcmp>
c0010549:	83 c4 10             	add    esp,0x10
c001054c:	85 c0                	test   eax,eax
c001054e:	0f 94 c0             	sete   al
c0010551:	84 c0                	test   al,al
c0010553:	74 0b                	je     c0010560 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010555:	b8 b0 da 01 c0       	mov    eax,0xc001dab0
c001055a:	e9 39 01 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001055f:	90                   	nop
c0010560:	83 ec 08             	sub    esp,0x8
c0010563:	68 b7 00 02 c0       	push   0xc00200b7
c0010568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056c:	e8 5f 01 ff ff       	call   c00006d0 <strcmp>
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	85 c0                	test   eax,eax
c0010576:	0f 94 c0             	sete   al
c0010579:	84 c0                	test   al,al
c001057b:	74 0b                	je     c0010588 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001057d:	b8 e4 d7 01 c0       	mov    eax,0xc001d7e4
c0010582:	e9 11 01 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010587:	90                   	nop
c0010588:	83 ec 08             	sub    esp,0x8
c001058b:	68 c0 00 02 c0       	push   0xc00200c0
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 37 01 ff ff       	call   c00006d0 <strcmp>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	85 c0                	test   eax,eax
c001059e:	0f 94 c0             	sete   al
c00105a1:	84 c0                	test   al,al
c00105a3:	74 0b                	je     c00105b0 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00105a5:	b8 bb 03 01 c0       	mov    eax,0xc00103bb
c00105aa:	e9 e9 00 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105af:	90                   	nop
c00105b0:	83 ec 08             	sub    esp,0x8
c00105b3:	68 d3 00 02 c0       	push   0xc00200d3
c00105b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bc:	e8 0f 01 ff ff       	call   c00006d0 <strcmp>
c00105c1:	83 c4 10             	add    esp,0x10
c00105c4:	85 c0                	test   eax,eax
c00105c6:	0f 94 c0             	sete   al
c00105c9:	84 c0                	test   al,al
c00105cb:	74 0b                	je     c00105d8 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00105cd:	b8 43 fd 00 c0       	mov    eax,0xc000fd43
c00105d2:	e9 c1 00 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105d7:	90                   	nop
c00105d8:	83 ec 08             	sub    esp,0x8
c00105db:	68 f0 00 02 c0       	push   0xc00200f0
c00105e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e4:	e8 e7 00 ff ff       	call   c00006d0 <strcmp>
c00105e9:	83 c4 10             	add    esp,0x10
c00105ec:	85 c0                	test   eax,eax
c00105ee:	0f 94 c0             	sete   al
c00105f1:	84 c0                	test   al,al
c00105f3:	74 0b                	je     c0010600 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00105f5:	b8 b0 db 01 c0       	mov    eax,0xc001dbb0
c00105fa:	e9 99 00 00 00       	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105ff:	90                   	nop
c0010600:	83 ec 08             	sub    esp,0x8
c0010603:	68 fa 00 02 c0       	push   0xc00200fa
c0010608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060c:	e8 bf 00 ff ff       	call   c00006d0 <strcmp>
c0010611:	83 c4 10             	add    esp,0x10
c0010614:	85 c0                	test   eax,eax
c0010616:	0f 94 c0             	sete   al
c0010619:	84 c0                	test   al,al
c001061b:	74 07                	je     c0010624 <KeResolveCompatibilitySymbol(char*)+0x118>
c001061d:	b8 30 d9 01 c0       	mov    eax,0xc001d930
c0010622:	eb 74                	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010624:	83 ec 08             	sub    esp,0x8
c0010627:	68 03 01 02 c0       	push   0xc0020103
c001062c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010630:	e8 9b 00 ff ff       	call   c00006d0 <strcmp>
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	85 c0                	test   eax,eax
c001063a:	0f 94 c0             	sete   al
c001063d:	84 c0                	test   al,al
c001063f:	74 07                	je     c0010648 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010641:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010646:	eb 50                	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010648:	83 ec 08             	sub    esp,0x8
c001064b:	68 1b 01 02 c0       	push   0xc002011b
c0010650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010654:	e8 77 00 ff ff       	call   c00006d0 <strcmp>
c0010659:	83 c4 10             	add    esp,0x10
c001065c:	85 c0                	test   eax,eax
c001065e:	0f 94 c0             	sete   al
c0010661:	84 c0                	test   al,al
c0010663:	74 07                	je     c001066c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010665:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001066a:	eb 2c                	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001066c:	83 ec 08             	sub    esp,0x8
c001066f:	68 28 01 02 c0       	push   0xc0020128
c0010674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010678:	e8 53 00 ff ff       	call   c00006d0 <strcmp>
c001067d:	83 c4 10             	add    esp,0x10
c0010680:	85 c0                	test   eax,eax
c0010682:	0f 94 c0             	sete   al
c0010685:	84 c0                	test   al,al
c0010687:	74 07                	je     c0010690 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010689:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001068e:	eb 08                	jmp    c0010698 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010690:	b8 00 00 00 00       	mov    eax,0x0
c0010695:	8d 76 00             	lea    esi,[esi+0x0]
c0010698:	83 c4 0c             	add    esp,0xc
c001069b:	c3                   	ret    

c001069c <KiSigKill(int)>:
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	6a 00                	push   0x0
c00106a1:	6a 00                	push   0x0
c00106a3:	6a ff                	push   0xffffffff
c00106a5:	6a 01                	push   0x1
c00106a7:	e8 a6 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106ac:	83 c4 1c             	add    esp,0x1c
c00106af:	c3                   	ret    

c00106b0 <KiDefaultSignalHandlerIgnore(int)>:
c00106b0:	c3                   	ret    

c00106b1 <KiDefaultSignalHandlerPause(int)>:
c00106b1:	57                   	push   edi
c00106b2:	b9 07 00 00 00       	mov    ecx,0x7
c00106b7:	56                   	push   esi
c00106b8:	be 71 01 02 c0       	mov    esi,0xc0020171
c00106bd:	83 ec 24             	sub    esp,0x24
c00106c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106c4:	fc                   	cld    
c00106c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106c7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106cb:	50                   	push   eax
c00106cc:	6a 00                	push   0x0
c00106ce:	6a 00                	push   0x0
c00106d0:	6a 27                	push   0x27
c00106d2:	e8 7b 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106d7:	83 c4 34             	add    esp,0x34
c00106da:	5e                   	pop    esi
c00106db:	5f                   	pop    edi
c00106dc:	c3                   	ret    

c00106dd <KiDefaultSignalHandlerResume(int)>:
c00106dd:	57                   	push   edi
c00106de:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106e3:	56                   	push   esi
c00106e4:	be 8d 01 02 c0       	mov    esi,0xc002018d
c00106e9:	83 ec 24             	sub    esp,0x24
c00106ec:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106f0:	fc                   	cld    
c00106f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106f3:	8d 44 24 03          	lea    eax,[esp+0x3]
c00106f7:	50                   	push   eax
c00106f8:	6a 00                	push   0x0
c00106fa:	6a 00                	push   0x0
c00106fc:	6a 27                	push   0x27
c00106fe:	e8 4f 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010703:	83 c4 34             	add    esp,0x34
c0010706:	5e                   	pop    esi
c0010707:	5f                   	pop    edi
c0010708:	c3                   	ret    

c0010709 <KeDeinitSignals(SigHandlerBlock*)>:
c0010709:	e9 67 71 ff ff       	jmp    c0007875 <free>

c001070e <KeInitSignals()>:
c001070e:	53                   	push   ebx
c001070f:	83 ec 14             	sub    esp,0x14
c0010712:	68 c8 00 00 00       	push   0xc8
c0010717:	e8 49 71 ff ff       	call   c0007865 <malloc>
c001071c:	83 c4 0c             	add    esp,0xc
c001071f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010729:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010733:	89 c3                	mov    ebx,eax
c0010735:	6a 20                	push   0x20
c0010737:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001073d:	6a 00                	push   0x0
c001073f:	50                   	push   eax
c0010740:	e8 7b fd fe ff       	call   c00004c0 <memset>
c0010745:	83 c4 0c             	add    esp,0xc
c0010748:	6a 44                	push   0x44
c001074a:	6a 00                	push   0x0
c001074c:	53                   	push   ebx
c001074d:	e8 6e fd fe ff       	call   c00004c0 <memset>
c0010752:	89 d8                	mov    eax,ebx
c0010754:	83 c4 18             	add    esp,0x18
c0010757:	5b                   	pop    ebx
c0010758:	c3                   	ret    

c0010759 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010759:	53                   	push   ebx
c001075a:	b8 01 00 00 00       	mov    eax,0x1
c001075f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010763:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010767:	83 f9 10             	cmp    ecx,0x10
c001076a:	7f 21                	jg     c001078d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001076c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001076f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010773:	89 03                	mov    DWORD PTR [ebx],eax
c0010775:	b8 01 00 00 00       	mov    eax,0x1
c001077a:	d3 e0                	shl    eax,cl
c001077c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010780:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010783:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001078b:	31 c0                	xor    eax,eax
c001078d:	5b                   	pop    ebx
c001078e:	c3                   	ret    

c001078f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001078f:	55                   	push   ebp
c0010790:	57                   	push   edi
c0010791:	bf 08 00 00 00       	mov    edi,0x8
c0010796:	56                   	push   esi
c0010797:	53                   	push   ebx
c0010798:	83 ec 18             	sub    esp,0x18
c001079b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001079f:	68 aa 01 02 c0       	push   0xc00201aa
c00107a4:	e8 51 9e ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00107a9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107b0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107b6:	83 c4 10             	add    esp,0x10
c00107b9:	31 c9                	xor    ecx,ecx
c00107bb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107bf:	99                   	cdq    
c00107c0:	f7 ff                	idiv   edi
c00107c2:	8d 42 24             	lea    eax,[edx+0x24]
c00107c5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107c9:	85 f6                	test   esi,esi
c00107cb:	75 1a                	jne    c00107e7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107d1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107d5:	50                   	push   eax
c00107d6:	50                   	push   eax
c00107d7:	52                   	push   edx
c00107d8:	68 bb 01 02 c0       	push   0xc00201bb
c00107dd:	e8 18 9e ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	eb 1b                	jmp    c0010802 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107e7:	41                   	inc    ecx
c00107e8:	83 f9 08             	cmp    ecx,0x8
c00107eb:	75 ce                	jne    c00107bb <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107ed:	83 ec 0c             	sub    esp,0xc
c00107f0:	be 01 00 00 00       	mov    esi,0x1
c00107f5:	68 dc 01 02 c0       	push   0xc00201dc
c00107fa:	e8 fb 9d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00107ff:	83 c4 10             	add    esp,0x10
c0010802:	83 c4 0c             	add    esp,0xc
c0010805:	89 f0                	mov    eax,esi
c0010807:	5b                   	pop    ebx
c0010808:	5e                   	pop    esi
c0010809:	5f                   	pop    edi
c001080a:	5d                   	pop    ebp
c001080b:	c3                   	ret    

c001080c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001080c:	55                   	push   ebp
c001080d:	57                   	push   edi
c001080e:	56                   	push   esi
c001080f:	53                   	push   ebx
c0010810:	51                   	push   ecx
c0010811:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010815:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001081c:	0f 84 af 00 00 00    	je     c00108d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010822:	31 c9                	xor    ecx,ecx
c0010824:	bf 08 00 00 00       	mov    edi,0x8
c0010829:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001082f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010832:	99                   	cdq    
c0010833:	f7 ff                	idiv   edi
c0010835:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001083c:	85 ed                	test   ebp,ebp
c001083e:	0f 84 9e 00 00 00    	je     c00108e2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010844:	89 e9                	mov    ecx,ebp
c0010846:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001084c:	bf 01 00 00 00       	mov    edi,0x1
c0010851:	89 04 24             	mov    DWORD PTR [esp],eax
c0010854:	d3 e7                	shl    edi,cl
c0010856:	31 c9                	xor    ecx,ecx
c0010858:	b8 01 00 00 00       	mov    eax,0x1
c001085d:	d3 e0                	shl    eax,cl
c001085f:	85 04 24             	test   DWORD PTR [esp],eax
c0010862:	74 06                	je     c001086a <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010864:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010868:	75 67                	jne    c00108d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001086a:	41                   	inc    ecx
c001086b:	83 f9 11             	cmp    ecx,0x11
c001086e:	75 e8                	jne    c0010858 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010870:	46                   	inc    esi
c0010871:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010874:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001087a:	09 f8                	or     eax,edi
c001087c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010887:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001088d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010894:	31 c0                	xor    eax,eax
c0010896:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001089e:	74 09                	je     c00108a9 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c00108a0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108a7:	eb 06                	jmp    c00108af <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c00108a9:	40                   	inc    eax
c00108aa:	83 f8 08             	cmp    eax,0x8
c00108ad:	75 e7                	jne    c0010896 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c00108af:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00108b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108b6:	83 fd 09             	cmp    ebp,0x9
c00108b9:	89 2a                	mov    DWORD PTR [edx],ebp
c00108bb:	75 07                	jne    c00108c4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00108bd:	b8 9c 06 01 c0       	mov    eax,0xc001069c
c00108c2:	eb 31                	jmp    c00108f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108c4:	83 f8 01             	cmp    eax,0x1
c00108c7:	75 0c                	jne    c00108d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00108c9:	f7 d7                	not    edi
c00108cb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	eb 20                	jmp    c00108f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108d5:	85 c0                	test   eax,eax
c00108d7:	75 1c                	jne    c00108f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108d9:	8b 04 ad a0 14 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdeb60]
c00108e0:	eb 13                	jmp    c00108f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e2:	46                   	inc    esi
c00108e3:	41                   	inc    ecx
c00108e4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108ea:	83 f9 08             	cmp    ecx,0x8
c00108ed:	0f 85 36 ff ff ff    	jne    c0010829 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00108f3:	eb dc                	jmp    c00108d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c00108f5:	5a                   	pop    edx
c00108f6:	5b                   	pop    ebx
c00108f7:	5e                   	pop    esi
c00108f8:	5f                   	pop    edi
c00108f9:	5d                   	pop    ebp
c00108fa:	c3                   	ret    

c00108fb <KiCheckSignalZ>:
c00108fb:	83 ec 10             	sub    esp,0x10
c00108fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010902:	50                   	push   eax
c0010903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010908:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001090b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010911:	e8 f6 fe ff ff       	call   c001080c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010916:	5a                   	pop    edx
c0010917:	31 d2                	xor    edx,edx
c0010919:	59                   	pop    ecx
c001091a:	85 c0                	test   eax,eax
c001091c:	74 19                	je     c0010937 <KiCheckSignalZ+0x3c>
c001091e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010924:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010927:	89 02                	mov    DWORD PTR [edx],eax
c0010929:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010934:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010937:	89 d0                	mov    eax,edx
c0010939:	83 c4 10             	add    esp,0x10
c001093c:	c3                   	ret    

c001093d <KeCompleteSignal(SigHandlerBlock*, int)>:
c001093d:	56                   	push   esi
c001093e:	53                   	push   ebx
c001093f:	bb 01 00 00 00       	mov    ebx,0x1
c0010944:	52                   	push   edx
c0010945:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010949:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001094d:	d3 e3                	shl    ebx,cl
c001094f:	83 f9 10             	cmp    ecx,0x10
c0010952:	7f 08                	jg     c001095c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010954:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001095a:	75 10                	jne    c001096c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001095c:	83 ec 0c             	sub    esp,0xc
c001095f:	68 ed 01 02 c0       	push   0xc00201ed
c0010964:	e8 52 fa ff ff       	call   c00103bb <KePanic(char const*)>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	f7 d3                	not    ebx
c001096e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010974:	58                   	pop    eax
c0010975:	5b                   	pop    ebx
c0010976:	5e                   	pop    esi
c0010977:	c3                   	ret    

c0010978 <KiFinishSignalZ>:
c0010978:	53                   	push   ebx
c0010979:	83 ec 10             	sub    esp,0x10
c001097c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010980:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001098b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010991:	e8 a7 ff ff ff       	call   c001093d <KeCompleteSignal(SigHandlerBlock*, int)>
c0010996:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001099c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00109a3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00109aa:	83 c4 18             	add    esp,0x18
c00109ad:	5b                   	pop    ebx
c00109ae:	c3                   	ret    

c00109af <SysSeekDir(regs*)>:
c00109af:	31 c0                	xor    eax,eax
c00109b1:	31 d2                	xor    edx,edx
c00109b3:	c3                   	ret    

c00109b4 <SysTellDir(regs*)>:
c00109b4:	31 c0                	xor    eax,eax
c00109b6:	31 d2                	xor    edx,edx
c00109b8:	c3                   	ret    

c00109b9 <SysVerify(regs*)>:
c00109b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109c2:	c3                   	ret    

c00109c3 <SysGetArgc(regs*)>:
c00109c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109cb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00109d1:	99                   	cdq    
c00109d2:	c3                   	ret    

c00109d3 <SysTTYName(regs*)>:
c00109d3:	b8 01 00 00 00       	mov    eax,0x1
c00109d8:	31 d2                	xor    edx,edx
c00109da:	c3                   	ret    

c00109db <SysFormatDisk(regs*)>:
c00109db:	56                   	push   esi
c00109dc:	53                   	push   ebx
c00109dd:	50                   	push   eax
c00109de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109e2:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c00109e8:	eb 28                	jmp    c0010a12 <SysFormatDisk(regs*)+0x37>
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00109f0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00109f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109f5:	51                   	push   ecx
c00109f6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00109f9:	51                   	push   ecx
c00109fa:	50                   	push   eax
c00109fb:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010a02:	50                   	push   eax
c0010a03:	53                   	push   ebx
c0010a04:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010a07:	83 c4 20             	add    esp,0x20
c0010a0a:	83 f8 08             	cmp    eax,0x8
c0010a0d:	75 12                	jne    c0010a21 <SysFormatDisk(regs*)+0x46>
c0010a0f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a12:	85 db                	test   ebx,ebx
c0010a14:	75 d4                	jne    c00109ea <SysFormatDisk(regs*)+0xf>
c0010a16:	59                   	pop    ecx
c0010a17:	b8 03 00 00 00       	mov    eax,0x3
c0010a1c:	31 d2                	xor    edx,edx
c0010a1e:	5b                   	pop    ebx
c0010a1f:	5e                   	pop    esi
c0010a20:	c3                   	ret    
c0010a21:	85 c0                	test   eax,eax
c0010a23:	74 1b                	je     c0010a40 <SysFormatDisk(regs*)+0x65>
c0010a25:	83 f8 09             	cmp    eax,0x9
c0010a28:	74 0b                	je     c0010a35 <SysFormatDisk(regs*)+0x5a>
c0010a2a:	59                   	pop    ecx
c0010a2b:	b8 02 00 00 00       	mov    eax,0x2
c0010a30:	31 d2                	xor    edx,edx
c0010a32:	5b                   	pop    ebx
c0010a33:	5e                   	pop    esi
c0010a34:	c3                   	ret    
c0010a35:	59                   	pop    ecx
c0010a36:	b8 01 00 00 00       	mov    eax,0x1
c0010a3b:	31 d2                	xor    edx,edx
c0010a3d:	5b                   	pop    ebx
c0010a3e:	5e                   	pop    esi
c0010a3f:	c3                   	ret    
c0010a40:	59                   	pop    ecx
c0010a41:	31 c0                	xor    eax,eax
c0010a43:	31 d2                	xor    edx,edx
c0010a45:	5b                   	pop    ebx
c0010a46:	5e                   	pop    esi
c0010a47:	c3                   	ret    

c0010a48 <SysSetDiskVolumeLabel(regs*)>:
c0010a48:	56                   	push   esi
c0010a49:	53                   	push   ebx
c0010a4a:	53                   	push   ebx
c0010a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a4f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a52:	83 f8 19             	cmp    eax,0x19
c0010a55:	77 2d                	ja     c0010a84 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a57:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010a5e:	85 c9                	test   ecx,ecx
c0010a60:	74 22                	je     c0010a84 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a62:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010a65:	85 db                	test   ebx,ebx
c0010a67:	74 1b                	je     c0010a84 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a69:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010a6f:	85 d2                	test   edx,edx
c0010a71:	74 11                	je     c0010a84 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a73:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a75:	53                   	push   ebx
c0010a76:	50                   	push   eax
c0010a77:	51                   	push   ecx
c0010a78:	52                   	push   edx
c0010a79:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010a7c:	83 c4 10             	add    esp,0x10
c0010a7f:	99                   	cdq    
c0010a80:	59                   	pop    ecx
c0010a81:	5b                   	pop    ebx
c0010a82:	5e                   	pop    esi
c0010a83:	c3                   	ret    
c0010a84:	59                   	pop    ecx
c0010a85:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a8f:	5b                   	pop    ebx
c0010a90:	5e                   	pop    esi
c0010a91:	c3                   	ret    

c0010a92 <SysGetDiskVolumeLabel(regs*)>:
c0010a92:	57                   	push   edi
c0010a93:	56                   	push   esi
c0010a94:	53                   	push   ebx
c0010a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a99:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010a9c:	83 fa 19             	cmp    edx,0x19
c0010a9f:	77 38                	ja     c0010ad9 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aa1:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010aa8:	85 c9                	test   ecx,ecx
c0010aaa:	74 2d                	je     c0010ad9 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010aaf:	85 db                	test   ebx,ebx
c0010ab1:	74 26                	je     c0010ad9 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ab3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ab6:	85 f6                	test   esi,esi
c0010ab8:	74 1f                	je     c0010ad9 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aba:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ac0:	85 c0                	test   eax,eax
c0010ac2:	74 15                	je     c0010ad9 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ac4:	83 ec 0c             	sub    esp,0xc
c0010ac7:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ac9:	56                   	push   esi
c0010aca:	53                   	push   ebx
c0010acb:	52                   	push   edx
c0010acc:	51                   	push   ecx
c0010acd:	50                   	push   eax
c0010ace:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010ad1:	83 c4 20             	add    esp,0x20
c0010ad4:	99                   	cdq    
c0010ad5:	5b                   	pop    ebx
c0010ad6:	5e                   	pop    esi
c0010ad7:	5f                   	pop    edi
c0010ad8:	c3                   	ret    
c0010ad9:	5b                   	pop    ebx
c0010ada:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010adf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ae4:	5e                   	pop    esi
c0010ae5:	5f                   	pop    edi
c0010ae6:	c3                   	ret    

c0010ae7 <SysShutdown(regs*)>:
c0010ae7:	83 ec 0c             	sub    esp,0xc
c0010aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010af1:	85 c0                	test   eax,eax
c0010af3:	74 18                	je     c0010b0d <SysShutdown(regs*)+0x26>
c0010af5:	83 f8 01             	cmp    eax,0x1
c0010af8:	74 38                	je     c0010b32 <SysShutdown(regs*)+0x4b>
c0010afa:	83 f8 02             	cmp    eax,0x2
c0010afd:	74 24                	je     c0010b23 <SysShutdown(regs*)+0x3c>
c0010aff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b09:	83 c4 0c             	add    esp,0xc
c0010b0c:	c3                   	ret    
c0010b0d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b14:	6a 00                	push   0x0
c0010b16:	6a 00                	push   0x0
c0010b18:	6a 00                	push   0x0
c0010b1a:	50                   	push   eax
c0010b1b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b1e:	83 c4 10             	add    esp,0x10
c0010b21:	eb dc                	jmp    c0010aff <SysShutdown(regs*)+0x18>
c0010b23:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b2a:	6a 00                	push   0x0
c0010b2c:	6a 00                	push   0x0
c0010b2e:	6a 01                	push   0x1
c0010b30:	eb e8                	jmp    c0010b1a <SysShutdown(regs*)+0x33>
c0010b32:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010b37:	85 c0                	test   eax,eax
c0010b39:	74 02                	je     c0010b3d <SysShutdown(regs*)+0x56>
c0010b3b:	ff d0                	call   eax
c0010b3d:	31 c0                	xor    eax,eax
c0010b3f:	31 d2                	xor    edx,edx
c0010b41:	83 c4 0c             	add    esp,0xc
c0010b44:	c3                   	ret    

c0010b45 <SysRealpath(regs*)>:
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010b4f:	85 d2                	test   edx,edx
c0010b51:	74 07                	je     c0010b5a <SysRealpath(regs*)+0x15>
c0010b53:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010b56:	85 c0                	test   eax,eax
c0010b58:	75 0b                	jne    c0010b65 <SysRealpath(regs*)+0x20>
c0010b5a:	b8 01 00 00 00       	mov    eax,0x1
c0010b5f:	31 d2                	xor    edx,edx
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	51                   	push   ecx
c0010b66:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b6c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b6f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b75:	51                   	push   ecx
c0010b76:	52                   	push   edx
c0010b77:	50                   	push   eax
c0010b78:	e8 49 9e ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	31 c0                	xor    eax,eax
c0010b82:	31 d2                	xor    edx,edx
c0010b84:	83 c4 0c             	add    esp,0xc
c0010b87:	c3                   	ret    

c0010b88 <SysReadDir(regs*)>:
c0010b88:	53                   	push   ebx
c0010b89:	83 ec 18             	sub    esp,0x18
c0010b8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b90:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b93:	83 f8 02             	cmp    eax,0x2
c0010b96:	76 61                	jbe    c0010bf9 <SysReadDir(regs*)+0x71>
c0010b98:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010b9f:	77 49                	ja     c0010bea <SysReadDir(regs*)+0x62>
c0010ba1:	83 ec 0c             	sub    esp,0xc
c0010ba4:	50                   	push   eax
c0010ba5:	e8 3d 86 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010baa:	83 c4 10             	add    esp,0x10
c0010bad:	85 c0                	test   eax,eax
c0010baf:	74 39                	je     c0010bea <SysReadDir(regs*)+0x62>
c0010bb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bb9:	83 ec 0c             	sub    esp,0xc
c0010bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bbe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010bc2:	51                   	push   ecx
c0010bc3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010bc6:	51                   	push   ecx
c0010bc7:	6a 00                	push   0x0
c0010bc9:	68 10 01 00 00       	push   0x110
c0010bce:	50                   	push   eax
c0010bcf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010bd2:	83 c4 20             	add    esp,0x20
c0010bd5:	85 c0                	test   eax,eax
c0010bd7:	74 29                	je     c0010c02 <SysReadDir(regs*)+0x7a>
c0010bd9:	83 f8 07             	cmp    eax,0x7
c0010bdc:	74 1b                	je     c0010bf9 <SysReadDir(regs*)+0x71>
c0010bde:	b8 02 00 00 00       	mov    eax,0x2
c0010be3:	31 d2                	xor    edx,edx
c0010be5:	83 c4 18             	add    esp,0x18
c0010be8:	5b                   	pop    ebx
c0010be9:	c3                   	ret    
c0010bea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bf4:	83 c4 18             	add    esp,0x18
c0010bf7:	5b                   	pop    ebx
c0010bf8:	c3                   	ret    
c0010bf9:	b8 01 00 00 00       	mov    eax,0x1
c0010bfe:	31 d2                	xor    edx,edx
c0010c00:	eb e3                	jmp    c0010be5 <SysReadDir(regs*)+0x5d>
c0010c02:	31 c0                	xor    eax,eax
c0010c04:	31 d2                	xor    edx,edx
c0010c06:	eb dd                	jmp    c0010be5 <SysReadDir(regs*)+0x5d>

c0010c08 <SysIsATTY(regs*)>:
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c12:	83 f8 02             	cmp    eax,0x2
c0010c15:	76 07                	jbe    c0010c1e <SysIsATTY(regs*)+0x16>
c0010c17:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010c1c:	75 28                	jne    c0010c46 <SysIsATTY(regs*)+0x3e>
c0010c1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010c2c:	85 c0                	test   eax,eax
c0010c2e:	74 26                	je     c0010c56 <SysIsATTY(regs*)+0x4e>
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c35:	50                   	push   eax
c0010c36:	ff 12                	call   DWORD PTR [edx]
c0010c38:	31 d2                	xor    edx,edx
c0010c3a:	25 ff 00 00 00       	and    eax,0xff
c0010c3f:	83 c4 10             	add    esp,0x10
c0010c42:	83 c4 0c             	add    esp,0xc
c0010c45:	c3                   	ret    
c0010c46:	83 ec 0c             	sub    esp,0xc
c0010c49:	50                   	push   eax
c0010c4a:	e8 98 85 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010c4f:	83 c4 10             	add    esp,0x10
c0010c52:	85 c0                	test   eax,eax
c0010c54:	75 da                	jne    c0010c30 <SysIsATTY(regs*)+0x28>
c0010c56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	c3                   	ret    

c0010c64 <SysSeek(regs*)>:
c0010c64:	53                   	push   ebx
c0010c65:	83 ec 08             	sub    esp,0x8
c0010c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c6c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c6f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c72:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c78:	77 34                	ja     c0010cae <SysSeek(regs*)+0x4a>
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	50                   	push   eax
c0010c7e:	e8 64 85 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010c83:	83 c4 0c             	add    esp,0xc
c0010c86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c89:	31 db                	xor    ebx,ebx
c0010c8b:	53                   	push   ebx
c0010c8c:	51                   	push   ecx
c0010c8d:	50                   	push   eax
c0010c8e:	e8 5b a0 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	85 c0                	test   eax,eax
c0010c98:	0f 95 c0             	setne  al
c0010c9b:	31 d2                	xor    edx,edx
c0010c9d:	25 ff 00 00 00       	and    eax,0xff
c0010ca2:	f7 d8                	neg    eax
c0010ca4:	83 d2 00             	adc    edx,0x0
c0010ca7:	83 c4 08             	add    esp,0x8
c0010caa:	f7 da                	neg    edx
c0010cac:	5b                   	pop    ebx
c0010cad:	c3                   	ret    
c0010cae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cb8:	83 c4 08             	add    esp,0x8
c0010cbb:	5b                   	pop    ebx
c0010cbc:	c3                   	ret    

c0010cbd <SysTell(regs*)>:
c0010cbd:	53                   	push   ebx
c0010cbe:	83 ec 08             	sub    esp,0x8
c0010cc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cc8:	83 f8 02             	cmp    eax,0x2
c0010ccb:	76 50                	jbe    c0010d1d <SysTell(regs*)+0x60>
c0010ccd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cd2:	76 19                	jbe    c0010ced <SysTell(regs*)+0x30>
c0010cd4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010cd7:	31 d2                	xor    edx,edx
c0010cd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ce6:	31 c0                	xor    eax,eax
c0010ce8:	83 c4 08             	add    esp,0x8
c0010ceb:	5b                   	pop    ebx
c0010cec:	c3                   	ret    
c0010ced:	83 ec 0c             	sub    esp,0xc
c0010cf0:	50                   	push   eax
c0010cf1:	e8 f1 84 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010cf6:	5a                   	pop    edx
c0010cf7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cfa:	59                   	pop    ecx
c0010cfb:	53                   	push   ebx
c0010cfc:	50                   	push   eax
c0010cfd:	e8 42 a0 ff ff       	call   c000ad44 <File::tell(unsigned long long*)>
c0010d02:	83 c4 10             	add    esp,0x10
c0010d05:	85 c0                	test   eax,eax
c0010d07:	0f 95 c0             	setne  al
c0010d0a:	31 d2                	xor    edx,edx
c0010d0c:	25 ff 00 00 00       	and    eax,0xff
c0010d11:	f7 d8                	neg    eax
c0010d13:	83 d2 00             	adc    edx,0x0
c0010d16:	83 c4 08             	add    esp,0x8
c0010d19:	f7 da                	neg    edx
c0010d1b:	5b                   	pop    ebx
c0010d1c:	c3                   	ret    
c0010d1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d27:	83 c4 08             	add    esp,0x8
c0010d2a:	5b                   	pop    ebx
c0010d2b:	c3                   	ret    

c0010d2c <SysSize(regs*)>:
c0010d2c:	53                   	push   ebx
c0010d2d:	83 ec 18             	sub    esp,0x18
c0010d30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d37:	83 f8 02             	cmp    eax,0x2
c0010d3a:	76 56                	jbe    c0010d92 <SysSize(regs*)+0x66>
c0010d3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d41:	76 19                	jbe    c0010d5c <SysSize(regs*)+0x30>
c0010d43:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d46:	31 d2                	xor    edx,edx
c0010d48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d55:	31 c0                	xor    eax,eax
c0010d57:	83 c4 18             	add    esp,0x18
c0010d5a:	5b                   	pop    ebx
c0010d5b:	c3                   	ret    
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	50                   	push   eax
c0010d60:	e8 82 84 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010d65:	83 c4 0c             	add    esp,0xc
c0010d68:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010d6c:	52                   	push   edx
c0010d6d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d70:	52                   	push   edx
c0010d71:	50                   	push   eax
c0010d72:	e8 65 a1 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	85 c0                	test   eax,eax
c0010d7c:	0f 95 c0             	setne  al
c0010d7f:	31 d2                	xor    edx,edx
c0010d81:	25 ff 00 00 00       	and    eax,0xff
c0010d86:	f7 d8                	neg    eax
c0010d88:	83 d2 00             	adc    edx,0x0
c0010d8b:	83 c4 18             	add    esp,0x18
c0010d8e:	f7 da                	neg    edx
c0010d90:	5b                   	pop    ebx
c0010d91:	c3                   	ret    
c0010d92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d9c:	83 c4 18             	add    esp,0x18
c0010d9f:	5b                   	pop    ebx
c0010da0:	c3                   	ret    

c0010da1 <SysSizeFromFilename(regs*)>:
c0010da1:	57                   	push   edi
c0010da2:	56                   	push   esi
c0010da3:	53                   	push   ebx
c0010da4:	83 ec 20             	sub    esp,0x20
c0010da7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dab:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010dae:	83 fb 02             	cmp    ebx,0x2
c0010db1:	0f 86 8c 00 00 00    	jbe    c0010e43 <SysSizeFromFilename(regs*)+0xa2>
c0010db7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010dbd:	76 1b                	jbe    c0010dda <SysSizeFromFilename(regs*)+0x39>
c0010dbf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010dc2:	31 d2                	xor    edx,edx
c0010dc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010dca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dd1:	83 c4 20             	add    esp,0x20
c0010dd4:	31 c0                	xor    eax,eax
c0010dd6:	5b                   	pop    ebx
c0010dd7:	5e                   	pop    esi
c0010dd8:	5f                   	pop    edi
c0010dd9:	c3                   	ret    
c0010dda:	83 ec 0c             	sub    esp,0xc
c0010ddd:	68 14 01 00 00       	push   0x114
c0010de2:	e8 7e 6a ff ff       	call   c0007865 <malloc>
c0010de7:	83 c4 0c             	add    esp,0xc
c0010dea:	89 c7                	mov    edi,eax
c0010dec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010df4:	50                   	push   eax
c0010df5:	53                   	push   ebx
c0010df6:	57                   	push   edi
c0010df7:	e8 74 9d ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0010dfc:	83 c4 0c             	add    esp,0xc
c0010dff:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010e03:	50                   	push   eax
c0010e04:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010e07:	52                   	push   edx
c0010e08:	57                   	push   edi
c0010e09:	e8 ce a0 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	85 ff                	test   edi,edi
c0010e13:	74 14                	je     c0010e29 <SysSizeFromFilename(regs*)+0x88>
c0010e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e19:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e1b:	83 ec 0c             	sub    esp,0xc
c0010e1e:	57                   	push   edi
c0010e1f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e29:	85 c0                	test   eax,eax
c0010e2b:	0f 95 c0             	setne  al
c0010e2e:	31 d2                	xor    edx,edx
c0010e30:	25 ff 00 00 00       	and    eax,0xff
c0010e35:	f7 d8                	neg    eax
c0010e37:	83 d2 00             	adc    edx,0x0
c0010e3a:	83 c4 20             	add    esp,0x20
c0010e3d:	f7 da                	neg    edx
c0010e3f:	5b                   	pop    ebx
c0010e40:	5e                   	pop    esi
c0010e41:	5f                   	pop    edi
c0010e42:	c3                   	ret    
c0010e43:	83 c4 20             	add    esp,0x20
c0010e46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e4b:	5b                   	pop    ebx
c0010e4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e51:	5e                   	pop    esi
c0010e52:	5f                   	pop    edi
c0010e53:	c3                   	ret    

c0010e54 <SysClose(regs*)>:
c0010e54:	53                   	push   ebx
c0010e55:	83 ec 08             	sub    esp,0x8
c0010e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e5f:	83 f8 02             	cmp    eax,0x2
c0010e62:	76 41                	jbe    c0010ea5 <SysClose(regs*)+0x51>
c0010e64:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010e6a:	83 fa 01             	cmp    edx,0x1
c0010e6d:	76 2d                	jbe    c0010e9c <SysClose(regs*)+0x48>
c0010e6f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e74:	77 2f                	ja     c0010ea5 <SysClose(regs*)+0x51>
c0010e76:	83 ec 0c             	sub    esp,0xc
c0010e79:	50                   	push   eax
c0010e7a:	e8 68 83 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010e7f:	89 c3                	mov    ebx,eax
c0010e81:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e84:	e8 05 9e ff ff       	call   c000ac8e <File::close()>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	85 db                	test   ebx,ebx
c0010e8e:	74 0c                	je     c0010e9c <SysClose(regs*)+0x48>
c0010e90:	83 ec 0c             	sub    esp,0xc
c0010e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e95:	53                   	push   ebx
c0010e96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	31 c0                	xor    eax,eax
c0010e9e:	31 d2                	xor    edx,edx
c0010ea0:	83 c4 08             	add    esp,0x8
c0010ea3:	5b                   	pop    ebx
c0010ea4:	c3                   	ret    
c0010ea5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eaf:	83 c4 08             	add    esp,0x8
c0010eb2:	5b                   	pop    ebx
c0010eb3:	c3                   	ret    

c0010eb4 <SysOpenDir(regs*)>:
c0010eb4:	56                   	push   esi
c0010eb5:	53                   	push   ebx
c0010eb6:	50                   	push   eax
c0010eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ebb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ebe:	85 c0                	test   eax,eax
c0010ec0:	74 5b                	je     c0010f1d <SysOpenDir(regs*)+0x69>
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	68 14 01 00 00       	push   0x114
c0010eca:	e8 96 69 ff ff       	call   c0007865 <malloc>
c0010ecf:	83 c4 0c             	add    esp,0xc
c0010ed2:	89 c6                	mov    esi,eax
c0010ed4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010edc:	50                   	push   eax
c0010edd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ee0:	50                   	push   eax
c0010ee1:	56                   	push   esi
c0010ee2:	e8 b3 a1 ff ff       	call   c000b09a <Directory::Directory(char const*, Process*)>
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	85 f6                	test   esi,esi
c0010eec:	74 2f                	je     c0010f1d <SysOpenDir(regs*)+0x69>
c0010eee:	83 ec 0c             	sub    esp,0xc
c0010ef1:	56                   	push   esi
c0010ef2:	e8 63 a2 ff ff       	call   c000b15a <Directory::open()>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	85 c0                	test   eax,eax
c0010efc:	75 1f                	jne    c0010f1d <SysOpenDir(regs*)+0x69>
c0010efe:	83 ec 0c             	sub    esp,0xc
c0010f01:	56                   	push   esi
c0010f02:	e8 eb 7f ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0010f07:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f0a:	83 c4 10             	add    esp,0x10
c0010f0d:	89 02                	mov    DWORD PTR [edx],eax
c0010f0f:	c1 f8 1f             	sar    eax,0x1f
c0010f12:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f15:	31 c0                	xor    eax,eax
c0010f17:	59                   	pop    ecx
c0010f18:	31 d2                	xor    edx,edx
c0010f1a:	5b                   	pop    ebx
c0010f1b:	5e                   	pop    esi
c0010f1c:	c3                   	ret    
c0010f1d:	59                   	pop    ecx
c0010f1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f28:	5b                   	pop    ebx
c0010f29:	5e                   	pop    esi
c0010f2a:	c3                   	ret    

c0010f2b <SysMakeDir(regs*)>:
c0010f2b:	56                   	push   esi
c0010f2c:	53                   	push   ebx
c0010f2d:	83 ec 10             	sub    esp,0x10
c0010f30:	68 14 01 00 00       	push   0x114
c0010f35:	e8 2b 69 ff ff       	call   c0007865 <malloc>
c0010f3a:	83 c4 0c             	add    esp,0xc
c0010f3d:	89 c3                	mov    ebx,eax
c0010f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f44:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010f47:	56                   	push   esi
c0010f48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f4c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f4f:	50                   	push   eax
c0010f50:	53                   	push   ebx
c0010f51:	e8 44 a1 ff ff       	call   c000b09a <Directory::Directory(char const*, Process*)>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	85 db                	test   ebx,ebx
c0010f5b:	74 2a                	je     c0010f87 <SysMakeDir(regs*)+0x5c>
c0010f5d:	83 ec 0c             	sub    esp,0xc
c0010f60:	53                   	push   ebx
c0010f61:	e8 d4 a3 ff ff       	call   c000b33a <Directory::create()>
c0010f66:	89 c6                	mov    esi,eax
c0010f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	31 c0                	xor    eax,eax
c0010f75:	59                   	pop    ecx
c0010f76:	85 f6                	test   esi,esi
c0010f78:	5b                   	pop    ebx
c0010f79:	0f 95 c0             	setne  al
c0010f7c:	5e                   	pop    esi
c0010f7d:	31 d2                	xor    edx,edx
c0010f7f:	f7 d8                	neg    eax
c0010f81:	83 d2 00             	adc    edx,0x0
c0010f84:	f7 da                	neg    edx
c0010f86:	c3                   	ret    
c0010f87:	59                   	pop    ecx
c0010f88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	c3                   	ret    

c0010f95 <SysCloseDir(regs*)>:
c0010f95:	53                   	push   ebx
c0010f96:	83 ec 08             	sub    esp,0x8
c0010f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fa0:	8d 50 fd             	lea    edx,[eax-0x3]
c0010fa3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010fa9:	77 2f                	ja     c0010fda <SysCloseDir(regs*)+0x45>
c0010fab:	83 ec 0c             	sub    esp,0xc
c0010fae:	50                   	push   eax
c0010faf:	e8 33 82 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010fb4:	89 c3                	mov    ebx,eax
c0010fb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fb9:	e8 f8 a1 ff ff       	call   c000b1b6 <Directory::close()>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	85 db                	test   ebx,ebx
c0010fc3:	74 0c                	je     c0010fd1 <SysCloseDir(regs*)+0x3c>
c0010fc5:	83 ec 0c             	sub    esp,0xc
c0010fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fca:	53                   	push   ebx
c0010fcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	31 c0                	xor    eax,eax
c0010fd3:	31 d2                	xor    edx,edx
c0010fd5:	83 c4 08             	add    esp,0x8
c0010fd8:	5b                   	pop    ebx
c0010fd9:	c3                   	ret    
c0010fda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fe4:	83 c4 08             	add    esp,0x8
c0010fe7:	5b                   	pop    ebx
c0010fe8:	c3                   	ret    

c0010fe9 <SysWait(regs*)>:
c0010fe9:	83 ec 10             	sub    esp,0x10
c0010fec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ff0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ff3:	52                   	push   edx
c0010ff4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010ff7:	51                   	push   ecx
c0010ff8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ffb:	50                   	push   eax
c0010ffc:	e8 d3 39 00 00       	call   c00149d4 <waitTask(int, int*, int)>
c0011001:	83 c4 1c             	add    esp,0x1c
c0011004:	99                   	cdq    
c0011005:	c3                   	ret    

c0011006 <SysNotImpl(regs*)>:
c0011006:	83 ec 18             	sub    esp,0x18
c0011009:	68 fe 01 02 c0       	push   0xc00201fe
c001100e:	e8 a8 f3 ff ff       	call   c00103bb <KePanic(char const*)>
c0011013:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011018:	ba ff ff ff ff       	mov    edx,0xffffffff
c001101d:	83 c4 1c             	add    esp,0x1c
c0011020:	c3                   	ret    

c0011021 <SysPanic(regs*)>:
c0011021:	83 ec 18             	sub    esp,0x18
c0011024:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011028:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001102b:	50                   	push   eax
c001102c:	e8 8a f3 ff ff       	call   c00103bb <KePanic(char const*)>
c0011031:	b8 01 00 00 00       	mov    eax,0x1
c0011036:	31 d2                	xor    edx,edx
c0011038:	83 c4 1c             	add    esp,0x1c
c001103b:	c3                   	ret    

c001103c <SysRmdir(regs*)>:
c001103c:	56                   	push   esi
c001103d:	53                   	push   ebx
c001103e:	83 ec 20             	sub    esp,0x20
c0011041:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011045:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011048:	68 14 01 00 00       	push   0x114
c001104d:	e8 13 68 ff ff       	call   c0007865 <malloc>
c0011052:	83 c4 0c             	add    esp,0xc
c0011055:	89 c3                	mov    ebx,eax
c0011057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001105f:	50                   	push   eax
c0011060:	56                   	push   esi
c0011061:	53                   	push   ebx
c0011062:	e8 09 9b ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0011067:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001106a:	e8 39 9d ff ff       	call   c000ada8 <File::unlink()>
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	85 db                	test   ebx,ebx
c0011074:	74 14                	je     c001108a <SysRmdir(regs*)+0x4e>
c0011076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001107a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	53                   	push   ebx
c0011080:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011083:	83 c4 10             	add    esp,0x10
c0011086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001108a:	85 c0                	test   eax,eax
c001108c:	0f 95 c0             	setne  al
c001108f:	31 d2                	xor    edx,edx
c0011091:	25 ff 00 00 00       	and    eax,0xff
c0011096:	f7 d8                	neg    eax
c0011098:	83 d2 00             	adc    edx,0x0
c001109b:	83 c4 14             	add    esp,0x14
c001109e:	f7 da                	neg    edx
c00110a0:	5b                   	pop    ebx
c00110a1:	5e                   	pop    esi
c00110a2:	c3                   	ret    

c00110a3 <SysUnlink(regs*)>:
c00110a3:	56                   	push   esi
c00110a4:	53                   	push   ebx
c00110a5:	83 ec 20             	sub    esp,0x20
c00110a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110ac:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110af:	68 14 01 00 00       	push   0x114
c00110b4:	e8 ac 67 ff ff       	call   c0007865 <malloc>
c00110b9:	83 c4 0c             	add    esp,0xc
c00110bc:	89 c3                	mov    ebx,eax
c00110be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c6:	50                   	push   eax
c00110c7:	56                   	push   esi
c00110c8:	53                   	push   ebx
c00110c9:	e8 a2 9a ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00110ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d1:	e8 d2 9c ff ff       	call   c000ada8 <File::unlink()>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	85 db                	test   ebx,ebx
c00110db:	74 14                	je     c00110f1 <SysUnlink(regs*)+0x4e>
c00110dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00110e3:	83 ec 0c             	sub    esp,0xc
c00110e6:	53                   	push   ebx
c00110e7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110f1:	85 c0                	test   eax,eax
c00110f3:	0f 95 c0             	setne  al
c00110f6:	31 d2                	xor    edx,edx
c00110f8:	25 ff 00 00 00       	and    eax,0xff
c00110fd:	f7 d8                	neg    eax
c00110ff:	83 d2 00             	adc    edx,0x0
c0011102:	83 c4 14             	add    esp,0x14
c0011105:	f7 da                	neg    edx
c0011107:	5b                   	pop    ebx
c0011108:	5e                   	pop    esi
c0011109:	c3                   	ret    

c001110a <SysGetArgv(regs*)>:
c001110a:	83 ec 0c             	sub    esp,0xc
c001110d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011111:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011114:	85 c0                	test   eax,eax
c0011116:	78 2c                	js     c0011144 <SysGetArgv(regs*)+0x3a>
c0011118:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001111e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011121:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011127:	7d 1b                	jge    c0011144 <SysGetArgv(regs*)+0x3a>
c0011129:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011130:	85 c0                	test   eax,eax
c0011132:	74 18                	je     c001114c <SysGetArgv(regs*)+0x42>
c0011134:	83 ec 08             	sub    esp,0x8
c0011137:	50                   	push   eax
c0011138:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001113b:	50                   	push   eax
c001113c:	e8 af f4 fe ff       	call   c00005f0 <strcpy>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	31 c0                	xor    eax,eax
c0011146:	31 d2                	xor    edx,edx
c0011148:	83 c4 0c             	add    esp,0xc
c001114b:	c3                   	ret    
c001114c:	b8 01 00 00 00       	mov    eax,0x1
c0011151:	31 d2                	xor    edx,edx
c0011153:	83 c4 0c             	add    esp,0xc
c0011156:	c3                   	ret    

c0011157 <SysUSleep(regs*)>:
c0011157:	83 ec 1c             	sub    esp,0x1c
c001115a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001115e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011161:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011164:	6a 00                	push   0x0
c0011166:	6a 64                	push   0x64
c0011168:	52                   	push   edx
c0011169:	50                   	push   eax
c001116a:	e8 41 c9 00 00       	call   c001dab0 <__udivdi3>
c001116f:	83 c4 14             	add    esp,0x14
c0011172:	50                   	push   eax
c0011173:	e8 30 39 00 00       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c0011178:	31 c0                	xor    eax,eax
c001117a:	31 d2                	xor    edx,edx
c001117c:	83 c4 1c             	add    esp,0x1c
c001117f:	c3                   	ret    

c0011180 <SysSpawn(regs*)>:
c0011180:	56                   	push   esi
c0011181:	53                   	push   ebx
c0011182:	50                   	push   eax
c0011183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011187:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001118a:	85 c0                	test   eax,eax
c001118c:	75 08                	jne    c0011196 <SysSpawn(regs*)+0x16>
c001118e:	59                   	pop    ecx
c001118f:	31 c0                	xor    eax,eax
c0011191:	31 d2                	xor    edx,edx
c0011193:	5b                   	pop    ebx
c0011194:	5e                   	pop    esi
c0011195:	c3                   	ret    
c0011196:	83 ec 0c             	sub    esp,0xc
c0011199:	68 24 07 00 00       	push   0x724
c001119e:	e8 c2 66 ff ff       	call   c0007865 <malloc>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	89 c6                	mov    esi,eax
c00111a8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ae:	85 c0                	test   eax,eax
c00111b0:	75 33                	jne    c00111e5 <SysSpawn(regs*)+0x65>
c00111b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ba:	52                   	push   edx
c00111bb:	50                   	push   eax
c00111bc:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00111bf:	53                   	push   ebx
c00111c0:	56                   	push   esi
c00111c1:	e8 66 2f 00 00       	call   c001412c <Process::Process(char const*, Process*, char**)>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00111d0:	75 bc                	jne    c001118e <SysSpawn(regs*)+0xe>
c00111d2:	83 ec 0c             	sub    esp,0xc
c00111d5:	56                   	push   esi
c00111d6:	e8 91 34 00 00       	call   c001466c <Process::createUserThread()>
c00111db:	8b 06                	mov    eax,DWORD PTR [esi]
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	99                   	cdq    
c00111e1:	59                   	pop    ecx
c00111e2:	5b                   	pop    ebx
c00111e3:	5e                   	pop    esi
c00111e4:	c3                   	ret    
c00111e5:	31 c0                	xor    eax,eax
c00111e7:	eb d1                	jmp    c00111ba <SysSpawn(regs*)+0x3a>

c00111e9 <SysGetEnv(regs*)>:
c00111e9:	57                   	push   edi
c00111ea:	56                   	push   esi
c00111eb:	53                   	push   ebx
c00111ec:	83 ec 1c             	sub    esp,0x1c
c00111ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111f8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00111fb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00111fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011201:	50                   	push   eax
c0011202:	e8 6c f0 ff ff       	call   c0010273 <Krnl::getProcessTotalEnvCount(Process*)>
c0011207:	83 c4 10             	add    esp,0x10
c001120a:	39 c7                	cmp    edi,eax
c001120c:	7c 14                	jl     c0011222 <SysGetEnv(regs*)+0x39>
c001120e:	85 f6                	test   esi,esi
c0011210:	75 0b                	jne    c001121d <SysGetEnv(regs*)+0x34>
c0011212:	83 c4 10             	add    esp,0x10
c0011215:	31 c0                	xor    eax,eax
c0011217:	5b                   	pop    ebx
c0011218:	31 d2                	xor    edx,edx
c001121a:	5e                   	pop    esi
c001121b:	5f                   	pop    edi
c001121c:	c3                   	ret    
c001121d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011220:	eb f0                	jmp    c0011212 <SysGetEnv(regs*)+0x29>
c0011222:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011226:	52                   	push   edx
c0011227:	57                   	push   edi
c0011228:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001122e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011231:	51                   	push   ecx
c0011232:	50                   	push   eax
c0011233:	e8 5b f0 ff ff       	call   c0010293 <Krnl::getProcessEnvPair(Process*, int)>
c0011238:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001123b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001123f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011243:	83 c4 0c             	add    esp,0xc
c0011246:	85 db                	test   ebx,ebx
c0011248:	75 23                	jne    c001126d <SysGetEnv(regs*)+0x84>
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	50                   	push   eax
c001124e:	e8 dd f2 fe ff       	call   c0000530 <strlen>
c0011253:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011256:	89 c3                	mov    ebx,eax
c0011258:	e8 d3 f2 fe ff       	call   c0000530 <strlen>
c001125d:	31 d2                	xor    edx,edx
c001125f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011263:	83 c4 10             	add    esp,0x10
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	5b                   	pop    ebx
c001126a:	5e                   	pop    esi
c001126b:	5f                   	pop    edi
c001126c:	c3                   	ret    
c001126d:	83 ec 08             	sub    esp,0x8
c0011270:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011273:	50                   	push   eax
c0011274:	56                   	push   esi
c0011275:	e8 76 f3 fe ff       	call   c00005f0 <strcpy>
c001127a:	58                   	pop    eax
c001127b:	5a                   	pop    edx
c001127c:	68 18 02 02 c0       	push   0xc0020218
c0011281:	56                   	push   esi
c0011282:	e8 29 f5 fe ff       	call   c00007b0 <strcat>
c0011287:	59                   	pop    ecx
c0011288:	5b                   	pop    ebx
c0011289:	57                   	push   edi
c001128a:	56                   	push   esi
c001128b:	e8 20 f5 fe ff       	call   c00007b0 <strcat>
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	e9 7a ff ff ff       	jmp    c0011212 <SysGetEnv(regs*)+0x29>

c0011298 <SysSetFatAttrib(regs*)>:
c0011298:	57                   	push   edi
c0011299:	56                   	push   esi
c001129a:	53                   	push   ebx
c001129b:	83 ec 1c             	sub    esp,0x1c
c001129e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00112a2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00112a5:	68 14 01 00 00       	push   0x114
c00112aa:	e8 b6 65 ff ff       	call   c0007865 <malloc>
c00112af:	83 c4 0c             	add    esp,0xc
c00112b2:	89 c3                	mov    ebx,eax
c00112b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112bc:	50                   	push   eax
c00112bd:	57                   	push   edi
c00112be:	53                   	push   ebx
c00112bf:	e8 ac 98 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00112c4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112c7:	83 c4 0c             	add    esp,0xc
c00112ca:	0f b6 d4             	movzx  edx,ah
c00112cd:	25 ff 00 00 00       	and    eax,0xff
c00112d2:	52                   	push   edx
c00112d3:	50                   	push   eax
c00112d4:	53                   	push   ebx
c00112d5:	e8 68 9b ff ff       	call   c000ae42 <File::chfatattr(unsigned char, unsigned char)>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	85 db                	test   ebx,ebx
c00112df:	74 14                	je     c00112f5 <SysSetFatAttrib(regs*)+0x5d>
c00112e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112e7:	83 ec 0c             	sub    esp,0xc
c00112ea:	53                   	push   ebx
c00112eb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112f5:	85 c0                	test   eax,eax
c00112f7:	0f 95 c0             	setne  al
c00112fa:	31 d2                	xor    edx,edx
c00112fc:	25 ff 00 00 00       	and    eax,0xff
c0011301:	f7 d8                	neg    eax
c0011303:	83 d2 00             	adc    edx,0x0
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	f7 da                	neg    edx
c001130b:	5b                   	pop    ebx
c001130c:	5e                   	pop    esi
c001130d:	5f                   	pop    edi
c001130e:	c3                   	ret    

c001130f <SysPipe(regs*)>:
c001130f:	57                   	push   edi
c0011310:	56                   	push   esi
c0011311:	53                   	push   ebx
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001131c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001131f:	6a 20                	push   0x20
c0011321:	e8 3f 65 ff ff       	call   c0007865 <malloc>
c0011326:	89 c3                	mov    ebx,eax
c0011328:	58                   	pop    eax
c0011329:	5a                   	pop    edx
c001132a:	68 00 50 00 00       	push   0x5000
c001132f:	53                   	push   ebx
c0011330:	e8 35 6e ff ff       	call   c000816a <Pipe::Pipe(int)>
c0011335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011338:	e8 b5 7b ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c001133d:	89 07                	mov    DWORD PTR [edi],eax
c001133f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011342:	e8 ab 7b ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	89 06                	mov    DWORD PTR [esi],eax
c001134c:	31 d2                	xor    edx,edx
c001134e:	5b                   	pop    ebx
c001134f:	31 c0                	xor    eax,eax
c0011351:	5e                   	pop    esi
c0011352:	5f                   	pop    edi
c0011353:	c3                   	ret    

c0011354 <SysGetUnixTime(regs*)>:
c0011354:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011359:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001135f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011363:	e9 16 a2 ff ff       	jmp    c000b57e <Clock::timeInSecondsLocal()>

c0011368 <string_ends_with(char const*, char const*)>:
c0011368:	57                   	push   edi
c0011369:	56                   	push   esi
c001136a:	53                   	push   ebx
c001136b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001136f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	53                   	push   ebx
c0011377:	e8 b4 f1 fe ff       	call   c0000530 <strlen>
c001137c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001137f:	89 c6                	mov    esi,eax
c0011381:	e8 aa f1 fe ff       	call   c0000530 <strlen>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	39 c6                	cmp    esi,eax
c001138b:	7d 06                	jge    c0011393 <string_ends_with(char const*, char const*)+0x2b>
c001138d:	5b                   	pop    ebx
c001138e:	31 c0                	xor    eax,eax
c0011390:	5e                   	pop    esi
c0011391:	5f                   	pop    edi
c0011392:	c3                   	ret    
c0011393:	83 ec 08             	sub    esp,0x8
c0011396:	29 c6                	sub    esi,eax
c0011398:	57                   	push   edi
c0011399:	01 f3                	add    ebx,esi
c001139b:	53                   	push   ebx
c001139c:	e8 2f f3 fe ff       	call   c00006d0 <strcmp>
c00113a1:	83 c4 10             	add    esp,0x10
c00113a4:	85 c0                	test   eax,eax
c00113a6:	5b                   	pop    ebx
c00113a7:	0f 94 c0             	sete   al
c00113aa:	5e                   	pop    esi
c00113ab:	25 ff 00 00 00       	and    eax,0xff
c00113b0:	5f                   	pop    edi
c00113b1:	c3                   	ret    

c00113b2 <SysOpen(regs*)>:
c00113b2:	56                   	push   esi
c00113b3:	53                   	push   ebx
c00113b4:	81 ec 04 01 00 00    	sub    esp,0x104
c00113ba:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00113c1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113c4:	85 c9                	test   ecx,ecx
c00113c6:	0f 84 b9 01 00 00    	je     c0011585 <SysOpen(regs*)+0x1d3>
c00113cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113cf:	85 c0                	test   eax,eax
c00113d1:	0f 84 ae 01 00 00    	je     c0011585 <SysOpen(regs*)+0x1d3>
c00113d7:	52                   	push   edx
c00113d8:	68 1a 02 02 c0       	push   0xc002021a
c00113dd:	50                   	push   eax
c00113de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113e2:	56                   	push   esi
c00113e3:	e8 de 95 ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00113e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00113eb:	e8 40 f1 fe ff       	call   c0000530 <strlen>
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	48                   	dec    eax
c00113f4:	74 1d                	je     c0011413 <SysOpen(regs*)+0x61>
c00113f6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00113f9:	eb 0f                	jmp    c001140a <SysOpen(regs*)+0x58>
c00113fb:	80 fa 3a             	cmp    dl,0x3a
c00113fe:	74 0f                	je     c001140f <SysOpen(regs*)+0x5d>
c0011400:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011404:	48                   	dec    eax
c0011405:	74 0c                	je     c0011413 <SysOpen(regs*)+0x61>
c0011407:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001140a:	80 fa 2e             	cmp    dl,0x2e
c001140d:	75 ec                	jne    c00113fb <SysOpen(regs*)+0x49>
c001140f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011413:	83 ec 08             	sub    esp,0x8
c0011416:	68 1e 02 02 c0       	push   0xc002021e
c001141b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001141e:	50                   	push   eax
c001141f:	e8 44 ff ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c0011424:	83 c4 10             	add    esp,0x10
c0011427:	85 c0                	test   eax,eax
c0011429:	74 1d                	je     c0011448 <SysOpen(regs*)+0x96>
c001142b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001142e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001143b:	81 c4 04 01 00 00    	add    esp,0x104
c0011441:	31 c0                	xor    eax,eax
c0011443:	31 d2                	xor    edx,edx
c0011445:	5b                   	pop    ebx
c0011446:	5e                   	pop    esi
c0011447:	c3                   	ret    
c0011448:	83 ec 08             	sub    esp,0x8
c001144b:	68 23 02 02 c0       	push   0xc0020223
c0011450:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011453:	50                   	push   eax
c0011454:	e8 0f ff ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c0011459:	83 c4 10             	add    esp,0x10
c001145c:	85 c0                	test   eax,eax
c001145e:	75 cb                	jne    c001142b <SysOpen(regs*)+0x79>
c0011460:	83 ec 08             	sub    esp,0x8
c0011463:	68 1f 02 02 c0       	push   0xc002021f
c0011468:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001146b:	50                   	push   eax
c001146c:	e8 5f f2 fe ff       	call   c00006d0 <strcmp>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	85 c0                	test   eax,eax
c0011476:	74 b3                	je     c001142b <SysOpen(regs*)+0x79>
c0011478:	83 ec 08             	sub    esp,0x8
c001147b:	68 1e 02 02 c0       	push   0xc002021e
c0011480:	56                   	push   esi
c0011481:	e8 e2 fe ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	85 c0                	test   eax,eax
c001148b:	75 9e                	jne    c001142b <SysOpen(regs*)+0x79>
c001148d:	83 ec 08             	sub    esp,0x8
c0011490:	68 28 02 02 c0       	push   0xc0020228
c0011495:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011498:	50                   	push   eax
c0011499:	e8 ca fe ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c001149e:	83 c4 10             	add    esp,0x10
c00114a1:	85 c0                	test   eax,eax
c00114a3:	0f 85 ef 00 00 00    	jne    c0011598 <SysOpen(regs*)+0x1e6>
c00114a9:	83 ec 08             	sub    esp,0x8
c00114ac:	68 2d 02 02 c0       	push   0xc002022d
c00114b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114b4:	50                   	push   eax
c00114b5:	e8 ae fe ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	85 c0                	test   eax,eax
c00114bf:	0f 85 d3 00 00 00    	jne    c0011598 <SysOpen(regs*)+0x1e6>
c00114c5:	83 ec 08             	sub    esp,0x8
c00114c8:	68 29 02 02 c0       	push   0xc0020229
c00114cd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114d0:	51                   	push   ecx
c00114d1:	e8 fa f1 fe ff       	call   c00006d0 <strcmp>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	85 c0                	test   eax,eax
c00114db:	0f 84 b7 00 00 00    	je     c0011598 <SysOpen(regs*)+0x1e6>
c00114e1:	83 ec 08             	sub    esp,0x8
c00114e4:	68 28 02 02 c0       	push   0xc0020228
c00114e9:	56                   	push   esi
c00114ea:	e8 79 fe ff ff       	call   c0011368 <string_ends_with(char const*, char const*)>
c00114ef:	83 c4 10             	add    esp,0x10
c00114f2:	85 c0                	test   eax,eax
c00114f4:	0f 85 9e 00 00 00    	jne    c0011598 <SysOpen(regs*)+0x1e6>
c00114fa:	83 ec 0c             	sub    esp,0xc
c00114fd:	68 14 01 00 00       	push   0x114
c0011502:	e8 5e 63 ff ff       	call   c0007865 <malloc>
c0011507:	83 c4 0c             	add    esp,0xc
c001150a:	89 c6                	mov    esi,eax
c001150c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011511:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011514:	50                   	push   eax
c0011515:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011518:	52                   	push   edx
c0011519:	56                   	push   esi
c001151a:	e8 51 96 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c001151f:	83 c4 10             	add    esp,0x10
c0011522:	85 f6                	test   esi,esi
c0011524:	74 5f                	je     c0011585 <SysOpen(regs*)+0x1d3>
c0011526:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011529:	89 d0                	mov    eax,edx
c001152b:	25 ff 00 00 00       	and    eax,0xff
c0011530:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011533:	89 d0                	mov    eax,edx
c0011535:	83 e0 01             	and    eax,0x1
c0011538:	f6 c2 02             	test   dl,0x2
c001153b:	74 03                	je     c0011540 <SysOpen(regs*)+0x18e>
c001153d:	83 c8 02             	or     eax,0x2
c0011540:	f6 c2 04             	test   dl,0x4
c0011543:	74 03                	je     c0011548 <SysOpen(regs*)+0x196>
c0011545:	83 c8 04             	or     eax,0x4
c0011548:	f6 c2 08             	test   dl,0x8
c001154b:	74 03                	je     c0011550 <SysOpen(regs*)+0x19e>
c001154d:	83 c8 0a             	or     eax,0xa
c0011550:	83 e2 10             	and    edx,0x10
c0011553:	74 03                	je     c0011558 <SysOpen(regs*)+0x1a6>
c0011555:	83 c8 12             	or     eax,0x12
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	50                   	push   eax
c001155c:	56                   	push   esi
c001155d:	e8 ce 96 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	85 c0                	test   eax,eax
c0011567:	75 1c                	jne    c0011585 <SysOpen(regs*)+0x1d3>
c0011569:	83 ec 0c             	sub    esp,0xc
c001156c:	56                   	push   esi
c001156d:	e8 80 79 ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0011572:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	89 02                	mov    DWORD PTR [edx],eax
c001157a:	c1 f8 1f             	sar    eax,0x1f
c001157d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011580:	e9 b6 fe ff ff       	jmp    c001143b <SysOpen(regs*)+0x89>
c0011585:	81 c4 04 01 00 00    	add    esp,0x104
c001158b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011590:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011595:	5b                   	pop    ebx
c0011596:	5e                   	pop    esi
c0011597:	c3                   	ret    
c0011598:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001159b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00115a1:	e9 8e fe ff ff       	jmp    c0011434 <SysOpen(regs*)+0x82>

c00115a6 <KeSystemCall(regs*, void*)>:
c00115a6:	53                   	push   ebx
c00115a7:	83 ec 08             	sub    esp,0x8
c00115aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00115b1:	83 f8 33             	cmp    eax,0x33
c00115b4:	77 16                	ja     c00115cc <KeSystemCall(regs*, void*)+0x26>
c00115b6:	8b 14 85 00 15 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb00]
c00115bd:	85 d2                	test   edx,edx
c00115bf:	74 0b                	je     c00115cc <KeSystemCall(regs*, void*)+0x26>
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	53                   	push   ebx
c00115c5:	ff d2                	call   edx
c00115c7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00115ca:	eb 0d                	jmp    c00115d9 <KeSystemCall(regs*, void*)+0x33>
c00115cc:	52                   	push   edx
c00115cd:	52                   	push   edx
c00115ce:	50                   	push   eax
c00115cf:	68 32 02 02 c0       	push   0xc0020232
c00115d4:	e8 21 90 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00115e1:	31 d2                	xor    edx,edx
c00115e3:	83 c4 08             	add    esp,0x8
c00115e6:	5b                   	pop    ebx
c00115e7:	c3                   	ret    

c00115e8 <KeSwitchEndian16(unsigned short)>:
c00115e8:	83 ec 04             	sub    esp,0x4
c00115eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115ef:	66 89 04 24          	mov    WORD PTR [esp],ax
c00115f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00115f6:	25 ff ff 00 00       	and    eax,0xffff
c00115fb:	c1 f8 08             	sar    eax,0x8
c00115fe:	89 c2                	mov    edx,eax
c0011600:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011603:	25 ff ff 00 00       	and    eax,0xffff
c0011608:	c1 e0 08             	shl    eax,0x8
c001160b:	09 d0                	or     eax,edx
c001160d:	83 c4 04             	add    esp,0x4
c0011610:	c3                   	ret    
c0011611:	8d 76 00             	lea    esi,[esi+0x0]

c0011614 <KeSwitchEndian32(unsigned int)>:
c0011614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011618:	c1 e8 18             	shr    eax,0x18
c001161b:	89 c2                	mov    edx,eax
c001161d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011621:	c1 e0 08             	shl    eax,0x8
c0011624:	25 00 00 ff 00       	and    eax,0xff0000
c0011629:	09 c2                	or     edx,eax
c001162b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162f:	c1 e8 08             	shr    eax,0x8
c0011632:	25 00 ff 00 00       	and    eax,0xff00
c0011637:	09 c2                	or     edx,eax
c0011639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001163d:	c1 e0 18             	shl    eax,0x18
c0011640:	09 d0                	or     eax,edx
c0011642:	c3                   	ret    
c0011643:	90                   	nop

c0011644 <EthernetCRC32(unsigned char*, int)>:
c0011644:	83 ec 10             	sub    esp,0x10
c0011647:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001164c:	75 0a                	jne    c0011658 <EthernetCRC32(unsigned char*, int)+0x14>
c001164e:	b8 00 00 00 00       	mov    eax,0x0
c0011653:	e9 8c 00 00 00       	jmp    c00116e4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011658:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001165d:	7f 09                	jg     c0011668 <EthernetCRC32(unsigned char*, int)+0x24>
c001165f:	b8 00 00 00 00       	mov    eax,0x0
c0011664:	eb 7e                	jmp    c00116e4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011666:	66 90                	xchg   ax,ax
c0011668:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011670:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001167c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011680:	7d 5a                	jge    c00116dc <EthernetCRC32(unsigned char*, int)+0x98>
c0011682:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011686:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001168a:	01 d0                	add    eax,edx
c001168c:	8a 00                	mov    al,BYTE PTR [eax]
c001168e:	25 ff 00 00 00       	and    eax,0xff
c0011693:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011697:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001169f:	90                   	nop
c00116a0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00116a5:	7f 2d                	jg     c00116d4 <EthernetCRC32(unsigned char*, int)+0x90>
c00116a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ab:	83 e0 01             	and    eax,0x1
c00116ae:	74 10                	je     c00116c0 <EthernetCRC32(unsigned char*, int)+0x7c>
c00116b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b4:	d1 e8                	shr    eax,1
c00116b6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00116bb:	eb 0b                	jmp    c00116c8 <EthernetCRC32(unsigned char*, int)+0x84>
c00116bd:	8d 76 00             	lea    esi,[esi+0x0]
c00116c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c4:	d1 e8                	shr    eax,1
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00116d0:	eb ce                	jmp    c00116a0 <EthernetCRC32(unsigned char*, int)+0x5c>
c00116d2:	66 90                	xchg   ax,ax
c00116d4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00116d8:	eb 9e                	jmp    c0011678 <EthernetCRC32(unsigned char*, int)+0x34>
c00116da:	66 90                	xchg   ax,ax
c00116dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e0:	f7 d0                	not    eax
c00116e2:	66 90                	xchg   ax,ax
c00116e4:	83 c4 10             	add    esp,0x10
c00116e7:	c3                   	ret    

c00116e8 <EthernetReceivedPacket(unsigned char*, unsigned short)>:
c00116e8:	83 ec 04             	sub    esp,0x4
c00116eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116ef:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116f3:	90                   	nop
c00116f4:	83 c4 04             	add    esp,0x4
c00116f7:	c3                   	ret    

c00116f8 <CmOpen(char const*)>:
c00116f8:	57                   	push   edi
c00116f9:	56                   	push   esi
c00116fa:	53                   	push   ebx
c00116fb:	83 ec 1c             	sub    esp,0x1c
c00116fe:	6a 30                	push   0x30
c0011700:	e8 60 61 ff ff       	call   c0007865 <malloc>
c0011705:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001170c:	89 c3                	mov    ebx,eax
c001170e:	e8 52 61 ff ff       	call   c0007865 <malloc>
c0011713:	83 c4 0c             	add    esp,0xc
c0011716:	89 c6                	mov    esi,eax
c0011718:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001171e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011722:	50                   	push   eax
c0011723:	e8 48 94 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0011728:	83 c4 0c             	add    esp,0xc
c001172b:	89 33                	mov    DWORD PTR [ebx],esi
c001172d:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011731:	50                   	push   eax
c0011732:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011736:	50                   	push   eax
c0011737:	56                   	push   esi
c0011738:	e8 9f 97 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c001173d:	5a                   	pop    edx
c001173e:	59                   	pop    ecx
c001173f:	6a 01                	push   0x1
c0011741:	ff 33                	push   DWORD PTR [ebx]
c0011743:	e8 e8 94 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0011748:	5e                   	pop    esi
c0011749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001174d:	e8 13 61 ff ff       	call   c0007865 <malloc>
c0011752:	5a                   	pop    edx
c0011753:	89 c7                	mov    edi,eax
c0011755:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011759:	8b 03                	mov    eax,DWORD PTR [ebx]
c001175b:	8b 10                	mov    edx,DWORD PTR [eax]
c001175d:	56                   	push   esi
c001175e:	57                   	push   edi
c001175f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011763:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011767:	50                   	push   eax
c0011768:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001176b:	83 c4 14             	add    esp,0x14
c001176e:	ff 33                	push   DWORD PTR [ebx]
c0011770:	e8 19 95 ff ff       	call   c000ac8e <File::close()>
c0011775:	59                   	pop    ecx
c0011776:	58                   	pop    eax
c0011777:	6a 13                	push   0x13
c0011779:	ff 33                	push   DWORD PTR [ebx]
c001177b:	e8 b0 94 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0011780:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011782:	8b 10                	mov    edx,DWORD PTR [eax]
c0011784:	89 34 24             	mov    DWORD PTR [esp],esi
c0011787:	57                   	push   edi
c0011788:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001178c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011790:	50                   	push   eax
c0011791:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011794:	83 c4 14             	add    esp,0x14
c0011797:	57                   	push   edi
c0011798:	e8 d8 60 ff ff       	call   c0007875 <free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00117a3:	75 10                	jne    c00117b5 <CmOpen(char const*)+0xbd>
c00117a5:	83 ec 0c             	sub    esp,0xc
c00117a8:	68 46 02 02 c0       	push   0xc0020246
c00117ad:	e8 09 ec ff ff       	call   c00103bb <KePanic(char const*)>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	8d 7b 05             	lea    edi,[ebx+0x5]
c00117b8:	50                   	push   eax
c00117b9:	6a 00                	push   0x0
c00117bb:	6a 00                	push   0x0
c00117bd:	ff 33                	push   DWORD PTR [ebx]
c00117bf:	e8 2a 95 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00117c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00117c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00117cb:	57                   	push   edi
c00117cc:	6a 00                	push   0x0
c00117ce:	6a 2b                	push   0x2b
c00117d0:	50                   	push   eax
c00117d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00117d4:	83 c4 1c             	add    esp,0x1c
c00117d7:	6a 00                	push   0x0
c00117d9:	6a 00                	push   0x0
c00117db:	ff 33                	push   DWORD PTR [ebx]
c00117dd:	e8 0c 95 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00117e2:	83 c4 0c             	add    esp,0xc
c00117e5:	6a 08                	push   0x8
c00117e7:	68 57 02 02 c0       	push   0xc0020257
c00117ec:	57                   	push   edi
c00117ed:	e8 8e eb fe ff       	call   c0000380 <memcmp>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	85 c0                	test   eax,eax
c00117f7:	74 10                	je     c0011809 <CmOpen(char const*)+0x111>
c00117f9:	83 ec 0c             	sub    esp,0xc
c00117fc:	68 60 02 02 c0       	push   0xc0020260
c0011801:	e8 b5 eb ff ff       	call   c00103bb <KePanic(char const*)>
c0011806:	83 c4 10             	add    esp,0x10
c0011809:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001180d:	89 d8                	mov    eax,ebx
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	5b                   	pop    ebx
c0011813:	5e                   	pop    esi
c0011814:	5f                   	pop    edi
c0011815:	c3                   	ret    

c0011816 <CmClose(Reghive_Tag*)>:
c0011816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001181a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001181e:	74 0b                	je     c001182b <CmClose(Reghive_Tag*)+0x15>
c0011820:	8b 00                	mov    eax,DWORD PTR [eax]
c0011822:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011826:	e9 63 94 ff ff       	jmp    c000ac8e <File::close()>
c001182b:	c3                   	ret    

c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c001182c:	57                   	push   edi
c001182d:	56                   	push   esi
c001182e:	53                   	push   ebx
c001182f:	83 ec 10             	sub    esp,0x10
c0011832:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011836:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001183a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001183e:	80 7f 04 00          	cmp    BYTE PTR [edi+0x4],0x0
c0011842:	74 4f                	je     c0011893 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011844:	50                   	push   eax
c0011845:	6b c3 2b             	imul   eax,ebx,0x2b
c0011848:	99                   	cdq    
c0011849:	52                   	push   edx
c001184a:	50                   	push   eax
c001184b:	ff 37                	push   DWORD PTR [edi]
c001184d:	e8 9c 94 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011852:	5a                   	pop    edx
c0011853:	8b 07                	mov    eax,DWORD PTR [edi]
c0011855:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011859:	8b 10                	mov    edx,DWORD PTR [eax]
c001185b:	51                   	push   ecx
c001185c:	56                   	push   esi
c001185d:	6a 00                	push   0x0
c001185f:	6a 2b                	push   0x2b
c0011861:	50                   	push   eax
c0011862:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011865:	83 c4 20             	add    esp,0x20
c0011868:	85 db                	test   ebx,ebx
c001186a:	74 27                	je     c0011893 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c001186c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001186e:	89 c8                	mov    eax,ecx
c0011870:	85 c9                	test   ecx,ecx
c0011872:	74 1d                	je     c0011891 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x65>
c0011874:	6a 00                	push   0x0
c0011876:	b8 49 91 17 17       	mov    eax,0x17179149
c001187b:	68 00 28 6b ee       	push   0xee6b2800
c0011880:	f7 e1                	mul    ecx
c0011882:	52                   	push   edx
c0011883:	50                   	push   eax
c0011884:	e8 27 c3 00 00       	call   c001dbb0 <__umoddi3>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	6b cb 13             	imul   ecx,ebx,0x13
c001188f:	29 c8                	sub    eax,ecx
c0011891:	89 06                	mov    DWORD PTR [esi],eax
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	5b                   	pop    ebx
c0011897:	5e                   	pop    esi
c0011898:	5f                   	pop    edi
c0011899:	c3                   	ret    

c001189a <CmGetString(Reghive_Tag*, int, char*)>:
c001189a:	55                   	push   ebp
c001189b:	57                   	push   edi
c001189c:	56                   	push   esi
c001189d:	53                   	push   ebx
c001189e:	31 db                	xor    ebx,ebx
c00118a0:	83 ec 70             	sub    esp,0x70
c00118a3:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00118aa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00118ae:	50                   	push   eax
c00118af:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00118b6:	55                   	push   ebp
c00118b7:	e8 70 ff ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00118c4:	c1 e0 08             	shl    eax,0x8
c00118c7:	89 c2                	mov    edx,eax
c00118c9:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00118ce:	09 d0                	or     eax,edx
c00118d0:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00118d5:	c1 e0 08             	shl    eax,0x8
c00118d8:	09 d0                	or     eax,edx
c00118da:	74 25                	je     c0011901 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00118dc:	6b fb 0d             	imul   edi,ebx,0xd
c00118df:	52                   	push   edx
c00118e0:	8d 54 24 39          	lea    edx,[esp+0x39]
c00118e4:	52                   	push   edx
c00118e5:	50                   	push   eax
c00118e6:	55                   	push   ebp
c00118e7:	e8 40 ff ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118ec:	8d 74 24 49          	lea    esi,[esp+0x49]
c00118f0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00118f7:	b9 27 00 00 00       	mov    ecx,0x27
c00118fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	83 c3 03             	add    ebx,0x3
c0011904:	83 fb 15             	cmp    ebx,0x15
c0011907:	75 b6                	jne    c00118bf <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011909:	83 c4 6c             	add    esp,0x6c
c001190c:	5b                   	pop    ebx
c001190d:	5e                   	pop    esi
c001190e:	5f                   	pop    edi
c001190f:	5d                   	pop    ebp
c0011910:	c3                   	ret    

c0011911 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011911:	83 ec 40             	sub    esp,0x40
c0011914:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011918:	50                   	push   eax
c0011919:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001191d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011921:	e8 06 ff ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	83 c8 ff             	or     eax,0xffffffff
c001192c:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011931:	75 19                	jne    c001194c <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011933:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011938:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001193d:	c1 e0 08             	shl    eax,0x8
c0011940:	09 c2                	or     edx,eax
c0011942:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011947:	c1 e0 10             	shl    eax,0x10
c001194a:	09 d0                	or     eax,edx
c001194c:	83 c4 3c             	add    esp,0x3c
c001194f:	c3                   	ret    

c0011950 <CmGetNext(Reghive_Tag*, int)>:
c0011950:	83 ec 40             	sub    esp,0x40
c0011953:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011957:	50                   	push   eax
c0011958:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001195c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011960:	e8 c7 fe ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011965:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001196a:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001196f:	c1 e0 08             	shl    eax,0x8
c0011972:	09 c2                	or     edx,eax
c0011974:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011979:	83 c4 4c             	add    esp,0x4c
c001197c:	c1 e0 10             	shl    eax,0x10
c001197f:	09 d0                	or     eax,edx
c0011981:	c3                   	ret    

c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011982:	55                   	push   ebp
c0011983:	57                   	push   edi
c0011984:	56                   	push   esi
c0011985:	53                   	push   ebx
c0011986:	83 ec 1c             	sub    esp,0x1c
c0011989:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001198d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011991:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011995:	74 69                	je     c0011a00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x7e>
c0011997:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001199c:	74 3c                	je     c00119da <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x58>
c001199e:	31 d2                	xor    edx,edx
c00119a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119a3:	89 d7                	mov    edi,edx
c00119a5:	09 c7                	or     edi,eax
c00119a7:	74 2e                	je     c00119d7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x55>
c00119a9:	6b 74 24 34 13       	imul   esi,DWORD PTR [esp+0x34],0x13
c00119ae:	6a 00                	push   0x0
c00119b0:	89 f7                	mov    edi,esi
c00119b2:	68 00 28 6b ee       	push   0xee6b2800
c00119b7:	c1 ff 1f             	sar    edi,0x1f
c00119ba:	01 f0                	add    eax,esi
c00119bc:	be f9 e0 66 d1       	mov    esi,0xd166e0f9
c00119c1:	11 fa                	adc    edx,edi
c00119c3:	69 ca f9 e0 66 d1    	imul   ecx,edx,0xd166e0f9
c00119c9:	f7 e6                	mul    esi
c00119cb:	01 ca                	add    edx,ecx
c00119cd:	52                   	push   edx
c00119ce:	50                   	push   eax
c00119cf:	e8 dc c1 00 00       	call   c001dbb0 <__umoddi3>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00119da:	50                   	push   eax
c00119db:	6b 44 24 38 2b       	imul   eax,DWORD PTR [esp+0x38],0x2b
c00119e0:	99                   	cdq    
c00119e1:	52                   	push   edx
c00119e2:	50                   	push   eax
c00119e3:	ff 33                	push   DWORD PTR [ebx]
c00119e5:	e8 04 93 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00119ea:	5a                   	pop    edx
c00119eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00119f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00119f3:	51                   	push   ecx
c00119f4:	55                   	push   ebp
c00119f5:	6a 00                	push   0x0
c00119f7:	6a 2b                	push   0x2b
c00119f9:	50                   	push   eax
c00119fa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00119fd:	83 c4 20             	add    esp,0x20
c0011a00:	83 c4 1c             	add    esp,0x1c
c0011a03:	5b                   	pop    ebx
c0011a04:	5e                   	pop    esi
c0011a05:	5f                   	pop    edi
c0011a06:	5d                   	pop    ebp
c0011a07:	c3                   	ret    

c0011a08 <CmFreeExtent(Reghive_Tag*, int)>:
c0011a08:	53                   	push   ebx
c0011a09:	83 ec 3c             	sub    esp,0x3c
c0011a0c:	6a 2b                	push   0x2b
c0011a0e:	6a 00                	push   0x0
c0011a10:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011a14:	53                   	push   ebx
c0011a15:	e8 a6 ea fe ff       	call   c00004c0 <memset>
c0011a1a:	83 c4 0c             	add    esp,0xc
c0011a1d:	53                   	push   ebx
c0011a1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a26:	e8 57 ff ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a2b:	83 c4 48             	add    esp,0x48
c0011a2e:	5b                   	pop    ebx
c0011a2f:	c3                   	ret    

c0011a30 <CmUpdateHeader(Reghive_Tag*)>:
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a37:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011a3b:	74 10                	je     c0011a4d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011a3d:	52                   	push   edx
c0011a3e:	8d 50 05             	lea    edx,[eax+0x5]
c0011a41:	52                   	push   edx
c0011a42:	6a 00                	push   0x0
c0011a44:	50                   	push   eax
c0011a45:	e8 38 ff ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	83 c4 0c             	add    esp,0xc
c0011a50:	c3                   	ret    

c0011a51 <CmExpand(Reghive_Tag*, int)>:
c0011a51:	57                   	push   edi
c0011a52:	56                   	push   esi
c0011a53:	83 ce ff             	or     esi,0xffffffff
c0011a56:	53                   	push   ebx
c0011a57:	83 ec 30             	sub    esp,0x30
c0011a5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a5e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a62:	74 5f                	je     c0011ac3 <CmExpand(Reghive_Tag*, int)+0x72>
c0011a64:	31 d2                	xor    edx,edx
c0011a66:	31 f6                	xor    esi,esi
c0011a68:	50                   	push   eax
c0011a69:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011a6d:	52                   	push   edx
c0011a6e:	50                   	push   eax
c0011a6f:	ff 33                	push   DWORD PTR [ebx]
c0011a71:	e8 78 92 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011a76:	83 c4 0c             	add    esp,0xc
c0011a79:	6a 2b                	push   0x2b
c0011a7b:	6a 00                	push   0x0
c0011a7d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011a81:	57                   	push   edi
c0011a82:	e8 39 ea fe ff       	call   c00004c0 <memset>
c0011a87:	83 c4 10             	add    esp,0x10
c0011a8a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011a8e:	7d 1b                	jge    c0011aab <CmExpand(Reghive_Tag*, int)+0x5a>
c0011a90:	83 ec 0c             	sub    esp,0xc
c0011a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a95:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011a99:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a9b:	46                   	inc    esi
c0011a9c:	51                   	push   ecx
c0011a9d:	57                   	push   edi
c0011a9e:	6a 00                	push   0x0
c0011aa0:	6a 2b                	push   0x2b
c0011aa2:	50                   	push   eax
c0011aa3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011aa6:	83 c4 20             	add    esp,0x20
c0011aa9:	eb df                	jmp    c0011a8a <CmExpand(Reghive_Tag*, int)+0x39>
c0011aab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011aaf:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011ab2:	83 ec 0c             	sub    esp,0xc
c0011ab5:	01 f2                	add    edx,esi
c0011ab7:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011aba:	53                   	push   ebx
c0011abb:	e8 70 ff ff ff       	call   c0011a30 <CmUpdateHeader(Reghive_Tag*)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	83 c4 30             	add    esp,0x30
c0011ac6:	89 f0                	mov    eax,esi
c0011ac8:	5b                   	pop    ebx
c0011ac9:	5e                   	pop    esi
c0011aca:	5f                   	pop    edi
c0011acb:	c3                   	ret    

c0011acc <CmFindUnusedExtent(Reghive_Tag*)>:
c0011acc:	55                   	push   ebp
c0011acd:	57                   	push   edi
c0011ace:	56                   	push   esi
c0011acf:	53                   	push   ebx
c0011ad0:	83 cb ff             	or     ebx,0xffffffff
c0011ad3:	83 ec 1c             	sub    esp,0x1c
c0011ad6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011ada:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011ade:	74 68                	je     c0011b48 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011ae0:	be 2b 00 00 00       	mov    esi,0x2b
c0011ae5:	51                   	push   ecx
c0011ae6:	31 ff                	xor    edi,edi
c0011ae8:	6a 00                	push   0x0
c0011aea:	31 db                	xor    ebx,ebx
c0011aec:	6a 00                	push   0x0
c0011aee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011af1:	e8 f8 91 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011afc:	76 3b                	jbe    c0011b39 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b04:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b08:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b0a:	51                   	push   ecx
c0011b0b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011b0f:	51                   	push   ecx
c0011b10:	6a 00                	push   0x0
c0011b12:	6a 01                	push   0x1
c0011b14:	50                   	push   eax
c0011b15:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b18:	83 c4 20             	add    esp,0x20
c0011b1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b20:	74 26                	je     c0011b48 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b22:	43                   	inc    ebx
c0011b23:	52                   	push   edx
c0011b24:	57                   	push   edi
c0011b25:	56                   	push   esi
c0011b26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b29:	e8 c0 91 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011b2e:	83 c6 2b             	add    esi,0x2b
c0011b31:	83 d7 00             	adc    edi,0x0
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	eb c0                	jmp    c0011af9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011b39:	50                   	push   eax
c0011b3a:	50                   	push   eax
c0011b3b:	6a 40                	push   0x40
c0011b3d:	55                   	push   ebp
c0011b3e:	e8 0e ff ff ff       	call   c0011a51 <CmExpand(Reghive_Tag*, int)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	89 c3                	mov    ebx,eax
c0011b48:	83 c4 1c             	add    esp,0x1c
c0011b4b:	89 d8                	mov    eax,ebx
c0011b4d:	5b                   	pop    ebx
c0011b4e:	5e                   	pop    esi
c0011b4f:	5f                   	pop    edi
c0011b50:	5d                   	pop    ebp
c0011b51:	c3                   	ret    

c0011b52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011b52:	55                   	push   ebp
c0011b53:	57                   	push   edi
c0011b54:	56                   	push   esi
c0011b55:	53                   	push   ebx
c0011b56:	81 ec 88 00 00 00    	sub    esp,0x88
c0011b5c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011b63:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b6a:	e8 5d ff ff ff       	call   c0011acc <CmFindUnusedExtent(Reghive_Tag*)>
c0011b6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b73:	83 c4 0c             	add    esp,0xc
c0011b76:	6a 2b                	push   0x2b
c0011b78:	6a 00                	push   0x0
c0011b7a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011b7e:	55                   	push   ebp
c0011b7f:	e8 3c e9 fe ff       	call   c00004c0 <memset>
c0011b84:	83 c4 10             	add    esp,0x10
c0011b87:	85 db                	test   ebx,ebx
c0011b89:	74 12                	je     c0011b9d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011b8b:	51                   	push   ecx
c0011b8c:	55                   	push   ebp
c0011b8d:	53                   	push   ebx
c0011b8e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b95:	e8 92 fc ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b9a:	83 c4 10             	add    esp,0x10
c0011b9d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011ba1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011ba8:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011bad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011baf:	85 db                	test   ebx,ebx
c0011bb1:	74 49                	je     c0011bfc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011bb3:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011bb8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc1:	c1 e0 08             	shl    eax,0x8
c0011bc4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011bca:	09 c8                	or     eax,ecx
c0011bcc:	74 11                	je     c0011bdf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011bce:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011bd2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011bd6:	c1 e8 10             	shr    eax,0x10
c0011bd9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011bdd:	eb 0f                	jmp    c0011bee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011bdf:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011be4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011be9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011bee:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011bf2:	c1 ea 08             	shr    edx,0x8
c0011bf5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011bfa:	eb 0f                	jmp    c0011c0b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011bfc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c01:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c06:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c0b:	52                   	push   edx
c0011c0c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011c10:	50                   	push   eax
c0011c11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c15:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c1c:	e8 61 fd ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c21:	83 c4 10             	add    esp,0x10
c0011c24:	85 db                	test   ebx,ebx
c0011c26:	74 12                	je     c0011c3a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011c28:	50                   	push   eax
c0011c29:	55                   	push   ebp
c0011c2a:	53                   	push   ebx
c0011c2b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c32:	e8 4b fd ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c37:	83 c4 10             	add    esp,0x10
c0011c3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c3e:	83 c4 7c             	add    esp,0x7c
c0011c41:	5b                   	pop    ebx
c0011c42:	5e                   	pop    esi
c0011c43:	5f                   	pop    edi
c0011c44:	5d                   	pop    ebp
c0011c45:	c3                   	ret    

c0011c46 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011c46:	55                   	push   ebp
c0011c47:	57                   	push   edi
c0011c48:	56                   	push   esi
c0011c49:	53                   	push   ebx
c0011c4a:	bb 27 00 00 00       	mov    ebx,0x27
c0011c4f:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c55:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c5c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011c63:	e8 c8 e8 fe ff       	call   c0000530 <strlen>
c0011c68:	8d 48 26             	lea    ecx,[eax+0x26]
c0011c6b:	89 c8                	mov    eax,ecx
c0011c6d:	99                   	cdq    
c0011c6e:	f7 fb                	idiv   ebx
c0011c70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011c7d:	7e 10                	jle    c0011c8f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	68 71 02 02 c0       	push   0xc0020271
c0011c87:	e8 2f e7 ff ff       	call   c00103bb <KePanic(char const*)>
c0011c8c:	83 c4 10             	add    esp,0x10
c0011c8f:	31 ff                	xor    edi,edi
c0011c91:	50                   	push   eax
c0011c92:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011c96:	53                   	push   ebx
c0011c97:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c9e:	56                   	push   esi
c0011c9f:	e8 88 fb ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ca4:	83 c4 10             	add    esp,0x10
c0011ca7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011cab:	89 d0                	mov    eax,edx
c0011cad:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011cb1:	c1 e0 08             	shl    eax,0x8
c0011cb4:	09 c2                	or     edx,eax
c0011cb6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011cba:	c1 e2 08             	shl    edx,0x8
c0011cbd:	09 c2                	or     edx,eax
c0011cbf:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011cc3:	7e 76                	jle    c0011d3b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011cc5:	85 d2                	test   edx,edx
c0011cc7:	75 25                	jne    c0011cee <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011cc9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011cce:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011cd2:	50                   	push   eax
c0011cd3:	6a 00                	push   0x0
c0011cd5:	6a 00                	push   0x0
c0011cd7:	56                   	push   esi
c0011cd8:	e8 75 fe ff ff       	call   c0011b52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	89 c2                	mov    edx,eax
c0011ce2:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011ce5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011ce8:	c1 f8 10             	sar    eax,0x10
c0011ceb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011cee:	55                   	push   ebp
c0011cef:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011cf3:	55                   	push   ebp
c0011cf4:	52                   	push   edx
c0011cf5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011cf9:	56                   	push   esi
c0011cfa:	e8 2d fb ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cff:	83 c4 0c             	add    esp,0xc
c0011d02:	6a 27                	push   0x27
c0011d04:	6a 00                	push   0x0
c0011d06:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d0a:	51                   	push   ecx
c0011d0b:	e8 b0 e7 fe ff       	call   c00004c0 <memset>
c0011d10:	83 c4 0c             	add    esp,0xc
c0011d13:	6b c7 27             	imul   eax,edi,0x27
c0011d16:	6a 27                	push   0x27
c0011d18:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011d1f:	50                   	push   eax
c0011d20:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d24:	51                   	push   ecx
c0011d25:	e8 f6 e8 fe ff       	call   c0000620 <strncpy>
c0011d2a:	83 c4 0c             	add    esp,0xc
c0011d2d:	55                   	push   ebp
c0011d2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d32:	52                   	push   edx
c0011d33:	56                   	push   esi
c0011d34:	e8 49 fc ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d39:	eb 19                	jmp    c0011d54 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011d3b:	85 d2                	test   edx,edx
c0011d3d:	74 18                	je     c0011d57 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011d3f:	51                   	push   ecx
c0011d40:	51                   	push   ecx
c0011d41:	52                   	push   edx
c0011d42:	56                   	push   esi
c0011d43:	e8 c0 fc ff ff       	call   c0011a08 <CmFreeExtent(Reghive_Tag*, int)>
c0011d48:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011d4c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011d50:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	47                   	inc    edi
c0011d58:	83 c3 03             	add    ebx,0x3
c0011d5b:	83 ff 07             	cmp    edi,0x7
c0011d5e:	0f 85 43 ff ff ff    	jne    c0011ca7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011d64:	50                   	push   eax
c0011d65:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011d69:	50                   	push   eax
c0011d6a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d71:	56                   	push   esi
c0011d72:	e8 0b fc ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d77:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011d7d:	5b                   	pop    ebx
c0011d7e:	5e                   	pop    esi
c0011d7f:	5f                   	pop    edi
c0011d80:	5d                   	pop    ebp
c0011d81:	c3                   	ret    

c0011d82 <CmGetMatch(char*, char*, bool, bool*)>:
c0011d82:	56                   	push   esi
c0011d83:	53                   	push   ebx
c0011d84:	50                   	push   eax
c0011d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011d89:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011d8e:	74 25                	je     c0011db5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011d90:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011d93:	31 db                	xor    ebx,ebx
c0011d95:	50                   	push   eax
c0011d96:	50                   	push   eax
c0011d97:	8d 04 9d e0 15 02 c0 	lea    eax,[ebx*4-0x3ffdea20]
c0011d9e:	50                   	push   eax
c0011d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011da3:	e8 28 e9 fe ff       	call   c00006d0 <strcmp>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	85 c0                	test   eax,eax
c0011dad:	74 2e                	je     c0011ddd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011daf:	43                   	inc    ebx
c0011db0:	83 fb 3f             	cmp    ebx,0x3f
c0011db3:	75 e0                	jne    c0011d95 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011db5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011db8:	31 db                	xor    ebx,ebx
c0011dba:	8d 04 9d e0 15 02 c0 	lea    eax,[ebx*4-0x3ffdea20]
c0011dc1:	51                   	push   ecx
c0011dc2:	51                   	push   ecx
c0011dc3:	50                   	push   eax
c0011dc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dc8:	e8 03 e9 fe ff       	call   c00006d0 <strcmp>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	85 c0                	test   eax,eax
c0011dd2:	74 09                	je     c0011ddd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011dd4:	43                   	inc    ebx
c0011dd5:	83 fb 3f             	cmp    ebx,0x3f
c0011dd8:	75 e0                	jne    c0011dba <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011dda:	83 cb ff             	or     ebx,0xffffffff
c0011ddd:	89 d8                	mov    eax,ebx
c0011ddf:	5a                   	pop    edx
c0011de0:	5b                   	pop    ebx
c0011de1:	5e                   	pop    esi
c0011de2:	c3                   	ret    

c0011de3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011de3:	55                   	push   ebp
c0011de4:	31 c0                	xor    eax,eax
c0011de6:	57                   	push   edi
c0011de7:	56                   	push   esi
c0011de8:	53                   	push   ebx
c0011de9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ded:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011df1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011df3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011df7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011dfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dfe:	83 fd 1f             	cmp    ebp,0x1f
c0011e01:	7f 0b                	jg     c0011e0e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011e03:	0f b6 c2             	movzx  eax,dl
c0011e06:	d3 e0                	shl    eax,cl
c0011e08:	09 07                	or     DWORD PTR [edi],eax
c0011e0a:	b0 01                	mov    al,0x1
c0011e0c:	01 33                	add    DWORD PTR [ebx],esi
c0011e0e:	5b                   	pop    ebx
c0011e0f:	5e                   	pop    esi
c0011e10:	5f                   	pop    edi
c0011e11:	5d                   	pop    ebp
c0011e12:	c3                   	ret    

c0011e13 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011e13:	57                   	push   edi
c0011e14:	56                   	push   esi
c0011e15:	53                   	push   ebx
c0011e16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e1e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011e22:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e26:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011e28:	7c 17                	jl     c0011e41 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011e2a:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e2c:	b8 01 00 00 00       	mov    eax,0x1
c0011e31:	d3 e0                	shl    eax,cl
c0011e33:	48                   	dec    eax
c0011e34:	21 d0                	and    eax,edx
c0011e36:	d3 ea                	shr    edx,cl
c0011e38:	89 17                	mov    DWORD PTR [edi],edx
c0011e3a:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011e3c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e3f:	eb 05                	jmp    c0011e46 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011e41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e44:	31 c0                	xor    eax,eax
c0011e46:	5b                   	pop    ebx
c0011e47:	5e                   	pop    esi
c0011e48:	5f                   	pop    edi
c0011e49:	c3                   	ret    

c0011e4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011e4a:	83 ec 40             	sub    esp,0x40
c0011e4d:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e51:	50                   	push   eax
c0011e52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e5a:	e8 cd f9 ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e5f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e63:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011e67:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011e6b:	89 10                	mov    DWORD PTR [eax],edx
c0011e6d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011e70:	83 c4 4c             	add    esp,0x4c
c0011e73:	c3                   	ret    

c0011e74 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011e74:	55                   	push   ebp
c0011e75:	57                   	push   edi
c0011e76:	56                   	push   esi
c0011e77:	53                   	push   ebx
c0011e78:	83 ec 40             	sub    esp,0x40
c0011e7b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011e7f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011e83:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011e87:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011e8b:	53                   	push   ebx
c0011e8c:	56                   	push   esi
c0011e8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e91:	e8 96 f9 ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e96:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011e9a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011e9e:	83 c4 0c             	add    esp,0xc
c0011ea1:	53                   	push   ebx
c0011ea2:	56                   	push   esi
c0011ea3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011ea7:	e8 d6 fa ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011eac:	83 c4 4c             	add    esp,0x4c
c0011eaf:	5b                   	pop    ebx
c0011eb0:	5e                   	pop    esi
c0011eb1:	5f                   	pop    edi
c0011eb2:	5d                   	pop    ebp
c0011eb3:	c3                   	ret    

c0011eb4 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011eb4:	55                   	push   ebp
c0011eb5:	57                   	push   edi
c0011eb6:	56                   	push   esi
c0011eb7:	31 f6                	xor    esi,esi
c0011eb9:	53                   	push   ebx
c0011eba:	31 db                	xor    ebx,ebx
c0011ebc:	83 ec 40             	sub    esp,0x40
c0011ebf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ec7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ecf:	6a 12                	push   0x12
c0011ed1:	68 ee 00 00 00       	push   0xee
c0011ed6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011eda:	e8 e1 e5 fe ff       	call   c00004c0 <memset>
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	6a 08                	push   0x8
c0011ee4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ee8:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011eec:	50                   	push   eax
c0011eed:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011ef1:	57                   	push   edi
c0011ef2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011ef6:	55                   	push   ebp
c0011ef7:	e8 e7 fe ff ff       	call   c0011de3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f03:	50                   	push   eax
c0011f04:	6a 06                	push   0x6
c0011f06:	57                   	push   edi
c0011f07:	55                   	push   ebp
c0011f08:	e8 06 ff ff ff       	call   c0011e13 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f15:	74 07                	je     c0011f1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011f17:	46                   	inc    esi
c0011f18:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011f1c:	eb e1                	jmp    c0011eff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011f1e:	43                   	inc    ebx
c0011f1f:	83 fb 12             	cmp    ebx,0x12
c0011f22:	75 be                	jne    c0011ee2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011f24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f28:	31 db                	xor    ebx,ebx
c0011f2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f2d:	50                   	push   eax
c0011f2e:	50                   	push   eax
c0011f2f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011f34:	43                   	inc    ebx
c0011f35:	8d 04 85 e0 15 02 c0 	lea    eax,[eax*4-0x3ffdea20]
c0011f3c:	50                   	push   eax
c0011f3d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f41:	e8 6a e8 fe ff       	call   c00007b0 <strcat>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	83 fb 18             	cmp    ebx,0x18
c0011f4c:	75 df                	jne    c0011f2d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011f4e:	83 c4 3c             	add    esp,0x3c
c0011f51:	31 c0                	xor    eax,eax
c0011f53:	5b                   	pop    ebx
c0011f54:	5e                   	pop    esi
c0011f55:	5f                   	pop    edi
c0011f56:	5d                   	pop    ebp
c0011f57:	c3                   	ret    

c0011f58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011f58:	83 ec 40             	sub    esp,0x40
c0011f5b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f5f:	50                   	push   eax
c0011f60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f68:	e8 bf f8 ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f6d:	58                   	pop    eax
c0011f6e:	5a                   	pop    edx
c0011f6f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011f73:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011f77:	50                   	push   eax
c0011f78:	e8 37 ff ff ff       	call   c0011eb4 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011f7d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011f82:	83 c4 4c             	add    esp,0x4c
c0011f85:	c3                   	ret    

c0011f86 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011f86:	55                   	push   ebp
c0011f87:	57                   	push   edi
c0011f88:	56                   	push   esi
c0011f89:	53                   	push   ebx
c0011f8a:	31 db                	xor    ebx,ebx
c0011f8c:	83 ec 70             	sub    esp,0x70
c0011f8f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0011f96:	6a 30                	push   0x30
c0011f98:	6a 00                	push   0x0
c0011f9a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011f9e:	56                   	push   esi
c0011f9f:	e8 1c e5 fe ff       	call   c00004c0 <memset>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	83 ec 0c             	sub    esp,0xc
c0011faa:	57                   	push   edi
c0011fab:	e8 80 e5 fe ff       	call   c0000530 <strlen>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	39 d8                	cmp    eax,ebx
c0011fb5:	76 16                	jbe    c0011fcd <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0011fb7:	83 ec 0c             	sub    esp,0xc
c0011fba:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011fbe:	50                   	push   eax
c0011fbf:	e8 dc e8 fe ff       	call   c00008a0 <toupper>
c0011fc4:	83 c4 10             	add    esp,0x10
c0011fc7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011fca:	43                   	inc    ebx
c0011fcb:	eb da                	jmp    c0011fa7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0011fcd:	31 f6                	xor    esi,esi
c0011fcf:	52                   	push   edx
c0011fd0:	31 ff                	xor    edi,edi
c0011fd2:	6a 18                	push   0x18
c0011fd4:	6a 3f                	push   0x3f
c0011fd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011fda:	50                   	push   eax
c0011fdb:	e8 e0 e4 fe ff       	call   c00004c0 <memset>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011fe7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011feb:	84 c0                	test   al,al
c0011fed:	0f 84 b0 00 00 00    	je     c00120a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011ff3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0011ff7:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0011ffc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012000:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012005:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001200f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012013:	53                   	push   ebx
c0012014:	e8 17 e5 fe ff       	call   c0000530 <strlen>
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	85 c0                	test   eax,eax
c001201e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012022:	74 0b                	je     c001202f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012024:	50                   	push   eax
c0012025:	6a 01                	push   0x1
c0012027:	53                   	push   ebx
c0012028:	8d 44 24 20          	lea    eax,[esp+0x20]
c001202c:	50                   	push   eax
c001202d:	eb 0a                	jmp    c0012039 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001202f:	50                   	push   eax
c0012030:	6a 00                	push   0x0
c0012032:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012036:	50                   	push   eax
c0012037:	6a 00                	push   0x0
c0012039:	e8 44 fd ff ff       	call   c0011d82 <CmGetMatch(char*, char*, bool, bool*)>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	83 f8 ff             	cmp    eax,0xffffffff
c0012044:	75 1a                	jne    c0012060 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012046:	83 ec 0c             	sub    esp,0xc
c0012049:	68 86 02 02 c0       	push   0xc0020286
c001204e:	e8 68 e3 ff ff       	call   c00103bb <KePanic(char const*)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	b8 02 00 00 00       	mov    eax,0x2
c001205b:	e9 bc 00 00 00       	jmp    c001211c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012060:	83 ff 18             	cmp    edi,0x18
c0012063:	75 1a                	jne    c001207f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012065:	83 ec 0c             	sub    esp,0xc
c0012068:	68 9b 02 02 c0       	push   0xc002029b
c001206d:	e8 49 e3 ff ff       	call   c00103bb <KePanic(char const*)>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	b8 01 00 00 00       	mov    eax,0x1
c001207a:	e9 9d 00 00 00       	jmp    c001211c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001207f:	47                   	inc    edi
c0012080:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012085:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012089:	74 02                	je     c001208d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001208b:	89 ee                	mov    esi,ebp
c001208d:	83 ec 0c             	sub    esp,0xc
c0012090:	53                   	push   ebx
c0012091:	e8 9a e4 fe ff       	call   c0000530 <strlen>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	85 c0                	test   eax,eax
c001209b:	74 06                	je     c00120a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001209d:	46                   	inc    esi
c001209e:	e9 40 ff ff ff       	jmp    c0011fe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00120a3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00120ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120b3:	31 f6                	xor    esi,esi
c00120b5:	50                   	push   eax
c00120b6:	31 ff                	xor    edi,edi
c00120b8:	6a 12                	push   0x12
c00120ba:	68 ee 00 00 00       	push   0xee
c00120bf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00120c6:	e8 f5 e3 fe ff       	call   c00004c0 <memset>
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	83 fe 17             	cmp    esi,0x17
c00120d1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00120d5:	7e 26                	jle    c00120fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00120d7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120db:	50                   	push   eax
c00120dc:	6a 08                	push   0x8
c00120de:	55                   	push   ebp
c00120df:	53                   	push   ebx
c00120e0:	e8 2e fd ff ff       	call   c0011e13 <CmGetShift(unsigned int*, int*, int, bool*)>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120ed:	74 26                	je     c0012115 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00120ef:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00120f6:	4e                   	dec    esi
c00120f7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00120fa:	47                   	inc    edi
c00120fb:	eb 1c                	jmp    c0012119 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00120fd:	6a 06                	push   0x6
c00120ff:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012104:	50                   	push   eax
c0012105:	55                   	push   ebp
c0012106:	53                   	push   ebx
c0012107:	e8 d7 fc ff ff       	call   c0011de3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	84 c0                	test   al,al
c0012111:	75 06                	jne    c0012119 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012113:	eb c2                	jmp    c00120d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012115:	31 c0                	xor    eax,eax
c0012117:	eb 03                	jmp    c001211c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012119:	46                   	inc    esi
c001211a:	eb b2                	jmp    c00120ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001211c:	83 c4 6c             	add    esp,0x6c
c001211f:	5b                   	pop    ebx
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	5d                   	pop    ebp
c0012123:	c3                   	ret    

c0012124 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012124:	53                   	push   ebx
c0012125:	83 ec 3c             	sub    esp,0x3c
c0012128:	6a 2b                	push   0x2b
c001212a:	6a 00                	push   0x0
c001212c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012130:	53                   	push   ebx
c0012131:	e8 8a e3 fe ff       	call   c00004c0 <memset>
c0012136:	58                   	pop    eax
c0012137:	5a                   	pop    edx
c0012138:	8d 44 24 11          	lea    eax,[esp+0x11]
c001213c:	50                   	push   eax
c001213d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012141:	e8 40 fe ff ff       	call   c0011f86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012146:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001214b:	83 c4 0c             	add    esp,0xc
c001214e:	6a 15                	push   0x15
c0012150:	6a 00                	push   0x0
c0012152:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012156:	50                   	push   eax
c0012157:	e8 64 e3 fe ff       	call   c00004c0 <memset>
c001215c:	53                   	push   ebx
c001215d:	6a 00                	push   0x0
c001215f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012163:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012167:	e8 e6 f9 ff ff       	call   c0011b52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001216c:	83 c4 58             	add    esp,0x58
c001216f:	5b                   	pop    ebx
c0012170:	c3                   	ret    

c0012171 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012171:	56                   	push   esi
c0012172:	53                   	push   ebx
c0012173:	83 ec 48             	sub    esp,0x48
c0012176:	6a 12                	push   0x12
c0012178:	68 ff 00 00 00       	push   0xff
c001217d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012181:	56                   	push   esi
c0012182:	e8 39 e3 fe ff       	call   c00004c0 <memset>
c0012187:	5a                   	pop    edx
c0012188:	59                   	pop    ecx
c0012189:	56                   	push   esi
c001218a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001218e:	e8 f3 fd ff ff       	call   c0011f86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012193:	83 c4 10             	add    esp,0x10
c0012196:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001219a:	85 db                	test   ebx,ebx
c001219c:	74 42                	je     c00121e0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001219e:	50                   	push   eax
c001219f:	8d 44 24 19          	lea    eax,[esp+0x19]
c00121a3:	50                   	push   eax
c00121a4:	53                   	push   ebx
c00121a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121a9:	e8 7e f6 ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121ae:	83 c4 0c             	add    esp,0xc
c00121b1:	6a 12                	push   0x12
c00121b3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00121b7:	50                   	push   eax
c00121b8:	56                   	push   esi
c00121b9:	e8 c2 e1 fe ff       	call   c0000380 <memcmp>
c00121be:	83 c4 10             	add    esp,0x10
c00121c1:	85 c0                	test   eax,eax
c00121c3:	74 1e                	je     c00121e3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00121c5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00121ca:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00121cf:	c1 e3 08             	shl    ebx,0x8
c00121d2:	09 d8                	or     eax,ebx
c00121d4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00121d9:	c1 e3 10             	shl    ebx,0x10
c00121dc:	09 c3                	or     ebx,eax
c00121de:	eb ba                	jmp    c001219a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00121e0:	83 cb ff             	or     ebx,0xffffffff
c00121e3:	89 d8                	mov    eax,ebx
c00121e5:	83 c4 44             	add    esp,0x44
c00121e8:	5b                   	pop    ebx
c00121e9:	5e                   	pop    esi
c00121ea:	c3                   	ret    

c00121eb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00121eb:	57                   	push   edi
c00121ec:	56                   	push   esi
c00121ed:	53                   	push   ebx
c00121ee:	83 ec 34             	sub    esp,0x34
c00121f1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00121f5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00121f9:	6a 2b                	push   0x2b
c00121fb:	6a 00                	push   0x0
c00121fd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012201:	53                   	push   ebx
c0012202:	e8 b9 e2 fe ff       	call   c00004c0 <memset>
c0012207:	58                   	pop    eax
c0012208:	5a                   	pop    edx
c0012209:	8d 44 24 11          	lea    eax,[esp+0x11]
c001220d:	50                   	push   eax
c001220e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012212:	e8 6f fd ff ff       	call   c0011f86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012217:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001221b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001221f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012223:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012227:	53                   	push   ebx
c0012228:	6a 00                	push   0x0
c001222a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001222e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012232:	e8 1b f9 ff ff       	call   c0011b52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012237:	83 c4 50             	add    esp,0x50
c001223a:	5b                   	pop    ebx
c001223b:	5e                   	pop    esi
c001223c:	5f                   	pop    edi
c001223d:	c3                   	ret    

c001223e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001223e:	57                   	push   edi
c001223f:	56                   	push   esi
c0012240:	53                   	push   ebx
c0012241:	83 ec 34             	sub    esp,0x34
c0012244:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012248:	6a 2b                	push   0x2b
c001224a:	6a 00                	push   0x0
c001224c:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012250:	56                   	push   esi
c0012251:	e8 6a e2 fe ff       	call   c00004c0 <memset>
c0012256:	58                   	pop    eax
c0012257:	5a                   	pop    edx
c0012258:	8d 44 24 11          	lea    eax,[esp+0x11]
c001225c:	50                   	push   eax
c001225d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012261:	e8 20 fd ff ff       	call   c0011f86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012266:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001226b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012270:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012275:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001227a:	56                   	push   esi
c001227b:	6a 00                	push   0x0
c001227d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012281:	53                   	push   ebx
c0012282:	e8 cb f8 ff ff       	call   c0011b52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012287:	83 c4 1c             	add    esp,0x1c
c001228a:	89 c7                	mov    edi,eax
c001228c:	56                   	push   esi
c001228d:	50                   	push   eax
c001228e:	53                   	push   ebx
c001228f:	e8 98 f5 ff ff       	call   c001182c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012294:	59                   	pop    ecx
c0012295:	58                   	pop    eax
c0012296:	6a 6c                	push   0x6c
c0012298:	6a 00                	push   0x0
c001229a:	6a 00                	push   0x0
c001229c:	68 ac 02 02 c0       	push   0xc00202ac
c00122a1:	57                   	push   edi
c00122a2:	53                   	push   ebx
c00122a3:	e8 43 ff ff ff       	call   c00121eb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00122a8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00122ac:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00122b0:	c1 e8 10             	shr    eax,0x10
c00122b3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00122b7:	83 c4 1c             	add    esp,0x1c
c00122ba:	56                   	push   esi
c00122bb:	57                   	push   edi
c00122bc:	53                   	push   ebx
c00122bd:	e8 c0 f6 ff ff       	call   c0011982 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122c2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00122c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00122cc:	c1 e0 08             	shl    eax,0x8
c00122cf:	09 c2                	or     edx,eax
c00122d1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00122d6:	83 c4 40             	add    esp,0x40
c00122d9:	c1 e0 10             	shl    eax,0x10
c00122dc:	5b                   	pop    ebx
c00122dd:	09 d0                	or     eax,edx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	c3                   	ret    

c00122e2 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00122e2:	57                   	push   edi
c00122e3:	56                   	push   esi
c00122e4:	53                   	push   ebx
c00122e5:	81 ec 08 01 00 00    	sub    esp,0x108
c00122eb:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00122f2:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00122f9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00122fd:	53                   	push   ebx
c00122fe:	e8 ed e2 fe ff       	call   c00005f0 <strcpy>
c0012303:	59                   	pop    ecx
c0012304:	5e                   	pop    esi
c0012305:	68 59 05 02 c0       	push   0xc0020559
c001230a:	53                   	push   ebx
c001230b:	bb 01 00 00 00       	mov    ebx,0x1
c0012310:	e8 8b e2 fe ff       	call   c00005a0 <strtok>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	85 c0                	test   eax,eax
c001231a:	74 3b                	je     c0012357 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001231c:	52                   	push   edx
c001231d:	50                   	push   eax
c001231e:	6a 01                	push   0x1
c0012320:	57                   	push   edi
c0012321:	e8 4b fe ff ff       	call   c0012171 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012326:	59                   	pop    ecx
c0012327:	89 c3                	mov    ebx,eax
c0012329:	5e                   	pop    esi
c001232a:	68 59 05 02 c0       	push   0xc0020559
c001232f:	6a 00                	push   0x0
c0012331:	e8 6a e2 fe ff       	call   c00005a0 <strtok>
c0012336:	83 c4 10             	add    esp,0x10
c0012339:	89 c6                	mov    esi,eax
c001233b:	85 c0                	test   eax,eax
c001233d:	74 18                	je     c0012357 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001233f:	52                   	push   edx
c0012340:	52                   	push   edx
c0012341:	53                   	push   ebx
c0012342:	57                   	push   edi
c0012343:	e8 c9 f5 ff ff       	call   c0011911 <CmEnterDirectory(Reghive_Tag*, int)>
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	89 c3                	mov    ebx,eax
c001234d:	83 f8 ff             	cmp    eax,0xffffffff
c0012350:	74 05                	je     c0012357 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012352:	50                   	push   eax
c0012353:	56                   	push   esi
c0012354:	53                   	push   ebx
c0012355:	eb c9                	jmp    c0012320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012357:	81 c4 00 01 00 00    	add    esp,0x100
c001235d:	89 d8                	mov    eax,ebx
c001235f:	5b                   	pop    ebx
c0012360:	5e                   	pop    esi
c0012361:	5f                   	pop    edi
c0012362:	c3                   	ret    

c0012363 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012363:	55                   	push   ebp
c0012364:	57                   	push   edi
c0012365:	56                   	push   esi
c0012366:	53                   	push   ebx
c0012367:	83 ec 5c             	sub    esp,0x5c
c001236a:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001236e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012372:	85 db                	test   ebx,ebx
c0012374:	0f 8e 84 00 00 00    	jle    c00123fe <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001237a:	31 ed                	xor    ebp,ebp
c001237c:	57                   	push   edi
c001237d:	6a 32                	push   0x32
c001237f:	6a 00                	push   0x0
c0012381:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012385:	57                   	push   edi
c0012386:	e8 35 e1 fe ff       	call   c00004c0 <memset>
c001238b:	83 c4 0c             	add    esp,0xc
c001238e:	57                   	push   edi
c001238f:	53                   	push   ebx
c0012390:	56                   	push   esi
c0012391:	e8 c2 fb ff ff       	call   c0011f58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012396:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00123a1:	7d 13                	jge    c00123b6 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00123a3:	83 ec 0c             	sub    esp,0xc
c00123a6:	45                   	inc    ebp
c00123a7:	68 c8 08 02 c0       	push   0xc00208c8
c00123ac:	e8 49 82 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb e7                	jmp    c001239d <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00123b6:	51                   	push   ecx
c00123b7:	57                   	push   edi
c00123b8:	53                   	push   ebx
c00123b9:	68 b2 02 02 c0       	push   0xc00202b2
c00123be:	e8 37 82 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00123cb:	75 1e                	jne    c00123eb <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00123cd:	52                   	push   edx
c00123ce:	52                   	push   edx
c00123cf:	53                   	push   ebx
c00123d0:	56                   	push   esi
c00123d1:	e8 3b f5 ff ff       	call   c0011911 <CmEnterDirectory(Reghive_Tag*, int)>
c00123d6:	83 c4 0c             	add    esp,0xc
c00123d9:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00123dd:	8d 51 04             	lea    edx,[ecx+0x4]
c00123e0:	52                   	push   edx
c00123e1:	50                   	push   eax
c00123e2:	56                   	push   esi
c00123e3:	e8 7b ff ff ff       	call   c0012363 <CmDisplayTree(Reghive_Tag*, int, int)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	50                   	push   eax
c00123ec:	50                   	push   eax
c00123ed:	53                   	push   ebx
c00123ee:	56                   	push   esi
c00123ef:	e8 5c f5 ff ff       	call   c0011950 <CmGetNext(Reghive_Tag*, int)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	89 c3                	mov    ebx,eax
c00123f9:	e9 74 ff ff ff       	jmp    c0012372 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00123fe:	83 c4 5c             	add    esp,0x5c
c0012401:	5b                   	pop    ebx
c0012402:	5e                   	pop    esi
c0012403:	5f                   	pop    edi
c0012404:	5d                   	pop    ebp
c0012405:	c3                   	ret    

c0012406 <CmSplitFinalSlashInPlace(char*)>:
c0012406:	53                   	push   ebx
c0012407:	83 ec 14             	sub    esp,0x14
c001240a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001240e:	53                   	push   ebx
c001240f:	e8 1c e1 fe ff       	call   c0000530 <strlen>
c0012414:	83 c4 10             	add    esp,0x10
c0012417:	48                   	dec    eax
c0012418:	85 c0                	test   eax,eax
c001241a:	74 15                	je     c0012431 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001241c:	8d 14 03             	lea    edx,[ebx+eax*1]
c001241f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012423:	75 09                	jne    c001242e <CmSplitFinalSlashInPlace(char*)+0x28>
c0012425:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012428:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001242c:	eb 05                	jmp    c0012433 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001242e:	48                   	dec    eax
c001242f:	eb e7                	jmp    c0012418 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012431:	31 c0                	xor    eax,eax
c0012433:	83 c4 08             	add    esp,0x8
c0012436:	5b                   	pop    ebx
c0012437:	c3                   	ret    

c0012438 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012438:	55                   	push   ebp
c0012439:	57                   	push   edi
c001243a:	56                   	push   esi
c001243b:	53                   	push   ebx
c001243c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012442:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012449:	8a 1e                	mov    bl,BYTE PTR [esi]
c001244b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001244e:	80 fb 40             	cmp    bl,0x40
c0012451:	75 1b                	jne    c001246e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0012453:	8a 16                	mov    dl,BYTE PTR [esi]
c0012455:	84 d2                	test   dl,dl
c0012457:	0f 84 f1 00 00 00    	je     c001254e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001245d:	8d 46 01             	lea    eax,[esi+0x1]
c0012460:	80 fa 3a             	cmp    dl,0x3a
c0012463:	74 04                	je     c0012469 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012465:	89 c6                	mov    esi,eax
c0012467:	eb ea                	jmp    c0012453 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012469:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001246c:	89 c6                	mov    esi,eax
c001246e:	50                   	push   eax
c001246f:	6a 40                	push   0x40
c0012471:	6a 00                	push   0x0
c0012473:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012477:	50                   	push   eax
c0012478:	e8 43 e0 fe ff       	call   c00004c0 <memset>
c001247d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012484:	31 c0                	xor    eax,eax
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	8a 0f                	mov    cl,BYTE PTR [edi]
c001248b:	84 c9                	test   cl,cl
c001248d:	0f 84 bb 00 00 00    	je     c001254e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012493:	3d c7 00 00 00       	cmp    eax,0xc7
c0012498:	0f 8f b0 00 00 00    	jg     c001254e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001249e:	80 f9 0a             	cmp    cl,0xa
c00124a1:	0f 85 98 00 00 00    	jne    c001253f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00124a7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00124ac:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00124b0:	a8 df                	test   al,0xdf
c00124b2:	0f 94 c1             	sete   cl
c00124b5:	3c 23                	cmp    al,0x23
c00124b7:	0f 94 c2             	sete   dl
c00124ba:	08 d1                	or     cl,dl
c00124bc:	75 4a                	jne    c0012508 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124be:	8d 50 f7             	lea    edx,[eax-0x9]
c00124c1:	80 fa 01             	cmp    dl,0x1
c00124c4:	76 42                	jbe    c0012508 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124c6:	3c 5b                	cmp    al,0x5b
c00124c8:	75 42                	jne    c001250c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00124ca:	80 fb 40             	cmp    bl,0x40
c00124cd:	75 39                	jne    c0012508 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124cf:	83 ec 0c             	sub    esp,0xc
c00124d2:	8d 54 24 65          	lea    edx,[esp+0x65]
c00124d6:	52                   	push   edx
c00124d7:	e8 54 e0 fe ff       	call   c0000530 <strlen>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	83 f8 3f             	cmp    eax,0x3f
c00124e2:	77 6a                	ja     c001254e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124e4:	50                   	push   eax
c00124e5:	50                   	push   eax
c00124e6:	8d 54 24 61          	lea    edx,[esp+0x61]
c00124ea:	52                   	push   edx
c00124eb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00124ef:	52                   	push   edx
c00124f0:	e8 fb e0 fe ff       	call   c00005f0 <strcpy>
c00124f5:	58                   	pop    eax
c00124f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00124fa:	52                   	push   edx
c00124fb:	e8 30 e0 fe ff       	call   c0000530 <strlen>
c0012500:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	31 d2                	xor    edx,edx
c001250a:	eb 3a                	jmp    c0012546 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001250c:	80 fb 40             	cmp    bl,0x40
c001250f:	74 06                	je     c0012517 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012511:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012515:	eb 20                	jmp    c0012537 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012517:	50                   	push   eax
c0012518:	50                   	push   eax
c0012519:	55                   	push   ebp
c001251a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001251e:	50                   	push   eax
c001251f:	e8 ac e1 fe ff       	call   c00006d0 <strcmp>
c0012524:	83 c4 10             	add    esp,0x10
c0012527:	85 c0                	test   eax,eax
c0012529:	75 dd                	jne    c0012508 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001252b:	eb e4                	jmp    c0012511 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001252d:	8d 50 01             	lea    edx,[eax+0x1]
c0012530:	80 f9 3d             	cmp    cl,0x3d
c0012533:	74 1d                	je     c0012552 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012535:	89 d0                	mov    eax,edx
c0012537:	8a 08                	mov    cl,BYTE PTR [eax]
c0012539:	84 c9                	test   cl,cl
c001253b:	75 f0                	jne    c001252d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001253d:	eb 0f                	jmp    c001254e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001253f:	8d 50 01             	lea    edx,[eax+0x1]
c0012542:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012546:	47                   	inc    edi
c0012547:	89 d0                	mov    eax,edx
c0012549:	e9 3b ff ff ff       	jmp    c0012489 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001254e:	31 c0                	xor    eax,eax
c0012550:	eb 33                	jmp    c0012585 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012552:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012556:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012559:	50                   	push   eax
c001255a:	50                   	push   eax
c001255b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001255f:	50                   	push   eax
c0012560:	56                   	push   esi
c0012561:	e8 6a e1 fe ff       	call   c00006d0 <strcmp>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	85 c0                	test   eax,eax
c001256b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001256f:	75 97                	jne    c0012508 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012571:	51                   	push   ecx
c0012572:	51                   	push   ecx
c0012573:	52                   	push   edx
c0012574:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001257b:	e8 70 e0 fe ff       	call   c00005f0 <strcpy>
c0012580:	83 c4 10             	add    esp,0x10
c0012583:	b0 01                	mov    al,0x1
c0012585:	81 c4 2c 01 00 00    	add    esp,0x12c
c001258b:	5b                   	pop    ebx
c001258c:	5e                   	pop    esi
c001258d:	5f                   	pop    edi
c001258e:	5d                   	pop    ebp
c001258f:	c3                   	ret    

c0012590 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012590:	57                   	push   edi
c0012591:	56                   	push   esi
c0012592:	53                   	push   ebx
c0012593:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012599:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00125a0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00125a7:	53                   	push   ebx
c00125a8:	e8 83 df fe ff       	call   c0000530 <strlen>
c00125ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00125b0:	89 c7                	mov    edi,eax
c00125b2:	e8 79 df fe ff       	call   c0000530 <strlen>
c00125b7:	83 c4 10             	add    esp,0x10
c00125ba:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00125be:	3d ff 00 00 00       	cmp    eax,0xff
c00125c3:	0f 87 d3 00 00 00    	ja     c001269c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00125c9:	57                   	push   edi
c00125ca:	57                   	push   edi
c00125cb:	56                   	push   esi
c00125cc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00125d0:	56                   	push   esi
c00125d1:	e8 1a e0 fe ff       	call   c00005f0 <strcpy>
c00125d6:	58                   	pop    eax
c00125d7:	5a                   	pop    edx
c00125d8:	68 59 05 02 c0       	push   0xc0020559
c00125dd:	56                   	push   esi
c00125de:	e8 cd e1 fe ff       	call   c00007b0 <strcat>
c00125e3:	59                   	pop    ecx
c00125e4:	5f                   	pop    edi
c00125e5:	53                   	push   ebx
c00125e6:	56                   	push   esi
c00125e7:	e8 c4 e1 fe ff       	call   c00007b0 <strcat>
c00125ec:	58                   	pop    eax
c00125ed:	5a                   	pop    edx
c00125ee:	68 bc 02 02 c0       	push   0xc00202bc
c00125f3:	56                   	push   esi
c00125f4:	e8 b7 e1 fe ff       	call   c00007b0 <strcat>
c00125f9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012600:	e8 60 52 ff ff       	call   c0007865 <malloc>
c0012605:	83 c4 0c             	add    esp,0xc
c0012608:	89 c3                	mov    ebx,eax
c001260a:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012610:	56                   	push   esi
c0012611:	50                   	push   eax
c0012612:	e8 59 85 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	85 db                	test   ebx,ebx
c001261c:	74 7e                	je     c001269c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001261e:	51                   	push   ecx
c001261f:	51                   	push   ecx
c0012620:	6a 01                	push   0x1
c0012622:	53                   	push   ebx
c0012623:	e8 08 86 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	85 c0                	test   eax,eax
c001262d:	74 08                	je     c0012637 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001262f:	83 ec 0c             	sub    esp,0xc
c0012632:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012634:	53                   	push   ebx
c0012635:	eb 5f                	jmp    c0012696 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012637:	52                   	push   edx
c0012638:	8d 44 24 17          	lea    eax,[esp+0x17]
c001263c:	50                   	push   eax
c001263d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012641:	50                   	push   eax
c0012642:	53                   	push   ebx
c0012643:	e8 94 88 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0012648:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	89 c1                	mov    ecx,eax
c0012651:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012655:	74 31                	je     c0012688 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012657:	83 ec 0c             	sub    esp,0xc
c001265a:	50                   	push   eax
c001265b:	e8 05 52 ff ff       	call   c0007865 <malloc>
c0012660:	89 c6                	mov    esi,eax
c0012662:	58                   	pop    eax
c0012663:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012665:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012669:	52                   	push   edx
c001266a:	56                   	push   esi
c001266b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001266f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012673:	53                   	push   ebx
c0012674:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012677:	83 c4 20             	add    esp,0x20
c001267a:	85 c0                	test   eax,eax
c001267c:	75 0a                	jne    c0012688 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001267e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012682:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012686:	74 18                	je     c00126a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012688:	83 ec 0c             	sub    esp,0xc
c001268b:	53                   	push   ebx
c001268c:	e8 fd 85 ff ff       	call   c000ac8e <File::close()>
c0012691:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012693:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012696:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	31 c0                	xor    eax,eax
c001269e:	eb 3b                	jmp    c00126db <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00126a0:	83 ec 0c             	sub    esp,0xc
c00126a3:	53                   	push   ebx
c00126a4:	e8 e5 85 ff ff       	call   c000ac8e <File::close()>
c00126a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126b1:	83 c4 0c             	add    esp,0xc
c00126b4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126bb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126c2:	56                   	push   esi
c00126c3:	e8 70 fd ff ff       	call   c0012438 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00126c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00126cb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00126cf:	e8 a1 51 ff ff       	call   c0007875 <free>
c00126d4:	83 c4 10             	add    esp,0x10
c00126d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00126db:	81 c4 20 01 00 00    	add    esp,0x120
c00126e1:	5b                   	pop    ebx
c00126e2:	5e                   	pop    esi
c00126e3:	5f                   	pop    edi
c00126e4:	c3                   	ret    

c00126e5 <Reg::getLine(char*, char*, char*)>:
c00126e5:	57                   	push   edi
c00126e6:	56                   	push   esi
c00126e7:	53                   	push   ebx
c00126e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126f0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126f4:	57                   	push   edi
c00126f5:	56                   	push   esi
c00126f6:	53                   	push   ebx
c00126f7:	68 c1 02 02 c0       	push   0xc00202c1
c00126fc:	e8 8f fe ff ff       	call   c0012590 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	84 c0                	test   al,al
c0012706:	75 10                	jne    c0012718 <Reg::getLine(char*, char*, char*)+0x33>
c0012708:	57                   	push   edi
c0012709:	56                   	push   esi
c001270a:	53                   	push   ebx
c001270b:	68 e6 02 02 c0       	push   0xc00202e6
c0012710:	e8 7b fe ff ff       	call   c0012590 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012715:	83 c4 10             	add    esp,0x10
c0012718:	5b                   	pop    ebx
c0012719:	5e                   	pop    esi
c001271a:	5f                   	pop    edi
c001271b:	c3                   	ret    

c001271c <Reg::readInt(char*, char*, int*)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012726:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001272a:	57                   	push   edi
c001272b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012732:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012739:	e8 a7 ff ff ff       	call   c00126e5 <Reg::getLine(char*, char*, char*)>
c001273e:	83 c4 10             	add    esp,0x10
c0012741:	84 c0                	test   al,al
c0012743:	0f 84 b3 00 00 00    	je     c00127fc <Reg::readInt(char*, char*, int*)+0xe0>
c0012749:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001274d:	80 fa 2b             	cmp    dl,0x2b
c0012750:	74 0c                	je     c001275e <Reg::readInt(char*, char*, int*)+0x42>
c0012752:	80 fa 2d             	cmp    dl,0x2d
c0012755:	75 0e                	jne    c0012765 <Reg::readInt(char*, char*, int*)+0x49>
c0012757:	ba 01 00 00 00       	mov    edx,0x1
c001275c:	eb 0b                	jmp    c0012769 <Reg::readInt(char*, char*, int*)+0x4d>
c001275e:	ba 01 00 00 00       	mov    edx,0x1
c0012763:	eb 02                	jmp    c0012767 <Reg::readInt(char*, char*, int*)+0x4b>
c0012765:	31 d2                	xor    edx,edx
c0012767:	31 c0                	xor    eax,eax
c0012769:	be 0a 00 00 00       	mov    esi,0xa
c001276e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012773:	75 20                	jne    c0012795 <Reg::readInt(char*, char*, int*)+0x79>
c0012775:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012779:	80 f9 78             	cmp    cl,0x78
c001277c:	75 0a                	jne    c0012788 <Reg::readInt(char*, char*, int*)+0x6c>
c001277e:	83 c2 02             	add    edx,0x2
c0012781:	be 10 00 00 00       	mov    esi,0x10
c0012786:	eb 0d                	jmp    c0012795 <Reg::readInt(char*, char*, int*)+0x79>
c0012788:	80 f9 62             	cmp    cl,0x62
c001278b:	75 08                	jne    c0012795 <Reg::readInt(char*, char*, int*)+0x79>
c001278d:	83 c2 02             	add    edx,0x2
c0012790:	be 02 00 00 00       	mov    esi,0x2
c0012795:	01 d7                	add    edi,edx
c0012797:	31 d2                	xor    edx,edx
c0012799:	8a 1f                	mov    bl,BYTE PTR [edi]
c001279b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001279f:	80 fb 0d             	cmp    bl,0xd
c00127a2:	0f 94 c3             	sete   bl
c00127a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127aa:	0f 94 c1             	sete   cl
c00127ad:	08 cb                	or     bl,cl
c00127af:	75 3a                	jne    c00127eb <Reg::readInt(char*, char*, int*)+0xcf>
c00127b1:	0f af d6             	imul   edx,esi
c00127b4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00127b9:	83 fe 10             	cmp    esi,0x10
c00127bc:	75 26                	jne    c00127e4 <Reg::readInt(char*, char*, int*)+0xc8>
c00127be:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127c2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00127c5:	89 e9                	mov    ecx,ebp
c00127c7:	80 f9 05             	cmp    cl,0x5
c00127ca:	77 06                	ja     c00127d2 <Reg::readInt(char*, char*, int*)+0xb6>
c00127cc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00127d0:	eb 16                	jmp    c00127e8 <Reg::readInt(char*, char*, int*)+0xcc>
c00127d2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127d6:	83 e9 61             	sub    ecx,0x61
c00127d9:	80 f9 05             	cmp    cl,0x5
c00127dc:	77 06                	ja     c00127e4 <Reg::readInt(char*, char*, int*)+0xc8>
c00127de:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00127e2:	eb 04                	jmp    c00127e8 <Reg::readInt(char*, char*, int*)+0xcc>
c00127e4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00127e8:	47                   	inc    edi
c00127e9:	eb ae                	jmp    c0012799 <Reg::readInt(char*, char*, int*)+0x7d>
c00127eb:	84 c0                	test   al,al
c00127ed:	74 02                	je     c00127f1 <Reg::readInt(char*, char*, int*)+0xd5>
c00127ef:	f7 da                	neg    edx
c00127f1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00127f8:	89 10                	mov    DWORD PTR [eax],edx
c00127fa:	88 d8                	mov    al,bl
c00127fc:	81 c4 ec 00 00 00    	add    esp,0xec
c0012802:	5b                   	pop    ebx
c0012803:	5e                   	pop    esi
c0012804:	5f                   	pop    edi
c0012805:	5d                   	pop    ebp
c0012806:	c3                   	ret    

c0012807 <Reg::readString(char*, char*, char*, int)>:
c0012807:	57                   	push   edi
c0012808:	56                   	push   esi
c0012809:	53                   	push   ebx
c001280a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012810:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012817:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001281b:	57                   	push   edi
c001281c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012823:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001282a:	e8 b6 fe ff ff       	call   c00126e5 <Reg::getLine(char*, char*, char*)>
c001282f:	83 c4 10             	add    esp,0x10
c0012832:	89 c6                	mov    esi,eax
c0012834:	84 c0                	test   al,al
c0012836:	74 44                	je     c001287c <Reg::readString(char*, char*, char*, int)+0x75>
c0012838:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001283f:	31 c0                	xor    eax,eax
c0012841:	4a                   	dec    edx
c0012842:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012845:	84 c9                	test   cl,cl
c0012847:	74 0f                	je     c0012858 <Reg::readString(char*, char*, char*, int)+0x51>
c0012849:	39 c2                	cmp    edx,eax
c001284b:	7e 0b                	jle    c0012858 <Reg::readString(char*, char*, char*, int)+0x51>
c001284d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012850:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012855:	40                   	inc    eax
c0012856:	eb ea                	jmp    c0012842 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012858:	83 ec 0c             	sub    esp,0xc
c001285b:	53                   	push   ebx
c001285c:	e8 cf dc fe ff       	call   c0000530 <strlen>
c0012861:	83 c4 10             	add    esp,0x10
c0012864:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012869:	75 11                	jne    c001287c <Reg::readString(char*, char*, char*, int)+0x75>
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	53                   	push   ebx
c001286f:	e8 bc dc fe ff       	call   c0000530 <strlen>
c0012874:	83 c4 10             	add    esp,0x10
c0012877:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001287c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012882:	89 f0                	mov    eax,esi
c0012884:	5b                   	pop    ebx
c0012885:	5e                   	pop    esi
c0012886:	5f                   	pop    edi
c0012887:	c3                   	ret    

c0012888 <Reg::readBool(char*, char*, bool*)>:
c0012888:	83 ec 20             	sub    esp,0x20
c001288b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001288f:	50                   	push   eax
c0012890:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012894:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012898:	e8 7f fe ff ff       	call   c001271c <Reg::readInt(char*, char*, int*)>
c001289d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00128a2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00128a6:	0f 95 02             	setne  BYTE PTR [edx]
c00128a9:	83 c4 2c             	add    esp,0x2c
c00128ac:	c3                   	ret    

c00128ad <Reg::readBoolWithDefault(char*, char*, bool)>:
c00128ad:	53                   	push   ebx
c00128ae:	83 ec 1c             	sub    esp,0x1c
c00128b1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00128b5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00128b9:	50                   	push   eax
c00128ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128c2:	e8 c1 ff ff ff       	call   c0012888 <Reg::readBool(char*, char*, bool*)>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	84 c0                	test   al,al
c00128cc:	74 04                	je     c00128d2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00128ce:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00128d2:	88 d8                	mov    al,bl
c00128d4:	83 c4 18             	add    esp,0x18
c00128d7:	5b                   	pop    ebx
c00128d8:	c3                   	ret    

c00128d9 <Reg::readIntWithDefault(char*, char*, int)>:
c00128d9:	53                   	push   ebx
c00128da:	83 ec 1c             	sub    esp,0x1c
c00128dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128e1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128e5:	50                   	push   eax
c00128e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ee:	e8 29 fe ff ff       	call   c001271c <Reg::readInt(char*, char*, int*)>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	84 c0                	test   al,al
c00128f8:	74 04                	je     c00128fe <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00128fa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128fe:	89 d8                	mov    eax,ebx
c0012900:	83 c4 18             	add    esp,0x18
c0012903:	5b                   	pop    ebx
c0012904:	c3                   	ret    

c0012905 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012905:	57                   	push   edi
c0012906:	56                   	push   esi
c0012907:	56                   	push   esi
c0012908:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001290c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012910:	56                   	push   esi
c0012911:	57                   	push   edi
c0012912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291a:	e8 e8 fe ff ff       	call   c0012807 <Reg::readString(char*, char*, char*, int)>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	84 c0                	test   al,al
c0012924:	75 1a                	jne    c0012940 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012926:	51                   	push   ecx
c0012927:	56                   	push   esi
c0012928:	6a 00                	push   0x0
c001292a:	57                   	push   edi
c001292b:	e8 90 db fe ff       	call   c00004c0 <memset>
c0012930:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012933:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012937:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012939:	83 c4 10             	add    esp,0x10
c001293c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012940:	89 f8                	mov    eax,edi
c0012942:	5a                   	pop    edx
c0012943:	5e                   	pop    esi
c0012944:	5f                   	pop    edi
c0012945:	c3                   	ret    

c0012946 <SysEject(regs*)>:
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	83 ca ff             	or     edx,0xffffffff
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012953:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012958:	83 e9 41             	sub    ecx,0x41
c001295b:	83 f9 19             	cmp    ecx,0x19
c001295e:	77 18                	ja     c0012978 <SysEject(regs*)+0x32>
c0012960:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012967:	85 c9                	test   ecx,ecx
c0012969:	74 0d                	je     c0012978 <SysEject(regs*)+0x32>
c001296b:	83 ec 0c             	sub    esp,0xc
c001296e:	51                   	push   ecx
c001296f:	e8 6c a3 ff ff       	call   c000cce0 <LogicalDisk::eject()>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	99                   	cdq    
c0012978:	83 c4 0c             	add    esp,0xc
c001297b:	c3                   	ret    

c001297c <SysExit(regs*)>:
c001297c:	83 ec 18             	sub    esp,0x18
c001297f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012983:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012986:	e8 41 27 00 00       	call   c00150cc <terminateTask(int)>
c001298b:	83 c8 ff             	or     eax,0xffffffff
c001298e:	83 c4 1c             	add    esp,0x1c
c0012991:	89 c2                	mov    edx,eax
c0012993:	c3                   	ret    

c0012994 <SysGetCwd(regs*)>:
c0012994:	83 ec 10             	sub    esp,0x10
c0012997:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001299b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001299e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00129a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129a6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00129a9:	e8 c4 7f ff ff       	call   c000a972 <Fs::getcwd(Process*, char*, int)>
c00129ae:	83 c4 1c             	add    esp,0x1c
c00129b1:	99                   	cdq    
c00129b2:	c3                   	ret    

c00129b3 <SysGetPID(regs*)>:
c00129b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00129bd:	99                   	cdq    
c00129be:	c3                   	ret    

c00129bf <SysGetRAMData(regs*)>:
c00129bf:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c00129c5:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c00129cf:	99                   	cdq    
c00129d0:	f7 f9                	idiv   ecx
c00129d2:	c1 e0 18             	shl    eax,0x18
c00129d5:	09 c8                	or     eax,ecx
c00129d7:	99                   	cdq    
c00129d8:	c3                   	ret    

c00129d9 <SysGetVGAPtr(regs*)>:
c00129d9:	55                   	push   ebp
c00129da:	57                   	push   edi
c00129db:	56                   	push   esi
c00129dc:	53                   	push   ebx
c00129dd:	83 ec 18             	sub    esp,0x18
c00129e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129e4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00129e7:	e8 e0 21 00 00       	call   c0014bcc <Thr::processFromPID(int)>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	89 c1                	mov    ecx,eax
c00129f1:	b8 01 00 00 00       	mov    eax,0x1
c00129f6:	85 c9                	test   ecx,ecx
c00129f8:	74 57                	je     c0012a51 <SysGetVGAPtr(regs*)+0x78>
c00129fa:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012a00:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012a04:	74 0c                	je     c0012a12 <SysGetVGAPtr(regs*)+0x39>
c0012a06:	83 ec 0c             	sub    esp,0xc
c0012a09:	55                   	push   ebp
c0012a0a:	e8 8e 5a ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012a15:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012a18:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012a1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a1f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012a22:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a25:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012a2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a2e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012a31:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012a37:	50                   	push   eax
c0012a38:	50                   	push   eax
c0012a39:	68 01 03 02 c0       	push   0xc0020301
c0012a3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a41:	05 a8 0f 00 00       	add    eax,0xfa8
c0012a46:	50                   	push   eax
c0012a47:	e8 a4 db fe ff       	call   c00005f0 <strcpy>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	31 c0                	xor    eax,eax
c0012a51:	83 c4 0c             	add    esp,0xc
c0012a54:	31 d2                	xor    edx,edx
c0012a56:	5b                   	pop    ebx
c0012a57:	5e                   	pop    esi
c0012a58:	5f                   	pop    edi
c0012a59:	5d                   	pop    ebp
c0012a5a:	c3                   	ret    

c0012a5b <SysKill(regs*)>:
c0012a5b:	b8 01 00 00 00       	mov    eax,0x1
c0012a60:	31 d2                	xor    edx,edx
c0012a62:	c3                   	ret    

c0012a63 <SysLoadDLL(regs*)>:
c0012a63:	56                   	push   esi
c0012a64:	53                   	push   ebx
c0012a65:	31 d2                	xor    edx,edx
c0012a67:	51                   	push   ecx
c0012a68:	b8 01 00 00 00       	mov    eax,0x1
c0012a6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a71:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012a75:	0f 84 8c 00 00 00    	je     c0012b07 <SysLoadDLL(regs*)+0xa4>
c0012a7b:	83 ec 0c             	sub    esp,0xc
c0012a7e:	68 14 01 00 00       	push   0x114
c0012a83:	e8 dd 4d ff ff       	call   c0007865 <malloc>
c0012a88:	83 c4 0c             	add    esp,0xc
c0012a8b:	89 c3                	mov    ebx,eax
c0012a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a92:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012a95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012a98:	53                   	push   ebx
c0012a99:	e8 d2 80 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0012a9e:	83 c4 10             	add    esp,0x10
c0012aa1:	31 d2                	xor    edx,edx
c0012aa3:	b8 02 00 00 00       	mov    eax,0x2
c0012aa8:	85 db                	test   ebx,ebx
c0012aaa:	74 5b                	je     c0012b07 <SysLoadDLL(regs*)+0xa4>
c0012aac:	83 ec 0c             	sub    esp,0xc
c0012aaf:	53                   	push   ebx
c0012ab0:	e8 e9 83 ff ff       	call   c000ae9e <File::exists()>
c0012ab5:	83 c4 10             	add    esp,0x10
c0012ab8:	84 c0                	test   al,al
c0012aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012abc:	75 11                	jne    c0012acf <SysLoadDLL(regs*)+0x6c>
c0012abe:	83 ec 0c             	sub    esp,0xc
c0012ac1:	53                   	push   ebx
c0012ac2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ac5:	83 c4 10             	add    esp,0x10
c0012ac8:	b8 03 00 00 00       	mov    eax,0x3
c0012acd:	eb 36                	jmp    c0012b05 <SysLoadDLL(regs*)+0xa2>
c0012acf:	83 ec 0c             	sub    esp,0xc
c0012ad2:	53                   	push   ebx
c0012ad3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ad6:	58                   	pop    eax
c0012ad7:	5a                   	pop    edx
c0012ad8:	6a 00                	push   0x0
c0012ada:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012add:	e8 74 12 00 00       	call   c0013d56 <Thr::loadDLL(char const*, bool)>
c0012ae2:	83 c4 10             	add    esp,0x10
c0012ae5:	89 c1                	mov    ecx,eax
c0012ae7:	31 d2                	xor    edx,edx
c0012ae9:	b8 04 00 00 00       	mov    eax,0x4
c0012aee:	85 c9                	test   ecx,ecx
c0012af0:	74 15                	je     c0012b07 <SysLoadDLL(regs*)+0xa4>
c0012af2:	53                   	push   ebx
c0012af3:	53                   	push   ebx
c0012af4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012afa:	51                   	push   ecx
c0012afb:	e8 87 14 00 00       	call   c0013f87 <Thr::executeDLL(unsigned long, void*)>
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	31 c0                	xor    eax,eax
c0012b05:	31 d2                	xor    edx,edx
c0012b07:	59                   	pop    ecx
c0012b08:	5b                   	pop    ebx
c0012b09:	5e                   	pop    esi
c0012b0a:	c3                   	ret    

c0012b0b <SysRead(regs*)>:
c0012b0b:	57                   	push   edi
c0012b0c:	56                   	push   esi
c0012b0d:	53                   	push   ebx
c0012b0e:	83 ec 10             	sub    esp,0x10
c0012b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b18:	83 f8 02             	cmp    eax,0x2
c0012b1b:	77 10                	ja     c0012b2d <SysRead(regs*)+0x22>
c0012b1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b25:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012b2b:	eb 0e                	jmp    c0012b3b <SysRead(regs*)+0x30>
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	50                   	push   eax
c0012b31:	e8 b1 66 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	89 c1                	mov    ecx,eax
c0012b3b:	83 c8 ff             	or     eax,0xffffffff
c0012b3e:	85 c9                	test   ecx,ecx
c0012b40:	89 c2                	mov    edx,eax
c0012b42:	74 28                	je     c0012b6c <SysRead(regs*)+0x61>
c0012b44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b4c:	31 ff                	xor    edi,edi
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b53:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012b57:	52                   	push   edx
c0012b58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012b5b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012b5e:	57                   	push   edi
c0012b5f:	56                   	push   esi
c0012b60:	51                   	push   ecx
c0012b61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012b68:	83 c4 20             	add    esp,0x20
c0012b6b:	99                   	cdq    
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	5b                   	pop    ebx
c0012b70:	5e                   	pop    esi
c0012b71:	5f                   	pop    edi
c0012b72:	c3                   	ret    

c0012b73 <SysRegisterSignal(regs*)>:
c0012b73:	83 ec 18             	sub    esp,0x18
c0012b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b7a:	6a 00                	push   0x0
c0012b7c:	6a 00                	push   0x0
c0012b7e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012b81:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b8c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012b92:	e8 c2 db ff ff       	call   c0010759 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012b97:	83 c4 2c             	add    esp,0x2c
c0012b9a:	99                   	cdq    
c0012b9b:	c3                   	ret    

c0012b9c <SysSbrk(regs*)>:
c0012b9c:	56                   	push   esi
c0012b9d:	53                   	push   ebx
c0012b9e:	50                   	push   eax
c0012b9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ba8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012bab:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012bae:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012bb4:	85 db                	test   ebx,ebx
c0012bb6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012bb9:	74 02                	je     c0012bbd <SysSbrk(regs*)+0x21>
c0012bbb:	79 06                	jns    c0012bc3 <SysSbrk(regs*)+0x27>
c0012bbd:	89 f0                	mov    eax,esi
c0012bbf:	31 d2                	xor    edx,edx
c0012bc1:	eb 2a                	jmp    c0012bed <SysSbrk(regs*)+0x51>
c0012bc3:	83 c8 ff             	or     eax,0xffffffff
c0012bc6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012bcc:	89 c2                	mov    edx,eax
c0012bce:	77 1d                	ja     c0012bed <SysSbrk(regs*)+0x51>
c0012bd0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012bd6:	50                   	push   eax
c0012bd7:	c1 ea 0c             	shr    edx,0xc
c0012bda:	68 07 0c 00 00       	push   0xc07
c0012bdf:	52                   	push   edx
c0012be0:	51                   	push   ecx
c0012be1:	e8 1e 6f ff ff       	call   c0009b04 <VAS::allocatePages(int, int)>
c0012be6:	89 f0                	mov    eax,esi
c0012be8:	31 d2                	xor    edx,edx
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	59                   	pop    ecx
c0012bee:	5b                   	pop    ebx
c0012bef:	5e                   	pop    esi
c0012bf0:	c3                   	ret    

c0012bf1 <SysSetCwd(regs*)>:
c0012bf1:	83 ec 14             	sub    esp,0x14
c0012bf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bf8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012bfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c00:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c03:	e8 35 83 ff ff       	call   c000af3d <Fs::setcwd(Process*, char*)>
c0012c08:	83 c4 1c             	add    esp,0x1c
c0012c0b:	99                   	cdq    
c0012c0c:	c3                   	ret    

c0012c0d <SysSetTime(regs*)>:
c0012c0d:	55                   	push   ebp
c0012c0e:	31 c9                	xor    ecx,ecx
c0012c10:	57                   	push   edi
c0012c11:	bd 0c 00 00 00       	mov    ebp,0xc
c0012c16:	56                   	push   esi
c0012c17:	53                   	push   ebx
c0012c18:	31 db                	xor    ebx,ebx
c0012c1a:	83 ec 10             	sub    esp,0x10
c0012c1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c21:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012c24:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012c27:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012c2a:	89 c2                	mov    edx,eax
c0012c2c:	66 81 ef 6c 07       	sub    di,0x76c
c0012c31:	83 e2 1f             	and    edx,0x1f
c0012c34:	c1 e7 10             	shl    edi,0x10
c0012c37:	42                   	inc    edx
c0012c38:	c1 e8 05             	shr    eax,0x5
c0012c3b:	88 d1                	mov    cl,dl
c0012c3d:	31 d2                	xor    edx,edx
c0012c3f:	f7 f5                	div    ebp
c0012c41:	89 dd                	mov    ebp,ebx
c0012c43:	88 d5                	mov    ch,dl
c0012c45:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012c4b:	0f b7 c1             	movzx  eax,cx
c0012c4e:	31 d2                	xor    edx,edx
c0012c50:	09 f8                	or     eax,edi
c0012c52:	bf 3c 00 00 00       	mov    edi,0x3c
c0012c57:	89 c1                	mov    ecx,eax
c0012c59:	89 f0                	mov    eax,esi
c0012c5b:	f7 f7                	div    edi
c0012c5d:	c1 e2 10             	shl    edx,0x10
c0012c60:	09 d5                	or     ebp,edx
c0012c62:	31 d2                	xor    edx,edx
c0012c64:	89 eb                	mov    ebx,ebp
c0012c66:	f7 f7                	div    edi
c0012c68:	bf 10 0e 00 00       	mov    edi,0xe10
c0012c6d:	88 d7                	mov    bh,dl
c0012c6f:	89 f0                	mov    eax,esi
c0012c71:	31 d2                	xor    edx,edx
c0012c73:	f7 f7                	div    edi
c0012c75:	bf 18 00 00 00       	mov    edi,0x18
c0012c7a:	31 d2                	xor    edx,edx
c0012c7c:	f7 f7                	div    edi
c0012c7e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012c83:	88 d3                	mov    bl,dl
c0012c85:	53                   	push   ebx
c0012c86:	51                   	push   ecx
c0012c87:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012c8d:	e8 ba 8a ff ff       	call   c000b74c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012c92:	83 c4 1c             	add    esp,0x1c
c0012c95:	83 f0 01             	xor    eax,0x1
c0012c98:	5b                   	pop    ebx
c0012c99:	0f b6 c0             	movzx  eax,al
c0012c9c:	5e                   	pop    esi
c0012c9d:	31 d2                	xor    edx,edx
c0012c9f:	5f                   	pop    edi
c0012ca0:	5d                   	pop    ebp
c0012ca1:	c3                   	ret    

c0012ca2 <SysTimezone(regs*)>:
c0012ca2:	53                   	push   ebx
c0012ca3:	83 ec 08             	sub    esp,0x8
c0012ca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012caa:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012cae:	75 17                	jne    c0012cc7 <SysTimezone(regs*)+0x25>
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	68 0b 03 02 c0       	push   0xc002030b
c0012cb8:	e8 3d 79 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0012cbd:	83 c8 ff             	or     eax,0xffffffff
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	89 c2                	mov    edx,eax
c0012cc5:	eb 20                	jmp    c0012ce7 <SysTimezone(regs*)+0x45>
c0012cc7:	83 ec 0c             	sub    esp,0xc
c0012cca:	68 20 03 02 c0       	push   0xc0020320
c0012ccf:	e8 26 79 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0012cd4:	58                   	pop    eax
c0012cd5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012cd8:	e8 cb 87 ff ff       	call   c000b4a8 <User::loadClockSettings(int)>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	b8 01 00 00 00       	mov    eax,0x1
c0012ce5:	31 d2                	xor    edx,edx
c0012ce7:	83 c4 08             	add    esp,0x8
c0012cea:	5b                   	pop    ebx
c0012ceb:	c3                   	ret    

c0012cec <SysWrite(regs*)>:
c0012cec:	57                   	push   edi
c0012ced:	56                   	push   esi
c0012cee:	53                   	push   ebx
c0012cef:	83 ec 10             	sub    esp,0x10
c0012cf2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cf6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cf9:	83 f8 02             	cmp    eax,0x2
c0012cfc:	77 10                	ja     c0012d0e <SysWrite(regs*)+0x22>
c0012cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d06:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012d0c:	eb 0e                	jmp    c0012d1c <SysWrite(regs*)+0x30>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	50                   	push   eax
c0012d12:	e8 d0 64 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	89 c1                	mov    ecx,eax
c0012d1c:	83 c8 ff             	or     eax,0xffffffff
c0012d1f:	85 c9                	test   ecx,ecx
c0012d21:	89 c2                	mov    edx,eax
c0012d23:	74 28                	je     c0012d4d <SysWrite(regs*)+0x61>
c0012d25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d2d:	31 ff                	xor    edi,edi
c0012d2f:	83 ec 0c             	sub    esp,0xc
c0012d32:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d34:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d38:	52                   	push   edx
c0012d39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d3c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012d3f:	57                   	push   edi
c0012d40:	56                   	push   esi
c0012d41:	51                   	push   ecx
c0012d42:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012d49:	83 c4 20             	add    esp,0x20
c0012d4c:	99                   	cdq    
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	5b                   	pop    ebx
c0012d51:	5e                   	pop    esi
c0012d52:	5f                   	pop    edi
c0012d53:	c3                   	ret    

c0012d54 <SysWsbe(regs*)>:
c0012d54:	57                   	push   edi
c0012d55:	b9 0b 00 00 00       	mov    ecx,0xb
c0012d5a:	56                   	push   esi
c0012d5b:	be 5f 03 02 c0       	mov    esi,0xc002035f
c0012d60:	53                   	push   ebx
c0012d61:	83 ec 30             	sub    esp,0x30
c0012d64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012d68:	fc                   	cld    
c0012d69:	83 ec 0c             	sub    esp,0xc
c0012d6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012d6e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012d72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d7a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012d80:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d82:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012d85:	57                   	push   edi
c0012d86:	e8 a5 d7 fe ff       	call   c0000530 <strlen>
c0012d8b:	5a                   	pop    edx
c0012d8c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012d90:	52                   	push   edx
c0012d91:	31 d2                	xor    edx,edx
c0012d93:	57                   	push   edi
c0012d94:	52                   	push   edx
c0012d95:	50                   	push   eax
c0012d96:	56                   	push   esi
c0012d97:	ff d3                	call   ebx
c0012d99:	83 c4 14             	add    esp,0x14
c0012d9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012da0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012da3:	e8 24 23 00 00       	call   c00150cc <terminateTask(int)>
c0012da8:	83 c4 40             	add    esp,0x40
c0012dab:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012db0:	5b                   	pop    ebx
c0012db1:	31 d2                	xor    edx,edx
c0012db3:	5e                   	pop    esi
c0012db4:	5f                   	pop    edi
c0012db5:	c3                   	ret    

c0012db6 <SysYield(regs*)>:
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	fa                   	cli    
c0012dba:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012dc0:	e8 e3 19 00 00       	call   c00147a8 <schedule()>
c0012dc5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012dca:	48                   	dec    eax
c0012dcb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012dd0:	75 01                	jne    c0012dd3 <SysYield(regs*)+0x1d>
c0012dd2:	fb                   	sti    
c0012dd3:	31 c0                	xor    eax,eax
c0012dd5:	31 d2                	xor    edx,edx
c0012dd7:	83 c4 0c             	add    esp,0xc
c0012dda:	c3                   	ret    

c0012ddb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012ddb:	55                   	push   ebp
c0012ddc:	57                   	push   edi
c0012ddd:	56                   	push   esi
c0012dde:	53                   	push   ebx
c0012ddf:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012de5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012ded:	0f 95 c2             	setne  dl
c0012df0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012df8:	0f 94 c0             	sete   al
c0012dfb:	84 c2                	test   dl,al
c0012dfd:	74 34                	je     c0012e33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012dff:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012e0a:	74 27                	je     c0012e33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012e0c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012e13:	05 00 10 00 00       	add    eax,0x1000
c0012e18:	89 c1                	mov    ecx,eax
c0012e1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012e1f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012e25:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012e2c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012e33:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012e43:	6a 01                	push   0x1
c0012e45:	e8 f3 64 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	89 c3                	mov    ebx,eax
c0012e4f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012e55:	0f 86 25 01 00 00    	jbe    c0012f80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012e5b:	c1 ee 0c             	shr    esi,0xc
c0012e5e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012e65:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012e69:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012e71:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012e78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e7c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012e83:	29 ef                	sub    edi,ebp
c0012e85:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012e89:	0f 83 f8 00 00 00    	jae    c0012f87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012e8f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012e95:	76 05                	jbe    c0012e9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012e97:	bf 00 10 00 00       	mov    edi,0x1000
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	31 d2                	xor    edx,edx
c0012ea1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012ea8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012eaa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012eae:	50                   	push   eax
c0012eaf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012eb3:	56                   	push   esi
c0012eb4:	52                   	push   edx
c0012eb5:	57                   	push   edi
c0012eb6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012ebd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012ec0:	83 c4 20             	add    esp,0x20
c0012ec3:	85 c0                	test   eax,eax
c0012ec5:	75 06                	jne    c0012ecd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012ec7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012ecb:	74 13                	je     c0012ee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012ecd:	83 ec 0c             	sub    esp,0xc
c0012ed0:	53                   	push   ebx
c0012ed1:	e8 5b 67 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ed6:	83 c4 10             	add    esp,0x10
c0012ed9:	31 c0                	xor    eax,eax
c0012edb:	e9 7c 01 00 00       	jmp    c001305c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012ee0:	fa                   	cli    
c0012ee1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012ee7:	e8 55 4c ff ff       	call   c0007b41 <Phys::allocatePage()>
c0012eec:	6a 07                	push   0x7
c0012eee:	89 c7                	mov    edi,eax
c0012ef0:	53                   	push   ebx
c0012ef1:	50                   	push   eax
c0012ef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ef7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012efa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f00:	e8 fb 6a ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f05:	83 c4 0c             	add    esp,0xc
c0012f08:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012f0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f15:	6a 00                	push   0x0
c0012f17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f1f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f25:	e8 48 69 ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c0012f2a:	58                   	pop    eax
c0012f2b:	5a                   	pop    edx
c0012f2c:	68 07 0c 00 00       	push   0xc07
c0012f31:	55                   	push   ebp
c0012f32:	57                   	push   edi
c0012f33:	89 df                	mov    edi,ebx
c0012f35:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012f3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f42:	6a 00                	push   0x0
c0012f44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f4c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f52:	e8 69 6e ff ff       	call   c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012f57:	b9 00 10 00 00       	mov    ecx,0x1000
c0012f5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f5e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012f63:	83 c4 20             	add    esp,0x20
c0012f66:	48                   	dec    eax
c0012f67:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012f6c:	85 c0                	test   eax,eax
c0012f6e:	75 01                	jne    c0012f71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012f70:	fb                   	sti    
c0012f71:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012f77:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012f7b:	e9 f1 fe ff ff       	jmp    c0012e71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012f80:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012f87:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012f8e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012f94:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012f9a:	0f 86 ae 00 00 00    	jbe    c001304e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012fa0:	fa                   	cli    
c0012fa1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012fa7:	c1 ee 0c             	shr    esi,0xc
c0012faa:	51                   	push   ecx
c0012fab:	31 ff                	xor    edi,edi
c0012fad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012fb4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012fba:	6a 00                	push   0x0
c0012fbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fc1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fc4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012fca:	e8 a3 68 ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c0012fcf:	83 c4 10             	add    esp,0x10
c0012fd2:	e8 6a 4b ff ff       	call   c0007b41 <Phys::allocatePage()>
c0012fd7:	47                   	inc    edi
c0012fd8:	6a 07                	push   0x7
c0012fda:	53                   	push   ebx
c0012fdb:	50                   	push   eax
c0012fdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fe0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012fe6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012fe9:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012fef:	e8 0c 6a ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012ff4:	58                   	pop    eax
c0012ff5:	5a                   	pop    edx
c0012ff6:	68 07 0c 00 00       	push   0xc07
c0012ffb:	55                   	push   ebp
c0012ffc:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013006:	50                   	push   eax
c0013007:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001300e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013014:	6a 00                	push   0x0
c0013016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001301b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001301e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013024:	e8 97 6d ff ff       	call   c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013029:	83 c4 1c             	add    esp,0x1c
c001302c:	68 00 10 00 00       	push   0x1000
c0013031:	6a 00                	push   0x0
c0013033:	53                   	push   ebx
c0013034:	e8 87 d4 fe ff       	call   c00004c0 <memset>
c0013039:	83 c4 10             	add    esp,0x10
c001303c:	39 fe                	cmp    esi,edi
c001303e:	77 92                	ja     c0012fd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0013040:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013045:	48                   	dec    eax
c0013046:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001304b:	75 01                	jne    c001304e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001304d:	fb                   	sti    
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	53                   	push   ebx
c0013052:	e8 da 65 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	b0 01                	mov    al,0x1
c001305c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013062:	5b                   	pop    ebx
c0013063:	5e                   	pop    esi
c0013064:	5f                   	pop    edi
c0013065:	5d                   	pop    ebp
c0013066:	c3                   	ret    

c0013067 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013067:	55                   	push   ebp
c0013068:	57                   	push   edi
c0013069:	56                   	push   esi
c001306a:	53                   	push   ebx
c001306b:	83 ec 48             	sub    esp,0x48
c001306e:	68 14 01 00 00       	push   0x114
c0013073:	e8 ed 47 ff ff       	call   c0007865 <malloc>
c0013078:	83 c4 0c             	add    esp,0xc
c001307b:	89 c6                	mov    esi,eax
c001307d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013081:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013085:	50                   	push   eax
c0013086:	e8 e5 7a ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c001308b:	58                   	pop    eax
c001308c:	5a                   	pop    edx
c001308d:	6a 01                	push   0x1
c001308f:	56                   	push   esi
c0013090:	e8 9b 7b ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	85 c0                	test   eax,eax
c001309a:	0f 85 47 01 00 00    	jne    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00130a8:	83 ec 0c             	sub    esp,0xc
c00130ab:	6a 34                	push   0x34
c00130ad:	e8 b3 47 ff ff       	call   c0007865 <malloc>
c00130b2:	89 c3                	mov    ebx,eax
c00130b4:	58                   	pop    eax
c00130b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00130b7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00130bb:	57                   	push   edi
c00130bc:	53                   	push   ebx
c00130bd:	6a 00                	push   0x0
c00130bf:	6a 34                	push   0x34
c00130c1:	56                   	push   esi
c00130c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00130c5:	83 c4 20             	add    esp,0x20
c00130c8:	85 c0                	test   eax,eax
c00130ca:	0f 85 17 01 00 00    	jne    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130d0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00130d6:	0f 85 0b 01 00 00    	jne    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130df:	85 c0                	test   eax,eax
c00130e1:	0f 84 00 01 00 00    	je     c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130e7:	31 d2                	xor    edx,edx
c00130e9:	55                   	push   ebp
c00130ea:	52                   	push   edx
c00130eb:	50                   	push   eax
c00130ec:	56                   	push   esi
c00130ed:	e8 fc 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	85 c0                	test   eax,eax
c00130f7:	0f 85 ea 00 00 00    	jne    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130fd:	83 ec 0c             	sub    esp,0xc
c0013100:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013103:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001310b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001310f:	0f af c2             	imul   eax,edx
c0013112:	50                   	push   eax
c0013113:	e8 4d 47 ff ff       	call   c0007865 <malloc>
c0013118:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001311a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001311e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013121:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013125:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013129:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001312d:	0f af c2             	imul   eax,edx
c0013130:	99                   	cdq    
c0013131:	52                   	push   edx
c0013132:	50                   	push   eax
c0013133:	56                   	push   esi
c0013134:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013137:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001313a:	83 c4 20             	add    esp,0x20
c001313d:	85 c0                	test   eax,eax
c001313f:	0f 84 a2 00 00 00    	je     c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013145:	31 d2                	xor    edx,edx
c0013147:	51                   	push   ecx
c0013148:	52                   	push   edx
c0013149:	50                   	push   eax
c001314a:	56                   	push   esi
c001314b:	e8 9e 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	85 c0                	test   eax,eax
c0013155:	0f 85 8c 00 00 00    	jne    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001315b:	83 ec 0c             	sub    esp,0xc
c001315e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013162:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013166:	31 ed                	xor    ebp,ebp
c0013168:	0f af c2             	imul   eax,edx
c001316b:	50                   	push   eax
c001316c:	e8 f4 46 ff ff       	call   c0007865 <malloc>
c0013171:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013173:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013177:	89 3c 24             	mov    DWORD PTR [esp],edi
c001317a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013182:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013186:	0f af c2             	imul   eax,edx
c0013189:	99                   	cdq    
c001318a:	52                   	push   edx
c001318b:	50                   	push   eax
c001318c:	56                   	push   esi
c001318d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013190:	83 c4 20             	add    esp,0x20
c0013193:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001319b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001319f:	0f 86 80 00 00 00    	jbe    c0013225 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00131a5:	0f b7 fd             	movzx  edi,bp
c00131a8:	c1 e7 05             	shl    edi,0x5
c00131ab:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00131af:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00131b2:	75 6b                	jne    c001321f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00131b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00131b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131bb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00131be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131c2:	52                   	push   edx
c00131c3:	31 d2                	xor    edx,edx
c00131c5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00131c8:	52                   	push   edx
c00131c9:	50                   	push   eax
c00131ca:	56                   	push   esi
c00131cb:	e8 1e 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 17                	je     c00131ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	68 8b 03 02 c0       	push   0xc002038b
c00131df:	e8 16 74 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00131e4:	83 c4 10             	add    esp,0x10
c00131e7:	31 c0                	xor    eax,eax
c00131e9:	e9 87 00 00 00       	jmp    c0013275 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00131f4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00131f7:	50                   	push   eax
c00131f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00131fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013200:	56                   	push   esi
c0013201:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013205:	e8 d1 fb ff ff       	call   c0012ddb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001320a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001320e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013212:	83 c4 20             	add    esp,0x20
c0013215:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013219:	73 04                	jae    c001321f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001321b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001321f:	45                   	inc    ebp
c0013220:	e9 76 ff ff ff       	jmp    c001319b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013225:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013229:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001322d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013231:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013237:	83 ec 0c             	sub    esp,0xc
c001323a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013240:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013245:	05 00 10 00 00       	add    eax,0x1000
c001324a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001324d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013251:	e8 1f 46 ff ff       	call   c0007875 <free>
c0013256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013259:	e8 17 46 ff ff       	call   c0007875 <free>
c001325e:	58                   	pop    eax
c001325f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013263:	e8 0d 46 ff ff       	call   c0007875 <free>
c0013268:	89 34 24             	mov    DWORD PTR [esp],esi
c001326b:	e8 1e 7a ff ff       	call   c000ac8e <File::close()>
c0013270:	83 c4 10             	add    esp,0x10
c0013273:	b0 01                	mov    al,0x1
c0013275:	83 c4 3c             	add    esp,0x3c
c0013278:	5b                   	pop    ebx
c0013279:	5e                   	pop    esi
c001327a:	5f                   	pop    edi
c001327b:	5d                   	pop    ebp
c001327c:	c3                   	ret    

c001327d <Thr::runtimeReferenceHelper()>:
c001327d:	83 ec 18             	sub    esp,0x18
c0013280:	68 93 03 02 c0       	push   0xc0020393
c0013285:	e8 70 73 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001328a:	fa                   	cli    
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	eb fe                	jmp    c001328e <Thr::runtimeReferenceHelper()+0x11>

c0013290 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013290:	57                   	push   edi
c0013291:	56                   	push   esi
c0013292:	53                   	push   ebx
c0013293:	31 db                	xor    ebx,ebx
c0013295:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c001329b:	7e 3c                	jle    c00132d9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001329d:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c00132a4:	31 ff                	xor    edi,edi
c00132a6:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c00132ad:	7e 27                	jle    c00132d6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00132af:	50                   	push   eax
c00132b0:	50                   	push   eax
c00132b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00132b7:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c00132be:	50                   	push   eax
c00132bf:	e8 0c d4 fe ff       	call   c00006d0 <strcmp>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	85 c0                	test   eax,eax
c00132c9:	75 05                	jne    c00132d0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00132cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00132ce:	eb 0b                	jmp    c00132db <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00132d0:	83 c6 10             	add    esi,0x10
c00132d3:	47                   	inc    edi
c00132d4:	eb d0                	jmp    c00132a6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00132d6:	43                   	inc    ebx
c00132d7:	eb bc                	jmp    c0013295 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00132d9:	31 c0                	xor    eax,eax
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	c3                   	ret    

c00132df <Thr::loadKernelSymbolTable(char const*)>:
c00132df:	55                   	push   ebp
c00132e0:	57                   	push   edi
c00132e1:	56                   	push   esi
c00132e2:	53                   	push   ebx
c00132e3:	83 ec 68             	sub    esp,0x68
c00132e6:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c00132ec:	68 14 01 00 00       	push   0x114
c00132f1:	e8 6f 45 ff ff       	call   c0007865 <malloc>
c00132f6:	83 c4 0c             	add    esp,0xc
c00132f9:	89 c3                	mov    ebx,eax
c00132fb:	56                   	push   esi
c00132fc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013300:	50                   	push   eax
c0013301:	e8 6a 78 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0013306:	5e                   	pop    esi
c0013307:	5f                   	pop    edi
c0013308:	6a 01                	push   0x1
c001330a:	53                   	push   ebx
c001330b:	e8 20 79 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	85 c0                	test   eax,eax
c0013315:	74 0a                	je     c0013321 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013317:	83 ec 0c             	sub    esp,0xc
c001331a:	68 b5 03 02 c0       	push   0xc00203b5
c001331f:	eb 34                	jmp    c0013355 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013321:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013329:	83 ec 0c             	sub    esp,0xc
c001332c:	6a 34                	push   0x34
c001332e:	e8 32 45 ff ff       	call   c0007865 <malloc>
c0013333:	59                   	pop    ecx
c0013334:	89 c7                	mov    edi,eax
c0013336:	8d 74 24 34          	lea    esi,[esp+0x34]
c001333a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001333c:	56                   	push   esi
c001333d:	57                   	push   edi
c001333e:	6a 00                	push   0x0
c0013340:	6a 34                	push   0x34
c0013342:	53                   	push   ebx
c0013343:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013346:	83 c4 20             	add    esp,0x20
c0013349:	85 c0                	test   eax,eax
c001334b:	74 17                	je     c0013364 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001334d:	83 ec 0c             	sub    esp,0xc
c0013350:	68 cc 03 02 c0       	push   0xc00203cc
c0013355:	e8 61 d0 ff ff       	call   c00103bb <KePanic(char const*)>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	31 c0                	xor    eax,eax
c001335f:	e9 31 02 00 00       	jmp    c0013595 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013364:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001336a:	75 e1                	jne    c001334d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001336c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001336f:	85 c0                	test   eax,eax
c0013371:	74 da                	je     c001334d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013373:	52                   	push   edx
c0013374:	31 d2                	xor    edx,edx
c0013376:	52                   	push   edx
c0013377:	50                   	push   eax
c0013378:	53                   	push   ebx
c0013379:	e8 70 79 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001337e:	83 c4 10             	add    esp,0x10
c0013381:	85 c0                	test   eax,eax
c0013383:	75 c8                	jne    c001334d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001338c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013390:	31 ed                	xor    ebp,ebp
c0013392:	0f af c2             	imul   eax,edx
c0013395:	50                   	push   eax
c0013396:	e8 ca 44 ff ff       	call   c0007865 <malloc>
c001339b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001339d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00133a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133a8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00133ac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00133b0:	0f af c2             	imul   eax,edx
c00133b3:	99                   	cdq    
c00133b4:	52                   	push   edx
c00133b5:	50                   	push   eax
c00133b6:	53                   	push   ebx
c00133b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133ba:	83 c4 20             	add    esp,0x20
c00133bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00133cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00133d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00133dd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00133e1:	0f 86 aa 00 00 00    	jbe    c0013491 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00133e7:	0f b7 f5             	movzx  esi,bp
c00133ea:	6b f6 28             	imul   esi,esi,0x28
c00133ed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00133f1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00133f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133f8:	50                   	push   eax
c00133f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00133fd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013401:	8b 16                	mov    edx,DWORD PTR [esi]
c0013403:	6b c0 28             	imul   eax,eax,0x28
c0013406:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001340a:	89 d0                	mov    eax,edx
c001340c:	31 d2                	xor    edx,edx
c001340e:	52                   	push   edx
c001340f:	50                   	push   eax
c0013410:	53                   	push   ebx
c0013411:	e8 d8 78 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013416:	83 c4 0c             	add    esp,0xc
c0013419:	6a 20                	push   0x20
c001341b:	6a 00                	push   0x0
c001341d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013421:	52                   	push   edx
c0013422:	e8 99 d0 fe ff       	call   c00004c0 <memset>
c0013427:	58                   	pop    eax
c0013428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001342a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001342e:	51                   	push   ecx
c001342f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013433:	52                   	push   edx
c0013434:	6a 00                	push   0x0
c0013436:	6a 1f                	push   0x1f
c0013438:	53                   	push   ebx
c0013439:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001343c:	83 c4 18             	add    esp,0x18
c001343f:	68 e3 03 02 c0       	push   0xc00203e3
c0013444:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013448:	52                   	push   edx
c0013449:	e8 82 d2 fe ff       	call   c00006d0 <strcmp>
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	85 c0                	test   eax,eax
c0013453:	75 0f                	jne    c0013464 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013455:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013458:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001345c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013464:	50                   	push   eax
c0013465:	50                   	push   eax
c0013466:	68 eb 03 02 c0       	push   0xc00203eb
c001346b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001346f:	50                   	push   eax
c0013470:	e8 5b d2 fe ff       	call   c00006d0 <strcmp>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	85 c0                	test   eax,eax
c001347a:	75 0f                	jne    c001348b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001347c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001347f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013483:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013487:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001348b:	45                   	inc    ebp
c001348c:	e9 4c ff ff ff       	jmp    c00133dd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013491:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013496:	75 10                	jne    c00134a8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	68 f3 03 02 c0       	push   0xc00203f3
c00134a0:	e8 16 cf ff ff       	call   c00103bb <KePanic(char const*)>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00134ad:	75 10                	jne    c00134bf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	68 f3 03 02 c0       	push   0xc00203f3
c00134b7:	e8 ff ce ff ff       	call   c00103bb <KePanic(char const*)>
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	31 d2                	xor    edx,edx
c00134c1:	50                   	push   eax
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	52                   	push   edx
c00134c7:	50                   	push   eax
c00134c8:	53                   	push   ebx
c00134c9:	e8 20 78 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00134ce:	5a                   	pop    edx
c00134cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134d3:	e8 8d 43 ff ff       	call   c0007865 <malloc>
c00134d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00134dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134e0:	31 c9                	xor    ecx,ecx
c00134e2:	5e                   	pop    esi
c00134e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00134e9:	55                   	push   ebp
c00134ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ee:	51                   	push   ecx
c00134ef:	52                   	push   edx
c00134f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00134f4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00134f8:	53                   	push   ebx
c00134f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134fc:	83 c4 14             	add    esp,0x14
c00134ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013503:	e8 5d 43 ff ff       	call   c0007865 <malloc>
c0013508:	89 c6                	mov    esi,eax
c001350a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001350c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001350f:	56                   	push   esi
c0013510:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013514:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013518:	51                   	push   ecx
c0013519:	52                   	push   edx
c001351a:	53                   	push   ebx
c001351b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001351e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013522:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c0013528:	83 c4 1c             	add    esp,0x1c
c001352b:	c1 e8 04             	shr    eax,0x4
c001352e:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c0013535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013539:	31 d2                	xor    edx,edx
c001353b:	52                   	push   edx
c001353c:	50                   	push   eax
c001353d:	53                   	push   ebx
c001353e:	e8 ab 77 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013543:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013545:	31 d2                	xor    edx,edx
c0013547:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001354a:	56                   	push   esi
c001354b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001354f:	52                   	push   edx
c0013550:	50                   	push   eax
c0013551:	53                   	push   ebx
c0013552:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013555:	83 c4 14             	add    esp,0x14
c0013558:	53                   	push   ebx
c0013559:	e8 30 77 ff ff       	call   c000ac8e <File::close()>
c001355e:	5d                   	pop    ebp
c001355f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013563:	e8 0d 43 ff ff       	call   c0007875 <free>
c0013568:	89 3c 24             	mov    DWORD PTR [esp],edi
c001356b:	e8 05 43 ff ff       	call   c0007875 <free>
c0013570:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c0013575:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013579:	8d 50 01             	lea    edx,[eax+0x1]
c001357c:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c0013583:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c001358a:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013590:	83 c4 10             	add    esp,0x10
c0013593:	b0 01                	mov    al,0x1
c0013595:	83 c4 5c             	add    esp,0x5c
c0013598:	5b                   	pop    ebx
c0013599:	5e                   	pop    esi
c001359a:	5f                   	pop    edi
c001359b:	5d                   	pop    ebp
c001359c:	c3                   	ret    

c001359d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001359d:	55                   	push   ebp
c001359e:	57                   	push   edi
c001359f:	56                   	push   esi
c00135a0:	53                   	push   ebx
c00135a1:	81 ec 68 03 00 00    	sub    esp,0x368
c00135a7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00135ae:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c00135b4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00135b8:	68 14 01 00 00       	push   0x114
c00135bd:	e8 a3 42 ff ff       	call   c0007865 <malloc>
c00135c2:	83 c4 0c             	add    esp,0xc
c00135c5:	89 c5                	mov    ebp,eax
c00135c7:	53                   	push   ebx
c00135c8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00135cf:	50                   	push   eax
c00135d0:	e8 9b 75 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00135d5:	5e                   	pop    esi
c00135d6:	5f                   	pop    edi
c00135d7:	6a 01                	push   0x1
c00135d9:	55                   	push   ebp
c00135da:	e8 51 76 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	85 c0                	test   eax,eax
c00135e4:	0f 85 a7 06 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00135ea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00135f2:	83 ec 0c             	sub    esp,0xc
c00135f5:	6a 34                	push   0x34
c00135f7:	e8 69 42 ff ff       	call   c0007865 <malloc>
c00135fc:	5b                   	pop    ebx
c00135fd:	89 c7                	mov    edi,eax
c00135ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013603:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013606:	53                   	push   ebx
c0013607:	57                   	push   edi
c0013608:	6a 00                	push   0x0
c001360a:	6a 34                	push   0x34
c001360c:	55                   	push   ebp
c001360d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013610:	83 c4 20             	add    esp,0x20
c0013613:	85 c0                	test   eax,eax
c0013615:	0f 85 76 06 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001361b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013621:	0f 85 6a 06 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013627:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001362a:	85 c0                	test   eax,eax
c001362c:	0f 84 5f 06 00 00    	je     c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013632:	31 d2                	xor    edx,edx
c0013634:	51                   	push   ecx
c0013635:	52                   	push   edx
c0013636:	50                   	push   eax
c0013637:	55                   	push   ebp
c0013638:	e8 b1 76 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001363d:	83 c4 10             	add    esp,0x10
c0013640:	85 c0                	test   eax,eax
c0013642:	0f 85 49 06 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001364e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013652:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013656:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001365a:	0f af c2             	imul   eax,edx
c001365d:	50                   	push   eax
c001365e:	e8 02 42 ff ff       	call   c0007865 <malloc>
c0013663:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013666:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001366a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001366d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013671:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013675:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013679:	0f af c2             	imul   eax,edx
c001367c:	99                   	cdq    
c001367d:	52                   	push   edx
c001367e:	50                   	push   eax
c001367f:	55                   	push   ebp
c0013680:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013683:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013686:	83 c4 20             	add    esp,0x20
c0013689:	85 c0                	test   eax,eax
c001368b:	0f 84 00 06 00 00    	je     c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013691:	52                   	push   edx
c0013692:	31 d2                	xor    edx,edx
c0013694:	52                   	push   edx
c0013695:	50                   	push   eax
c0013696:	55                   	push   ebp
c0013697:	e8 52 76 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	85 c0                	test   eax,eax
c00136a1:	0f 85 ea 05 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00136a7:	83 ec 0c             	sub    esp,0xc
c00136aa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00136ae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00136b2:	31 f6                	xor    esi,esi
c00136b4:	0f af c2             	imul   eax,edx
c00136b7:	50                   	push   eax
c00136b8:	e8 a8 41 ff ff       	call   c0007865 <malloc>
c00136bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00136c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00136cb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00136cf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00136d3:	0f af c2             	imul   eax,edx
c00136d6:	99                   	cdq    
c00136d7:	52                   	push   edx
c00136d8:	50                   	push   eax
c00136d9:	55                   	push   ebp
c00136da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136dd:	83 c4 20             	add    esp,0x20
c00136e0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00136e4:	0f 86 8a 00 00 00    	jbe    c0013774 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00136ea:	0f b7 de             	movzx  ebx,si
c00136ed:	c1 e3 05             	shl    ebx,0x5
c00136f0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00136f4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00136f7:	75 75                	jne    c001376e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00136f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00136fc:	31 d2                	xor    edx,edx
c00136fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013702:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013705:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013709:	50                   	push   eax
c001370a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001370d:	52                   	push   edx
c001370e:	50                   	push   eax
c001370f:	55                   	push   ebp
c0013710:	e8 d9 75 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	85 c0                	test   eax,eax
c001371a:	0f 85 71 05 00 00    	jne    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013720:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013727:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001372a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001372e:	31 d2                	xor    edx,edx
c0013730:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013734:	83 ec 0c             	sub    esp,0xc
c0013737:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013742:	50                   	push   eax
c0013743:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001374b:	52                   	push   edx
c001374c:	50                   	push   eax
c001374d:	55                   	push   ebp
c001374e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013751:	83 c4 1c             	add    esp,0x1c
c0013754:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013757:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001375a:	50                   	push   eax
c001375b:	6a 00                	push   0x0
c001375d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013761:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013765:	50                   	push   eax
c0013766:	e8 55 cd fe ff       	call   c00004c0 <memset>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	46                   	inc    esi
c001376f:	e9 6c ff ff ff       	jmp    c00136e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013774:	53                   	push   ebx
c0013775:	31 db                	xor    ebx,ebx
c0013777:	68 00 01 00 00       	push   0x100
c001377c:	6a 00                	push   0x0
c001377e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013782:	50                   	push   eax
c0013783:	e8 38 cd fe ff       	call   c00004c0 <memset>
c0013788:	83 c4 0c             	add    esp,0xc
c001378b:	68 00 01 00 00       	push   0x100
c0013790:	6a 00                	push   0x0
c0013792:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013799:	50                   	push   eax
c001379a:	e8 21 cd fe ff       	call   c00004c0 <memset>
c001379f:	83 c4 10             	add    esp,0x10
c00137a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00137aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00137b2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00137ba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00137c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00137ca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00137ce:	0f 86 30 01 00 00    	jbe    c0013904 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00137d4:	0f b7 f3             	movzx  esi,bx
c00137d7:	6b f6 28             	imul   esi,esi,0x28
c00137da:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00137de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00137e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137e5:	52                   	push   edx
c00137e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137ea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00137ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00137f0:	6b d2 28             	imul   edx,edx,0x28
c00137f3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00137f7:	31 d2                	xor    edx,edx
c00137f9:	52                   	push   edx
c00137fa:	50                   	push   eax
c00137fb:	55                   	push   ebp
c00137fc:	e8 ed 74 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	6a 20                	push   0x20
c0013806:	6a 00                	push   0x0
c0013808:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001380f:	51                   	push   ecx
c0013810:	e8 ab cc fe ff       	call   c00004c0 <memset>
c0013815:	59                   	pop    ecx
c0013816:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013819:	8d 54 24 58          	lea    edx,[esp+0x58]
c001381d:	52                   	push   edx
c001381e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013825:	51                   	push   ecx
c0013826:	6a 00                	push   0x0
c0013828:	6a 1f                	push   0x1f
c001382a:	55                   	push   ebp
c001382b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001382e:	83 c4 1c             	add    esp,0x1c
c0013831:	6a 09                	push   0x9
c0013833:	68 0d 04 02 c0       	push   0xc002040d
c0013838:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001383f:	51                   	push   ecx
c0013840:	e8 3b cb fe ff       	call   c0000380 <memcmp>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	85 c0                	test   eax,eax
c001384a:	75 21                	jne    c001386d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001384c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013850:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013854:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013858:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001385c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001385f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013866:	89 d0                	mov    eax,edx
c0013868:	40                   	inc    eax
c0013869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001386d:	50                   	push   eax
c001386e:	6a 09                	push   0x9
c0013870:	68 17 04 02 c0       	push   0xc0020417
c0013875:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001387c:	50                   	push   eax
c001387d:	e8 fe ca fe ff       	call   c0000380 <memcmp>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	85 c0                	test   eax,eax
c0013887:	75 21                	jne    c00138aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013889:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001388d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013891:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013895:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013899:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001389c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00138a3:	89 d0                	mov    eax,edx
c00138a5:	40                   	inc    eax
c00138a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138aa:	50                   	push   eax
c00138ab:	50                   	push   eax
c00138ac:	68 e3 03 02 c0       	push   0xc00203e3
c00138b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00138b8:	50                   	push   eax
c00138b9:	e8 12 ce fe ff       	call   c00006d0 <strcmp>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	85 c0                	test   eax,eax
c00138c3:	75 0f                	jne    c00138d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00138c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00138d4:	50                   	push   eax
c00138d5:	50                   	push   eax
c00138d6:	68 eb 03 02 c0       	push   0xc00203eb
c00138db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00138e2:	50                   	push   eax
c00138e3:	e8 e8 cd fe ff       	call   c00006d0 <strcmp>
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	85 c0                	test   eax,eax
c00138ed:	75 0f                	jne    c00138fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00138ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00138f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00138fe:	43                   	inc    ebx
c00138ff:	e9 c6 fe ff ff       	jmp    c00137ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013904:	31 d2                	xor    edx,edx
c0013906:	50                   	push   eax
c0013907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001390b:	52                   	push   edx
c001390c:	50                   	push   eax
c001390d:	55                   	push   ebp
c001390e:	e8 db 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013913:	58                   	pop    eax
c0013914:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013918:	e8 48 3f ff ff       	call   c0007865 <malloc>
c001391d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013920:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013924:	31 d2                	xor    edx,edx
c0013926:	58                   	pop    eax
c0013927:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001392b:	53                   	push   ebx
c001392c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013930:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013934:	52                   	push   edx
c0013935:	50                   	push   eax
c0013936:	55                   	push   ebp
c0013937:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001393a:	83 c4 14             	add    esp,0x14
c001393d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013941:	e8 1f 3f ff ff       	call   c0007865 <malloc>
c0013946:	31 d2                	xor    edx,edx
c0013948:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001394c:	83 c4 0c             	add    esp,0xc
c001394f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013953:	52                   	push   edx
c0013954:	50                   	push   eax
c0013955:	55                   	push   ebp
c0013956:	e8 93 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001395b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001395e:	31 d2                	xor    edx,edx
c0013960:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013963:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013967:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001396b:	52                   	push   edx
c001396c:	50                   	push   eax
c001396d:	55                   	push   ebp
c001396e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013971:	83 c4 20             	add    esp,0x20
c0013974:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001397c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013980:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013984:	0f 84 0b 03 00 00    	je     c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001398a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013991:	31 d2                	xor    edx,edx
c0013993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013997:	c1 e8 03             	shr    eax,0x3
c001399a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001399e:	51                   	push   ecx
c001399f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00139a7:	52                   	push   edx
c00139a8:	50                   	push   eax
c00139a9:	55                   	push   ebp
c00139aa:	e8 3f 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00139af:	5b                   	pop    ebx
c00139b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00139bb:	e8 a5 3e ff ff       	call   c0007865 <malloc>
c00139c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139c7:	31 d2                	xor    edx,edx
c00139c9:	5e                   	pop    esi
c00139ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c00139ce:	50                   	push   eax
c00139cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00139d7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00139de:	52                   	push   edx
c00139df:	50                   	push   eax
c00139e0:	55                   	push   ebp
c00139e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139e4:	83 c4 20             	add    esp,0x20
c00139e7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00139ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00139f3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00139f7:	0f 8d 7c 02 00 00    	jge    c0013c79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00139fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a05:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013a0a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013a0d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a15:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013a19:	89 d8                	mov    eax,ebx
c0013a1b:	c1 e8 08             	shr    eax,0x8
c0013a1e:	89 c6                	mov    esi,eax
c0013a20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013a24:	c1 e6 04             	shl    esi,0x4
c0013a27:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a2b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013a2e:	85 d2                	test   edx,edx
c0013a30:	0f 85 bf 00 00 00    	jne    c0013af5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a3d:	03 06                	add    eax,DWORD PTR [esi]
c0013a3f:	50                   	push   eax
c0013a40:	e8 4b f8 ff ff       	call   c0013290 <Thr::getAddressOfKernelSymbol(char const*)>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	89 c2                	mov    edx,eax
c0013a4a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013a4f:	85 c0                	test   eax,eax
c0013a51:	0f 85 9e 00 00 00    	jne    c0013af5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a57:	83 ec 0c             	sub    esp,0xc
c0013a5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a5e:	03 06                	add    eax,DWORD PTR [esi]
c0013a60:	50                   	push   eax
c0013a61:	e8 a6 ca ff ff       	call   c001050c <KeResolveCompatibilitySymbol(char*)>
c0013a66:	83 c4 10             	add    esp,0x10
c0013a69:	89 c2                	mov    edx,eax
c0013a6b:	85 c0                	test   eax,eax
c0013a6d:	0f 85 82 00 00 00    	jne    c0013af5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013a77:	50                   	push   eax
c0013a78:	50                   	push   eax
c0013a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a7d:	03 06                	add    eax,DWORD PTR [esi]
c0013a7f:	50                   	push   eax
c0013a80:	68 21 04 02 c0       	push   0xc0020421
c0013a85:	e8 70 6b ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013a8a:	58                   	pop    eax
c0013a8b:	5a                   	pop    edx
c0013a8c:	68 3b 04 02 c0       	push   0xc002043b
c0013a91:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013a98:	50                   	push   eax
c0013a99:	e8 52 cb fe ff       	call   c00005f0 <strcpy>
c0013a9e:	59                   	pop    ecx
c0013a9f:	58                   	pop    eax
c0013aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013aa4:	03 06                	add    eax,DWORD PTR [esi]
c0013aa6:	50                   	push   eax
c0013aa7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013aae:	50                   	push   eax
c0013aaf:	e8 fc cc fe ff       	call   c00007b0 <strcat>
c0013ab4:	58                   	pop    eax
c0013ab5:	5a                   	pop    edx
c0013ab6:	68 d1 04 02 c0       	push   0xc00204d1
c0013abb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ac2:	50                   	push   eax
c0013ac3:	e8 e8 cc fe ff       	call   c00007b0 <strcat>
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ad0:	0f 84 5d 01 00 00    	je     c0013c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ad6:	83 ec 0c             	sub    esp,0xc
c0013ad9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ae0:	50                   	push   eax
c0013ae1:	e8 d5 c8 ff ff       	call   c00103bb <KePanic(char const*)>
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013aed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013af1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013af5:	80 fb 01             	cmp    bl,0x1
c0013af8:	0f 85 88 00 00 00    	jne    c0013b86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013afe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013b05:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013b09:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013b0d:	01 ce                	add    esi,ecx
c0013b0f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013b15:	0f 94 c0             	sete   al
c0013b18:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013b1e:	0f 94 c3             	sete   bl
c0013b21:	09 c3                	or     ebx,eax
c0013b23:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b25:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013b2a:	74 41                	je     c0013b6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013b2c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013b2f:	84 db                	test   bl,bl
c0013b31:	75 15                	jne    c0013b48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013b33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b37:	66 83 f8 0c          	cmp    ax,0xc
c0013b3b:	76 05                	jbe    c0013b42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013b3d:	b8 0c 00 00 00       	mov    eax,0xc
c0013b42:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013b46:	76 37                	jbe    c0013b7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b48:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013b4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013b51:	0f 84 dc 00 00 00    	je     c0013c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013b57:	83 ec 0c             	sub    esp,0xc
c0013b5a:	68 52 04 02 c0       	push   0xc0020452
c0013b5f:	e8 57 c8 ff ff       	call   c00103bb <KePanic(char const*)>
c0013b64:	83 c4 10             	add    esp,0x10
c0013b67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013b6b:	eb 12                	jmp    c0013b7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b6d:	01 c1                	add    ecx,eax
c0013b6f:	84 db                	test   bl,bl
c0013b71:	75 0c                	jne    c0013b7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b77:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013b7b:	77 02                	ja     c0013b7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b7d:	01 d1                	add    ecx,edx
c0013b7f:	89 0e                	mov    DWORD PTR [esi],ecx
c0013b81:	e9 ea 00 00 00       	jmp    c0013c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013b86:	80 fb 02             	cmp    bl,0x2
c0013b89:	75 7c                	jne    c0013c07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013b8b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013b92:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013b96:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013b9a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013ba0:	74 20                	je     c0013bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013ba2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013ba8:	74 18                	je     c0013bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013baa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bae:	b9 0a 00 00 00       	mov    ecx,0xa
c0013bb3:	66 83 f8 0e          	cmp    ax,0xe
c0013bb7:	77 03                	ja     c0013bbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013bb9:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013bbc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013bc0:	76 1f                	jbe    c0013be1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013bc2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013bc6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013bcb:	74 66                	je     c0013c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013bcd:	83 ec 0c             	sub    esp,0xc
c0013bd0:	68 6e 04 02 c0       	push   0xc002046e
c0013bd5:	e8 e1 c7 ff ff       	call   c00103bb <KePanic(char const*)>
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013be1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013be3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013be8:	74 13                	je     c0013bfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013bea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013bee:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013bf5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013bf9:	01 c8                	add    eax,ecx
c0013bfb:	eb 04                	jmp    c0013c01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013bfd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013c01:	01 c2                	add    edx,eax
c0013c03:	89 16                	mov    DWORD PTR [esi],edx
c0013c05:	eb 69                	jmp    c0013c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c07:	0f b6 db             	movzx  ebx,bl
c0013c0a:	50                   	push   eax
c0013c0b:	50                   	push   eax
c0013c0c:	53                   	push   ebx
c0013c0d:	68 8a 04 02 c0       	push   0xc002048a
c0013c12:	e8 e3 69 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013c1f:	74 12                	je     c0013c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013c21:	83 ec 0c             	sub    esp,0xc
c0013c24:	68 95 04 02 c0       	push   0xc0020495
c0013c29:	e8 8d c7 ff ff       	call   c00103bb <KePanic(char const*)>
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	eb 3d                	jmp    c0013c70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c33:	83 ec 0c             	sub    esp,0xc
c0013c36:	55                   	push   ebp
c0013c37:	e8 52 70 ff ff       	call   c000ac8e <File::close()>
c0013c3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013c3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c45:	59                   	pop    ecx
c0013c46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c4a:	e8 26 3c ff ff       	call   c0007875 <free>
c0013c4f:	5b                   	pop    ebx
c0013c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013c54:	e8 1c 3c ff ff       	call   c0007875 <free>
c0013c59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013c5c:	e8 14 3c ff ff       	call   c0007875 <free>
c0013c61:	5e                   	pop    esi
c0013c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c66:	e8 0a 3c ff ff       	call   c0007875 <free>
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	eb 21                	jmp    c0013c91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013c70:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013c74:	e9 76 fd ff ff       	jmp    c00139ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013c79:	83 ec 0c             	sub    esp,0xc
c0013c7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c80:	e8 f0 3b ff ff       	call   c0007875 <free>
c0013c85:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	e9 eb fc ff ff       	jmp    c001397c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013c91:	31 c0                	xor    eax,eax
c0013c93:	eb 33                	jmp    c0013cc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013c95:	83 ec 0c             	sub    esp,0xc
c0013c98:	55                   	push   ebp
c0013c99:	e8 f0 6f ff ff       	call   c000ac8e <File::close()>
c0013c9e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ca1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ca7:	58                   	pop    eax
c0013ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013cac:	e8 c4 3b ff ff       	call   c0007875 <free>
c0013cb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013cb4:	e8 bc 3b ff ff       	call   c0007875 <free>
c0013cb9:	5a                   	pop    edx
c0013cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cbe:	e8 b2 3b ff ff       	call   c0007875 <free>
c0013cc3:	83 c4 10             	add    esp,0x10
c0013cc6:	b0 01                	mov    al,0x1
c0013cc8:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013cce:	5b                   	pop    ebx
c0013ccf:	5e                   	pop    esi
c0013cd0:	5f                   	pop    edi
c0013cd1:	5d                   	pop    ebp
c0013cd2:	c3                   	ret    

c0013cd3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013cd3:	56                   	push   esi
c0013cd4:	31 d2                	xor    edx,edx
c0013cd6:	53                   	push   ebx
c0013cd7:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ce1:	39 d3                	cmp    ebx,edx
c0013ce3:	7e 1b                	jle    c0013d00 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013ce5:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013cec:	39 c8                	cmp    eax,ecx
c0013cee:	77 0d                	ja     c0013cfd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013cf0:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013cf7:	01 c6                	add    esi,eax
c0013cf9:	39 ce                	cmp    esi,ecx
c0013cfb:	77 05                	ja     c0013d02 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013cfd:	42                   	inc    edx
c0013cfe:	eb e1                	jmp    c0013ce1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013d00:	31 c0                	xor    eax,eax
c0013d02:	5b                   	pop    ebx
c0013d03:	5e                   	pop    esi
c0013d04:	c3                   	ret    

c0013d05 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013d05:	53                   	push   ebx
c0013d06:	31 c0                	xor    eax,eax
c0013d08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d0c:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013d12:	39 c3                	cmp    ebx,eax
c0013d14:	7e 22                	jle    c0013d38 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013d16:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013d1d:	39 ca                	cmp    edx,ecx
c0013d1f:	77 14                	ja     c0013d35 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d21:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013d28:	39 ca                	cmp    edx,ecx
c0013d2a:	76 09                	jbe    c0013d35 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d2c:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013d33:	eb 05                	jmp    c0013d3a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013d35:	40                   	inc    eax
c0013d36:	eb da                	jmp    c0013d12 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013d38:	31 c0                	xor    eax,eax
c0013d3a:	5b                   	pop    ebx
c0013d3b:	c3                   	ret    

c0013d3c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013d3c:	53                   	push   ebx
c0013d3d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013d41:	53                   	push   ebx
c0013d42:	e8 8c ff ff ff       	call   c0013cd3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013d47:	5a                   	pop    edx
c0013d48:	31 d2                	xor    edx,edx
c0013d4a:	85 c0                	test   eax,eax
c0013d4c:	74 04                	je     c0013d52 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013d4e:	89 da                	mov    edx,ebx
c0013d50:	29 c2                	sub    edx,eax
c0013d52:	89 d0                	mov    eax,edx
c0013d54:	5b                   	pop    ebx
c0013d55:	c3                   	ret    

c0013d56 <Thr::loadDLL(char const*, bool)>:
c0013d56:	55                   	push   ebp
c0013d57:	57                   	push   edi
c0013d58:	56                   	push   esi
c0013d59:	53                   	push   ebx
c0013d5a:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d60:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013d67:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013d6e:	56                   	push   esi
c0013d6f:	68 ad 04 02 c0       	push   0xc00204ad
c0013d74:	e8 81 68 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013d79:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013d80:	e8 e0 3a ff ff       	call   c0007865 <malloc>
c0013d85:	83 c4 0c             	add    esp,0xc
c0013d88:	89 c3                	mov    ebx,eax
c0013d8a:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0013d90:	56                   	push   esi
c0013d91:	50                   	push   eax
c0013d92:	e8 d9 6d ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0013d97:	83 c4 10             	add    esp,0x10
c0013d9a:	85 db                	test   ebx,ebx
c0013d9c:	75 3c                	jne    c0013dda <Thr::loadDLL(char const*, bool)+0x84>
c0013d9e:	89 f8                	mov    eax,edi
c0013da0:	84 c0                	test   al,al
c0013da2:	0f 84 d2 01 00 00    	je     c0013f7a <Thr::loadDLL(char const*, bool)+0x224>
c0013da8:	55                   	push   ebp
c0013da9:	55                   	push   ebp
c0013daa:	68 be 04 02 c0       	push   0xc00204be
c0013daf:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013db3:	55                   	push   ebp
c0013db4:	e8 37 c8 fe ff       	call   c00005f0 <strcpy>
c0013db9:	58                   	pop    eax
c0013dba:	5a                   	pop    edx
c0013dbb:	56                   	push   esi
c0013dbc:	55                   	push   ebp
c0013dbd:	e8 ee c9 fe ff       	call   c00007b0 <strcat>
c0013dc2:	59                   	pop    ecx
c0013dc3:	58                   	pop    eax
c0013dc4:	68 d1 04 02 c0       	push   0xc00204d1
c0013dc9:	55                   	push   ebp
c0013dca:	e8 e1 c9 fe ff       	call   c00007b0 <strcat>
c0013dcf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dd2:	e8 e4 c5 ff ff       	call   c00103bb <KePanic(char const*)>
c0013dd7:	83 c4 10             	add    esp,0x10
c0013dda:	51                   	push   ecx
c0013ddb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013ddf:	50                   	push   eax
c0013de0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013de4:	50                   	push   eax
c0013de5:	53                   	push   ebx
c0013de6:	e8 f1 70 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	85 db                	test   ebx,ebx
c0013df0:	74 0c                	je     c0013dfe <Thr::loadDLL(char const*, bool)+0xa8>
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df7:	53                   	push   ebx
c0013df8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013dfb:	83 c4 10             	add    esp,0x10
c0013dfe:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013e03:	75 0a                	jne    c0013e0f <Thr::loadDLL(char const*, bool)+0xb9>
c0013e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e09:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013e0d:	75 3c                	jne    c0013e4b <Thr::loadDLL(char const*, bool)+0xf5>
c0013e0f:	89 f8                	mov    eax,edi
c0013e11:	84 c0                	test   al,al
c0013e13:	0f 84 49 01 00 00    	je     c0013f62 <Thr::loadDLL(char const*, bool)+0x20c>
c0013e19:	51                   	push   ecx
c0013e1a:	51                   	push   ecx
c0013e1b:	68 be 04 02 c0       	push   0xc00204be
c0013e20:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013e24:	53                   	push   ebx
c0013e25:	e8 c6 c7 fe ff       	call   c00005f0 <strcpy>
c0013e2a:	5d                   	pop    ebp
c0013e2b:	58                   	pop    eax
c0013e2c:	56                   	push   esi
c0013e2d:	53                   	push   ebx
c0013e2e:	e8 7d c9 fe ff       	call   c00007b0 <strcat>
c0013e33:	58                   	pop    eax
c0013e34:	5a                   	pop    edx
c0013e35:	68 d1 04 02 c0       	push   0xc00204d1
c0013e3a:	53                   	push   ebx
c0013e3b:	e8 70 c9 fe ff       	call   c00007b0 <strcat>
c0013e40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e43:	e8 73 c5 ff ff       	call   c00103bb <KePanic(char const*)>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	52                   	push   edx
c0013e4c:	6a 03                	push   0x3
c0013e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e56:	05 ff 0f 00 00       	add    eax,0xfff
c0013e5b:	83 d2 00             	adc    edx,0x0
c0013e5e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013e62:	50                   	push   eax
c0013e63:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013e69:	e8 96 5c ff ff       	call   c0009b04 <VAS::allocatePages(int, int)>
c0013e6e:	59                   	pop    ecx
c0013e6f:	89 c3                	mov    ebx,eax
c0013e71:	5d                   	pop    ebp
c0013e72:	50                   	push   eax
c0013e73:	68 32 f1 01 c0       	push   0xc001f132
c0013e78:	e8 7d 67 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e80:	e8 ab c6 fe ff       	call   c0000530 <strlen>
c0013e85:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c0013e8b:	40                   	inc    eax
c0013e8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e8f:	e8 d1 39 ff ff       	call   c0007865 <malloc>
c0013e94:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c0013e9b:	58                   	pop    eax
c0013e9c:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013ea1:	5a                   	pop    edx
c0013ea2:	56                   	push   esi
c0013ea3:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c0013eaa:	e8 41 c7 fe ff       	call   c00005f0 <strcpy>
c0013eaf:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013eb4:	8d 50 01             	lea    edx,[eax+0x1]
c0013eb7:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0013ebe:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0013ec4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ec8:	83 c4 0c             	add    esp,0xc
c0013ecb:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0013ed2:	6a 01                	push   0x1
c0013ed4:	53                   	push   ebx
c0013ed5:	56                   	push   esi
c0013ed6:	e8 c2 f6 ff ff       	call   c001359d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013edb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013ee7:	0f 85 89 00 00 00    	jne    c0013f76 <Thr::loadDLL(char const*, bool)+0x220>
c0013eed:	89 f8                	mov    eax,edi
c0013eef:	84 c0                	test   al,al
c0013ef1:	74 73                	je     c0013f66 <Thr::loadDLL(char const*, bool)+0x210>
c0013ef3:	83 ec 0c             	sub    esp,0xc
c0013ef6:	68 d3 04 02 c0       	push   0xc00204d3
c0013efb:	e8 bb c4 ff ff       	call   c00103bb <KePanic(char const*)>
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	eb 61                	jmp    c0013f66 <Thr::loadDLL(char const*, bool)+0x210>
c0013f05:	50                   	push   eax
c0013f06:	50                   	push   eax
c0013f07:	89 e8                	mov    eax,ebp
c0013f09:	c1 e0 0c             	shl    eax,0xc
c0013f0c:	01 d8                	add    eax,ebx
c0013f0e:	50                   	push   eax
c0013f0f:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013f15:	e8 f8 56 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0013f1a:	83 c4 10             	add    esp,0x10
c0013f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f1f:	a8 60                	test   al,0x60
c0013f21:	75 11                	jne    c0013f34 <Thr::loadDLL(char const*, bool)+0x1de>
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f2b:	50                   	push   eax
c0013f2c:	e8 ae 3b ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	45                   	inc    ebp
c0013f35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f3d:	05 ff 0f 00 00       	add    eax,0xfff
c0013f42:	bf 00 00 00 00       	mov    edi,0x0
c0013f47:	83 d2 00             	adc    edx,0x0
c0013f4a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013f4e:	c1 ea 0c             	shr    edx,0xc
c0013f51:	39 c5                	cmp    ebp,eax
c0013f53:	89 d1                	mov    ecx,edx
c0013f55:	89 f8                	mov    eax,edi
c0013f57:	19 c8                	sbb    eax,ecx
c0013f59:	72 aa                	jb     c0013f05 <Thr::loadDLL(char const*, bool)+0x1af>
c0013f5b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013f60:	75 18                	jne    c0013f7a <Thr::loadDLL(char const*, bool)+0x224>
c0013f62:	31 db                	xor    ebx,ebx
c0013f64:	eb 14                	jmp    c0013f7a <Thr::loadDLL(char const*, bool)+0x224>
c0013f66:	83 ec 0c             	sub    esp,0xc
c0013f69:	68 f2 04 02 c0       	push   0xc00204f2
c0013f6e:	e8 48 c4 ff ff       	call   c00103bb <KePanic(char const*)>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	31 ed                	xor    ebp,ebp
c0013f78:	eb bb                	jmp    c0013f35 <Thr::loadDLL(char const*, bool)+0x1df>
c0013f7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013f80:	89 d8                	mov    eax,ebx
c0013f82:	5b                   	pop    ebx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	5d                   	pop    ebp
c0013f86:	c3                   	ret    

c0013f87 <Thr::executeDLL(unsigned long, void*)>:
c0013f87:	56                   	push   esi
c0013f88:	53                   	push   ebx
c0013f89:	52                   	push   edx
c0013f8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f92:	85 db                	test   ebx,ebx
c0013f94:	75 10                	jne    c0013fa6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013f96:	83 ec 0c             	sub    esp,0xc
c0013f99:	68 0e 05 02 c0       	push   0xc002050e
c0013f9e:	e8 18 c4 ff ff       	call   c00103bb <KePanic(char const*)>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	50                   	push   eax
c0013fa7:	50                   	push   eax
c0013fa8:	53                   	push   ebx
c0013fa9:	68 38 05 02 c0       	push   0xc0020538
c0013fae:	e8 47 66 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013fb3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013fb7:	89 d8                	mov    eax,ebx
c0013fb9:	83 c4 14             	add    esp,0x14
c0013fbc:	5b                   	pop    ebx
c0013fbd:	5e                   	pop    esi
c0013fbe:	ff e0                	jmp    eax

c0013fc0 <userModeEntryPoint(void*)>:
c0013fc0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013fc5:	48                   	dec    eax
c0013fc6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013fcb:	75 03                	jne    c0013fd0 <userModeEntryPoint(void*)+0x10>
c0013fcd:	fb                   	sti    
c0013fce:	66 90                	xchg   ax,ax
c0013fd0:	fb                   	sti    
c0013fd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fd9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013fdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fe3:	e9 57 c2 fe ff       	jmp    c000023f <goToUsermode>

c0013fe8 <changeTSS>:
c0013fe8:	83 ec 14             	sub    esp,0x14
c0013feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ff0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013ff3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013ff8:	c1 e2 15             	shl    edx,0x15
c0013ffb:	29 d0                	sub    eax,edx
c0013ffd:	50                   	push   eax
c0013ffe:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0014003:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014009:	05 7c 11 00 00       	add    eax,0x117c
c001400e:	50                   	push   eax
c001400f:	e8 7c 4c ff ff       	call   c0008c90 <TSS::setESP(unsigned long)>
c0014014:	83 c4 1c             	add    esp,0x1c
c0014017:	c3                   	ret    

c0014018 <switchToThread(ThreadControlBlock*)>:
c0014018:	57                   	push   edi
c0014019:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001401e:	56                   	push   esi
c001401f:	85 c0                	test   eax,eax
c0014021:	53                   	push   ebx
c0014022:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014026:	0f 85 90 00 00 00    	jne    c00140bc <switchToThread(ThreadControlBlock*)+0xa4>
c001402c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001402f:	80 fa ff             	cmp    dl,0xff
c0014032:	0f 84 80 00 00 00    	je     c00140b8 <switchToThread(ThreadControlBlock*)+0xa0>
c0014038:	81 e2 ff 00 00 00    	and    edx,0xff
c001403e:	b8 00 04 00 00       	mov    eax,0x400
c0014043:	29 d0                	sub    eax,edx
c0014045:	d1 f8                	sar    eax,1
c0014047:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001404a:	66 90                	xchg   ax,ax
c001404c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001404f:	e8 80 26 00 00       	call   c00166d4 <HalQueryPerformanceCounter()>
c0014054:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c0014059:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c001405f:	89 c6                	mov    esi,eax
c0014061:	89 d7                	mov    edi,edx
c0014063:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c0014069:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c001406e:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c0014074:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c001407a:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0014080:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014086:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c001408c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001408f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014092:	01 c6                	add    esi,eax
c0014094:	11 d7                	adc    edi,edx
c0014096:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014099:	83 ec 0c             	sub    esp,0xc
c001409c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001409f:	53                   	push   ebx
c00140a0:	e8 d2 c1 fe ff       	call   c0000277 <switchToThreadASM>
c00140a5:	0f 20 c0             	mov    eax,cr0
c00140a8:	83 c8 08             	or     eax,0x8
c00140ab:	0f 22 c0             	mov    cr0,eax
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	5b                   	pop    ebx
c00140b2:	5e                   	pop    esi
c00140b3:	5f                   	pop    edi
c00140b4:	c3                   	ret    
c00140b5:	8d 76 00             	lea    esi,[esi+0x0]
c00140b8:	31 c0                	xor    eax,eax
c00140ba:	eb 90                	jmp    c001404c <switchToThread(ThreadControlBlock*)+0x34>
c00140bc:	5b                   	pop    ebx
c00140bd:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00140c7:	5e                   	pop    esi
c00140c8:	5f                   	pop    edi
c00140c9:	c3                   	ret    
c00140ca:	66 90                	xchg   ax,ax

c00140cc <Process::addArgs(char**)>:
c00140cc:	57                   	push   edi
c00140cd:	56                   	push   esi
c00140ce:	53                   	push   ebx
c00140cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00140d7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00140e1:	85 ff                	test   edi,edi
c00140e3:	74 43                	je     c0014128 <Process::addArgs(char**)+0x5c>
c00140e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00140e7:	85 c0                	test   eax,eax
c00140e9:	74 3d                	je     c0014128 <Process::addArgs(char**)+0x5c>
c00140eb:	31 db                	xor    ebx,ebx
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	50                   	push   eax
c00140f4:	e8 37 c4 fe ff       	call   c0000530 <strlen>
c00140f9:	40                   	inc    eax
c00140fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fd:	e8 63 37 ff ff       	call   c0007865 <malloc>
c0014102:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014109:	5a                   	pop    edx
c001410a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001410d:	59                   	pop    ecx
c001410e:	43                   	inc    ebx
c001410f:	52                   	push   edx
c0014110:	50                   	push   eax
c0014111:	e8 da c4 fe ff       	call   c00005f0 <strcpy>
c0014116:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014122:	85 c0                	test   eax,eax
c0014124:	75 ca                	jne    c00140f0 <Process::addArgs(char**)+0x24>
c0014126:	66 90                	xchg   ax,ax
c0014128:	5b                   	pop    ebx
c0014129:	5e                   	pop    esi
c001412a:	5f                   	pop    edi
c001412b:	c3                   	ret    

c001412c <Process::Process(char const*, Process*, char**)>:
c001412c:	56                   	push   esi
c001412d:	53                   	push   ebx
c001412e:	83 ec 14             	sub    esp,0x14
c0014131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014135:	05 0c 02 00 00       	add    eax,0x20c
c001413a:	bb 07 00 00 00       	mov    ebx,0x7
c001413f:	89 c6                	mov    esi,eax
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	85 db                	test   ebx,ebx
c0014146:	78 14                	js     c001415c <Process::Process(char const*, Process*, char**)+0x30>
c0014148:	83 ec 0c             	sub    esp,0xc
c001414b:	56                   	push   esi
c001414c:	e8 6b a2 00 00       	call   c001e3bc <ThreadControlBlock::ThreadControlBlock()>
c0014151:	83 c4 10             	add    esp,0x10
c0014154:	83 c6 5f             	add    esi,0x5f
c0014157:	4b                   	dec    ebx
c0014158:	eb ea                	jmp    c0014144 <Process::Process(char const*, Process*, char**)+0x18>
c001415a:	66 90                	xchg   ax,ax
c001415c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014160:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001416b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014172:	83 ec 0c             	sub    esp,0xc
c0014175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014179:	e8 32 c0 ff ff       	call   c00101b0 <Krnl::newProcessEnv(Process*)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	89 c2                	mov    edx,eax
c0014183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014187:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001418d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014191:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001419a:	a1 e0 16 02 c0       	mov    eax,ds:0xc00216e0
c001419f:	8d 50 01             	lea    edx,[eax+0x1]
c00141a2:	89 15 e0 16 02 c0    	mov    DWORD PTR ds:0xc00216e0,edx
c00141a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141ac:	89 02                	mov    DWORD PTR [edx],eax
c00141ae:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00141b6:	83 ec 0c             	sub    esp,0xc
c00141b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141bd:	e8 a3 36 ff ff       	call   c0007865 <malloc>
c00141c2:	83 c4 10             	add    esp,0x10
c00141c5:	89 c3                	mov    ebx,eax
c00141c7:	83 ec 08             	sub    esp,0x8
c00141ca:	6a 00                	push   0x0
c00141cc:	53                   	push   ebx
c00141cd:	e8 dc 5c ff ff       	call   c0009eae <VAS::VAS(bool)>
c00141d2:	83 c4 10             	add    esp,0x10
c00141d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00141df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00141ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00141f5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00141fb:	e8 0e c5 ff ff       	call   c001070e <KeInitSignals()>
c0014200:	89 c2                	mov    edx,eax
c0014202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014206:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001420c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014210:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014216:	85 c0                	test   eax,eax
c0014218:	74 42                	je     c001425c <Process::Process(char const*, Process*, char**)+0x130>
c001421a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001421e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014224:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001422a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001422e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014238:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001423e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014248:	05 0c 01 00 00       	add    eax,0x10c
c001424d:	83 ec 08             	sub    esp,0x8
c0014250:	52                   	push   edx
c0014251:	50                   	push   eax
c0014252:	e8 99 c3 fe ff       	call   c00005f0 <strcpy>
c0014257:	83 c4 10             	add    esp,0x10
c001425a:	eb 64                	jmp    c00142c0 <Process::Process(char const*, Process*, char**)+0x194>
c001425c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001426b:	e8 f5 35 ff ff       	call   c0007865 <malloc>
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	89 c3                	mov    ebx,eax
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427c:	53                   	push   ebx
c001427d:	e8 1e 47 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014289:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001428f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014293:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	50                   	push   eax
c001429d:	e8 a4 3f ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a9:	05 0c 01 00 00       	add    eax,0x10c
c00142ae:	83 ec 08             	sub    esp,0x8
c00142b1:	68 57 05 02 c0       	push   0xc0020557
c00142b6:	50                   	push   eax
c00142b7:	e8 34 c3 fe ff       	call   c00005f0 <strcpy>
c00142bc:	83 c4 10             	add    esp,0x10
c00142bf:	90                   	nop
c00142c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142c4:	83 c0 0c             	add    eax,0xc
c00142c7:	83 ec 08             	sub    esp,0x8
c00142ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142ce:	50                   	push   eax
c00142cf:	e8 1c c3 fe ff       	call   c00005f0 <strcpy>
c00142d4:	83 c4 10             	add    esp,0x10
c00142d7:	83 ec 08             	sub    esp,0x8
c00142da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00142de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142e2:	e8 e5 fd ff ff       	call   c00140cc <Process::addArgs(char**)>
c00142e7:	83 c4 10             	add    esp,0x10
c00142ea:	83 ec 08             	sub    esp,0x8
c00142ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142f5:	e8 6d ed ff ff       	call   c0013067 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00142fa:	83 c4 10             	add    esp,0x10
c00142fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014301:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014305:	83 f0 01             	xor    eax,0x1
c0014308:	88 c2                	mov    dl,al
c001430a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001430e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014314:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014318:	25 ff 00 00 00       	and    eax,0xff
c001431d:	83 ec 08             	sub    esp,0x8
c0014320:	50                   	push   eax
c0014321:	68 b0 05 02 c0       	push   0xc00205b0
c0014326:	e8 cf 62 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	90                   	nop
c001432f:	83 c4 14             	add    esp,0x14
c0014332:	5b                   	pop    ebx
c0014333:	5e                   	pop    esi
c0014334:	c3                   	ret    
c0014335:	90                   	nop
c0014336:	66 90                	xchg   ax,ax

c0014338 <Process::Process(bool, char const*, Process*, char**)>:
c0014338:	56                   	push   esi
c0014339:	53                   	push   ebx
c001433a:	83 ec 24             	sub    esp,0x24
c001433d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014341:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014345:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014349:	05 0c 02 00 00       	add    eax,0x20c
c001434e:	bb 07 00 00 00       	mov    ebx,0x7
c0014353:	89 c6                	mov    esi,eax
c0014355:	8d 76 00             	lea    esi,[esi+0x0]
c0014358:	85 db                	test   ebx,ebx
c001435a:	78 14                	js     c0014370 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	56                   	push   esi
c0014360:	e8 57 a0 00 00       	call   c001e3bc <ThreadControlBlock::ThreadControlBlock()>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	83 c6 5f             	add    esi,0x5f
c001436b:	4b                   	dec    ebx
c001436c:	eb ea                	jmp    c0014358 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001436e:	66 90                	xchg   ax,ax
c0014370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014374:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001437b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001437f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014386:	83 ec 0c             	sub    esp,0xc
c0014389:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001438d:	e8 1e be ff ff       	call   c00101b0 <Krnl::newProcessEnv(Process*)>
c0014392:	83 c4 10             	add    esp,0x10
c0014395:	89 c2                	mov    edx,eax
c0014397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001439b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00143a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00143ae:	a1 e0 16 02 c0       	mov    eax,ds:0xc00216e0
c00143b3:	8d 50 01             	lea    edx,[eax+0x1]
c00143b6:	89 15 e0 16 02 c0    	mov    DWORD PTR ds:0xc00216e0,edx
c00143bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00143c0:	89 02                	mov    DWORD PTR [edx],eax
c00143c2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00143ca:	83 ec 0c             	sub    esp,0xc
c00143cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143d1:	e8 8f 34 ff ff       	call   c0007865 <malloc>
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	89 c3                	mov    ebx,eax
c00143db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00143df:	25 ff 00 00 00       	and    eax,0xff
c00143e4:	83 ec 08             	sub    esp,0x8
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	e8 c0 5a ff ff       	call   c0009eae <VAS::VAS(bool)>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143f5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00143fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143ff:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001440d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014411:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014417:	e8 f2 c2 ff ff       	call   c001070e <KeInitSignals()>
c001441c:	89 c2                	mov    edx,eax
c001441e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014422:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001442c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014432:	85 c0                	test   eax,eax
c0014434:	74 42                	je     c0014478 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0014436:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001443a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014440:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014446:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001444a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014450:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014454:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001445a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014460:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014464:	05 0c 01 00 00       	add    eax,0x10c
c0014469:	83 ec 08             	sub    esp,0x8
c001446c:	52                   	push   edx
c001446d:	50                   	push   eax
c001446e:	e8 7d c1 fe ff       	call   c00005f0 <strcpy>
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	eb 64                	jmp    c00144dc <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0014478:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014487:	e8 d9 33 ff ff       	call   c0007865 <malloc>
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	89 c3                	mov    ebx,eax
c0014491:	83 ec 08             	sub    esp,0x8
c0014494:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014498:	53                   	push   ebx
c0014499:	e8 02 45 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00144ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144b5:	83 ec 0c             	sub    esp,0xc
c00144b8:	50                   	push   eax
c00144b9:	e8 88 3d ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144c5:	05 0c 01 00 00       	add    eax,0x10c
c00144ca:	83 ec 08             	sub    esp,0x8
c00144cd:	68 57 05 02 c0       	push   0xc0020557
c00144d2:	50                   	push   eax
c00144d3:	e8 18 c1 fe ff       	call   c00005f0 <strcpy>
c00144d8:	83 c4 10             	add    esp,0x10
c00144db:	90                   	nop
c00144dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e0:	83 c0 0c             	add    eax,0xc
c00144e3:	83 ec 08             	sub    esp,0x8
c00144e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144ea:	50                   	push   eax
c00144eb:	e8 00 c1 fe ff       	call   c00005f0 <strcpy>
c00144f0:	83 c4 10             	add    esp,0x10
c00144f3:	83 ec 08             	sub    esp,0x8
c00144f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00144fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00144fe:	e8 c9 fb ff ff       	call   c00140cc <Process::addArgs(char**)>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	90                   	nop
c0014507:	83 c4 24             	add    esp,0x24
c001450a:	5b                   	pop    ebx
c001450b:	5e                   	pop    esi
c001450c:	c3                   	ret    
c001450d:	8d 76 00             	lea    esi,[esi+0x0]

c0014510 <taskStartupFunction>:
c0014510:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014515:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014518:	c3                   	ret    
c0014519:	90                   	nop
c001451a:	66 90                	xchg   ax,ax

c001451c <Semaphore::Semaphore(int)>:
c001451c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014524:	89 10                	mov    DWORD PTR [eax],edx
c0014526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001452a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014535:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001453c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014540:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014547:	90                   	nop
c0014548:	c3                   	ret    
c0014549:	90                   	nop
c001454a:	66 90                	xchg   ax,ax

c001454c <Mutex::Mutex()>:
c001454c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014550:	6a 01                	push   0x1
c0014552:	50                   	push   eax
c0014553:	e8 c4 ff ff ff       	call   c001451c <Semaphore::Semaphore(int)>
c0014558:	83 c4 08             	add    esp,0x8
c001455b:	90                   	nop
c001455c:	c3                   	ret    
c001455d:	90                   	nop
c001455e:	66 90                	xchg   ax,ax

c0014560 <Process::createThread(void (*)(void*), void*, int)>:
c0014560:	57                   	push   edi
c0014561:	31 c9                	xor    ecx,ecx
c0014563:	56                   	push   esi
c0014564:	53                   	push   ebx
c0014565:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014569:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014570:	89 f2                	mov    edx,esi
c0014572:	66 90                	xchg   ax,ax
c0014574:	31 c0                	xor    eax,eax
c0014576:	66 89 d0             	mov    ax,dx
c0014579:	83 e2 01             	and    edx,0x1
c001457c:	74 12                	je     c0014590 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001457e:	d1 f8                	sar    eax,1
c0014580:	41                   	inc    ecx
c0014581:	89 c2                	mov    edx,eax
c0014583:	83 f9 10             	cmp    ecx,0x10
c0014586:	75 ec                	jne    c0014574 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014588:	31 db                	xor    ebx,ebx
c001458a:	89 d8                	mov    eax,ebx
c001458c:	5b                   	pop    ebx
c001458d:	5e                   	pop    esi
c001458e:	5f                   	pop    edi
c001458f:	c3                   	ret    
c0014590:	b8 01 00 00 00       	mov    eax,0x1
c0014595:	d3 e0                	shl    eax,cl
c0014597:	09 c6                	or     esi,eax
c0014599:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001459c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00145a3:	01 c0                	add    eax,eax
c00145a5:	01 c8                	add    eax,ecx
c00145a7:	8d 04 80             	lea    eax,[eax+eax*4]
c00145aa:	01 d8                	add    eax,ebx
c00145ac:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00145b3:	75 0b                	jne    c00145c0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00145b5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00145bf:	90                   	nop
c00145c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00145c6:	83 ec 0c             	sub    esp,0xc
c00145c9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00145cc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00145cf:	01 c0                	add    eax,eax
c00145d1:	01 c8                	add    eax,ecx
c00145d3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00145d6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00145d9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00145df:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00145e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00145e9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00145ef:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00145f5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00145fb:	89 ca                	mov    edx,ecx
c00145fd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014604:	f7 da                	neg    edx
c0014606:	c1 e2 15             	shl    edx,0x15
c0014609:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001460f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014615:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014619:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014623:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014629:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001462d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014633:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001463d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014647:	68 00 01 00 00       	push   0x100
c001464c:	e8 14 32 ff ff       	call   c0007865 <malloc>
c0014651:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014654:	58                   	pop    eax
c0014655:	5a                   	pop    edx
c0014656:	53                   	push   ebx
c0014657:	68 84 71 02 c0       	push   0xc0027184
c001465c:	e8 fb 9a 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014661:	83 c4 10             	add    esp,0x10
c0014664:	89 d8                	mov    eax,ebx
c0014666:	5b                   	pop    ebx
c0014667:	5e                   	pop    esi
c0014668:	5f                   	pop    edi
c0014669:	c3                   	ret    
c001466a:	66 90                	xchg   ax,ax

c001466c <Process::createUserThread()>:
c001466c:	83 ec 0c             	sub    esp,0xc
c001466f:	68 80 00 00 00       	push   0x80
c0014674:	6a 00                	push   0x0
c0014676:	68 c0 3f 01 c0       	push   0xc0013fc0
c001467b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467f:	50                   	push   eax
c0014680:	e8 db fe ff ff       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c0014685:	83 c4 1c             	add    esp,0x1c
c0014688:	c3                   	ret    
c0014689:	8d 76 00             	lea    esi,[esi+0x0]

c001468c <setupMultitasking(void (*)())>:
c001468c:	56                   	push   esi
c001468d:	53                   	push   ebx
c001468e:	53                   	push   ebx
c001468f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014693:	eb 13                	jmp    c00146a8 <setupMultitasking(void (*)())+0x1c>
c0014695:	8d 76 00             	lea    esi,[esi+0x0]
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	68 84 71 02 c0       	push   0xc0027184
c00146a0:	e8 ff 99 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	83 ec 0c             	sub    esp,0xc
c00146ab:	68 84 71 02 c0       	push   0xc0027184
c00146b0:	e8 cb 99 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	84 c0                	test   al,al
c00146ba:	74 dc                	je     c0014698 <setupMultitasking(void (*)())+0xc>
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	68 24 07 00 00       	push   0x724
c00146c4:	e8 9c 31 ff ff       	call   c0007865 <malloc>
c00146c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00146d0:	89 c3                	mov    ebx,eax
c00146d2:	6a 00                	push   0x0
c00146d4:	68 5b 05 02 c0       	push   0xc002055b
c00146d9:	6a 01                	push   0x1
c00146db:	50                   	push   eax
c00146dc:	e8 57 fc ff ff       	call   c0014338 <Process::Process(bool, char const*, Process*, char**)>
c00146e1:	83 c4 14             	add    esp,0x14
c00146e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00146ea:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c00146f0:	50                   	push   eax
c00146f1:	e8 a7 3d ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c00146f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00146fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014708:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001470e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014711:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001471b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014721:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014727:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014731:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001473b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014745:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001474b:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014755:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001475b:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014765:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001476c:	e8 f4 30 ff ff       	call   c0007865 <malloc>
c0014771:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014777:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001477d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014783:	5a                   	pop    edx
c0014784:	59                   	pop    ecx
c0014785:	68 57 05 02 c0       	push   0xc0020557
c001478a:	50                   	push   eax
c001478b:	e8 60 be fe ff       	call   c00005f0 <strcpy>
c0014790:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014797:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001479b:	83 c4 14             	add    esp,0x14
c001479e:	5b                   	pop    ebx
c001479f:	5e                   	pop    esi
c00147a0:	e9 c4 ba fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00147a5:	8d 76 00             	lea    esi,[esi+0x0]

c00147a8 <schedule()>:
c00147a8:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00147ae:	85 d2                	test   edx,edx
c00147b0:	74 0e                	je     c00147c0 <schedule()+0x18>
c00147b2:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00147bc:	c3                   	ret    
c00147bd:	8d 76 00             	lea    esi,[esi+0x0]
c00147c0:	53                   	push   ebx
c00147c1:	83 ec 14             	sub    esp,0x14
c00147c4:	68 84 71 02 c0       	push   0xc0027184
c00147c9:	e8 b2 98 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	84 c0                	test   al,al
c00147d3:	75 3b                	jne    c0014810 <schedule()+0x68>
c00147d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00147dd:	4a                   	dec    edx
c00147de:	74 38                	je     c0014818 <schedule()+0x70>
c00147e0:	83 ec 0c             	sub    esp,0xc
c00147e3:	68 84 71 02 c0       	push   0xc0027184
c00147e8:	e8 af 98 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147ed:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00147f4:	89 c3                	mov    ebx,eax
c00147f6:	e8 a9 98 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00147fb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014805:	e8 0e f8 ff ff       	call   c0014018 <switchToThread(ThreadControlBlock*)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	8d 76 00             	lea    esi,[esi+0x0]
c0014810:	83 c4 08             	add    esp,0x8
c0014813:	5b                   	pop    ebx
c0014814:	c3                   	ret    
c0014815:	8d 76 00             	lea    esi,[esi+0x0]
c0014818:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014827:	50                   	push   eax
c0014828:	68 84 71 02 c0       	push   0xc0027184
c001482d:	e8 2a 99 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014832:	83 c4 10             	add    esp,0x10
c0014835:	eb a9                	jmp    c00147e0 <schedule()+0x38>
c0014837:	90                   	nop

c0014838 <Semaphore::tryAcquire()>:
c0014838:	53                   	push   ebx
c0014839:	83 ec 08             	sub    esp,0x8
c001483c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014840:	fa                   	cli    
c0014841:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014846:	8d 50 01             	lea    edx,[eax+0x1]
c0014849:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001484f:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014855:	8d 5a 01             	lea    ebx,[edx+0x1]
c0014858:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c001485e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014861:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014863:	7c 33                	jl     c0014898 <Semaphore::tryAcquire()+0x60>
c0014865:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c001486b:	85 d2                	test   edx,edx
c001486d:	75 0d                	jne    c001487c <Semaphore::tryAcquire()+0x44>
c001486f:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c0014875:	85 d2                	test   edx,edx
c0014877:	75 6b                	jne    c00148e4 <Semaphore::tryAcquire()+0xac>
c0014879:	8d 76 00             	lea    esi,[esi+0x0]
c001487c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014881:	85 c0                	test   eax,eax
c0014883:	74 0b                	je     c0014890 <Semaphore::tryAcquire()+0x58>
c0014885:	8d 76 00             	lea    esi,[esi+0x0]
c0014888:	31 c0                	xor    eax,eax
c001488a:	83 c4 08             	add    esp,0x8
c001488d:	5b                   	pop    ebx
c001488e:	c3                   	ret    
c001488f:	90                   	nop
c0014890:	fb                   	sti    
c0014891:	83 c4 08             	add    esp,0x8
c0014894:	5b                   	pop    ebx
c0014895:	c3                   	ret    
c0014896:	66 90                	xchg   ax,ax
c0014898:	43                   	inc    ebx
c0014899:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c001489f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00148a2:	85 d2                	test   edx,edx
c00148a4:	75 22                	jne    c00148c8 <Semaphore::tryAcquire()+0x90>
c00148a6:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c00148ac:	85 c9                	test   ecx,ecx
c00148ae:	74 18                	je     c00148c8 <Semaphore::tryAcquire()+0x90>
c00148b0:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00148ba:	e8 e9 fe ff ff       	call   c00147a8 <schedule()>
c00148bf:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148c4:	48                   	dec    eax
c00148c5:	8d 76 00             	lea    esi,[esi+0x0]
c00148c8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00148cd:	85 c0                	test   eax,eax
c00148cf:	75 0b                	jne    c00148dc <Semaphore::tryAcquire()+0xa4>
c00148d1:	fb                   	sti    
c00148d2:	b0 01                	mov    al,0x1
c00148d4:	83 c4 08             	add    esp,0x8
c00148d7:	5b                   	pop    ebx
c00148d8:	c3                   	ret    
c00148d9:	8d 76 00             	lea    esi,[esi+0x0]
c00148dc:	b0 01                	mov    al,0x1
c00148de:	83 c4 08             	add    esp,0x8
c00148e1:	5b                   	pop    ebx
c00148e2:	c3                   	ret    
c00148e3:	90                   	nop
c00148e4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00148ee:	e8 b5 fe ff ff       	call   c00147a8 <schedule()>
c00148f3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148f8:	48                   	dec    eax
c00148f9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00148fe:	85 c0                	test   eax,eax
c0014900:	75 86                	jne    c0014888 <Semaphore::tryAcquire()+0x50>
c0014902:	eb 8c                	jmp    c0014890 <Semaphore::tryAcquire()+0x58>

c0014904 <Semaphore::assertLocked(char const*)>:
c0014904:	83 ec 0c             	sub    esp,0xc
c0014907:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001490b:	fa                   	cli    
c001490c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014912:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014917:	8d 48 01             	lea    ecx,[eax+0x1]
c001491a:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014920:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014922:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014925:	7c 29                	jl     c0014950 <Semaphore::assertLocked(char const*)+0x4c>
c0014927:	90                   	nop
c0014928:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001492d:	85 c0                	test   eax,eax
c001492f:	75 0b                	jne    c001493c <Semaphore::assertLocked(char const*)+0x38>
c0014931:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014936:	85 c0                	test   eax,eax
c0014938:	75 2e                	jne    c0014968 <Semaphore::assertLocked(char const*)+0x64>
c001493a:	66 90                	xchg   ax,ax
c001493c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014941:	48                   	dec    eax
c0014942:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014947:	75 03                	jne    c001494c <Semaphore::assertLocked(char const*)+0x48>
c0014949:	fb                   	sti    
c001494a:	66 90                	xchg   ax,ax
c001494c:	83 c4 0c             	add    esp,0xc
c001494f:	c3                   	ret    
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014957:	52                   	push   edx
c0014958:	e8 5e ba ff ff       	call   c00103bb <KePanic(char const*)>
c001495d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014962:	83 c4 10             	add    esp,0x10
c0014965:	48                   	dec    eax
c0014966:	eb c0                	jmp    c0014928 <Semaphore::assertLocked(char const*)+0x24>
c0014968:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014972:	e8 31 fe ff ff       	call   c00147a8 <schedule()>
c0014977:	eb c3                	jmp    c001493c <Semaphore::assertLocked(char const*)+0x38>
c0014979:	8d 76 00             	lea    esi,[esi+0x0]

c001497c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014988:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001498b:	e8 18 fe ff ff       	call   c00147a8 <schedule()>
c0014990:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014995:	48                   	dec    eax
c0014996:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001499b:	75 03                	jne    c00149a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001499d:	fb                   	sti    
c001499e:	66 90                	xchg   ax,ax
c00149a0:	83 c4 0c             	add    esp,0xc
c00149a3:	c3                   	ret    

c00149a4 <blockTask(TaskState)>:
c00149a4:	83 ec 0c             	sub    esp,0xc
c00149a7:	fa                   	cli    
c00149a8:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00149ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00149b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00149ba:	e8 e9 fd ff ff       	call   c00147a8 <schedule()>
c00149bf:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00149c4:	48                   	dec    eax
c00149c5:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00149ca:	75 04                	jne    c00149d0 <blockTask(TaskState)+0x2c>
c00149cc:	fb                   	sti    
c00149cd:	8d 76 00             	lea    esi,[esi+0x0]
c00149d0:	83 c4 0c             	add    esp,0xc
c00149d3:	c3                   	ret    

c00149d4 <waitTask(int, int*, int)>:
c00149d4:	83 ec 18             	sub    esp,0x18
c00149d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00149e0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00149e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ec:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00149ef:	6a 07                	push   0x7
c00149f1:	e8 ae ff ff ff       	call   c00149a4 <blockTask(TaskState)>
c00149f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fb:	83 c4 10             	add    esp,0x10
c00149fe:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014a01:	85 d2                	test   edx,edx
c0014a03:	74 0b                	je     c0014a10 <waitTask(int, int*, int)+0x3c>
c0014a05:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014a08:	89 02                	mov    DWORD PTR [edx],eax
c0014a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a0f:	90                   	nop
c0014a10:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014a13:	83 c4 0c             	add    esp,0xc
c0014a16:	c3                   	ret    
c0014a17:	90                   	nop

c0014a18 <milliTenthSleepUntil(unsigned int)>:
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a1f:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014a25:	76 05                	jbe    c0014a2c <milliTenthSleepUntil(unsigned int)+0x14>
c0014a27:	90                   	nop
c0014a28:	83 c4 0c             	add    esp,0xc
c0014a2b:	c3                   	ret    
c0014a2c:	fa                   	cli    
c0014a2d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a33:	83 ec 08             	sub    esp,0x8
c0014a36:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014a3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a42:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014a45:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a4b:	52                   	push   edx
c0014a4c:	68 78 71 02 c0       	push   0xc0027178
c0014a51:	e8 06 97 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a56:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014a5d:	e8 42 ff ff ff       	call   c00149a4 <blockTask(TaskState)>
c0014a62:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014a67:	83 c4 10             	add    esp,0x10
c0014a6a:	48                   	dec    eax
c0014a6b:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014a70:	85 c0                	test   eax,eax
c0014a72:	75 0c                	jne    c0014a80 <milliTenthSleepUntil(unsigned int)+0x68>
c0014a74:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014a79:	85 c0                	test   eax,eax
c0014a7b:	75 17                	jne    c0014a94 <milliTenthSleepUntil(unsigned int)+0x7c>
c0014a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014a80:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a85:	48                   	dec    eax
c0014a86:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014a8b:	75 9b                	jne    c0014a28 <milliTenthSleepUntil(unsigned int)+0x10>
c0014a8d:	fb                   	sti    
c0014a8e:	83 c4 0c             	add    esp,0xc
c0014a91:	c3                   	ret    
c0014a92:	66 90                	xchg   ax,ax
c0014a94:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014a9e:	e8 05 fd ff ff       	call   c00147a8 <schedule()>
c0014aa3:	eb db                	jmp    c0014a80 <milliTenthSleepUntil(unsigned int)+0x68>
c0014aa5:	8d 76 00             	lea    esi,[esi+0x0]

c0014aa8 <milliTenthSleep(unsigned int)>:
c0014aa8:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014aad:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014ab1:	e9 62 ff ff ff       	jmp    c0014a18 <milliTenthSleepUntil(unsigned int)>
c0014ab6:	66 90                	xchg   ax,ax

c0014ab8 <sleep(unsigned int)>:
c0014ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014abc:	8d 04 80             	lea    eax,[eax+eax*4]
c0014abf:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac2:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac5:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac8:	c1 e0 04             	shl    eax,0x4
c0014acb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014acf:	eb d7                	jmp    c0014aa8 <milliTenthSleep(unsigned int)>
c0014ad1:	90                   	nop
c0014ad2:	66 90                	xchg   ax,ax

c0014ad4 <Semaphore::acquire()>:
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014adb:	fa                   	cli    
c0014adc:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ae1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014ae7:	8d 48 01             	lea    ecx,[eax+0x1]
c0014aea:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014af0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014af3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014af5:	7d 2d                	jge    c0014b24 <Semaphore::acquire()+0x50>
c0014af7:	41                   	inc    ecx
c0014af8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014afb:	90                   	nop
c0014afc:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014b01:	85 c0                	test   eax,eax
c0014b03:	75 0b                	jne    c0014b10 <Semaphore::acquire()+0x3c>
c0014b05:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014b0a:	85 c0                	test   eax,eax
c0014b0c:	75 62                	jne    c0014b70 <Semaphore::acquire()+0x9c>
c0014b0e:	66 90                	xchg   ax,ax
c0014b10:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b15:	48                   	dec    eax
c0014b16:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b1b:	75 03                	jne    c0014b20 <Semaphore::acquire()+0x4c>
c0014b1d:	fb                   	sti    
c0014b1e:	66 90                	xchg   ax,ax
c0014b20:	83 c4 0c             	add    esp,0xc
c0014b23:	c3                   	ret    
c0014b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014b30:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014b33:	85 c9                	test   ecx,ecx
c0014b35:	74 4d                	je     c0014b84 <Semaphore::acquire()+0xb0>
c0014b37:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014b3a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b40:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014b43:	90                   	nop
c0014b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b49:	83 ec 0c             	sub    esp,0xc
c0014b4c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014b4f:	68 d8 05 02 c0       	push   0xc00205d8
c0014b54:	e8 a1 5a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014b59:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014b60:	e8 3f fe ff ff       	call   c00149a4 <blockTask(TaskState)>
c0014b65:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	48                   	dec    eax
c0014b6e:	eb 8c                	jmp    c0014afc <Semaphore::acquire()+0x28>
c0014b70:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014b7a:	e8 29 fc ff ff       	call   c00147a8 <schedule()>
c0014b7f:	eb 8f                	jmp    c0014b10 <Semaphore::acquire()+0x3c>
c0014b81:	8d 76 00             	lea    esi,[esi+0x0]
c0014b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b8c:	eb b6                	jmp    c0014b44 <Semaphore::acquire()+0x70>
c0014b8e:	66 90                	xchg   ax,ax

c0014b90 <taskReturned>:
c0014b90:	83 ec 18             	sub    esp,0x18
c0014b93:	68 f8 05 02 c0       	push   0xc00205f8
c0014b98:	e8 1e b8 ff ff       	call   c00103bb <KePanic(char const*)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	83 ec 0c             	sub    esp,0xc
c0014ba3:	6a 02                	push   0x2
c0014ba5:	e8 fa fd ff ff       	call   c00149a4 <blockTask(TaskState)>
c0014baa:	fa                   	cli    
c0014bab:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014bb1:	e8 f2 fb ff ff       	call   c00147a8 <schedule()>
c0014bb6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	48                   	dec    eax
c0014bbf:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bc4:	85 c0                	test   eax,eax
c0014bc6:	75 d8                	jne    c0014ba0 <taskReturned+0x10>
c0014bc8:	fb                   	sti    
c0014bc9:	eb d5                	jmp    c0014ba0 <taskReturned+0x10>
c0014bcb:	90                   	nop

c0014bcc <Thr::processFromPID(int)>:
c0014bcc:	57                   	push   edi
c0014bcd:	56                   	push   esi
c0014bce:	53                   	push   ebx
c0014bcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bd3:	fa                   	cli    
c0014bd4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014bda:	83 ec 0c             	sub    esp,0xc
c0014bdd:	68 84 71 02 c0       	push   0xc0027184
c0014be2:	e8 b5 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	89 c7                	mov    edi,eax
c0014bec:	eb 16                	jmp    c0014c04 <Thr::processFromPID(int)+0x38>
c0014bee:	66 90                	xchg   ax,ax
c0014bf0:	83 ec 0c             	sub    esp,0xc
c0014bf3:	68 84 71 02 c0       	push   0xc0027184
c0014bf8:	e8 9f 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	39 f8                	cmp    eax,edi
c0014c02:	74 4c                	je     c0014c50 <Thr::processFromPID(int)+0x84>
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	68 84 71 02 c0       	push   0xc0027184
c0014c0c:	e8 8b 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c11:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014c18:	89 c3                	mov    ebx,eax
c0014c1a:	e8 85 94 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014c1f:	58                   	pop    eax
c0014c20:	5a                   	pop    edx
c0014c21:	53                   	push   ebx
c0014c22:	68 84 71 02 c0       	push   0xc0027184
c0014c27:	e8 30 95 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014c2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	39 30                	cmp    DWORD PTR [eax],esi
c0014c34:	75 ba                	jne    c0014bf0 <Thr::processFromPID(int)+0x24>
c0014c36:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c3b:	48                   	dec    eax
c0014c3c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c41:	74 09                	je     c0014c4c <Thr::processFromPID(int)+0x80>
c0014c43:	90                   	nop
c0014c44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c47:	5b                   	pop    ebx
c0014c48:	5e                   	pop    esi
c0014c49:	5f                   	pop    edi
c0014c4a:	c3                   	ret    
c0014c4b:	90                   	nop
c0014c4c:	fb                   	sti    
c0014c4d:	eb f5                	jmp    c0014c44 <Thr::processFromPID(int)+0x78>
c0014c4f:	90                   	nop
c0014c50:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c55:	48                   	dec    eax
c0014c56:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c5b:	75 07                	jne    c0014c64 <Thr::processFromPID(int)+0x98>
c0014c5d:	fb                   	sti    
c0014c5e:	5b                   	pop    ebx
c0014c5f:	5e                   	pop    esi
c0014c60:	5f                   	pop    edi
c0014c61:	c3                   	ret    
c0014c62:	66 90                	xchg   ax,ax
c0014c64:	5b                   	pop    ebx
c0014c65:	31 c0                	xor    eax,eax
c0014c67:	5e                   	pop    esi
c0014c68:	5f                   	pop    edi
c0014c69:	c3                   	ret    
c0014c6a:	66 90                	xchg   ax,ax

c0014c6c <unblockTask(ThreadControlBlock*)>:
c0014c6c:	53                   	push   ebx
c0014c6d:	83 ec 08             	sub    esp,0x8
c0014c70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c74:	fa                   	cli    
c0014c75:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014c7b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c7e:	85 c0                	test   eax,eax
c0014c80:	74 66                	je     c0014ce8 <unblockTask(ThreadControlBlock*)+0x7c>
c0014c82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c85:	48                   	dec    eax
c0014c86:	74 38                	je     c0014cc0 <unblockTask(ThreadControlBlock*)+0x54>
c0014c88:	83 ec 0c             	sub    esp,0xc
c0014c8b:	68 84 71 02 c0       	push   0xc0027184
c0014c90:	e8 07 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c95:	83 c4 10             	add    esp,0x10
c0014c98:	85 c0                	test   eax,eax
c0014c9a:	75 1c                	jne    c0014cb8 <unblockTask(ThreadControlBlock*)+0x4c>
c0014c9c:	eb 5e                	jmp    c0014cfc <unblockTask(ThreadControlBlock*)+0x90>
c0014c9e:	66 90                	xchg   ax,ax
c0014ca0:	83 ec 08             	sub    esp,0x8
c0014ca3:	50                   	push   eax
c0014ca4:	68 84 71 02 c0       	push   0xc0027184
c0014ca9:	e8 9e 97 00 00       	call   c001e44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	85 c0                	test   eax,eax
c0014cb3:	74 47                	je     c0014cfc <unblockTask(ThreadControlBlock*)+0x90>
c0014cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb8:	39 c3                	cmp    ebx,eax
c0014cba:	75 e4                	jne    c0014ca0 <unblockTask(ThreadControlBlock*)+0x34>
c0014cbc:	eb 12                	jmp    c0014cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0014cbe:	66 90                	xchg   ax,ax
c0014cc0:	83 ec 0c             	sub    esp,0xc
c0014cc3:	68 79 05 02 c0       	push   0xc0020579
c0014cc8:	e8 2d 59 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014ccd:	83 c4 10             	add    esp,0x10
c0014cd0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014cd5:	48                   	dec    eax
c0014cd6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014cdb:	75 03                	jne    c0014ce0 <unblockTask(ThreadControlBlock*)+0x74>
c0014cdd:	fb                   	sti    
c0014cde:	66 90                	xchg   ax,ax
c0014ce0:	83 c4 08             	add    esp,0x8
c0014ce3:	5b                   	pop    ebx
c0014ce4:	c3                   	ret    
c0014ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ce8:	83 ec 0c             	sub    esp,0xc
c0014ceb:	68 62 05 02 c0       	push   0xc0020562
c0014cf0:	e8 05 59 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	eb d6                	jmp    c0014cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0014cfa:	66 90                	xchg   ax,ax
c0014cfc:	83 ec 08             	sub    esp,0x8
c0014cff:	53                   	push   ebx
c0014d00:	68 84 71 02 c0       	push   0xc0027184
c0014d05:	e8 52 94 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	eb c1                	jmp    c0014cd0 <unblockTask(ThreadControlBlock*)+0x64>
c0014d0f:	90                   	nop

c0014d10 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014d10:	55                   	push   ebp
c0014d11:	57                   	push   edi
c0014d12:	56                   	push   esi
c0014d13:	53                   	push   ebx
c0014d14:	83 ec 1c             	sub    esp,0x1c
c0014d17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014d1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d1e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014d24:	85 ed                	test   ebp,ebp
c0014d26:	7e 24                	jle    c0014d4c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014d28:	31 f6                	xor    esi,esi
c0014d2a:	66 90                	xchg   ax,ax
c0014d2c:	83 ec 0c             	sub    esp,0xc
c0014d2f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014d36:	46                   	inc    esi
c0014d37:	57                   	push   edi
c0014d38:	e8 38 2b ff ff       	call   c0007875 <free>
c0014d3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d40:	83 c4 10             	add    esp,0x10
c0014d43:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014d49:	7f e1                	jg     c0014d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014d4b:	90                   	nop
c0014d4c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014d5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014d5e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014d61:	d3 c0                	rol    eax,cl
c0014d63:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014d6a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d6d:	89 f7                	mov    edi,esi
c0014d6f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014d77:	0f 85 77 01 00 00    	jne    c0014ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014d7d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014d83:	85 ed                	test   ebp,ebp
c0014d85:	74 1d                	je     c0014da4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	55                   	push   ebp
c0014d8b:	e8 3c b3 ff ff       	call   c00100cc <EnvVarContainer::~EnvVarContainer()>
c0014d90:	59                   	pop    ecx
c0014d91:	5e                   	pop    esi
c0014d92:	6a 0c                	push   0xc
c0014d94:	55                   	push   ebp
c0014d95:	e8 6a 57 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0014d9a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	89 f7                	mov    edi,esi
c0014da2:	66 90                	xchg   ax,ax
c0014da4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014daa:	85 c0                	test   eax,eax
c0014dac:	0f 84 b6 00 00 00    	je     c0014e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014db2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014db5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014db9:	31 c9                	xor    ecx,ecx
c0014dbb:	eb 17                	jmp    c0014dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0014dc0:	41                   	inc    ecx
c0014dc1:	83 f9 10             	cmp    ecx,0x10
c0014dc4:	0f 84 9e 00 00 00    	je     c0014e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014dca:	66 90                	xchg   ax,ax
c0014dcc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014dd2:	66 90                	xchg   ax,ax
c0014dd4:	31 d2                	xor    edx,edx
c0014dd6:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014ddd:	d3 fa                	sar    edx,cl
c0014ddf:	83 e2 01             	and    edx,0x1
c0014de2:	74 dc                	je     c0014dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014de4:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014de7:	01 d2                	add    edx,edx
c0014de9:	01 ca                	add    edx,ecx
c0014deb:	8d 14 92             	lea    edx,[edx+edx*4]
c0014dee:	01 d0                	add    eax,edx
c0014df0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014df6:	83 fd 07             	cmp    ebp,0x7
c0014df9:	75 c5                	jne    c0014dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014dfb:	05 40 02 00 00       	add    eax,0x240
c0014e00:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014e03:	83 fd ff             	cmp    ebp,0xffffffff
c0014e06:	0f 8c f0 00 00 00    	jl     c0014efc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014e0c:	0f 84 ae 01 00 00    	je     c0014fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014e12:	85 ed                	test   ebp,ebp
c0014e14:	0f 84 92 01 00 00    	je     c0014fac <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014e1a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014e1c:	75 a2                	jne    c0014dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014e1e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014e24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e28:	01 d0                	add    eax,edx
c0014e2a:	66 90                	xchg   ax,ax
c0014e2c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014e30:	83 ec 0c             	sub    esp,0xc
c0014e33:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014e39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e42:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014e49:	50                   	push   eax
c0014e4a:	e8 1d fe ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e59:	89 f7                	mov    edi,esi
c0014e5b:	41                   	inc    ecx
c0014e5c:	83 f9 10             	cmp    ecx,0x10
c0014e5f:	0f 85 67 ff ff ff    	jne    c0014dcc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014e65:	8d 76 00             	lea    esi,[esi+0x0]
c0014e68:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014e6e:	85 c0                	test   eax,eax
c0014e70:	74 62                	je     c0014ed4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e72:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014e78:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014e7e:	74 54                	je     c0014ed4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e80:	83 ec 0c             	sub    esp,0xc
c0014e83:	68 84 71 02 c0       	push   0xc0027184
c0014e88:	e8 0f 92 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e8d:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014e94:	89 c7                	mov    edi,eax
c0014e96:	e8 e5 91 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	84 c0                	test   al,al
c0014ea0:	0f 84 ce 00 00 00    	je     c0014f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014ea6:	66 90                	xchg   ax,ax
c0014ea8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014eab:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014eb1:	85 d2                	test   edx,edx
c0014eb3:	74 0f                	je     c0014ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014eb5:	83 ec 0c             	sub    esp,0xc
c0014eb8:	8b 02                	mov    eax,DWORD PTR [edx]
c0014eba:	52                   	push   edx
c0014ebb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ebe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014ece:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ed4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014eda:	85 db                	test   ebx,ebx
c0014edc:	74 16                	je     c0014ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014ede:	83 ec 0c             	sub    esp,0xc
c0014ee1:	53                   	push   ebx
c0014ee2:	e8 b5 49 ff ff       	call   c000989c <VAS::~VAS()>
c0014ee7:	58                   	pop    eax
c0014ee8:	5a                   	pop    edx
c0014ee9:	6a 14                	push   0x14
c0014eeb:	53                   	push   ebx
c0014eec:	e8 13 56 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0014ef1:	83 c4 10             	add    esp,0x10
c0014ef4:	83 c4 1c             	add    esp,0x1c
c0014ef7:	5b                   	pop    ebx
c0014ef8:	5e                   	pop    esi
c0014ef9:	5f                   	pop    edi
c0014efa:	5d                   	pop    ebp
c0014efb:	c3                   	ret    
c0014efc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014f00:	83 ec 0c             	sub    esp,0xc
c0014f03:	68 2c 06 02 c0       	push   0xc002062c
c0014f08:	e8 ae b4 ff ff       	call   c00103bb <KePanic(char const*)>
c0014f0d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	89 f7                	mov    edi,esi
c0014f15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f19:	e9 a2 fe ff ff       	jmp    c0014dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014f1e:	66 90                	xchg   ax,ax
c0014f20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f26:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014f2c:	75 1e                	jne    c0014f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f2e:	83 ec 0c             	sub    esp,0xc
c0014f31:	68 94 06 02 c0       	push   0xc0020694
c0014f36:	e8 bf 56 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014f3b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f42:	e8 5d fa ff ff       	call   c00149a4 <blockTask(TaskState)>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	66 90                	xchg   ax,ax
c0014f4c:	83 ec 08             	sub    esp,0x8
c0014f4f:	56                   	push   esi
c0014f50:	68 84 71 02 c0       	push   0xc0027184
c0014f55:	e8 02 92 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f5a:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014f61:	e8 36 91 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	39 f8                	cmp    eax,edi
c0014f6b:	0f 84 37 ff ff ff    	je     c0014ea8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014f71:	8d 76 00             	lea    esi,[esi+0x0]
c0014f74:	83 ec 0c             	sub    esp,0xc
c0014f77:	68 84 71 02 c0       	push   0xc0027184
c0014f7c:	e8 1b 91 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f81:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014f88:	89 c6                	mov    esi,eax
c0014f8a:	e8 15 91 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f8f:	83 c4 10             	add    esp,0x10
c0014f92:	39 f3                	cmp    ebx,esi
c0014f94:	74 b6                	je     c0014f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f96:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014f99:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f9c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014fa2:	75 a8                	jne    c0014f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014fa4:	e9 77 ff ff ff       	jmp    c0014f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014fb0:	83 ec 0c             	sub    esp,0xc
c0014fb3:	68 60 06 02 c0       	push   0xc0020660
c0014fb8:	e9 4b ff ff ff       	jmp    c0014f08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc0:	8b 36                	mov    esi,DWORD PTR [esi]
c0014fc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014fc6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014fc9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014fcc:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014fd2:	01 d7                	add    edi,edx
c0014fd4:	89 f8                	mov    eax,edi
c0014fd6:	e9 51 fe ff ff       	jmp    c0014e2c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014fdb:	90                   	nop

c0014fdc <cleanerTaskFunction(void*)>:
c0014fdc:	53                   	push   ebx
c0014fdd:	83 ec 08             	sub    esp,0x8
c0014fe0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fe5:	48                   	dec    eax
c0014fe6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014feb:	75 03                	jne    c0014ff0 <cleanerTaskFunction(void*)+0x14>
c0014fed:	fb                   	sti    
c0014fee:	66 90                	xchg   ax,ax
c0014ff0:	fa                   	cli    
c0014ff1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ff6:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0014ffd:	8d 50 01             	lea    edx,[eax+0x1]
c0015000:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015006:	0f 84 ac 00 00 00    	je     c00150b8 <cleanerTaskFunction(void*)+0xdc>
c001500c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015011:	85 c0                	test   eax,eax
c0015013:	75 03                	jne    c0015018 <cleanerTaskFunction(void*)+0x3c>
c0015015:	fb                   	sti    
c0015016:	66 90                	xchg   ax,ax
c0015018:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c001501f:	fa                   	cli    
c0015020:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015026:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c001502c:	fa                   	cli    
c001502d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015033:	eb 2b                	jmp    c0015060 <cleanerTaskFunction(void*)+0x84>
c0015035:	8d 76 00             	lea    esi,[esi+0x0]
c0015038:	83 ec 0c             	sub    esp,0xc
c001503b:	68 6c 71 02 c0       	push   0xc002716c
c0015040:	e8 57 90 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015045:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c001504c:	89 c3                	mov    ebx,eax
c001504e:	e8 51 90 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015053:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015056:	e8 b5 fc ff ff       	call   c0014d10 <cleanupTerminatedTask(ThreadControlBlock*)>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	66 90                	xchg   ax,ax
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	68 6c 71 02 c0       	push   0xc002716c
c0015068:	e8 13 90 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	84 c0                	test   al,al
c0015072:	74 c4                	je     c0015038 <cleanerTaskFunction(void*)+0x5c>
c0015074:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015079:	48                   	dec    eax
c001507a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001507f:	75 03                	jne    c0015084 <cleanerTaskFunction(void*)+0xa8>
c0015081:	fb                   	sti    
c0015082:	66 90                	xchg   ax,ax
c0015084:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015089:	48                   	dec    eax
c001508a:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001508f:	0f 85 4b ff ff ff    	jne    c0014fe0 <cleanerTaskFunction(void*)+0x4>
c0015095:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001509a:	85 c0                	test   eax,eax
c001509c:	0f 84 3e ff ff ff    	je     c0014fe0 <cleanerTaskFunction(void*)+0x4>
c00150a2:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00150ac:	e8 f7 f6 ff ff       	call   c00147a8 <schedule()>
c00150b1:	e9 2a ff ff ff       	jmp    c0014fe0 <cleanerTaskFunction(void*)+0x4>
c00150b6:	66 90                	xchg   ax,ax
c00150b8:	83 ec 0c             	sub    esp,0xc
c00150bb:	6a 02                	push   0x2
c00150bd:	e8 ba f8 ff ff       	call   c001497c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	e9 4e ff ff ff       	jmp    c0015018 <cleanerTaskFunction(void*)+0x3c>
c00150ca:	66 90                	xchg   ax,ax

c00150cc <terminateTask(int)>:
c00150cc:	83 ec 14             	sub    esp,0x14
c00150cf:	fa                   	cli    
c00150d0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150d6:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00150dc:	fa                   	cli    
c00150dd:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150ec:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00150ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00150f7:	50                   	push   eax
c00150f8:	68 6c 71 02 c0       	push   0xc002716c
c00150fd:	e8 5a 90 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015107:	83 c4 10             	add    esp,0x10
c001510a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015111:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0015116:	85 c0                	test   eax,eax
c0015118:	74 5e                	je     c0015178 <terminateTask(int)+0xac>
c001511a:	83 ec 0c             	sub    esp,0xc
c001511d:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0015124:	50                   	push   eax
c0015125:	e8 42 fb ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	8d 76 00             	lea    esi,[esi+0x0]
c0015130:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015135:	48                   	dec    eax
c0015136:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001513b:	75 03                	jne    c0015140 <terminateTask(int)+0x74>
c001513d:	fb                   	sti    
c001513e:	66 90                	xchg   ax,ax
c0015140:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015145:	48                   	dec    eax
c0015146:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001514b:	75 0b                	jne    c0015158 <terminateTask(int)+0x8c>
c001514d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0015154:	75 36                	jne    c001518c <terminateTask(int)+0xc0>
c0015156:	66 90                	xchg   ax,ax
c0015158:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001515d:	48                   	dec    eax
c001515e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015163:	75 03                	jne    c0015168 <terminateTask(int)+0x9c>
c0015165:	fb                   	sti    
c0015166:	66 90                	xchg   ax,ax
c0015168:	fa                   	cli    
c0015169:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001516f:	90                   	nop
c0015170:	e8 33 f6 ff ff       	call   c00147a8 <schedule()>
c0015175:	eb e1                	jmp    c0015158 <terminateTask(int)+0x8c>
c0015177:	90                   	nop
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	68 90 05 02 c0       	push   0xc0020590
c0015180:	e8 75 54 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015185:	83 c4 10             	add    esp,0x10
c0015188:	eb a6                	jmp    c0015130 <terminateTask(int)+0x64>
c001518a:	66 90                	xchg   ax,ax
c001518c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015196:	eb d8                	jmp    c0015170 <terminateTask(int)+0xa4>

c0015198 <Thr::terminateFromIRQ(int)>:
c0015198:	83 ec 18             	sub    esp,0x18
c001519b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001519f:	50                   	push   eax
c00151a0:	e8 27 ff ff ff       	call   c00150cc <terminateTask(int)>
c00151a5:	90                   	nop
c00151a6:	66 90                	xchg   ax,ax

c00151a8 <Semaphore::release()>:
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151af:	fa                   	cli    
c00151b0:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00151b5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00151bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00151be:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00151c4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00151c7:	85 c9                	test   ecx,ecx
c00151c9:	74 41                	je     c001520c <Semaphore::release()+0x64>
c00151cb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00151ce:	83 ec 0c             	sub    esp,0xc
c00151d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00151d4:	51                   	push   ecx
c00151d5:	e8 92 fa ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c00151da:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	48                   	dec    eax
c00151e3:	90                   	nop
c00151e4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00151e9:	85 c0                	test   eax,eax
c00151eb:	75 0b                	jne    c00151f8 <Semaphore::release()+0x50>
c00151ed:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00151f2:	85 c0                	test   eax,eax
c00151f4:	75 1e                	jne    c0015214 <Semaphore::release()+0x6c>
c00151f6:	66 90                	xchg   ax,ax
c00151f8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00151fd:	48                   	dec    eax
c00151fe:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015203:	75 03                	jne    c0015208 <Semaphore::release()+0x60>
c0015205:	fb                   	sti    
c0015206:	66 90                	xchg   ax,ax
c0015208:	83 c4 0c             	add    esp,0xc
c001520b:	c3                   	ret    
c001520c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001520f:	eb d3                	jmp    c00151e4 <Semaphore::release()+0x3c>
c0015211:	8d 76 00             	lea    esi,[esi+0x0]
c0015214:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001521e:	e8 85 f5 ff ff       	call   c00147a8 <schedule()>
c0015223:	eb d3                	jmp    c00151f8 <Semaphore::release()+0x50>
c0015225:	8d 76 00             	lea    esi,[esi+0x0]

c0015228 <__static_initialization_and_destruction_0(int, int)>:
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015230:	0f 85 8e 00 00 00    	jne    c00152c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015236:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001523e:	0f 85 80 00 00 00    	jne    c00152c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015244:	83 ec 0c             	sub    esp,0xc
c0015247:	68 84 71 02 c0       	push   0xc0027184
c001524c:	e8 b7 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	83 ec 04             	sub    esp,0x4
c0015257:	68 28 12 02 c0       	push   0xc0021228
c001525c:	68 84 71 02 c0       	push   0xc0027184
c0015261:	68 b8 e3 01 c0       	push   0xc001e3b8
c0015266:	e8 49 52 ff ff       	call   c000a4b4 <__cxa_atexit>
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	68 78 71 02 c0       	push   0xc0027178
c0015276:	e8 8d 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	83 ec 04             	sub    esp,0x4
c0015281:	68 28 12 02 c0       	push   0xc0021228
c0015286:	68 78 71 02 c0       	push   0xc0027178
c001528b:	68 b8 e3 01 c0       	push   0xc001e3b8
c0015290:	e8 1f 52 ff ff       	call   c000a4b4 <__cxa_atexit>
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	68 6c 71 02 c0       	push   0xc002716c
c00152a0:	e8 63 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	83 ec 04             	sub    esp,0x4
c00152ab:	68 28 12 02 c0       	push   0xc0021228
c00152b0:	68 6c 71 02 c0       	push   0xc002716c
c00152b5:	68 b8 e3 01 c0       	push   0xc001e3b8
c00152ba:	e8 f5 51 ff ff       	call   c000a4b4 <__cxa_atexit>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	66 90                	xchg   ax,ax
c00152c4:	90                   	nop
c00152c5:	83 c4 0c             	add    esp,0xc
c00152c8:	c3                   	ret    
c00152c9:	8d 76 00             	lea    esi,[esi+0x0]

c00152cc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	83 ec 08             	sub    esp,0x8
c00152d2:	68 ff ff 00 00       	push   0xffff
c00152d7:	6a 01                	push   0x1
c00152d9:	e8 4a ff ff ff       	call   c0015228 <__static_initialization_and_destruction_0(int, int)>
c00152de:	83 c4 10             	add    esp,0x10
c00152e1:	83 c4 0c             	add    esp,0xc
c00152e4:	c3                   	ret    

c00152e5 <Vm::inbv(unsigned short)>:
c00152e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152e9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00152ee:	75 06                	jne    c00152f6 <Vm::inbv(unsigned short)+0x11>
c00152f0:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00152f5:	c3                   	ret    
c00152f6:	ec                   	in     al,dx
c00152f7:	c3                   	ret    

c00152f8 <Vm::outbv(unsigned short, unsigned char)>:
c00152f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015300:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015305:	75 25                	jne    c001532c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015307:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001530d:	8d 51 01             	lea    edx,[ecx+0x1]
c0015310:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c0015316:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c001531c:	83 fa 20             	cmp    edx,0x20
c001531f:	75 0c                	jne    c001532d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015321:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001532b:	c3                   	ret    
c001532c:	ee                   	out    dx,al
c001532d:	c3                   	ret    

c001532e <Vm::realToLinear(unsigned short, unsigned short)>:
c001532e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015333:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015338:	c1 e0 04             	shl    eax,0x4
c001533b:	01 d0                	add    eax,edx
c001533d:	c3                   	ret    

c001533e <Vm::getSegment(unsigned int)>:
c001533e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015342:	c1 e8 10             	shr    eax,0x10
c0015345:	c3                   	ret    

c0015346 <Vm::getOffset(unsigned int)>:
c0015346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001534a:	c3                   	ret    

c001534b <Vm::mainloop2()>:
c001534b:	83 ec 18             	sub    esp,0x18
c001534e:	fa                   	cli    
c001534f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015355:	6a 02                	push   0x2
c0015357:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c001535e:	e8 19 f6 ff ff       	call   c001497c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015368:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001536c:	52                   	push   edx
c001536d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015371:	52                   	push   edx
c0015372:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015376:	52                   	push   edx
c0015377:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001537b:	50                   	push   eax
c001537c:	e8 8e ae fe ff       	call   c000020f <goToVM86>
c0015381:	83 c4 2c             	add    esp,0x2c
c0015384:	c3                   	ret    

c0015385 <Vm::mainVm8086Loop(void*)>:
c0015385:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001538a:	48                   	dec    eax
c001538b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015390:	75 01                	jne    c0015393 <Vm::mainVm8086Loop(void*)+0xe>
c0015392:	fb                   	sti    
c0015393:	eb b6                	jmp    c001534b <Vm::mainloop2()>

c0015395 <Vm::mainloop3(unsigned long)>:
c0015395:	83 ec 18             	sub    esp,0x18
c0015398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001539c:	fa                   	cli    
c001539d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153a3:	6a 02                	push   0x2
c00153a5:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00153ac:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c00153b1:	e8 c6 f5 ff ff       	call   c001497c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00153b6:	83 c4 1c             	add    esp,0x1c
c00153b9:	eb 90                	jmp    c001534b <Vm::mainloop2()>

c00153bb <Vm::initialise8086()>:
c00153bb:	83 ec 0c             	sub    esp,0xc
c00153be:	68 80 00 00 00       	push   0x80
c00153c3:	6a 00                	push   0x0
c00153c5:	68 85 53 01 c0       	push   0xc0015385
c00153ca:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00153d0:	e8 8b f1 ff ff       	call   c0014560 <Process::createThread(void (*)(void*), void*, int)>
c00153d5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00153dc:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c00153e1:	68 00 01 00 00       	push   0x100
c00153e6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00153eb:	6a 00                	push   0x0
c00153ed:	6a 00                	push   0x0
c00153ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00153f5:	e8 00 49 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00153fa:	83 c4 2c             	add    esp,0x2c
c00153fd:	c3                   	ret    

c00153fe <Vm::finish8086()>:
c00153fe:	53                   	push   ebx
c00153ff:	83 ec 08             	sub    esp,0x8
c0015402:	fa                   	cli    
c0015403:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015409:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015410:	75 15                	jne    c0015427 <Vm::finish8086()+0x29>
c0015412:	e8 91 f3 ff ff       	call   c00147a8 <schedule()>
c0015417:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001541c:	48                   	dec    eax
c001541d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015422:	75 de                	jne    c0015402 <Vm::finish8086()+0x4>
c0015424:	fb                   	sti    
c0015425:	eb db                	jmp    c0015402 <Vm::finish8086()+0x4>
c0015427:	83 ec 0c             	sub    esp,0xc
c001542a:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015430:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015436:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c001543d:	e8 2a f8 ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c0015442:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	8d 50 ff             	lea    edx,[eax-0x1]
c001544d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015453:	85 d2                	test   edx,edx
c0015455:	75 01                	jne    c0015458 <Vm::finish8086()+0x5a>
c0015457:	fb                   	sti    
c0015458:	89 d8                	mov    eax,ebx
c001545a:	83 c4 08             	add    esp,0x8
c001545d:	5b                   	pop    ebx
c001545e:	c3                   	ret    

c001545f <Vm::getOutput8086(unsigned char*)>:
c001545f:	57                   	push   edi
c0015460:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015466:	56                   	push   esi
c0015467:	be e0 71 02 c0       	mov    esi,0xc00271e0
c001546c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015470:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015472:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c0015477:	5e                   	pop    esi
c0015478:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015482:	5f                   	pop    edi
c0015483:	c3                   	ret    

c0015484 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015484:	55                   	push   ebp
c0015485:	57                   	push   edi
c0015486:	56                   	push   esi
c0015487:	53                   	push   ebx
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001548f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015493:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015497:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001549b:	fa                   	cli    
c001549c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00154a2:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c00154a9:	75 15                	jne    c00154c0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00154ab:	e8 f8 f2 ff ff       	call   c00147a8 <schedule()>
c00154b0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154b5:	48                   	dec    eax
c00154b6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154bb:	75 de                	jne    c001549b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154bd:	fb                   	sti    
c00154be:	eb db                	jmp    c001549b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154c0:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00154c5:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00154cf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00154d3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00154d7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00154db:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00154df:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00154e3:	0f b7 ff             	movzx  edi,di
c00154e6:	0f b7 f6             	movzx  esi,si
c00154e9:	50                   	push   eax
c00154ea:	6a 20                	push   0x20
c00154ec:	6a 00                	push   0x0
c00154ee:	68 e0 71 02 c0       	push   0xc00271e0
c00154f3:	e8 c8 af fe ff       	call   c00004c0 <memset>
c00154f8:	5a                   	pop    edx
c00154f9:	59                   	pop    ecx
c00154fa:	57                   	push   edi
c00154fb:	56                   	push   esi
c00154fc:	e8 2d fe ff ff       	call   c001532e <Vm::realToLinear(unsigned short, unsigned short)>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	89 c7                	mov    edi,eax
c0015506:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001550a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001550e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015510:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015515:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c001551c:	48                   	dec    eax
c001551d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015522:	75 01                	jne    c0015525 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015524:	fb                   	sti    
c0015525:	83 ec 0c             	sub    esp,0xc
c0015528:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001552e:	e8 39 f7 ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c0015533:	83 c4 1c             	add    esp,0x1c
c0015536:	b0 01                	mov    al,0x1
c0015538:	5b                   	pop    ebx
c0015539:	5e                   	pop    esi
c001553a:	5f                   	pop    edi
c001553b:	5d                   	pop    ebp
c001553c:	c3                   	ret    

c001553d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001553d:	55                   	push   ebp
c001553e:	57                   	push   edi
c001553f:	56                   	push   esi
c0015540:	53                   	push   ebx
c0015541:	83 ec 2c             	sub    esp,0x2c
c0015544:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015548:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001554c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015550:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015554:	fa                   	cli    
c0015555:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001555b:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015562:	89 f0                	mov    eax,esi
c0015564:	84 c0                	test   al,al
c0015566:	75 1d                	jne    c0015585 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001556c:	e8 37 f2 ff ff       	call   c00147a8 <schedule()>
c0015571:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015576:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001557a:	48                   	dec    eax
c001557b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015580:	75 d2                	jne    c0015554 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015582:	fb                   	sti    
c0015583:	eb cf                	jmp    c0015554 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015585:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001558a:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015594:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015598:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001559c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00155a0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00155a4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00155a8:	50                   	push   eax
c00155a9:	6a 20                	push   0x20
c00155ab:	6a 00                	push   0x0
c00155ad:	68 e0 71 02 c0       	push   0xc00271e0
c00155b2:	e8 09 af fe ff       	call   c00004c0 <memset>
c00155b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155be:	e8 a2 22 ff ff       	call   c0007865 <malloc>
c00155c3:	83 c4 0c             	add    esp,0xc
c00155c6:	89 c3                	mov    ebx,eax
c00155c8:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00155ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00155d2:	50                   	push   eax
c00155d3:	e8 98 55 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	85 db                	test   ebx,ebx
c00155dd:	75 0a                	jne    c00155e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00155df:	83 ec 0c             	sub    esp,0xc
c00155e2:	68 bc 06 02 c0       	push   0xc00206bc
c00155e7:	eb 3e                	jmp    c0015627 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00155e9:	50                   	push   eax
c00155ea:	8d 44 24 17          	lea    eax,[esp+0x17]
c00155ee:	50                   	push   eax
c00155ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00155f3:	50                   	push   eax
c00155f4:	53                   	push   ebx
c00155f5:	e8 e2 58 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015602:	74 0a                	je     c001560e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015604:	83 ec 0c             	sub    esp,0xc
c0015607:	68 d0 06 02 c0       	push   0xc00206d0
c001560c:	eb 19                	jmp    c0015627 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001560e:	51                   	push   ecx
c001560f:	51                   	push   ecx
c0015610:	6a 01                	push   0x1
c0015612:	53                   	push   ebx
c0015613:	e8 18 56 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	85 c0                	test   eax,eax
c001561d:	74 24                	je     c0015643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001561f:	83 ec 0c             	sub    esp,0xc
c0015622:	68 e9 06 02 c0       	push   0xc00206e9
c0015627:	e8 8f ad ff ff       	call   c00103bb <KePanic(char const*)>
c001562c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015631:	83 c4 10             	add    esp,0x10
c0015634:	48                   	dec    eax
c0015635:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001563a:	85 c0                	test   eax,eax
c001563c:	75 01                	jne    c001563f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001563e:	fb                   	sti    
c001563f:	31 f6                	xor    esi,esi
c0015641:	eb 58                	jmp    c001569b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015643:	0f b7 ed             	movzx  ebp,bp
c0015646:	50                   	push   eax
c0015647:	0f b7 ff             	movzx  edi,di
c001564a:	50                   	push   eax
c001564b:	55                   	push   ebp
c001564c:	57                   	push   edi
c001564d:	e8 dc fc ff ff       	call   c001532e <Vm::realToLinear(unsigned short, unsigned short)>
c0015652:	5a                   	pop    edx
c0015653:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015655:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015659:	51                   	push   ecx
c001565a:	50                   	push   eax
c001565b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001565f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015663:	53                   	push   ebx
c0015664:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015667:	83 c4 14             	add    esp,0x14
c001566a:	53                   	push   ebx
c001566b:	e8 1e 56 ff ff       	call   c000ac8e <File::close()>
c0015670:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	48                   	dec    eax
c0015679:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015680:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015685:	85 c0                	test   eax,eax
c0015687:	75 01                	jne    c001568a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0015689:	fb                   	sti    
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015693:	e8 d4 f5 ff ff       	call   c0014c6c <unblockTask(ThreadControlBlock*)>
c0015698:	83 c4 10             	add    esp,0x10
c001569b:	83 c4 2c             	add    esp,0x2c
c001569e:	89 f0                	mov    eax,esi
c00156a0:	5b                   	pop    ebx
c00156a1:	5e                   	pop    esi
c00156a2:	5f                   	pop    edi
c00156a3:	5d                   	pop    ebp
c00156a4:	c3                   	ret    

c00156a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00156a5:	57                   	push   edi
c00156a6:	56                   	push   esi
c00156a7:	53                   	push   ebx
c00156a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00156ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00156b4:	83 e8 06             	sub    eax,0x6
c00156b7:	0f b7 c0             	movzx  eax,ax
c00156ba:	50                   	push   eax
c00156bb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00156c0:	50                   	push   eax
c00156c1:	e8 68 fc ff ff       	call   c001532e <Vm::realToLinear(unsigned short, unsigned short)>
c00156c6:	5a                   	pop    edx
c00156c7:	5e                   	pop    esi
c00156c8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00156cb:	8d 56 fa             	lea    edx,[esi-0x6]
c00156ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c00156d4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00156d7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00156da:	83 c2 02             	add    edx,0x2
c00156dd:	66 89 10             	mov    WORD PTR [eax],dx
c00156e0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00156e3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00156e7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00156ea:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00156ee:	89 d6                	mov    esi,edx
c00156f0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00156f6:	66 81 e6 ff fd       	and    si,0xfdff
c00156fb:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00156ff:	74 07                	je     c0015708 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015701:	89 d6                	mov    esi,edx
c0015703:	66 81 ce 00 02       	or     si,0x200
c0015708:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001570c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015711:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015715:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001571d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015720:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015728:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001572b:	5b                   	pop    ebx
c001572c:	5e                   	pop    esi
c001572d:	5f                   	pop    edi
c001572e:	c3                   	ret    

c001572f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001572f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015734:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015739:	c1 e0 04             	shl    eax,0x4
c001573c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001573f:	c3                   	ret    

c0015740 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015740:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015745:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001574a:	c1 e0 04             	shl    eax,0x4
c001574d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015751:	c3                   	ret    

c0015752 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015752:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001575c:	c1 e0 04             	shl    eax,0x4
c001575f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015762:	c3                   	ret    

c0015763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015763:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015768:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001576d:	c1 e0 04             	shl    eax,0x4
c0015770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015774:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015777:	c3                   	ret    

c0015778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015778:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001577d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015782:	c1 e0 04             	shl    eax,0x4
c0015785:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015789:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001578d:	c3                   	ret    

c001578e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001578e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015793:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015798:	c1 e0 04             	shl    eax,0x4
c001579b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001579f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00157a2:	c3                   	ret    

c00157a3 <Vm::faultHandler(regs*)>:
c00157a3:	55                   	push   ebp
c00157a4:	57                   	push   edi
c00157a5:	56                   	push   esi
c00157a6:	53                   	push   ebx
c00157a7:	83 ec 1c             	sub    esp,0x1c
c00157aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157ae:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157b1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00157b5:	0f b7 f8             	movzx  edi,ax
c00157b8:	52                   	push   edx
c00157b9:	0f b7 c0             	movzx  eax,ax
c00157bc:	50                   	push   eax
c00157bd:	e8 6c fb ff ff       	call   c001532e <Vm::realToLinear(unsigned short, unsigned short)>
c00157c2:	5a                   	pop    edx
c00157c3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00157c6:	59                   	pop    ecx
c00157c7:	89 c1                	mov    ecx,eax
c00157c9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00157cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00157d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157d9:	0f b7 c5             	movzx  eax,bp
c00157dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00157e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157e8:	e8 41 fb ff ff       	call   c001532e <Vm::realToLinear(unsigned short, unsigned short)>
c00157ed:	5e                   	pop    esi
c00157ee:	be 06 00 00 00       	mov    esi,0x6
c00157f3:	5a                   	pop    edx
c00157f4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00157f9:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00157fe:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015801:	80 fa 9d             	cmp    dl,0x9d
c0015804:	0f 84 2c 02 00 00    	je     c0015a36 <Vm::faultHandler(regs*)+0x293>
c001580a:	0f 87 91 00 00 00    	ja     c00158a1 <Vm::faultHandler(regs*)+0xfe>
c0015810:	80 fa 66             	cmp    dl,0x66
c0015813:	0f 84 98 01 00 00    	je     c00159b1 <Vm::faultHandler(regs*)+0x20e>
c0015819:	77 47                	ja     c0015862 <Vm::faultHandler(regs*)+0xbf>
c001581b:	80 fa 36             	cmp    dl,0x36
c001581e:	0f 84 80 01 00 00    	je     c00159a4 <Vm::faultHandler(regs*)+0x201>
c0015824:	77 1a                	ja     c0015840 <Vm::faultHandler(regs*)+0x9d>
c0015826:	80 fa 26             	cmp    dl,0x26
c0015829:	0f 84 4e 01 00 00    	je     c001597d <Vm::faultHandler(regs*)+0x1da>
c001582f:	80 fa 2e             	cmp    dl,0x2e
c0015832:	0f 85 e2 05 00 00    	jne    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015838:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001583b:	31 f6                	xor    esi,esi
c001583d:	41                   	inc    ecx
c001583e:	eb be                	jmp    c00157fe <Vm::faultHandler(regs*)+0x5b>
c0015840:	80 fa 64             	cmp    dl,0x64
c0015843:	0f 84 41 01 00 00    	je     c001598a <Vm::faultHandler(regs*)+0x1e7>
c0015849:	0f 87 48 01 00 00    	ja     c0015997 <Vm::faultHandler(regs*)+0x1f4>
c001584f:	80 fa 3e             	cmp    dl,0x3e
c0015852:	0f 85 c2 05 00 00    	jne    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015858:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001585b:	be 01 00 00 00       	mov    esi,0x1
c0015860:	eb db                	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c0015862:	80 fa 6d             	cmp    dl,0x6d
c0015865:	0f 84 ec 02 00 00    	je     c0015b57 <Vm::faultHandler(regs*)+0x3b4>
c001586b:	77 17                	ja     c0015884 <Vm::faultHandler(regs*)+0xe1>
c001586d:	80 fa 67             	cmp    dl,0x67
c0015870:	0f 84 48 01 00 00    	je     c00159be <Vm::faultHandler(regs*)+0x21b>
c0015876:	80 fa 6c             	cmp    dl,0x6c
c0015879:	0f 84 69 02 00 00    	je     c0015ae8 <Vm::faultHandler(regs*)+0x345>
c001587f:	e9 96 05 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015884:	80 fa 6f             	cmp    dl,0x6f
c0015887:	0f 84 f4 03 00 00    	je     c0015c81 <Vm::faultHandler(regs*)+0x4de>
c001588d:	0f 82 59 03 00 00    	jb     c0015bec <Vm::faultHandler(regs*)+0x449>
c0015893:	80 fa 9c             	cmp    dl,0x9c
c0015896:	0f 84 2f 01 00 00    	je     c00159cb <Vm::faultHandler(regs*)+0x228>
c001589c:	e9 79 05 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x677>
c00158a1:	80 fa ec             	cmp    dl,0xec
c00158a4:	0f 84 14 05 00 00    	je     c0015dbe <Vm::faultHandler(regs*)+0x61b>
c00158aa:	77 7b                	ja     c0015927 <Vm::faultHandler(regs*)+0x184>
c00158ac:	80 fa e4             	cmp    dl,0xe4
c00158af:	0f 84 93 04 00 00    	je     c0015d48 <Vm::faultHandler(regs*)+0x5a5>
c00158b5:	77 53                	ja     c001590a <Vm::faultHandler(regs*)+0x167>
c00158b7:	80 fa cd             	cmp    dl,0xcd
c00158ba:	0f 84 d9 01 00 00    	je     c0015a99 <Vm::faultHandler(regs*)+0x2f6>
c00158c0:	80 fa cf             	cmp    dl,0xcf
c00158c3:	0f 85 51 05 00 00    	jne    c0015e1a <Vm::faultHandler(regs*)+0x677>
c00158c9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00158cc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00158cf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00158d3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00158d6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00158da:	81 ca 00 02 02 00    	or     edx,0x20200
c00158e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158e3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00158e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158ed:	66 c1 e8 09          	shr    ax,0x9
c00158f1:	83 e0 01             	and    eax,0x1
c00158f4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158f7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158fa:	83 c0 06             	add    eax,0x6
c00158fd:	25 ff ff 00 00       	and    eax,0xffff
c0015902:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015905:	e9 0c 05 00 00       	jmp    c0015e16 <Vm::faultHandler(regs*)+0x673>
c001590a:	80 fa e6             	cmp    dl,0xe6
c001590d:	0f 84 7f 04 00 00    	je     c0015d92 <Vm::faultHandler(regs*)+0x5ef>
c0015913:	0f 82 4b 04 00 00    	jb     c0015d64 <Vm::faultHandler(regs*)+0x5c1>
c0015919:	80 fa e7             	cmp    dl,0xe7
c001591c:	0f 84 87 04 00 00    	je     c0015da9 <Vm::faultHandler(regs*)+0x606>
c0015922:	e9 f3 04 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015927:	80 fa ef             	cmp    dl,0xef
c001592a:	0f 84 d1 04 00 00    	je     c0015e01 <Vm::faultHandler(regs*)+0x65e>
c0015930:	77 28                	ja     c001595a <Vm::faultHandler(regs*)+0x1b7>
c0015932:	80 fa ed             	cmp    dl,0xed
c0015935:	0f 84 9f 04 00 00    	je     c0015dda <Vm::faultHandler(regs*)+0x637>
c001593b:	80 fa ee             	cmp    dl,0xee
c001593e:	0f 85 d6 04 00 00    	jne    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015944:	50                   	push   eax
c0015945:	50                   	push   eax
c0015946:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001594a:	50                   	push   eax
c001594b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001594f:	50                   	push   eax
c0015950:	e8 a3 f9 ff ff       	call   c00152f8 <Vm::outbv(unsigned short, unsigned char)>
c0015955:	e9 9f 04 00 00       	jmp    c0015df9 <Vm::faultHandler(regs*)+0x656>
c001595a:	80 fa fa             	cmp    dl,0xfa
c001595d:	0f 84 69 01 00 00    	je     c0015acc <Vm::faultHandler(regs*)+0x329>
c0015963:	80 fa fb             	cmp    dl,0xfb
c0015966:	0f 84 6e 01 00 00    	je     c0015ada <Vm::faultHandler(regs*)+0x337>
c001596c:	80 fa f3             	cmp    dl,0xf3
c001596f:	0f 85 a5 04 00 00    	jne    c0015e1a <Vm::faultHandler(regs*)+0x677>
c0015975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015978:	e9 c0 fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c001597d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015980:	be 02 00 00 00       	mov    esi,0x2
c0015985:	e9 b3 fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c001598a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001598d:	be 03 00 00 00       	mov    esi,0x3
c0015992:	e9 a6 fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c0015997:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001599a:	be 04 00 00 00       	mov    esi,0x4
c001599f:	e9 99 fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c00159a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159a7:	be 05 00 00 00       	mov    esi,0x5
c00159ac:	e9 8c fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c00159b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159b4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00159b9:	e9 7f fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c00159be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159c1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00159c6:	e9 72 fe ff ff       	jmp    c001583d <Vm::faultHandler(regs*)+0x9a>
c00159cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00159ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00159d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00159d7:	74 30                	je     c0015a09 <Vm::faultHandler(regs*)+0x266>
c00159d9:	83 e9 04             	sub    ecx,0x4
c00159dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00159e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00159e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00159eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00159ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159f4:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00159f8:	0f 84 15 04 00 00    	je     c0015e13 <Vm::faultHandler(regs*)+0x670>
c00159fe:	80 ce 02             	or     dh,0x2
c0015a01:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015a04:	e9 0a 04 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015a09:	83 e9 02             	sub    ecx,0x2
c0015a0c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015a12:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015a15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a1f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015a23:	74 05                	je     c0015a2a <Vm::faultHandler(regs*)+0x287>
c0015a25:	80 ce 02             	or     dh,0x2
c0015a28:	eb 03                	jmp    c0015a2d <Vm::faultHandler(regs*)+0x28a>
c0015a2a:	80 e6 fd             	and    dh,0xfd
c0015a2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a31:	e9 dd 03 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015a36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015a3b:	74 2a                	je     c0015a67 <Vm::faultHandler(regs*)+0x2c4>
c0015a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a3f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015a45:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a56:	c1 e8 09             	shr    eax,0x9
c0015a59:	83 e0 01             	and    eax,0x1
c0015a5c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a5f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a62:	83 c0 04             	add    eax,0x4
c0015a65:	eb 25                	jmp    c0015a8c <Vm::faultHandler(regs*)+0x2e9>
c0015a67:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015a6a:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a70:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a73:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015a76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a7c:	66 c1 e8 09          	shr    ax,0x9
c0015a80:	83 e0 01             	and    eax,0x1
c0015a83:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a89:	83 c0 02             	add    eax,0x2
c0015a8c:	25 ff ff 00 00       	and    eax,0xffff
c0015a91:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015a94:	e9 7a 03 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015a99:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015a9d:	3c ee                	cmp    al,0xee
c0015a9f:	75 10                	jne    c0015ab1 <Vm::faultHandler(regs*)+0x30e>
c0015aa1:	83 ec 0c             	sub    esp,0xc
c0015aa4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015aa7:	e8 e9 f8 ff ff       	call   c0015395 <Vm::mainloop3(unsigned long)>
c0015aac:	e9 4b 03 00 00       	jmp    c0015dfc <Vm::faultHandler(regs*)+0x659>
c0015ab1:	83 ec 0c             	sub    esp,0xc
c0015ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015abc:	51                   	push   ecx
c0015abd:	50                   	push   eax
c0015abe:	53                   	push   ebx
c0015abf:	e8 e1 fb ff ff       	call   c00156a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015ac4:	83 c4 20             	add    esp,0x20
c0015ac7:	e9 4a 03 00 00       	jmp    c0015e16 <Vm::faultHandler(regs*)+0x673>
c0015acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015ad5:	e9 39 03 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015adf:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015ae3:	e9 2b 03 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015ae8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015aeb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015af0:	74 2b                	je     c0015b1d <Vm::faultHandler(regs*)+0x37a>
c0015af2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015af9:	76 22                	jbe    c0015b1d <Vm::faultHandler(regs*)+0x37a>
c0015afb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015aff:	50                   	push   eax
c0015b00:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b04:	50                   	push   eax
c0015b05:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b09:	50                   	push   eax
c0015b0a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b0e:	50                   	push   eax
c0015b0f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b13:	50                   	push   eax
c0015b14:	6a 6c                	push   0x6c
c0015b16:	6a 6c                	push   0x6c
c0015b18:	e9 b9 01 00 00       	jmp    c0015cd6 <Vm::faultHandler(regs*)+0x533>
c0015b1d:	83 ec 0c             	sub    esp,0xc
c0015b20:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015b24:	0f b7 f6             	movzx  esi,si
c0015b27:	50                   	push   eax
c0015b28:	e8 b8 f7 ff ff       	call   c00152e5 <Vm::inbv(unsigned short)>
c0015b2d:	83 c4 0c             	add    esp,0xc
c0015b30:	0f b6 c0             	movzx  eax,al
c0015b33:	50                   	push   eax
c0015b34:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015b38:	50                   	push   eax
c0015b39:	56                   	push   esi
c0015b3a:	e8 24 fc ff ff       	call   c0015763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015b49:	74 03                	je     c0015b4e <Vm::faultHandler(regs*)+0x3ab>
c0015b4b:	48                   	dec    eax
c0015b4c:	eb 01                	jmp    c0015b4f <Vm::faultHandler(regs*)+0x3ac>
c0015b4e:	40                   	inc    eax
c0015b4f:	0f b7 c0             	movzx  eax,ax
c0015b52:	e9 8d 00 00 00       	jmp    c0015be4 <Vm::faultHandler(regs*)+0x441>
c0015b57:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015b5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b5d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b62:	74 29                	je     c0015b8d <Vm::faultHandler(regs*)+0x3ea>
c0015b64:	3d ff ff 00 00       	cmp    eax,0xffff
c0015b69:	76 22                	jbe    c0015b8d <Vm::faultHandler(regs*)+0x3ea>
c0015b6b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b6f:	50                   	push   eax
c0015b70:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b74:	50                   	push   eax
c0015b75:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b79:	50                   	push   eax
c0015b7a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b7e:	50                   	push   eax
c0015b7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b83:	50                   	push   eax
c0015b84:	6a 6d                	push   0x6d
c0015b86:	6a 6d                	push   0x6d
c0015b88:	e9 49 01 00 00       	jmp    c0015cd6 <Vm::faultHandler(regs*)+0x533>
c0015b8d:	0f b7 c8             	movzx  ecx,ax
c0015b90:	0f b7 f6             	movzx  esi,si
c0015b93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015b96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015b9b:	74 20                	je     c0015bbd <Vm::faultHandler(regs*)+0x41a>
c0015b9d:	ed                   	in     eax,dx
c0015b9e:	55                   	push   ebp
c0015b9f:	50                   	push   eax
c0015ba0:	51                   	push   ecx
c0015ba1:	56                   	push   esi
c0015ba2:	e8 e7 fb ff ff       	call   c001578e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015bad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015bb1:	74 05                	je     c0015bb8 <Vm::faultHandler(regs*)+0x415>
c0015bb3:	83 e8 04             	sub    eax,0x4
c0015bb6:	eb 27                	jmp    c0015bdf <Vm::faultHandler(regs*)+0x43c>
c0015bb8:	83 c0 04             	add    eax,0x4
c0015bbb:	eb 22                	jmp    c0015bdf <Vm::faultHandler(regs*)+0x43c>
c0015bbd:	66 ed                	in     ax,dx
c0015bbf:	0f b7 c0             	movzx  eax,ax
c0015bc2:	57                   	push   edi
c0015bc3:	50                   	push   eax
c0015bc4:	51                   	push   ecx
c0015bc5:	56                   	push   esi
c0015bc6:	e8 ad fb ff ff       	call   c0015778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015bd1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015bd5:	74 05                	je     c0015bdc <Vm::faultHandler(regs*)+0x439>
c0015bd7:	83 e8 02             	sub    eax,0x2
c0015bda:	eb 03                	jmp    c0015bdf <Vm::faultHandler(regs*)+0x43c>
c0015bdc:	83 c0 02             	add    eax,0x2
c0015bdf:	25 ff ff 00 00       	and    eax,0xffff
c0015be4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015be7:	e9 27 02 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015bec:	8d 46 ff             	lea    eax,[esi-0x1]
c0015bef:	3c 05                	cmp    al,0x5
c0015bf1:	77 24                	ja     c0015c17 <Vm::faultHandler(regs*)+0x474>
c0015bf3:	0f b6 c0             	movzx  eax,al
c0015bf6:	ff 24 85 5c 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf8a4]
c0015bfd:	0f b7 fd             	movzx  edi,bp
c0015c00:	eb 15                	jmp    c0015c17 <Vm::faultHandler(regs*)+0x474>
c0015c02:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015c06:	eb 0f                	jmp    c0015c17 <Vm::faultHandler(regs*)+0x474>
c0015c08:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015c0c:	eb 09                	jmp    c0015c17 <Vm::faultHandler(regs*)+0x474>
c0015c0e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015c12:	eb 03                	jmp    c0015c17 <Vm::faultHandler(regs*)+0x474>
c0015c14:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015c17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c1a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c1f:	74 29                	je     c0015c4a <Vm::faultHandler(regs*)+0x4a7>
c0015c21:	3d ff ff 00 00       	cmp    eax,0xffff
c0015c26:	76 22                	jbe    c0015c4a <Vm::faultHandler(regs*)+0x4a7>
c0015c28:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015c2c:	50                   	push   eax
c0015c2d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015c31:	50                   	push   eax
c0015c32:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015c36:	50                   	push   eax
c0015c37:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015c3b:	50                   	push   eax
c0015c3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c40:	50                   	push   eax
c0015c41:	6a 6e                	push   0x6e
c0015c43:	6a 6e                	push   0x6e
c0015c45:	e9 8c 00 00 00       	jmp    c0015cd6 <Vm::faultHandler(regs*)+0x533>
c0015c4a:	0f b7 c0             	movzx  eax,ax
c0015c4d:	52                   	push   edx
c0015c4e:	52                   	push   edx
c0015c4f:	50                   	push   eax
c0015c50:	57                   	push   edi
c0015c51:	e8 d9 fa ff ff       	call   c001572f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015c56:	59                   	pop    ecx
c0015c57:	0f b6 c0             	movzx  eax,al
c0015c5a:	5e                   	pop    esi
c0015c5b:	50                   	push   eax
c0015c5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c60:	50                   	push   eax
c0015c61:	e8 92 f6 ff ff       	call   c00152f8 <Vm::outbv(unsigned short, unsigned char)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c6c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015c70:	74 03                	je     c0015c75 <Vm::faultHandler(regs*)+0x4d2>
c0015c72:	48                   	dec    eax
c0015c73:	eb 01                	jmp    c0015c76 <Vm::faultHandler(regs*)+0x4d3>
c0015c75:	40                   	inc    eax
c0015c76:	0f b7 c0             	movzx  eax,ax
c0015c79:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015c7c:	e9 92 01 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015c81:	8d 46 ff             	lea    eax,[esi-0x1]
c0015c84:	3c 05                	cmp    al,0x5
c0015c86:	77 1f                	ja     c0015ca7 <Vm::faultHandler(regs*)+0x504>
c0015c88:	0f b6 c0             	movzx  eax,al
c0015c8b:	ff 24 85 74 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf88c]
c0015c92:	89 ef                	mov    edi,ebp
c0015c94:	eb 11                	jmp    c0015ca7 <Vm::faultHandler(regs*)+0x504>
c0015c96:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015c99:	eb 0c                	jmp    c0015ca7 <Vm::faultHandler(regs*)+0x504>
c0015c9b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015c9e:	eb 07                	jmp    c0015ca7 <Vm::faultHandler(regs*)+0x504>
c0015ca0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015ca3:	eb 02                	jmp    c0015ca7 <Vm::faultHandler(regs*)+0x504>
c0015ca5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015ca7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015caa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015caf:	74 37                	je     c0015ce8 <Vm::faultHandler(regs*)+0x545>
c0015cb1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015cb7:	76 2f                	jbe    c0015ce8 <Vm::faultHandler(regs*)+0x545>
c0015cb9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015cbd:	50                   	push   eax
c0015cbe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015cc2:	50                   	push   eax
c0015cc3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015cc7:	50                   	push   eax
c0015cc8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015ccc:	50                   	push   eax
c0015ccd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015cd1:	50                   	push   eax
c0015cd2:	6a 6f                	push   0x6f
c0015cd4:	6a 6f                	push   0x6f
c0015cd6:	68 02 07 02 c0       	push   0xc0020702
c0015cdb:	e8 1a 49 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015ce0:	83 c4 20             	add    esp,0x20
c0015ce3:	e9 86 01 00 00       	jmp    c0015e6e <Vm::faultHandler(regs*)+0x6cb>
c0015ce8:	0f b7 d7             	movzx  edx,di
c0015ceb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015cee:	0f b7 c6             	movzx  eax,si
c0015cf1:	81 e1 00 04 00 00    	and    ecx,0x400
c0015cf7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015cfa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015cff:	74 1d                	je     c0015d1e <Vm::faultHandler(regs*)+0x57b>
c0015d01:	55                   	push   ebp
c0015d02:	55                   	push   ebp
c0015d03:	50                   	push   eax
c0015d04:	52                   	push   edx
c0015d05:	e8 48 fa ff ff       	call   c0015752 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	89 fa                	mov    edx,edi
c0015d0f:	ef                   	out    dx,eax
c0015d10:	85 c9                	test   ecx,ecx
c0015d12:	74 05                	je     c0015d19 <Vm::faultHandler(regs*)+0x576>
c0015d14:	83 ee 04             	sub    esi,0x4
c0015d17:	eb 21                	jmp    c0015d3a <Vm::faultHandler(regs*)+0x597>
c0015d19:	83 c6 04             	add    esi,0x4
c0015d1c:	eb 1c                	jmp    c0015d3a <Vm::faultHandler(regs*)+0x597>
c0015d1e:	55                   	push   ebp
c0015d1f:	55                   	push   ebp
c0015d20:	50                   	push   eax
c0015d21:	52                   	push   edx
c0015d22:	e8 19 fa ff ff       	call   c0015740 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	89 fa                	mov    edx,edi
c0015d2c:	66 ef                	out    dx,ax
c0015d2e:	85 c9                	test   ecx,ecx
c0015d30:	74 05                	je     c0015d37 <Vm::faultHandler(regs*)+0x594>
c0015d32:	83 ee 02             	sub    esi,0x2
c0015d35:	eb 03                	jmp    c0015d3a <Vm::faultHandler(regs*)+0x597>
c0015d37:	83 c6 02             	add    esi,0x2
c0015d3a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015d40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015d43:	e9 cb 00 00 00       	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015d48:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015d4f:	83 ec 0c             	sub    esp,0xc
c0015d52:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d56:	50                   	push   eax
c0015d57:	e8 89 f5 ff ff       	call   c00152e5 <Vm::inbv(unsigned short)>
c0015d5c:	0f b6 c0             	movzx  eax,al
c0015d5f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015d62:	eb 3f                	jmp    c0015da3 <Vm::faultHandler(regs*)+0x600>
c0015d64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d69:	74 07                	je     c0015d72 <Vm::faultHandler(regs*)+0x5cf>
c0015d6b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d6f:	ed                   	in     eax,dx
c0015d70:	eb 14                	jmp    c0015d86 <Vm::faultHandler(regs*)+0x5e3>
c0015d72:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015d75:	66 31 f6             	xor    si,si
c0015d78:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015d7b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d7f:	66 ed                	in     ax,dx
c0015d81:	0f b7 c0             	movzx  eax,ax
c0015d84:	09 f0                	or     eax,esi
c0015d86:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015d89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015d8d:	e9 84 00 00 00       	jmp    c0015e16 <Vm::faultHandler(regs*)+0x673>
c0015d92:	52                   	push   edx
c0015d93:	52                   	push   edx
c0015d94:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015d98:	50                   	push   eax
c0015d99:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d9d:	50                   	push   eax
c0015d9e:	e8 55 f5 ff ff       	call   c00152f8 <Vm::outbv(unsigned short, unsigned char)>
c0015da3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015da7:	eb 53                	jmp    c0015dfc <Vm::faultHandler(regs*)+0x659>
c0015da9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015dac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015db0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015db5:	74 03                	je     c0015dba <Vm::faultHandler(regs*)+0x617>
c0015db7:	ef                   	out    dx,eax
c0015db8:	eb cf                	jmp    c0015d89 <Vm::faultHandler(regs*)+0x5e6>
c0015dba:	66 ef                	out    dx,ax
c0015dbc:	eb cb                	jmp    c0015d89 <Vm::faultHandler(regs*)+0x5e6>
c0015dbe:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015dc5:	83 ec 0c             	sub    esp,0xc
c0015dc8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015dcc:	50                   	push   eax
c0015dcd:	e8 13 f5 ff ff       	call   c00152e5 <Vm::inbv(unsigned short)>
c0015dd2:	0f b6 c0             	movzx  eax,al
c0015dd5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015dd8:	eb 1f                	jmp    c0015df9 <Vm::faultHandler(regs*)+0x656>
c0015dda:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015ddd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015de2:	74 03                	je     c0015de7 <Vm::faultHandler(regs*)+0x644>
c0015de4:	ed                   	in     eax,dx
c0015de5:	eb 0d                	jmp    c0015df4 <Vm::faultHandler(regs*)+0x651>
c0015de7:	66 ed                	in     ax,dx
c0015de9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015dec:	0f b7 c0             	movzx  eax,ax
c0015def:	66 31 d2             	xor    dx,dx
c0015df2:	09 d0                	or     eax,edx
c0015df4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015df7:	eb 1a                	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015df9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015dfc:	83 c4 10             	add    esp,0x10
c0015dff:	eb 15                	jmp    c0015e16 <Vm::faultHandler(regs*)+0x673>
c0015e01:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015e04:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015e07:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015e0c:	74 03                	je     c0015e11 <Vm::faultHandler(regs*)+0x66e>
c0015e0e:	ef                   	out    dx,eax
c0015e0f:	eb 02                	jmp    c0015e13 <Vm::faultHandler(regs*)+0x670>
c0015e11:	66 ef                	out    dx,ax
c0015e13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e16:	b0 01                	mov    al,0x1
c0015e18:	eb 56                	jmp    c0015e70 <Vm::faultHandler(regs*)+0x6cd>
c0015e1a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e1e:	50                   	push   eax
c0015e1f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e23:	50                   	push   eax
c0015e24:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e28:	50                   	push   eax
c0015e29:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e2d:	50                   	push   eax
c0015e2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e32:	50                   	push   eax
c0015e33:	52                   	push   edx
c0015e34:	52                   	push   edx
c0015e35:	68 2f 07 02 c0       	push   0xc002072f
c0015e3a:	e8 bb 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015e3f:	83 c4 20             	add    esp,0x20
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	6a 60                	push   0x60
c0015e47:	e8 99 f4 ff ff       	call   c00152e5 <Vm::inbv(unsigned short)>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	3c 1c                	cmp    al,0x1c
c0015e51:	74 04                	je     c0015e57 <Vm::faultHandler(regs*)+0x6b4>
c0015e53:	3c 5a                	cmp    al,0x5a
c0015e55:	75 eb                	jne    c0015e42 <Vm::faultHandler(regs*)+0x69f>
c0015e57:	3c 1c                	cmp    al,0x1c
c0015e59:	74 04                	je     c0015e5f <Vm::faultHandler(regs*)+0x6bc>
c0015e5b:	3c 5a                	cmp    al,0x5a
c0015e5d:	75 0f                	jne    c0015e6e <Vm::faultHandler(regs*)+0x6cb>
c0015e5f:	83 ec 0c             	sub    esp,0xc
c0015e62:	6a 60                	push   0x60
c0015e64:	e8 7c f4 ff ff       	call   c00152e5 <Vm::inbv(unsigned short)>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	eb e9                	jmp    c0015e57 <Vm::faultHandler(regs*)+0x6b4>
c0015e6e:	31 c0                	xor    eax,eax
c0015e70:	83 c4 1c             	add    esp,0x1c
c0015e73:	5b                   	pop    ebx
c0015e74:	5e                   	pop    esi
c0015e75:	5f                   	pop    edi
c0015e76:	5d                   	pop    ebp
c0015e77:	c3                   	ret    

c0015e78 <noCopro(unsigned long)>:
c0015e78:	c3                   	ret    

c0015e79 <nmiHandler(regs*, void*)>:
c0015e79:	83 ec 0c             	sub    esp,0xc
c0015e7c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0015e81:	83 ec 0c             	sub    esp,0xc
c0015e84:	50                   	push   eax
c0015e85:	e8 fa 11 ff ff       	call   c0007084 <Computer::handleNMI()>
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	90                   	nop
c0015e8e:	83 c4 0c             	add    esp,0xc
c0015e91:	c3                   	ret    

c0015e92 <doubleFault(regs*, void*)>:
c0015e92:	55                   	push   ebp
c0015e93:	89 e5                	mov    ebp,esp
c0015e95:	83 ec 08             	sub    esp,0x8
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	68 8c 07 02 c0       	push   0xc002078c
c0015ea0:	e8 16 a5 ff ff       	call   c00103bb <KePanic(char const*)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	90                   	nop
c0015ea9:	c9                   	leave  
c0015eaa:	c3                   	ret    

c0015eab <displayDebugInfo(regs*)>:
c0015eab:	83 ec 1c             	sub    esp,0x1c
c0015eae:	0f 20 c0             	mov    eax,cr0
c0015eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eb5:	0f 20 d0             	mov    eax,cr2
c0015eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ebc:	0f 20 d8             	mov    eax,cr3
c0015ebf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ec3:	0f 20 e0             	mov    eax,cr4
c0015ec6:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ecd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015ed0:	83 ec 08             	sub    esp,0x8
c0015ed3:	50                   	push   eax
c0015ed4:	68 a8 07 02 c0       	push   0xc00207a8
c0015ed9:	e8 1c 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015ede:	83 c4 10             	add    esp,0x10
c0015ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015ee8:	83 ec 08             	sub    esp,0x8
c0015eeb:	50                   	push   eax
c0015eec:	68 99 07 02 c0       	push   0xc0020799
c0015ef1:	e8 04 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015ef6:	83 c4 10             	add    esp,0x10
c0015ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015efd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015f00:	83 ec 08             	sub    esp,0x8
c0015f03:	50                   	push   eax
c0015f04:	68 a4 07 02 c0       	push   0xc00207a4
c0015f09:	e8 ec 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015f18:	83 ec 08             	sub    esp,0x8
c0015f1b:	50                   	push   eax
c0015f1c:	68 b3 07 02 c0       	push   0xc00207b3
c0015f21:	e8 d4 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f2d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015f30:	83 ec 08             	sub    esp,0x8
c0015f33:	50                   	push   eax
c0015f34:	68 be 07 02 c0       	push   0xc00207be
c0015f39:	e8 bc 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	83 ec 08             	sub    esp,0x8
c0015f44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f48:	68 c9 07 02 c0       	push   0xc00207c9
c0015f4d:	e8 a8 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f52:	83 c4 10             	add    esp,0x10
c0015f55:	83 ec 08             	sub    esp,0x8
c0015f58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015f5c:	68 d4 07 02 c0       	push   0xc00207d4
c0015f61:	e8 94 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	50                   	push   eax
c0015f78:	e8 20 25 ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0015f7d:	83 c4 10             	add    esp,0x10
c0015f80:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f8b:	83 ec 08             	sub    esp,0x8
c0015f8e:	68 df 07 02 c0       	push   0xc00207df
c0015f93:	50                   	push   eax
c0015f94:	e8 43 28 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015f99:	83 c4 10             	add    esp,0x10
c0015f9c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fa1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fab:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0015fae:	83 ec 08             	sub    esp,0x8
c0015fb1:	52                   	push   edx
c0015fb2:	50                   	push   eax
c0015fb3:	e8 de 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0015fb8:	83 c4 10             	add    esp,0x10
c0015fbb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fc6:	83 ec 08             	sub    esp,0x8
c0015fc9:	68 ed 07 02 c0       	push   0xc00207ed
c0015fce:	50                   	push   eax
c0015fcf:	e8 08 28 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015fd4:	83 c4 10             	add    esp,0x10
c0015fd7:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fe2:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015fe7:	8b 12                	mov    edx,DWORD PTR [edx]
c0015fe9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015fec:	83 c2 0c             	add    edx,0xc
c0015fef:	83 ec 08             	sub    esp,0x8
c0015ff2:	52                   	push   edx
c0015ff3:	50                   	push   eax
c0015ff4:	e8 e3 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015ff9:	83 c4 10             	add    esp,0x10
c0015ffc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016001:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016007:	83 ec 08             	sub    esp,0x8
c001600a:	68 f6 07 02 c0       	push   0xc00207f6
c001600f:	50                   	push   eax
c0016010:	e8 c7 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016015:	83 c4 10             	add    esp,0x10
c0016018:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001601d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016023:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016027:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001602a:	83 ec 08             	sub    esp,0x8
c001602d:	52                   	push   edx
c001602e:	50                   	push   eax
c001602f:	e8 62 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001603c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016042:	83 ec 08             	sub    esp,0x8
c0016045:	68 fe 07 02 c0       	push   0xc00207fe
c001604a:	50                   	push   eax
c001604b:	e8 8c 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016058:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001605e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016062:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016065:	83 ec 08             	sub    esp,0x8
c0016068:	52                   	push   edx
c0016069:	50                   	push   eax
c001606a:	e8 27 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001606f:	83 c4 10             	add    esp,0x10
c0016072:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016077:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001607d:	83 ec 08             	sub    esp,0x8
c0016080:	68 06 08 02 c0       	push   0xc0020806
c0016085:	50                   	push   eax
c0016086:	e8 51 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016093:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016099:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001609d:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00160a0:	83 ec 08             	sub    esp,0x8
c00160a3:	52                   	push   edx
c00160a4:	50                   	push   eax
c00160a5:	e8 ec 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00160aa:	83 c4 10             	add    esp,0x10
c00160ad:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160b8:	83 ec 08             	sub    esp,0x8
c00160bb:	68 0e 08 02 c0       	push   0xc002080e
c00160c0:	50                   	push   eax
c00160c1:	e8 16 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00160c6:	83 c4 10             	add    esp,0x10
c00160c9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160d8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00160db:	83 ec 08             	sub    esp,0x8
c00160de:	52                   	push   edx
c00160df:	50                   	push   eax
c00160e0:	e8 b1 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00160e5:	83 c4 10             	add    esp,0x10
c00160e8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160f3:	83 ec 08             	sub    esp,0x8
c00160f6:	68 16 08 02 c0       	push   0xc0020816
c00160fb:	50                   	push   eax
c00160fc:	e8 db 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016109:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001610f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016113:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016116:	83 ec 08             	sub    esp,0x8
c0016119:	52                   	push   edx
c001611a:	50                   	push   eax
c001611b:	e8 76 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016120:	83 c4 10             	add    esp,0x10
c0016123:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016128:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001612e:	83 ec 08             	sub    esp,0x8
c0016131:	68 1e 08 02 c0       	push   0xc002081e
c0016136:	50                   	push   eax
c0016137:	e8 a0 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016144:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001614a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001614e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016151:	83 ec 08             	sub    esp,0x8
c0016154:	52                   	push   edx
c0016155:	50                   	push   eax
c0016156:	e8 3b 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001615b:	83 c4 10             	add    esp,0x10
c001615e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016163:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016169:	83 ec 08             	sub    esp,0x8
c001616c:	68 26 08 02 c0       	push   0xc0020826
c0016171:	50                   	push   eax
c0016172:	e8 65 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016177:	83 c4 10             	add    esp,0x10
c001617a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001617f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016185:	83 ec 08             	sub    esp,0x8
c0016188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001618c:	50                   	push   eax
c001618d:	e8 04 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001619a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161a0:	83 ec 08             	sub    esp,0x8
c00161a3:	68 2f 08 02 c0       	push   0xc002082f
c00161a8:	50                   	push   eax
c00161a9:	e8 2e 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00161ae:	83 c4 10             	add    esp,0x10
c00161b1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161bc:	83 ec 08             	sub    esp,0x8
c00161bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161c3:	50                   	push   eax
c00161c4:	e8 cd 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00161c9:	83 c4 10             	add    esp,0x10
c00161cc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161d7:	83 ec 08             	sub    esp,0x8
c00161da:	68 37 08 02 c0       	push   0xc0020837
c00161df:	50                   	push   eax
c00161e0:	e8 f7 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161f3:	83 ec 08             	sub    esp,0x8
c00161f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00161fa:	50                   	push   eax
c00161fb:	e8 96 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016200:	83 c4 10             	add    esp,0x10
c0016203:	fa                   	cli    
c0016204:	f4                   	hlt    
c0016205:	eb fe                	jmp    c0016205 <displayDebugInfo(regs*)+0x35a>

c0016207 <HalSystemIdle()>:
c0016207:	56                   	push   esi
c0016208:	53                   	push   ebx
c0016209:	83 ec 14             	sub    esp,0x14
c001620c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016211:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016217:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001621d:	83 e0 04             	and    eax,0x4
c0016220:	84 c0                	test   al,al
c0016222:	0f 95 c0             	setne  al
c0016225:	84 c0                	test   al,al
c0016227:	74 4c                	je     c0016275 <HalSystemIdle()+0x6e>
c0016229:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001622e:	83 ec 08             	sub    esp,0x8
c0016231:	68 e1 00 00 00       	push   0xe1
c0016236:	50                   	push   eax
c0016237:	e8 60 0c ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016247:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001624c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016250:	83 e2 02             	and    edx,0x2
c0016253:	89 d3                	mov    ebx,edx
c0016255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016259:	83 e2 00             	and    edx,0x0
c001625c:	89 d6                	mov    esi,edx
c001625e:	56                   	push   esi
c001625f:	53                   	push   ebx
c0016260:	68 e1 00 00 00       	push   0xe1
c0016265:	50                   	push   eax
c0016266:	e8 5d 0c ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001626b:	83 c4 10             	add    esp,0x10
c001626e:	e8 21 9f fe ff       	call   c0000194 <doTPAUSE>
c0016273:	eb 01                	jmp    c0016276 <HalSystemIdle()+0x6f>
c0016275:	f4                   	hlt    
c0016276:	90                   	nop
c0016277:	83 c4 14             	add    esp,0x14
c001627a:	5b                   	pop    ebx
c001627b:	5e                   	pop    esi
c001627c:	c3                   	ret    

c001627d <displayProgramFault(char const*)>:
c001627d:	83 ec 0c             	sub    esp,0xc
c0016280:	83 ec 0c             	sub    esp,0xc
c0016283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016287:	e8 6e 43 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016294:	8b 00                	mov    eax,DWORD PTR [eax]
c0016296:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016299:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001629f:	85 c0                	test   eax,eax
c00162a1:	74 21                	je     c00162c4 <displayProgramFault(char const*)+0x47>
c00162a3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00162a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00162aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162b3:	6a 04                	push   0x4
c00162b5:	6a 0f                	push   0xf
c00162b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162bb:	50                   	push   eax
c00162bc:	e8 8d 25 ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	90                   	nop
c00162c5:	83 c4 0c             	add    esp,0xc
c00162c8:	c3                   	ret    

c00162c9 <gpFault(regs*, void*)>:
c00162c9:	83 ec 1c             	sub    esp,0x1c
c00162cc:	c7 05 10 72 02 c0 a3 57 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc00157a3
c00162d6:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00162db:	85 c0                	test   eax,eax
c00162dd:	74 1c                	je     c00162fb <gpFault(regs*, void*)+0x32>
c00162df:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162eb:	ff d0                	call   eax
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00162f9:	75 2e                	jne    c0016329 <gpFault(regs*, void*)+0x60>
c00162fb:	83 ec 0c             	sub    esp,0xc
c00162fe:	68 3f 08 02 c0       	push   0xc002083f
c0016303:	e8 75 ff ff ff       	call   c001627d <displayProgramFault(char const*)>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	83 ec 0c             	sub    esp,0xc
c001630e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016312:	e8 94 fb ff ff       	call   c0015eab <displayDebugInfo(regs*)>
c0016317:	83 c4 10             	add    esp,0x10
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	6a 00                	push   0x0
c001631f:	e8 74 ee ff ff       	call   c0015198 <Thr::terminateFromIRQ(int)>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	eb 01                	jmp    c001632a <gpFault(regs*, void*)+0x61>
c0016329:	90                   	nop
c001632a:	83 c4 1c             	add    esp,0x1c
c001632d:	c3                   	ret    

c001632e <pgFault(regs*, void*)>:
c001632e:	83 ec 1c             	sub    esp,0x1c
c0016331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016335:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016338:	0f 20 d0             	mov    eax,cr2
c001633b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001633f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016343:	83 ec 04             	sub    esp,0x4
c0016346:	52                   	push   edx
c0016347:	50                   	push   eax
c0016348:	68 1c 09 02 c0       	push   0xc002091c
c001634d:	e8 a8 42 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001635a:	8b 00                	mov    eax,DWORD PTR [eax]
c001635c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001635f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016365:	0f 20 d2             	mov    edx,cr2
c0016368:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001636c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016370:	83 ec 08             	sub    esp,0x8
c0016373:	52                   	push   edx
c0016374:	50                   	push   eax
c0016375:	e8 76 3e ff ff       	call   c000a1f0 <VAS::tryLoadBackOffDisk(unsigned long)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	84 c0                	test   al,al
c001637f:	75 2e                	jne    c00163af <pgFault(regs*, void*)+0x81>
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	68 58 08 02 c0       	push   0xc0020858
c0016389:	e8 ef fe ff ff       	call   c001627d <displayProgramFault(char const*)>
c001638e:	83 c4 10             	add    esp,0x10
c0016391:	83 ec 0c             	sub    esp,0xc
c0016394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016398:	e8 0e fb ff ff       	call   c0015eab <displayDebugInfo(regs*)>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	6a 00                	push   0x0
c00163a5:	e8 ee ed ff ff       	call   c0015198 <Thr::terminateFromIRQ(int)>
c00163aa:	83 c4 10             	add    esp,0x10
c00163ad:	eb 01                	jmp    c00163b0 <pgFault(regs*, void*)+0x82>
c00163af:	90                   	nop
c00163b0:	83 c4 1c             	add    esp,0x1c
c00163b3:	c3                   	ret    

c00163b4 <otherISRHandler(regs*, void*)>:
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	83 ec 0c             	sub    esp,0xc
c00163ba:	68 44 09 02 c0       	push   0xc0020944
c00163bf:	e8 b9 fe ff ff       	call   c001627d <displayProgramFault(char const*)>
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	83 ec 0c             	sub    esp,0xc
c00163ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ce:	e8 d8 fa ff ff       	call   c0015eab <displayDebugInfo(regs*)>
c00163d3:	83 c4 10             	add    esp,0x10
c00163d6:	83 ec 0c             	sub    esp,0xc
c00163d9:	6a 00                	push   0x0
c00163db:	e8 b8 ed ff ff       	call   c0015198 <Thr::terminateFromIRQ(int)>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	90                   	nop
c00163e4:	83 c4 0c             	add    esp,0xc
c00163e7:	c3                   	ret    

c00163e8 <opcodeFault(regs*, void*)>:
c00163e8:	55                   	push   ebp
c00163e9:	89 e5                	mov    ebp,esp
c00163eb:	83 ec 08             	sub    esp,0x8
c00163ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00163f4:	83 ec 08             	sub    esp,0x8
c00163f7:	50                   	push   eax
c00163f8:	68 63 08 02 c0       	push   0xc0020863
c00163fd:	e8 f8 41 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016402:	83 c4 10             	add    esp,0x10
c0016405:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001640a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016410:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016416:	84 c0                	test   al,al
c0016418:	74 21                	je     c001643b <opcodeFault(regs*, void*)+0x53>
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	68 6c 09 02 c0       	push   0xc002096c
c0016422:	e8 d3 41 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001642d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016430:	8d 50 19             	lea    edx,[eax+0x19]
c0016433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016439:	eb 2b                	jmp    c0016466 <opcodeFault(regs*, void*)+0x7e>
c001643b:	83 ec 0c             	sub    esp,0xc
c001643e:	68 71 08 02 c0       	push   0xc0020871
c0016443:	e8 35 fe ff ff       	call   c001627d <displayProgramFault(char const*)>
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	83 ec 0c             	sub    esp,0xc
c001644e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016451:	e8 55 fa ff ff       	call   c0015eab <displayDebugInfo(regs*)>
c0016456:	83 c4 10             	add    esp,0x10
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	6a 00                	push   0x0
c001645e:	e8 35 ed ff ff       	call   c0015198 <Thr::terminateFromIRQ(int)>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	c9                   	leave  
c0016467:	c3                   	ret    

c0016468 <i386SaveCoprocessor(void*)>:
c0016468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001646c:	83 c0 3f             	add    eax,0x3f
c001646f:	83 e0 c0             	and    eax,0xffffffc0
c0016472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016476:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c001647c <i386LoadCoprocessor(void*)>:
c001647c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016480:	83 c0 3f             	add    eax,0x3f
c0016483:	83 e0 c0             	and    eax,0xffffffc0
c0016486:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001648a:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c0016490 <x87EmulHandler(regs*, void*)>:
c0016490:	53                   	push   ebx
c0016491:	83 ec 08             	sub    esp,0x8
c0016494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016499:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001649d:	74 10                	je     c00164af <x87EmulHandler(regs*, void*)+0x1f>
c001649f:	83 ec 0c             	sub    esp,0xc
c00164a2:	68 7e 08 02 c0       	push   0xc002087e
c00164a7:	e8 0f 9f ff ff       	call   c00103bb <KePanic(char const*)>
c00164ac:	83 c4 10             	add    esp,0x10
c00164af:	0f 20 c0             	mov    eax,cr0
c00164b2:	a8 08                	test   al,0x8
c00164b4:	74 59                	je     c001650f <x87EmulHandler(regs*, void*)+0x7f>
c00164b6:	0f 06                	clts   
c00164b8:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00164bd:	85 c0                	test   eax,eax
c00164bf:	74 0e                	je     c00164cf <x87EmulHandler(regs*, void*)+0x3f>
c00164c1:	83 ec 0c             	sub    esp,0xc
c00164c4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00164c7:	e8 9c ff ff ff       	call   c0016468 <i386SaveCoprocessor(void*)>
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00164d5:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00164d9:	75 12                	jne    c00164ed <x87EmulHandler(regs*, void*)+0x5d>
c00164db:	83 ec 0c             	sub    esp,0xc
c00164de:	68 40 02 00 00       	push   0x240
c00164e3:	e8 7d 13 ff ff       	call   c0007865 <malloc>
c00164e8:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00164eb:	eb 10                	jmp    c00164fd <x87EmulHandler(regs*, void*)+0x6d>
c00164ed:	83 ec 0c             	sub    esp,0xc
c00164f0:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00164f5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00164f8:	e8 7f ff ff ff       	call   c001647c <i386LoadCoprocessor(void*)>
c00164fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016502:	83 c4 10             	add    esp,0x10
c0016505:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c001650a:	83 c4 08             	add    esp,0x8
c001650d:	5b                   	pop    ebx
c001650e:	c3                   	ret    
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	68 92 08 02 c0       	push   0xc0020892
c0016517:	e8 de 40 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001651c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016524:	83 c4 18             	add    esp,0x18
c0016527:	5b                   	pop    ebx
c0016528:	e9 6b ec ff ff       	jmp    c0015198 <Thr::terminateFromIRQ(int)>

c001652d <HalInitialiseCoprocessor()>:
c001652d:	83 ec 10             	sub    esp,0x10
c0016530:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001653a:	6a 00                	push   0x0
c001653c:	68 90 64 01 c0       	push   0xc0016490
c0016541:	6a 07                	push   0x7
c0016543:	e8 24 5a ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016548:	e8 53 6e 00 00       	call   c001d3a0 <avxDetect>
c001654d:	83 c4 10             	add    esp,0x10
c0016550:	85 c0                	test   eax,eax
c0016552:	74 1c                	je     c0016570 <HalInitialiseCoprocessor()+0x43>
c0016554:	c7 05 0c 72 02 c0 ca d3 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d3ca
c001655e:	c7 05 08 72 02 c0 db d3 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d3db
c0016568:	83 c4 0c             	add    esp,0xc
c001656b:	e9 7c 6e 00 00       	jmp    c001d3ec <avxInit>
c0016570:	e8 bb 71 00 00       	call   c001d730 <absolutelyNoChanceInHell>
c0016575:	85 c0                	test   eax,eax
c0016577:	74 1c                	je     c0016595 <HalInitialiseCoprocessor()+0x68>
c0016579:	c7 05 0c 72 02 c0 48 d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d748
c0016583:	c7 05 08 72 02 c0 50 d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d750
c001658d:	83 c4 0c             	add    esp,0xc
c0016590:	e9 c3 71 00 00       	jmp    c001d758 <sseInit>
c0016595:	e8 dc 71 00 00       	call   c001d776 <x87Detect>
c001659a:	85 c0                	test   eax,eax
c001659c:	74 1c                	je     c00165ba <HalInitialiseCoprocessor()+0x8d>
c001659e:	c7 05 0c 72 02 c0 91 d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d791
c00165a8:	c7 05 08 72 02 c0 98 d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d798
c00165b2:	83 c4 0c             	add    esp,0xc
c00165b5:	e9 e5 71 00 00       	jmp    c001d79f <x87Init>
c00165ba:	c7 05 0c 72 02 c0 78 5e 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc0015e78
c00165c4:	c7 05 08 72 02 c0 78 5e 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc0015e78
c00165ce:	0f 20 c0             	mov    eax,cr0
c00165d1:	83 c8 04             	or     eax,0x4
c00165d4:	0f 22 c0             	mov    cr0,eax
c00165d7:	83 c4 0c             	add    esp,0xc
c00165da:	c3                   	ret    

c00165db <HalPanic(char const*)>:
c00165db:	53                   	push   ebx
c00165dc:	83 ec 10             	sub    esp,0x10
c00165df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165e3:	fa                   	cli    
c00165e4:	53                   	push   ebx
c00165e5:	68 a8 08 02 c0       	push   0xc00208a8
c00165ea:	e8 0b 40 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00165ef:	83 c4 0c             	add    esp,0xc
c00165f2:	6a 01                	push   0x1
c00165f4:	6a 0f                	push   0xf
c00165f6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00165fc:	e8 f5 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016601:	58                   	pop    eax
c0016602:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016608:	e8 db 1e ff ff       	call   c00084e8 <VgaText::clearScreen()>
c001660d:	5a                   	pop    edx
c001660e:	59                   	pop    ecx
c001660f:	68 e4 f1 01 c0       	push   0xc001f1e4
c0016614:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001661a:	e8 0f 1d ff ff       	call   c000832e <VgaText::setTitle(char*)>
c001661f:	83 c4 0c             	add    esp,0xc
c0016622:	6a 01                	push   0x1
c0016624:	6a 0f                	push   0xf
c0016626:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001662c:	e8 c5 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016631:	58                   	pop    eax
c0016632:	5a                   	pop    edx
c0016633:	68 c1 08 02 c0       	push   0xc00208c1
c0016638:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001663e:	e8 99 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016643:	83 c4 0c             	add    esp,0xc
c0016646:	6a 0f                	push   0xf
c0016648:	6a 01                	push   0x1
c001664a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016650:	e8 a1 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016655:	59                   	pop    ecx
c0016656:	58                   	pop    eax
c0016657:	68 ca 08 02 c0       	push   0xc00208ca
c001665c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016662:	e8 75 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016667:	83 c4 0c             	add    esp,0xc
c001666a:	6a 01                	push   0x1
c001666c:	6a 0f                	push   0xf
c001666e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016674:	e8 7d 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016679:	58                   	pop    eax
c001667a:	5a                   	pop    edx
c001667b:	68 0e 09 02 c0       	push   0xc002090e
c0016680:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016686:	e8 51 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001668b:	59                   	pop    ecx
c001668c:	58                   	pop    eax
c001668d:	68 d7 08 02 c0       	push   0xc00208d7
c0016692:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016698:	e8 3f 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001669d:	58                   	pop    eax
c001669e:	5a                   	pop    edx
c001669f:	68 11 09 02 c0       	push   0xc0020911
c00166a4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166aa:	e8 2d 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166af:	59                   	pop    ecx
c00166b0:	58                   	pop    eax
c00166b1:	53                   	push   ebx
c00166b2:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166b8:	e8 1f 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166bd:	58                   	pop    eax
c00166be:	5a                   	pop    edx
c00166bf:	68 0e 09 02 c0       	push   0xc002090e
c00166c4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166ca:	e8 0d 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	eb fe                	jmp    c00166d2 <HalPanic(char const*)+0xf7>

c00166d4 <HalQueryPerformanceCounter()>:
c00166d4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166d9:	31 d2                	xor    edx,edx
c00166db:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00166e1:	31 c0                	xor    eax,eax
c00166e3:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00166ea:	74 02                	je     c00166ee <HalQueryPerformanceCounter()+0x1a>
c00166ec:	0f 31                	rdtsc  
c00166ee:	c3                   	ret    

c00166ef <HalInitialise()>:
c00166ef:	53                   	push   ebx
c00166f0:	83 ec 08             	sub    esp,0x8
c00166f3:	e8 a7 5a ff ff       	call   c000c19f <setupINTS()>
c00166f8:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c00166ff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016704:	75 07                	jne    c001670d <HalInitialise()+0x1e>
c0016706:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001670d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016714:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c001671b:	e8 a8 02 00 00       	call   c00169c8 <picOpen()>
c0016720:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016727:	74 0a                	je     c0016733 <HalInitialise()+0x44>
c0016729:	e8 e2 01 00 00       	call   c0016910 <picDisable()>
c001672e:	e8 e3 65 00 00       	call   c001cd16 <apicOpen()>
c0016733:	bb 0f 00 00 00       	mov    ebx,0xf
c0016738:	50                   	push   eax
c0016739:	6a 00                	push   0x0
c001673b:	68 b4 63 01 c0       	push   0xc00163b4
c0016740:	6a 00                	push   0x0
c0016742:	e8 25 58 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016747:	83 c4 0c             	add    esp,0xc
c001674a:	6a 00                	push   0x0
c001674c:	68 b4 63 01 c0       	push   0xc00163b4
c0016751:	6a 01                	push   0x1
c0016753:	e8 14 58 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016758:	83 c4 0c             	add    esp,0xc
c001675b:	6a 00                	push   0x0
c001675d:	68 79 5e 01 c0       	push   0xc0015e79
c0016762:	6a 02                	push   0x2
c0016764:	e8 03 58 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016769:	83 c4 0c             	add    esp,0xc
c001676c:	6a 00                	push   0x0
c001676e:	68 b4 63 01 c0       	push   0xc00163b4
c0016773:	6a 03                	push   0x3
c0016775:	e8 f2 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001677a:	83 c4 0c             	add    esp,0xc
c001677d:	6a 00                	push   0x0
c001677f:	68 b4 63 01 c0       	push   0xc00163b4
c0016784:	6a 04                	push   0x4
c0016786:	e8 e1 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001678b:	83 c4 0c             	add    esp,0xc
c001678e:	6a 00                	push   0x0
c0016790:	68 b4 63 01 c0       	push   0xc00163b4
c0016795:	6a 05                	push   0x5
c0016797:	e8 d0 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001679c:	83 c4 0c             	add    esp,0xc
c001679f:	6a 00                	push   0x0
c00167a1:	68 e8 63 01 c0       	push   0xc00163e8
c00167a6:	6a 06                	push   0x6
c00167a8:	e8 bf 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	6a 00                	push   0x0
c00167b2:	68 92 5e 01 c0       	push   0xc0015e92
c00167b7:	6a 08                	push   0x8
c00167b9:	e8 ae 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167be:	83 c4 0c             	add    esp,0xc
c00167c1:	6a 00                	push   0x0
c00167c3:	68 b4 63 01 c0       	push   0xc00163b4
c00167c8:	6a 09                	push   0x9
c00167ca:	e8 9d 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167cf:	83 c4 0c             	add    esp,0xc
c00167d2:	6a 00                	push   0x0
c00167d4:	68 b4 63 01 c0       	push   0xc00163b4
c00167d9:	6a 0a                	push   0xa
c00167db:	e8 8c 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167e0:	83 c4 0c             	add    esp,0xc
c00167e3:	6a 00                	push   0x0
c00167e5:	68 b4 63 01 c0       	push   0xc00163b4
c00167ea:	6a 0b                	push   0xb
c00167ec:	e8 7b 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167f1:	83 c4 0c             	add    esp,0xc
c00167f4:	6a 00                	push   0x0
c00167f6:	68 c9 62 01 c0       	push   0xc00162c9
c00167fb:	6a 0d                	push   0xd
c00167fd:	e8 6a 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016802:	83 c4 0c             	add    esp,0xc
c0016805:	6a 00                	push   0x0
c0016807:	68 2e 63 01 c0       	push   0xc001632e
c001680c:	6a 0e                	push   0xe
c001680e:	e8 59 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	50                   	push   eax
c0016817:	6a 00                	push   0x0
c0016819:	68 b4 63 01 c0       	push   0xc00163b4
c001681e:	53                   	push   ebx
c001681f:	43                   	inc    ebx
c0016820:	e8 47 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	83 fb 1e             	cmp    ebx,0x1e
c001682b:	75 e9                	jne    c0016816 <HalInitialise()+0x127>
c001682d:	50                   	push   eax
c001682e:	6a 00                	push   0x0
c0016830:	68 a6 15 01 c0       	push   0xc00115a6
c0016835:	6a 60                	push   0x60
c0016837:	e8 30 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001683c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016841:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001684b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016852:	e8 0e 10 ff ff       	call   c0007865 <malloc>
c0016857:	89 04 24             	mov    DWORD PTR [esp],eax
c001685a:	89 c3                	mov    ebx,eax
c001685c:	e8 2f 09 00 00       	call   c0017190 <RTC::RTC()>
c0016861:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001686b:	5a                   	pop    edx
c001686c:	59                   	pop    ecx
c001686d:	53                   	push   ebx
c001686e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016874:	e8 bf 51 ff ff       	call   c000ba38 <Device::addChild(Device*)>
c0016879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687b:	6a 00                	push   0x0
c001687d:	6a 00                	push   0x0
c001687f:	6a 00                	push   0x0
c0016881:	53                   	push   ebx
c0016882:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016885:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001688a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016890:	83 c4 28             	add    esp,0x28
c0016893:	5b                   	pop    ebx
c0016894:	c3                   	ret    

c0016895 <HalMakeBeep(int)>:
c0016895:	53                   	push   ebx
c0016896:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001689a:	85 db                	test   ebx,ebx
c001689c:	75 07                	jne    c00168a5 <HalMakeBeep(int)+0x10>
c001689e:	e4 61                	in     al,0x61
c00168a0:	83 e0 fc             	and    eax,0xfffffffc
c00168a3:	eb 26                	jmp    c00168cb <HalMakeBeep(int)+0x36>
c00168a5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00168aa:	99                   	cdq    
c00168ab:	f7 fb                	idiv   ebx
c00168ad:	89 c1                	mov    ecx,eax
c00168af:	b0 b6                	mov    al,0xb6
c00168b1:	e6 43                	out    0x43,al
c00168b3:	88 c8                	mov    al,cl
c00168b5:	e6 42                	out    0x42,al
c00168b7:	89 c8                	mov    eax,ecx
c00168b9:	c1 e8 08             	shr    eax,0x8
c00168bc:	e6 42                	out    0x42,al
c00168be:	e4 61                	in     al,0x61
c00168c0:	88 c2                	mov    dl,al
c00168c2:	83 ca 03             	or     edx,0x3
c00168c5:	38 c2                	cmp    dl,al
c00168c7:	74 04                	je     c00168cd <HalMakeBeep(int)+0x38>
c00168c9:	88 d0                	mov    al,dl
c00168cb:	e6 61                	out    0x61,al
c00168cd:	5b                   	pop    ebx
c00168ce:	c3                   	ret    

c00168cf <HalGetRand()>:
c00168cf:	31 c0                	xor    eax,eax
c00168d1:	c3                   	ret    

c00168d2 <HalEndOfInterrupt(int)>:
c00168d2:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c00168d9:	74 23                	je     c00168fe <HalEndOfInterrupt(int)+0x2c>
c00168db:	83 ec 14             	sub    esp,0x14
c00168de:	6a 1b                	push   0x1b
c00168e0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00168e6:	e8 b1 05 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c00168eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00168f0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00168fa:	83 c4 1c             	add    esp,0x1c
c00168fd:	c3                   	ret    
c00168fe:	e9 55 02 00 00       	jmp    c0016b58 <picEOI(int)>

c0016903 <HalRestart()>:
c0016903:	c3                   	ret    

c0016904 <HalShutdown()>:
c0016904:	c3                   	ret    

c0016905 <HalSleep()>:
c0016905:	c3                   	ret    
c0016906:	66 90                	xchg   ax,ax

c0016908 <picIoWait()>:
c0016908:	eb 00                	jmp    c001690a <picIoWait()+0x2>
c001690a:	eb 00                	jmp    c001690c <picIoWait()+0x4>
c001690c:	90                   	nop
c001690d:	c3                   	ret    
c001690e:	66 90                	xchg   ax,ax

c0016910 <picDisable()>:
c0016910:	83 ec 10             	sub    esp,0x10
c0016913:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001691a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001691f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016923:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016928:	ee                   	out    dx,al
c0016929:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016930:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016935:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016939:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001693e:	ee                   	out    dx,al
c001693f:	90                   	nop
c0016940:	83 c4 10             	add    esp,0x10
c0016943:	c3                   	ret    

c0016944 <picGetIRQReg(int)>:
c0016944:	83 ec 10             	sub    esp,0x10
c0016947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001694b:	25 ff 00 00 00       	and    eax,0xff
c0016950:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016957:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001695b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001695f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016964:	ee                   	out    dx,al
c0016965:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016969:	25 ff 00 00 00       	and    eax,0xff
c001696e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016975:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016979:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001697d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016982:	ee                   	out    dx,al
c0016983:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001698a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001698f:	89 c2                	mov    edx,eax
c0016991:	ec                   	in     al,dx
c0016992:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016996:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001699a:	25 ff 00 00 00       	and    eax,0xff
c001699f:	c1 e0 08             	shl    eax,0x8
c00169a2:	89 c1                	mov    ecx,eax
c00169a4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00169ab:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00169b0:	89 c2                	mov    edx,eax
c00169b2:	ec                   	in     al,dx
c00169b3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00169b7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00169bb:	25 ff 00 00 00       	and    eax,0xff
c00169c0:	09 c8                	or     eax,ecx
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	c3                   	ret    
c00169c6:	66 90                	xchg   ax,ax

c00169c8 <picOpen()>:
c00169c8:	83 ec 50             	sub    esp,0x50
c00169cb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00169d2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00169d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00169db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00169df:	ee                   	out    dx,al
c00169e0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00169e7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00169ec:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00169f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169f4:	ee                   	out    dx,al
c00169f5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00169fd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016a05:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016a0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a10:	89 c2                	mov    edx,eax
c0016a12:	ec                   	in     al,dx
c0016a13:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016a17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016a1b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016a1f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016a26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a2a:	89 c2                	mov    edx,eax
c0016a2c:	ec                   	in     al,dx
c0016a2d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016a31:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016a35:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016a39:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016a40:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016a45:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016a49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a4d:	ee                   	out    dx,al
c0016a4e:	e8 b5 fe ff ff       	call   c0016908 <picIoWait()>
c0016a53:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016a5a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016a5f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a67:	ee                   	out    dx,al
c0016a68:	e8 9b fe ff ff       	call   c0016908 <picIoWait()>
c0016a6d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a71:	25 ff 00 00 00       	and    eax,0xff
c0016a76:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016a7d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016a81:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016a85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a89:	ee                   	out    dx,al
c0016a8a:	e8 79 fe ff ff       	call   c0016908 <picIoWait()>
c0016a8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a93:	25 ff 00 00 00       	and    eax,0xff
c0016a98:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016a9f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016aa3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016aa7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016aab:	ee                   	out    dx,al
c0016aac:	e8 57 fe ff ff       	call   c0016908 <picIoWait()>
c0016ab1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016ab8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016abd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016ac1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ac5:	ee                   	out    dx,al
c0016ac6:	e8 3d fe ff ff       	call   c0016908 <picIoWait()>
c0016acb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016ad2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016ad7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016adb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016adf:	ee                   	out    dx,al
c0016ae0:	e8 23 fe ff ff       	call   c0016908 <picIoWait()>
c0016ae5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016aec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016af1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016af5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016af9:	ee                   	out    dx,al
c0016afa:	e8 09 fe ff ff       	call   c0016908 <picIoWait()>
c0016aff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016b06:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016b0b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016b0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b13:	ee                   	out    dx,al
c0016b14:	e8 ef fd ff ff       	call   c0016908 <picIoWait()>
c0016b19:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016b1d:	25 ff 00 00 00       	and    eax,0xff
c0016b22:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016b29:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016b2d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016b31:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016b35:	ee                   	out    dx,al
c0016b36:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016b3a:	25 ff 00 00 00       	and    eax,0xff
c0016b3f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016b46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016b4a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016b4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016b52:	ee                   	out    dx,al
c0016b53:	90                   	nop
c0016b54:	83 c4 50             	add    esp,0x50
c0016b57:	c3                   	ret    

c0016b58 <picEOI(int)>:
c0016b58:	83 ec 10             	sub    esp,0x10
c0016b5b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016b60:	75 22                	jne    c0016b84 <picEOI(int)+0x2c>
c0016b62:	6a 0b                	push   0xb
c0016b64:	e8 db fd ff ff       	call   c0016944 <picGetIRQReg(int)>
c0016b69:	83 c4 04             	add    esp,0x4
c0016b6c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016b71:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016b76:	25 ff ff 00 00       	and    eax,0xffff
c0016b7b:	25 80 00 00 00       	and    eax,0x80
c0016b80:	74 72                	je     c0016bf4 <picEOI(int)+0x9c>
c0016b82:	66 90                	xchg   ax,ax
c0016b84:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016b89:	75 31                	jne    c0016bbc <picEOI(int)+0x64>
c0016b8b:	6a 0b                	push   0xb
c0016b8d:	e8 b2 fd ff ff       	call   c0016944 <picGetIRQReg(int)>
c0016b92:	83 c4 04             	add    esp,0x4
c0016b95:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016b9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b9e:	66 85 c0             	test   ax,ax
c0016ba1:	78 19                	js     c0016bbc <picEOI(int)+0x64>
c0016ba3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016baa:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016baf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016bb3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016bb8:	ee                   	out    dx,al
c0016bb9:	eb 3d                	jmp    c0016bf8 <picEOI(int)+0xa0>
c0016bbb:	90                   	nop
c0016bbc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016bc1:	7e 19                	jle    c0016bdc <picEOI(int)+0x84>
c0016bc3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016bca:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016bcf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016bd3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016bd8:	ee                   	out    dx,al
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bdc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016be3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016be8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016bec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016bf1:	ee                   	out    dx,al
c0016bf2:	eb 04                	jmp    c0016bf8 <picEOI(int)+0xa0>
c0016bf4:	90                   	nop
c0016bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	c3                   	ret    

c0016bfc <RTC::open(int, int, void*)>:
c0016bfc:	31 c0                	xor    eax,eax
c0016bfe:	c3                   	ret    
c0016bff:	90                   	nop

c0016c00 <RTC::close(int, int, void*)>:
c0016c00:	31 c0                	xor    eax,eax
c0016c02:	c3                   	ret    
c0016c03:	90                   	nop

c0016c04 <RTC::timeInSecondsUTC()>:
c0016c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c14:	c3                   	ret    
c0016c15:	90                   	nop

c0016c16 <RTC::timeInDatetimeUTC()>:
c0016c16:	53                   	push   ebx
c0016c17:	83 ec 14             	sub    esp,0x14
c0016c1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c22:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c24:	50                   	push   eax
c0016c25:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c28:	83 c4 0c             	add    esp,0xc
c0016c2b:	52                   	push   edx
c0016c2c:	50                   	push   eax
c0016c2d:	53                   	push   ebx
c0016c2e:	e8 79 4b ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c0016c33:	89 d8                	mov    eax,ebx
c0016c35:	83 c4 14             	add    esp,0x14
c0016c38:	5b                   	pop    ebx
c0016c39:	c2 04 00             	ret    0x4

c0016c3c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016c3c:	56                   	push   esi
c0016c3d:	53                   	push   ebx
c0016c3e:	83 ec 14             	sub    esp,0x14
c0016c41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016c45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c47:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016c4a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c4e:	52                   	push   edx
c0016c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c57:	50                   	push   eax
c0016c58:	e8 4f 4b ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c0016c5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c69:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016c6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c71:	89 f0                	mov    eax,esi
c0016c73:	83 c4 20             	add    esp,0x20
c0016c76:	5b                   	pop    ebx
c0016c77:	5e                   	pop    esi
c0016c78:	ff e0                	jmp    eax

c0016c7a <RTC::~RTC()>:
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c0016c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c86:	89 10                	mov    DWORD PTR [eax],edx
c0016c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	50                   	push   eax
c0016c90:	e8 9b 48 ff ff       	call   c000b530 <Clock::~Clock()>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	90                   	nop
c0016c99:	83 c4 0c             	add    esp,0xc
c0016c9c:	c3                   	ret    
c0016c9d:	90                   	nop

c0016c9e <RTC::~RTC()>:
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	83 ec 0c             	sub    esp,0xc
c0016ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca8:	e8 cd ff ff ff       	call   c0016c7a <RTC::~RTC()>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 ec 08             	sub    esp,0x8
c0016cb3:	68 60 01 00 00       	push   0x160
c0016cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbc:	e8 43 38 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	83 c4 0c             	add    esp,0xc
c0016cc7:	c3                   	ret    

c0016cc8 <RTC::get_update_in_progress_flag()>:
c0016cc8:	83 ec 14             	sub    esp,0x14
c0016ccb:	6a 0a                	push   0xa
c0016ccd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cd3:	e8 78 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016cd8:	83 c4 1c             	add    esp,0x1c
c0016cdb:	c0 e8 07             	shr    al,0x7
c0016cde:	c3                   	ret    
c0016cdf:	90                   	nop

c0016ce0 <RTC::completeRTCRefresh()>:
c0016ce0:	55                   	push   ebp
c0016ce1:	57                   	push   edi
c0016ce2:	56                   	push   esi
c0016ce3:	53                   	push   ebx
c0016ce4:	83 ec 2c             	sub    esp,0x2c
c0016ce7:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016cf4:	e8 cf ff ff ff       	call   c0016cc8 <RTC::get_update_in_progress_flag()>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	84 c0                	test   al,al
c0016cfe:	74 0e                	je     c0016d0e <RTC::completeRTCRefresh()+0x2e>
c0016d00:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016d06:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016d0c:	73 df                	jae    c0016ced <RTC::completeRTCRefresh()+0xd>
c0016d0e:	55                   	push   ebp
c0016d0f:	55                   	push   ebp
c0016d10:	6a 00                	push   0x0
c0016d12:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d18:	e8 33 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d1d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d21:	58                   	pop    eax
c0016d22:	5a                   	pop    edx
c0016d23:	6a 02                	push   0x2
c0016d25:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d2b:	e8 20 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d30:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016d34:	59                   	pop    ecx
c0016d35:	5b                   	pop    ebx
c0016d36:	6a 04                	push   0x4
c0016d38:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d3e:	e8 0d 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d43:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016d47:	5e                   	pop    esi
c0016d48:	5f                   	pop    edi
c0016d49:	6a 07                	push   0x7
c0016d4b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d51:	e8 fa 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d56:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016d5a:	5d                   	pop    ebp
c0016d5b:	58                   	pop    eax
c0016d5c:	6a 08                	push   0x8
c0016d5e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d64:	e8 e7 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d69:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016d6d:	58                   	pop    eax
c0016d6e:	5a                   	pop    edx
c0016d6f:	6a 09                	push   0x9
c0016d71:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d77:	e8 d4 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	0f b6 e8             	movzx  ebp,al
c0016d82:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016d8f:	e8 34 ff ff ff       	call   c0016cc8 <RTC::get_update_in_progress_flag()>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	84 c0                	test   al,al
c0016d99:	74 0e                	je     c0016da9 <RTC::completeRTCRefresh()+0xc9>
c0016d9b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016da1:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016da7:	73 df                	jae    c0016d88 <RTC::completeRTCRefresh()+0xa8>
c0016da9:	50                   	push   eax
c0016daa:	50                   	push   eax
c0016dab:	6a 00                	push   0x0
c0016dad:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016db3:	e8 98 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016db8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016dbc:	58                   	pop    eax
c0016dbd:	5a                   	pop    edx
c0016dbe:	6a 02                	push   0x2
c0016dc0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dc6:	e8 85 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016dcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016dcf:	59                   	pop    ecx
c0016dd0:	5b                   	pop    ebx
c0016dd1:	6a 04                	push   0x4
c0016dd3:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dd9:	e8 72 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016dde:	5e                   	pop    esi
c0016ddf:	88 c3                	mov    bl,al
c0016de1:	5f                   	pop    edi
c0016de2:	6a 07                	push   0x7
c0016de4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dea:	e8 61 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016def:	89 c6                	mov    esi,eax
c0016df1:	58                   	pop    eax
c0016df2:	5a                   	pop    edx
c0016df3:	6a 08                	push   0x8
c0016df5:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dfb:	e8 50 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e00:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016e04:	59                   	pop    ecx
c0016e05:	5f                   	pop    edi
c0016e06:	6a 09                	push   0x9
c0016e08:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e0e:	e8 3d 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e13:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0016e17:	0f b6 f8             	movzx  edi,al
c0016e1a:	83 c4 10             	add    esp,0x10
c0016e1d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0016e21:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016e25:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0016e29:	89 f1                	mov    ecx,esi
c0016e2b:	0f 94 c0             	sete   al
c0016e2e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0016e32:	0f 94 c2             	sete   dl
c0016e35:	21 d0                	and    eax,edx
c0016e37:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0016e3b:	0f 94 c2             	sete   dl
c0016e3e:	21 c2                	and    edx,eax
c0016e40:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0016e44:	0f 94 c0             	sete   al
c0016e47:	21 d0                	and    eax,edx
c0016e49:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016e4d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016e51:	0f 94 c1             	sete   cl
c0016e54:	84 c8                	test   al,cl
c0016e56:	75 29                	jne    c0016e81 <RTC::completeRTCRefresh()+0x1a1>
c0016e58:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016e5c:	89 fd                	mov    ebp,edi
c0016e5e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016e62:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0016e66:	89 f0                	mov    eax,esi
c0016e68:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016e6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016e70:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016e74:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016e78:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016e7c:	e9 01 ff ff ff       	jmp    c0016d82 <RTC::completeRTCRefresh()+0xa2>
c0016e81:	39 fd                	cmp    ebp,edi
c0016e83:	75 d3                	jne    c0016e58 <RTC::completeRTCRefresh()+0x178>
c0016e85:	55                   	push   ebp
c0016e86:	55                   	push   ebp
c0016e87:	6a 0b                	push   0xb
c0016e89:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e8f:	e8 bc 00 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	89 c5                	mov    ebp,eax
c0016e99:	a8 04                	test   al,0x4
c0016e9b:	75 78                	jne    c0016f15 <RTC::completeRTCRefresh()+0x235>
c0016e9d:	b1 0a                	mov    cl,0xa
c0016e9f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016ea3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016ea7:	83 e2 0f             	and    edx,0xf
c0016eaa:	c0 e8 04             	shr    al,0x4
c0016ead:	c1 ef 04             	shr    edi,0x4
c0016eb0:	f6 e1                	mul    cl
c0016eb2:	6b ff 0a             	imul   edi,edi,0xa
c0016eb5:	01 d0                	add    eax,edx
c0016eb7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016ebb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016ebf:	83 e2 0f             	and    edx,0xf
c0016ec2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ec6:	c0 e8 04             	shr    al,0x4
c0016ec9:	f6 e1                	mul    cl
c0016ecb:	01 d0                	add    eax,edx
c0016ecd:	88 da                	mov    dl,bl
c0016ecf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ed3:	83 e2 0f             	and    edx,0xf
c0016ed6:	88 d8                	mov    al,bl
c0016ed8:	83 e3 80             	and    ebx,0xffffff80
c0016edb:	c0 e8 04             	shr    al,0x4
c0016ede:	83 e0 07             	and    eax,0x7
c0016ee1:	f6 e1                	mul    cl
c0016ee3:	01 d0                	add    eax,edx
c0016ee5:	89 f2                	mov    edx,esi
c0016ee7:	09 c3                	or     ebx,eax
c0016ee9:	83 e2 0f             	and    edx,0xf
c0016eec:	89 f0                	mov    eax,esi
c0016eee:	c0 e8 04             	shr    al,0x4
c0016ef1:	f6 e1                	mul    cl
c0016ef3:	8d 34 02             	lea    esi,[edx+eax*1]
c0016ef6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016efa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016efe:	83 e2 0f             	and    edx,0xf
c0016f01:	c0 e8 04             	shr    al,0x4
c0016f04:	f6 e1                	mul    cl
c0016f06:	01 d0                	add    eax,edx
c0016f08:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016f0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f10:	83 e0 0f             	and    eax,0xf
c0016f13:	01 c7                	add    edi,eax
c0016f15:	83 e5 02             	and    ebp,0x2
c0016f18:	75 14                	jne    c0016f2e <RTC::completeRTCRefresh()+0x24e>
c0016f1a:	84 db                	test   bl,bl
c0016f1c:	79 10                	jns    c0016f2e <RTC::completeRTCRefresh()+0x24e>
c0016f1e:	83 e3 7f             	and    ebx,0x7f
c0016f21:	b9 18 00 00 00       	mov    ecx,0x18
c0016f26:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016f29:	99                   	cdq    
c0016f2a:	f7 f9                	idiv   ecx
c0016f2c:	88 d3                	mov    bl,dl
c0016f2e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016f34:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016f3a:	77 06                	ja     c0016f42 <RTC::completeRTCRefresh()+0x262>
c0016f3c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016f42:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016f47:	31 d2                	xor    edx,edx
c0016f49:	c1 e1 10             	shl    ecx,0x10
c0016f4c:	89 d7                	mov    edi,edx
c0016f4e:	c1 e5 10             	shl    ebp,0x10
c0016f51:	31 c0                	xor    eax,eax
c0016f53:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016f59:	09 cf                	or     edi,ecx
c0016f5b:	89 fa                	mov    edx,edi
c0016f5d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016f61:	88 da                	mov    dl,bl
c0016f63:	89 f3                	mov    ebx,esi
c0016f65:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016f69:	88 d8                	mov    al,bl
c0016f6b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016f6f:	0f b7 c8             	movzx  ecx,ax
c0016f72:	09 e9                	or     ecx,ebp
c0016f74:	89 c8                	mov    eax,ecx
c0016f76:	51                   	push   ecx
c0016f77:	51                   	push   ecx
c0016f78:	52                   	push   edx
c0016f79:	50                   	push   eax
c0016f7a:	e8 a0 46 ff ff       	call   c000b61f <datetimeToSeconds(datetime_t)>
c0016f7f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f83:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016f89:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016f8f:	83 c4 3c             	add    esp,0x3c
c0016f92:	5b                   	pop    ebx
c0016f93:	5e                   	pop    esi
c0016f94:	5f                   	pop    edi
c0016f95:	5d                   	pop    ebp
c0016f96:	c3                   	ret    
c0016f97:	90                   	nop

c0016f98 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016f98:	55                   	push   ebp
c0016f99:	57                   	push   edi
c0016f9a:	56                   	push   esi
c0016f9b:	53                   	push   ebx
c0016f9c:	83 ec 30             	sub    esp,0x30
c0016f9f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016fa3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016fa7:	6a 00                	push   0x0
c0016fa9:	6a 00                	push   0x0
c0016fab:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fb1:	e8 b0 00 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016fb6:	83 c4 0c             	add    esp,0xc
c0016fb9:	6a 00                	push   0x0
c0016fbb:	6a 02                	push   0x2
c0016fbd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fc3:	e8 9e 00 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016fc8:	31 d2                	xor    edx,edx
c0016fca:	89 f9                	mov    ecx,edi
c0016fcc:	89 f8                	mov    eax,edi
c0016fce:	c1 e9 10             	shr    ecx,0x10
c0016fd1:	0f b6 c4             	movzx  eax,ah
c0016fd4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016fd8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016fdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fe0:	b9 64 00 00 00       	mov    ecx,0x64
c0016fe5:	89 f0                	mov    eax,esi
c0016fe7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016feb:	89 f0                	mov    eax,esi
c0016fed:	0f b6 c4             	movzx  eax,ah
c0016ff0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ff4:	89 f0                	mov    eax,esi
c0016ff6:	c1 e8 10             	shr    eax,0x10
c0016ff9:	66 f7 f1             	div    cx
c0016ffc:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0017001:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0017006:	59                   	pop    ecx
c0017007:	5b                   	pop    ebx
c0017008:	89 fb                	mov    ebx,edi
c001700a:	6a 0b                	push   0xb
c001700c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017012:	e8 39 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017017:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0017023:	75 74                	jne    c0017099 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0017025:	b2 0a                	mov    dl,0xa
c0017027:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001702b:	0f b6 c1             	movzx  eax,cl
c001702e:	f6 f2                	div    dl
c0017030:	88 c3                	mov    bl,al
c0017032:	88 e0                	mov    al,ah
c0017034:	c1 e3 04             	shl    ebx,0x4
c0017037:	09 c3                	or     ebx,eax
c0017039:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001703e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0017042:	f6 f2                	div    dl
c0017044:	88 c1                	mov    cl,al
c0017046:	88 e0                	mov    al,ah
c0017048:	c1 e1 04             	shl    ecx,0x4
c001704b:	09 c1                	or     ecx,eax
c001704d:	89 f8                	mov    eax,edi
c001704f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017053:	0f b6 c0             	movzx  eax,al
c0017056:	f6 f2                	div    dl
c0017058:	88 c3                	mov    bl,al
c001705a:	88 e0                	mov    al,ah
c001705c:	c1 e3 04             	shl    ebx,0x4
c001705f:	09 c3                	or     ebx,eax
c0017061:	89 f0                	mov    eax,esi
c0017063:	0f b6 c0             	movzx  eax,al
c0017066:	f6 f2                	div    dl
c0017068:	88 c1                	mov    cl,al
c001706a:	88 e0                	mov    al,ah
c001706c:	c1 e1 04             	shl    ecx,0x4
c001706f:	09 c1                	or     ecx,eax
c0017071:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017076:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001707a:	f6 f2                	div    dl
c001707c:	88 c1                	mov    cl,al
c001707e:	88 e0                	mov    al,ah
c0017080:	c1 e1 04             	shl    ecx,0x4
c0017083:	09 c1                	or     ecx,eax
c0017085:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001708a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001708e:	f6 f2                	div    dl
c0017090:	89 c5                	mov    ebp,eax
c0017092:	88 e0                	mov    al,ah
c0017094:	c1 e5 04             	shl    ebp,0x4
c0017097:	09 c5                	or     ebp,eax
c0017099:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001709e:	75 17                	jne    c00170b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170a0:	80 fb 0b             	cmp    bl,0xb
c00170a3:	76 0c                	jbe    c00170b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00170a5:	80 eb 0c             	sub    bl,0xc
c00170a8:	75 02                	jne    c00170ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00170aa:	b3 0c                	mov    bl,0xc
c00170ac:	83 cb 80             	or     ebx,0xffffff80
c00170af:	eb 06                	jmp    c00170b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170b1:	84 db                	test   bl,bl
c00170b3:	75 02                	jne    c00170b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170b5:	b3 0c                	mov    bl,0xc
c00170b7:	0f b6 db             	movzx  ebx,bl
c00170ba:	50                   	push   eax
c00170bb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00170c0:	50                   	push   eax
c00170c1:	6a 00                	push   0x0
c00170c3:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170c9:	e8 98 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170ce:	83 c4 0c             	add    esp,0xc
c00170d1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00170d6:	50                   	push   eax
c00170d7:	6a 02                	push   0x2
c00170d9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170df:	e8 82 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170e4:	83 c4 0c             	add    esp,0xc
c00170e7:	53                   	push   ebx
c00170e8:	6a 04                	push   0x4
c00170ea:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170f0:	e8 71 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170f5:	83 c4 0c             	add    esp,0xc
c00170f8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00170fd:	50                   	push   eax
c00170fe:	6a 07                	push   0x7
c0017100:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017106:	e8 5b ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001710b:	83 c4 0c             	add    esp,0xc
c001710e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0017113:	50                   	push   eax
c0017114:	6a 08                	push   0x8
c0017116:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001711c:	e8 45 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017121:	83 c4 0c             	add    esp,0xc
c0017124:	89 e8                	mov    eax,ebp
c0017126:	0f b6 e8             	movzx  ebp,al
c0017129:	55                   	push   ebp
c001712a:	6a 09                	push   0x9
c001712c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017132:	e8 2f ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017137:	5a                   	pop    edx
c0017138:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001713c:	e8 9f fb ff ff       	call   c0016ce0 <RTC::completeRTCRefresh()>
c0017141:	83 c4 3c             	add    esp,0x3c
c0017144:	b0 01                	mov    al,0x1
c0017146:	5b                   	pop    ebx
c0017147:	5e                   	pop    esi
c0017148:	5f                   	pop    edi
c0017149:	5d                   	pop    ebp
c001714a:	c3                   	ret    

c001714b <rtcIRQHandler(regs*, void*)>:
c001714b:	53                   	push   ebx
c001714c:	83 ec 10             	sub    esp,0x10
c001714f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017153:	6a 0c                	push   0xc
c0017155:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001715b:	e8 f0 fd fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	84 c0                	test   al,al
c0017165:	79 24                	jns    c001718b <rtcIRQHandler(regs*, void*)+0x40>
c0017167:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001716e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017175:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c001717c:	75 0d                	jne    c001718b <rtcIRQHandler(regs*, void*)+0x40>
c001717e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017182:	83 c4 08             	add    esp,0x8
c0017185:	5b                   	pop    ebx
c0017186:	e9 55 fb ff ff       	jmp    c0016ce0 <RTC::completeRTCRefresh()>
c001718b:	83 c4 08             	add    esp,0x8
c001718e:	5b                   	pop    ebx
c001718f:	c3                   	ret    

c0017190 <RTC::RTC()>:
c0017190:	83 ec 1c             	sub    esp,0x1c
c0017193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017197:	83 ec 08             	sub    esp,0x8
c001719a:	68 8f 09 02 c0       	push   0xc002098f
c001719f:	50                   	push   eax
c00171a0:	e8 55 43 ff ff       	call   c000b4fa <Clock::Clock(char const*)>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c00171ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b1:	89 10                	mov    DWORD PTR [eax],edx
c00171b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171be:	6a 01                	push   0x1
c00171c0:	68 4b 71 01 c0       	push   0xc001714b
c00171c5:	6a 08                	push   0x8
c00171c7:	50                   	push   eax
c00171c8:	e8 17 48 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00171cd:	83 c4 20             	add    esp,0x20
c00171d0:	89 c2                	mov    edx,eax
c00171d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171d6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00171dc:	fa                   	cli    
c00171dd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00171e2:	40                   	inc    eax
c00171e3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00171e8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00171ed:	83 ec 08             	sub    esp,0x8
c00171f0:	6a 0b                	push   0xb
c00171f2:	50                   	push   eax
c00171f3:	e8 58 fd fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00171f8:	83 c4 10             	add    esp,0x10
c00171fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00171ff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017204:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017208:	83 ca 10             	or     edx,0x10
c001720b:	81 e2 ff 00 00 00    	and    edx,0xff
c0017211:	83 ec 04             	sub    esp,0x4
c0017214:	52                   	push   edx
c0017215:	6a 0b                	push   0xb
c0017217:	50                   	push   eax
c0017218:	e8 49 fe fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017227:	e8 b4 fa ff ff       	call   c0016ce0 <RTC::completeRTCRefresh()>
c001722c:	83 c4 10             	add    esp,0x10
c001722f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017234:	48                   	dec    eax
c0017235:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001723a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001723f:	85 c0                	test   eax,eax
c0017241:	75 01                	jne    c0017244 <RTC::RTC()+0xb4>
c0017243:	fb                   	sti    
c0017244:	90                   	nop
c0017245:	83 c4 1c             	add    esp,0x1c
c0017248:	c3                   	ret    
c0017249:	66 90                	xchg   ax,ax
c001724b:	90                   	nop

c001724c <HalConsoleScroll(int, int)>:
c001724c:	83 ec 10             	sub    esp,0x10
c001724f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017257:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001725f:	90                   	nop
c0017260:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017265:	0f 8f e1 00 00 00    	jg     c001734c <HalConsoleScroll(int, int)+0x100>
c001726b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017273:	90                   	nop
c0017274:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001727c:	0f 8f be 00 00 00    	jg     c0017340 <HalConsoleScroll(int, int)+0xf4>
c0017282:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017286:	89 d0                	mov    eax,edx
c0017288:	c1 e0 02             	shl    eax,0x2
c001728b:	01 d0                	add    eax,edx
c001728d:	c1 e0 05             	shl    eax,0x5
c0017290:	89 c2                	mov    edx,eax
c0017292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017296:	01 d0                	add    eax,edx
c0017298:	89 c2                	mov    edx,eax
c001729a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001729e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172a5:	89 d0                	mov    eax,edx
c00172a7:	c1 e0 02             	shl    eax,0x2
c00172aa:	01 d0                	add    eax,edx
c00172ac:	c1 e0 05             	shl    eax,0x5
c00172af:	89 c2                	mov    edx,eax
c00172b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b5:	01 d0                	add    eax,edx
c00172b7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00172bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172c1:	01 c2                	add    edx,eax
c00172c3:	8a 01                	mov    al,BYTE PTR [ecx]
c00172c5:	88 02                	mov    BYTE PTR [edx],al
c00172c7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00172cc:	75 66                	jne    c0017334 <HalConsoleScroll(int, int)+0xe8>
c00172ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d2:	83 e0 01             	and    eax,0x1
c00172d5:	74 39                	je     c0017310 <HalConsoleScroll(int, int)+0xc4>
c00172d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172db:	83 e0 0f             	and    eax,0xf
c00172de:	88 c2                	mov    dl,al
c00172e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172e4:	c1 e0 04             	shl    eax,0x4
c00172e7:	88 d1                	mov    cl,dl
c00172e9:	09 c1                	or     ecx,eax
c00172eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172ef:	89 d0                	mov    eax,edx
c00172f1:	c1 e0 02             	shl    eax,0x2
c00172f4:	01 d0                	add    eax,edx
c00172f6:	c1 e0 05             	shl    eax,0x5
c00172f9:	89 c2                	mov    edx,eax
c00172fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ff:	01 d0                	add    eax,edx
c0017301:	89 c2                	mov    edx,eax
c0017303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017307:	01 d0                	add    eax,edx
c0017309:	88 ca                	mov    dl,cl
c001730b:	88 10                	mov    BYTE PTR [eax],dl
c001730d:	eb 25                	jmp    c0017334 <HalConsoleScroll(int, int)+0xe8>
c001730f:	90                   	nop
c0017310:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017314:	89 d0                	mov    eax,edx
c0017316:	c1 e0 02             	shl    eax,0x2
c0017319:	01 d0                	add    eax,edx
c001731b:	c1 e0 05             	shl    eax,0x5
c001731e:	89 c2                	mov    edx,eax
c0017320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017324:	01 d0                	add    eax,edx
c0017326:	89 c2                	mov    edx,eax
c0017328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001732c:	01 d0                	add    eax,edx
c001732e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017331:	8d 76 00             	lea    esi,[esi+0x0]
c0017334:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017338:	e9 37 ff ff ff       	jmp    c0017274 <HalConsoleScroll(int, int)+0x28>
c001733d:	8d 76 00             	lea    esi,[esi+0x0]
c0017340:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017344:	e9 17 ff ff ff       	jmp    c0017260 <HalConsoleScroll(int, int)+0x14>
c0017349:	8d 76 00             	lea    esi,[esi+0x0]
c001734c:	90                   	nop
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	c3                   	ret    
c0017351:	8d 76 00             	lea    esi,[esi+0x0]

c0017354 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017354:	83 ec 14             	sub    esp,0x14
c0017357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001735b:	88 04 24             	mov    BYTE PTR [esp],al
c001735e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017361:	25 ff 00 00 00       	and    eax,0xff
c0017366:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001736a:	89 d1                	mov    ecx,edx
c001736c:	83 e1 0f             	and    ecx,0xf
c001736f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017373:	c1 e2 04             	shl    edx,0x4
c0017376:	81 e2 ff 00 00 00    	and    edx,0xff
c001737c:	09 ca                	or     edx,ecx
c001737e:	c1 e2 08             	shl    edx,0x8
c0017381:	09 d0                	or     eax,edx
c0017383:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017388:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017390:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017394:	89 d0                	mov    eax,edx
c0017396:	c1 e0 02             	shl    eax,0x2
c0017399:	01 d0                	add    eax,edx
c001739b:	c1 e0 04             	shl    eax,0x4
c001739e:	89 c2                	mov    edx,eax
c00173a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173a4:	01 d0                	add    eax,edx
c00173a6:	01 c0                	add    eax,eax
c00173a8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00173ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173b0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00173b5:	66 89 02             	mov    WORD PTR [edx],ax
c00173b8:	90                   	nop
c00173b9:	83 c4 14             	add    esp,0x14
c00173bc:	c3                   	ret    
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]

c00173c0 <HalConsoleCursorUpdate(int, int)>:
c00173c0:	83 ec 20             	sub    esp,0x20
c00173c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c7:	89 c2                	mov    edx,eax
c00173c9:	89 d0                	mov    eax,edx
c00173cb:	c1 e0 02             	shl    eax,0x2
c00173ce:	01 d0                	add    eax,edx
c00173d0:	c1 e0 04             	shl    eax,0x4
c00173d3:	89 c2                	mov    edx,eax
c00173d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173d9:	01 d0                	add    eax,edx
c00173db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00173e0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00173e7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00173ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173f4:	ee                   	out    dx,al
c00173f5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00173fa:	25 ff 00 00 00       	and    eax,0xff
c00173ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017406:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001740a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001740e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017412:	ee                   	out    dx,al
c0017413:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001741a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001741f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017423:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017427:	ee                   	out    dx,al
c0017428:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001742d:	66 c1 e8 08          	shr    ax,0x8
c0017431:	25 ff 00 00 00       	and    eax,0xff
c0017436:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001743d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017441:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017445:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017449:	ee                   	out    dx,al
c001744a:	90                   	nop
c001744b:	83 c4 20             	add    esp,0x20
c001744e:	c3                   	ret    
c001744f:	90                   	nop

c0017450 <FAT::getName()>:
c0017450:	b8 e0 09 02 c0       	mov    eax,0xc00209e0
c0017455:	c3                   	ret    
c0017456:	66 90                	xchg   ax,ax

c0017458 <FAT::tell(void*, unsigned long long*)>:
c0017458:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001745d:	75 09                	jne    c0017468 <FAT::tell(void*, unsigned long long*)+0x10>
c001745f:	b8 04 00 00 00       	mov    eax,0x4
c0017464:	c3                   	ret    
c0017465:	8d 76 00             	lea    esi,[esi+0x0]
c0017468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001746d:	75 09                	jne    c0017478 <FAT::tell(void*, unsigned long long*)+0x20>
c001746f:	b8 04 00 00 00       	mov    eax,0x4
c0017474:	c3                   	ret    
c0017475:	8d 76 00             	lea    esi,[esi+0x0]
c0017478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001747c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001747f:	ba 00 00 00 00       	mov    edx,0x0
c0017484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017488:	89 01                	mov    DWORD PTR [ecx],eax
c001748a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001748d:	b8 00 00 00 00       	mov    eax,0x0
c0017492:	c3                   	ret    
c0017493:	90                   	nop

c0017494 <FAT::stat(void*, unsigned long long*)>:
c0017494:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017499:	75 09                	jne    c00174a4 <FAT::stat(void*, unsigned long long*)+0x10>
c001749b:	b8 04 00 00 00       	mov    eax,0x4
c00174a0:	c3                   	ret    
c00174a1:	8d 76 00             	lea    esi,[esi+0x0]
c00174a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00174a9:	75 09                	jne    c00174b4 <FAT::stat(void*, unsigned long long*)+0x20>
c00174ab:	b8 04 00 00 00       	mov    eax,0x4
c00174b0:	c3                   	ret    
c00174b1:	8d 76 00             	lea    esi,[esi+0x0]
c00174b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00174bb:	ba 00 00 00 00       	mov    edx,0x0
c00174c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174c4:	89 01                	mov    DWORD PTR [ecx],eax
c00174c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174c9:	b8 00 00 00 00       	mov    eax,0x0
c00174ce:	c3                   	ret    
c00174cf:	90                   	nop

c00174d0 <FAT::~FAT()>:
c00174d0:	83 ec 0c             	sub    esp,0xc
c00174d3:	ba 2c 0a 02 c0       	mov    edx,0xc0020a2c
c00174d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174dc:	89 10                	mov    DWORD PTR [eax],edx
c00174de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e2:	83 ec 0c             	sub    esp,0xc
c00174e5:	50                   	push   eax
c00174e6:	e8 55 34 ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	90                   	nop
c00174ef:	83 c4 0c             	add    esp,0xc
c00174f2:	c3                   	ret    
c00174f3:	90                   	nop

c00174f4 <FAT::~FAT()>:
c00174f4:	83 ec 0c             	sub    esp,0xc
c00174f7:	83 ec 0c             	sub    esp,0xc
c00174fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174fe:	e8 cd ff ff ff       	call   c00174d0 <FAT::~FAT()>
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	83 ec 08             	sub    esp,0x8
c0017509:	6a 08                	push   0x8
c001750b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001750f:	e8 f0 2f ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0017514:	83 c4 10             	add    esp,0x10
c0017517:	83 c4 0c             	add    esp,0xc
c001751a:	c3                   	ret    
c001751b:	90                   	nop

c001751c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001751c:	83 ec 1c             	sub    esp,0x1c
c001751f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017526:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001752b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017536:	83 f8 ff             	cmp    eax,0xffffffff
c0017539:	75 35                	jne    c0017570 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001753b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001753f:	88 c2                	mov    dl,al
c0017541:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017546:	01 d0                	add    eax,edx
c0017548:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001754c:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017552:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017556:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c001755d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017566:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001756d:	eb 19                	jmp    c0017588 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001756f:	90                   	nop
c0017570:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017574:	88 c2                	mov    dl,al
c0017576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001757a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017581:	01 d0                	add    eax,edx
c0017583:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017587:	90                   	nop
c0017588:	83 ec 04             	sub    esp,0x4
c001758b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001758f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017593:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017597:	50                   	push   eax
c0017598:	e8 a7 d8 fe ff       	call   c0004e44 <f_getlabel>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00175a9:	75 09                	jne    c00175b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00175ab:	b8 00 00 00 00       	mov    eax,0x0
c00175b0:	eb 0a                	jmp    c00175bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00175b2:	66 90                	xchg   ax,ax
c00175b4:	b8 01 00 00 00       	mov    eax,0x1
c00175b9:	8d 76 00             	lea    esi,[esi+0x0]
c00175bc:	83 c4 1c             	add    esp,0x1c
c00175bf:	c3                   	ret    

c00175c0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00175c0:	57                   	push   edi
c00175c1:	83 ec 58             	sub    esp,0x58
c00175c4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00175cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00175d0:	b8 00 00 00 00       	mov    eax,0x0
c00175d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00175da:	fc                   	cld    
c00175db:	89 d7                	mov    edi,edx
c00175dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00175df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00175e3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00175ea:	83 f8 ff             	cmp    eax,0xffffffff
c00175ed:	75 35                	jne    c0017624 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00175ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175f3:	88 c2                	mov    dl,al
c00175f5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00175fa:	01 d0                	add    eax,edx
c00175fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017600:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017606:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001760a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017611:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017616:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001761a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017621:	eb 19                	jmp    c001763c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017623:	90                   	nop
c0017624:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017628:	88 c2                	mov    dl,al
c001762a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001762e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017635:	01 d0                	add    eax,edx
c0017637:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001763b:	90                   	nop
c001763c:	83 ec 08             	sub    esp,0x8
c001763f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017643:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017647:	50                   	push   eax
c0017648:	e8 63 91 fe ff       	call   c00007b0 <strcat>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	83 ec 0c             	sub    esp,0xc
c0017653:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017657:	50                   	push   eax
c0017658:	e8 38 d9 fe ff       	call   c0004f95 <f_setlabel>
c001765d:	83 c4 10             	add    esp,0x10
c0017660:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017664:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017669:	75 09                	jne    c0017674 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001766b:	b8 00 00 00 00       	mov    eax,0x0
c0017670:	eb 0a                	jmp    c001767c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017672:	66 90                	xchg   ax,ax
c0017674:	b8 01 00 00 00       	mov    eax,0x1
c0017679:	8d 76 00             	lea    esi,[esi+0x0]
c001767c:	83 c4 58             	add    esp,0x58
c001767f:	5f                   	pop    edi
c0017680:	c3                   	ret    
c0017681:	90                   	nop
c0017682:	66 90                	xchg   ax,ax

c0017684 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017684:	83 ec 2c             	sub    esp,0x2c
c0017687:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001768f:	83 ec 08             	sub    esp,0x8
c0017692:	68 04 0a 02 c0       	push   0xc0020a04
c0017697:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001769b:	e8 30 90 fe ff       	call   c00006d0 <strcmp>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	85 c0                	test   eax,eax
c00176a5:	0f 94 c0             	sete   al
c00176a8:	84 c0                	test   al,al
c00176aa:	74 10                	je     c00176bc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00176ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00176b4:	e9 b3 00 00 00       	jmp    c001776c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00176b9:	8d 76 00             	lea    esi,[esi+0x0]
c00176bc:	83 ec 08             	sub    esp,0x8
c00176bf:	68 f6 09 02 c0       	push   0xc00209f6
c00176c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00176c8:	e8 03 90 fe ff       	call   c00006d0 <strcmp>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	85 c0                	test   eax,eax
c00176d2:	0f 94 c0             	sete   al
c00176d5:	84 c0                	test   al,al
c00176d7:	74 0f                	je     c00176e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00176d9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00176e1:	e9 86 00 00 00       	jmp    c001776c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00176e6:	66 90                	xchg   ax,ax
c00176e8:	83 ec 08             	sub    esp,0x8
c00176eb:	68 fc 09 02 c0       	push   0xc00209fc
c00176f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00176f4:	e8 d7 8f fe ff       	call   c00006d0 <strcmp>
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	85 c0                	test   eax,eax
c00176fe:	0f 94 c0             	sete   al
c0017701:	84 c0                	test   al,al
c0017703:	74 0b                	je     c0017710 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017705:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001770d:	eb 5d                	jmp    c001776c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001770f:	90                   	nop
c0017710:	83 ec 08             	sub    esp,0x8
c0017713:	68 9c e8 01 c0       	push   0xc001e89c
c0017718:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001771c:	e8 af 8f fe ff       	call   c00006d0 <strcmp>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	85 c0                	test   eax,eax
c0017726:	0f 94 c0             	sete   al
c0017729:	84 c0                	test   al,al
c001772b:	74 0b                	je     c0017738 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001772d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017735:	eb 35                	jmp    c001776c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017737:	90                   	nop
c0017738:	83 ec 08             	sub    esp,0x8
c001773b:	68 02 0a 02 c0       	push   0xc0020a02
c0017740:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017744:	e8 87 8f fe ff       	call   c00006d0 <strcmp>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	85 c0                	test   eax,eax
c001774e:	0f 94 c0             	sete   al
c0017751:	84 c0                	test   al,al
c0017753:	74 0b                	je     c0017760 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017755:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001775d:	eb 0d                	jmp    c001776c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001775f:	90                   	nop
c0017760:	b8 08 00 00 00       	mov    eax,0x8
c0017765:	e9 ea 00 00 00       	jmp    c0017854 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001776a:	66 90                	xchg   ax,ax
c001776c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017773:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017778:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001777c:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017783:	83 f8 ff             	cmp    eax,0xffffffff
c0017786:	75 34                	jne    c00177bc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017788:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001778c:	88 c2                	mov    dl,al
c001778e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017793:	01 d0                	add    eax,edx
c0017795:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017799:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c001779f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177a3:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00177aa:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00177af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00177b3:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00177ba:	eb 18                	jmp    c00177d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00177bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00177c0:	88 c2                	mov    dl,al
c00177c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177c6:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00177cd:	01 d0                	add    eax,edx
c00177cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00177d3:	90                   	nop
c00177d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177d8:	88 04 24             	mov    BYTE PTR [esp],al
c00177db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177eb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00177f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177f8:	83 ec 0c             	sub    esp,0xc
c00177fb:	68 00 20 00 00       	push   0x2000
c0017800:	e8 60 00 ff ff       	call   c0007865 <malloc>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001780c:	68 00 20 00 00       	push   0x2000
c0017811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017815:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017819:	50                   	push   eax
c001781a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001781e:	50                   	push   eax
c001781f:	e8 61 da fe ff       	call   c0005285 <f_mkfs>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001782b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017830:	75 0a                	jne    c001783c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017832:	b8 00 00 00 00       	mov    eax,0x0
c0017837:	eb 1b                	jmp    c0017854 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017839:	8d 76 00             	lea    esi,[esi+0x0]
c001783c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017841:	75 09                	jne    c001784c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017843:	b8 09 00 00 00       	mov    eax,0x9
c0017848:	eb 0a                	jmp    c0017854 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001784a:	66 90                	xchg   ax,ax
c001784c:	b8 01 00 00 00       	mov    eax,0x1
c0017851:	8d 76 00             	lea    esi,[esi+0x0]
c0017854:	83 c4 2c             	add    esp,0x2c
c0017857:	c3                   	ret    

c0017858 <FAT::tryMount(LogicalDisk*, int)>:
c0017858:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001785e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017863:	83 f8 14             	cmp    eax,0x14
c0017866:	75 18                	jne    c0017880 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017868:	83 ec 0c             	sub    esp,0xc
c001786b:	68 08 0a 02 c0       	push   0xc0020a08
c0017870:	e8 46 8b ff ff       	call   c00103bb <KePanic(char const*)>
c0017875:	83 c4 10             	add    esp,0x10
c0017878:	b0 00                	mov    al,0x0
c001787a:	e9 e9 01 00 00       	jmp    c0017a68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001787f:	90                   	nop
c0017880:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017887:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001788d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017893:	3d 00 02 00 00       	cmp    eax,0x200
c0017898:	74 0a                	je     c00178a4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001789a:	b0 00                	mov    al,0x0
c001789c:	e9 c7 01 00 00       	jmp    c0017a68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178a1:	8d 76 00             	lea    esi,[esi+0x0]
c00178a4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00178ac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00178b3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00178ba:	83 f8 ff             	cmp    eax,0xffffffff
c00178bd:	74 09                	je     c00178c8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00178bf:	b0 01                	mov    al,0x1
c00178c1:	e9 a2 01 00 00       	jmp    c0017a68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178c6:	66 90                	xchg   ax,ax
c00178c8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00178d2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00178da:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00178e1:	88 c2                	mov    dl,al
c00178e3:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178e8:	01 d0                	add    eax,edx
c00178ea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00178f1:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00178f7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00178fe:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017905:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001790a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017911:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017918:	83 ec 0c             	sub    esp,0xc
c001791b:	68 34 02 00 00       	push   0x234
c0017920:	e8 40 ff fe ff       	call   c0007865 <malloc>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001792f:	83 ec 04             	sub    esp,0x4
c0017932:	6a 00                	push   0x0
c0017934:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001793b:	50                   	push   eax
c001793c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017943:	e8 63 c1 fe ff       	call   c0003aab <f_mount>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017952:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001795a:	74 1c                	je     c0017978 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017966:	e8 1a ff fe ff       	call   c0007885 <rfree>
c001796b:	83 c4 10             	add    esp,0x10
c001796e:	b0 00                	mov    al,0x0
c0017970:	e9 f3 00 00 00       	jmp    c0017a68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017975:	8d 76 00             	lea    esi,[esi+0x0]
c0017978:	83 ec 04             	sub    esp,0x4
c001797b:	68 00 01 00 00       	push   0x100
c0017980:	6a 00                	push   0x0
c0017982:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017989:	50                   	push   eax
c001798a:	e8 31 8b fe ff       	call   c00004c0 <memset>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	83 ec 08             	sub    esp,0x8
c0017995:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001799c:	50                   	push   eax
c001799d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00179a4:	50                   	push   eax
c00179a5:	e8 06 8e fe ff       	call   c00007b0 <strcat>
c00179aa:	83 c4 10             	add    esp,0x10
c00179ad:	83 ec 08             	sub    esp,0x8
c00179b0:	68 16 0a 02 c0       	push   0xc0020a16
c00179b5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00179bc:	50                   	push   eax
c00179bd:	e8 ee 8d fe ff       	call   c00007b0 <strcat>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	83 ec 04             	sub    esp,0x4
c00179c8:	6a 01                	push   0x1
c00179ca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00179d1:	50                   	push   eax
c00179d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00179d6:	50                   	push   eax
c00179d7:	e8 31 c1 fe ff       	call   c0003b0d <f_open>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00179e6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00179ed:	85 c0                	test   eax,eax
c00179ef:	74 0b                	je     c00179fc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00179f1:	78 31                	js     c0017a24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00179f3:	83 e8 04             	sub    eax,0x4
c00179f6:	83 f8 01             	cmp    eax,0x1
c00179f9:	77 29                	ja     c0017a24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00179fb:	90                   	nop
c00179fc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017a04:	83 ec 0c             	sub    esp,0xc
c0017a07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017a0b:	50                   	push   eax
c0017a0c:	e8 af c8 fe ff       	call   c00042c0 <f_close>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	90                   	nop
c0017a15:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017a1d:	74 41                	je     c0017a60 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017a1f:	eb 33                	jmp    c0017a54 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017a21:	8d 76 00             	lea    esi,[esi+0x0]
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017a2e:	e8 52 fe fe ff       	call   c0007885 <rfree>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	83 ec 04             	sub    esp,0x4
c0017a39:	6a 00                	push   0x0
c0017a3b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017a42:	50                   	push   eax
c0017a43:	6a 00                	push   0x0
c0017a45:	e8 61 c0 fe ff       	call   c0003aab <f_mount>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	b0 00                	mov    al,0x0
c0017a4f:	eb 17                	jmp    c0017a68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017a51:	8d 76 00             	lea    esi,[esi+0x0]
c0017a54:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a59:	40                   	inc    eax
c0017a5a:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017a5f:	90                   	nop
c0017a60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017a67:	90                   	nop
c0017a68:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017a6e:	c3                   	ret    
c0017a6f:	90                   	nop

c0017a70 <FAT::allocateSwapfile(char const*, int)>:
c0017a70:	55                   	push   ebp
c0017a71:	57                   	push   edi
c0017a72:	56                   	push   esi
c0017a73:	53                   	push   ebx
c0017a74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017a7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017a85:	83 ec 0c             	sub    esp,0xc
c0017a88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017a8f:	e8 d1 fd fe ff       	call   c0007865 <malloc>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	89 c7                	mov    edi,eax
c0017a99:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017a9e:	83 ec 04             	sub    esp,0x4
c0017aa1:	50                   	push   eax
c0017aa2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017aa9:	57                   	push   edi
c0017aaa:	e8 c1 30 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017ab9:	83 ec 04             	sub    esp,0x4
c0017abc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017ac0:	50                   	push   eax
c0017ac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ac5:	50                   	push   eax
c0017ac6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017acd:	e8 0a 34 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017adc:	c1 e0 14             	shl    eax,0x14
c0017adf:	89 c7                	mov    edi,eax
c0017ae1:	89 c5                	mov    ebp,eax
c0017ae3:	c1 fd 1f             	sar    ebp,0x1f
c0017ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017aee:	89 f9                	mov    ecx,edi
c0017af0:	31 c1                	xor    ecx,eax
c0017af2:	89 cb                	mov    ebx,ecx
c0017af4:	89 e9                	mov    ecx,ebp
c0017af6:	31 d1                	xor    ecx,edx
c0017af8:	89 ce                	mov    esi,ecx
c0017afa:	89 f0                	mov    eax,esi
c0017afc:	09 d8                	or     eax,ebx
c0017afe:	0f 84 9c 00 00 00    	je     c0017ba0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017b04:	83 ec 0c             	sub    esp,0xc
c0017b07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b0e:	e8 95 32 ff ff       	call   c000ada8 <File::unlink()>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	83 ec 08             	sub    esp,0x8
c0017b19:	6a 12                	push   0x12
c0017b1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b22:	e8 09 31 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017b31:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017b37:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017b3e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017b45:	c1 e0 14             	shl    eax,0x14
c0017b48:	83 ec 04             	sub    esp,0x4
c0017b4b:	6a 01                	push   0x1
c0017b4d:	50                   	push   eax
c0017b4e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017b55:	e8 cb d5 fe ff       	call   c0005125 <f_expand>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b66:	83 c0 10             	add    eax,0x10
c0017b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017b72:	52                   	push   edx
c0017b73:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017b77:	52                   	push   edx
c0017b78:	6a 00                	push   0x0
c0017b7a:	68 00 04 00 00       	push   0x400
c0017b7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017b86:	ff d0                	call   eax
c0017b88:	83 c4 20             	add    esp,0x20
c0017b8b:	83 ec 0c             	sub    esp,0xc
c0017b8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b95:	e8 f4 30 ff ff       	call   c000ac8e <File::close()>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba0:	83 ec 08             	sub    esp,0x8
c0017ba3:	6a 01                	push   0x1
c0017ba5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017bac:	e8 7f 30 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bbd:	83 c0 0c             	add    eax,0xc
c0017bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bc2:	83 ec 0c             	sub    esp,0xc
c0017bc5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017bc9:	52                   	push   edx
c0017bca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017bce:	52                   	push   edx
c0017bcf:	6a 00                	push   0x0
c0017bd1:	6a 04                	push   0x4
c0017bd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017bda:	ff d0                	call   eax
c0017bdc:	83 c4 20             	add    esp,0x20
c0017bdf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017be6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017bec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017bf3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017bfa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017bfd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017c0e:	e8 7b 30 ff ff       	call   c000ac8e <File::close()>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017c1d:	ba 00 00 00 00       	mov    edx,0x0
c0017c22:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017c28:	5b                   	pop    ebx
c0017c29:	5e                   	pop    esi
c0017c2a:	5f                   	pop    edi
c0017c2b:	5d                   	pop    ebp
c0017c2c:	c3                   	ret    
c0017c2d:	90                   	nop
c0017c2e:	66 90                	xchg   ax,ax

c0017c30 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017c30:	57                   	push   edi
c0017c31:	56                   	push   esi
c0017c32:	53                   	push   ebx
c0017c33:	81 ec 50 02 00 00    	sub    esp,0x250
c0017c39:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017c41:	74 0d                	je     c0017c50 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017c43:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017c4b:	75 0f                	jne    c0017c5c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c50:	b8 04 00 00 00       	mov    eax,0x4
c0017c55:	e9 36 01 00 00       	jmp    c0017d90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017c5a:	66 90                	xchg   ax,ax
c0017c5c:	83 ec 08             	sub    esp,0x8
c0017c5f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017c66:	50                   	push   eax
c0017c67:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017c6e:	e8 10 c9 fe ff       	call   c0004583 <f_readdir>
c0017c73:	83 c4 10             	add    esp,0x10
c0017c76:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017c7d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017c84:	83 ec 0c             	sub    esp,0xc
c0017c87:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017c8e:	83 c0 16             	add    eax,0x16
c0017c91:	50                   	push   eax
c0017c92:	e8 99 88 fe ff       	call   c0000530 <strlen>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	ba 00 00 00 00       	mov    edx,0x0
c0017c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ca3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017ca7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017cae:	25 ff 00 00 00       	and    eax,0xff
c0017cb3:	83 e0 10             	and    eax,0x10
c0017cb6:	74 08                	je     c0017cc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017cb8:	b8 02 00 00 00       	mov    eax,0x2
c0017cbd:	eb 09                	jmp    c0017cc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017cbf:	90                   	nop
c0017cc0:	b8 01 00 00 00       	mov    eax,0x1
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ccc:	83 ec 08             	sub    esp,0x8
c0017ccf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017cd6:	83 c0 16             	add    eax,0x16
c0017cd9:	50                   	push   eax
c0017cda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017cde:	83 c0 10             	add    eax,0x10
c0017ce1:	50                   	push   eax
c0017ce2:	e8 09 89 fe ff       	call   c00005f0 <strcpy>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017cf1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017cf8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017cfc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017d03:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017d0a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017d11:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017d18:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017d1f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017d26:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017d2d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017d34:	89 c6                	mov    esi,eax
c0017d36:	89 d7                	mov    edi,edx
c0017d38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d3a:	89 c8                	mov    eax,ecx
c0017d3c:	89 fa                	mov    edx,edi
c0017d3e:	89 f3                	mov    ebx,esi
c0017d40:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017d47:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017d4e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017d55:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017d5c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017d62:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017d69:	84 c0                	test   al,al
c0017d6b:	75 07                	jne    c0017d74 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017d6d:	b8 07 00 00 00       	mov    eax,0x7
c0017d72:	eb 1c                	jmp    c0017d90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017d74:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017d7b:	85 c0                	test   eax,eax
c0017d7d:	75 09                	jne    c0017d88 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017d7f:	b8 00 00 00 00       	mov    eax,0x0
c0017d84:	eb 0a                	jmp    c0017d90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017d86:	66 90                	xchg   ax,ax
c0017d88:	b8 01 00 00 00       	mov    eax,0x1
c0017d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d90:	81 c4 50 02 00 00    	add    esp,0x250
c0017d96:	5b                   	pop    ebx
c0017d97:	5e                   	pop    esi
c0017d98:	5f                   	pop    edi
c0017d99:	c3                   	ret    
c0017d9a:	66 90                	xchg   ax,ax

c0017d9c <FAT::read(void*, unsigned long, void*, int*)>:
c0017d9c:	83 ec 1c             	sub    esp,0x1c
c0017d9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017da4:	74 0a                	je     c0017db0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017da6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017dab:	75 0b                	jne    c0017db8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017dad:	8d 76 00             	lea    esi,[esi+0x0]
c0017db0:	b8 04 00 00 00       	mov    eax,0x4
c0017db5:	eb 41                	jmp    c0017df8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017db7:	90                   	nop
c0017db8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dbc:	50                   	push   eax
c0017dbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017dc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017dc9:	e8 0a c0 fe ff       	call   c0003dd8 <f_read>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd9:	89 c2                	mov    edx,eax
c0017ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ddf:	89 10                	mov    DWORD PTR [eax],edx
c0017de1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de5:	85 c0                	test   eax,eax
c0017de7:	75 07                	jne    c0017df0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017de9:	b8 00 00 00 00       	mov    eax,0x0
c0017dee:	eb 08                	jmp    c0017df8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017df0:	b8 01 00 00 00       	mov    eax,0x1
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	83 c4 1c             	add    esp,0x1c
c0017dfb:	c3                   	ret    

c0017dfc <FAT::write(void*, unsigned long, void*, int*)>:
c0017dfc:	83 ec 1c             	sub    esp,0x1c
c0017dff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017e04:	74 0a                	je     c0017e10 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0017e06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017e0b:	75 0b                	jne    c0017e18 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0017e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e10:	b8 04 00 00 00       	mov    eax,0x4
c0017e15:	eb 41                	jmp    c0017e58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017e17:	90                   	nop
c0017e18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e1c:	50                   	push   eax
c0017e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017e25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e29:	e8 a9 c1 fe ff       	call   c0003fd7 <f_write>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e39:	89 c2                	mov    edx,eax
c0017e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e3f:	89 10                	mov    DWORD PTR [eax],edx
c0017e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e45:	85 c0                	test   eax,eax
c0017e47:	75 07                	jne    c0017e50 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0017e49:	b8 00 00 00 00       	mov    eax,0x0
c0017e4e:	eb 08                	jmp    c0017e58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017e50:	b8 01 00 00 00       	mov    eax,0x1
c0017e55:	8d 76 00             	lea    esi,[esi+0x0]
c0017e58:	83 c4 1c             	add    esp,0x1c
c0017e5b:	c3                   	ret    

c0017e5c <FAT::close(void*)>:
c0017e5c:	83 ec 1c             	sub    esp,0x1c
c0017e5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017e64:	75 0a                	jne    c0017e70 <FAT::close(void*)+0x14>
c0017e66:	b8 04 00 00 00       	mov    eax,0x4
c0017e6b:	eb 3f                	jmp    c0017eac <FAT::close(void*)+0x50>
c0017e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e70:	83 ec 0c             	sub    esp,0xc
c0017e73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e77:	e8 44 c4 fe ff       	call   c00042c0 <f_close>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e8a:	e8 e6 f9 fe ff       	call   c0007875 <free>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e96:	85 c0                	test   eax,eax
c0017e98:	75 0a                	jne    c0017ea4 <FAT::close(void*)+0x48>
c0017e9a:	b8 00 00 00 00       	mov    eax,0x0
c0017e9f:	eb 0b                	jmp    c0017eac <FAT::close(void*)+0x50>
c0017ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ea4:	b8 01 00 00 00       	mov    eax,0x1
c0017ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0017eac:	83 c4 1c             	add    esp,0x1c
c0017eaf:	c3                   	ret    

c0017eb0 <FAT::closeDir(void*)>:
c0017eb0:	83 ec 1c             	sub    esp,0x1c
c0017eb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017eb8:	75 0a                	jne    c0017ec4 <FAT::closeDir(void*)+0x14>
c0017eba:	b8 04 00 00 00       	mov    eax,0x4
c0017ebf:	eb 3f                	jmp    c0017f00 <FAT::closeDir(void*)+0x50>
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ecb:	e8 91 c6 fe ff       	call   c0004561 <f_closedir>
c0017ed0:	83 c4 10             	add    esp,0x10
c0017ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ed7:	83 ec 0c             	sub    esp,0xc
c0017eda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ede:	e8 92 f9 fe ff       	call   c0007875 <free>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eea:	85 c0                	test   eax,eax
c0017eec:	75 0a                	jne    c0017ef8 <FAT::closeDir(void*)+0x48>
c0017eee:	b8 00 00 00 00       	mov    eax,0x0
c0017ef3:	eb 0b                	jmp    c0017f00 <FAT::closeDir(void*)+0x50>
c0017ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef8:	b8 01 00 00 00       	mov    eax,0x1
c0017efd:	8d 76 00             	lea    esi,[esi+0x0]
c0017f00:	83 c4 1c             	add    esp,0x1c
c0017f03:	c3                   	ret    

c0017f04 <FAT::seek(void*, unsigned long long)>:
c0017f04:	83 ec 2c             	sub    esp,0x2c
c0017f07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017f0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f17:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017f1c:	75 0a                	jne    c0017f28 <FAT::seek(void*, unsigned long long)+0x24>
c0017f1e:	b8 04 00 00 00       	mov    eax,0x4
c0017f23:	eb 33                	jmp    c0017f58 <FAT::seek(void*, unsigned long long)+0x54>
c0017f25:	8d 76 00             	lea    esi,[esi+0x0]
c0017f28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f2c:	83 ec 08             	sub    esp,0x8
c0017f2f:	50                   	push   eax
c0017f30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017f34:	e8 b6 c3 fe ff       	call   c00042ef <f_lseek>
c0017f39:	83 c4 10             	add    esp,0x10
c0017f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f44:	85 c0                	test   eax,eax
c0017f46:	75 08                	jne    c0017f50 <FAT::seek(void*, unsigned long long)+0x4c>
c0017f48:	b8 00 00 00 00       	mov    eax,0x0
c0017f4d:	eb 09                	jmp    c0017f58 <FAT::seek(void*, unsigned long long)+0x54>
c0017f4f:	90                   	nop
c0017f50:	b8 01 00 00 00       	mov    eax,0x1
c0017f55:	8d 76 00             	lea    esi,[esi+0x0]
c0017f58:	83 c4 2c             	add    esp,0x2c
c0017f5b:	c3                   	ret    

c0017f5c <fatWrapperReadDisk>:
c0017f5c:	53                   	push   ebx
c0017f5d:	83 ec 18             	sub    esp,0x18
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f6c:	25 ff 00 00 00       	and    eax,0xff
c0017f71:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017f78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017f7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f80:	ba 00 00 00 00       	mov    edx,0x0
c0017f85:	83 ec 0c             	sub    esp,0xc
c0017f88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017f8c:	53                   	push   ebx
c0017f8d:	52                   	push   edx
c0017f8e:	50                   	push   eax
c0017f8f:	51                   	push   ecx
c0017f90:	e8 b5 4d ff ff       	call   c000cd4a <LogicalDisk::read(unsigned long long, int, void*)>
c0017f95:	83 c4 20             	add    esp,0x20
c0017f98:	83 c4 18             	add    esp,0x18
c0017f9b:	5b                   	pop    ebx
c0017f9c:	c3                   	ret    
c0017f9d:	8d 76 00             	lea    esi,[esi+0x0]

c0017fa0 <fatWrapperWriteDisk>:
c0017fa0:	53                   	push   ebx
c0017fa1:	83 ec 18             	sub    esp,0x18
c0017fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fb0:	25 ff 00 00 00       	and    eax,0xff
c0017fb5:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017fbc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017fc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc4:	ba 00 00 00 00       	mov    edx,0x0
c0017fc9:	83 ec 0c             	sub    esp,0xc
c0017fcc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017fd0:	53                   	push   ebx
c0017fd1:	52                   	push   edx
c0017fd2:	50                   	push   eax
c0017fd3:	51                   	push   ecx
c0017fd4:	e8 dd 4d ff ff       	call   c000cdb6 <LogicalDisk::write(unsigned long long, int, void*)>
c0017fd9:	83 c4 20             	add    esp,0x20
c0017fdc:	83 c4 18             	add    esp,0x18
c0017fdf:	5b                   	pop    ebx
c0017fe0:	c3                   	ret    
c0017fe1:	8d 76 00             	lea    esi,[esi+0x0]

c0017fe4 <fatWrapperIoctl>:
c0017fe4:	53                   	push   ebx
c0017fe5:	83 ec 28             	sub    esp,0x28
c0017fe8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ff0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017ff4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ff8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017ffd:	75 35                	jne    c0018034 <fatWrapperIoctl+0x50>
c0017fff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018003:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018007:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001800b:	25 ff 00 00 00       	and    eax,0xff
c0018010:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018017:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001801d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018023:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018027:	66 89 02             	mov    WORD PTR [edx],ax
c001802a:	b8 00 00 00 00       	mov    eax,0x0
c001802f:	e9 c4 00 00 00       	jmp    c00180f8 <fatWrapperIoctl+0x114>
c0018034:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0018039:	75 75                	jne    c00180b0 <fatWrapperIoctl+0xcc>
c001803b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001803f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018043:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018047:	25 ff 00 00 00       	and    eax,0xff
c001804c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018053:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018059:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001805f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018065:	89 c8                	mov    eax,ecx
c0018067:	89 da                	mov    edx,ebx
c0018069:	0f a4 c2 0a          	shld   edx,eax,0xa
c001806d:	c1 e0 0a             	shl    eax,0xa
c0018070:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018074:	81 e1 ff 00 00 00    	and    ecx,0xff
c001807a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0018081:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018087:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001808d:	89 cb                	mov    ebx,ecx
c001808f:	c1 fb 1f             	sar    ebx,0x1f
c0018092:	53                   	push   ebx
c0018093:	51                   	push   ecx
c0018094:	52                   	push   edx
c0018095:	50                   	push   eax
c0018096:	e8 15 5a 00 00       	call   c001dab0 <__udivdi3>
c001809b:	83 c4 10             	add    esp,0x10
c001809e:	89 c2                	mov    edx,eax
c00180a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180a4:	89 10                	mov    DWORD PTR [eax],edx
c00180a6:	b8 00 00 00 00       	mov    eax,0x0
c00180ab:	eb 4b                	jmp    c00180f8 <fatWrapperIoctl+0x114>
c00180ad:	8d 76 00             	lea    esi,[esi+0x0]
c00180b0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00180b5:	75 09                	jne    c00180c0 <fatWrapperIoctl+0xdc>
c00180b7:	b8 00 00 00 00       	mov    eax,0x0
c00180bc:	eb 3a                	jmp    c00180f8 <fatWrapperIoctl+0x114>
c00180be:	66 90                	xchg   ax,ax
c00180c0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00180c5:	75 19                	jne    c00180e0 <fatWrapperIoctl+0xfc>
c00180c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00180d9:	b8 00 00 00 00       	mov    eax,0x0
c00180de:	eb 18                	jmp    c00180f8 <fatWrapperIoctl+0x114>
c00180e0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00180e5:	75 09                	jne    c00180f0 <fatWrapperIoctl+0x10c>
c00180e7:	b8 00 00 00 00       	mov    eax,0x0
c00180ec:	eb 0a                	jmp    c00180f8 <fatWrapperIoctl+0x114>
c00180ee:	66 90                	xchg   ax,ax
c00180f0:	b8 04 00 00 00       	mov    eax,0x4
c00180f5:	8d 76 00             	lea    esi,[esi+0x0]
c00180f8:	83 c4 28             	add    esp,0x28
c00180fb:	5b                   	pop    ebx
c00180fc:	c3                   	ret    
c00180fd:	90                   	nop
c00180fe:	66 90                	xchg   ax,ax

c0018100 <FAT::FAT()>:
c0018100:	83 ec 1c             	sub    esp,0x1c
c0018103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018107:	83 ec 0c             	sub    esp,0xc
c001810a:	50                   	push   eax
c001810b:	e8 0c 28 ff ff       	call   c000a91c <Filesystem::Filesystem()>
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	ba 2c 0a 02 c0       	mov    edx,0xc0020a2c
c0018118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811c:	89 10                	mov    DWORD PTR [eax],edx
c001811e:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0018128:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018130:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018135:	7f 15                	jg     c001814c <FAT::FAT()+0x4c>
c0018137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001813b:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c0018146:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001814a:	eb e4                	jmp    c0018130 <FAT::FAT()+0x30>
c001814c:	90                   	nop
c001814d:	83 c4 1c             	add    esp,0x1c
c0018150:	c3                   	ret    
c0018151:	90                   	nop
c0018152:	66 90                	xchg   ax,ax

c0018154 <FAT::fixFilepath(char*)>:
c0018154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018158:	8a 00                	mov    al,BYTE PTR [eax]
c001815a:	3c 40                	cmp    al,0x40
c001815c:	7e 2e                	jle    c001818c <FAT::fixFilepath(char*)+0x38>
c001815e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018162:	8a 00                	mov    al,BYTE PTR [eax]
c0018164:	83 e8 41             	sub    eax,0x41
c0018167:	88 c2                	mov    dl,al
c0018169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001816d:	88 10                	mov    BYTE PTR [eax],dl
c001816f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018173:	8a 00                	mov    al,BYTE PTR [eax]
c0018175:	0f be c0             	movsx  eax,al
c0018178:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001817f:	83 c0 30             	add    eax,0x30
c0018182:	88 c2                	mov    dl,al
c0018184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018188:	88 10                	mov    BYTE PTR [eax],dl
c001818a:	66 90                	xchg   ax,ax
c001818c:	90                   	nop
c001818d:	c3                   	ret    
c001818e:	66 90                	xchg   ax,ax

c0018190 <FAT::open(char const*, void**, FileOpenMode)>:
c0018190:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018196:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001819e:	74 0c                	je     c00181ac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00181a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00181a8:	75 0e                	jne    c00181b8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00181aa:	66 90                	xchg   ax,ax
c00181ac:	b8 04 00 00 00       	mov    eax,0x4
c00181b1:	e9 0a 01 00 00       	jmp    c00182c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00181b6:	66 90                	xchg   ax,ax
c00181b8:	83 ec 08             	sub    esp,0x8
c00181bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00181c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00181c6:	50                   	push   eax
c00181c7:	e8 24 84 fe ff       	call   c00005f0 <strcpy>
c00181cc:	83 c4 10             	add    esp,0x10
c00181cf:	83 ec 08             	sub    esp,0x8
c00181d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00181d6:	50                   	push   eax
c00181d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00181de:	e8 71 ff ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00181ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00181f5:	83 e0 01             	and    eax,0x1
c00181f8:	74 0a                	je     c0018204 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00181fa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0018202:	66 90                	xchg   ax,ax
c0018204:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001820b:	83 e0 04             	and    eax,0x4
c001820e:	74 10                	je     c0018220 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018210:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018218:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018220:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018227:	83 e0 02             	and    eax,0x2
c001822a:	74 08                	je     c0018234 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001822c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018234:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001823b:	83 e0 08             	and    eax,0x8
c001823e:	74 08                	je     c0018248 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018240:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018248:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001824f:	83 e0 10             	and    eax,0x10
c0018252:	74 08                	je     c001825c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018254:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	68 28 02 00 00       	push   0x228
c0018264:	e8 fc f5 fe ff       	call   c0007865 <malloc>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	89 c2                	mov    edx,eax
c001826e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018275:	89 10                	mov    DWORD PTR [eax],edx
c0018277:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001827e:	31 d2                	xor    edx,edx
c0018280:	88 c2                	mov    dl,al
c0018282:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018289:	8b 00                	mov    eax,DWORD PTR [eax]
c001828b:	83 ec 04             	sub    esp,0x4
c001828e:	52                   	push   edx
c001828f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018293:	52                   	push   edx
c0018294:	50                   	push   eax
c0018295:	e8 73 b8 fe ff       	call   c0003b0d <f_open>
c001829a:	83 c4 10             	add    esp,0x10
c001829d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00182a4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00182ac:	74 0a                	je     c00182b8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00182ae:	b8 01 00 00 00       	mov    eax,0x1
c00182b3:	eb 0b                	jmp    c00182c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00182b5:	8d 76 00             	lea    esi,[esi+0x0]
c00182b8:	b8 00 00 00 00       	mov    eax,0x0
c00182bd:	8d 76 00             	lea    esi,[esi+0x0]
c00182c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00182c6:	c3                   	ret    
c00182c7:	90                   	nop

c00182c8 <FAT::openDir(char const*, void**)>:
c00182c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00182ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00182d6:	74 0c                	je     c00182e4 <FAT::openDir(char const*, void**)+0x1c>
c00182d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00182e0:	75 0e                	jne    c00182f0 <FAT::openDir(char const*, void**)+0x28>
c00182e2:	66 90                	xchg   ax,ax
c00182e4:	b8 04 00 00 00       	mov    eax,0x4
c00182e9:	e9 82 00 00 00       	jmp    c0018370 <FAT::openDir(char const*, void**)+0xa8>
c00182ee:	66 90                	xchg   ax,ax
c00182f0:	83 ec 08             	sub    esp,0x8
c00182f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182fe:	50                   	push   eax
c00182ff:	e8 ec 82 fe ff       	call   c00005f0 <strcpy>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	83 ec 08             	sub    esp,0x8
c001830a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001830e:	50                   	push   eax
c001830f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018316:	e8 39 fe ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	83 ec 0c             	sub    esp,0xc
c0018321:	6a 30                	push   0x30
c0018323:	e8 3d f5 fe ff       	call   c0007865 <malloc>
c0018328:	83 c4 10             	add    esp,0x10
c001832b:	89 c2                	mov    edx,eax
c001832d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018334:	89 10                	mov    DWORD PTR [eax],edx
c0018336:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001833d:	8b 00                	mov    eax,DWORD PTR [eax]
c001833f:	83 ec 08             	sub    esp,0x8
c0018342:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018346:	52                   	push   edx
c0018347:	50                   	push   eax
c0018348:	e8 49 c1 fe ff       	call   c0004496 <f_opendir>
c001834d:	83 c4 10             	add    esp,0x10
c0018350:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018357:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001835f:	74 07                	je     c0018368 <FAT::openDir(char const*, void**)+0xa0>
c0018361:	b8 01 00 00 00       	mov    eax,0x1
c0018366:	eb 08                	jmp    c0018370 <FAT::openDir(char const*, void**)+0xa8>
c0018368:	b8 00 00 00 00       	mov    eax,0x0
c001836d:	8d 76 00             	lea    esi,[esi+0x0]
c0018370:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018376:	c3                   	ret    
c0018377:	90                   	nop

c0018378 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018378:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001837e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018386:	75 0c                	jne    c0018394 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018388:	b8 04 00 00 00       	mov    eax,0x4
c001838d:	e9 d6 00 00 00       	jmp    c0018468 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018392:	66 90                	xchg   ax,ax
c0018394:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001839c:	75 0a                	jne    c00183a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001839e:	b8 04 00 00 00       	mov    eax,0x4
c00183a3:	e9 c0 00 00 00       	jmp    c0018468 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00183a8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00183b0:	75 0a                	jne    c00183bc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00183b2:	b8 04 00 00 00       	mov    eax,0x4
c00183b7:	e9 ac 00 00 00       	jmp    c0018468 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00183bc:	83 ec 08             	sub    esp,0x8
c00183bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00183c6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00183cd:	50                   	push   eax
c00183ce:	e8 1d 82 fe ff       	call   c00005f0 <strcpy>
c00183d3:	83 c4 10             	add    esp,0x10
c00183d6:	83 ec 08             	sub    esp,0x8
c00183d9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00183e0:	50                   	push   eax
c00183e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00183e8:	e8 67 fd ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	83 ec 08             	sub    esp,0x8
c00183f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183f7:	50                   	push   eax
c00183f8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00183ff:	50                   	push   eax
c0018400:	e8 10 c2 fe ff       	call   c0004615 <f_stat>
c0018405:	83 c4 10             	add    esp,0x10
c0018408:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001840f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018416:	85 c0                	test   eax,eax
c0018418:	74 0a                	je     c0018424 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001841a:	83 f8 04             	cmp    eax,0x4
c001841d:	74 39                	je     c0018458 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001841f:	eb 3f                	jmp    c0018460 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018421:	8d 76 00             	lea    esi,[esi+0x0]
c0018424:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018428:	25 ff 00 00 00       	and    eax,0xff
c001842d:	83 e0 10             	and    eax,0x10
c0018430:	0f 95 c2             	setne  dl
c0018433:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001843a:	88 10                	mov    BYTE PTR [eax],dl
c001843c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018440:	ba 00 00 00 00       	mov    edx,0x0
c0018445:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001844c:	89 01                	mov    DWORD PTR [ecx],eax
c001844e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018451:	b8 00 00 00 00       	mov    eax,0x0
c0018456:	eb 10                	jmp    c0018468 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018458:	b8 02 00 00 00       	mov    eax,0x2
c001845d:	eb 09                	jmp    c0018468 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001845f:	90                   	nop
c0018460:	b8 01 00 00 00       	mov    eax,0x1
c0018465:	8d 76 00             	lea    esi,[esi+0x0]
c0018468:	81 c4 2c 02 00 00    	add    esp,0x22c
c001846e:	c3                   	ret    
c001846f:	90                   	nop

c0018470 <FAT::unlink(char const*)>:
c0018470:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018476:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001847e:	75 08                	jne    c0018488 <FAT::unlink(char const*)+0x18>
c0018480:	b8 04 00 00 00       	mov    eax,0x4
c0018485:	eb 61                	jmp    c00184e8 <FAT::unlink(char const*)+0x78>
c0018487:	90                   	nop
c0018488:	83 ec 08             	sub    esp,0x8
c001848b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018492:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018496:	50                   	push   eax
c0018497:	e8 54 81 fe ff       	call   c00005f0 <strcpy>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	83 ec 08             	sub    esp,0x8
c00184a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00184a6:	50                   	push   eax
c00184a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00184ae:	e8 a1 fc ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	83 ec 0c             	sub    esp,0xc
c00184b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184bd:	50                   	push   eax
c00184be:	e8 b7 c3 fe ff       	call   c000487a <f_unlink>
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00184cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00184d4:	85 c0                	test   eax,eax
c00184d6:	75 08                	jne    c00184e0 <FAT::unlink(char const*)+0x70>
c00184d8:	b8 00 00 00 00       	mov    eax,0x0
c00184dd:	eb 09                	jmp    c00184e8 <FAT::unlink(char const*)+0x78>
c00184df:	90                   	nop
c00184e0:	b8 01 00 00 00       	mov    eax,0x1
c00184e5:	8d 76 00             	lea    esi,[esi+0x0]
c00184e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00184ee:	c3                   	ret    
c00184ef:	90                   	nop

c00184f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00184f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00184f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00184fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018504:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018508:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001850c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018514:	75 0a                	jne    c0018520 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018516:	b8 04 00 00 00       	mov    eax,0x4
c001851b:	e9 54 01 00 00       	jmp    c0018674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018520:	83 ec 08             	sub    esp,0x8
c0018523:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001852a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001852e:	50                   	push   eax
c001852f:	e8 bc 80 fe ff       	call   c00005f0 <strcpy>
c0018534:	83 c4 10             	add    esp,0x10
c0018537:	83 ec 08             	sub    esp,0x8
c001853a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001853e:	50                   	push   eax
c001853f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018546:	e8 09 fc ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018556:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001855e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018562:	25 ff 00 00 00       	and    eax,0xff
c0018567:	83 e0 01             	and    eax,0x1
c001856a:	74 08                	je     c0018574 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001856c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018574:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018578:	25 ff 00 00 00       	and    eax,0xff
c001857d:	83 e0 02             	and    eax,0x2
c0018580:	74 0a                	je     c001858c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0018582:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001858a:	66 90                	xchg   ax,ax
c001858c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018590:	25 ff 00 00 00       	and    eax,0xff
c0018595:	83 e0 04             	and    eax,0x4
c0018598:	74 0a                	je     c00185a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001859a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00185a2:	66 90                	xchg   ax,ax
c00185a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00185a8:	25 ff 00 00 00       	and    eax,0xff
c00185ad:	83 e0 08             	and    eax,0x8
c00185b0:	74 0a                	je     c00185bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00185b2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00185ba:	66 90                	xchg   ax,ax
c00185bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185c0:	25 ff 00 00 00       	and    eax,0xff
c00185c5:	83 e0 01             	and    eax,0x1
c00185c8:	74 0a                	je     c00185d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00185ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00185d2:	66 90                	xchg   ax,ax
c00185d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185d8:	25 ff 00 00 00       	and    eax,0xff
c00185dd:	83 e0 02             	and    eax,0x2
c00185e0:	74 0a                	je     c00185ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00185e2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00185ea:	66 90                	xchg   ax,ax
c00185ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185f0:	25 ff 00 00 00       	and    eax,0xff
c00185f5:	83 e0 04             	and    eax,0x4
c00185f8:	74 0a                	je     c0018604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00185fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018602:	66 90                	xchg   ax,ax
c0018604:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018608:	25 ff 00 00 00       	and    eax,0xff
c001860d:	83 e0 08             	and    eax,0x8
c0018610:	74 0a                	je     c001861c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018612:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001861a:	66 90                	xchg   ax,ax
c001861c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018623:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001862a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018631:	31 d2                	xor    edx,edx
c0018633:	88 c2                	mov    dl,al
c0018635:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001863c:	25 ff 00 00 00       	and    eax,0xff
c0018641:	83 ec 04             	sub    esp,0x4
c0018644:	52                   	push   edx
c0018645:	50                   	push   eax
c0018646:	8d 44 24 24          	lea    eax,[esp+0x24]
c001864a:	50                   	push   eax
c001864b:	e8 9d c6 fe ff       	call   c0004ced <f_chmod>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001865a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018661:	85 c0                	test   eax,eax
c0018663:	75 07                	jne    c001866c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018665:	b8 00 00 00 00       	mov    eax,0x0
c001866a:	eb 08                	jmp    c0018674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001866c:	b8 01 00 00 00       	mov    eax,0x1
c0018671:	8d 76 00             	lea    esi,[esi+0x0]
c0018674:	81 c4 2c 01 00 00    	add    esp,0x12c
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <FAT::rename(char const*, char const*)>:
c001867c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018682:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001868a:	74 0c                	je     c0018698 <FAT::rename(char const*, char const*)+0x1c>
c001868c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018694:	75 0e                	jne    c00186a4 <FAT::rename(char const*, char const*)+0x28>
c0018696:	66 90                	xchg   ax,ax
c0018698:	b8 04 00 00 00       	mov    eax,0x4
c001869d:	e9 9e 00 00 00       	jmp    c0018740 <FAT::rename(char const*, char const*)+0xc4>
c00186a2:	66 90                	xchg   ax,ax
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00186ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00186b5:	50                   	push   eax
c00186b6:	e8 35 7f fe ff       	call   c00005f0 <strcpy>
c00186bb:	83 c4 10             	add    esp,0x10
c00186be:	83 ec 08             	sub    esp,0x8
c00186c1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00186c8:	50                   	push   eax
c00186c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00186d0:	e8 7f fa ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	83 ec 08             	sub    esp,0x8
c00186db:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00186e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186e6:	50                   	push   eax
c00186e7:	e8 04 7f fe ff       	call   c00005f0 <strcpy>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	83 ec 08             	sub    esp,0x8
c00186f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186f6:	50                   	push   eax
c00186f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00186fe:	e8 51 fa ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	83 ec 08             	sub    esp,0x8
c0018709:	8d 44 24 14          	lea    eax,[esp+0x14]
c001870d:	50                   	push   eax
c001870e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018715:	50                   	push   eax
c0018716:	e8 1c c4 fe ff       	call   c0004b37 <f_rename>
c001871b:	83 c4 10             	add    esp,0x10
c001871e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018725:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001872c:	85 c0                	test   eax,eax
c001872e:	75 08                	jne    c0018738 <FAT::rename(char const*, char const*)+0xbc>
c0018730:	b8 00 00 00 00       	mov    eax,0x0
c0018735:	eb 09                	jmp    c0018740 <FAT::rename(char const*, char const*)+0xc4>
c0018737:	90                   	nop
c0018738:	b8 01 00 00 00       	mov    eax,0x1
c001873d:	8d 76 00             	lea    esi,[esi+0x0]
c0018740:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018746:	c3                   	ret    
c0018747:	90                   	nop

c0018748 <FAT::mkdir(char const*)>:
c0018748:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001874e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018756:	75 08                	jne    c0018760 <FAT::mkdir(char const*)+0x18>
c0018758:	b8 04 00 00 00       	mov    eax,0x4
c001875d:	eb 61                	jmp    c00187c0 <FAT::mkdir(char const*)+0x78>
c001875f:	90                   	nop
c0018760:	83 ec 08             	sub    esp,0x8
c0018763:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001876a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001876e:	50                   	push   eax
c001876f:	e8 7c 7e fe ff       	call   c00005f0 <strcpy>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	83 ec 08             	sub    esp,0x8
c001877a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001877e:	50                   	push   eax
c001877f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018786:	e8 c9 f9 ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	83 ec 0c             	sub    esp,0xc
c0018791:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018795:	50                   	push   eax
c0018796:	e8 01 c2 fe ff       	call   c000499c <f_mkdir>
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00187a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00187ac:	85 c0                	test   eax,eax
c00187ae:	75 08                	jne    c00187b8 <FAT::mkdir(char const*)+0x70>
c00187b0:	b8 00 00 00 00       	mov    eax,0x0
c00187b5:	eb 09                	jmp    c00187c0 <FAT::mkdir(char const*)+0x78>
c00187b7:	90                   	nop
c00187b8:	b8 01 00 00 00       	mov    eax,0x1
c00187bd:	8d 76 00             	lea    esi,[esi+0x0]
c00187c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <FAT::exists(char const*)>:
c00187c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00187ce:	83 ec 08             	sub    esp,0x8
c00187d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00187dc:	50                   	push   eax
c00187dd:	e8 0e 7e fe ff       	call   c00005f0 <strcpy>
c00187e2:	83 c4 10             	add    esp,0x10
c00187e5:	83 ec 08             	sub    esp,0x8
c00187e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187ec:	50                   	push   eax
c00187ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187f4:	e8 5b f9 ff ff       	call   c0018154 <FAT::fixFilepath(char*)>
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	83 ec 08             	sub    esp,0x8
c00187ff:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018806:	50                   	push   eax
c0018807:	8d 44 24 10          	lea    eax,[esp+0x10]
c001880b:	50                   	push   eax
c001880c:	e8 04 be fe ff       	call   c0004615 <f_stat>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001881b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018822:	85 c0                	test   eax,eax
c0018824:	75 06                	jne    c001882c <FAT::exists(char const*)+0x64>
c0018826:	b0 01                	mov    al,0x1
c0018828:	eb 06                	jmp    c0018830 <FAT::exists(char const*)+0x68>
c001882a:	66 90                	xchg   ax,ax
c001882c:	b0 00                	mov    al,0x0
c001882e:	66 90                	xchg   ax,ax
c0018830:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018836:	c3                   	ret    
c0018837:	90                   	nop

c0018838 <isoReadDiscSectorHelper>:
c0018838:	83 ec 2c             	sub    esp,0x2c
c001883b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001883f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018843:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018848:	83 e8 41             	sub    eax,0x41
c001884b:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018852:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018856:	ba 00 00 00 00       	mov    edx,0x0
c001885b:	83 ec 0c             	sub    esp,0xc
c001885e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018862:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018866:	52                   	push   edx
c0018867:	50                   	push   eax
c0018868:	51                   	push   ecx
c0018869:	e8 dc 44 ff ff       	call   c000cd4a <LogicalDisk::read(unsigned long long, int, void*)>
c001886e:	83 c4 20             	add    esp,0x20
c0018871:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018875:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001887a:	74 0c                	je     c0018888 <isoReadDiscSectorHelper+0x50>
c001887c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018880:	c1 e0 0b             	shl    eax,0xb
c0018883:	eb 0b                	jmp    c0018890 <isoReadDiscSectorHelper+0x58>
c0018885:	8d 76 00             	lea    esi,[esi+0x0]
c0018888:	b8 00 00 00 00       	mov    eax,0x0
c001888d:	8d 76 00             	lea    esi,[esi+0x0]
c0018890:	83 c4 2c             	add    esp,0x2c
c0018893:	c3                   	ret    

c0018894 <iso_kprintf>:
c0018894:	83 ec 0c             	sub    esp,0xc
c0018897:	83 ec 08             	sub    esp,0x8
c001889a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001889e:	68 37 04 02 c0       	push   0xc0020437
c00188a3:	e8 52 1d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00188a8:	83 c4 10             	add    esp,0x10
c00188ab:	90                   	nop
c00188ac:	83 c4 0c             	add    esp,0xc
c00188af:	c3                   	ret    

c00188b0 <iso_kprintfd>:
c00188b0:	83 ec 0c             	sub    esp,0xc
c00188b3:	83 ec 08             	sub    esp,0x8
c00188b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00188ba:	68 3b f5 01 c0       	push   0xc001f53b
c00188bf:	e8 36 1d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	90                   	nop
c00188c8:	83 c4 0c             	add    esp,0xc
c00188cb:	c3                   	ret    

c00188cc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00188cc:	b8 08 00 00 00       	mov    eax,0x8
c00188d1:	c3                   	ret    

c00188d2 <ISO9660::getName()>:
c00188d2:	b8 8c 0a 02 c0       	mov    eax,0xc0020a8c
c00188d7:	c3                   	ret    

c00188d8 <ISO9660::closeDir(void*)>:
c00188d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00188de:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00188e1:	90                   	nop

c00188e2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00188e2:	b8 01 00 00 00       	mov    eax,0x1
c00188e7:	c3                   	ret    

c00188e8 <ISO9660::unlink(char const*)>:
c00188e8:	b8 01 00 00 00       	mov    eax,0x1
c00188ed:	c3                   	ret    

c00188ee <ISO9660::write(void*, unsigned long, void*, int*)>:
c00188ee:	b8 03 00 00 00       	mov    eax,0x3
c00188f3:	c3                   	ret    

c00188f4 <ISO9660::rename(char const*, char const*)>:
c00188f4:	b8 01 00 00 00       	mov    eax,0x1
c00188f9:	c3                   	ret    

c00188fa <ISO9660::mkdir(char const*)>:
c00188fa:	b8 01 00 00 00       	mov    eax,0x1
c00188ff:	c3                   	ret    

c0018900 <ISO9660::~ISO9660()>:
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	ba cc 0b 02 c0       	mov    edx,0xc0020bcc
c0018908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001890c:	89 10                	mov    DWORD PTR [eax],edx
c001890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018912:	83 ec 0c             	sub    esp,0xc
c0018915:	50                   	push   eax
c0018916:	e8 25 20 ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	90                   	nop
c001891f:	83 c4 0c             	add    esp,0xc
c0018922:	c3                   	ret    
c0018923:	90                   	nop

c0018924 <ISO9660::~ISO9660()>:
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	83 ec 0c             	sub    esp,0xc
c001892a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001892e:	e8 cd ff ff ff       	call   c0018900 <ISO9660::~ISO9660()>
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	83 ec 08             	sub    esp,0x8
c0018939:	6a 08                	push   0x8
c001893b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001893f:	e8 c0 1b ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	83 c4 0c             	add    esp,0xc
c001894a:	c3                   	ret    
c001894b:	90                   	nop

c001894c <ISO9660::exists(char const*)>:
c001894c:	83 ec 18             	sub    esp,0x18
c001894f:	68 a7 0a 02 c0       	push   0xc0020aa7
c0018954:	e8 62 7a ff ff       	call   c00103bb <KePanic(char const*)>
c0018959:	31 c0                	xor    eax,eax
c001895b:	83 c4 1c             	add    esp,0x1c
c001895e:	c3                   	ret    
c001895f:	90                   	nop

c0018960 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018960:	56                   	push   esi
c0018961:	53                   	push   ebx
c0018962:	53                   	push   ebx
c0018963:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018967:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001896b:	85 db                	test   ebx,ebx
c001896d:	0f 84 c2 00 00 00    	je     c0018a35 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018973:	85 f6                	test   esi,esi
c0018975:	0f 84 ba 00 00 00    	je     c0018a35 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c001897b:	b8 03 00 00 00       	mov    eax,0x3
c0018980:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018985:	0f 85 af 00 00 00    	jne    c0018a3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001898b:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018990:	38 03                	cmp    BYTE PTR [ebx],al
c0018992:	74 1b                	je     c00189af <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018994:	84 c0                	test   al,al
c0018996:	74 10                	je     c00189a8 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018998:	83 ec 0c             	sub    esp,0xc
c001899b:	68 c5 0a 02 c0       	push   0xc0020ac5
c00189a0:	e8 16 7a ff ff       	call   c00103bb <KePanic(char const*)>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	8a 03                	mov    al,BYTE PTR [ebx]
c00189aa:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00189af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00189b2:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00189b9:	85 c0                	test   eax,eax
c00189bb:	74 09                	je     c00189c6 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00189bd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00189c4:	74 48                	je     c0018a0e <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c00189c6:	83 ec 0c             	sub    esp,0xc
c00189c9:	68 d5 0a 02 c0       	push   0xc0020ad5
c00189ce:	e8 27 1c ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00189d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00189d6:	83 c4 10             	add    esp,0x10
c00189d9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00189e0:	85 c0                	test   eax,eax
c00189e2:	74 17                	je     c00189fb <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00189e4:	83 ec 0c             	sub    esp,0xc
c00189e7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00189ee:	68 f5 0a 02 c0       	push   0xc0020af5
c00189f3:	e8 02 1c ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00189f8:	83 c4 10             	add    esp,0x10
c00189fb:	83 ec 0c             	sub    esp,0xc
c00189fe:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018a05:	50                   	push   eax
c0018a06:	e8 40 de fe ff       	call   c000684b <init_percd>
c0018a0b:	83 c4 10             	add    esp,0x10
c0018a0e:	83 c3 03             	add    ebx,0x3
c0018a11:	51                   	push   ecx
c0018a12:	51                   	push   ecx
c0018a13:	6a 00                	push   0x0
c0018a15:	53                   	push   ebx
c0018a16:	e8 f8 d8 fe ff       	call   c0006313 <iso_open>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	89 c2                	mov    edx,eax
c0018a20:	b8 01 00 00 00       	mov    eax,0x1
c0018a25:	83 fa ff             	cmp    edx,0xffffffff
c0018a28:	74 10                	je     c0018a3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018a2a:	83 c2 32             	add    edx,0x32
c0018a2d:	31 c0                	xor    eax,eax
c0018a2f:	01 d2                	add    edx,edx
c0018a31:	89 16                	mov    DWORD PTR [esi],edx
c0018a33:	eb 05                	jmp    c0018a3a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018a35:	b8 04 00 00 00       	mov    eax,0x4
c0018a3a:	5a                   	pop    edx
c0018a3b:	5b                   	pop    ebx
c0018a3c:	5e                   	pop    esi
c0018a3d:	c3                   	ret    

c0018a3e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018a3e:	53                   	push   ebx
c0018a3f:	83 ec 08             	sub    esp,0x8
c0018a42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018a4a:	85 c0                	test   eax,eax
c0018a4c:	74 2d                	je     c0018a7b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018a4e:	85 db                	test   ebx,ebx
c0018a50:	74 29                	je     c0018a7b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018a52:	b9 02 00 00 00       	mov    ecx,0x2
c0018a57:	52                   	push   edx
c0018a58:	99                   	cdq    
c0018a59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a5d:	f7 f9                	idiv   ecx
c0018a5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018a63:	83 e8 32             	sub    eax,0x32
c0018a66:	50                   	push   eax
c0018a67:	e8 4f d9 fe ff       	call   c00063bb <iso_read>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	89 03                	mov    DWORD PTR [ebx],eax
c0018a71:	09 d0                	or     eax,edx
c0018a73:	0f 94 c0             	sete   al
c0018a76:	0f b6 c0             	movzx  eax,al
c0018a79:	eb 05                	jmp    c0018a80 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018a7b:	b8 04 00 00 00       	mov    eax,0x4
c0018a80:	83 c4 08             	add    esp,0x8
c0018a83:	5b                   	pop    ebx
c0018a84:	c3                   	ret    
c0018a85:	90                   	nop

c0018a86 <ISO9660::seek(void*, unsigned long long)>:
c0018a86:	57                   	push   edi
c0018a87:	56                   	push   esi
c0018a88:	b8 04 00 00 00       	mov    eax,0x4
c0018a8d:	51                   	push   ecx
c0018a8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a92:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018a96:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a9a:	85 d2                	test   edx,edx
c0018a9c:	74 26                	je     c0018ac4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018a9e:	6a 00                	push   0x0
c0018aa0:	b9 02 00 00 00       	mov    ecx,0x2
c0018aa5:	57                   	push   edi
c0018aa6:	89 d0                	mov    eax,edx
c0018aa8:	56                   	push   esi
c0018aa9:	99                   	cdq    
c0018aaa:	f7 f9                	idiv   ecx
c0018aac:	83 e8 32             	sub    eax,0x32
c0018aaf:	50                   	push   eax
c0018ab0:	e8 1c da fe ff       	call   c00064d1 <iso_seek>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	31 f0                	xor    eax,esi
c0018aba:	31 fa                	xor    edx,edi
c0018abc:	09 d0                	or     eax,edx
c0018abe:	0f 95 c0             	setne  al
c0018ac1:	0f b6 c0             	movzx  eax,al
c0018ac4:	5a                   	pop    edx
c0018ac5:	5e                   	pop    esi
c0018ac6:	5f                   	pop    edi
c0018ac7:	c3                   	ret    

c0018ac8 <ISO9660::tell(void*, unsigned long long*)>:
c0018ac8:	53                   	push   ebx
c0018ac9:	83 ec 08             	sub    esp,0x8
c0018acc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ad0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ad4:	85 c0                	test   eax,eax
c0018ad6:	74 24                	je     c0018afc <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018ad8:	85 db                	test   ebx,ebx
c0018ada:	74 20                	je     c0018afc <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018adc:	83 ec 0c             	sub    esp,0xc
c0018adf:	b9 02 00 00 00       	mov    ecx,0x2
c0018ae4:	99                   	cdq    
c0018ae5:	f7 f9                	idiv   ecx
c0018ae7:	83 e8 32             	sub    eax,0x32
c0018aea:	50                   	push   eax
c0018aeb:	e8 65 da fe ff       	call   c0006555 <iso_tell>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	89 03                	mov    DWORD PTR [ebx],eax
c0018af5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018af8:	31 c0                	xor    eax,eax
c0018afa:	eb 05                	jmp    c0018b01 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018afc:	b8 04 00 00 00       	mov    eax,0x4
c0018b01:	83 c4 08             	add    esp,0x8
c0018b04:	5b                   	pop    ebx
c0018b05:	c3                   	ret    

c0018b06 <ISO9660::stat(void*, unsigned long long*)>:
c0018b06:	53                   	push   ebx
c0018b07:	83 ec 14             	sub    esp,0x14
c0018b0a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018b0e:	68 19 0b 02 c0       	push   0xc0020b19
c0018b13:	e8 e2 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018b18:	83 c4 10             	add    esp,0x10
c0018b1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018b20:	74 2c                	je     c0018b4e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018b22:	85 db                	test   ebx,ebx
c0018b24:	74 28                	je     c0018b4e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018b26:	83 ec 0c             	sub    esp,0xc
c0018b29:	b9 02 00 00 00       	mov    ecx,0x2
c0018b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b32:	99                   	cdq    
c0018b33:	f7 f9                	idiv   ecx
c0018b35:	83 e8 32             	sub    eax,0x32
c0018b38:	50                   	push   eax
c0018b39:	e8 48 da fe ff       	call   c0006586 <iso_total>
c0018b3e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018b45:	89 03                	mov    DWORD PTR [ebx],eax
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	31 c0                	xor    eax,eax
c0018b4c:	eb 05                	jmp    c0018b53 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018b4e:	b8 04 00 00 00       	mov    eax,0x4
c0018b53:	83 c4 08             	add    esp,0x8
c0018b56:	5b                   	pop    ebx
c0018b57:	c3                   	ret    

c0018b58 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018b58:	55                   	push   ebp
c0018b59:	57                   	push   edi
c0018b5a:	56                   	push   esi
c0018b5b:	53                   	push   ebx
c0018b5c:	83 ec 18             	sub    esp,0x18
c0018b5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018b63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018b67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b6b:	68 21 0b 02 c0       	push   0xc0020b21
c0018b70:	e8 85 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	85 ff                	test   edi,edi
c0018b7a:	0f 94 c2             	sete   dl
c0018b7d:	85 f6                	test   esi,esi
c0018b7f:	0f 94 c0             	sete   al
c0018b82:	08 c2                	or     dl,al
c0018b84:	0f 85 d5 00 00 00    	jne    c0018c5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018b8a:	85 db                	test   ebx,ebx
c0018b8c:	0f 84 cd 00 00 00    	je     c0018c5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018b92:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018b95:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018b9b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018ba2:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018ba7:	38 03                	cmp    BYTE PTR [ebx],al
c0018ba9:	74 1b                	je     c0018bc6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018bab:	84 c0                	test   al,al
c0018bad:	74 10                	je     c0018bbf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018baf:	83 ec 0c             	sub    esp,0xc
c0018bb2:	68 c5 0a 02 c0       	push   0xc0020ac5
c0018bb7:	e8 ff 77 ff ff       	call   c00103bb <KePanic(char const*)>
c0018bbc:	83 c4 10             	add    esp,0x10
c0018bbf:	8a 03                	mov    al,BYTE PTR [ebx]
c0018bc1:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018bc6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018bc9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018bd0:	85 c0                	test   eax,eax
c0018bd2:	74 09                	je     c0018bdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018bd4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018bdb:	74 51                	je     c0018c2e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018bdd:	83 ec 0c             	sub    esp,0xc
c0018be0:	68 29 0b 02 c0       	push   0xc0020b29
c0018be5:	e8 10 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018bea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018bf8:	74 21                	je     c0018c1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018bfa:	83 ec 0c             	sub    esp,0xc
c0018bfd:	68 49 0b 02 c0       	push   0xc0020b49
c0018c02:	e8 f3 19 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018c07:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018c0a:	83 c4 10             	add    esp,0x10
c0018c0d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018c14:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018c1b:	83 ec 0c             	sub    esp,0xc
c0018c1e:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018c25:	50                   	push   eax
c0018c26:	e8 20 dc fe ff       	call   c000684b <init_percd>
c0018c2b:	83 c4 10             	add    esp,0x10
c0018c2e:	83 c3 03             	add    ebx,0x3
c0018c31:	52                   	push   edx
c0018c32:	52                   	push   edx
c0018c33:	6a 00                	push   0x0
c0018c35:	53                   	push   ebx
c0018c36:	e8 d8 d6 fe ff       	call   c0006313 <iso_open>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	89 c5                	mov    ebp,eax
c0018c40:	83 f8 ff             	cmp    eax,0xffffffff
c0018c43:	75 21                	jne    c0018c66 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018c45:	50                   	push   eax
c0018c46:	50                   	push   eax
c0018c47:	6a 01                	push   0x1
c0018c49:	53                   	push   ebx
c0018c4a:	e8 c4 d6 fe ff       	call   c0006313 <iso_open>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	ba 02 00 00 00       	mov    edx,0x2
c0018c57:	40                   	inc    eax
c0018c58:	74 2b                	je     c0018c85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018c5a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018c5d:	eb 24                	jmp    c0018c83 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018c5f:	ba 04 00 00 00       	mov    edx,0x4
c0018c64:	eb 1f                	jmp    c0018c85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018c66:	83 ec 0c             	sub    esp,0xc
c0018c69:	50                   	push   eax
c0018c6a:	e8 17 d9 fe ff       	call   c0006586 <iso_total>
c0018c6f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018c76:	89 07                	mov    DWORD PTR [edi],eax
c0018c78:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018c7b:	e8 1d d7 fe ff       	call   c000639d <iso_close>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	31 d2                	xor    edx,edx
c0018c85:	83 c4 0c             	add    esp,0xc
c0018c88:	89 d0                	mov    eax,edx
c0018c8a:	5b                   	pop    ebx
c0018c8b:	5e                   	pop    esi
c0018c8c:	5f                   	pop    edi
c0018c8d:	5d                   	pop    ebp
c0018c8e:	c3                   	ret    
c0018c8f:	90                   	nop

c0018c90 <ISO9660::close(void*)>:
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	b8 04 00 00 00       	mov    eax,0x4
c0018c98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c9c:	85 d2                	test   edx,edx
c0018c9e:	74 1b                	je     c0018cbb <ISO9660::close(void*)+0x2b>
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	b9 02 00 00 00       	mov    ecx,0x2
c0018ca8:	89 d0                	mov    eax,edx
c0018caa:	99                   	cdq    
c0018cab:	f7 f9                	idiv   ecx
c0018cad:	83 e8 32             	sub    eax,0x32
c0018cb0:	50                   	push   eax
c0018cb1:	e8 e7 d6 fe ff       	call   c000639d <iso_close>
c0018cb6:	83 c4 10             	add    esp,0x10
c0018cb9:	31 c0                	xor    eax,eax
c0018cbb:	83 c4 0c             	add    esp,0xc
c0018cbe:	c3                   	ret    
c0018cbf:	90                   	nop

c0018cc0 <ISO9660::openDir(char const*, void**)>:
c0018cc0:	56                   	push   esi
c0018cc1:	53                   	push   ebx
c0018cc2:	50                   	push   eax
c0018cc3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018cc7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ccb:	85 db                	test   ebx,ebx
c0018ccd:	0f 84 b5 00 00 00    	je     c0018d88 <ISO9660::openDir(char const*, void**)+0xc8>
c0018cd3:	85 f6                	test   esi,esi
c0018cd5:	0f 84 ad 00 00 00    	je     c0018d88 <ISO9660::openDir(char const*, void**)+0xc8>
c0018cdb:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018ce0:	38 03                	cmp    BYTE PTR [ebx],al
c0018ce2:	74 1b                	je     c0018cff <ISO9660::openDir(char const*, void**)+0x3f>
c0018ce4:	84 c0                	test   al,al
c0018ce6:	74 10                	je     c0018cf8 <ISO9660::openDir(char const*, void**)+0x38>
c0018ce8:	83 ec 0c             	sub    esp,0xc
c0018ceb:	68 c5 0a 02 c0       	push   0xc0020ac5
c0018cf0:	e8 c6 76 ff ff       	call   c00103bb <KePanic(char const*)>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	8a 03                	mov    al,BYTE PTR [ebx]
c0018cfa:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018cff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018d02:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018d09:	85 c0                	test   eax,eax
c0018d0b:	74 10                	je     c0018d1d <ISO9660::openDir(char const*, void**)+0x5d>
c0018d0d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018d14:	74 1a                	je     c0018d30 <ISO9660::openDir(char const*, void**)+0x70>
c0018d16:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018d1d:	83 ec 0c             	sub    esp,0xc
c0018d20:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018d27:	50                   	push   eax
c0018d28:	e8 1e db fe ff       	call   c000684b <init_percd>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	83 c3 03             	add    ebx,0x3
c0018d33:	50                   	push   eax
c0018d34:	50                   	push   eax
c0018d35:	6a 01                	push   0x1
c0018d37:	53                   	push   ebx
c0018d38:	e8 d6 d5 fe ff       	call   c0006313 <iso_open>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	89 c3                	mov    ebx,eax
c0018d42:	83 f8 ff             	cmp    eax,0xffffffff
c0018d45:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018d4a:	75 1c                	jne    c0018d68 <ISO9660::openDir(char const*, void**)+0xa8>
c0018d4c:	53                   	push   ebx
c0018d4d:	53                   	push   ebx
c0018d4e:	68 6d 0b 02 c0       	push   0xc0020b6d
c0018d53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018d59:	e8 7e fa fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018d5e:	83 c4 10             	add    esp,0x10
c0018d61:	b8 01 00 00 00       	mov    eax,0x1
c0018d66:	eb 25                	jmp    c0018d8d <ISO9660::openDir(char const*, void**)+0xcd>
c0018d68:	01 db                	add    ebx,ebx
c0018d6a:	51                   	push   ecx
c0018d6b:	83 c3 65             	add    ebx,0x65
c0018d6e:	51                   	push   ecx
c0018d6f:	68 80 0b 02 c0       	push   0xc0020b80
c0018d74:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018d7a:	e8 5d fa fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018d7f:	89 1e                	mov    DWORD PTR [esi],ebx
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	31 c0                	xor    eax,eax
c0018d86:	eb 05                	jmp    c0018d8d <ISO9660::openDir(char const*, void**)+0xcd>
c0018d88:	b8 04 00 00 00       	mov    eax,0x4
c0018d8d:	5a                   	pop    edx
c0018d8e:	5b                   	pop    ebx
c0018d8f:	5e                   	pop    esi
c0018d90:	c3                   	ret    
c0018d91:	90                   	nop

c0018d92 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018d92:	55                   	push   ebp
c0018d93:	57                   	push   edi
c0018d94:	56                   	push   esi
c0018d95:	53                   	push   ebx
c0018d96:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d9c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0018da3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018daa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018db2:	0f 84 e7 00 00 00    	je     c0018e9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018db8:	85 db                	test   ebx,ebx
c0018dba:	0f 84 df 00 00 00    	je     c0018e9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	68 93 0b 02 c0       	push   0xc0020b93
c0018dc8:	e8 2d 18 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018dcd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018dd4:	b9 02 00 00 00       	mov    ecx,0x2
c0018dd9:	99                   	cdq    
c0018dda:	f7 f9                	idiv   ecx
c0018ddc:	83 e8 32             	sub    eax,0x32
c0018ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de2:	e8 f0 d7 fe ff       	call   c00065d7 <iso_readdir>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	89 c6                	mov    esi,eax
c0018dec:	85 c0                	test   eax,eax
c0018dee:	75 37                	jne    c0018e27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0018df0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018df5:	56                   	push   esi
c0018df6:	56                   	push   esi
c0018df7:	68 9e 0b 02 c0       	push   0xc0020b9e
c0018dfc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018e02:	e8 d5 f9 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018e07:	83 c4 0c             	add    esp,0xc
c0018e0a:	68 10 01 00 00       	push   0x110
c0018e0f:	6a 00                	push   0x0
c0018e11:	57                   	push   edi
c0018e12:	e8 a9 76 fe ff       	call   c00004c0 <memset>
c0018e17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	b8 01 00 00 00       	mov    eax,0x1
c0018e25:	eb 7d                	jmp    c0018ea4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018e27:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0018e2d:	8d 68 08             	lea    ebp,[eax+0x8]
c0018e30:	83 ec 0c             	sub    esp,0xc
c0018e33:	55                   	push   ebp
c0018e34:	e8 f7 76 fe ff       	call   c0000530 <strlen>
c0018e39:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018e41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e45:	83 c4 10             	add    esp,0x10
c0018e48:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0018e4c:	75 0a                	jne    c0018e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0018e4e:	b8 02 00 00 00       	mov    eax,0x2
c0018e53:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0018e56:	74 05                	je     c0018e5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0018e58:	b8 01 00 00 00       	mov    eax,0x1
c0018e5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e61:	50                   	push   eax
c0018e62:	50                   	push   eax
c0018e63:	55                   	push   ebp
c0018e64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e68:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0018e6c:	50                   	push   eax
c0018e6d:	e8 7e 77 fe ff       	call   c00005f0 <strcpy>
c0018e72:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0018e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e7b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0018e81:	5a                   	pop    edx
c0018e82:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018e87:	59                   	pop    ecx
c0018e88:	68 b1 0b 02 c0       	push   0xc0020bb1
c0018e8d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018e93:	e8 44 f9 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	31 c0                	xor    eax,eax
c0018e9d:	eb 05                	jmp    c0018ea4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018e9f:	b8 04 00 00 00       	mov    eax,0x4
c0018ea4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018eaa:	5b                   	pop    ebx
c0018eab:	5e                   	pop    esi
c0018eac:	5f                   	pop    edi
c0018ead:	5d                   	pop    ebp
c0018eae:	c3                   	ret    

c0018eaf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0018eaf:	57                   	push   edi
c0018eb0:	56                   	push   esi
c0018eb1:	53                   	push   ebx
c0018eb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018eb6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018eba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ebe:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c0018ec4:	75 08                	jne    c0018ece <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0018ec6:	38 1d e4 16 02 c0    	cmp    BYTE PTR ds:0xc00216e4,bl
c0018ecc:	74 4a                	je     c0018f18 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018ece:	83 ec 0c             	sub    esp,0xc
c0018ed1:	31 d2                	xor    edx,edx
c0018ed3:	68 40 73 02 c0       	push   0xc0027340
c0018ed8:	0f be c3             	movsx  eax,bl
c0018edb:	6a 01                	push   0x1
c0018edd:	52                   	push   edx
c0018ede:	56                   	push   esi
c0018edf:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c0018ee6:	e8 5f 3e ff ff       	call   c000cd4a <LogicalDisk::read(unsigned long long, int, void*)>
c0018eeb:	83 c4 20             	add    esp,0x20
c0018eee:	85 c0                	test   eax,eax
c0018ef0:	75 0e                	jne    c0018f00 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0018ef2:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c0018ef8:	88 1d e4 16 02 c0    	mov    BYTE PTR ds:0xc00216e4,bl
c0018efe:	eb 18                	jmp    c0018f18 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018f00:	50                   	push   eax
c0018f01:	68 00 08 00 00       	push   0x800
c0018f06:	6a 00                	push   0x0
c0018f08:	57                   	push   edi
c0018f09:	e8 b2 75 fe ff       	call   c00004c0 <memset>
c0018f0e:	83 c4 10             	add    esp,0x10
c0018f11:	b8 01 00 00 00       	mov    eax,0x1
c0018f16:	eb 0e                	jmp    c0018f26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0018f18:	be 40 73 02 c0       	mov    esi,0xc0027340
c0018f1d:	b9 00 08 00 00       	mov    ecx,0x800
c0018f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f24:	31 c0                	xor    eax,eax
c0018f26:	5b                   	pop    ebx
c0018f27:	5e                   	pop    esi
c0018f28:	5f                   	pop    edi
c0018f29:	c3                   	ret    

c0018f2a <ISO9660::tryMount(LogicalDisk*, int)>:
c0018f2a:	53                   	push   ebx
c0018f2b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0018f31:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0018f3b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0018f42:	8d 58 41             	lea    ebx,[eax+0x41]
c0018f45:	0f be db             	movsx  ebx,bl
c0018f48:	53                   	push   ebx
c0018f49:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f4d:	50                   	push   eax
c0018f4e:	6a 10                	push   0x10
c0018f50:	e8 5a ff ff ff       	call   c0018eaf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018f55:	83 c4 10             	add    esp,0x10
c0018f58:	31 d2                	xor    edx,edx
c0018f5a:	85 c0                	test   eax,eax
c0018f5c:	75 33                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f5e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0018f63:	75 2c                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f65:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0018f6a:	75 25                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f6c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0018f71:	75 1e                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f73:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0018f78:	75 17                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f7a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0018f7f:	75 10                	jne    c0018f91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f81:	83 ec 0c             	sub    esp,0xc
c0018f84:	53                   	push   ebx
c0018f85:	e8 c1 d8 fe ff       	call   c000684b <init_percd>
c0018f8a:	83 c4 10             	add    esp,0x10
c0018f8d:	40                   	inc    eax
c0018f8e:	0f 95 c2             	setne  dl
c0018f91:	88 d0                	mov    al,dl
c0018f93:	81 c4 08 08 00 00    	add    esp,0x808
c0018f99:	5b                   	pop    ebx
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <ISO9660::ISO9660()>:
c0018f9c:	83 ec 0c             	sub    esp,0xc
c0018f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa3:	83 ec 0c             	sub    esp,0xc
c0018fa6:	50                   	push   eax
c0018fa7:	e8 70 19 ff ff       	call   c000a91c <Filesystem::Filesystem()>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	ba cc 0b 02 c0       	mov    edx,0xc0020bcc
c0018fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fb8:	89 10                	mov    DWORD PTR [eax],edx
c0018fba:	e8 9e d9 fe ff       	call   c000695d <fs_iso9660_init>
c0018fbf:	90                   	nop
c0018fc0:	83 c4 0c             	add    esp,0xc
c0018fc3:	c3                   	ret    

c0018fc4 <SoundCard::beginPlayback()>:
c0018fc4:	c7 44 24 04 2c 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c2c
c0018fcc:	e9 ea 73 ff ff       	jmp    c00103bb <KePanic(char const*)>
c0018fd1:	90                   	nop

c0018fd2 <SoundCard::stopPlayback()>:
c0018fd2:	c7 44 24 04 2c 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c2c
c0018fda:	e9 dc 73 ff ff       	jmp    c00103bb <KePanic(char const*)>
c0018fdf:	90                   	nop

c0018fe0 <SoundCard::SoundCard(char const*)>:
c0018fe0:	83 ec 1c             	sub    esp,0x1c
c0018fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018fe7:	83 ec 08             	sub    esp,0x8
c0018fea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018fee:	50                   	push   eax
c0018fef:	e8 dc 2b ff ff       	call   c000bbd0 <Device::Device(char const*)>
c0018ff4:	83 c4 10             	add    esp,0x10
c0018ff7:	ba 78 0c 02 c0       	mov    edx,0xc0020c78
c0018ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019000:	89 10                	mov    DWORD PTR [eax],edx
c0019002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019006:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001900d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019011:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001901b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001901f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001902d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001903b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019045:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001904d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019052:	7f 19                	jg     c001906d <SoundCard::SoundCard(char const*)+0x8d>
c0019054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019058:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001905c:	83 c2 54             	add    edx,0x54
c001905f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019067:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001906b:	eb e0                	jmp    c001904d <SoundCard::SoundCard(char const*)+0x6d>
c001906d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019071:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019078:	90                   	nop
c0019079:	83 c4 1c             	add    esp,0x1c
c001907c:	c3                   	ret    
c001907d:	90                   	nop

c001907e <SoundCard::~SoundCard()>:
c001907e:	83 ec 0c             	sub    esp,0xc
c0019081:	ba 78 0c 02 c0       	mov    edx,0xc0020c78
c0019086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001908a:	89 10                	mov    DWORD PTR [eax],edx
c001908c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019090:	83 ec 0c             	sub    esp,0xc
c0019093:	50                   	push   eax
c0019094:	e8 a1 28 ff ff       	call   c000b93a <Device::~Device()>
c0019099:	83 c4 10             	add    esp,0x10
c001909c:	90                   	nop
c001909d:	83 c4 0c             	add    esp,0xc
c00190a0:	c3                   	ret    
c00190a1:	90                   	nop

c00190a2 <SoundCard::~SoundCard()>:
c00190a2:	83 ec 0c             	sub    esp,0xc
c00190a5:	83 ec 0c             	sub    esp,0xc
c00190a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190ac:	e8 cd ff ff ff       	call   c001907e <SoundCard::~SoundCard()>
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	83 ec 08             	sub    esp,0x8
c00190b7:	68 e8 01 00 00       	push   0x1e8
c00190bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190c0:	e8 3f 14 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	83 c4 0c             	add    esp,0xc
c00190cb:	c3                   	ret    

c00190cc <SoundCard::configureRates(int, int, int)>:
c00190cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190d0:	31 c0                	xor    eax,eax
c00190d2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00190d9:	75 20                	jne    c00190fb <SoundCard::configureRates(int, int, int)+0x2f>
c00190db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190df:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00190e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190e9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00190ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00190f9:	b0 01                	mov    al,0x1
c00190fb:	c3                   	ret    

c00190fc <SoundCard::getSamples16(int, short*)>:
c00190fc:	55                   	push   ebp
c00190fd:	57                   	push   edi
c00190fe:	31 ff                	xor    edi,edi
c0019100:	56                   	push   esi
c0019101:	53                   	push   ebx
c0019102:	31 db                	xor    ebx,ebx
c0019104:	83 ec 10             	sub    esp,0x10
c0019107:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001910b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001910f:	8d 04 36             	lea    eax,[esi+esi*1]
c0019112:	50                   	push   eax
c0019113:	6a 00                	push   0x0
c0019115:	55                   	push   ebp
c0019116:	e8 a5 73 fe ff       	call   c00004c0 <memset>
c001911b:	83 c4 10             	add    esp,0x10
c001911e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019122:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019129:	85 c0                	test   eax,eax
c001912b:	74 1b                	je     c0019148 <SoundCard::getSamples16(int, short*)+0x4c>
c001912d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019131:	75 15                	jne    c0019148 <SoundCard::getSamples16(int, short*)+0x4c>
c0019133:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019137:	55                   	push   ebp
c0019138:	56                   	push   esi
c0019139:	50                   	push   eax
c001913a:	e8 ed 02 00 00       	call   c001942c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	39 c7                	cmp    edi,eax
c0019144:	7d 02                	jge    c0019148 <SoundCard::getSamples16(int, short*)+0x4c>
c0019146:	89 c7                	mov    edi,eax
c0019148:	43                   	inc    ebx
c0019149:	83 fb 20             	cmp    ebx,0x20
c001914c:	75 d0                	jne    c001911e <SoundCard::getSamples16(int, short*)+0x22>
c001914e:	83 c4 0c             	add    esp,0xc
c0019151:	89 f8                	mov    eax,edi
c0019153:	5b                   	pop    ebx
c0019154:	5e                   	pop    esi
c0019155:	5f                   	pop    edi
c0019156:	5d                   	pop    ebp
c0019157:	c3                   	ret    

c0019158 <SoundCard::getSamples32(int, int*)>:
c0019158:	55                   	push   ebp
c0019159:	57                   	push   edi
c001915a:	31 ff                	xor    edi,edi
c001915c:	56                   	push   esi
c001915d:	31 f6                	xor    esi,esi
c001915f:	53                   	push   ebx
c0019160:	83 ec 10             	sub    esp,0x10
c0019163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019167:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001916b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001916f:	c1 e0 02             	shl    eax,0x2
c0019172:	50                   	push   eax
c0019173:	6a 00                	push   0x0
c0019175:	55                   	push   ebp
c0019176:	e8 45 73 fe ff       	call   c00004c0 <memset>
c001917b:	83 c4 10             	add    esp,0x10
c001917e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019185:	85 c0                	test   eax,eax
c0019187:	74 1b                	je     c00191a4 <SoundCard::getSamples32(int, int*)+0x4c>
c0019189:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001918d:	75 15                	jne    c00191a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001918f:	53                   	push   ebx
c0019190:	55                   	push   ebp
c0019191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019195:	50                   	push   eax
c0019196:	e8 55 03 00 00       	call   c00194f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001919b:	83 c4 10             	add    esp,0x10
c001919e:	39 c6                	cmp    esi,eax
c00191a0:	7d 02                	jge    c00191a4 <SoundCard::getSamples32(int, int*)+0x4c>
c00191a2:	89 c6                	mov    esi,eax
c00191a4:	47                   	inc    edi
c00191a5:	83 ff 20             	cmp    edi,0x20
c00191a8:	75 d4                	jne    c001917e <SoundCard::getSamples32(int, int*)+0x26>
c00191aa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00191b0:	85 f6                	test   esi,esi
c00191b2:	75 0f                	jne    c00191c3 <SoundCard::getSamples32(int, int*)+0x6b>
c00191b4:	84 c0                	test   al,al
c00191b6:	74 1b                	je     c00191d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191bd:	53                   	push   ebx
c00191be:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00191c1:	eb 0d                	jmp    c00191d0 <SoundCard::getSamples32(int, int*)+0x78>
c00191c3:	84 c0                	test   al,al
c00191c5:	75 0c                	jne    c00191d3 <SoundCard::getSamples32(int, int*)+0x7b>
c00191c7:	83 ec 0c             	sub    esp,0xc
c00191ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191cc:	53                   	push   ebx
c00191cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00191d0:	83 c4 10             	add    esp,0x10
c00191d3:	83 c4 0c             	add    esp,0xc
c00191d6:	89 f0                	mov    eax,esi
c00191d8:	5b                   	pop    ebx
c00191d9:	5e                   	pop    esi
c00191da:	5f                   	pop    edi
c00191db:	5d                   	pop    ebp
c00191dc:	c3                   	ret    
c00191dd:	90                   	nop

c00191de <SoundCard::addChannel(SoundPort*)>:
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	31 c0                	xor    eax,eax
c00191e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191e7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00191ef:	74 1b                	je     c001920c <SoundCard::addChannel(SoundPort*)+0x2e>
c00191f1:	40                   	inc    eax
c00191f2:	83 f8 20             	cmp    eax,0x20
c00191f5:	75 f0                	jne    c00191e7 <SoundCard::addChannel(SoundPort*)+0x9>
c00191f7:	83 ec 0c             	sub    esp,0xc
c00191fa:	68 51 0c 02 c0       	push   0xc0020c51
c00191ff:	e8 b7 71 ff ff       	call   c00103bb <KePanic(char const*)>
c0019204:	83 c4 10             	add    esp,0x10
c0019207:	83 c8 ff             	or     eax,0xffffffff
c001920a:	eb 0b                	jmp    c0019217 <SoundCard::addChannel(SoundPort*)+0x39>
c001920c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019210:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019217:	83 c4 0c             	add    esp,0xc
c001921a:	c3                   	ret    
c001921b:	90                   	nop

c001921c <SoundCard::removeChannel(int)>:
c001921c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019224:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001922f:	c3                   	ret    

c0019230 <SoundPort::SoundPort(int, int, int, int)>:
c0019230:	83 ec 0c             	sub    esp,0xc
c0019233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019237:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001923e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019242:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001924a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001924e:	89 10                	mov    DWORD PTR [eax],edx
c0019250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019254:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019258:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001925b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001925f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019263:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019266:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001926b:	75 13                	jne    c0019280 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001926d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019271:	8b 00                	mov    eax,DWORD PTR [eax]
c0019273:	05 a0 0f 00 00       	add    eax,0xfa0
c0019278:	01 c0                	add    eax,eax
c001927a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001927e:	66 90                	xchg   ax,ax
c0019280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019284:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019288:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001928b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001928f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001929a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001929d:	c1 e0 02             	shl    eax,0x2
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	50                   	push   eax
c00192a4:	e8 bc e5 fe ff       	call   c0007865 <malloc>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	89 c2                	mov    edx,eax
c00192ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00192b5:	90                   	nop
c00192b6:	83 c4 0c             	add    esp,0xc
c00192b9:	c3                   	ret    
c00192ba:	66 90                	xchg   ax,ax

c00192bc <SoundPort::~SoundPort()>:
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192c6:	85 c0                	test   eax,eax
c00192c8:	74 1e                	je     c00192e8 <SoundPort::~SoundPort()+0x2c>
c00192ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192d1:	83 ec 0c             	sub    esp,0xc
c00192d4:	50                   	push   eax
c00192d5:	e8 9b e5 fe ff       	call   c0007875 <free>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00192e8:	90                   	nop
c00192e9:	83 c4 0c             	add    esp,0xc
c00192ec:	c3                   	ret    
c00192ed:	90                   	nop
c00192ee:	66 90                	xchg   ax,ax

c00192f0 <SoundPort::unpause()>:
c00192f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192f4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00192f8:	c3                   	ret    
c00192f9:	90                   	nop
c00192fa:	66 90                	xchg   ax,ax

c00192fc <SoundPort::pause()>:
c00192fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019300:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019304:	c3                   	ret    
c0019305:	90                   	nop
c0019306:	66 90                	xchg   ax,ax

c0019308 <SoundPort::getBufferUsed()>:
c0019308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001930c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001930f:	c3                   	ret    

c0019310 <SoundPort::getBufferSize()>:
c0019310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019314:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019317:	c3                   	ret    

c0019318 <SoundPort::buffer16(short*, int)>:
c0019318:	55                   	push   ebp
c0019319:	57                   	push   edi
c001931a:	56                   	push   esi
c001931b:	53                   	push   ebx
c001931c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019320:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019324:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019327:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001932a:	74 68                	je     c0019394 <SoundPort::buffer16(short*, int)+0x7c>
c001932c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019330:	85 c9                	test   ecx,ecx
c0019332:	7e 60                	jle    c0019394 <SoundPort::buffer16(short*, int)+0x7c>
c0019334:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019338:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001933b:	c1 e1 0f             	shl    ecx,0xf
c001933e:	8d 70 01             	lea    esi,[eax+0x1]
c0019341:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019344:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019347:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001934a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001934d:	74 4d                	je     c001939c <SoundPort::buffer16(short*, int)+0x84>
c001934f:	31 f6                	xor    esi,esi
c0019351:	eb 21                	jmp    c0019374 <SoundPort::buffer16(short*, int)+0x5c>
c0019353:	90                   	nop
c0019354:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019359:	8d 79 01             	lea    edi,[ecx+0x1]
c001935c:	c1 e3 0f             	shl    ebx,0xf
c001935f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019362:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019365:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019368:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001936b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001936e:	74 1c                	je     c001938c <SoundPort::buffer16(short*, int)+0x74>
c0019370:	89 c6                	mov    esi,eax
c0019372:	66 90                	xchg   ax,ax
c0019374:	8d 46 01             	lea    eax,[esi+0x1]
c0019377:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001937b:	75 d7                	jne    c0019354 <SoundPort::buffer16(short*, int)+0x3c>
c001937d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019381:	8d 76 00             	lea    esi,[esi+0x0]
c0019384:	5b                   	pop    ebx
c0019385:	5e                   	pop    esi
c0019386:	5f                   	pop    edi
c0019387:	5d                   	pop    ebp
c0019388:	c3                   	ret    
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	5b                   	pop    ebx
c001938d:	8d 46 02             	lea    eax,[esi+0x2]
c0019390:	5e                   	pop    esi
c0019391:	5f                   	pop    edi
c0019392:	5d                   	pop    ebp
c0019393:	c3                   	ret    
c0019394:	5b                   	pop    ebx
c0019395:	31 c0                	xor    eax,eax
c0019397:	5e                   	pop    esi
c0019398:	5f                   	pop    edi
c0019399:	5d                   	pop    ebp
c001939a:	c3                   	ret    
c001939b:	90                   	nop
c001939c:	b8 01 00 00 00       	mov    eax,0x1
c00193a1:	eb e1                	jmp    c0019384 <SoundPort::buffer16(short*, int)+0x6c>
c00193a3:	90                   	nop

c00193a4 <SoundPort::buffer32(int*, int)>:
c00193a4:	55                   	push   ebp
c00193a5:	57                   	push   edi
c00193a6:	56                   	push   esi
c00193a7:	53                   	push   ebx
c00193a8:	51                   	push   ecx
c00193a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00193ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193b1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00193b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00193bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193be:	74 5c                	je     c001941c <SoundPort::buffer32(int*, int)+0x78>
c00193c0:	85 c0                	test   eax,eax
c00193c2:	7e 58                	jle    c001941c <SoundPort::buffer32(int*, int)+0x78>
c00193c4:	8d 71 01             	lea    esi,[ecx+0x1]
c00193c7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00193ca:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00193cd:	8b 37                	mov    esi,DWORD PTR [edi]
c00193cf:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00193d2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193d5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193d8:	74 4a                	je     c0019424 <SoundPort::buffer32(int*, int)+0x80>
c00193da:	31 f6                	xor    esi,esi
c00193dc:	eb 1e                	jmp    c00193fc <SoundPort::buffer32(int*, int)+0x58>
c00193de:	66 90                	xchg   ax,ax
c00193e0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00193e3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00193e6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00193e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00193ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00193f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193f6:	74 18                	je     c0019410 <SoundPort::buffer32(int*, int)+0x6c>
c00193f8:	89 de                	mov    esi,ebx
c00193fa:	66 90                	xchg   ax,ax
c00193fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00193ff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019402:	75 dc                	jne    c00193e0 <SoundPort::buffer32(int*, int)+0x3c>
c0019404:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019407:	90                   	nop
c0019408:	5a                   	pop    edx
c0019409:	5b                   	pop    ebx
c001940a:	5e                   	pop    esi
c001940b:	5f                   	pop    edi
c001940c:	5d                   	pop    ebp
c001940d:	c3                   	ret    
c001940e:	66 90                	xchg   ax,ax
c0019410:	5a                   	pop    edx
c0019411:	8d 46 02             	lea    eax,[esi+0x2]
c0019414:	5b                   	pop    ebx
c0019415:	5e                   	pop    esi
c0019416:	5f                   	pop    edi
c0019417:	5d                   	pop    ebp
c0019418:	c3                   	ret    
c0019419:	8d 76 00             	lea    esi,[esi+0x0]
c001941c:	5a                   	pop    edx
c001941d:	31 c0                	xor    eax,eax
c001941f:	5b                   	pop    ebx
c0019420:	5e                   	pop    esi
c0019421:	5f                   	pop    edi
c0019422:	5d                   	pop    ebp
c0019423:	c3                   	ret    
c0019424:	b8 01 00 00 00       	mov    eax,0x1
c0019429:	eb dd                	jmp    c0019408 <SoundPort::buffer32(int*, int)+0x64>
c001942b:	90                   	nop

c001942c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001942c:	57                   	push   edi
c001942d:	56                   	push   esi
c001942e:	53                   	push   ebx
c001942f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019433:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019437:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001943d:	39 03                	cmp    DWORD PTR [ebx],eax
c001943f:	74 13                	je     c0019454 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019441:	83 ec 0c             	sub    esp,0xc
c0019444:	68 a4 0c 02 c0       	push   0xc0020ca4
c0019449:	e8 6d 6f ff ff       	call   c00103bb <KePanic(char const*)>
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001945a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001945d:	74 11                	je     c0019470 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001945f:	83 ec 0c             	sub    esp,0xc
c0019462:	68 e3 0c 02 c0       	push   0xc0020ce3
c0019467:	e8 4f 6f ff ff       	call   c00103bb <KePanic(char const*)>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	90                   	nop
c0019470:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019476:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019479:	74 11                	je     c001948c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001947b:	83 ec 0c             	sub    esp,0xc
c001947e:	68 e3 0c 02 c0       	push   0xc0020ce3
c0019483:	e8 33 6f ff ff       	call   c00103bb <KePanic(char const*)>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	90                   	nop
c001948c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001948f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019493:	7e 07                	jle    c001949c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019495:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019499:	8d 76 00             	lea    esi,[esi+0x0]
c001949c:	85 f6                	test   esi,esi
c001949e:	7e 2c                	jle    c00194cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00194a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00194a4:	8d 3c 36             	lea    edi,[esi+esi*1]
c00194a7:	31 c9                	xor    ecx,ecx
c00194a9:	01 d7                	add    edi,edx
c00194ab:	90                   	nop
c00194ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00194af:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00194b2:	85 c0                	test   eax,eax
c00194b4:	79 06                	jns    c00194bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00194b6:	05 ff 7f 00 00       	add    eax,0x7fff
c00194bb:	90                   	nop
c00194bc:	c1 f8 0f             	sar    eax,0xf
c00194bf:	83 c1 04             	add    ecx,0x4
c00194c2:	66 01 02             	add    WORD PTR [edx],ax
c00194c5:	83 c2 02             	add    edx,0x2
c00194c8:	39 d7                	cmp    edi,edx
c00194ca:	75 e0                	jne    c00194ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00194cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00194cf:	50                   	push   eax
c00194d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00194d3:	29 f0                	sub    eax,esi
c00194d5:	c1 e0 02             	shl    eax,0x2
c00194d8:	50                   	push   eax
c00194d9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00194dc:	50                   	push   eax
c00194dd:	52                   	push   edx
c00194de:	e8 ed 6e fe ff       	call   c00003d0 <memmove>
c00194e3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00194e6:	83 c4 10             	add    esp,0x10
c00194e9:	89 f0                	mov    eax,esi
c00194eb:	5b                   	pop    ebx
c00194ec:	5e                   	pop    esi
c00194ed:	5f                   	pop    edi
c00194ee:	c3                   	ret    
c00194ef:	90                   	nop

c00194f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00194f0:	57                   	push   edi
c00194f1:	56                   	push   esi
c00194f2:	53                   	push   ebx
c00194f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00194f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194ff:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019505:	39 06                	cmp    DWORD PTR [esi],eax
c0019507:	74 13                	je     c001951c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019509:	83 ec 0c             	sub    esp,0xc
c001950c:	68 c4 0c 02 c0       	push   0xc0020cc4
c0019511:	e8 a5 6e ff ff       	call   c00103bb <KePanic(char const*)>
c0019516:	83 c4 10             	add    esp,0x10
c0019519:	8d 76 00             	lea    esi,[esi+0x0]
c001951c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019522:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019525:	74 11                	je     c0019538 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019527:	83 ec 0c             	sub    esp,0xc
c001952a:	68 ff 0c 02 c0       	push   0xc0020cff
c001952f:	e8 87 6e ff ff       	call   c00103bb <KePanic(char const*)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	90                   	nop
c0019538:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001953e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019541:	74 11                	je     c0019554 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	68 ff 0c 02 c0       	push   0xc0020cff
c001954b:	e8 6b 6e ff ff       	call   c00103bb <KePanic(char const*)>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	90                   	nop
c0019554:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019557:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001955b:	7e 07                	jle    c0019564 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001955d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019561:	8d 76 00             	lea    esi,[esi+0x0]
c0019564:	85 ff                	test   edi,edi
c0019566:	7e 1c                	jle    c0019584 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0019568:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001956f:	31 c0                	xor    eax,eax
c0019571:	8d 76 00             	lea    esi,[esi+0x0]
c0019574:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019577:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001957a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001957d:	83 c0 04             	add    eax,0x4
c0019580:	39 c1                	cmp    ecx,eax
c0019582:	75 f0                	jne    c0019574 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019584:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019587:	50                   	push   eax
c0019588:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001958b:	29 f8                	sub    eax,edi
c001958d:	c1 e0 02             	shl    eax,0x2
c0019590:	50                   	push   eax
c0019591:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019594:	50                   	push   eax
c0019595:	52                   	push   edx
c0019596:	e8 35 6e fe ff       	call   c00003d0 <memmove>
c001959b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001959e:	83 c4 10             	add    esp,0x10
c00195a1:	89 f8                	mov    eax,edi
c00195a3:	5b                   	pop    ebx
c00195a4:	5e                   	pop    esi
c00195a5:	5f                   	pop    edi
c00195a6:	c3                   	ret    
c00195a7:	90                   	nop

c00195a8 <PCI::open(int, int, void*)>:
c00195a8:	83 ec 18             	sub    esp,0x18
c00195ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00195b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00195bb:	50                   	push   eax
c00195bc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00195bf:	31 c0                	xor    eax,eax
c00195c1:	83 c4 1c             	add    esp,0x1c
c00195c4:	c3                   	ret    
c00195c5:	90                   	nop

c00195c6 <PCI::close(int, int, void*)>:
c00195c6:	31 c0                	xor    eax,eax
c00195c8:	c3                   	ret    
c00195c9:	90                   	nop

c00195ca <PCI::PCI()>:
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195d1:	83 ec 08             	sub    esp,0x8
c00195d4:	68 1b 0d 02 c0       	push   0xc0020d1b
c00195d9:	50                   	push   eax
c00195da:	e8 ad 1d ff ff       	call   c000b38c <Bus::Bus(char const*)>
c00195df:	83 c4 10             	add    esp,0x10
c00195e2:	ba c4 0d 02 c0       	mov    edx,0xc0020dc4
c00195e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195eb:	89 10                	mov    DWORD PTR [eax],edx
c00195ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00195fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ff:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019608:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001960e:	31 d2                	xor    edx,edx
c0019610:	88 c2                	mov    dl,al
c0019612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019616:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001961d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019621:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019627:	31 d2                	xor    edx,edx
c0019629:	88 c2                	mov    dl,al
c001962b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001963e:	8d 50 01             	lea    edx,[eax+0x1]
c0019641:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019645:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001964b:	31 d2                	xor    edx,edx
c001964d:	88 c2                	mov    dl,al
c001964f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019653:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0019657:	83 c9 c0             	or     ecx,0xffffffc0
c001965a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001965e:	90                   	nop
c001965f:	83 c4 0c             	add    esp,0xc
c0019662:	c3                   	ret    
c0019663:	90                   	nop

c0019664 <PCI::readBAR8(unsigned int, int)>:
c0019664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001966c:	f6 c2 01             	test   dl,0x1
c001966f:	74 07                	je     c0019678 <PCI::readBAR8(unsigned int, int)+0x14>
c0019671:	83 e2 fc             	and    edx,0xfffffffc
c0019674:	01 c2                	add    edx,eax
c0019676:	ec                   	in     al,dx
c0019677:	c3                   	ret    
c0019678:	83 e2 f0             	and    edx,0xfffffff0
c001967b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001967e:	c3                   	ret    
c001967f:	90                   	nop

c0019680 <PCI::readBAR16(unsigned int, int)>:
c0019680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019688:	f6 c2 01             	test   dl,0x1
c001968b:	74 08                	je     c0019695 <PCI::readBAR16(unsigned int, int)+0x15>
c001968d:	83 e2 fc             	and    edx,0xfffffffc
c0019690:	01 c2                	add    edx,eax
c0019692:	66 ed                	in     ax,dx
c0019694:	c3                   	ret    
c0019695:	83 e2 f0             	and    edx,0xfffffff0
c0019698:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001969c:	c3                   	ret    
c001969d:	90                   	nop

c001969e <PCI::readBAR32(unsigned int, int)>:
c001969e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196a6:	f6 c2 01             	test   dl,0x1
c00196a9:	74 07                	je     c00196b2 <PCI::readBAR32(unsigned int, int)+0x14>
c00196ab:	83 e2 fc             	and    edx,0xfffffffc
c00196ae:	01 c2                	add    edx,eax
c00196b0:	ed                   	in     eax,dx
c00196b1:	c3                   	ret    
c00196b2:	83 e2 f0             	and    edx,0xfffffff0
c00196b5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00196b8:	c3                   	ret    
c00196b9:	90                   	nop

c00196ba <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00196ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196c6:	f6 c2 01             	test   dl,0x1
c00196c9:	74 07                	je     c00196d2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00196cb:	83 e2 fc             	and    edx,0xfffffffc
c00196ce:	01 ca                	add    edx,ecx
c00196d0:	ee                   	out    dx,al
c00196d1:	c3                   	ret    
c00196d2:	83 e2 f0             	and    edx,0xfffffff0
c00196d5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00196d8:	c3                   	ret    
c00196d9:	90                   	nop

c00196da <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00196da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196e6:	f6 c2 01             	test   dl,0x1
c00196e9:	74 08                	je     c00196f3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00196eb:	83 e2 fc             	and    edx,0xfffffffc
c00196ee:	01 ca                	add    edx,ecx
c00196f0:	66 ef                	out    dx,ax
c00196f2:	c3                   	ret    
c00196f3:	83 e2 f0             	and    edx,0xfffffff0
c00196f6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00196fa:	c3                   	ret    
c00196fb:	90                   	nop

c00196fc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00196fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019704:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019708:	f6 c2 01             	test   dl,0x1
c001970b:	74 07                	je     c0019714 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001970d:	83 e2 fc             	and    edx,0xfffffffc
c0019710:	01 ca                	add    edx,ecx
c0019712:	ef                   	out    dx,eax
c0019713:	c3                   	ret    
c0019714:	83 e2 f0             	and    edx,0xfffffff0
c0019717:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001971a:	c3                   	ret    
c001971b:	90                   	nop

c001971c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001971c:	55                   	push   ebp
c001971d:	57                   	push   edi
c001971e:	56                   	push   esi
c001971f:	53                   	push   ebx
c0019720:	83 ec 0c             	sub    esp,0xc
c0019723:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019727:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001972b:	89 f0                	mov    eax,esi
c001972d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019731:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019735:	3c 07                	cmp    al,0x7
c0019737:	76 10                	jbe    c0019749 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019739:	83 ec 0c             	sub    esp,0xc
c001973c:	68 23 0d 02 c0       	push   0xc0020d23
c0019741:	e8 75 6c ff ff       	call   c00103bb <KePanic(char const*)>
c0019746:	83 c4 10             	add    esp,0x10
c0019749:	80 fb 0f             	cmp    bl,0xf
c001974c:	76 10                	jbe    c001975e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001974e:	83 ec 0c             	sub    esp,0xc
c0019751:	68 53 0d 02 c0       	push   0xc0020d53
c0019756:	e8 60 6c ff ff       	call   c00103bb <KePanic(char const*)>
c001975b:	83 c4 10             	add    esp,0x10
c001975e:	8d 04 36             	lea    eax,[esi+esi*1]
c0019761:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019766:	83 c8 f0             	or     eax,0xfffffff0
c0019769:	ee                   	out    dx,al
c001976a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001976f:	89 e8                	mov    eax,ebp
c0019771:	ee                   	out    dx,al
c0019772:	83 c4 0c             	add    esp,0xc
c0019775:	89 d8                	mov    eax,ebx
c0019777:	66 81 e7 fc 00       	and    di,0xfc
c001977c:	5b                   	pop    ebx
c001977d:	c1 e0 08             	shl    eax,0x8
c0019780:	5e                   	pop    esi
c0019781:	09 f8                	or     eax,edi
c0019783:	5f                   	pop    edi
c0019784:	66 0d 00 c0          	or     ax,0xc000
c0019788:	5d                   	pop    ebp
c0019789:	c3                   	ret    

c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001978a:	57                   	push   edi
c001978b:	56                   	push   esi
c001978c:	53                   	push   ebx
c001978d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019795:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001979b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001979f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197a7:	83 ff 01             	cmp    edi,0x1
c00197aa:	75 3e                	jne    c00197ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00197ac:	89 de                	mov    esi,ebx
c00197ae:	0f b6 c0             	movzx  eax,al
c00197b1:	81 e6 fc 00 00 00    	and    esi,0xfc
c00197b7:	c1 e0 10             	shl    eax,0x10
c00197ba:	0f b6 c9             	movzx  ecx,cl
c00197bd:	09 f0                	or     eax,esi
c00197bf:	c1 e1 08             	shl    ecx,0x8
c00197c2:	0f b6 d2             	movzx  edx,dl
c00197c5:	09 c8                	or     eax,ecx
c00197c7:	c1 e2 0b             	shl    edx,0xb
c00197ca:	09 d0                	or     eax,edx
c00197cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00197d1:	0d 00 00 00 80       	or     eax,0x80000000
c00197d6:	ef                   	out    dx,eax
c00197d7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00197dc:	ed                   	in     eax,dx
c00197dd:	83 e3 02             	and    ebx,0x2
c00197e0:	0f b6 cb             	movzx  ecx,bl
c00197e3:	c1 e1 03             	shl    ecx,0x3
c00197e6:	d3 e8                	shr    eax,cl
c00197e8:	eb 43                	jmp    c001982d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00197ea:	83 ff 02             	cmp    edi,0x2
c00197ed:	75 2c                	jne    c001981b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00197ef:	83 ec 0c             	sub    esp,0xc
c00197f2:	0f b6 c9             	movzx  ecx,cl
c00197f5:	0f b6 d2             	movzx  edx,dl
c00197f8:	0f b6 fb             	movzx  edi,bl
c00197fb:	0f b6 c0             	movzx  eax,al
c00197fe:	57                   	push   edi
c00197ff:	51                   	push   ecx
c0019800:	52                   	push   edx
c0019801:	50                   	push   eax
c0019802:	56                   	push   esi
c0019803:	e8 14 ff ff ff       	call   c001971c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019808:	89 c2                	mov    edx,eax
c001980a:	ed                   	in     eax,dx
c001980b:	83 e3 02             	and    ebx,0x2
c001980e:	83 c4 20             	add    esp,0x20
c0019811:	0f b6 cb             	movzx  ecx,bl
c0019814:	c1 e1 03             	shl    ecx,0x3
c0019817:	d3 e8                	shr    eax,cl
c0019819:	eb 12                	jmp    c001982d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001981b:	83 ec 0c             	sub    esp,0xc
c001981e:	68 83 0d 02 c0       	push   0xc0020d83
c0019823:	e8 93 6b ff ff       	call   c00103bb <KePanic(char const*)>
c0019828:	83 c4 10             	add    esp,0x10
c001982b:	31 c0                	xor    eax,eax
c001982d:	5b                   	pop    ebx
c001982e:	5e                   	pop    esi
c001982f:	5f                   	pop    edi
c0019830:	c3                   	ret    
c0019831:	90                   	nop

c0019832 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019832:	83 ec 18             	sub    esp,0x18
c0019835:	6a 00                	push   0x0
c0019837:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001983c:	50                   	push   eax
c001983d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019842:	50                   	push   eax
c0019843:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019848:	50                   	push   eax
c0019849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001984d:	e8 38 ff ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019852:	83 c4 2c             	add    esp,0x2c
c0019855:	c3                   	ret    

c0019856 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019856:	83 ec 18             	sub    esp,0x18
c0019859:	6a 0e                	push   0xe
c001985b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019860:	50                   	push   eax
c0019861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019866:	50                   	push   eax
c0019867:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001986c:	50                   	push   eax
c001986d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019871:	e8 14 ff ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019876:	83 c4 2c             	add    esp,0x2c
c0019879:	0f b6 c0             	movzx  eax,al
c001987c:	c3                   	ret    
c001987d:	90                   	nop

c001987e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001987e:	55                   	push   ebp
c001987f:	57                   	push   edi
c0019880:	56                   	push   esi
c0019881:	53                   	push   ebx
c0019882:	83 ec 18             	sub    esp,0x18
c0019885:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001988a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001988f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019894:	6a 0a                	push   0xa
c0019896:	56                   	push   esi
c0019897:	55                   	push   ebp
c0019898:	57                   	push   edi
c0019899:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001989d:	e8 e8 fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198a2:	83 c4 14             	add    esp,0x14
c00198a5:	89 c3                	mov    ebx,eax
c00198a7:	6a 0a                	push   0xa
c00198a9:	0f b6 db             	movzx  ebx,bl
c00198ac:	56                   	push   esi
c00198ad:	55                   	push   ebp
c00198ae:	57                   	push   edi
c00198af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00198b3:	e8 d2 fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198b8:	83 c4 2c             	add    esp,0x2c
c00198bb:	25 00 ff 00 00       	and    eax,0xff00
c00198c0:	09 d8                	or     eax,ebx
c00198c2:	5b                   	pop    ebx
c00198c3:	5e                   	pop    esi
c00198c4:	5f                   	pop    edi
c00198c5:	5d                   	pop    ebp
c00198c6:	c3                   	ret    
c00198c7:	90                   	nop

c00198c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00198c8:	83 ec 18             	sub    esp,0x18
c00198cb:	6a 08                	push   0x8
c00198cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198d2:	50                   	push   eax
c00198d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198d8:	50                   	push   eax
c00198d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198de:	50                   	push   eax
c00198df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e3:	e8 a2 fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198e8:	83 c4 2c             	add    esp,0x2c
c00198eb:	0f b6 c4             	movzx  eax,ah
c00198ee:	c3                   	ret    
c00198ef:	90                   	nop

c00198f0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00198f0:	83 ec 18             	sub    esp,0x18
c00198f3:	6a 08                	push   0x8
c00198f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198fa:	50                   	push   eax
c00198fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019900:	50                   	push   eax
c0019901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019906:	50                   	push   eax
c0019907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001990b:	e8 7a fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019910:	83 c4 2c             	add    esp,0x2c
c0019913:	c3                   	ret    

c0019914 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019914:	83 ec 18             	sub    esp,0x18
c0019917:	6a 3c                	push   0x3c
c0019919:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001991e:	50                   	push   eax
c001991f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019924:	50                   	push   eax
c0019925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001992a:	50                   	push   eax
c001992b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001992f:	e8 56 fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019934:	83 c4 2c             	add    esp,0x2c
c0019937:	c3                   	ret    

c0019938 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019938:	83 ec 18             	sub    esp,0x18
c001993b:	6a 18                	push   0x18
c001993d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019942:	50                   	push   eax
c0019943:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019948:	50                   	push   eax
c0019949:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001994e:	50                   	push   eax
c001994f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019953:	e8 32 fe ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019958:	83 c4 2c             	add    esp,0x2c
c001995b:	0f b6 c4             	movzx  eax,ah
c001995e:	c3                   	ret    
c001995f:	90                   	nop

c0019960 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019960:	55                   	push   ebp
c0019961:	57                   	push   edi
c0019962:	56                   	push   esi
c0019963:	53                   	push   ebx
c0019964:	83 ec 28             	sub    esp,0x28
c0019967:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001996b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019970:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019975:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001997a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019981:	8d 43 12             	lea    eax,[ebx+0x12]
c0019984:	83 c3 10             	add    ebx,0x10
c0019987:	0f b6 c0             	movzx  eax,al
c001998a:	0f b6 db             	movzx  ebx,bl
c001998d:	50                   	push   eax
c001998e:	51                   	push   ecx
c001998f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019993:	57                   	push   edi
c0019994:	55                   	push   ebp
c0019995:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019999:	e8 ec fd ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001999e:	83 c4 14             	add    esp,0x14
c00199a1:	89 c6                	mov    esi,eax
c00199a3:	53                   	push   ebx
c00199a4:	c1 e6 10             	shl    esi,0x10
c00199a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00199ab:	51                   	push   ecx
c00199ac:	57                   	push   edi
c00199ad:	55                   	push   ebp
c00199ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00199b2:	e8 d3 fd ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00199b7:	83 c4 3c             	add    esp,0x3c
c00199ba:	0f b7 c0             	movzx  eax,ax
c00199bd:	5b                   	pop    ebx
c00199be:	09 f0                	or     eax,esi
c00199c0:	5e                   	pop    esi
c00199c1:	5f                   	pop    edi
c00199c2:	5d                   	pop    ebp
c00199c3:	c3                   	ret    

c00199c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00199c4:	55                   	push   ebp
c00199c5:	57                   	push   edi
c00199c6:	56                   	push   esi
c00199c7:	53                   	push   ebx
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00199cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199d3:	89 f5                	mov    ebp,esi
c00199d5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00199db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00199df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00199e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00199e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00199eb:	83 f9 01             	cmp    ecx,0x1
c00199ee:	75 5d                	jne    c0019a4d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00199f0:	0f b6 c8             	movzx  ecx,al
c00199f3:	0f b6 d2             	movzx  edx,dl
c00199f6:	c1 e1 10             	shl    ecx,0x10
c00199f9:	c1 e2 0b             	shl    edx,0xb
c00199fc:	89 f0                	mov    eax,esi
c00199fe:	25 fc 00 00 00       	and    eax,0xfc
c0019a03:	09 c1                	or     ecx,eax
c0019a05:	89 e8                	mov    eax,ebp
c0019a07:	0f b6 c0             	movzx  eax,al
c0019a0a:	c1 e0 08             	shl    eax,0x8
c0019a0d:	09 c1                	or     ecx,eax
c0019a0f:	09 d1                	or     ecx,edx
c0019a11:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a16:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019a1c:	89 c8                	mov    eax,ecx
c0019a1e:	ef                   	out    dx,eax
c0019a1f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a24:	ed                   	in     eax,dx
c0019a25:	0f b7 db             	movzx  ebx,bx
c0019a28:	83 e6 02             	and    esi,0x2
c0019a2b:	74 0a                	je     c0019a37 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019a2d:	0f b7 d0             	movzx  edx,ax
c0019a30:	c1 e3 10             	shl    ebx,0x10
c0019a33:	09 d3                	or     ebx,edx
c0019a35:	eb 05                	jmp    c0019a3c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019a37:	66 31 c0             	xor    ax,ax
c0019a3a:	09 c3                	or     ebx,eax
c0019a3c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a41:	89 c8                	mov    eax,ecx
c0019a43:	ef                   	out    dx,eax
c0019a44:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a49:	89 d8                	mov    eax,ebx
c0019a4b:	eb 41                	jmp    c0019a8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019a4d:	83 f9 02             	cmp    ecx,0x2
c0019a50:	75 45                	jne    c0019a97 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019a52:	83 ec 0c             	sub    esp,0xc
c0019a55:	0f b6 d2             	movzx  edx,dl
c0019a58:	89 f1                	mov    ecx,esi
c0019a5a:	0f b6 c0             	movzx  eax,al
c0019a5d:	0f b6 f1             	movzx  esi,cl
c0019a60:	89 e9                	mov    ecx,ebp
c0019a62:	56                   	push   esi
c0019a63:	0f b6 c9             	movzx  ecx,cl
c0019a66:	51                   	push   ecx
c0019a67:	52                   	push   edx
c0019a68:	50                   	push   eax
c0019a69:	57                   	push   edi
c0019a6a:	e8 ad fc ff ff       	call   c001971c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019a6f:	89 c2                	mov    edx,eax
c0019a71:	ed                   	in     eax,dx
c0019a72:	83 c4 20             	add    esp,0x20
c0019a75:	0f b7 db             	movzx  ebx,bx
c0019a78:	f6 c2 02             	test   dl,0x2
c0019a7b:	74 0c                	je     c0019a89 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019a7d:	0f b7 c8             	movzx  ecx,ax
c0019a80:	89 d8                	mov    eax,ebx
c0019a82:	c1 e0 10             	shl    eax,0x10
c0019a85:	09 c8                	or     eax,ecx
c0019a87:	eb 05                	jmp    c0019a8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019a89:	66 31 c0             	xor    ax,ax
c0019a8c:	09 d8                	or     eax,ebx
c0019a8e:	ef                   	out    dx,eax
c0019a8f:	83 c4 0c             	add    esp,0xc
c0019a92:	5b                   	pop    ebx
c0019a93:	5e                   	pop    esi
c0019a94:	5f                   	pop    edi
c0019a95:	5d                   	pop    ebp
c0019a96:	c3                   	ret    
c0019a97:	c7 44 24 20 83 0d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020d83
c0019a9f:	83 c4 0c             	add    esp,0xc
c0019aa2:	5b                   	pop    ebx
c0019aa3:	5e                   	pop    esi
c0019aa4:	5f                   	pop    edi
c0019aa5:	5d                   	pop    ebp
c0019aa6:	e9 10 69 ff ff       	jmp    c00103bb <KePanic(char const*)>
c0019aab:	90                   	nop

c0019aac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019aac:	55                   	push   ebp
c0019aad:	57                   	push   edi
c0019aae:	56                   	push   esi
c0019aaf:	53                   	push   ebx
c0019ab0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ab6:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019abd:	0f 85 bd 00 00 00    	jne    c0019b80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019ac3:	83 ec 0c             	sub    esp,0xc
c0019ac6:	68 14 01 00 00       	push   0x114
c0019acb:	e8 95 dd fe ff       	call   c0007865 <malloc>
c0019ad0:	83 c4 0c             	add    esp,0xc
c0019ad3:	89 c3                	mov    ebx,eax
c0019ad5:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019adb:	68 89 0d 02 c0       	push   0xc0020d89
c0019ae0:	50                   	push   eax
c0019ae1:	e8 8a 10 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0019ae6:	83 c4 10             	add    esp,0x10
c0019ae9:	85 db                	test   ebx,ebx
c0019aeb:	0f 84 47 02 00 00    	je     c0019d38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019af1:	56                   	push   esi
c0019af2:	56                   	push   esi
c0019af3:	6a 01                	push   0x1
c0019af5:	53                   	push   ebx
c0019af6:	e8 35 11 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	85 c0                	test   eax,eax
c0019b00:	0f 85 32 02 00 00    	jne    c0019d38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b06:	52                   	push   edx
c0019b07:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019b0b:	50                   	push   eax
c0019b0c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019b10:	50                   	push   eax
c0019b11:	53                   	push   ebx
c0019b12:	e8 c5 13 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0019b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b1b:	40                   	inc    eax
c0019b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b1f:	e8 41 dd fe ff       	call   c0007865 <malloc>
c0019b24:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b28:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019b2d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019b31:	59                   	pop    ecx
c0019b32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b34:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019b38:	51                   	push   ecx
c0019b39:	50                   	push   eax
c0019b3a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019b3e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019b42:	53                   	push   ebx
c0019b43:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019b46:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019b4a:	83 c4 20             	add    esp,0x20
c0019b4d:	89 c8                	mov    eax,ecx
c0019b4f:	99                   	cdq    
c0019b50:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019b54:	0f 85 de 01 00 00    	jne    c0019d38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b5a:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019b5e:	0f 85 d4 01 00 00    	jne    c0019d38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b64:	83 ec 0c             	sub    esp,0xc
c0019b67:	53                   	push   ebx
c0019b68:	e8 21 11 ff ff       	call   c000ac8e <File::close()>
c0019b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b71:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019b78:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019b7d:	83 c4 10             	add    esp,0x10
c0019b80:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019b85:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b8e:	31 ff                	xor    edi,edi
c0019b90:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019b98:	31 f6                	xor    esi,esi
c0019b9a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019b9f:	31 db                	xor    ebx,ebx
c0019ba1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019ba9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019bae:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019bb5:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019bb9:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019bc0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019bc4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019bc7:	0f 8e 6b 01 00 00    	jle    c0019d38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019bcd:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019bd0:	d4 40                	aam    0x40
c0019bd2:	d5 39                	aad    0x39
c0019bd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bd8:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019bdc:	d4 40                	aam    0x40
c0019bde:	d5 39                	aad    0x39
c0019be0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019be4:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019be8:	d4 40                	aam    0x40
c0019bea:	d5 39                	aad    0x39
c0019bec:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019bf0:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019bf4:	d4 40                	aam    0x40
c0019bf6:	d5 39                	aad    0x39
c0019bf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019bfc:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019c00:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019c04:	3c 56                	cmp    al,0x56
c0019c06:	74 45                	je     c0019c4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019c08:	d4 40                	aam    0x40
c0019c0a:	d5 39                	aad    0x39
c0019c0c:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019c0f:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019c13:	0f b6 c9             	movzx  ecx,cl
c0019c16:	c1 e1 04             	shl    ecx,0x4
c0019c19:	d4 40                	aam    0x40
c0019c1b:	d5 39                	aad    0x39
c0019c1d:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019c20:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019c24:	0f b6 db             	movzx  ebx,bl
c0019c27:	09 cb                	or     ebx,ecx
c0019c29:	c1 e3 04             	shl    ebx,0x4
c0019c2c:	d4 40                	aam    0x40
c0019c2e:	d5 39                	aad    0x39
c0019c30:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019c33:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019c37:	0f b6 c9             	movzx  ecx,cl
c0019c3a:	09 cb                	or     ebx,ecx
c0019c3c:	c1 e3 04             	shl    ebx,0x4
c0019c3f:	89 d9                	mov    ecx,ebx
c0019c41:	d4 40                	aam    0x40
c0019c43:	d5 39                	aad    0x39
c0019c45:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019c48:	0f b6 db             	movzx  ebx,bl
c0019c4b:	09 cb                	or     ebx,ecx
c0019c4d:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019c51:	80 f9 58             	cmp    cl,0x58
c0019c54:	74 47                	je     c0019c9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019c56:	88 c8                	mov    al,cl
c0019c58:	d4 40                	aam    0x40
c0019c5a:	d5 39                	aad    0x39
c0019c5c:	83 e8 30             	sub    eax,0x30
c0019c5f:	0f b6 e8             	movzx  ebp,al
c0019c62:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019c66:	c1 e5 04             	shl    ebp,0x4
c0019c69:	d4 40                	aam    0x40
c0019c6b:	d5 39                	aad    0x39
c0019c6d:	83 e8 30             	sub    eax,0x30
c0019c70:	0f b6 f0             	movzx  esi,al
c0019c73:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019c77:	09 ee                	or     esi,ebp
c0019c79:	c1 e6 04             	shl    esi,0x4
c0019c7c:	d4 40                	aam    0x40
c0019c7e:	d5 39                	aad    0x39
c0019c80:	83 e8 30             	sub    eax,0x30
c0019c83:	0f b6 e8             	movzx  ebp,al
c0019c86:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019c8a:	09 ee                	or     esi,ebp
c0019c8c:	c1 e6 04             	shl    esi,0x4
c0019c8f:	89 f5                	mov    ebp,esi
c0019c91:	d4 40                	aam    0x40
c0019c93:	d5 39                	aad    0x39
c0019c95:	83 e8 30             	sub    eax,0x30
c0019c98:	0f b6 f0             	movzx  esi,al
c0019c9b:	09 ee                	or     esi,ebp
c0019c9d:	83 c7 10             	add    edi,0x10
c0019ca0:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019ca4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019ca7:	3c 0a                	cmp    al,0xa
c0019ca9:	74 09                	je     c0019cb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c0019cab:	45                   	inc    ebp
c0019cac:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019caf:	75 16                	jne    c0019cc7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c0019cb1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019cb4:	3c 0a                	cmp    al,0xa
c0019cb6:	0f 94 c0             	sete   al
c0019cb9:	0f b6 c0             	movzx  eax,al
c0019cbc:	01 c7                	add    edi,eax
c0019cbe:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019cc3:	75 0c                	jne    c0019cd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c0019cc5:	eb 15                	jmp    c0019cdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c0019cc7:	47                   	inc    edi
c0019cc8:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019ccb:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019ccf:	eb d3                	jmp    c0019ca4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c0019cd1:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019cd6:	0f 85 e8 fe ff ff    	jne    c0019bc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019cdc:	80 f9 58             	cmp    cl,0x58
c0019cdf:	74 0b                	je     c0019cec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c0019ce1:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019ce6:	0f 85 d8 fe ff ff    	jne    c0019bc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019cec:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019cf0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019cf4:	c1 e1 04             	shl    ecx,0x4
c0019cf7:	83 e8 30             	sub    eax,0x30
c0019cfa:	09 c8                	or     eax,ecx
c0019cfc:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019d00:	0f 85 be fe ff ff    	jne    c0019bc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019d06:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019d0a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019d0e:	c1 e1 04             	shl    ecx,0x4
c0019d11:	83 e8 30             	sub    eax,0x30
c0019d14:	09 c8                	or     eax,ecx
c0019d16:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019d1a:	0f 85 a4 fe ff ff    	jne    c0019bc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019d20:	50                   	push   eax
c0019d21:	50                   	push   eax
c0019d22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019d26:	50                   	push   eax
c0019d27:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019d2e:	e8 bd 68 fe ff       	call   c00005f0 <strcpy>
c0019d33:	83 c4 10             	add    esp,0x10
c0019d36:	eb 15                	jmp    c0019d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c0019d38:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019d3f:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019d4a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019d4d:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019d54:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d5a:	5b                   	pop    ebx
c0019d5b:	5e                   	pop    esi
c0019d5c:	5f                   	pop    edi
c0019d5d:	5d                   	pop    ebp
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <PCI::checkBus(unsigned char)>:
c0019d60:	56                   	push   esi
c0019d61:	53                   	push   ebx
c0019d62:	31 f6                	xor    esi,esi
c0019d64:	51                   	push   ecx
c0019d65:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019d69:	0f b6 c3             	movzx  eax,bl
c0019d6c:	52                   	push   edx
c0019d6d:	56                   	push   esi
c0019d6e:	46                   	inc    esi
c0019d6f:	50                   	push   eax
c0019d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d74:	e8 f3 02 00 00       	call   c001a06c <PCI::checkDevice(unsigned char, unsigned char)>
c0019d79:	83 c4 10             	add    esp,0x10
c0019d7c:	83 fe 20             	cmp    esi,0x20
c0019d7f:	75 e8                	jne    c0019d69 <PCI::checkBus(unsigned char)+0x9>
c0019d81:	58                   	pop    eax
c0019d82:	5b                   	pop    ebx
c0019d83:	5e                   	pop    esi
c0019d84:	c3                   	ret    
c0019d85:	90                   	nop

c0019d86 <PCI::foundDevice(PCIDeviceInfo)>:
c0019d86:	55                   	push   ebp
c0019d87:	57                   	push   edi
c0019d88:	56                   	push   esi
c0019d89:	53                   	push   ebx
c0019d8a:	83 ec 1c             	sub    esp,0x1c
c0019d8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d91:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0019d97:	0f 84 52 01 00 00    	je     c0019eef <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019d9d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019da1:	66 81 f9 06 04       	cmp    cx,0x406
c0019da6:	75 2c                	jne    c0019dd4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0019da8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0019dad:	50                   	push   eax
c0019dae:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0019db3:	50                   	push   eax
c0019db4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0019db9:	50                   	push   eax
c0019dba:	56                   	push   esi
c0019dbb:	e8 78 fb ff ff       	call   c0019938 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019dc0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019dc4:	0f b6 c0             	movzx  eax,al
c0019dc7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019dcb:	83 c4 2c             	add    esp,0x2c
c0019dce:	5b                   	pop    ebx
c0019dcf:	5e                   	pop    esi
c0019dd0:	5f                   	pop    edi
c0019dd1:	5d                   	pop    ebp
c0019dd2:	eb 8c                	jmp    c0019d60 <PCI::checkBus(unsigned char)>
c0019dd4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019dd8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0019dde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019de2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019de6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0019dea:	88 d3                	mov    bl,dl
c0019dec:	85 c0                	test   eax,eax
c0019dee:	74 33                	je     c0019e23 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019df0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019df3:	85 d2                	test   edx,edx
c0019df5:	74 28                	je     c0019e1f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019df7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019dfd:	31 ef                	xor    edi,ebp
c0019dff:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019e05:	75 18                	jne    c0019e1f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019e07:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019e0b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019e11:	75 0c                	jne    c0019e1f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019e13:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019e19:	0f 84 d0 00 00 00    	je     c0019eef <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019e1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e21:	eb c9                	jmp    c0019dec <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019e23:	66 81 f9 01 06       	cmp    cx,0x601
c0019e28:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019e2c:	75 19                	jne    c0019e47 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0019e2e:	83 ec 0c             	sub    esp,0xc
c0019e31:	68 64 01 00 00       	push   0x164
c0019e36:	e8 2a da fe ff       	call   c0007865 <malloc>
c0019e3b:	89 c5                	mov    ebp,eax
c0019e3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e40:	e8 47 0e 00 00       	call   c001ac8c <SATABus::SATABus()>
c0019e45:	eb 1e                	jmp    c0019e65 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019e47:	66 81 f9 01 01       	cmp    cx,0x101
c0019e4c:	75 60                	jne    c0019eae <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0019e4e:	83 ec 0c             	sub    esp,0xc
c0019e51:	68 70 02 00 00       	push   0x270
c0019e56:	e8 0a da fe ff       	call   c0007865 <malloc>
c0019e5b:	89 c5                	mov    ebp,eax
c0019e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e60:	e8 cb 02 00 00       	call   c001a130 <IDE::IDE()>
c0019e65:	58                   	pop    eax
c0019e66:	5a                   	pop    edx
c0019e67:	55                   	push   ebp
c0019e68:	56                   	push   esi
c0019e69:	e8 ca 1b ff ff       	call   c000ba38 <Device::addChild(Device*)>
c0019e6e:	83 ec 1c             	sub    esp,0x1c
c0019e71:	b9 09 00 00 00       	mov    ecx,0x9
c0019e76:	fc                   	cld    
c0019e77:	89 e7                	mov    edi,esp
c0019e79:	89 de                	mov    esi,ebx
c0019e7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019e7d:	55                   	push   ebp
c0019e7e:	e8 fb 1a ff ff       	call   c000b97e <Device::preOpenPCI(PCIDeviceInfo)>
c0019e83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e86:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0019e8a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0019e92:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0019e9a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0019ea2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019ea5:	83 c4 4c             	add    esp,0x4c
c0019ea8:	5b                   	pop    ebx
c0019ea9:	5e                   	pop    esi
c0019eaa:	5f                   	pop    edi
c0019eab:	5d                   	pop    ebp
c0019eac:	ff e0                	jmp    eax
c0019eae:	83 ec 0c             	sub    esp,0xc
c0019eb1:	68 58 01 00 00       	push   0x158
c0019eb6:	e8 aa d9 fe ff       	call   c0007865 <malloc>
c0019ebb:	89 c5                	mov    ebp,eax
c0019ebd:	58                   	pop    eax
c0019ebe:	5a                   	pop    edx
c0019ebf:	68 a2 0d 02 c0       	push   0xc0020da2
c0019ec4:	55                   	push   ebp
c0019ec5:	e8 0c 1e ff ff       	call   c000bcd6 <DriverlessDevice::DriverlessDevice(char const*)>
c0019eca:	59                   	pop    ecx
c0019ecb:	5f                   	pop    edi
c0019ecc:	55                   	push   ebp
c0019ecd:	56                   	push   esi
c0019ece:	e8 65 1b ff ff       	call   c000ba38 <Device::addChild(Device*)>
c0019ed3:	b9 09 00 00 00       	mov    ecx,0x9
c0019ed8:	fc                   	cld    
c0019ed9:	89 df                	mov    edi,ebx
c0019edb:	89 de                	mov    esi,ebx
c0019edd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019edf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019ee3:	83 c4 2c             	add    esp,0x2c
c0019ee6:	5b                   	pop    ebx
c0019ee7:	5e                   	pop    esi
c0019ee8:	5f                   	pop    edi
c0019ee9:	5d                   	pop    ebp
c0019eea:	e9 8f 1a ff ff       	jmp    c000b97e <Device::preOpenPCI(PCIDeviceInfo)>
c0019eef:	83 c4 1c             	add    esp,0x1c
c0019ef2:	5b                   	pop    ebx
c0019ef3:	5e                   	pop    esi
c0019ef4:	5f                   	pop    edi
c0019ef5:	5d                   	pop    ebp
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019ef8:	55                   	push   ebp
c0019ef9:	57                   	push   edi
c0019efa:	56                   	push   esi
c0019efb:	53                   	push   ebx
c0019efc:	83 ec 68             	sub    esp,0x68
c0019eff:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019f03:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019f0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f0e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019f15:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0019f1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019f1e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019f25:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0019f2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019f2e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019f33:	6a 0c                	push   0xc
c0019f35:	57                   	push   edi
c0019f36:	53                   	push   ebx
c0019f37:	56                   	push   esi
c0019f38:	55                   	push   ebp
c0019f39:	e8 4c f8 ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019f3e:	83 c4 20             	add    esp,0x20
c0019f41:	57                   	push   edi
c0019f42:	53                   	push   ebx
c0019f43:	56                   	push   esi
c0019f44:	55                   	push   ebp
c0019f45:	e8 34 f9 ff ff       	call   c001987e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0019f4a:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0019f4f:	57                   	push   edi
c0019f50:	53                   	push   ebx
c0019f51:	56                   	push   esi
c0019f52:	55                   	push   ebp
c0019f53:	e8 bc f9 ff ff       	call   c0019914 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019f58:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0019f5c:	83 c4 14             	add    esp,0x14
c0019f5f:	6a 3c                	push   0x3c
c0019f61:	57                   	push   edi
c0019f62:	53                   	push   ebx
c0019f63:	56                   	push   esi
c0019f64:	55                   	push   ebp
c0019f65:	e8 20 f8 ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019f6a:	0f b6 c4             	movzx  eax,ah
c0019f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f71:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019f75:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019f79:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0019f7e:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0019f84:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0019f8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f8e:	83 c4 20             	add    esp,0x20
c0019f91:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f96:	74 30                	je     c0019fc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019f98:	31 c0                	xor    eax,eax
c0019f9a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019f9e:	7e 28                	jle    c0019fc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019fa0:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0019fa8:	39 cb                	cmp    ebx,ecx
c0019faa:	75 19                	jne    c0019fc5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019fac:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0019fb4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0019fb8:	75 0b                	jne    c0019fc5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019fba:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019fc1:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019fc5:	40                   	inc    eax
c0019fc6:	eb d2                	jmp    c0019f9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0019fc8:	31 d2                	xor    edx,edx
c0019fca:	83 ec 0c             	sub    esp,0xc
c0019fcd:	57                   	push   edi
c0019fce:	53                   	push   ebx
c0019fcf:	56                   	push   esi
c0019fd0:	52                   	push   edx
c0019fd1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019fd5:	55                   	push   ebp
c0019fd6:	e8 85 f9 ff ff       	call   c0019960 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019fdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019fdf:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019fe3:	42                   	inc    edx
c0019fe4:	83 c4 20             	add    esp,0x20
c0019fe7:	83 fa 06             	cmp    edx,0x6
c0019fea:	75 de                	jne    c0019fca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019fec:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019ff1:	83 ec 0c             	sub    esp,0xc
c0019ff4:	86 e0                	xchg   al,ah
c0019ff6:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0019ffb:	6a 02                	push   0x2
c0019ffd:	57                   	push   edi
c0019ffe:	53                   	push   ebx
c0019fff:	56                   	push   esi
c001a000:	55                   	push   ebp
c001a001:	e8 84 f7 ff ff       	call   c001978a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a006:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a00b:	83 c4 20             	add    esp,0x20
c001a00e:	57                   	push   edi
c001a00f:	53                   	push   ebx
c001a010:	56                   	push   esi
c001a011:	55                   	push   ebp
c001a012:	e8 b1 f8 ff ff       	call   c00198c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a017:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a01b:	57                   	push   edi
c001a01c:	53                   	push   ebx
c001a01d:	56                   	push   esi
c001a01e:	55                   	push   ebp
c001a01f:	e8 0e f8 ff ff       	call   c0019832 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a024:	b9 09 00 00 00       	mov    ecx,0x9
c001a029:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a02e:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a032:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a036:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a03a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a03e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a042:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a046:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a04a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a04e:	83 ec 0c             	sub    esp,0xc
c001a051:	fc                   	cld    
c001a052:	89 e7                	mov    edi,esp
c001a054:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a058:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a05a:	55                   	push   ebp
c001a05b:	e8 26 fd ff ff       	call   c0019d86 <PCI::foundDevice(PCIDeviceInfo)>
c001a060:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a066:	5b                   	pop    ebx
c001a067:	5e                   	pop    esi
c001a068:	5f                   	pop    edi
c001a069:	5d                   	pop    ebp
c001a06a:	c3                   	ret    
c001a06b:	90                   	nop

c001a06c <PCI::checkDevice(unsigned char, unsigned char)>:
c001a06c:	55                   	push   ebp
c001a06d:	57                   	push   edi
c001a06e:	56                   	push   esi
c001a06f:	53                   	push   ebx
c001a070:	83 ec 0c             	sub    esp,0xc
c001a073:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a077:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a07c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a081:	6a 00                	push   0x0
c001a083:	56                   	push   esi
c001a084:	57                   	push   edi
c001a085:	55                   	push   ebp
c001a086:	e8 a7 f7 ff ff       	call   c0019832 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a08b:	6a 00                	push   0x0
c001a08d:	56                   	push   esi
c001a08e:	57                   	push   edi
c001a08f:	55                   	push   ebp
c001a090:	e8 63 fe ff ff       	call   c0019ef8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a095:	83 c4 20             	add    esp,0x20
c001a098:	6a 00                	push   0x0
c001a09a:	56                   	push   esi
c001a09b:	57                   	push   edi
c001a09c:	55                   	push   ebp
c001a09d:	e8 b4 f7 ff ff       	call   c0019856 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	84 c0                	test   al,al
c001a0a7:	79 27                	jns    c001a0d0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a0a9:	bb 01 00 00 00       	mov    ebx,0x1
c001a0ae:	53                   	push   ebx
c001a0af:	56                   	push   esi
c001a0b0:	57                   	push   edi
c001a0b1:	55                   	push   ebp
c001a0b2:	e8 7b f7 ff ff       	call   c0019832 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	66 40                	inc    ax
c001a0bc:	74 0c                	je     c001a0ca <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a0be:	53                   	push   ebx
c001a0bf:	56                   	push   esi
c001a0c0:	57                   	push   edi
c001a0c1:	55                   	push   ebp
c001a0c2:	e8 31 fe ff ff       	call   c0019ef8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a0c7:	83 c4 10             	add    esp,0x10
c001a0ca:	43                   	inc    ebx
c001a0cb:	83 fb 08             	cmp    ebx,0x8
c001a0ce:	75 de                	jne    c001a0ae <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a0d0:	83 c4 0c             	add    esp,0xc
c001a0d3:	5b                   	pop    ebx
c001a0d4:	5e                   	pop    esi
c001a0d5:	5f                   	pop    edi
c001a0d6:	5d                   	pop    ebp
c001a0d7:	c3                   	ret    

c001a0d8 <PCI::detect()>:
c001a0d8:	56                   	push   esi
c001a0d9:	53                   	push   ebx
c001a0da:	53                   	push   ebx
c001a0db:	31 db                	xor    ebx,ebx
c001a0dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0e1:	6a 00                	push   0x0
c001a0e3:	6a 00                	push   0x0
c001a0e5:	6a 00                	push   0x0
c001a0e7:	56                   	push   esi
c001a0e8:	e8 69 f7 ff ff       	call   c0019856 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	a8 80                	test   al,0x80
c001a0f2:	75 21                	jne    c001a115 <PCI::detect()+0x3d>
c001a0f4:	51                   	push   ecx
c001a0f5:	51                   	push   ecx
c001a0f6:	6a 00                	push   0x0
c001a0f8:	56                   	push   esi
c001a0f9:	e8 62 fc ff ff       	call   c0019d60 <PCI::checkBus(unsigned char)>
c001a0fe:	83 c4 10             	add    esp,0x10
c001a101:	eb 24                	jmp    c001a127 <PCI::detect()+0x4f>
c001a103:	52                   	push   edx
c001a104:	52                   	push   edx
c001a105:	53                   	push   ebx
c001a106:	43                   	inc    ebx
c001a107:	56                   	push   esi
c001a108:	e8 53 fc ff ff       	call   c0019d60 <PCI::checkBus(unsigned char)>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	83 fb 08             	cmp    ebx,0x8
c001a113:	74 12                	je     c001a127 <PCI::detect()+0x4f>
c001a115:	53                   	push   ebx
c001a116:	6a 00                	push   0x0
c001a118:	6a 00                	push   0x0
c001a11a:	56                   	push   esi
c001a11b:	e8 12 f7 ff ff       	call   c0019832 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	66 40                	inc    ax
c001a125:	74 dc                	je     c001a103 <PCI::detect()+0x2b>
c001a127:	58                   	pop    eax
c001a128:	5b                   	pop    ebx
c001a129:	5e                   	pop    esi
c001a12a:	c3                   	ret    
c001a12b:	90                   	nop

c001a12c <IDE::close(int, int, void*)>:
c001a12c:	83 c8 ff             	or     eax,0xffffffff
c001a12f:	c3                   	ret    

c001a130 <IDE::IDE()>:
c001a130:	83 ec 0c             	sub    esp,0xc
c001a133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a137:	83 ec 08             	sub    esp,0x8
c001a13a:	68 e8 0d 02 c0       	push   0xc0020de8
c001a13f:	50                   	push   eax
c001a140:	e8 37 1c ff ff       	call   c000bd7c <HardDiskController::HardDiskController(char const*)>
c001a145:	83 c4 10             	add    esp,0x10
c001a148:	ba 78 0e 02 c0       	mov    edx,0xc0020e78
c001a14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a151:	89 10                	mov    DWORD PTR [eax],edx
c001a153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a157:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a15e:	90                   	nop
c001a15f:	83 c4 0c             	add    esp,0xc
c001a162:	c3                   	ret    
c001a163:	90                   	nop

c001a164 <IDE::prepareInterrupt(unsigned char)>:
c001a164:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a169:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a16d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a175:	c3                   	ret    

c001a176 <selectDrive(unsigned char, unsigned char)>:
c001a176:	c3                   	ret    
c001a177:	90                   	nop

c001a178 <IDE::getBase(unsigned char)>:
c001a178:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a17d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a181:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a189:	c3                   	ret    

c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a18a:	55                   	push   ebp
c001a18b:	57                   	push   edi
c001a18c:	56                   	push   esi
c001a18d:	53                   	push   ebx
c001a18e:	83 ec 1c             	sub    esp,0x1c
c001a191:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a195:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a199:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a19c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a1a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1a4:	80 f9 03             	cmp    cl,0x3
c001a1a7:	77 51                	ja     c001a1fa <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a1a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1ad:	0f b6 f2             	movzx  esi,dl
c001a1b0:	0f b6 db             	movzx  ebx,bl
c001a1b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a1b6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a1ba:	83 ca 80             	or     edx,0xffffff80
c001a1bd:	0f b6 d2             	movzx  edx,dl
c001a1c0:	52                   	push   edx
c001a1c1:	6a 0c                	push   0xc
c001a1c3:	56                   	push   esi
c001a1c4:	57                   	push   edi
c001a1c5:	e8 c0 ff ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ca:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a1cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1d3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a1d7:	ee                   	out    dx,al
c001a1d8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a1dd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a1e1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a1e5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a1e9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a1f1:	83 c4 2c             	add    esp,0x2c
c001a1f4:	5b                   	pop    ebx
c001a1f5:	5e                   	pop    esi
c001a1f6:	5f                   	pop    edi
c001a1f7:	5d                   	pop    ebp
c001a1f8:	eb 90                	jmp    c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1fa:	80 fb 07             	cmp    bl,0x7
c001a1fd:	77 12                	ja     c001a211 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a1ff:	0f b6 d2             	movzx  edx,dl
c001a202:	0f b6 db             	movzx  ebx,bl
c001a205:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a20d:	89 da                	mov    edx,ebx
c001a20f:	eb 2f                	jmp    c001a240 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a211:	80 fb 0d             	cmp    bl,0xd
c001a214:	77 13                	ja     c001a229 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a216:	0f b6 d2             	movzx  edx,dl
c001a219:	0f b6 db             	movzx  ebx,bl
c001a21c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a223:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a227:	eb 17                	jmp    c001a240 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a229:	80 fb 15             	cmp    bl,0x15
c001a22c:	77 13                	ja     c001a241 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a22e:	0f b6 d2             	movzx  edx,dl
c001a231:	0f b6 db             	movzx  ebx,bl
c001a234:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a23c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a240:	ee                   	out    dx,al
c001a241:	83 c4 1c             	add    esp,0x1c
c001a244:	5b                   	pop    ebx
c001a245:	5e                   	pop    esi
c001a246:	5f                   	pop    edi
c001a247:	5d                   	pop    ebp
c001a248:	c3                   	ret    
c001a249:	90                   	nop

c001a24a <IDE::read(unsigned char, unsigned char)>:
c001a24a:	55                   	push   ebp
c001a24b:	57                   	push   edi
c001a24c:	56                   	push   esi
c001a24d:	53                   	push   ebx
c001a24e:	83 ec 1c             	sub    esp,0x1c
c001a251:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a255:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a259:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a25c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a260:	3c 03                	cmp    al,0x3
c001a262:	77 43                	ja     c001a2a7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001a264:	0f b6 f2             	movzx  esi,dl
c001a267:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a26a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a26e:	83 c8 80             	or     eax,0xffffff80
c001a271:	0f b6 c0             	movzx  eax,al
c001a274:	50                   	push   eax
c001a275:	6a 0c                	push   0xc
c001a277:	56                   	push   esi
c001a278:	57                   	push   edi
c001a279:	e8 0c ff ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a283:	0f b6 c3             	movzx  eax,bl
c001a286:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a28a:	ec                   	in     al,dx
c001a28b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a28f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a294:	52                   	push   edx
c001a295:	6a 0c                	push   0xc
c001a297:	56                   	push   esi
c001a298:	57                   	push   edi
c001a299:	e8 ec fe ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a29e:	83 c4 20             	add    esp,0x20
c001a2a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a2a5:	eb 49                	jmp    c001a2f0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a2a7:	80 fb 07             	cmp    bl,0x7
c001a2aa:	77 12                	ja     c001a2be <IDE::read(unsigned char, unsigned char)+0x74>
c001a2ac:	0f b6 d2             	movzx  edx,dl
c001a2af:	0f b6 c3             	movzx  eax,bl
c001a2b2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a2ba:	89 c2                	mov    edx,eax
c001a2bc:	eb 31                	jmp    c001a2ef <IDE::read(unsigned char, unsigned char)+0xa5>
c001a2be:	80 fb 0d             	cmp    bl,0xd
c001a2c1:	77 13                	ja     c001a2d6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001a2c3:	0f b6 d2             	movzx  edx,dl
c001a2c6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a2cd:	0f b6 d3             	movzx  edx,bl
c001a2d0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a2d4:	eb 19                	jmp    c001a2ef <IDE::read(unsigned char, unsigned char)+0xa5>
c001a2d6:	31 c0                	xor    eax,eax
c001a2d8:	80 fb 15             	cmp    bl,0x15
c001a2db:	77 13                	ja     c001a2f0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a2dd:	0f b6 d2             	movzx  edx,dl
c001a2e0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a2e8:	0f b6 d3             	movzx  edx,bl
c001a2eb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a2ef:	ec                   	in     al,dx
c001a2f0:	83 c4 1c             	add    esp,0x1c
c001a2f3:	5b                   	pop    ebx
c001a2f4:	5e                   	pop    esi
c001a2f5:	5f                   	pop    edi
c001a2f6:	5d                   	pop    ebp
c001a2f7:	c3                   	ret    

c001a2f8 <IDE::waitInterrupt(unsigned char)>:
c001a2f8:	57                   	push   edi
c001a2f9:	56                   	push   esi
c001a2fa:	31 f6                	xor    esi,esi
c001a2fc:	53                   	push   ebx
c001a2fd:	83 ec 10             	sub    esp,0x10
c001a300:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a304:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a308:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a30c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a311:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a318:	84 db                	test   bl,bl
c001a31a:	75 33                	jne    c001a34f <IDE::waitInterrupt(unsigned char)+0x57>
c001a31c:	52                   	push   edx
c001a31d:	6a 0c                	push   0xc
c001a31f:	50                   	push   eax
c001a320:	57                   	push   edi
c001a321:	e8 24 ff ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a326:	83 c4 10             	add    esp,0x10
c001a329:	a8 01                	test   al,0x1
c001a32b:	75 2a                	jne    c001a357 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a32d:	f7 c6 04 00 00 00    	test   esi,0x4
c001a333:	75 12                	jne    c001a347 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a335:	83 fe 32             	cmp    esi,0x32
c001a338:	7e 0d                	jle    c001a347 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a33a:	83 ec 0c             	sub    esp,0xc
c001a33d:	6a 64                	push   0x64
c001a33f:	e8 64 a7 ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	83 fe 3c             	cmp    esi,0x3c
c001a34a:	74 0b                	je     c001a357 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a34c:	46                   	inc    esi
c001a34d:	eb bd                	jmp    c001a30c <IDE::waitInterrupt(unsigned char)+0x14>
c001a34f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a357:	83 c4 10             	add    esp,0x10
c001a35a:	88 d8                	mov    al,bl
c001a35c:	5b                   	pop    ebx
c001a35d:	5e                   	pop    esi
c001a35e:	5f                   	pop    edi
c001a35f:	c3                   	ret    

c001a360 <ideChannel0IRQHandler(regs*, void*)>:
c001a360:	83 ec 10             	sub    esp,0x10
c001a363:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a367:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a36e:	6a 07                	push   0x7
c001a370:	6a 00                	push   0x0
c001a372:	50                   	push   eax
c001a373:	e8 d2 fe ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a378:	83 c4 1c             	add    esp,0x1c
c001a37b:	c3                   	ret    

c001a37c <ideChannel1IRQHandler(regs*, void*)>:
c001a37c:	83 ec 10             	sub    esp,0x10
c001a37f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a383:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a38a:	6a 07                	push   0x7
c001a38c:	6a 01                	push   0x1
c001a38e:	50                   	push   eax
c001a38f:	e8 b6 fe ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a394:	83 c4 1c             	add    esp,0x1c
c001a397:	c3                   	ret    

c001a398 <IDE::enableIRQs(unsigned char, bool)>:
c001a398:	57                   	push   edi
c001a399:	56                   	push   esi
c001a39a:	be 04 00 00 00       	mov    esi,0x4
c001a39f:	53                   	push   ebx
c001a3a0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a3a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3a9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a3ae:	0f 94 c0             	sete   al
c001a3b1:	01 c0                	add    eax,eax
c001a3b3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a3ba:	0f b6 c0             	movzx  eax,al
c001a3bd:	50                   	push   eax
c001a3be:	6a 0c                	push   0xc
c001a3c0:	57                   	push   edi
c001a3c1:	53                   	push   ebx
c001a3c2:	e8 c3 fd ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3c7:	83 c4 10             	add    esp,0x10
c001a3ca:	50                   	push   eax
c001a3cb:	6a 0c                	push   0xc
c001a3cd:	57                   	push   edi
c001a3ce:	53                   	push   ebx
c001a3cf:	e8 76 fe ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a3d4:	83 c4 10             	add    esp,0x10
c001a3d7:	4e                   	dec    esi
c001a3d8:	75 f0                	jne    c001a3ca <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a3da:	5b                   	pop    ebx
c001a3db:	5e                   	pop    esi
c001a3dc:	5f                   	pop    edi
c001a3dd:	c3                   	ret    

c001a3de <IDE::open(int, int, void*)>:
c001a3de:	55                   	push   ebp
c001a3df:	57                   	push   edi
c001a3e0:	56                   	push   esi
c001a3e1:	53                   	push   ebx
c001a3e2:	83 ec 1c             	sub    esp,0x1c
c001a3e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a3e9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a3f2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a3fb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a402:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a409:	0f 85 b0 02 00 00    	jne    c001a6bf <IDE::open(int, int, void*)+0x2e1>
c001a40f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a415:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a419:	83 e0 7f             	and    eax,0x7f
c001a41c:	3c 05                	cmp    al,0x5
c001a41e:	74 04                	je     c001a424 <IDE::open(int, int, void*)+0x46>
c001a420:	3c 0f                	cmp    al,0xf
c001a422:	75 32                	jne    c001a456 <IDE::open(int, int, void*)+0x78>
c001a424:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a42a:	83 e0 fc             	and    eax,0xfffffffc
c001a42d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a434:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a43a:	83 e0 fc             	and    eax,0xfffffffc
c001a43d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a444:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a44a:	83 e0 fc             	and    eax,0xfffffffc
c001a44d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a454:	eb 14                	jmp    c001a46a <IDE::open(int, int, void*)+0x8c>
c001a456:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a460:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a46a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a471:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a478:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a47c:	89 c6                	mov    esi,eax
c001a47e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a483:	c1 e6 10             	shl    esi,0x10
c001a486:	89 e8                	mov    eax,ebp
c001a488:	89 fa                	mov    edx,edi
c001a48a:	c1 e0 0b             	shl    eax,0xb
c001a48d:	09 f0                	or     eax,esi
c001a48f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a496:	c1 e6 08             	shl    esi,0x8
c001a499:	09 c6                	or     esi,eax
c001a49b:	89 f0                	mov    eax,esi
c001a49d:	0d 08 00 00 80       	or     eax,0x80000008
c001a4a2:	ef                   	out    dx,eax
c001a4a3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a4a8:	89 ca                	mov    edx,ecx
c001a4aa:	ed                   	in     eax,dx
c001a4ab:	c1 e8 10             	shr    eax,0x10
c001a4ae:	3d ff ff 00 00       	cmp    eax,0xffff
c001a4b3:	0f 84 f5 00 00 00    	je     c001a5ae <IDE::open(int, int, void*)+0x1d0>
c001a4b9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a4bf:	89 fa                	mov    edx,edi
c001a4c1:	89 f0                	mov    eax,esi
c001a4c3:	ef                   	out    dx,eax
c001a4c4:	b0 fe                	mov    al,0xfe
c001a4c6:	89 ca                	mov    edx,ecx
c001a4c8:	ee                   	out    dx,al
c001a4c9:	89 f0                	mov    eax,esi
c001a4cb:	89 fa                	mov    edx,edi
c001a4cd:	ef                   	out    dx,eax
c001a4ce:	89 ca                	mov    edx,ecx
c001a4d0:	ed                   	in     eax,dx
c001a4d1:	3c fe                	cmp    al,0xfe
c001a4d3:	0f 85 a9 00 00 00    	jne    c001a582 <IDE::open(int, int, void*)+0x1a4>
c001a4d9:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a4df:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a4e6:	74 33                	je     c001a51b <IDE::open(int, int, void*)+0x13d>
c001a4e8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a4ee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a4f2:	40                   	inc    eax
c001a4f3:	83 ec 0c             	sub    esp,0xc
c001a4f6:	0f b6 c0             	movzx  eax,al
c001a4f9:	50                   	push   eax
c001a4fa:	55                   	push   ebp
c001a4fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ff:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a505:	51                   	push   ecx
c001a506:	e8 c9 43 ff ff       	call   c000e8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a50b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a510:	83 c4 1c             	add    esp,0x1c
c001a513:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a519:	eb 0a                	jmp    c001a525 <IDE::open(int, int, void*)+0x147>
c001a51b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a525:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a52c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a533:	c1 e1 10             	shl    ecx,0x10
c001a536:	c1 e0 08             	shl    eax,0x8
c001a539:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a53e:	09 c1                	or     ecx,eax
c001a540:	89 fa                	mov    edx,edi
c001a542:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a549:	c1 e0 0b             	shl    eax,0xb
c001a54c:	09 c1                	or     ecx,eax
c001a54e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a554:	89 c8                	mov    eax,ecx
c001a556:	ef                   	out    dx,eax
c001a557:	be fc 0c 00 00       	mov    esi,0xcfc
c001a55c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a562:	89 f2                	mov    edx,esi
c001a564:	ee                   	out    dx,al
c001a565:	89 c8                	mov    eax,ecx
c001a567:	89 fa                	mov    edx,edi
c001a569:	ef                   	out    dx,eax
c001a56a:	89 f2                	mov    edx,esi
c001a56c:	ed                   	in     eax,dx
c001a56d:	0f b6 c0             	movzx  eax,al
c001a570:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a576:	74 46                	je     c001a5be <IDE::open(int, int, void*)+0x1e0>
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	68 00 0e 02 c0       	push   0xc0020e00
c001a580:	eb 34                	jmp    c001a5b6 <IDE::open(int, int, void*)+0x1d8>
c001a582:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a58b:	75 17                	jne    c001a5a4 <IDE::open(int, int, void*)+0x1c6>
c001a58d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a592:	74 07                	je     c001a59b <IDE::open(int, int, void*)+0x1bd>
c001a594:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a599:	75 09                	jne    c001a5a4 <IDE::open(int, int, void*)+0x1c6>
c001a59b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a5a2:	eb 1a                	jmp    c001a5be <IDE::open(int, int, void*)+0x1e0>
c001a5a4:	83 ec 0c             	sub    esp,0xc
c001a5a7:	68 08 0e 02 c0       	push   0xc0020e08
c001a5ac:	eb 08                	jmp    c001a5b6 <IDE::open(int, int, void*)+0x1d8>
c001a5ae:	83 ec 0c             	sub    esp,0xc
c001a5b1:	68 39 0e 02 c0       	push   0xc0020e39
c001a5b6:	e8 00 5e ff ff       	call   c00103bb <KePanic(char const*)>
c001a5bb:	83 c4 10             	add    esp,0x10
c001a5be:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a5c5:	79 1a                	jns    c001a5e1 <IDE::open(int, int, void*)+0x203>
c001a5c7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a5cd:	83 e0 fc             	and    eax,0xfffffffc
c001a5d0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a5d7:	83 c0 08             	add    eax,0x8
c001a5da:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a5e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a5e7:	89 c2                	mov    edx,eax
c001a5e9:	83 e2 0f             	and    edx,0xf
c001a5ec:	66 83 fa 08          	cmp    dx,0x8
c001a5f0:	75 0a                	jne    c001a5fc <IDE::open(int, int, void*)+0x21e>
c001a5f2:	83 e8 02             	sub    eax,0x2
c001a5f5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a5fc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a602:	89 c2                	mov    edx,eax
c001a604:	83 e2 0f             	and    edx,0xf
c001a607:	66 83 fa 08          	cmp    dx,0x8
c001a60b:	75 0a                	jne    c001a617 <IDE::open(int, int, void*)+0x239>
c001a60d:	83 e8 02             	sub    eax,0x2
c001a610:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a617:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a61e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a625:	89 d0                	mov    eax,edx
c001a627:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a62a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a62e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a632:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a635:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a63a:	0f b6 c9             	movzx  ecx,cl
c001a63d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a644:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a647:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a64b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a64f:	8d 50 02             	lea    edx,[eax+0x2]
c001a652:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a657:	0f b6 d2             	movzx  edx,dl
c001a65a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a660:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a663:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a667:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a66b:	8d 48 03             	lea    ecx,[eax+0x3]
c001a66e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a673:	0f b6 c9             	movzx  ecx,cl
c001a676:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a67c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a67f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a683:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a687:	8d 50 04             	lea    edx,[eax+0x4]
c001a68a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a690:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a695:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a69c:	66 85 f6             	test   si,si
c001a69f:	74 5b                	je     c001a6fc <IDE::open(int, int, void*)+0x31e>
c001a6a1:	0f b6 d2             	movzx  edx,dl
c001a6a4:	83 c0 05             	add    eax,0x5
c001a6a7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a6aa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a6ae:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a6b2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a6b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a6bd:	eb 3d                	jmp    c001a6fc <IDE::open(int, int, void*)+0x31e>
c001a6bf:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a6c5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a6cc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a6d3:	66 05 06 02          	add    ax,0x206
c001a6d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a6de:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a6e5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a6ec:	66 05 06 02          	add    ax,0x206
c001a6f0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a6f7:	e9 e5 fe ff ff       	jmp    c001a5e1 <IDE::open(int, int, void*)+0x203>
c001a6fc:	50                   	push   eax
c001a6fd:	50                   	push   eax
c001a6fe:	6a 00                	push   0x0
c001a700:	53                   	push   ebx
c001a701:	e8 5e fa ff ff       	call   c001a164 <IDE::prepareInterrupt(unsigned char)>
c001a706:	5a                   	pop    edx
c001a707:	59                   	pop    ecx
c001a708:	6a 01                	push   0x1
c001a70a:	53                   	push   ebx
c001a70b:	e8 54 fa ff ff       	call   c001a164 <IDE::prepareInterrupt(unsigned char)>
c001a710:	83 c4 0c             	add    esp,0xc
c001a713:	6a 00                	push   0x0
c001a715:	6a 00                	push   0x0
c001a717:	53                   	push   ebx
c001a718:	e8 7b fc ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001a71d:	83 c4 0c             	add    esp,0xc
c001a720:	6a 00                	push   0x0
c001a722:	6a 01                	push   0x1
c001a724:	53                   	push   ebx
c001a725:	e8 6e fc ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a734:	74 34                	je     c001a76a <IDE::open(int, int, void*)+0x38c>
c001a736:	83 ec 0c             	sub    esp,0xc
c001a739:	53                   	push   ebx
c001a73a:	6a 01                	push   0x1
c001a73c:	68 60 a3 01 c0       	push   0xc001a360
c001a741:	6a 0e                	push   0xe
c001a743:	53                   	push   ebx
c001a744:	e8 9b 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a749:	83 c4 14             	add    esp,0x14
c001a74c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a752:	53                   	push   ebx
c001a753:	6a 01                	push   0x1
c001a755:	68 7c a3 01 c0       	push   0xc001a37c
c001a75a:	6a 0f                	push   0xf
c001a75c:	53                   	push   ebx
c001a75d:	e8 82 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a762:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001a768:	eb 38                	jmp    c001a7a2 <IDE::open(int, int, void*)+0x3c4>
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001a777:	53                   	push   ebx
c001a778:	6a 00                	push   0x0
c001a77a:	68 60 a3 01 c0       	push   0xc001a360
c001a77f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001a785:	53                   	push   ebx
c001a786:	e8 59 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a78b:	83 c4 14             	add    esp,0x14
c001a78e:	53                   	push   ebx
c001a78f:	6a 00                	push   0x0
c001a791:	68 7c a3 01 c0       	push   0xc001a37c
c001a796:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001a79c:	53                   	push   ebx
c001a79d:	e8 42 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a7a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a4:	83 c4 20             	add    esp,0x20
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	53                   	push   ebx
c001a7ab:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001a7ae:	83 c4 0c             	add    esp,0xc
c001a7b1:	6a 07                	push   0x7
c001a7b3:	6a 00                	push   0x0
c001a7b5:	53                   	push   ebx
c001a7b6:	e8 8f fa ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a7bb:	83 c4 0c             	add    esp,0xc
c001a7be:	6a 07                	push   0x7
c001a7c0:	6a 01                	push   0x1
c001a7c2:	53                   	push   ebx
c001a7c3:	e8 82 fa ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a7c8:	83 c4 0c             	add    esp,0xc
c001a7cb:	6a 01                	push   0x1
c001a7cd:	6a 00                	push   0x0
c001a7cf:	53                   	push   ebx
c001a7d0:	e8 c3 fb ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001a7d5:	83 c4 0c             	add    esp,0xc
c001a7d8:	6a 01                	push   0x1
c001a7da:	6a 01                	push   0x1
c001a7dc:	53                   	push   ebx
c001a7dd:	e8 b6 fb ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001a7e2:	83 c4 2c             	add    esp,0x2c
c001a7e5:	31 c0                	xor    eax,eax
c001a7e7:	5b                   	pop    ebx
c001a7e8:	5e                   	pop    esi
c001a7e9:	5f                   	pop    edi
c001a7ea:	5d                   	pop    ebp
c001a7eb:	c3                   	ret    

c001a7ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001a7ec:	55                   	push   ebp
c001a7ed:	57                   	push   edi
c001a7ee:	56                   	push   esi
c001a7ef:	53                   	push   ebx
c001a7f0:	83 ec 1c             	sub    esp,0x1c
c001a7f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a7fb:	8d 50 f8             	lea    edx,[eax-0x8]
c001a7fe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a802:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a806:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a80a:	80 fa 03             	cmp    dl,0x3
c001a80d:	77 5d                	ja     c001a86c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001a80f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a817:	0f b6 db             	movzx  ebx,bl
c001a81a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001a81d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a821:	83 ca 80             	or     edx,0xffffff80
c001a824:	0f b6 d2             	movzx  edx,dl
c001a827:	52                   	push   edx
c001a828:	6a 0c                	push   0xc
c001a82a:	53                   	push   ebx
c001a82b:	56                   	push   esi
c001a82c:	e8 59 f9 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a831:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a836:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a83a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a83e:	0f b6 c0             	movzx  eax,al
c001a841:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001a845:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a847:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a84c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001a850:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a854:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a858:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a860:	83 c4 2c             	add    esp,0x2c
c001a863:	5b                   	pop    ebx
c001a864:	5e                   	pop    esi
c001a865:	5f                   	pop    edi
c001a866:	5d                   	pop    ebp
c001a867:	e9 1e f9 ff ff       	jmp    c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a86c:	3c 07                	cmp    al,0x7
c001a86e:	77 10                	ja     c001a880 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001a870:	0f b6 db             	movzx  ebx,bl
c001a873:	0f b6 d0             	movzx  edx,al
c001a876:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001a87e:	eb 2d                	jmp    c001a8ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a880:	3c 0d                	cmp    al,0xd
c001a882:	77 13                	ja     c001a897 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001a884:	0f b6 db             	movzx  ebx,bl
c001a887:	0f b6 c0             	movzx  eax,al
c001a88a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001a891:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001a895:	eb 16                	jmp    c001a8ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a897:	3c 15                	cmp    al,0x15
c001a899:	77 14                	ja     c001a8af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001a89b:	0f b6 db             	movzx  ebx,bl
c001a89e:	0f b6 c0             	movzx  eax,al
c001a8a1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001a8a9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001a8ad:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a8af:	83 c4 1c             	add    esp,0x1c
c001a8b2:	5b                   	pop    ebx
c001a8b3:	5e                   	pop    esi
c001a8b4:	5f                   	pop    edi
c001a8b5:	5d                   	pop    ebp
c001a8b6:	c3                   	ret    
c001a8b7:	90                   	nop

c001a8b8 <IDE::detect()>:
c001a8b8:	55                   	push   ebp
c001a8b9:	57                   	push   edi
c001a8ba:	56                   	push   esi
c001a8bb:	53                   	push   ebx
c001a8bc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a8c2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001a8c9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001a8d0:	0f 85 97 02 00 00    	jne    c001ab6d <IDE::detect()+0x2b5>
c001a8d6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001a8dd:	31 f6                	xor    esi,esi
c001a8df:	31 ed                	xor    ebp,ebp
c001a8e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8e9:	89 e8                	mov    eax,ebp
c001a8eb:	c1 e0 06             	shl    eax,0x6
c001a8ee:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001a8f6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a8fa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a8fe:	c1 e0 04             	shl    eax,0x4
c001a901:	83 c8 a0             	or     eax,0xffffffa0
c001a904:	0f b6 c0             	movzx  eax,al
c001a907:	50                   	push   eax
c001a908:	6a 06                	push   0x6
c001a90a:	56                   	push   esi
c001a90b:	53                   	push   ebx
c001a90c:	e8 79 f8 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a911:	83 c4 0c             	add    esp,0xc
c001a914:	6a 0c                	push   0xc
c001a916:	56                   	push   esi
c001a917:	53                   	push   ebx
c001a918:	e8 2d f9 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	6a 0c                	push   0xc
c001a922:	56                   	push   esi
c001a923:	53                   	push   ebx
c001a924:	e8 21 f9 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a929:	83 c4 0c             	add    esp,0xc
c001a92c:	6a 0c                	push   0xc
c001a92e:	56                   	push   esi
c001a92f:	53                   	push   ebx
c001a930:	e8 15 f9 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a935:	83 c4 0c             	add    esp,0xc
c001a938:	6a 0c                	push   0xc
c001a93a:	56                   	push   esi
c001a93b:	53                   	push   ebx
c001a93c:	e8 09 f9 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a941:	68 ec 00 00 00       	push   0xec
c001a946:	6a 07                	push   0x7
c001a948:	56                   	push   esi
c001a949:	53                   	push   ebx
c001a94a:	e8 3b f8 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a94f:	83 c4 1c             	add    esp,0x1c
c001a952:	6a 0c                	push   0xc
c001a954:	56                   	push   esi
c001a955:	53                   	push   ebx
c001a956:	e8 ef f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a95b:	83 c4 0c             	add    esp,0xc
c001a95e:	6a 0c                	push   0xc
c001a960:	56                   	push   esi
c001a961:	53                   	push   ebx
c001a962:	e8 e3 f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a967:	83 c4 0c             	add    esp,0xc
c001a96a:	6a 0c                	push   0xc
c001a96c:	56                   	push   esi
c001a96d:	53                   	push   ebx
c001a96e:	e8 d7 f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a973:	83 c4 0c             	add    esp,0xc
c001a976:	6a 0c                	push   0xc
c001a978:	56                   	push   esi
c001a979:	53                   	push   ebx
c001a97a:	e8 cb f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a97f:	83 c4 0c             	add    esp,0xc
c001a982:	6a 0c                	push   0xc
c001a984:	56                   	push   esi
c001a985:	53                   	push   ebx
c001a986:	e8 bf f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a98b:	83 c4 10             	add    esp,0x10
c001a98e:	84 c0                	test   al,al
c001a990:	0f 84 5f 01 00 00    	je     c001aaf5 <IDE::detect()+0x23d>
c001a996:	31 ff                	xor    edi,edi
c001a998:	50                   	push   eax
c001a999:	6a 0c                	push   0xc
c001a99b:	56                   	push   esi
c001a99c:	53                   	push   ebx
c001a99d:	e8 a8 f8 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	a8 01                	test   al,0x1
c001a9a7:	0f 85 69 01 00 00    	jne    c001ab16 <IDE::detect()+0x25e>
c001a9ad:	84 c0                	test   al,al
c001a9af:	78 04                	js     c001a9b5 <IDE::detect()+0xfd>
c001a9b1:	a8 08                	test   al,0x8
c001a9b3:	75 23                	jne    c001a9d8 <IDE::detect()+0x120>
c001a9b5:	47                   	inc    edi
c001a9b6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001a9bc:	7e da                	jle    c001a998 <IDE::detect()+0xe0>
c001a9be:	83 ec 0c             	sub    esp,0xc
c001a9c1:	6a 32                	push   0x32
c001a9c3:	e8 e0 a0 ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001a9d1:	75 c5                	jne    c001a998 <IDE::detect()+0xe0>
c001a9d3:	e9 3e 01 00 00       	jmp    c001ab16 <IDE::detect()+0x25e>
c001a9d8:	31 c9                	xor    ecx,ecx
c001a9da:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001a9de:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001a9e2:	83 ec 0c             	sub    esp,0xc
c001a9e5:	68 80 00 00 00       	push   0x80
c001a9ea:	57                   	push   edi
c001a9eb:	6a 00                	push   0x0
c001a9ed:	56                   	push   esi
c001a9ee:	53                   	push   ebx
c001a9ef:	e8 f8 fd ff ff       	call   c001a7ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001a9f4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001a9f9:	89 e8                	mov    eax,ebp
c001a9fb:	89 d1                	mov    ecx,edx
c001a9fd:	c1 e0 06             	shl    eax,0x6
c001aa00:	01 d8                	add    eax,ebx
c001aa02:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001aa09:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001aa10:	89 f2                	mov    edx,esi
c001aa12:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001aa18:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001aa1c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001aa22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa26:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001aa2d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001aa35:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001aa3c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001aa44:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001aa4a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001aa51:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001aa57:	8d 54 24 58          	lea    edx,[esp+0x58]
c001aa5b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa5f:	83 c4 20             	add    esp,0x20
c001aa62:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001aa65:	83 c0 02             	add    eax,0x2
c001aa68:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001aa6e:	83 c7 02             	add    edi,0x2
c001aa71:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001aa74:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001aa7a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001aa7e:	75 e2                	jne    c001aa62 <IDE::detect()+0x1aa>
c001aa80:	89 e8                	mov    eax,ebp
c001aa82:	c1 e0 06             	shl    eax,0x6
c001aa85:	01 d8                	add    eax,ebx
c001aa87:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001aa8d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001aa94:	66 c1 ea 09          	shr    dx,0x9
c001aa98:	83 e2 01             	and    edx,0x1
c001aa9b:	84 c9                	test   cl,cl
c001aa9d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001aaa3:	75 22                	jne    c001aac7 <IDE::detect()+0x20f>
c001aaa5:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001aaac:	74 46                	je     c001aaf4 <IDE::detect()+0x23c>
c001aaae:	83 ec 0c             	sub    esp,0xc
c001aab1:	68 7c 01 00 00       	push   0x17c
c001aab6:	e8 aa cd fe ff       	call   c0007865 <malloc>
c001aabb:	89 c7                	mov    edi,eax
c001aabd:	89 04 24             	mov    DWORD PTR [esp],eax
c001aac0:	e8 11 05 00 00       	call   c001afd6 <ATA::ATA()>
c001aac5:	eb 17                	jmp    c001aade <IDE::detect()+0x226>
c001aac7:	83 ec 0c             	sub    esp,0xc
c001aaca:	68 84 01 00 00       	push   0x184
c001aacf:	e8 91 cd fe ff       	call   c0007865 <malloc>
c001aad4:	89 c7                	mov    edi,eax
c001aad6:	89 04 24             	mov    DWORD PTR [esp],eax
c001aad9:	e8 1e 0e 00 00       	call   c001b8fc <ATAPI::ATAPI()>
c001aade:	5a                   	pop    edx
c001aadf:	59                   	pop    ecx
c001aae0:	57                   	push   edi
c001aae1:	53                   	push   ebx
c001aae2:	e8 51 0f ff ff       	call   c000ba38 <Device::addChild(Device*)>
c001aae7:	8b 07                	mov    eax,DWORD PTR [edi]
c001aae9:	53                   	push   ebx
c001aaea:	55                   	push   ebp
c001aaeb:	6a 00                	push   0x0
c001aaed:	57                   	push   edi
c001aaee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaf1:	83 c4 20             	add    esp,0x20
c001aaf4:	45                   	inc    ebp
c001aaf5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001aafa:	74 0d                	je     c001ab09 <IDE::detect()+0x251>
c001aafc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ab04:	e9 e0 fd ff ff       	jmp    c001a8e9 <IDE::detect()+0x31>
c001ab09:	4e                   	dec    esi
c001ab0a:	74 61                	je     c001ab6d <IDE::detect()+0x2b5>
c001ab0c:	be 01 00 00 00       	mov    esi,0x1
c001ab11:	e9 cb fd ff ff       	jmp    c001a8e1 <IDE::detect()+0x29>
c001ab16:	50                   	push   eax
c001ab17:	6a 04                	push   0x4
c001ab19:	56                   	push   esi
c001ab1a:	53                   	push   ebx
c001ab1b:	e8 2a f7 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001ab20:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab24:	83 c4 0c             	add    esp,0xc
c001ab27:	6a 05                	push   0x5
c001ab29:	56                   	push   esi
c001ab2a:	53                   	push   ebx
c001ab2b:	e8 1a f7 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ab37:	80 fa 14             	cmp    dl,0x14
c001ab3a:	75 04                	jne    c001ab40 <IDE::detect()+0x288>
c001ab3c:	3c eb                	cmp    al,0xeb
c001ab3e:	eb 07                	jmp    c001ab47 <IDE::detect()+0x28f>
c001ab40:	3c 96                	cmp    al,0x96
c001ab42:	75 b1                	jne    c001aaf5 <IDE::detect()+0x23d>
c001ab44:	80 fa 69             	cmp    dl,0x69
c001ab47:	75 ac                	jne    c001aaf5 <IDE::detect()+0x23d>
c001ab49:	68 a1 00 00 00       	push   0xa1
c001ab4e:	6a 07                	push   0x7
c001ab50:	56                   	push   esi
c001ab51:	53                   	push   ebx
c001ab52:	e8 33 f6 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab57:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ab5e:	e8 45 9f ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	b1 01                	mov    cl,0x1
c001ab68:	e9 6d fe ff ff       	jmp    c001a9da <IDE::detect()+0x122>
c001ab6d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab73:	5b                   	pop    ebx
c001ab74:	5e                   	pop    esi
c001ab75:	5f                   	pop    edi
c001ab76:	5d                   	pop    ebp
c001ab77:	c3                   	ret    

c001ab78 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ab78:	55                   	push   ebp
c001ab79:	57                   	push   edi
c001ab7a:	56                   	push   esi
c001ab7b:	53                   	push   ebx
c001ab7c:	83 ec 1c             	sub    esp,0x1c
c001ab7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ab8b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ab8f:	88 c3                	mov    bl,al
c001ab91:	84 c0                	test   al,al
c001ab93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab97:	0f 84 81 00 00 00    	je     c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	68 63 0e 02 c0       	push   0xc0020e63
c001aba5:	e8 50 fa fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abb1:	3c 01                	cmp    al,0x1
c001abb3:	74 63                	je     c001ac18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001abb5:	3c 02                	cmp    al,0x2
c001abb7:	75 53                	jne    c001ac0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001abb9:	01 f6                	add    esi,esi
c001abbb:	09 ee                	or     esi,ebp
c001abbd:	50                   	push   eax
c001abbe:	89 f0                	mov    eax,esi
c001abc0:	6a 01                	push   0x1
c001abc2:	0f b6 f0             	movzx  esi,al
c001abc5:	c1 e6 06             	shl    esi,0x6
c001abc8:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001abd0:	50                   	push   eax
c001abd1:	57                   	push   edi
c001abd2:	e8 73 f6 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	a8 01                	test   al,0x1
c001abdc:	74 02                	je     c001abe0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001abde:	b3 07                	mov    bl,0x7
c001abe0:	a8 02                	test   al,0x2
c001abe2:	74 02                	je     c001abe6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001abe4:	b3 03                	mov    bl,0x3
c001abe6:	a8 04                	test   al,0x4
c001abe8:	74 02                	je     c001abec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001abea:	b3 14                	mov    bl,0x14
c001abec:	a8 08                	test   al,0x8
c001abee:	74 02                	je     c001abf2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001abf0:	b3 03                	mov    bl,0x3
c001abf2:	a8 10                	test   al,0x10
c001abf4:	74 02                	je     c001abf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001abf6:	b3 15                	mov    bl,0x15
c001abf8:	a8 20                	test   al,0x20
c001abfa:	74 02                	je     c001abfe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001abfc:	b3 03                	mov    bl,0x3
c001abfe:	a8 40                	test   al,0x40
c001ac00:	74 02                	je     c001ac04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ac02:	b3 16                	mov    bl,0x16
c001ac04:	84 c0                	test   al,al
c001ac06:	79 16                	jns    c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac08:	b3 0d                	mov    bl,0xd
c001ac0a:	eb 12                	jmp    c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac0c:	3c 03                	cmp    al,0x3
c001ac0e:	74 0c                	je     c001ac1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ac10:	3c 04                	cmp    al,0x4
c001ac12:	75 0a                	jne    c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac14:	b3 08                	mov    bl,0x8
c001ac16:	eb 06                	jmp    c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac18:	b3 13                	mov    bl,0x13
c001ac1a:	eb 02                	jmp    c001ac1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac1c:	b3 17                	mov    bl,0x17
c001ac1e:	83 c4 1c             	add    esp,0x1c
c001ac21:	88 d8                	mov    al,bl
c001ac23:	5b                   	pop    ebx
c001ac24:	5e                   	pop    esi
c001ac25:	5f                   	pop    edi
c001ac26:	5d                   	pop    ebp
c001ac27:	c3                   	ret    

c001ac28 <IDE::polling(unsigned char, unsigned int)>:
c001ac28:	55                   	push   ebp
c001ac29:	bd 04 00 00 00       	mov    ebp,0x4
c001ac2e:	57                   	push   edi
c001ac2f:	56                   	push   esi
c001ac30:	53                   	push   ebx
c001ac31:	83 ec 0c             	sub    esp,0xc
c001ac34:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac38:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001ac3c:	0f b6 f3             	movzx  esi,bl
c001ac3f:	52                   	push   edx
c001ac40:	6a 0c                	push   0xc
c001ac42:	56                   	push   esi
c001ac43:	57                   	push   edi
c001ac44:	e8 01 f6 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	4d                   	dec    ebp
c001ac4d:	75 ed                	jne    c001ac3c <IDE::polling(unsigned char, unsigned int)+0x14>
c001ac4f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ac54:	50                   	push   eax
c001ac55:	6a 0c                	push   0xc
c001ac57:	56                   	push   esi
c001ac58:	57                   	push   edi
c001ac59:	e8 ec f5 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001ac5e:	83 c4 10             	add    esp,0x10
c001ac61:	a8 01                	test   al,0x1
c001ac63:	75 17                	jne    c001ac7c <IDE::polling(unsigned char, unsigned int)+0x54>
c001ac65:	a8 20                	test   al,0x20
c001ac67:	75 0f                	jne    c001ac78 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ac69:	4b                   	dec    ebx
c001ac6a:	74 10                	je     c001ac7c <IDE::polling(unsigned char, unsigned int)+0x54>
c001ac6c:	84 c0                	test   al,al
c001ac6e:	78 e4                	js     c001ac54 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ac70:	a8 08                	test   al,0x8
c001ac72:	74 e0                	je     c001ac54 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ac74:	31 c0                	xor    eax,eax
c001ac76:	eb 06                	jmp    c001ac7e <IDE::polling(unsigned char, unsigned int)+0x56>
c001ac78:	b0 01                	mov    al,0x1
c001ac7a:	eb 02                	jmp    c001ac7e <IDE::polling(unsigned char, unsigned int)+0x56>
c001ac7c:	b0 02                	mov    al,0x2
c001ac7e:	83 c4 0c             	add    esp,0xc
c001ac81:	5b                   	pop    ebx
c001ac82:	5e                   	pop    esi
c001ac83:	5f                   	pop    edi
c001ac84:	5d                   	pop    ebp
c001ac85:	c3                   	ret    

c001ac86 <SATABus::close(int, int, void*)>:
c001ac86:	31 c0                	xor    eax,eax
c001ac88:	c3                   	ret    
c001ac89:	90                   	nop

c001ac8a <SATABus::detect()>:
c001ac8a:	c3                   	ret    
c001ac8b:	90                   	nop

c001ac8c <SATABus::SATABus()>:
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac93:	83 ec 08             	sub    esp,0x8
c001ac96:	68 9c 0e 02 c0       	push   0xc0020e9c
c001ac9b:	50                   	push   eax
c001ac9c:	e8 db 10 ff ff       	call   c000bd7c <HardDiskController::HardDiskController(char const*)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	ba c8 0e 02 c0       	mov    edx,0xc0020ec8
c001aca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acad:	89 10                	mov    DWORD PTR [eax],edx
c001acaf:	83 ec 0c             	sub    esp,0xc
c001acb2:	6a 50                	push   0x50
c001acb4:	e8 46 cf fe ff       	call   c0007bff <Phys::allocateContiguousPages(int)>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	89 c2                	mov    edx,eax
c001acbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001acc8:	83 ec 0c             	sub    esp,0xc
c001accb:	6a 50                	push   0x50
c001accd:	e8 6b e6 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001acd2:	83 c4 10             	add    esp,0x10
c001acd5:	89 c2                	mov    edx,eax
c001acd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ace1:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001ace6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acea:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001acf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acf4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001acfa:	83 ec 0c             	sub    esp,0xc
c001acfd:	6a 03                	push   0x3
c001acff:	6a 50                	push   0x50
c001ad01:	51                   	push   ecx
c001ad02:	52                   	push   edx
c001ad03:	50                   	push   eax
c001ad04:	e8 f1 ef fe ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ad09:	83 c4 20             	add    esp,0x20
c001ad0c:	90                   	nop
c001ad0d:	83 c4 0c             	add    esp,0xc
c001ad10:	c3                   	ret    
c001ad11:	90                   	nop

c001ad12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ad12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad16:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ad19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ad1c:	09 c2                	or     edx,eax
c001ad1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ad28:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad2a:	31 c0                	xor    eax,eax
c001ad2c:	c1 e9 08             	shr    ecx,0x8
c001ad2f:	83 e1 0f             	and    ecx,0xf
c001ad32:	39 c8                	cmp    eax,ecx
c001ad34:	74 0a                	je     c001ad40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ad36:	f6 c2 01             	test   dl,0x1
c001ad39:	74 08                	je     c001ad43 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ad3b:	d1 ea                	shr    edx,1
c001ad3d:	40                   	inc    eax
c001ad3e:	eb f2                	jmp    c001ad32 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ad40:	83 c8 ff             	or     eax,0xffffffff
c001ad43:	c3                   	ret    

c001ad44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ad44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ad48:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ad4b:	89 c2                	mov    edx,eax
c001ad4d:	c1 ea 08             	shr    edx,0x8
c001ad50:	83 e2 0f             	and    edx,0xf
c001ad53:	fe ca                	dec    dl
c001ad55:	75 31                	jne    c001ad88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ad57:	83 e0 0f             	and    eax,0xf
c001ad5a:	3c 03                	cmp    al,0x3
c001ad5c:	75 2a                	jne    c001ad88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ad5e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ad61:	b8 02 00 00 00       	mov    eax,0x2
c001ad66:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ad6c:	74 1c                	je     c001ad8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ad6e:	b8 04 00 00 00       	mov    eax,0x4
c001ad73:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ad79:	74 0f                	je     c001ad8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ad7b:	31 c0                	xor    eax,eax
c001ad7d:	83 fa 03             	cmp    edx,0x3
c001ad80:	0f 94 c0             	sete   al
c001ad83:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ad87:	c3                   	ret    
c001ad88:	31 c0                	xor    eax,eax
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ad8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ad93:	0f ba e2 0f          	bt     edx,0xf
c001ad97:	72 f7                	jb     c001ad90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ad99:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ad9c:	83 ca 10             	or     edx,0x10
c001ad9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ada2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ada5:	83 ca 01             	or     edx,0x1
c001ada8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adab:	c3                   	ret    

c001adac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001adac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adb3:	83 e2 fe             	and    edx,0xfffffffe
c001adb6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adb9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adbc:	83 e2 ef             	and    edx,0xffffffef
c001adbf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adc5:	0f ba e2 0e          	bt     edx,0xe
c001adc9:	72 f7                	jb     c001adc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001adcb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adce:	0f ba e2 0f          	bt     edx,0xf
c001add2:	72 ee                	jb     c001adc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001add4:	c3                   	ret    
c001add5:	90                   	nop

c001add6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001add6:	55                   	push   ebp
c001add7:	57                   	push   edi
c001add8:	56                   	push   esi
c001add9:	53                   	push   ebx
c001adda:	83 ec 1c             	sub    esp,0x1c
c001addd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ade1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ade5:	53                   	push   ebx
c001ade6:	56                   	push   esi
c001ade7:	e8 c0 ff ff ff       	call   c001adac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001adec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001adf0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	c1 e5 0a             	shl    ebp,0xa
c001adfc:	01 e8                	add    eax,ebp
c001adfe:	89 03                	mov    DWORD PTR [ebx],eax
c001ae00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae02:	68 00 04 00 00       	push   0x400
c001ae07:	6a 00                	push   0x0
c001ae09:	50                   	push   eax
c001ae0a:	e8 b1 56 fe ff       	call   c00004c0 <memset>
c001ae0f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ae15:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae19:	01 e8                	add    eax,ebp
c001ae1b:	83 c4 1c             	add    esp,0x1c
c001ae1e:	89 03                	mov    DWORD PTR [ebx],eax
c001ae20:	c1 e2 08             	shl    edx,0x8
c001ae23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae2a:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ae30:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ae36:	01 f8                	add    eax,edi
c001ae38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ae3b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ae3e:	68 00 01 00 00       	push   0x100
c001ae43:	6a 00                	push   0x0
c001ae45:	50                   	push   eax
c001ae46:	e8 75 56 fe ff       	call   c00004c0 <memset>
c001ae4b:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ae51:	01 fa                	add    edx,edi
c001ae53:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ae57:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ae5a:	c1 e7 0d             	shl    edi,0xd
c001ae5d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ae64:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ae6a:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ae70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae74:	31 ff                	xor    edi,edi
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ae7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae83:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ae89:	83 c5 20             	add    ebp,0x20
c001ae8c:	01 f8                	add    eax,edi
c001ae8e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ae91:	52                   	push   edx
c001ae92:	68 00 01 00 00       	push   0x100
c001ae97:	6a 00                	push   0x0
c001ae99:	50                   	push   eax
c001ae9a:	e8 21 56 fe ff       	call   c00004c0 <memset>
c001ae9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001aeac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001aeb3:	01 f8                	add    eax,edi
c001aeb5:	81 c7 00 01 00 00    	add    edi,0x100
c001aebb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001aebe:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001aec4:	75 b3                	jne    c001ae79 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001aec6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001aecd:	50                   	push   eax
c001aece:	50                   	push   eax
c001aecf:	53                   	push   ebx
c001aed0:	56                   	push   esi
c001aed1:	e8 b6 fe ff ff       	call   c001ad8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001aed6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001aedd:	83 c4 2c             	add    esp,0x2c
c001aee0:	5b                   	pop    ebx
c001aee1:	5e                   	pop    esi
c001aee2:	5f                   	pop    edi
c001aee3:	5d                   	pop    ebp
c001aee4:	c3                   	ret    
c001aee5:	90                   	nop

c001aee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001aee6:	55                   	push   ebp
c001aee7:	57                   	push   edi
c001aee8:	56                   	push   esi
c001aee9:	53                   	push   ebx
c001aeea:	31 db                	xor    ebx,ebx
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aef3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aef7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001aefa:	f7 c7 01 00 00 00    	test   edi,0x1
c001af00:	74 7a                	je     c001af7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001af02:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001af06:	89 d8                	mov    eax,ebx
c001af08:	c1 e0 07             	shl    eax,0x7
c001af0b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001af12:	55                   	push   ebp
c001af13:	56                   	push   esi
c001af14:	e8 2b fe ff ff       	call   c001ad44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001af19:	5a                   	pop    edx
c001af1a:	83 f8 01             	cmp    eax,0x1
c001af1d:	59                   	pop    ecx
c001af1e:	75 21                	jne    c001af41 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001af20:	50                   	push   eax
c001af21:	53                   	push   ebx
c001af22:	55                   	push   ebp
c001af23:	56                   	push   esi
c001af24:	e8 ad fe ff ff       	call   c001add6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af29:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001af30:	e8 30 c9 fe ff       	call   c0007865 <malloc>
c001af35:	89 c5                	mov    ebp,eax
c001af37:	89 04 24             	mov    DWORD PTR [esp],eax
c001af3a:	e8 71 10 00 00       	call   c001bfb0 <SATA::SATA()>
c001af3f:	eb 24                	jmp    c001af65 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001af41:	83 f8 04             	cmp    eax,0x4
c001af44:	75 36                	jne    c001af7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001af46:	51                   	push   ecx
c001af47:	53                   	push   ebx
c001af48:	55                   	push   ebp
c001af49:	56                   	push   esi
c001af4a:	e8 87 fe ff ff       	call   c001add6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af4f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001af56:	e8 0a c9 fe ff       	call   c0007865 <malloc>
c001af5b:	89 c5                	mov    ebp,eax
c001af5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001af60:	e8 a5 17 00 00       	call   c001c70a <SATAPI::SATAPI()>
c001af65:	58                   	pop    eax
c001af66:	5a                   	pop    edx
c001af67:	55                   	push   ebp
c001af68:	56                   	push   esi
c001af69:	e8 ca 0a ff ff       	call   c000ba38 <Device::addChild(Device*)>
c001af6e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001af71:	56                   	push   esi
c001af72:	6a 00                	push   0x0
c001af74:	53                   	push   ebx
c001af75:	55                   	push   ebp
c001af76:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001af79:	83 c4 20             	add    esp,0x20
c001af7c:	d1 ef                	shr    edi,1
c001af7e:	43                   	inc    ebx
c001af7f:	83 fb 20             	cmp    ebx,0x20
c001af82:	0f 85 72 ff ff ff    	jne    c001aefa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001af88:	83 c4 0c             	add    esp,0xc
c001af8b:	5b                   	pop    ebx
c001af8c:	5e                   	pop    esi
c001af8d:	5f                   	pop    edi
c001af8e:	5d                   	pop    ebp
c001af8f:	c3                   	ret    

c001af90 <SATABus::open(int, int, void*)>:
c001af90:	83 ec 14             	sub    esp,0x14
c001af93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af97:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001af9d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001afa3:	52                   	push   edx
c001afa4:	50                   	push   eax
c001afa5:	e8 3c ff ff ff       	call   c001aee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001afaa:	31 c0                	xor    eax,eax
c001afac:	83 c4 1c             	add    esp,0x1c
c001afaf:	c3                   	ret    

c001afb0 <ATA::close(int, int, void*)>:
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001afbd:	85 c0                	test   eax,eax
c001afbf:	74 0c                	je     c001afcd <ATA::close(int, int, void*)+0x1d>
c001afc1:	83 ec 0c             	sub    esp,0xc
c001afc4:	8b 10                	mov    edx,DWORD PTR [eax]
c001afc6:	50                   	push   eax
c001afc7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	31 c0                	xor    eax,eax
c001afcf:	83 c4 0c             	add    esp,0xc
c001afd2:	c3                   	ret    
c001afd3:	90                   	nop

c001afd4 <ATA::powerSaving(PowerSavingLevel)>:
c001afd4:	c3                   	ret    
c001afd5:	90                   	nop

c001afd6 <ATA::ATA()>:
c001afd6:	83 ec 0c             	sub    esp,0xc
c001afd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdd:	83 ec 04             	sub    esp,0x4
c001afe0:	68 00 02 00 00       	push   0x200
c001afe5:	68 95 0f 02 c0       	push   0xc0020f95
c001afea:	50                   	push   eax
c001afeb:	e8 16 0e ff ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aff0:	83 c4 10             	add    esp,0x10
c001aff3:	ba 08 0f 02 c0       	mov    edx,0xc0020f08
c001aff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affc:	89 10                	mov    DWORD PTR [eax],edx
c001affe:	90                   	nop
c001afff:	83 c4 0c             	add    esp,0xc
c001b002:	c3                   	ret    
c001b003:	90                   	nop

c001b004 <ATA::flush(bool)>:
c001b004:	53                   	push   ebx
c001b005:	83 ec 08             	sub    esp,0x8
c001b008:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b00d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b011:	19 c0                	sbb    eax,eax
c001b013:	83 e0 fd             	and    eax,0xfffffffd
c001b016:	05 ea 00 00 00       	add    eax,0xea
c001b01b:	50                   	push   eax
c001b01c:	6a 07                	push   0x7
c001b01e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b025:	50                   	push   eax
c001b026:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b02c:	e8 59 f1 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b031:	83 c4 0c             	add    esp,0xc
c001b034:	6a 00                	push   0x0
c001b036:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b03d:	50                   	push   eax
c001b03e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b044:	e8 df fb ff ff       	call   c001ac28 <IDE::polling(unsigned char, unsigned int)>
c001b049:	83 c4 18             	add    esp,0x18
c001b04c:	5b                   	pop    ebx
c001b04d:	c3                   	ret    

c001b04e <ATA::readyForCommand()>:
c001b04e:	56                   	push   esi
c001b04f:	53                   	push   ebx
c001b050:	53                   	push   ebx
c001b051:	31 db                	xor    ebx,ebx
c001b053:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b057:	51                   	push   ecx
c001b058:	6a 0c                	push   0xc
c001b05a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b061:	50                   	push   eax
c001b062:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b068:	e8 dd f1 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001b06d:	83 c4 10             	add    esp,0x10
c001b070:	a8 88                	test   al,0x88
c001b072:	74 1f                	je     c001b093 <ATA::readyForCommand()+0x45>
c001b074:	43                   	inc    ebx
c001b075:	83 fb 63             	cmp    ebx,0x63
c001b078:	7e dd                	jle    c001b057 <ATA::readyForCommand()+0x9>
c001b07a:	83 ec 0c             	sub    esp,0xc
c001b07d:	6a 0a                	push   0xa
c001b07f:	e8 24 9a ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b08d:	75 c8                	jne    c001b057 <ATA::readyForCommand()+0x9>
c001b08f:	31 c0                	xor    eax,eax
c001b091:	eb 02                	jmp    c001b095 <ATA::readyForCommand()+0x47>
c001b093:	b0 01                	mov    al,0x1
c001b095:	5a                   	pop    edx
c001b096:	5b                   	pop    ebx
c001b097:	5e                   	pop    esi
c001b098:	c3                   	ret    
c001b099:	90                   	nop

c001b09a <ATA::access(unsigned long long, int, void*, bool)>:
c001b09a:	55                   	push   ebp
c001b09b:	57                   	push   edi
c001b09c:	56                   	push   esi
c001b09d:	53                   	push   ebx
c001b09e:	83 ec 2c             	sub    esp,0x2c
c001b0a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b0a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b0a9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b0ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b0b1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b0b5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b0b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b0bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b0c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b0cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0d1:	c1 e0 06             	shl    eax,0x6
c001b0d4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b0dc:	74 5d                	je     c001b13b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b0de:	89 fa                	mov    edx,edi
c001b0e0:	89 f0                	mov    eax,esi
c001b0e2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b0e6:	c1 ea 1c             	shr    edx,0x1c
c001b0e9:	89 d1                	mov    ecx,edx
c001b0eb:	09 c1                	or     ecx,eax
c001b0ed:	74 25                	je     c001b114 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b0ef:	31 ed                	xor    ebp,ebp
c001b0f1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b0f8:	89 fa                	mov    edx,edi
c001b0fa:	89 f0                	mov    eax,esi
c001b0fc:	0f ad d0             	shrd   eax,edx,cl
c001b0ff:	d3 ea                	shr    edx,cl
c001b101:	f6 c1 20             	test   cl,0x20
c001b104:	74 02                	je     c001b108 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b106:	89 d0                	mov    eax,edx
c001b108:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b10c:	45                   	inc    ebp
c001b10d:	83 fd 06             	cmp    ebp,0x6
c001b110:	75 df                	jne    c001b0f1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b112:	eb 76                	jmp    c001b18a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b114:	89 f0                	mov    eax,esi
c001b116:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b11b:	89 fa                	mov    edx,edi
c001b11d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b124:	0f ac d0 10          	shrd   eax,edx,0x10
c001b128:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b12d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b131:	c1 ee 18             	shr    esi,0x18
c001b134:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b139:	eb 56                	jmp    c001b191 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b13b:	6a 00                	push   0x0
c001b13d:	6a 3f                	push   0x3f
c001b13f:	57                   	push   edi
c001b140:	56                   	push   esi
c001b141:	e8 6a 2a 00 00       	call   c001dbb0 <__umoddi3>
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	40                   	inc    eax
c001b14a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b14e:	6a 00                	push   0x0
c001b150:	68 f0 03 00 00       	push   0x3f0
c001b155:	57                   	push   edi
c001b156:	56                   	push   esi
c001b157:	e8 54 29 00 00       	call   c001dab0 <__udivdi3>
c001b15c:	83 c4 10             	add    esp,0x10
c001b15f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b164:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b16b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b170:	6a 00                	push   0x0
c001b172:	6a 3f                	push   0x3f
c001b174:	57                   	push   edi
c001b175:	56                   	push   esi
c001b176:	e8 35 29 00 00       	call   c001dab0 <__udivdi3>
c001b17b:	83 c4 10             	add    esp,0x10
c001b17e:	89 c6                	mov    esi,eax
c001b180:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b185:	83 e6 0f             	and    esi,0xf
c001b188:	eb 07                	jmp    c001b191 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b18a:	31 f6                	xor    esi,esi
c001b18c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b191:	bf 01 00 00 00       	mov    edi,0x1
c001b196:	50                   	push   eax
c001b197:	6a 00                	push   0x0
c001b199:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b1a0:	50                   	push   eax
c001b1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1a5:	e8 ee f1 ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001b1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1ad:	e8 9c fe ff ff       	call   c001b04e <ATA::readyForCommand()>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	84 c0                	test   al,al
c001b1b7:	0f 84 4e 02 00 00    	je     c001b40b <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b1bd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b1c3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b1c9:	c1 e0 04             	shl    eax,0x4
c001b1cc:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b1d3:	09 c6                	or     esi,eax
c001b1d5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b1da:	75 05                	jne    c001b1e1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b1dc:	83 ce a0             	or     esi,0xffffffa0
c001b1df:	eb 03                	jmp    c001b1e4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b1e1:	83 ce e0             	or     esi,0xffffffe0
c001b1e4:	89 f0                	mov    eax,esi
c001b1e6:	0f b6 f0             	movzx  esi,al
c001b1e9:	56                   	push   esi
c001b1ea:	6a 06                	push   0x6
c001b1ec:	51                   	push   ecx
c001b1ed:	52                   	push   edx
c001b1ee:	e8 97 ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1f3:	83 c4 10             	add    esp,0x10
c001b1f6:	6a 00                	push   0x0
c001b1f8:	6a 01                	push   0x1
c001b1fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b201:	50                   	push   eax
c001b202:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b208:	e8 7d ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b20d:	83 c4 10             	add    esp,0x10
c001b210:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b215:	75 6e                	jne    c001b285 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b217:	6a 00                	push   0x0
c001b219:	6a 08                	push   0x8
c001b21b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b222:	50                   	push   eax
c001b223:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b229:	e8 5c ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b22e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b233:	50                   	push   eax
c001b234:	6a 09                	push   0x9
c001b236:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b23d:	50                   	push   eax
c001b23e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b244:	e8 41 ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b249:	83 c4 20             	add    esp,0x20
c001b24c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b251:	50                   	push   eax
c001b252:	6a 0a                	push   0xa
c001b254:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b25b:	50                   	push   eax
c001b25c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b262:	e8 23 ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b267:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b26c:	50                   	push   eax
c001b26d:	6a 0b                	push   0xb
c001b26f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b276:	50                   	push   eax
c001b277:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b27d:	e8 08 ef ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b282:	83 c4 20             	add    esp,0x20
c001b285:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b28a:	50                   	push   eax
c001b28b:	6a 02                	push   0x2
c001b28d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b294:	50                   	push   eax
c001b295:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b29b:	e8 ea ee ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2a0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b2a5:	50                   	push   eax
c001b2a6:	6a 03                	push   0x3
c001b2a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2af:	50                   	push   eax
c001b2b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2b6:	e8 cf ee ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2bb:	83 c4 20             	add    esp,0x20
c001b2be:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b2c3:	50                   	push   eax
c001b2c4:	6a 04                	push   0x4
c001b2c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2cd:	50                   	push   eax
c001b2ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2d4:	e8 b1 ee ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2de:	50                   	push   eax
c001b2df:	6a 05                	push   0x5
c001b2e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2e8:	50                   	push   eax
c001b2e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2ef:	e8 96 ee ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2f4:	83 c4 20             	add    esp,0x20
c001b2f7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b2fc:	0f 94 c0             	sete   al
c001b2ff:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b304:	74 09                	je     c001b30f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b306:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b30d:	eb 07                	jmp    c001b316 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b30f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b316:	0f b6 c0             	movzx  eax,al
c001b319:	50                   	push   eax
c001b31a:	6a 07                	push   0x7
c001b31c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b323:	50                   	push   eax
c001b324:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b32a:	e8 5b ee ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b32f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b333:	83 c4 10             	add    esp,0x10
c001b336:	85 f6                	test   esi,esi
c001b338:	0f 84 ae 00 00 00    	je     c001b3ec <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b33e:	50                   	push   eax
c001b33f:	6a 01                	push   0x1
c001b341:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b348:	50                   	push   eax
c001b349:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b34f:	e8 d4 f8 ff ff       	call   c001ac28 <IDE::polling(unsigned char, unsigned int)>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b35d:	84 c0                	test   al,al
c001b35f:	74 20                	je     c001b381 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b361:	0f b6 f8             	movzx  edi,al
c001b364:	0f b6 d2             	movzx  edx,dl
c001b367:	57                   	push   edi
c001b368:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b36f:	50                   	push   eax
c001b370:	52                   	push   edx
c001b371:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b377:	e8 fc f7 ff ff       	call   c001ab78 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b37c:	e9 87 00 00 00       	jmp    c001b408 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b381:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b386:	74 33                	je     c001b3bb <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b388:	31 ed                	xor    ebp,ebp
c001b38a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b38e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b392:	50                   	push   eax
c001b393:	50                   	push   eax
c001b394:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b39b:	50                   	push   eax
c001b39c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b3a2:	e8 d1 ed ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001b3a7:	89 c2                	mov    edx,eax
c001b3a9:	89 f8                	mov    eax,edi
c001b3ab:	66 ef                	out    dx,ax
c001b3ad:	45                   	inc    ebp
c001b3ae:	83 c4 10             	add    esp,0x10
c001b3b1:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b3b7:	75 d1                	jne    c001b38a <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b3b9:	eb 23                	jmp    c001b3de <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b3bb:	0f b6 d2             	movzx  edx,dl
c001b3be:	51                   	push   ecx
c001b3bf:	51                   	push   ecx
c001b3c0:	52                   	push   edx
c001b3c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b3c7:	e8 ac ed ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001b3cc:	b9 00 01 00 00       	mov    ecx,0x100
c001b3d1:	89 c2                	mov    edx,eax
c001b3d3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b3d7:	fc                   	cld    
c001b3d8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b3e6:	4e                   	dec    esi
c001b3e7:	e9 4a ff ff ff       	jmp    c001b336 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b3ec:	31 ff                	xor    edi,edi
c001b3ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b3f3:	74 16                	je     c001b40b <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b3f5:	50                   	push   eax
c001b3f6:	50                   	push   eax
c001b3f7:	31 c0                	xor    eax,eax
c001b3f9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b3fe:	0f 94 c0             	sete   al
c001b401:	50                   	push   eax
c001b402:	53                   	push   ebx
c001b403:	e8 fc fb ff ff       	call   c001b004 <ATA::flush(bool)>
c001b408:	83 c4 10             	add    esp,0x10
c001b40b:	83 c4 2c             	add    esp,0x2c
c001b40e:	89 f8                	mov    eax,edi
c001b410:	5b                   	pop    ebx
c001b411:	5e                   	pop    esi
c001b412:	5f                   	pop    edi
c001b413:	5d                   	pop    ebp
c001b414:	c3                   	ret    
c001b415:	90                   	nop

c001b416 <ATA::detectCHS()>:
c001b416:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b41a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b420:	c1 e0 06             	shl    eax,0x6
c001b423:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b429:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b433:	c7 44 24 04 ec 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020eec
c001b43b:	e9 7b 4f ff ff       	jmp    c00103bb <KePanic(char const*)>

c001b440 <ATA::open(int, int, void*)>:
c001b440:	53                   	push   ebx
c001b441:	83 ec 08             	sub    esp,0x8
c001b444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b448:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b44c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b450:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b456:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b45c:	c1 e0 06             	shl    eax,0x6
c001b45f:	01 d0                	add    eax,edx
c001b461:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b468:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b46e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b475:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b47f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b485:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b48c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b493:	75 0c                	jne    c001b4a1 <ATA::open(int, int, void*)+0x61>
c001b495:	83 ec 0c             	sub    esp,0xc
c001b498:	53                   	push   ebx
c001b499:	e8 78 ff ff ff       	call   c001b416 <ATA::detectCHS()>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b4a7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b4ad:	c1 e0 06             	shl    eax,0x6
c001b4b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b4b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b4c1:	d1 e8                	shr    eax,1
c001b4c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b4c9:	6a 04                	push   0x4
c001b4cb:	6a 0c                	push   0xc
c001b4cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4d4:	50                   	push   eax
c001b4d5:	52                   	push   edx
c001b4d6:	e8 af ec ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4db:	90                   	nop
c001b4dc:	90                   	nop
c001b4dd:	6a 00                	push   0x0
c001b4df:	6a 0c                	push   0xc
c001b4e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4e8:	50                   	push   eax
c001b4e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4ef:	e8 96 ec ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4f4:	83 c4 14             	add    esp,0x14
c001b4f7:	53                   	push   ebx
c001b4f8:	e8 71 09 ff ff       	call   c000be6e <PhysicalDisk::startCache()>
c001b4fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b500:	e8 dd 1a ff ff       	call   c000cfe2 <createPartitionsForDisk(PhysicalDisk*)>
c001b505:	31 c0                	xor    eax,eax
c001b507:	83 c4 18             	add    esp,0x18
c001b50a:	5b                   	pop    ebx
c001b50b:	c3                   	ret    

c001b50c <combineCharAndColour(char, unsigned char)>:
c001b50c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b511:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b517:	c1 e0 08             	shl    eax,0x8
c001b51a:	09 d0                	or     eax,edx
c001b51c:	c3                   	ret    

c001b51d <combineColours(unsigned char, unsigned char)>:
c001b51d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b522:	c1 e0 04             	shl    eax,0x4
c001b525:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b529:	c3                   	ret    

c001b52a <ATA::read(unsigned long long, int, void*)>:
c001b52a:	55                   	push   ebp
c001b52b:	57                   	push   edi
c001b52c:	56                   	push   esi
c001b52d:	be 04 00 00 00       	mov    esi,0x4
c001b532:	53                   	push   ebx
c001b533:	83 ec 0c             	sub    esp,0xc
c001b536:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b53a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b53e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b541:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b545:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b549:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b54f:	0f 87 a1 01 00 00    	ja     c001b6f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b555:	be 06 00 00 00       	mov    esi,0x6
c001b55a:	85 c9                	test   ecx,ecx
c001b55c:	0f 84 94 01 00 00    	je     c001b6f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b562:	55                   	push   ebp
c001b563:	55                   	push   ebp
c001b564:	6a 00                	push   0x0
c001b566:	51                   	push   ecx
c001b567:	53                   	push   ebx
c001b568:	52                   	push   edx
c001b569:	50                   	push   eax
c001b56a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b56e:	e8 27 fb ff ff       	call   c001b09a <ATA::access(unsigned long long, int, void*, bool)>
c001b573:	83 c4 20             	add    esp,0x20
c001b576:	89 c6                	mov    esi,eax
c001b578:	85 c0                	test   eax,eax
c001b57a:	0f 85 71 01 00 00    	jne    c001b6f1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b580:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b586:	89 da                	mov    edx,ebx
c001b588:	50                   	push   eax
c001b589:	bd 10 27 00 00       	mov    ebp,0x2710
c001b58e:	50                   	push   eax
c001b58f:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b595:	6a 0f                	push   0xf
c001b597:	6a 00                	push   0x0
c001b599:	e8 7f ff ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001b59e:	59                   	pop    ecx
c001b59f:	b9 0a 00 00 00       	mov    ecx,0xa
c001b5a4:	5b                   	pop    ebx
c001b5a5:	0f b6 d8             	movzx  ebx,al
c001b5a8:	89 d0                	mov    eax,edx
c001b5aa:	53                   	push   ebx
c001b5ab:	99                   	cdq    
c001b5ac:	f7 fd                	idiv   ebp
c001b5ae:	99                   	cdq    
c001b5af:	f7 f9                	idiv   ecx
c001b5b1:	83 c2 30             	add    edx,0x30
c001b5b4:	0f b6 d2             	movzx  edx,dl
c001b5b7:	52                   	push   edx
c001b5b8:	e8 4f ff ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b5bd:	5f                   	pop    edi
c001b5be:	bf e8 03 00 00       	mov    edi,0x3e8
c001b5c3:	5a                   	pop    edx
c001b5c4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b5ca:	53                   	push   ebx
c001b5cb:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5d0:	99                   	cdq    
c001b5d1:	f7 ff                	idiv   edi
c001b5d3:	99                   	cdq    
c001b5d4:	f7 f9                	idiv   ecx
c001b5d6:	8d 42 30             	lea    eax,[edx+0x30]
c001b5d9:	0f b6 c0             	movzx  eax,al
c001b5dc:	50                   	push   eax
c001b5dd:	e8 2a ff ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b5e2:	5f                   	pop    edi
c001b5e3:	bf 64 00 00 00       	mov    edi,0x64
c001b5e8:	5a                   	pop    edx
c001b5e9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b5ef:	53                   	push   ebx
c001b5f0:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5f5:	99                   	cdq    
c001b5f6:	f7 ff                	idiv   edi
c001b5f8:	99                   	cdq    
c001b5f9:	f7 f9                	idiv   ecx
c001b5fb:	8d 42 30             	lea    eax,[edx+0x30]
c001b5fe:	0f b6 c0             	movzx  eax,al
c001b601:	50                   	push   eax
c001b602:	e8 05 ff ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b607:	5a                   	pop    edx
c001b608:	5a                   	pop    edx
c001b609:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b60f:	53                   	push   ebx
c001b610:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b615:	99                   	cdq    
c001b616:	f7 f9                	idiv   ecx
c001b618:	99                   	cdq    
c001b619:	f7 f9                	idiv   ecx
c001b61b:	8d 42 30             	lea    eax,[edx+0x30]
c001b61e:	0f b6 c0             	movzx  eax,al
c001b621:	50                   	push   eax
c001b622:	e8 e5 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b627:	5a                   	pop    edx
c001b628:	5a                   	pop    edx
c001b629:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b62f:	53                   	push   ebx
c001b630:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b635:	99                   	cdq    
c001b636:	f7 f9                	idiv   ecx
c001b638:	83 c2 30             	add    edx,0x30
c001b63b:	0f b6 d2             	movzx  edx,dl
c001b63e:	52                   	push   edx
c001b63f:	e8 c8 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b644:	5a                   	pop    edx
c001b645:	5a                   	pop    edx
c001b646:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b64c:	53                   	push   ebx
c001b64d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b652:	99                   	cdq    
c001b653:	f7 fd                	idiv   ebp
c001b655:	99                   	cdq    
c001b656:	f7 f9                	idiv   ecx
c001b658:	8d 42 30             	lea    eax,[edx+0x30]
c001b65b:	0f b6 c0             	movzx  eax,al
c001b65e:	50                   	push   eax
c001b65f:	e8 a8 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b664:	5d                   	pop    ebp
c001b665:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b66a:	5a                   	pop    edx
c001b66b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b671:	53                   	push   ebx
c001b672:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b677:	99                   	cdq    
c001b678:	f7 fd                	idiv   ebp
c001b67a:	99                   	cdq    
c001b67b:	f7 f9                	idiv   ecx
c001b67d:	8d 42 30             	lea    eax,[edx+0x30]
c001b680:	0f b6 c0             	movzx  eax,al
c001b683:	50                   	push   eax
c001b684:	e8 83 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b689:	5d                   	pop    ebp
c001b68a:	5a                   	pop    edx
c001b68b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b691:	53                   	push   ebx
c001b692:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b697:	99                   	cdq    
c001b698:	f7 ff                	idiv   edi
c001b69a:	99                   	cdq    
c001b69b:	f7 f9                	idiv   ecx
c001b69d:	8d 42 30             	lea    eax,[edx+0x30]
c001b6a0:	0f b6 c0             	movzx  eax,al
c001b6a3:	50                   	push   eax
c001b6a4:	e8 63 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b6a9:	5f                   	pop    edi
c001b6aa:	5d                   	pop    ebp
c001b6ab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b6b1:	53                   	push   ebx
c001b6b2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6b7:	99                   	cdq    
c001b6b8:	f7 f9                	idiv   ecx
c001b6ba:	99                   	cdq    
c001b6bb:	f7 f9                	idiv   ecx
c001b6bd:	8d 42 30             	lea    eax,[edx+0x30]
c001b6c0:	0f b6 c0             	movzx  eax,al
c001b6c3:	50                   	push   eax
c001b6c4:	e8 43 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b6c9:	5a                   	pop    edx
c001b6ca:	5f                   	pop    edi
c001b6cb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b6d1:	53                   	push   ebx
c001b6d2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6d7:	99                   	cdq    
c001b6d8:	f7 f9                	idiv   ecx
c001b6da:	83 c2 30             	add    edx,0x30
c001b6dd:	0f b6 d2             	movzx  edx,dl
c001b6e0:	52                   	push   edx
c001b6e1:	e8 26 fe ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b6ef:	eb 05                	jmp    c001b6f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b6f1:	be 01 00 00 00       	mov    esi,0x1
c001b6f6:	83 c4 0c             	add    esp,0xc
c001b6f9:	89 f0                	mov    eax,esi
c001b6fb:	5b                   	pop    ebx
c001b6fc:	5e                   	pop    esi
c001b6fd:	5f                   	pop    edi
c001b6fe:	5d                   	pop    ebp
c001b6ff:	c3                   	ret    

c001b700 <ATA::write(unsigned long long, int, void*)>:
c001b700:	55                   	push   ebp
c001b701:	57                   	push   edi
c001b702:	56                   	push   esi
c001b703:	be 04 00 00 00       	mov    esi,0x4
c001b708:	53                   	push   ebx
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b710:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b714:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b717:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b71b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b71f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b725:	0f 87 9c 01 00 00    	ja     c001b8c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b72b:	be 06 00 00 00       	mov    esi,0x6
c001b730:	85 c9                	test   ecx,ecx
c001b732:	0f 84 8f 01 00 00    	je     c001b8c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b738:	55                   	push   ebp
c001b739:	55                   	push   ebp
c001b73a:	6a 01                	push   0x1
c001b73c:	51                   	push   ecx
c001b73d:	53                   	push   ebx
c001b73e:	52                   	push   edx
c001b73f:	50                   	push   eax
c001b740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b744:	e8 51 f9 ff ff       	call   c001b09a <ATA::access(unsigned long long, int, void*, bool)>
c001b749:	83 c4 20             	add    esp,0x20
c001b74c:	89 c6                	mov    esi,eax
c001b74e:	85 c0                	test   eax,eax
c001b750:	0f 85 6c 01 00 00    	jne    c001b8c2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001b756:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001b75c:	bd 10 27 00 00       	mov    ebp,0x2710
c001b761:	50                   	push   eax
c001b762:	50                   	push   eax
c001b763:	6a 0f                	push   0xf
c001b765:	6a 00                	push   0x0
c001b767:	e8 b1 fd ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001b76c:	5a                   	pop    edx
c001b76d:	0f b6 d8             	movzx  ebx,al
c001b770:	59                   	pop    ecx
c001b771:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b776:	53                   	push   ebx
c001b777:	b9 0a 00 00 00       	mov    ecx,0xa
c001b77c:	99                   	cdq    
c001b77d:	f7 fd                	idiv   ebp
c001b77f:	99                   	cdq    
c001b780:	f7 f9                	idiv   ecx
c001b782:	8d 42 30             	lea    eax,[edx+0x30]
c001b785:	0f b6 c0             	movzx  eax,al
c001b788:	50                   	push   eax
c001b789:	e8 7e fd ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b78e:	5f                   	pop    edi
c001b78f:	bf e8 03 00 00       	mov    edi,0x3e8
c001b794:	5a                   	pop    edx
c001b795:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b79b:	53                   	push   ebx
c001b79c:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7a1:	99                   	cdq    
c001b7a2:	f7 ff                	idiv   edi
c001b7a4:	99                   	cdq    
c001b7a5:	f7 f9                	idiv   ecx
c001b7a7:	8d 42 30             	lea    eax,[edx+0x30]
c001b7aa:	0f b6 c0             	movzx  eax,al
c001b7ad:	50                   	push   eax
c001b7ae:	e8 59 fd ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b7b3:	5f                   	pop    edi
c001b7b4:	bf 64 00 00 00       	mov    edi,0x64
c001b7b9:	5a                   	pop    edx
c001b7ba:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b7c0:	53                   	push   ebx
c001b7c1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7c6:	99                   	cdq    
c001b7c7:	f7 ff                	idiv   edi
c001b7c9:	99                   	cdq    
c001b7ca:	f7 f9                	idiv   ecx
c001b7cc:	8d 42 30             	lea    eax,[edx+0x30]
c001b7cf:	0f b6 c0             	movzx  eax,al
c001b7d2:	50                   	push   eax
c001b7d3:	e8 34 fd ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b7d8:	5a                   	pop    edx
c001b7d9:	5a                   	pop    edx
c001b7da:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b7e0:	53                   	push   ebx
c001b7e1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7e6:	99                   	cdq    
c001b7e7:	f7 f9                	idiv   ecx
c001b7e9:	99                   	cdq    
c001b7ea:	f7 f9                	idiv   ecx
c001b7ec:	8d 42 30             	lea    eax,[edx+0x30]
c001b7ef:	0f b6 c0             	movzx  eax,al
c001b7f2:	50                   	push   eax
c001b7f3:	e8 14 fd ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b7f8:	5a                   	pop    edx
c001b7f9:	5a                   	pop    edx
c001b7fa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b800:	53                   	push   ebx
c001b801:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b806:	99                   	cdq    
c001b807:	f7 f9                	idiv   ecx
c001b809:	8d 42 30             	lea    eax,[edx+0x30]
c001b80c:	0f b6 c0             	movzx  eax,al
c001b80f:	50                   	push   eax
c001b810:	e8 f7 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b815:	5a                   	pop    edx
c001b816:	5a                   	pop    edx
c001b817:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b81d:	53                   	push   ebx
c001b81e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b823:	99                   	cdq    
c001b824:	f7 fd                	idiv   ebp
c001b826:	99                   	cdq    
c001b827:	f7 f9                	idiv   ecx
c001b829:	8d 42 30             	lea    eax,[edx+0x30]
c001b82c:	0f b6 c0             	movzx  eax,al
c001b82f:	50                   	push   eax
c001b830:	e8 d7 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b835:	5d                   	pop    ebp
c001b836:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b83b:	5a                   	pop    edx
c001b83c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b842:	53                   	push   ebx
c001b843:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b848:	99                   	cdq    
c001b849:	f7 fd                	idiv   ebp
c001b84b:	99                   	cdq    
c001b84c:	f7 f9                	idiv   ecx
c001b84e:	8d 42 30             	lea    eax,[edx+0x30]
c001b851:	0f b6 c0             	movzx  eax,al
c001b854:	50                   	push   eax
c001b855:	e8 b2 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b85a:	5d                   	pop    ebp
c001b85b:	5a                   	pop    edx
c001b85c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b862:	53                   	push   ebx
c001b863:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b868:	99                   	cdq    
c001b869:	f7 ff                	idiv   edi
c001b86b:	99                   	cdq    
c001b86c:	f7 f9                	idiv   ecx
c001b86e:	8d 42 30             	lea    eax,[edx+0x30]
c001b871:	0f b6 c0             	movzx  eax,al
c001b874:	50                   	push   eax
c001b875:	e8 92 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b87a:	5f                   	pop    edi
c001b87b:	5d                   	pop    ebp
c001b87c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b882:	53                   	push   ebx
c001b883:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b888:	99                   	cdq    
c001b889:	f7 f9                	idiv   ecx
c001b88b:	99                   	cdq    
c001b88c:	f7 f9                	idiv   ecx
c001b88e:	8d 42 30             	lea    eax,[edx+0x30]
c001b891:	0f b6 c0             	movzx  eax,al
c001b894:	50                   	push   eax
c001b895:	e8 72 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b89a:	5a                   	pop    edx
c001b89b:	5f                   	pop    edi
c001b89c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b8a2:	53                   	push   ebx
c001b8a3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b8a8:	99                   	cdq    
c001b8a9:	f7 f9                	idiv   ecx
c001b8ab:	83 c2 30             	add    edx,0x30
c001b8ae:	0f b6 d2             	movzx  edx,dl
c001b8b1:	52                   	push   edx
c001b8b2:	e8 55 fc ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b8c0:	eb 05                	jmp    c001b8c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b8c2:	be 01 00 00 00       	mov    esi,0x1
c001b8c7:	83 c4 0c             	add    esp,0xc
c001b8ca:	89 f0                	mov    eax,esi
c001b8cc:	5b                   	pop    ebx
c001b8cd:	5e                   	pop    esi
c001b8ce:	5f                   	pop    edi
c001b8cf:	5d                   	pop    ebp
c001b8d0:	c3                   	ret    
c001b8d1:	90                   	nop

c001b8d2 <ATAPI::write(unsigned long long, int, void*)>:
c001b8d2:	b8 03 00 00 00       	mov    eax,0x3
c001b8d7:	c3                   	ret    

c001b8d8 <ATAPI::close(int, int, void*)>:
c001b8d8:	83 ec 0c             	sub    esp,0xc
c001b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b8e5:	85 c0                	test   eax,eax
c001b8e7:	74 0c                	je     c001b8f5 <ATAPI::close(int, int, void*)+0x1d>
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ee:	50                   	push   eax
c001b8ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b8f2:	83 c4 10             	add    esp,0x10
c001b8f5:	31 c0                	xor    eax,eax
c001b8f7:	83 c4 0c             	add    esp,0xc
c001b8fa:	c3                   	ret    
c001b8fb:	90                   	nop

c001b8fc <ATAPI::ATAPI()>:
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b903:	83 ec 04             	sub    esp,0x4
c001b906:	68 00 08 00 00       	push   0x800
c001b90b:	68 35 10 02 c0       	push   0xc0021035
c001b910:	50                   	push   eax
c001b911:	e8 f0 04 ff ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b916:	83 c4 10             	add    esp,0x10
c001b919:	ba 50 0f 02 c0       	mov    edx,0xc0020f50
c001b91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b922:	89 10                	mov    DWORD PTR [eax],edx
c001b924:	90                   	nop
c001b925:	83 c4 0c             	add    esp,0xc
c001b928:	c3                   	ret    
c001b929:	90                   	nop

c001b92a <ATAPI::readyForCommand()>:
c001b92a:	56                   	push   esi
c001b92b:	53                   	push   ebx
c001b92c:	53                   	push   ebx
c001b92d:	31 db                	xor    ebx,ebx
c001b92f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b933:	51                   	push   ecx
c001b934:	6a 0c                	push   0xc
c001b936:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b93d:	50                   	push   eax
c001b93e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b944:	e8 01 e9 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001b949:	83 c4 10             	add    esp,0x10
c001b94c:	a8 88                	test   al,0x88
c001b94e:	74 25                	je     c001b975 <ATAPI::readyForCommand()+0x4b>
c001b950:	43                   	inc    ebx
c001b951:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001b957:	7e da                	jle    c001b933 <ATAPI::readyForCommand()+0x9>
c001b959:	83 ec 0c             	sub    esp,0xc
c001b95c:	68 5e 01 00 00       	push   0x15e
c001b961:	e8 42 91 ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001b966:	83 c4 10             	add    esp,0x10
c001b969:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001b96f:	75 c2                	jne    c001b933 <ATAPI::readyForCommand()+0x9>
c001b971:	31 c0                	xor    eax,eax
c001b973:	eb 02                	jmp    c001b977 <ATAPI::readyForCommand()+0x4d>
c001b975:	b0 01                	mov    al,0x1
c001b977:	5a                   	pop    edx
c001b978:	5b                   	pop    ebx
c001b979:	5e                   	pop    esi
c001b97a:	c3                   	ret    
c001b97b:	90                   	nop

c001b97c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001b97c:	55                   	push   ebp
c001b97d:	57                   	push   edi
c001b97e:	56                   	push   esi
c001b97f:	53                   	push   ebx
c001b980:	83 ec 20             	sub    esp,0x20
c001b983:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b987:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b98b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b98f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b993:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b997:	6a 01                	push   0x1
c001b999:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9a0:	50                   	push   eax
c001b9a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9a7:	e8 ec e9 ff ff       	call   c001a398 <IDE::enableIRQs(unsigned char, bool)>
c001b9ac:	5e                   	pop    esi
c001b9ad:	58                   	pop    eax
c001b9ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9b5:	50                   	push   eax
c001b9b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9bc:	e8 a3 e7 ff ff       	call   c001a164 <IDE::prepareInterrupt(unsigned char)>
c001b9c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9c4:	e8 61 ff ff ff       	call   c001b92a <ATAPI::readyForCommand()>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	84 c0                	test   al,al
c001b9ce:	75 0a                	jne    c001b9da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001b9d0:	bb 01 00 00 00       	mov    ebx,0x1
c001b9d5:	e9 57 02 00 00       	jmp    c001bc31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b9da:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001b9e0:	c1 e0 04             	shl    eax,0x4
c001b9e3:	0f b6 c0             	movzx  eax,al
c001b9e6:	50                   	push   eax
c001b9e7:	6a 06                	push   0x6
c001b9e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9f0:	50                   	push   eax
c001b9f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9f7:	e8 8e e7 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9fc:	6a 00                	push   0x0
c001b9fe:	6a 01                	push   0x1
c001ba00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba07:	50                   	push   eax
c001ba08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba0e:	e8 77 e7 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba13:	83 c4 20             	add    esp,0x20
c001ba16:	0f b6 c3             	movzx  eax,bl
c001ba19:	0f b6 df             	movzx  ebx,bh
c001ba1c:	50                   	push   eax
c001ba1d:	6a 04                	push   0x4
c001ba1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba26:	50                   	push   eax
c001ba27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba2d:	e8 58 e7 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba32:	53                   	push   ebx
c001ba33:	6a 05                	push   0x5
c001ba35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba3c:	50                   	push   eax
c001ba3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba43:	e8 42 e7 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba48:	83 c4 20             	add    esp,0x20
c001ba4b:	68 a0 00 00 00       	push   0xa0
c001ba50:	6a 07                	push   0x7
c001ba52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba59:	50                   	push   eax
c001ba5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba60:	e8 25 e7 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba65:	83 c4 0c             	add    esp,0xc
c001ba68:	6a 01                	push   0x1
c001ba6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba71:	50                   	push   eax
c001ba72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba78:	e8 ab f1 ff ff       	call   c001ac28 <IDE::polling(unsigned char, unsigned int)>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ba86:	84 c0                	test   al,al
c001ba88:	74 23                	je     c001baad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ba8a:	0f b6 d8             	movzx  ebx,al
c001ba8d:	0f b6 d2             	movzx  edx,dl
c001ba90:	53                   	push   ebx
c001ba91:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ba98:	50                   	push   eax
c001ba99:	52                   	push   edx
c001ba9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001baa0:	e8 d3 f0 ff ff       	call   c001ab78 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001baa5:	83 c4 10             	add    esp,0x10
c001baa8:	e9 84 01 00 00       	jmp    c001bc31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001baad:	0f b6 d2             	movzx  edx,dl
c001bab0:	53                   	push   ebx
c001bab1:	53                   	push   ebx
c001bab2:	52                   	push   edx
c001bab3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bab9:	e8 ba e6 ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001babe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bac2:	b9 06 00 00 00       	mov    ecx,0x6
c001bac7:	89 c2                	mov    edx,eax
c001bac9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001bacc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bad0:	83 c4 10             	add    esp,0x10
c001bad3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bad9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bae0:	85 db                	test   ebx,ebx
c001bae2:	0f 84 ec 00 00 00    	je     c001bbd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bae8:	51                   	push   ecx
c001bae9:	51                   	push   ecx
c001baea:	52                   	push   edx
c001baeb:	50                   	push   eax
c001baec:	e8 07 e8 ff ff       	call   c001a2f8 <IDE::waitInterrupt(unsigned char)>
c001baf1:	83 c4 10             	add    esp,0x10
c001baf4:	84 c0                	test   al,al
c001baf6:	0f 84 d4 fe ff ff    	je     c001b9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bafc:	56                   	push   esi
c001bafd:	56                   	push   esi
c001bafe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb05:	50                   	push   eax
c001bb06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb0c:	e8 53 e6 ff ff       	call   c001a164 <IDE::prepareInterrupt(unsigned char)>
c001bb11:	83 c4 0c             	add    esp,0xc
c001bb14:	6a 04                	push   0x4
c001bb16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb1d:	50                   	push   eax
c001bb1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb24:	e8 21 e7 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001bb29:	83 c4 0c             	add    esp,0xc
c001bb2c:	89 c6                	mov    esi,eax
c001bb2e:	6a 05                	push   0x5
c001bb30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb37:	50                   	push   eax
c001bb38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb3e:	e8 07 e7 ff ff       	call   c001a24a <IDE::read(unsigned char, unsigned char)>
c001bb43:	89 f1                	mov    ecx,esi
c001bb45:	0f b6 c0             	movzx  eax,al
c001bb48:	0f b6 f1             	movzx  esi,cl
c001bb4b:	c1 e0 08             	shl    eax,0x8
c001bb4e:	09 c6                	or     esi,eax
c001bb50:	d1 fe                	sar    esi,1
c001bb52:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bb56:	83 c4 10             	add    esp,0x10
c001bb59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bb5e:	74 41                	je     c001bba1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bb60:	31 c9                	xor    ecx,ecx
c001bb62:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bb68:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bb6f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bb73:	75 0a                	jne    c001bb7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bb75:	01 c9                	add    ecx,ecx
c001bb77:	01 cd                	add    ebp,ecx
c001bb79:	4b                   	dec    ebx
c001bb7a:	e9 54 ff ff ff       	jmp    c001bad3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bb7f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bb84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bb88:	51                   	push   ecx
c001bb89:	51                   	push   ecx
c001bb8a:	52                   	push   edx
c001bb8b:	50                   	push   eax
c001bb8c:	e8 e7 e5 ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001bb91:	89 c2                	mov    edx,eax
c001bb93:	89 f0                	mov    eax,esi
c001bb95:	66 ef                	out    dx,ax
c001bb97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	41                   	inc    ecx
c001bb9f:	eb c1                	jmp    c001bb62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bba1:	31 f6                	xor    esi,esi
c001bba3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bba9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bbb0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bbb4:	75 06                	jne    c001bbbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bbb6:	01 f6                	add    esi,esi
c001bbb8:	01 f5                	add    ebp,esi
c001bbba:	eb bd                	jmp    c001bb79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bbbc:	51                   	push   ecx
c001bbbd:	51                   	push   ecx
c001bbbe:	52                   	push   edx
c001bbbf:	50                   	push   eax
c001bbc0:	e8 b3 e5 ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001bbc5:	89 c2                	mov    edx,eax
c001bbc7:	66 ed                	in     ax,dx
c001bbc9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	46                   	inc    esi
c001bbd2:	eb cf                	jmp    c001bba3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001bbd4:	51                   	push   ecx
c001bbd5:	51                   	push   ecx
c001bbd6:	52                   	push   edx
c001bbd7:	50                   	push   eax
c001bbd8:	e8 1b e7 ff ff       	call   c001a2f8 <IDE::waitInterrupt(unsigned char)>
c001bbdd:	83 c4 10             	add    esp,0x10
c001bbe0:	84 c0                	test   al,al
c001bbe2:	0f 84 e8 fd ff ff    	je     c001b9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bbe8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bbed:	52                   	push   edx
c001bbee:	52                   	push   edx
c001bbef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbf6:	50                   	push   eax
c001bbf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bbfd:	e8 62 e5 ff ff       	call   c001a164 <IDE::prepareInterrupt(unsigned char)>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	50                   	push   eax
c001bc06:	50                   	push   eax
c001bc07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc0e:	50                   	push   eax
c001bc0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc15:	e8 5e e5 ff ff       	call   c001a178 <IDE::getBase(unsigned char)>
c001bc1a:	8d 50 07             	lea    edx,[eax+0x7]
c001bc1d:	ec                   	in     al,dx
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	a8 88                	test   al,0x88
c001bc23:	74 0a                	je     c001bc2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001bc25:	4b                   	dec    ebx
c001bc26:	75 dd                	jne    c001bc05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001bc28:	bb 02 00 00 00       	mov    ebx,0x2
c001bc2d:	eb 02                	jmp    c001bc31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bc2f:	31 db                	xor    ebx,ebx
c001bc31:	83 c4 1c             	add    esp,0x1c
c001bc34:	89 d8                	mov    eax,ebx
c001bc36:	5b                   	pop    ebx
c001bc37:	5e                   	pop    esi
c001bc38:	5f                   	pop    edi
c001bc39:	5d                   	pop    ebp
c001bc3a:	c3                   	ret    
c001bc3b:	90                   	nop

c001bc3c <ATAPI::diskRemoved()>:
c001bc3c:	53                   	push   ebx
c001bc3d:	83 ec 14             	sub    esp,0x14
c001bc40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc44:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bc4b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001bc51:	e8 7a 10 ff ff       	call   c000ccd0 <LogicalDisk::unmount()>
c001bc56:	58                   	pop    eax
c001bc57:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bc5d:	e8 4e 1a ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c001bc62:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bc68:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc6c:	83 c4 18             	add    esp,0x18
c001bc6f:	5b                   	pop    ebx
c001bc70:	e9 2b 1a ff ff       	jmp    c000d6a0 <VCache::invalidateReadBuffer()>
c001bc75:	90                   	nop

c001bc76 <ATAPI::eject()>:
c001bc76:	57                   	push   edi
c001bc77:	b9 03 00 00 00       	mov    ecx,0x3
c001bc7c:	53                   	push   ebx
c001bc7d:	83 ec 14             	sub    esp,0x14
c001bc80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc84:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bc88:	fc                   	cld    
c001bc89:	31 c0                	xor    eax,eax
c001bc8b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bc8d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bc92:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bc97:	50                   	push   eax
c001bc98:	50                   	push   eax
c001bc99:	6a 00                	push   0x0
c001bc9b:	6a 00                	push   0x0
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 02                	push   0x2
c001bca1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bca5:	50                   	push   eax
c001bca6:	53                   	push   ebx
c001bca7:	e8 d0 fc ff ff       	call   c001b97c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bcac:	83 c4 14             	add    esp,0x14
c001bcaf:	53                   	push   ebx
c001bcb0:	e8 87 ff ff ff       	call   c001bc3c <ATAPI::diskRemoved()>
c001bcb5:	83 c4 24             	add    esp,0x24
c001bcb8:	31 c0                	xor    eax,eax
c001bcba:	5b                   	pop    ebx
c001bcbb:	5f                   	pop    edi
c001bcbc:	c3                   	ret    
c001bcbd:	90                   	nop

c001bcbe <ATAPI::diskInserted()>:
c001bcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bcc9:	c3                   	ret    

c001bcca <ATAPI::detectMedia()>:
c001bcca:	56                   	push   esi
c001bccb:	53                   	push   ebx
c001bccc:	83 ec 28             	sub    esp,0x28
c001bccf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcd3:	6a 0c                	push   0xc
c001bcd5:	6a 00                	push   0x0
c001bcd7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bcdb:	56                   	push   esi
c001bcdc:	e8 df 47 fe ff       	call   c00004c0 <memset>
c001bce1:	58                   	pop    eax
c001bce2:	5a                   	pop    edx
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 00                	push   0x0
c001bce9:	6a 00                	push   0x0
c001bceb:	56                   	push   esi
c001bcec:	53                   	push   ebx
c001bced:	e8 8a fc ff ff       	call   c001b97c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bcf2:	83 c4 1c             	add    esp,0x1c
c001bcf5:	6a 0c                	push   0xc
c001bcf7:	6a 00                	push   0x0
c001bcf9:	56                   	push   esi
c001bcfa:	e8 c1 47 fe ff       	call   c00004c0 <memset>
c001bcff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bd04:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bd09:	59                   	pop    ecx
c001bd0a:	58                   	pop    eax
c001bd0b:	6a 01                	push   0x1
c001bd0d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bd11:	50                   	push   eax
c001bd12:	6a 00                	push   0x0
c001bd14:	6a 12                	push   0x12
c001bd16:	56                   	push   esi
c001bd17:	53                   	push   ebx
c001bd18:	e8 5f fc ff ff       	call   c001b97c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bd1d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bd21:	83 c4 20             	add    esp,0x20
c001bd24:	83 e0 7f             	and    eax,0x7f
c001bd27:	3c 70                	cmp    al,0x70
c001bd29:	74 15                	je     c001bd40 <ATAPI::detectMedia()+0x76>
c001bd2b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd32:	75 0c                	jne    c001bd40 <ATAPI::detectMedia()+0x76>
c001bd34:	83 ec 0c             	sub    esp,0xc
c001bd37:	53                   	push   ebx
c001bd38:	e8 81 ff ff ff       	call   c001bcbe <ATAPI::diskInserted()>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bd44:	83 e0 0f             	and    eax,0xf
c001bd47:	3c 02                	cmp    al,0x2
c001bd49:	75 1b                	jne    c001bd66 <ATAPI::detectMedia()+0x9c>
c001bd4b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bd50:	75 2d                	jne    c001bd7f <ATAPI::detectMedia()+0xb5>
c001bd52:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd59:	74 24                	je     c001bd7f <ATAPI::detectMedia()+0xb5>
c001bd5b:	83 ec 0c             	sub    esp,0xc
c001bd5e:	53                   	push   ebx
c001bd5f:	e8 d8 fe ff ff       	call   c001bc3c <ATAPI::diskRemoved()>
c001bd64:	eb 16                	jmp    c001bd7c <ATAPI::detectMedia()+0xb2>
c001bd66:	84 c0                	test   al,al
c001bd68:	75 15                	jne    c001bd7f <ATAPI::detectMedia()+0xb5>
c001bd6a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd71:	75 0c                	jne    c001bd7f <ATAPI::detectMedia()+0xb5>
c001bd73:	83 ec 0c             	sub    esp,0xc
c001bd76:	53                   	push   ebx
c001bd77:	e8 42 ff ff ff       	call   c001bcbe <ATAPI::diskInserted()>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	83 c4 24             	add    esp,0x24
c001bd82:	5b                   	pop    ebx
c001bd83:	5e                   	pop    esi
c001bd84:	c3                   	ret    
c001bd85:	90                   	nop

c001bd86 <ATAPI::open(int, int, void*)>:
c001bd86:	56                   	push   esi
c001bd87:	53                   	push   ebx
c001bd88:	50                   	push   eax
c001bd89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd95:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bd9b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bda1:	c1 e0 06             	shl    eax,0x6
c001bda4:	01 d0                	add    eax,edx
c001bda6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bdad:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bdb3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bdba:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bdc4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bdca:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001bdd1:	6a 04                	push   0x4
c001bdd3:	6a 0c                	push   0xc
c001bdd5:	51                   	push   ecx
c001bdd6:	52                   	push   edx
c001bdd7:	e8 ae e3 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bddc:	90                   	nop
c001bddd:	90                   	nop
c001bdde:	6a 00                	push   0x0
c001bde0:	6a 0c                	push   0xc
c001bde2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bde9:	50                   	push   eax
c001bdea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf0:	e8 95 e3 ff ff       	call   c001a18a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf5:	83 c4 14             	add    esp,0x14
c001bdf8:	68 78 01 00 00       	push   0x178
c001bdfd:	e8 63 ba fe ff       	call   c0007865 <malloc>
c001be02:	83 c4 0c             	add    esp,0xc
c001be05:	89 c6                	mov    esi,eax
c001be07:	6a 00                	push   0x0
c001be09:	68 ff ff ff 7f       	push   0x7fffffff
c001be0e:	6a 00                	push   0x0
c001be10:	6a 00                	push   0x0
c001be12:	53                   	push   ebx
c001be13:	68 e7 10 02 c0       	push   0xc00210e7
c001be18:	50                   	push   eax
c001be19:	e8 f4 0c ff ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001be1e:	83 c4 14             	add    esp,0x14
c001be21:	56                   	push   esi
c001be22:	e8 ab 0d ff ff       	call   c000cbd2 <LogicalDisk::assignDriveLetter()>
c001be27:	5a                   	pop    edx
c001be28:	0f be c0             	movsx  eax,al
c001be2b:	59                   	pop    ecx
c001be2c:	50                   	push   eax
c001be2d:	68 38 0f 02 c0       	push   0xc0020f38
c001be32:	e8 c3 e7 fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001be37:	58                   	pop    eax
c001be38:	5a                   	pop    edx
c001be39:	56                   	push   esi
c001be3a:	53                   	push   ebx
c001be3b:	e8 f8 fb fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001be40:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001be46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be49:	e8 20 00 ff ff       	call   c000be6e <PhysicalDisk::startCache()>
c001be4e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001be55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be58:	e8 6d fe ff ff       	call   c001bcca <ATAPI::detectMedia()>
c001be5d:	83 c4 14             	add    esp,0x14
c001be60:	31 c0                	xor    eax,eax
c001be62:	5b                   	pop    ebx
c001be63:	5e                   	pop    esi
c001be64:	c3                   	ret    
c001be65:	90                   	nop

c001be66 <ATAPI::read(unsigned long long, int, void*)>:
c001be66:	55                   	push   ebp
c001be67:	57                   	push   edi
c001be68:	56                   	push   esi
c001be69:	53                   	push   ebx
c001be6a:	83 ec 1c             	sub    esp,0x1c
c001be6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be71:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001be79:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001be80:	74 3c                	je     c001bebe <ATAPI::read(unsigned long long, int, void*)+0x58>
c001be82:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001be86:	b9 03 00 00 00       	mov    ecx,0x3
c001be8b:	fc                   	cld    
c001be8c:	31 c0                	xor    eax,eax
c001be8e:	0f ce                	bswap  esi
c001be90:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001be92:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001be97:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001be9b:	89 e8                	mov    eax,ebp
c001be9d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bea1:	50                   	push   eax
c001bea2:	50                   	push   eax
c001bea3:	55                   	push   ebp
c001bea4:	c1 e5 0b             	shl    ebp,0xb
c001bea7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001beab:	6a 00                	push   0x0
c001bead:	55                   	push   ebp
c001beae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001beb2:	50                   	push   eax
c001beb3:	53                   	push   ebx
c001beb4:	e8 c3 fa ff ff       	call   c001b97c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001beb9:	83 c4 20             	add    esp,0x20
c001bebc:	eb 1a                	jmp    c001bed8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001bebe:	83 ec 0c             	sub    esp,0xc
c001bec1:	53                   	push   ebx
c001bec2:	e8 03 fe ff ff       	call   c001bcca <ATAPI::detectMedia()>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bed1:	75 af                	jne    c001be82 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001bed3:	b8 02 00 00 00       	mov    eax,0x2
c001bed8:	83 c4 1c             	add    esp,0x1c
c001bedb:	5b                   	pop    ebx
c001bedc:	5e                   	pop    esi
c001bedd:	5f                   	pop    edi
c001bede:	5d                   	pop    ebp
c001bedf:	c3                   	ret    

c001bee0 <SATA::close(int, int, void*)>:
c001bee0:	83 ec 0c             	sub    esp,0xc
c001bee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001beed:	85 c0                	test   eax,eax
c001beef:	74 0c                	je     c001befd <SATA::close(int, int, void*)+0x1d>
c001bef1:	83 ec 0c             	sub    esp,0xc
c001bef4:	8b 10                	mov    edx,DWORD PTR [eax]
c001bef6:	50                   	push   eax
c001bef7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001befa:	83 c4 10             	add    esp,0x10
c001befd:	31 c0                	xor    eax,eax
c001beff:	83 c4 0c             	add    esp,0xc
c001bf02:	c3                   	ret    
c001bf03:	90                   	nop

c001bf04 <SATA::powerSaving(PowerSavingLevel)>:
c001bf04:	c3                   	ret    
c001bf05:	90                   	nop

c001bf06 <SATA::open(int, int, void*)>:
c001bf06:	56                   	push   esi
c001bf07:	53                   	push   ebx
c001bf08:	50                   	push   eax
c001bf09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf11:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf1b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001bf21:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001bf2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf39:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001bf3f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf46:	e8 f6 bb fe ff       	call   c0007b41 <Phys::allocatePage()>
c001bf4b:	89 c6                	mov    esi,eax
c001bf4d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bf53:	81 c6 00 10 00 00    	add    esi,0x1000
c001bf59:	e8 e3 bb fe ff       	call   c0007b41 <Phys::allocatePage()>
c001bf5e:	39 c6                	cmp    esi,eax
c001bf60:	74 10                	je     c001bf72 <SATA::open(int, int, void*)+0x6c>
c001bf62:	83 ec 0c             	sub    esp,0xc
c001bf65:	68 80 0f 02 c0       	push   0xc0020f80
c001bf6a:	e8 4c 44 ff ff       	call   c00103bb <KePanic(char const*)>
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	83 ec 0c             	sub    esp,0xc
c001bf75:	6a 02                	push   0x2
c001bf77:	e8 c1 d3 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001bf7c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf82:	6a 03                	push   0x3
c001bf84:	50                   	push   eax
c001bf85:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001bf8b:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001bf91:	e8 6a da fe ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bf96:	83 c4 14             	add    esp,0x14
c001bf99:	53                   	push   ebx
c001bf9a:	e8 cf fe fe ff       	call   c000be6e <PhysicalDisk::startCache()>
c001bf9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfa2:	e8 3b 10 ff ff       	call   c000cfe2 <createPartitionsForDisk(PhysicalDisk*)>
c001bfa7:	83 c4 14             	add    esp,0x14
c001bfaa:	31 c0                	xor    eax,eax
c001bfac:	5b                   	pop    ebx
c001bfad:	5e                   	pop    esi
c001bfae:	c3                   	ret    
c001bfaf:	90                   	nop

c001bfb0 <SATA::SATA()>:
c001bfb0:	83 ec 0c             	sub    esp,0xc
c001bfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb7:	83 ec 04             	sub    esp,0x4
c001bfba:	68 00 02 00 00       	push   0x200
c001bfbf:	68 94 0f 02 c0       	push   0xc0020f94
c001bfc4:	50                   	push   eax
c001bfc5:	e8 3c fe fe ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bfca:	83 c4 10             	add    esp,0x10
c001bfcd:	ba 04 10 02 c0       	mov    edx,0xc0021004
c001bfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd6:	89 10                	mov    DWORD PTR [eax],edx
c001bfd8:	90                   	nop
c001bfd9:	83 c4 0c             	add    esp,0xc
c001bfdc:	c3                   	ret    
c001bfdd:	90                   	nop

c001bfde <SATA::access(unsigned long long, int, void*, bool)>:
c001bfde:	55                   	push   ebp
c001bfdf:	57                   	push   edi
c001bfe0:	56                   	push   esi
c001bfe1:	53                   	push   ebx
c001bfe2:	83 ec 2c             	sub    esp,0x2c
c001bfe5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfe9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bfed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bff1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bff5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bff9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001bffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c002:	7e 10                	jle    c001c014 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c004:	83 ec 0c             	sub    esp,0xc
c001c007:	68 a4 0f 02 c0       	push   0xc0020fa4
c001c00c:	e8 aa 43 ff ff       	call   c00103bb <KePanic(char const*)>
c001c011:	83 c4 10             	add    esp,0x10
c001c014:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c01a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c020:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c02a:	89 d0                	mov    eax,edx
c001c02c:	c1 e0 07             	shl    eax,0x7
c001c02f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c033:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c03d:	51                   	push   ecx
c001c03e:	8d 42 02             	lea    eax,[edx+0x2]
c001c041:	51                   	push   ecx
c001c042:	c1 e0 07             	shl    eax,0x7
c001c045:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c049:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c04d:	50                   	push   eax
c001c04e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c054:	e8 b9 ec ff ff       	call   c001ad12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c059:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c069:	0f 84 4f 01 00 00    	je     c001c1be <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c06f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c073:	c1 e0 09             	shl    eax,0x9
c001c076:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c07b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c07f:	74 0e                	je     c001c08f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c081:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c087:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c08b:	89 c1                	mov    ecx,eax
c001c08d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c08f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c093:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c099:	8d 42 02             	lea    eax,[edx+0x2]
c001c09c:	c1 e0 07             	shl    eax,0x7
c001c09f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0a5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c0ab:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c0b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0b5:	c1 e1 05             	shl    ecx,0x5
c001c0b8:	01 c8                	add    eax,ecx
c001c0ba:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c0be:	83 e1 01             	and    ecx,0x1
c001c0c1:	89 ce                	mov    esi,ecx
c001c0c3:	8a 08                	mov    cl,BYTE PTR [eax]
c001c0c5:	c1 e6 06             	shl    esi,0x6
c001c0c8:	83 e1 bf             	and    ecx,0xffffffbf
c001c0cb:	09 f1                	or     ecx,esi
c001c0cd:	88 08                	mov    BYTE PTR [eax],cl
c001c0cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c0d1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c0d7:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c0dd:	89 08                	mov    DWORD PTR [eax],ecx
c001c0df:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c0e5:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c0eb:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c0f1:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c0f4:	50                   	push   eax
c001c0f5:	68 90 00 00 00       	push   0x90
c001c0fa:	6a 00                	push   0x0
c001c0fc:	56                   	push   esi
c001c0fd:	e8 be 43 fe ff       	call   c00004c0 <memset>
c001c102:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c108:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c10c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c112:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c11a:	83 c4 10             	add    esp,0x10
c001c11d:	48                   	dec    eax
c001c11e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c123:	89 c1                	mov    ecx,eax
c001c125:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c12b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c130:	09 c8                	or     eax,ecx
c001c132:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c138:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c13b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c142:	66 25 00 7f          	and    ax,0x7f00
c001c146:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c14a:	66 0d 27 80          	or     ax,0x8027
c001c14e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c153:	66 89 06             	mov    WORD PTR [esi],ax
c001c156:	19 c0                	sbb    eax,eax
c001c158:	83 e0 f0             	and    eax,0xfffffff0
c001c15b:	83 c0 35             	add    eax,0x35
c001c15e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c161:	89 e8                	mov    eax,ebp
c001c163:	c1 e8 10             	shr    eax,0x10
c001c166:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c169:	89 e8                	mov    eax,ebp
c001c16b:	c1 e8 18             	shr    eax,0x18
c001c16e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c171:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c175:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c17c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c17f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c183:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c187:	89 d6                	mov    esi,edx
c001c189:	31 c0                	xor    eax,eax
c001c18b:	c1 e6 07             	shl    esi,0x7
c001c18e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c192:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c198:	80 e1 88             	and    cl,0x88
c001c19b:	74 0a                	je     c001c1a7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c19d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c1a2:	74 0a                	je     c001c1ae <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c1a4:	40                   	inc    eax
c001c1a5:	eb eb                	jmp    c001c192 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c1a7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c1ac:	75 17                	jne    c001c1c5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c1ae:	83 ec 0c             	sub    esp,0xc
c001c1b1:	68 dd 0f 02 c0       	push   0xc0020fdd
c001c1b6:	e8 3f e4 fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	b8 01 00 00 00       	mov    eax,0x1
c001c1c3:	eb 5d                	jmp    c001c222 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c1c5:	b8 01 00 00 00       	mov    eax,0x1
c001c1ca:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c1ce:	c1 e2 07             	shl    edx,0x7
c001c1d1:	d3 e0                	shl    eax,cl
c001c1d3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c1d7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c1dd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c1e3:	85 c8                	test   eax,ecx
c001c1e5:	74 16                	je     c001c1fd <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c1e7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c1ed:	0f ba e1 1e          	bt     ecx,0x1e
c001c1f1:	73 ea                	jae    c001c1dd <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c1f3:	83 ec 0c             	sub    esp,0xc
c001c1f6:	68 eb 0f 02 c0       	push   0xc0020feb
c001c1fb:	eb b9                	jmp    c001c1b6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c1fd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c203:	0f ba e0 1e          	bt     eax,0x1e
c001c207:	72 b5                	jb     c001c1be <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c209:	31 c0                	xor    eax,eax
c001c20b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c210:	75 10                	jne    c001c222 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c212:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c218:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c21c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c220:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c222:	83 c4 2c             	add    esp,0x2c
c001c225:	5b                   	pop    ebx
c001c226:	5e                   	pop    esi
c001c227:	5f                   	pop    edi
c001c228:	5d                   	pop    ebp
c001c229:	c3                   	ret    

c001c22a <SATA::read(unsigned long long, int, void*)>:
c001c22a:	55                   	push   ebp
c001c22b:	57                   	push   edi
c001c22c:	56                   	push   esi
c001c22d:	be 04 00 00 00       	mov    esi,0x4
c001c232:	53                   	push   ebx
c001c233:	83 ec 0c             	sub    esp,0xc
c001c236:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c23a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c23e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c241:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c245:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c249:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c24f:	0f 87 1a 02 00 00    	ja     c001c46f <SATA::read(unsigned long long, int, void*)+0x245>
c001c255:	be 06 00 00 00       	mov    esi,0x6
c001c25a:	85 c9                	test   ecx,ecx
c001c25c:	0f 84 0d 02 00 00    	je     c001c46f <SATA::read(unsigned long long, int, void*)+0x245>
c001c262:	56                   	push   esi
c001c263:	56                   	push   esi
c001c264:	6a 00                	push   0x0
c001c266:	51                   	push   ecx
c001c267:	53                   	push   ebx
c001c268:	52                   	push   edx
c001c269:	50                   	push   eax
c001c26a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c26e:	e8 6b fd ff ff       	call   c001bfde <SATA::access(unsigned long long, int, void*, bool)>
c001c273:	83 c4 20             	add    esp,0x20
c001c276:	89 c6                	mov    esi,eax
c001c278:	85 c0                	test   eax,eax
c001c27a:	0f 85 ea 01 00 00    	jne    c001c46a <SATA::read(unsigned long long, int, void*)+0x240>
c001c280:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c286:	bb 0a 00 00 00       	mov    ebx,0xa
c001c28b:	50                   	push   eax
c001c28c:	50                   	push   eax
c001c28d:	6a 0f                	push   0xf
c001c28f:	6a 00                	push   0x0
c001c291:	e8 87 f2 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c296:	5a                   	pop    edx
c001c297:	0f b6 c0             	movzx  eax,al
c001c29a:	59                   	pop    ecx
c001c29b:	b9 10 27 00 00       	mov    ecx,0x2710
c001c2a0:	50                   	push   eax
c001c2a1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c2a6:	99                   	cdq    
c001c2a7:	f7 f9                	idiv   ecx
c001c2a9:	99                   	cdq    
c001c2aa:	f7 fb                	idiv   ebx
c001c2ac:	8d 42 30             	lea    eax,[edx+0x30]
c001c2af:	0f b6 c0             	movzx  eax,al
c001c2b2:	50                   	push   eax
c001c2b3:	e8 54 f2 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c2b8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2be:	5f                   	pop    edi
c001c2bf:	5d                   	pop    ebp
c001c2c0:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2c5:	6a 0f                	push   0xf
c001c2c7:	6a 00                	push   0x0
c001c2c9:	e8 4f f2 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c2ce:	5a                   	pop    edx
c001c2cf:	0f b6 c0             	movzx  eax,al
c001c2d2:	59                   	pop    ecx
c001c2d3:	50                   	push   eax
c001c2d4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c2d9:	99                   	cdq    
c001c2da:	f7 fd                	idiv   ebp
c001c2dc:	99                   	cdq    
c001c2dd:	f7 fb                	idiv   ebx
c001c2df:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e2:	0f b6 c0             	movzx  eax,al
c001c2e5:	50                   	push   eax
c001c2e6:	e8 21 f2 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c2eb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2f1:	5f                   	pop    edi
c001c2f2:	bf 64 00 00 00       	mov    edi,0x64
c001c2f7:	58                   	pop    eax
c001c2f8:	6a 0f                	push   0xf
c001c2fa:	6a 00                	push   0x0
c001c2fc:	e8 1c f2 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c301:	5a                   	pop    edx
c001c302:	0f b6 c0             	movzx  eax,al
c001c305:	59                   	pop    ecx
c001c306:	50                   	push   eax
c001c307:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c30c:	99                   	cdq    
c001c30d:	f7 ff                	idiv   edi
c001c30f:	99                   	cdq    
c001c310:	f7 fb                	idiv   ebx
c001c312:	8d 42 30             	lea    eax,[edx+0x30]
c001c315:	0f b6 c0             	movzx  eax,al
c001c318:	50                   	push   eax
c001c319:	e8 ee f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c31e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c324:	58                   	pop    eax
c001c325:	5a                   	pop    edx
c001c326:	6a 0f                	push   0xf
c001c328:	6a 00                	push   0x0
c001c32a:	e8 ee f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c32f:	59                   	pop    ecx
c001c330:	0f b6 c0             	movzx  eax,al
c001c333:	5a                   	pop    edx
c001c334:	50                   	push   eax
c001c335:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c33a:	99                   	cdq    
c001c33b:	f7 fb                	idiv   ebx
c001c33d:	99                   	cdq    
c001c33e:	f7 fb                	idiv   ebx
c001c340:	8d 42 30             	lea    eax,[edx+0x30]
c001c343:	0f b6 c0             	movzx  eax,al
c001c346:	50                   	push   eax
c001c347:	e8 c0 f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c34c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c352:	59                   	pop    ecx
c001c353:	58                   	pop    eax
c001c354:	6a 0f                	push   0xf
c001c356:	6a 00                	push   0x0
c001c358:	e8 c0 f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c35d:	5a                   	pop    edx
c001c35e:	0f b6 c0             	movzx  eax,al
c001c361:	59                   	pop    ecx
c001c362:	50                   	push   eax
c001c363:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c368:	99                   	cdq    
c001c369:	f7 fb                	idiv   ebx
c001c36b:	8d 42 30             	lea    eax,[edx+0x30]
c001c36e:	0f b6 c0             	movzx  eax,al
c001c371:	50                   	push   eax
c001c372:	e8 95 f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c377:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c37d:	58                   	pop    eax
c001c37e:	5a                   	pop    edx
c001c37f:	6a 0f                	push   0xf
c001c381:	6a 00                	push   0x0
c001c383:	e8 95 f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c388:	59                   	pop    ecx
c001c389:	0f b6 c0             	movzx  eax,al
c001c38c:	5a                   	pop    edx
c001c38d:	b9 10 27 00 00       	mov    ecx,0x2710
c001c392:	50                   	push   eax
c001c393:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c398:	99                   	cdq    
c001c399:	f7 f9                	idiv   ecx
c001c39b:	99                   	cdq    
c001c39c:	f7 fb                	idiv   ebx
c001c39e:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a1:	0f b6 c0             	movzx  eax,al
c001c3a4:	50                   	push   eax
c001c3a5:	e8 62 f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c3aa:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3b0:	59                   	pop    ecx
c001c3b1:	58                   	pop    eax
c001c3b2:	6a 0f                	push   0xf
c001c3b4:	6a 00                	push   0x0
c001c3b6:	e8 62 f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c3bb:	5a                   	pop    edx
c001c3bc:	0f b6 c0             	movzx  eax,al
c001c3bf:	59                   	pop    ecx
c001c3c0:	50                   	push   eax
c001c3c1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c3c6:	99                   	cdq    
c001c3c7:	f7 fd                	idiv   ebp
c001c3c9:	99                   	cdq    
c001c3ca:	f7 fb                	idiv   ebx
c001c3cc:	8d 42 30             	lea    eax,[edx+0x30]
c001c3cf:	0f b6 c0             	movzx  eax,al
c001c3d2:	50                   	push   eax
c001c3d3:	e8 34 f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c3d8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3de:	5d                   	pop    ebp
c001c3df:	58                   	pop    eax
c001c3e0:	6a 0f                	push   0xf
c001c3e2:	6a 00                	push   0x0
c001c3e4:	e8 34 f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c3e9:	5a                   	pop    edx
c001c3ea:	0f b6 c0             	movzx  eax,al
c001c3ed:	59                   	pop    ecx
c001c3ee:	50                   	push   eax
c001c3ef:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c3f4:	99                   	cdq    
c001c3f5:	f7 ff                	idiv   edi
c001c3f7:	99                   	cdq    
c001c3f8:	f7 fb                	idiv   ebx
c001c3fa:	8d 42 30             	lea    eax,[edx+0x30]
c001c3fd:	0f b6 c0             	movzx  eax,al
c001c400:	50                   	push   eax
c001c401:	e8 06 f1 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c406:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c40c:	5f                   	pop    edi
c001c40d:	5d                   	pop    ebp
c001c40e:	6a 0f                	push   0xf
c001c410:	6a 00                	push   0x0
c001c412:	e8 06 f1 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c417:	5a                   	pop    edx
c001c418:	0f b6 c0             	movzx  eax,al
c001c41b:	59                   	pop    ecx
c001c41c:	50                   	push   eax
c001c41d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c422:	99                   	cdq    
c001c423:	f7 fb                	idiv   ebx
c001c425:	99                   	cdq    
c001c426:	f7 fb                	idiv   ebx
c001c428:	8d 42 30             	lea    eax,[edx+0x30]
c001c42b:	0f b6 c0             	movzx  eax,al
c001c42e:	50                   	push   eax
c001c42f:	e8 d8 f0 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c434:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c43a:	5f                   	pop    edi
c001c43b:	5d                   	pop    ebp
c001c43c:	6a 0f                	push   0xf
c001c43e:	6a 00                	push   0x0
c001c440:	e8 d8 f0 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c445:	5a                   	pop    edx
c001c446:	0f b6 c0             	movzx  eax,al
c001c449:	59                   	pop    ecx
c001c44a:	50                   	push   eax
c001c44b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c450:	99                   	cdq    
c001c451:	f7 fb                	idiv   ebx
c001c453:	83 c2 30             	add    edx,0x30
c001c456:	0f b6 d2             	movzx  edx,dl
c001c459:	52                   	push   edx
c001c45a:	e8 ad f0 ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c468:	eb 05                	jmp    c001c46f <SATA::read(unsigned long long, int, void*)+0x245>
c001c46a:	be 01 00 00 00       	mov    esi,0x1
c001c46f:	83 c4 0c             	add    esp,0xc
c001c472:	89 f0                	mov    eax,esi
c001c474:	5b                   	pop    ebx
c001c475:	5e                   	pop    esi
c001c476:	5f                   	pop    edi
c001c477:	5d                   	pop    ebp
c001c478:	c3                   	ret    
c001c479:	90                   	nop

c001c47a <SATA::write(unsigned long long, int, void*)>:
c001c47a:	55                   	push   ebp
c001c47b:	b8 04 00 00 00       	mov    eax,0x4
c001c480:	57                   	push   edi
c001c481:	56                   	push   esi
c001c482:	53                   	push   ebx
c001c483:	83 ec 1c             	sub    esp,0x1c
c001c486:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c48a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c48e:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c491:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c495:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c499:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c49f:	0f 87 32 02 00 00    	ja     c001c6d7 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c4a5:	b8 06 00 00 00       	mov    eax,0x6
c001c4aa:	85 ff                	test   edi,edi
c001c4ac:	0f 84 25 02 00 00    	je     c001c6d7 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c4b2:	89 ee                	mov    esi,ebp
c001c4b4:	c1 e6 09             	shl    esi,0x9
c001c4b7:	01 fe                	add    esi,edi
c001c4b9:	89 c8                	mov    eax,ecx
c001c4bb:	89 da                	mov    edx,ebx
c001c4bd:	83 c0 01             	add    eax,0x1
c001c4c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4c4:	83 d2 00             	adc    edx,0x0
c001c4c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4cb:	50                   	push   eax
c001c4cc:	50                   	push   eax
c001c4cd:	6a 01                	push   0x1
c001c4cf:	57                   	push   edi
c001c4d0:	81 c7 00 02 00 00    	add    edi,0x200
c001c4d6:	6a 01                	push   0x1
c001c4d8:	53                   	push   ebx
c001c4d9:	51                   	push   ecx
c001c4da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c4de:	e8 fb fa ff ff       	call   c001bfde <SATA::access(unsigned long long, int, void*, bool)>
c001c4e3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c4e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c4eb:	83 c4 20             	add    esp,0x20
c001c4ee:	39 f7                	cmp    edi,esi
c001c4f0:	75 c7                	jne    c001c4b9 <SATA::write(unsigned long long, int, void*)+0x3f>
c001c4f2:	bb 0a 00 00 00       	mov    ebx,0xa
c001c4f7:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c4fd:	bd 10 27 00 00       	mov    ebp,0x2710
c001c502:	50                   	push   eax
c001c503:	50                   	push   eax
c001c504:	6a 0f                	push   0xf
c001c506:	6a 00                	push   0x0
c001c508:	e8 10 f0 ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c50d:	5a                   	pop    edx
c001c50e:	0f b6 c0             	movzx  eax,al
c001c511:	59                   	pop    ecx
c001c512:	50                   	push   eax
c001c513:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c518:	99                   	cdq    
c001c519:	f7 fd                	idiv   ebp
c001c51b:	99                   	cdq    
c001c51c:	f7 fb                	idiv   ebx
c001c51e:	8d 42 30             	lea    eax,[edx+0x30]
c001c521:	0f b6 c0             	movzx  eax,al
c001c524:	50                   	push   eax
c001c525:	e8 e2 ef ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c52a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c530:	5e                   	pop    esi
c001c531:	5f                   	pop    edi
c001c532:	bf e8 03 00 00       	mov    edi,0x3e8
c001c537:	6a 0f                	push   0xf
c001c539:	6a 00                	push   0x0
c001c53b:	e8 dd ef ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c540:	5a                   	pop    edx
c001c541:	0f b6 c0             	movzx  eax,al
c001c544:	59                   	pop    ecx
c001c545:	50                   	push   eax
c001c546:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c54b:	99                   	cdq    
c001c54c:	f7 ff                	idiv   edi
c001c54e:	99                   	cdq    
c001c54f:	f7 fb                	idiv   ebx
c001c551:	8d 42 30             	lea    eax,[edx+0x30]
c001c554:	0f b6 c0             	movzx  eax,al
c001c557:	50                   	push   eax
c001c558:	e8 af ef ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c55d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c563:	5e                   	pop    esi
c001c564:	be 64 00 00 00       	mov    esi,0x64
c001c569:	58                   	pop    eax
c001c56a:	6a 0f                	push   0xf
c001c56c:	6a 00                	push   0x0
c001c56e:	e8 aa ef ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c573:	5a                   	pop    edx
c001c574:	0f b6 c0             	movzx  eax,al
c001c577:	59                   	pop    ecx
c001c578:	50                   	push   eax
c001c579:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c57e:	99                   	cdq    
c001c57f:	f7 fe                	idiv   esi
c001c581:	99                   	cdq    
c001c582:	f7 fb                	idiv   ebx
c001c584:	8d 42 30             	lea    eax,[edx+0x30]
c001c587:	0f b6 c0             	movzx  eax,al
c001c58a:	50                   	push   eax
c001c58b:	e8 7c ef ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c590:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c596:	58                   	pop    eax
c001c597:	5a                   	pop    edx
c001c598:	6a 0f                	push   0xf
c001c59a:	6a 00                	push   0x0
c001c59c:	e8 7c ef ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c5a1:	59                   	pop    ecx
c001c5a2:	0f b6 c0             	movzx  eax,al
c001c5a5:	5a                   	pop    edx
c001c5a6:	50                   	push   eax
c001c5a7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5ac:	99                   	cdq    
c001c5ad:	f7 fb                	idiv   ebx
c001c5af:	99                   	cdq    
c001c5b0:	f7 fb                	idiv   ebx
c001c5b2:	8d 42 30             	lea    eax,[edx+0x30]
c001c5b5:	0f b6 c0             	movzx  eax,al
c001c5b8:	50                   	push   eax
c001c5b9:	e8 4e ef ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c5be:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c5c4:	59                   	pop    ecx
c001c5c5:	58                   	pop    eax
c001c5c6:	6a 0f                	push   0xf
c001c5c8:	6a 00                	push   0x0
c001c5ca:	e8 4e ef ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c5cf:	5a                   	pop    edx
c001c5d0:	0f b6 c0             	movzx  eax,al
c001c5d3:	59                   	pop    ecx
c001c5d4:	50                   	push   eax
c001c5d5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5da:	99                   	cdq    
c001c5db:	f7 fb                	idiv   ebx
c001c5dd:	83 c2 30             	add    edx,0x30
c001c5e0:	0f b6 d2             	movzx  edx,dl
c001c5e3:	52                   	push   edx
c001c5e4:	e8 23 ef ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c5e9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c5ef:	58                   	pop    eax
c001c5f0:	5a                   	pop    edx
c001c5f1:	6a 0f                	push   0xf
c001c5f3:	6a 00                	push   0x0
c001c5f5:	e8 23 ef ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c5fa:	59                   	pop    ecx
c001c5fb:	0f b6 c0             	movzx  eax,al
c001c5fe:	5a                   	pop    edx
c001c5ff:	50                   	push   eax
c001c600:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c605:	99                   	cdq    
c001c606:	f7 fd                	idiv   ebp
c001c608:	99                   	cdq    
c001c609:	f7 fb                	idiv   ebx
c001c60b:	8d 42 30             	lea    eax,[edx+0x30]
c001c60e:	0f b6 c0             	movzx  eax,al
c001c611:	50                   	push   eax
c001c612:	e8 f5 ee ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c617:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c61d:	59                   	pop    ecx
c001c61e:	5d                   	pop    ebp
c001c61f:	6a 0f                	push   0xf
c001c621:	6a 00                	push   0x0
c001c623:	e8 f5 ee ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c628:	5a                   	pop    edx
c001c629:	0f b6 c0             	movzx  eax,al
c001c62c:	59                   	pop    ecx
c001c62d:	50                   	push   eax
c001c62e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c633:	99                   	cdq    
c001c634:	f7 ff                	idiv   edi
c001c636:	99                   	cdq    
c001c637:	f7 fb                	idiv   ebx
c001c639:	8d 42 30             	lea    eax,[edx+0x30]
c001c63c:	0f b6 c0             	movzx  eax,al
c001c63f:	50                   	push   eax
c001c640:	e8 c7 ee ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c645:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c64b:	5f                   	pop    edi
c001c64c:	5d                   	pop    ebp
c001c64d:	6a 0f                	push   0xf
c001c64f:	6a 00                	push   0x0
c001c651:	e8 c7 ee ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c656:	5a                   	pop    edx
c001c657:	0f b6 c0             	movzx  eax,al
c001c65a:	59                   	pop    ecx
c001c65b:	50                   	push   eax
c001c65c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c661:	99                   	cdq    
c001c662:	f7 fe                	idiv   esi
c001c664:	99                   	cdq    
c001c665:	f7 fb                	idiv   ebx
c001c667:	8d 42 30             	lea    eax,[edx+0x30]
c001c66a:	0f b6 c0             	movzx  eax,al
c001c66d:	50                   	push   eax
c001c66e:	e8 99 ee ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c673:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c679:	5e                   	pop    esi
c001c67a:	5f                   	pop    edi
c001c67b:	6a 0f                	push   0xf
c001c67d:	6a 00                	push   0x0
c001c67f:	e8 99 ee ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c684:	5d                   	pop    ebp
c001c685:	0f b6 c0             	movzx  eax,al
c001c688:	5a                   	pop    edx
c001c689:	50                   	push   eax
c001c68a:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c68f:	99                   	cdq    
c001c690:	f7 fb                	idiv   ebx
c001c692:	99                   	cdq    
c001c693:	f7 fb                	idiv   ebx
c001c695:	8d 42 30             	lea    eax,[edx+0x30]
c001c698:	0f b6 c0             	movzx  eax,al
c001c69b:	50                   	push   eax
c001c69c:	e8 6b ee ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c6a1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c6a7:	59                   	pop    ecx
c001c6a8:	5e                   	pop    esi
c001c6a9:	6a 0f                	push   0xf
c001c6ab:	6a 00                	push   0x0
c001c6ad:	e8 6b ee ff ff       	call   c001b51d <combineColours(unsigned char, unsigned char)>
c001c6b2:	5f                   	pop    edi
c001c6b3:	0f b6 c0             	movzx  eax,al
c001c6b6:	5d                   	pop    ebp
c001c6b7:	50                   	push   eax
c001c6b8:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c6bd:	99                   	cdq    
c001c6be:	f7 fb                	idiv   ebx
c001c6c0:	83 c2 30             	add    edx,0x30
c001c6c3:	0f b6 d2             	movzx  edx,dl
c001c6c6:	52                   	push   edx
c001c6c7:	e8 40 ee ff ff       	call   c001b50c <combineCharAndColour(char, unsigned char)>
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c6d5:	31 c0                	xor    eax,eax
c001c6d7:	83 c4 1c             	add    esp,0x1c
c001c6da:	5b                   	pop    ebx
c001c6db:	5e                   	pop    esi
c001c6dc:	5f                   	pop    edi
c001c6dd:	5d                   	pop    ebp
c001c6de:	c3                   	ret    
c001c6df:	90                   	nop

c001c6e0 <SATAPI::write(unsigned long long, int, void*)>:
c001c6e0:	b8 03 00 00 00       	mov    eax,0x3
c001c6e5:	c3                   	ret    

c001c6e6 <SATAPI::close(int, int, void*)>:
c001c6e6:	83 ec 0c             	sub    esp,0xc
c001c6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6f3:	85 c0                	test   eax,eax
c001c6f5:	74 0c                	je     c001c703 <SATAPI::close(int, int, void*)+0x1d>
c001c6f7:	83 ec 0c             	sub    esp,0xc
c001c6fa:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6fc:	50                   	push   eax
c001c6fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c700:	83 c4 10             	add    esp,0x10
c001c703:	31 c0                	xor    eax,eax
c001c705:	83 c4 0c             	add    esp,0xc
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <SATAPI::SATAPI()>:
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c711:	83 ec 04             	sub    esp,0x4
c001c714:	68 00 08 00 00       	push   0x800
c001c719:	68 34 10 02 c0       	push   0xc0021034
c001c71e:	50                   	push   eax
c001c71f:	e8 e2 f6 fe ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	ba 28 11 02 c0       	mov    edx,0xc0021128
c001c72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c730:	89 10                	mov    DWORD PTR [eax],edx
c001c732:	90                   	nop
c001c733:	83 c4 0c             	add    esp,0xc
c001c736:	c3                   	ret    
c001c737:	90                   	nop

c001c738 <SATAPI::diskRemoved()>:
c001c738:	c3                   	ret    
c001c739:	90                   	nop

c001c73a <SATAPI::diskInserted()>:
c001c73a:	83 ec 18             	sub    esp,0x18
c001c73d:	68 40 10 02 c0       	push   0xc0021040
c001c742:	e8 b3 de fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c74b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c752:	83 c4 1c             	add    esp,0x1c
c001c755:	c3                   	ret    

c001c756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c756:	55                   	push   ebp
c001c757:	57                   	push   edi
c001c758:	56                   	push   esi
c001c759:	53                   	push   ebx
c001c75a:	83 ec 34             	sub    esp,0x34
c001c75d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c761:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c765:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c769:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c76d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c771:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c777:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c77d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c781:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c787:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c78b:	83 c0 02             	add    eax,0x2
c001c78e:	c1 e0 07             	shl    eax,0x7
c001c791:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c79d:	c1 e0 07             	shl    eax,0x7
c001c7a0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c7a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7a8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c7b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c7b6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c7bc:	e8 51 e5 ff ff       	call   c001ad12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c7c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	b8 01 00 00 00       	mov    eax,0x1
c001c7cd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c7d2:	0f 84 49 02 00 00    	je     c001ca21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c7d8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c7ea:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c7f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7f4:	c1 e1 05             	shl    ecx,0x5
c001c7f7:	01 c8                	add    eax,ecx
c001c7f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c7fb:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001c801:	81 c9 25 00 01 00    	or     ecx,0x10025
c001c807:	89 08                	mov    DWORD PTR [eax],ecx
c001c809:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c80f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001c815:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001c81b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001c81e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001c821:	50                   	push   eax
c001c822:	68 90 00 00 00       	push   0x90
c001c827:	6a 00                	push   0x0
c001c829:	53                   	push   ebx
c001c82a:	e8 91 3c fe ff       	call   c00004c0 <memset>
c001c82f:	b9 0c 00 00 00       	mov    ecx,0xc
c001c834:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001c838:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c83a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001c840:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001c844:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001c84a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001c84e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c852:	48                   	dec    eax
c001c853:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c858:	89 c1                	mov    ecx,eax
c001c85a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001c860:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c865:	09 c8                	or     eax,ecx
c001c867:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001c86d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001c870:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001c877:	66 25 00 7f          	and    ax,0x7f00
c001c87b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c87f:	66 0d 27 80          	or     ax,0x8027
c001c883:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001c887:	66 89 03             	mov    WORD PTR [ebx],ax
c001c88a:	89 d0                	mov    eax,edx
c001c88c:	c1 ea 18             	shr    edx,0x18
c001c88f:	c1 e8 10             	shr    eax,0x10
c001c892:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001c895:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001c898:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c89c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001c89f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8a3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001c8a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001c8b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8b5:	31 c0                	xor    eax,eax
c001c8b7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001c8bd:	80 e1 88             	and    cl,0x88
c001c8c0:	74 0a                	je     c001c8cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001c8c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c8c7:	74 0a                	je     c001c8d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001c8c9:	40                   	inc    eax
c001c8ca:	eb eb                	jmp    c001c8b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001c8cc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c8d1:	75 43                	jne    c001c916 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001c8d3:	83 ec 0c             	sub    esp,0xc
c001c8d6:	68 58 10 02 c0       	push   0xc0021058
c001c8db:	e8 1a dd fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c8e0:	58                   	pop    eax
c001c8e1:	5a                   	pop    edx
c001c8e2:	68 6d 10 02 c0       	push   0xc002106d
c001c8e7:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001c8ed:	e8 ea be fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001c8f2:	59                   	pop    ecx
c001c8f3:	5b                   	pop    ebx
c001c8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8f8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c8fe:	e8 a9 e4 ff ff       	call   c001adac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c903:	5e                   	pop    esi
c001c904:	5f                   	pop    edi
c001c905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c909:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c90f:	e8 78 e4 ff ff       	call   c001ad8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c914:	eb 48                	jmp    c001c95e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001c916:	be 01 00 00 00       	mov    esi,0x1
c001c91b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c91f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c923:	d3 e6                	shl    esi,cl
c001c925:	c1 e7 07             	shl    edi,0x7
c001c928:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001c92e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001c933:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001c937:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001c93d:	85 c6                	test   esi,eax
c001c93f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001c945:	0f 84 a3 00 00 00    	je     c001c9ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001c94b:	0f ba e0 1e          	bt     eax,0x1e
c001c94f:	73 1a                	jae    c001c96b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001c951:	83 ec 0c             	sub    esp,0xc
c001c954:	68 7f 10 02 c0       	push   0xc002107f
c001c959:	e8 9c dc fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	b8 01 00 00 00       	mov    eax,0x1
c001c966:	e9 b6 00 00 00       	jmp    c001ca21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c96b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001c971:	83 f8 0d             	cmp    eax,0xd
c001c974:	77 0a                	ja     c001c980 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001c976:	83 ec 0c             	sub    esp,0xc
c001c979:	68 c8 00 00 00       	push   0xc8
c001c97e:	eb 28                	jmp    c001c9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c980:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001c986:	83 f8 0d             	cmp    eax,0xd
c001c989:	77 0a                	ja     c001c995 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	68 58 02 00 00       	push   0x258
c001c993:	eb 13                	jmp    c001c9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c995:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001c99b:	83 f8 06             	cmp    eax,0x6
c001c99e:	77 10                	ja     c001c9b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	68 dc 05 00 00       	push   0x5dc
c001c9a8:	e8 fb 80 ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c9b4:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001c9b7:	75 06                	jne    c001c9bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001c9b9:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001c9bd:	74 15                	je     c001c9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c9bf:	83 fb 06             	cmp    ebx,0x6
c001c9c2:	77 10                	ja     c001c9d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	68 c4 09 00 00       	push   0x9c4
c001c9cc:	e8 d7 80 ff ff       	call   c0014aa8 <milliTenthSleep(unsigned int)>
c001c9d1:	83 c4 10             	add    esp,0x10
c001c9d4:	43                   	inc    ebx
c001c9d5:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001c9db:	0f 85 56 ff ff ff    	jne    c001c937 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001c9e1:	83 ec 0c             	sub    esp,0xc
c001c9e4:	68 92 10 02 c0       	push   0xc0021092
c001c9e9:	e9 6b ff ff ff       	jmp    c001c959 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c9ee:	0f ba e0 1e          	bt     eax,0x1e
c001c9f2:	73 0d                	jae    c001ca01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001c9f4:	83 ec 0c             	sub    esp,0xc
c001c9f7:	68 a6 10 02 c0       	push   0xc00210a6
c001c9fc:	e9 58 ff ff ff       	jmp    c001c959 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ca01:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ca06:	74 17                	je     c001ca1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ca08:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ca0d:	74 10                	je     c001ca1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ca0f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ca15:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ca19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ca1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca1f:	31 c0                	xor    eax,eax
c001ca21:	83 c4 2c             	add    esp,0x2c
c001ca24:	5b                   	pop    ebx
c001ca25:	5e                   	pop    esi
c001ca26:	5f                   	pop    edi
c001ca27:	5d                   	pop    ebp
c001ca28:	c3                   	ret    
c001ca29:	90                   	nop

c001ca2a <SATAPI::eject()>:
c001ca2a:	57                   	push   edi
c001ca2b:	b9 03 00 00 00       	mov    ecx,0x3
c001ca30:	83 ec 18             	sub    esp,0x18
c001ca33:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ca37:	fc                   	cld    
c001ca38:	31 c0                	xor    eax,eax
c001ca3a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca3c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ca41:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ca46:	50                   	push   eax
c001ca47:	6a 00                	push   0x0
c001ca49:	6a 00                	push   0x0
c001ca4b:	6a 00                	push   0x0
c001ca4d:	6a 00                	push   0x0
c001ca4f:	6a 02                	push   0x2
c001ca51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca55:	50                   	push   eax
c001ca56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ca5a:	e8 f7 fc ff ff       	call   c001c756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ca5f:	31 c0                	xor    eax,eax
c001ca61:	83 c4 38             	add    esp,0x38
c001ca64:	5f                   	pop    edi
c001ca65:	c3                   	ret    

c001ca66 <SATAPI::detectMedia()>:
c001ca66:	53                   	push   ebx
c001ca67:	83 ec 14             	sub    esp,0x14
c001ca6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ca6e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ca74:	e8 37 0c ff ff       	call   c000d6b0 <VCache::writeWriteBuffer()>
c001ca79:	59                   	pop    ecx
c001ca7a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ca80:	e8 1b 0c ff ff       	call   c000d6a0 <VCache::invalidateReadBuffer()>
c001ca85:	c7 04 24 bb 10 02 c0 	mov    DWORD PTR [esp],0xc00210bb
c001ca8c:	e8 69 db fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001ca91:	83 c4 10             	add    esp,0x10
c001ca94:	31 c0                	xor    eax,eax
c001ca96:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001ca9d:	85 d2                	test   edx,edx
c001ca9f:	74 0f                	je     c001cab0 <SATAPI::detectMedia()+0x4a>
c001caa1:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001caa7:	75 07                	jne    c001cab0 <SATAPI::detectMedia()+0x4a>
c001caa9:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cab0:	40                   	inc    eax
c001cab1:	83 f8 1a             	cmp    eax,0x1a
c001cab4:	75 e0                	jne    c001ca96 <SATAPI::detectMedia()+0x30>
c001cab6:	83 c4 08             	add    esp,0x8
c001cab9:	5b                   	pop    ebx
c001caba:	c3                   	ret    
c001cabb:	90                   	nop

c001cabc <SATAPI::open(int, int, void*)>:
c001cabc:	56                   	push   esi
c001cabd:	53                   	push   ebx
c001cabe:	51                   	push   ecx
c001cabf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cac3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cac7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cad1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cad7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cae1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cae5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001caef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001caf5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cafc:	e8 40 b0 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cb01:	89 c6                	mov    esi,eax
c001cb03:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cb09:	81 c6 00 10 00 00    	add    esi,0x1000
c001cb0f:	e8 2d b0 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cb14:	39 c6                	cmp    esi,eax
c001cb16:	74 10                	je     c001cb28 <SATAPI::open(int, int, void*)+0x6c>
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	68 d0 10 02 c0       	push   0xc00210d0
c001cb20:	e8 96 38 ff ff       	call   c00103bb <KePanic(char const*)>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	6a 02                	push   0x2
c001cb2d:	e8 0b c8 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001cb32:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cb38:	6a 03                	push   0x3
c001cb3a:	50                   	push   eax
c001cb3b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cb41:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cb47:	e8 b4 ce fe ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb4c:	83 c4 14             	add    esp,0x14
c001cb4f:	68 78 01 00 00       	push   0x178
c001cb54:	e8 0c ad fe ff       	call   c0007865 <malloc>
c001cb59:	83 c4 0c             	add    esp,0xc
c001cb5c:	89 c6                	mov    esi,eax
c001cb5e:	6a 00                	push   0x0
c001cb60:	68 ff ff ff 7f       	push   0x7fffffff
c001cb65:	6a 00                	push   0x0
c001cb67:	6a 00                	push   0x0
c001cb69:	53                   	push   ebx
c001cb6a:	68 e6 10 02 c0       	push   0xc00210e6
c001cb6f:	50                   	push   eax
c001cb70:	e8 9d ff fe ff       	call   c000cb12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb75:	83 c4 14             	add    esp,0x14
c001cb78:	56                   	push   esi
c001cb79:	e8 54 00 ff ff       	call   c000cbd2 <LogicalDisk::assignDriveLetter()>
c001cb7e:	5a                   	pop    edx
c001cb7f:	0f be c0             	movsx  eax,al
c001cb82:	59                   	pop    ecx
c001cb83:	50                   	push   eax
c001cb84:	68 38 0f 02 c0       	push   0xc0020f38
c001cb89:	e8 6c da fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001cb8e:	58                   	pop    eax
c001cb8f:	5a                   	pop    edx
c001cb90:	56                   	push   esi
c001cb91:	53                   	push   ebx
c001cb92:	e8 a1 ee fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001cb97:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cb9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cba0:	e8 c9 f2 fe ff       	call   c000be6e <PhysicalDisk::startCache()>
c001cba5:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cbac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbaf:	e8 b2 fe ff ff       	call   c001ca66 <SATAPI::detectMedia()>
c001cbb4:	83 c4 14             	add    esp,0x14
c001cbb7:	31 c0                	xor    eax,eax
c001cbb9:	5b                   	pop    ebx
c001cbba:	5e                   	pop    esi
c001cbbb:	c3                   	ret    

c001cbbc <SATAPI::read(unsigned long long, int, void*)>:
c001cbbc:	57                   	push   edi
c001cbbd:	56                   	push   esi
c001cbbe:	53                   	push   ebx
c001cbbf:	83 ec 30             	sub    esp,0x30
c001cbc2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cbc6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cbca:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001cbce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cbd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cbda:	83 fe 04             	cmp    esi,0x4
c001cbdd:	7e 10                	jle    c001cbef <SATAPI::read(unsigned long long, int, void*)+0x33>
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	68 f4 10 02 c0       	push   0xc00210f4
c001cbe7:	e8 cf 37 ff ff       	call   c00103bb <KePanic(char const*)>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbf5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cbfb:	51                   	push   ecx
c001cbfc:	50                   	push   eax
c001cbfd:	83 c0 02             	add    eax,0x2
c001cc00:	c1 e0 07             	shl    eax,0x7
c001cc03:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001cc09:	50                   	push   eax
c001cc0a:	52                   	push   edx
c001cc0b:	e8 c6 e1 ff ff       	call   c001add6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc10:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001cc14:	b9 03 00 00 00       	mov    ecx,0x3
c001cc19:	fc                   	cld    
c001cc1a:	31 c0                	xor    eax,eax
c001cc1c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc1e:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001cc23:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001cc28:	83 c4 0c             	add    esp,0xc
c001cc2b:	6a 00                	push   0x0
c001cc2d:	6a 00                	push   0x0
c001cc2f:	6a 00                	push   0x0
c001cc31:	6a 00                	push   0x0
c001cc33:	6a 02                	push   0x2
c001cc35:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cc39:	50                   	push   eax
c001cc3a:	53                   	push   ebx
c001cc3b:	e8 16 fb ff ff       	call   c001c756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cc40:	83 c4 20             	add    esp,0x20
c001cc43:	85 c0                	test   eax,eax
c001cc45:	75 44                	jne    c001cc8b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001cc47:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001cc4b:	b9 03 00 00 00       	mov    ecx,0x3
c001cc50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc56:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001cc5b:	0f c8                	bswap  eax
c001cc5d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001cc61:	89 f0                	mov    eax,esi
c001cc63:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001cc67:	50                   	push   eax
c001cc68:	56                   	push   esi
c001cc69:	c1 e6 0b             	shl    esi,0xb
c001cc6c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cc70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc78:	56                   	push   esi
c001cc79:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc7d:	50                   	push   eax
c001cc7e:	53                   	push   ebx
c001cc7f:	e8 d2 fa ff ff       	call   c001c756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cc84:	83 c4 20             	add    esp,0x20
c001cc87:	85 c0                	test   eax,eax
c001cc89:	74 14                	je     c001cc9f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cc8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc8f:	83 ec 0c             	sub    esp,0xc
c001cc92:	53                   	push   ebx
c001cc93:	e8 ce fd ff ff       	call   c001ca66 <SATAPI::detectMedia()>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc9f:	83 c4 30             	add    esp,0x30
c001cca2:	5b                   	pop    ebx
c001cca3:	5e                   	pop    esi
c001cca4:	5f                   	pop    edi
c001cca5:	c3                   	ret    

c001cca6 <IOAPIC::close(int, int, void*)>:
c001cca6:	b8 00 00 00 00       	mov    eax,0x0
c001ccab:	c3                   	ret    

c001ccac <apicGetBase()>:
c001ccac:	55                   	push   ebp
c001ccad:	89 e5                	mov    ebp,esp
c001ccaf:	83 ec 18             	sub    esp,0x18
c001ccb2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001ccb7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ccbd:	83 e0 08             	and    eax,0x8
c001ccc0:	84 c0                	test   al,al
c001ccc2:	75 07                	jne    c001cccb <apicGetBase()+0x1f>
c001ccc4:	b8 00 00 00 00       	mov    eax,0x0
c001ccc9:	eb 21                	jmp    c001ccec <apicGetBase()+0x40>
c001cccb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001ccd0:	83 ec 08             	sub    esp,0x8
c001ccd3:	6a 1b                	push   0x1b
c001ccd5:	50                   	push   eax
c001ccd6:	e8 c1 a1 fe ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cce1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cce4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cce7:	25 00 00 ff ff       	and    eax,0xffff0000
c001ccec:	c9                   	leave  
c001cced:	c3                   	ret    

c001ccee <IOAPIC::IOAPIC()>:
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf5:	83 ec 08             	sub    esp,0x8
c001ccf8:	68 58 11 02 c0       	push   0xc0021158
c001ccfd:	50                   	push   eax
c001ccfe:	e8 cd ee fe ff       	call   c000bbd0 <Device::Device(char const*)>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	ba 68 11 02 c0       	mov    edx,0xc0021168
c001cd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0f:	89 10                	mov    DWORD PTR [eax],edx
c001cd11:	90                   	nop
c001cd12:	83 c4 0c             	add    esp,0xc
c001cd15:	c3                   	ret    

c001cd16 <apicOpen()>:
c001cd16:	55                   	push   ebp
c001cd17:	89 e5                	mov    ebp,esp
c001cd19:	53                   	push   ebx
c001cd1a:	83 ec 34             	sub    esp,0x34
c001cd1d:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cd22:	83 f0 01             	xor    eax,0x1
c001cd25:	84 c0                	test   al,al
c001cd27:	0f 84 9d 00 00 00    	je     c001cdca <apicOpen()+0xb4>
c001cd2d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cd31:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cd36:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cd39:	0f 83 84 00 00 00    	jae    c001cdc3 <apicOpen()+0xad>
c001cd3f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001cd4c:	e8 14 ab fe ff       	call   c0007865 <malloc>
c001cd51:	83 c4 10             	add    esp,0x10
c001cd54:	89 c3                	mov    ebx,eax
c001cd56:	83 ec 0c             	sub    esp,0xc
c001cd59:	53                   	push   ebx
c001cd5a:	e8 8f ff ff ff       	call   c001ccee <IOAPIC::IOAPIC()>
c001cd5f:	83 c4 10             	add    esp,0x10
c001cd62:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001cd65:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cd68:	25 ff 00 00 00       	and    eax,0xff
c001cd6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001cd70:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001cd77:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001cd7c:	40                   	inc    eax
c001cd7d:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001cd82:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cd87:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001cd8d:	83 ec 08             	sub    esp,0x8
c001cd90:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cd93:	50                   	push   eax
c001cd94:	e8 9f ec fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cd9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001cda1:	83 c0 08             	add    eax,0x8
c001cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c001cda6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cda9:	25 ff 00 00 00       	and    eax,0xff
c001cdae:	6a 00                	push   0x0
c001cdb0:	6a 00                	push   0x0
c001cdb2:	50                   	push   eax
c001cdb3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cdb6:	ff d2                	call   edx
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001cdbe:	e9 6e ff ff ff       	jmp    c001cd31 <apicOpen()+0x1b>
c001cdc3:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001cdca:	e8 dd fe ff ff       	call   c001ccac <apicGetBase()>
c001cdcf:	05 f0 00 00 00       	add    eax,0xf0
c001cdd4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cdd7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cdda:	8b 00                	mov    eax,DWORD PTR [eax]
c001cddc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001cddf:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001cde6:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001cded:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cdf0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001cdf3:	89 10                	mov    DWORD PTR [eax],edx
c001cdf5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001cdfc:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001ce01:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ce04:	7d 70                	jge    c001ce76 <apicOpen()+0x160>
c001ce06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce09:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce10:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ce13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce16:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce1d:	c1 e8 08             	shr    eax,0x8
c001ce20:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ce24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce27:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce2e:	c1 e8 18             	shr    eax,0x18
c001ce31:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ce34:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ce38:	75 37                	jne    c001ce71 <apicOpen()+0x15b>
c001ce3a:	e8 6d fe ff ff       	call   c001ccac <apicGetBase()>
c001ce3f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ce43:	75 07                	jne    c001ce4c <apicOpen()+0x136>
c001ce45:	ba 60 03 00 00       	mov    edx,0x360
c001ce4a:	eb 05                	jmp    c001ce51 <apicOpen()+0x13b>
c001ce4c:	ba 50 03 00 00       	mov    edx,0x350
c001ce51:	01 d0                	add    eax,edx
c001ce53:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ce56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ce59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce5b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ce5e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ce65:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ce69:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ce6c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ce6f:	89 10                	mov    DWORD PTR [eax],edx
c001ce71:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ce74:	eb 86                	jmp    c001cdfc <apicOpen()+0xe6>
c001ce76:	90                   	nop
c001ce77:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ce7a:	c9                   	leave  
c001ce7b:	c3                   	ret    

c001ce7c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ce7c:	55                   	push   ebp
c001ce7d:	89 e5                	mov    ebp,esp
c001ce7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce88:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ce8b:	72 1d                	jb     c001ceaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ce8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce90:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ce96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce99:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ce9f:	01 d0                	add    eax,edx
c001cea1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001cea4:	73 04                	jae    c001ceaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001cea6:	b0 01                	mov    al,0x1
c001cea8:	eb 02                	jmp    c001ceac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ceaa:	b0 00                	mov    al,0x0
c001ceac:	5d                   	pop    ebp
c001cead:	c3                   	ret    

c001ceae <IOAPIC::read(int)>:
c001ceae:	55                   	push   ebp
c001ceaf:	89 e5                	mov    ebp,esp
c001ceb1:	83 ec 10             	sub    esp,0x10
c001ceb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ceb7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cebd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cec0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cec3:	31 d2                	xor    edx,edx
c001cec5:	88 c2                	mov    dl,al
c001cec7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ceca:	89 10                	mov    DWORD PTR [eax],edx
c001cecc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cecf:	83 c0 10             	add    eax,0x10
c001ced2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ced4:	c9                   	leave  
c001ced5:	c3                   	ret    

c001ced6 <IOAPIC::open(int, int, void*)>:
c001ced6:	55                   	push   ebp
c001ced7:	89 e5                	mov    ebp,esp
c001ced9:	57                   	push   edi
c001ceda:	56                   	push   esi
c001cedb:	53                   	push   ebx
c001cedc:	83 ec 04             	sub    esp,0x4
c001cedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cee2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cee5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ceeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ceee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cef4:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001cefb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cefe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cf04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf0d:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001cf14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cf1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf29:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cf2f:	89 c6                	mov    esi,eax
c001cf31:	81 e6 ff 00 00 00    	and    esi,0xff
c001cf37:	89 d0                	mov    eax,edx
c001cf39:	ba 00 00 00 00       	mov    edx,0x0
c001cf3e:	89 c7                	mov    edi,eax
c001cf40:	83 e7 ff             	and    edi,0xffffffff
c001cf43:	89 f9                	mov    ecx,edi
c001cf45:	89 d0                	mov    eax,edx
c001cf47:	25 ff 00 00 00       	and    eax,0xff
c001cf4c:	89 c3                	mov    ebx,eax
c001cf4e:	89 c8                	mov    eax,ecx
c001cf50:	89 da                	mov    edx,ebx
c001cf52:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cf55:	8d 5e 08             	lea    ebx,[esi+0x8]
c001cf58:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cf5c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cf60:	83 e0 00             	and    eax,0x0
c001cf63:	09 d0                	or     eax,edx
c001cf65:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cf69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf6c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cf72:	8d 50 01             	lea    edx,[eax+0x1]
c001cf75:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cf78:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cf7e:	31 d2                	xor    edx,edx
c001cf80:	88 c2                	mov    dl,al
c001cf82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf85:	83 c2 08             	add    edx,0x8
c001cf88:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cf8c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001cf92:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001cf98:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cf9c:	6a 01                	push   0x1
c001cf9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cfa1:	e8 08 ff ff ff       	call   c001ceae <IOAPIC::read(int)>
c001cfa6:	83 c4 08             	add    esp,0x8
c001cfa9:	c1 f8 10             	sar    eax,0x10
c001cfac:	25 ff 00 00 00       	and    eax,0xff
c001cfb1:	8d 50 01             	lea    edx,[eax+0x1]
c001cfb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfb7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001cfbd:	b8 00 00 00 00       	mov    eax,0x0
c001cfc2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cfc5:	5b                   	pop    ebx
c001cfc6:	5e                   	pop    esi
c001cfc7:	5f                   	pop    edi
c001cfc8:	5d                   	pop    ebp
c001cfc9:	c3                   	ret    

c001cfca <IOAPIC::write(int, int)>:
c001cfca:	55                   	push   ebp
c001cfcb:	89 e5                	mov    ebp,esp
c001cfcd:	83 ec 10             	sub    esp,0x10
c001cfd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfd3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cfd9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cfdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cfdf:	31 d2                	xor    edx,edx
c001cfe1:	88 c2                	mov    dl,al
c001cfe3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cfe6:	89 10                	mov    DWORD PTR [eax],edx
c001cfe8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cfeb:	8d 50 10             	lea    edx,[eax+0x10]
c001cfee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cff1:	89 02                	mov    DWORD PTR [edx],eax
c001cff3:	90                   	nop
c001cff4:	c9                   	leave  
c001cff5:	c3                   	ret    

c001cff6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001cff6:	55                   	push   ebp
c001cff7:	89 e5                	mov    ebp,esp
c001cff9:	53                   	push   ebx
c001cffa:	83 ec 2c             	sub    esp,0x2c
c001cffd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d000:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d003:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d006:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d009:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d00c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d00f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d012:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d015:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d018:	88 d8                	mov    al,bl
c001d01a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d01d:	88 c8                	mov    al,cl
c001d01f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d022:	88 d0                	mov    al,dl
c001d024:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d027:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d02a:	25 ff 00 00 00       	and    eax,0xff
c001d02f:	83 c0 08             	add    eax,0x8
c001d032:	01 c0                	add    eax,eax
c001d034:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d037:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d03a:	25 ff 00 00 00       	and    eax,0xff
c001d03f:	83 c0 08             	add    eax,0x8
c001d042:	01 c0                	add    eax,eax
c001d044:	40                   	inc    eax
c001d045:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d048:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d04b:	50                   	push   eax
c001d04c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d04f:	e8 5a fe ff ff       	call   c001ceae <IOAPIC::read(int)>
c001d054:	83 c4 08             	add    esp,0x8
c001d057:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d05a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d061:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d064:	c1 e0 18             	shl    eax,0x18
c001d067:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d06a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d06d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d070:	52                   	push   edx
c001d071:	50                   	push   eax
c001d072:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d075:	e8 50 ff ff ff       	call   c001cfca <IOAPIC::write(int, int)>
c001d07a:	83 c4 0c             	add    esp,0xc
c001d07d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d080:	50                   	push   eax
c001d081:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d084:	e8 25 fe ff ff       	call   c001ceae <IOAPIC::read(int)>
c001d089:	83 c4 08             	add    esp,0x8
c001d08c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d08f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d096:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d09d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d0a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d0a8:	74 09                	je     c001d0b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d0aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d0b1:	eb 07                	jmp    c001d0ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d0b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d0ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d0be:	74 09                	je     c001d0c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d0c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d0c7:	eb 07                	jmp    c001d0d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d0c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d0d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d0d7:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d0da:	25 ff 00 00 00       	and    eax,0xff
c001d0df:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d0e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d0e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d0e8:	52                   	push   edx
c001d0e9:	50                   	push   eax
c001d0ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d0ed:	e8 d8 fe ff ff       	call   c001cfca <IOAPIC::write(int, int)>
c001d0f2:	83 c4 0c             	add    esp,0xc
c001d0f5:	90                   	nop
c001d0f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d0f9:	c9                   	leave  
c001d0fa:	c3                   	ret    
c001d0fb:	90                   	nop

c001d0fc <APICTimer::close(int, int, void*)>:
c001d0fc:	b8 00 00 00 00       	mov    eax,0x0
c001d101:	c3                   	ret    
c001d102:	66 90                	xchg   ax,ax

c001d104 <apicTimerHandler(regs*, void*)>:
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d10b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d10d:	b8 10 27 00 00       	mov    eax,0x2710
c001d112:	ba 00 00 00 00       	mov    edx,0x0
c001d117:	f7 f1                	div    ecx
c001d119:	83 ec 0c             	sub    esp,0xc
c001d11c:	50                   	push   eax
c001d11d:	e8 a6 02 ff ff       	call   c000d3c8 <timerHandler(unsigned int)>
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	90                   	nop
c001d126:	83 c4 0c             	add    esp,0xc
c001d129:	c3                   	ret    
c001d12a:	66 90                	xchg   ax,ax

c001d12c <APICTimer::open(int, int, void*)>:
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d133:	8b 00                	mov    eax,DWORD PTR [eax]
c001d135:	83 c0 24             	add    eax,0x24
c001d138:	8b 00                	mov    eax,DWORD PTR [eax]
c001d13a:	83 ec 08             	sub    esp,0x8
c001d13d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d145:	ff d0                	call   eax
c001d147:	83 c4 10             	add    esp,0x10
c001d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d152:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d160:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d166:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d16a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	51                   	push   ecx
c001d174:	6a 01                	push   0x1
c001d176:	68 04 d1 01 c0       	push   0xc001d104
c001d17b:	52                   	push   edx
c001d17c:	50                   	push   eax
c001d17d:	e8 62 e8 fe ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d182:	83 c4 20             	add    esp,0x20
c001d185:	89 c2                	mov    edx,eax
c001d187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d191:	b8 00 00 00 00       	mov    eax,0x0
c001d196:	83 c4 0c             	add    esp,0xc
c001d199:	c3                   	ret    
c001d19a:	66 90                	xchg   ax,ax

c001d19c <APICTimer::write(int)>:
c001d19c:	83 ec 0c             	sub    esp,0xc
c001d19f:	83 ec 0c             	sub    esp,0xc
c001d1a2:	68 8c 11 02 c0       	push   0xc002118c
c001d1a7:	e8 0f 32 ff ff       	call   c00103bb <KePanic(char const*)>
c001d1ac:	83 c4 10             	add    esp,0x10
c001d1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d1bd:	90                   	nop
c001d1be:	83 c4 0c             	add    esp,0xc
c001d1c1:	c3                   	ret    
c001d1c2:	66 90                	xchg   ax,ax

c001d1c4 <APICTimer::APICTimer()>:
c001d1c4:	83 ec 0c             	sub    esp,0xc
c001d1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1cb:	83 ec 08             	sub    esp,0x8
c001d1ce:	68 9c 11 02 c0       	push   0xc002119c
c001d1d3:	50                   	push   eax
c001d1d4:	e8 23 01 ff ff       	call   c000d2fc <Timer::Timer(char const*)>
c001d1d9:	83 c4 10             	add    esp,0x10
c001d1dc:	ba b0 11 02 c0       	mov    edx,0xc00211b0
c001d1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e5:	89 10                	mov    DWORD PTR [eax],edx
c001d1e7:	90                   	nop
c001d1e8:	83 c4 0c             	add    esp,0xc
c001d1eb:	c3                   	ret    

c001d1ec <PIT::write(int)>:
c001d1ec:	83 ec 10             	sub    esp,0x10
c001d1ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d1fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d201:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d206:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d20b:	99                   	cdq    
c001d20c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d214:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d21b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d220:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d224:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d229:	ee                   	out    dx,al
c001d22a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d22e:	25 ff 00 00 00       	and    eax,0xff
c001d233:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d23a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d23e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d242:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d247:	ee                   	out    dx,al
c001d248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d24c:	c1 f8 08             	sar    eax,0x8
c001d24f:	25 ff 00 00 00       	and    eax,0xff
c001d254:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d25b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d25f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d263:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d268:	ee                   	out    dx,al
c001d269:	90                   	nop
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	c3                   	ret    
c001d26e:	66 90                	xchg   ax,ax

c001d270 <pitHandler(regs*, void*)>:
c001d270:	83 ec 0c             	sub    esp,0xc
c001d273:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d279:	b8 10 27 00 00       	mov    eax,0x2710
c001d27e:	99                   	cdq    
c001d27f:	f7 f9                	idiv   ecx
c001d281:	83 ec 0c             	sub    esp,0xc
c001d284:	50                   	push   eax
c001d285:	e8 3e 01 ff ff       	call   c000d3c8 <timerHandler(unsigned int)>
c001d28a:	83 c4 10             	add    esp,0x10
c001d28d:	90                   	nop
c001d28e:	83 c4 0c             	add    esp,0xc
c001d291:	c3                   	ret    
c001d292:	66 90                	xchg   ax,ax

c001d294 <PIT::open(int, int, void*)>:
c001d294:	83 ec 0c             	sub    esp,0xc
c001d297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d29d:	83 c0 24             	add    eax,0x24
c001d2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2a2:	83 ec 08             	sub    esp,0x8
c001d2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2ad:	ff d0                	call   eax
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b6:	83 ec 0c             	sub    esp,0xc
c001d2b9:	6a 00                	push   0x0
c001d2bb:	6a 01                	push   0x1
c001d2bd:	68 70 d2 01 c0       	push   0xc001d270
c001d2c2:	6a 00                	push   0x0
c001d2c4:	50                   	push   eax
c001d2c5:	e8 1a e7 fe ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d2ca:	83 c4 20             	add    esp,0x20
c001d2cd:	89 c2                	mov    edx,eax
c001d2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d2d9:	b8 00 00 00 00       	mov    eax,0x0
c001d2de:	83 c4 0c             	add    esp,0xc
c001d2e1:	c3                   	ret    
c001d2e2:	66 90                	xchg   ax,ax

c001d2e4 <PIT::close(int, int, void*)>:
c001d2e4:	83 ec 0c             	sub    esp,0xc
c001d2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f9:	6a 01                	push   0x1
c001d2fb:	68 70 d2 01 c0       	push   0xc001d270
c001d300:	6a 00                	push   0x0
c001d302:	50                   	push   eax
c001d303:	e8 12 e7 fe ff       	call   c000ba1a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d308:	83 c4 10             	add    esp,0x10
c001d30b:	b8 00 00 00 00       	mov    eax,0x0
c001d310:	83 c4 0c             	add    esp,0xc
c001d313:	c3                   	ret    

c001d314 <PIT::PIT()>:
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31b:	83 ec 08             	sub    esp,0x8
c001d31e:	68 d8 11 02 c0       	push   0xc00211d8
c001d323:	50                   	push   eax
c001d324:	e8 d3 ff fe ff       	call   c000d2fc <Timer::Timer(char const*)>
c001d329:	83 c4 10             	add    esp,0x10
c001d32c:	ba 00 12 02 c0       	mov    edx,0xc0021200
c001d331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d335:	89 10                	mov    DWORD PTR [eax],edx
c001d337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d341:	31 d2                	xor    edx,edx
c001d343:	88 c2                	mov    dl,al
c001d345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d349:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d354:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d35a:	31 d2                	xor    edx,edx
c001d35c:	88 c2                	mov    dl,al
c001d35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d362:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d371:	8d 50 01             	lea    edx,[eax+0x1]
c001d374:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d378:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d37e:	31 d2                	xor    edx,edx
c001d380:	88 c2                	mov    dl,al
c001d382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d386:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d38a:	83 e1 3f             	and    ecx,0x3f
c001d38d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d391:	90                   	nop
c001d392:	83 c4 0c             	add    esp,0xc
c001d395:	c3                   	ret    
c001d396:	66 90                	xchg   ax,ax
c001d398:	66 90                	xchg   ax,ax
c001d39a:	66 90                	xchg   ax,ax
c001d39c:	66 90                	xchg   ax,ax
c001d39e:	66 90                	xchg   ax,ax

c001d3a0 <avxDetect>:
c001d3a0:	b8 01 00 00 00       	mov    eax,0x1
c001d3a5:	0f a2                	cpuid  
c001d3a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d3ad:	74 15                	je     c001d3c4 <avxDetect.noAVX>
c001d3af:	b8 01 00 00 00       	mov    eax,0x1
c001d3b4:	0f a2                	cpuid  
c001d3b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d3bc:	74 06                	je     c001d3c4 <avxDetect.noAVX>
c001d3be:	b8 01 00 00 00       	mov    eax,0x1
c001d3c3:	c3                   	ret    

c001d3c4 <avxDetect.noAVX>:
c001d3c4:	b8 00 00 00 00       	mov    eax,0x0
c001d3c9:	c3                   	ret    

c001d3ca <avxSave>:
c001d3ca:	53                   	push   ebx
c001d3cb:	52                   	push   edx
c001d3cc:	31 c0                	xor    eax,eax
c001d3ce:	48                   	dec    eax
c001d3cf:	89 c2                	mov    edx,eax
c001d3d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d3d5:	0f ae 23             	xsave  [ebx]
c001d3d8:	5a                   	pop    edx
c001d3d9:	5b                   	pop    ebx
c001d3da:	c3                   	ret    

c001d3db <avxLoad>:
c001d3db:	53                   	push   ebx
c001d3dc:	52                   	push   edx
c001d3dd:	31 c0                	xor    eax,eax
c001d3df:	48                   	dec    eax
c001d3e0:	89 c2                	mov    edx,eax
c001d3e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d3e6:	0f ae 2b             	xrstor [ebx]
c001d3e9:	5a                   	pop    edx
c001d3ea:	5b                   	pop    ebx
c001d3eb:	c3                   	ret    

c001d3ec <avxInit>:
c001d3ec:	e8 67 03 00 00       	call   c001d758 <sseInit>
c001d3f1:	50                   	push   eax
c001d3f2:	51                   	push   ecx
c001d3f3:	0f 20 e0             	mov    eax,cr4
c001d3f6:	0d 00 00 04 00       	or     eax,0x40000
c001d3fb:	0f 22 e0             	mov    cr4,eax
c001d3fe:	31 c9                	xor    ecx,ecx
c001d400:	0f 01 d0             	xgetbv 
c001d403:	0d 07 00 00 00       	or     eax,0x7
c001d408:	0f 01 d1             	xsetbv 
c001d40b:	59                   	pop    ecx
c001d40c:	58                   	pop    eax
c001d40d:	c3                   	ret    

c001d40e <avxClose>:
c001d40e:	c3                   	ret    

c001d40f <wouldSheSayYes>:
c001d40f:	c3                   	ret    
c001d410:	49                   	dec    ecx
c001d411:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d415:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d419:	75 20                	jne    c001d43b <isr0+0xb>
c001d41b:	4e                   	dec    esi
c001d41c:	79 61                	jns    c001d47f <isr7+0x3>
c001d41e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d423:	66 90                	xchg   ax,ax
c001d425:	66 90                	xchg   ax,ax
c001d427:	66 90                	xchg   ax,ax
c001d429:	66 90                	xchg   ax,ax
c001d42b:	66 90                	xchg   ax,ax
c001d42d:	66 90                	xchg   ax,ax
c001d42f:	90                   	nop

c001d430 <isr0>:
c001d430:	fa                   	cli    
c001d431:	68 00 00 00 00       	push   0x0
c001d436:	68 00 00 00 00       	push   0x0
c001d43b:	e9 56 01 00 00       	jmp    c001d596 <int_common_stub>

c001d440 <isr1>:
c001d440:	fa                   	cli    
c001d441:	6a 00                	push   0x0
c001d443:	6a 01                	push   0x1
c001d445:	e9 4c 01 00 00       	jmp    c001d596 <int_common_stub>

c001d44a <isr2>:
c001d44a:	fa                   	cli    
c001d44b:	6a 00                	push   0x0
c001d44d:	6a 02                	push   0x2
c001d44f:	e9 42 01 00 00       	jmp    c001d596 <int_common_stub>

c001d454 <isr3>:
c001d454:	fa                   	cli    
c001d455:	6a 00                	push   0x0
c001d457:	6a 03                	push   0x3
c001d459:	e9 38 01 00 00       	jmp    c001d596 <int_common_stub>

c001d45e <isr4>:
c001d45e:	fa                   	cli    
c001d45f:	6a 00                	push   0x0
c001d461:	6a 04                	push   0x4
c001d463:	e9 2e 01 00 00       	jmp    c001d596 <int_common_stub>

c001d468 <isr5>:
c001d468:	fa                   	cli    
c001d469:	6a 00                	push   0x0
c001d46b:	6a 05                	push   0x5
c001d46d:	e9 24 01 00 00       	jmp    c001d596 <int_common_stub>

c001d472 <isr6>:
c001d472:	fa                   	cli    
c001d473:	6a 00                	push   0x0
c001d475:	6a 06                	push   0x6
c001d477:	e9 1a 01 00 00       	jmp    c001d596 <int_common_stub>

c001d47c <isr7>:
c001d47c:	fa                   	cli    
c001d47d:	6a 00                	push   0x0
c001d47f:	6a 07                	push   0x7
c001d481:	e9 10 01 00 00       	jmp    c001d596 <int_common_stub>

c001d486 <isr8>:
c001d486:	fa                   	cli    
c001d487:	6a 08                	push   0x8
c001d489:	e9 08 01 00 00       	jmp    c001d596 <int_common_stub>

c001d48e <isr9>:
c001d48e:	fa                   	cli    
c001d48f:	6a 00                	push   0x0
c001d491:	6a 09                	push   0x9
c001d493:	e9 fe 00 00 00       	jmp    c001d596 <int_common_stub>

c001d498 <isr10>:
c001d498:	fa                   	cli    
c001d499:	6a 0a                	push   0xa
c001d49b:	e9 f6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4a0 <isr11>:
c001d4a0:	fa                   	cli    
c001d4a1:	6a 0b                	push   0xb
c001d4a3:	e9 ee 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4a8 <isr12>:
c001d4a8:	fa                   	cli    
c001d4a9:	6a 0c                	push   0xc
c001d4ab:	e9 e6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4b0 <isr13>:
c001d4b0:	fa                   	cli    
c001d4b1:	6a 0d                	push   0xd
c001d4b3:	53                   	push   ebx
c001d4b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d4b8:	81 fb 86 d6 01 c0    	cmp    ebx,0xc001d686
c001d4be:	5b                   	pop    ebx
c001d4bf:	0f 84 c3 01 00 00    	je     c001d688 <finishSignal2>
c001d4c5:	e9 cc 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4ca <isr14>:
c001d4ca:	fa                   	cli    
c001d4cb:	6a 0e                	push   0xe
c001d4cd:	e9 c4 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4d2 <isr15>:
c001d4d2:	fa                   	cli    
c001d4d3:	6a 00                	push   0x0
c001d4d5:	6a 0f                	push   0xf
c001d4d7:	e9 ba 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4dc <isr16>:
c001d4dc:	fa                   	cli    
c001d4dd:	6a 00                	push   0x0
c001d4df:	6a 10                	push   0x10
c001d4e1:	e9 b0 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4e6 <isr17>:
c001d4e6:	fa                   	cli    
c001d4e7:	6a 00                	push   0x0
c001d4e9:	6a 11                	push   0x11
c001d4eb:	e9 a6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4f0 <isr18>:
c001d4f0:	fa                   	cli    
c001d4f1:	6a 00                	push   0x0
c001d4f3:	6a 12                	push   0x12
c001d4f5:	e9 9c 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4fa <irq3>:
c001d4fa:	fa                   	cli    
c001d4fb:	6a 00                	push   0x0
c001d4fd:	6a 23                	push   0x23
c001d4ff:	e9 92 00 00 00       	jmp    c001d596 <int_common_stub>

c001d504 <irq4>:
c001d504:	fa                   	cli    
c001d505:	6a 00                	push   0x0
c001d507:	6a 24                	push   0x24
c001d509:	e9 88 00 00 00       	jmp    c001d596 <int_common_stub>

c001d50e <irq5>:
c001d50e:	fa                   	cli    
c001d50f:	6a 00                	push   0x0
c001d511:	6a 25                	push   0x25
c001d513:	e9 7e 00 00 00       	jmp    c001d596 <int_common_stub>

c001d518 <irq6>:
c001d518:	fa                   	cli    
c001d519:	6a 00                	push   0x0
c001d51b:	6a 26                	push   0x26
c001d51d:	e9 74 00 00 00       	jmp    c001d596 <int_common_stub>

c001d522 <irq7>:
c001d522:	fa                   	cli    
c001d523:	6a 00                	push   0x0
c001d525:	6a 27                	push   0x27
c001d527:	e9 6a 00 00 00       	jmp    c001d596 <int_common_stub>

c001d52c <irq8>:
c001d52c:	fa                   	cli    
c001d52d:	6a 00                	push   0x0
c001d52f:	6a 28                	push   0x28
c001d531:	e9 60 00 00 00       	jmp    c001d596 <int_common_stub>

c001d536 <irq9>:
c001d536:	fa                   	cli    
c001d537:	6a 00                	push   0x0
c001d539:	6a 29                	push   0x29
c001d53b:	e9 56 00 00 00       	jmp    c001d596 <int_common_stub>

c001d540 <irq10>:
c001d540:	fa                   	cli    
c001d541:	6a 00                	push   0x0
c001d543:	6a 2a                	push   0x2a
c001d545:	e9 4c 00 00 00       	jmp    c001d596 <int_common_stub>

c001d54a <irq11>:
c001d54a:	fa                   	cli    
c001d54b:	6a 00                	push   0x0
c001d54d:	6a 2b                	push   0x2b
c001d54f:	e9 42 00 00 00       	jmp    c001d596 <int_common_stub>

c001d554 <irq12>:
c001d554:	fa                   	cli    
c001d555:	6a 00                	push   0x0
c001d557:	6a 2c                	push   0x2c
c001d559:	e9 38 00 00 00       	jmp    c001d596 <int_common_stub>

c001d55e <irq13>:
c001d55e:	fa                   	cli    
c001d55f:	6a 00                	push   0x0
c001d561:	6a 2d                	push   0x2d
c001d563:	e9 2e 00 00 00       	jmp    c001d596 <int_common_stub>

c001d568 <irq14>:
c001d568:	fa                   	cli    
c001d569:	6a 00                	push   0x0
c001d56b:	6a 2e                	push   0x2e
c001d56d:	e9 24 00 00 00       	jmp    c001d596 <int_common_stub>

c001d572 <irq15>:
c001d572:	fa                   	cli    
c001d573:	6a 00                	push   0x0
c001d575:	6a 2f                	push   0x2f
c001d577:	e9 1a 00 00 00       	jmp    c001d596 <int_common_stub>

c001d57c <irq1>:
c001d57c:	fa                   	cli    
c001d57d:	6a 00                	push   0x0
c001d57f:	6a 21                	push   0x21
c001d581:	eb 13                	jmp    c001d596 <int_common_stub>

c001d583 <irq2>:
c001d583:	fa                   	cli    
c001d584:	6a 00                	push   0x0
c001d586:	6a 22                	push   0x22
c001d588:	eb 0c                	jmp    c001d596 <int_common_stub>

c001d58a <isr96>:
c001d58a:	6a 00                	push   0x0
c001d58c:	6a 60                	push   0x60
c001d58e:	fb                   	sti    
c001d58f:	eb 37                	jmp    c001d5c8 <syscall_common_stub>

c001d591 <irq0>:
c001d591:	fa                   	cli    
c001d592:	6a 00                	push   0x0
c001d594:	6a 20                	push   0x20

c001d596 <int_common_stub>:
c001d596:	60                   	pusha  
c001d597:	1e                   	push   ds
c001d598:	06                   	push   es
c001d599:	0f a0                	push   fs
c001d59b:	0f a8                	push   gs
c001d59d:	66 b8 10 00          	mov    ax,0x10
c001d5a1:	66 8e d8             	mov    ds,ax
c001d5a4:	66 8e c0             	mov    es,ax
c001d5a7:	66 8e e0             	mov    fs,ax
c001d5aa:	66 8e e8             	mov    gs,ax
c001d5ad:	54                   	push   esp
c001d5ae:	fc                   	cld    
c001d5af:	e8 30 e9 fe ff       	call   c000bee4 <int_handler>
c001d5b4:	81 c4 04 00 00 00    	add    esp,0x4
c001d5ba:	0f a9                	pop    gs
c001d5bc:	0f a1                	pop    fs
c001d5be:	07                   	pop    es
c001d5bf:	1f                   	pop    ds
c001d5c0:	61                   	popa   
c001d5c1:	81 c4 08 00 00 00    	add    esp,0x8
c001d5c7:	cf                   	iret   

c001d5c8 <syscall_common_stub>:
c001d5c8:	60                   	pusha  
c001d5c9:	1e                   	push   ds
c001d5ca:	06                   	push   es
c001d5cb:	0f a0                	push   fs
c001d5cd:	0f a8                	push   gs
c001d5cf:	66 b8 10 00          	mov    ax,0x10
c001d5d3:	66 8e d8             	mov    ds,ax
c001d5d6:	66 8e c0             	mov    es,ax
c001d5d9:	66 8e e0             	mov    fs,ax
c001d5dc:	66 8e e8             	mov    gs,ax
c001d5df:	54                   	push   esp
c001d5e0:	fc                   	cld    
c001d5e1:	e8 fe e8 fe ff       	call   c000bee4 <int_handler>
c001d5e6:	81 c4 04 00 00 00    	add    esp,0x4
c001d5ec:	0f a9                	pop    gs
c001d5ee:	0f a1                	pop    fs
c001d5f0:	07                   	pop    es
c001d5f1:	1f                   	pop    ds
c001d5f2:	e8 04 33 ff ff       	call   c00108fb <KiCheckSignalZ>
c001d5f7:	3d 00 00 00 00       	cmp    eax,0x0
c001d5fc:	0f 84 c0 00 00 00    	je     c001d6c2 <skipSignals>
c001d602:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001d607:	61                   	popa   
c001d608:	53                   	push   ebx
c001d609:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001d60f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001d612:	5b                   	pop    ebx
c001d613:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001d618:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001d61b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001d61e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d621:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001d624:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001d627:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001d62a:	81 c4 08 00 00 00    	add    esp,0x8
c001d630:	5e                   	pop    esi
c001d631:	5b                   	pop    ebx
c001d632:	59                   	pop    ecx
c001d633:	5a                   	pop    edx
c001d634:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001d637:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001d63a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d63d:	52                   	push   edx
c001d63e:	51                   	push   ecx
c001d63f:	53                   	push   ebx
c001d640:	56                   	push   esi
c001d641:	81 ec 08 00 00 00    	sub    esp,0x8
c001d647:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001d64a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001d64d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001d650:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d653:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d656:	60                   	pusha  
c001d657:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001d65d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001d660:	89 e3                	mov    ebx,esp
c001d662:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d665:	52                   	push   edx
c001d666:	68 86 d6 01 c0       	push   0xc001d686
c001d66b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001d66e:	89 dc                	mov    esp,ebx
c001d670:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001d673:	68 23 00 00 00       	push   0x23
c001d678:	51                   	push   ecx
c001d679:	68 02 02 00 00       	push   0x202
c001d67e:	68 1b 00 00 00       	push   0x1b
c001d683:	ff 36                	push   DWORD PTR [esi]
c001d685:	cf                   	iret   

c001d686 <finishSignal>:
c001d686:	cd 0f                	int    0xf

c001d688 <finishSignal2>:
c001d688:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001d68e:	e8 e5 32 ff ff       	call   c0010978 <KiFinishSignalZ>
c001d693:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001d699:	68 23 00 00 00       	push   0x23
c001d69e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001d6a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001d6a4:	68 1b 00 00 00       	push   0x1b
c001d6a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001d6ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001d6b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001d6b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d6b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001d6bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001d6be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001d6c1:	cf                   	iret   

c001d6c2 <skipSignals>:
c001d6c2:	61                   	popa   
c001d6c3:	81 c4 08 00 00 00    	add    esp,0x8
c001d6c9:	cf                   	iret   
c001d6ca:	90                   	nop
c001d6cb:	90                   	nop

c001d6cc <irq16>:
c001d6cc:	fa                   	cli    
c001d6cd:	6a 00                	push   0x0
c001d6cf:	6a 30                	push   0x30
c001d6d1:	e9 c0 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6d6 <irq17>:
c001d6d6:	fa                   	cli    
c001d6d7:	6a 00                	push   0x0
c001d6d9:	6a 31                	push   0x31
c001d6db:	e9 b6 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6e0 <irq18>:
c001d6e0:	fa                   	cli    
c001d6e1:	6a 00                	push   0x0
c001d6e3:	6a 32                	push   0x32
c001d6e5:	e9 ac fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6ea <irq19>:
c001d6ea:	fa                   	cli    
c001d6eb:	6a 00                	push   0x0
c001d6ed:	6a 33                	push   0x33
c001d6ef:	e9 a2 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6f4 <irq20>:
c001d6f4:	fa                   	cli    
c001d6f5:	6a 00                	push   0x0
c001d6f7:	6a 34                	push   0x34
c001d6f9:	e9 98 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6fe <irq21>:
c001d6fe:	fa                   	cli    
c001d6ff:	6a 00                	push   0x0
c001d701:	6a 35                	push   0x35
c001d703:	e9 8e fe ff ff       	jmp    c001d596 <int_common_stub>

c001d708 <irq22>:
c001d708:	fa                   	cli    
c001d709:	6a 00                	push   0x0
c001d70b:	6a 36                	push   0x36
c001d70d:	e9 84 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d712 <irq23>:
c001d712:	fa                   	cli    
c001d713:	6a 00                	push   0x0
c001d715:	6a 37                	push   0x37
c001d717:	e9 7a fe ff ff       	jmp    c001d596 <int_common_stub>
c001d71c:	66 90                	xchg   ax,ax
c001d71e:	66 90                	xchg   ax,ax

c001d720 <i386GetRDRAND>:
c001d720:	b9 64 00 00 00       	mov    ecx,0x64

c001d725 <retry>:
c001d725:	0f c7 f0             	rdrand eax
c001d728:	72 05                	jb     c001d72f <retry.done>
c001d72a:	e2 f9                	loop   c001d725 <retry>

c001d72c <retry.fail>:
c001d72c:	31 c0                	xor    eax,eax
c001d72e:	c3                   	ret    

c001d72f <retry.done>:
c001d72f:	c3                   	ret    

c001d730 <absolutelyNoChanceInHell>:
c001d730:	b8 01 00 00 00       	mov    eax,0x1
c001d735:	0f a2                	cpuid  
c001d737:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d73d:	74 06                	je     c001d745 <sseDetect.noSSE>
c001d73f:	b8 01 00 00 00       	mov    eax,0x1
c001d744:	c3                   	ret    

c001d745 <sseDetect.noSSE>:
c001d745:	31 c0                	xor    eax,eax
c001d747:	c3                   	ret    

c001d748 <sseSave>:
c001d748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d74c:	0f ae 00             	fxsave [eax]
c001d74f:	c3                   	ret    

c001d750 <sseLoad>:
c001d750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d754:	0f ae 08             	fxrstor [eax]
c001d757:	c3                   	ret    

c001d758 <sseInit>:
c001d758:	e8 42 00 00 00       	call   c001d79f <x87Init>
c001d75d:	0f 20 e0             	mov    eax,cr4
c001d760:	66 0d 00 06          	or     ax,0x600
c001d764:	0f 22 e0             	mov    cr4,eax
c001d767:	c3                   	ret    

c001d768 <sseClose>:
c001d768:	c3                   	ret    
c001d769:	66 90                	xchg   ax,ax
c001d76b:	66 90                	xchg   ax,ax
c001d76d:	66 90                	xchg   ax,ax
c001d76f:	90                   	nop

c001d770 <value_37F>:
c001d770:	7f 03                	jg     c001d775 <value_37A+0x1>

c001d772 <value_37E>:
c001d772:	7e 03                	jle    c001d777 <x87Detect+0x1>

c001d774 <value_37A>:
c001d774:	7a 03                	jp     c001d779 <x87Detect+0x3>

c001d776 <x87Detect>:
c001d776:	b8 01 00 00 00       	mov    eax,0x1
c001d77b:	0f a2                	cpuid  
c001d77d:	f7 c2 01 00 00 00    	test   edx,0x1
c001d783:	74 06                	je     c001d78b <x87Detect.nox87>
c001d785:	b8 01 00 00 00       	mov    eax,0x1
c001d78a:	c3                   	ret    

c001d78b <x87Detect.nox87>:
c001d78b:	b8 00 00 00 00       	mov    eax,0x0
c001d790:	c3                   	ret    

c001d791 <x87Save>:
c001d791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d795:	dd 30                	fnsave [eax]
c001d797:	c3                   	ret    

c001d798 <x87Load>:
c001d798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79c:	dd 20                	frstor [eax]
c001d79e:	c3                   	ret    

c001d79f <x87Init>:
c001d79f:	0f 20 c0             	mov    eax,cr0
c001d7a2:	66 25 fb ff          	and    ax,0xfffb
c001d7a6:	66 0d 22 00          	or     ax,0x22
c001d7aa:	0f 22 c0             	mov    cr0,eax
c001d7ad:	db e3                	fninit 
c001d7af:	0f 06                	clts   
c001d7b1:	d9 2d 74 d7 01 c0    	fldcw  WORD PTR ds:0xc001d774
c001d7b7:	c3                   	ret    

c001d7b8 <x87Close>:
c001d7b8:	c3                   	ret    
c001d7b9:	66 90                	xchg   ax,ax
c001d7bb:	90                   	nop

c001d7bc <__do_global_ctors_aux>:
c001d7bc:	a1 6c e7 01 c0       	mov    eax,ds:0xc001e76c
c001d7c1:	83 f8 ff             	cmp    eax,0xffffffff
c001d7c4:	74 1a                	je     c001d7e0 <__do_global_ctors_aux+0x24>
c001d7c6:	55                   	push   ebp
c001d7c7:	89 e5                	mov    ebp,esp
c001d7c9:	53                   	push   ebx
c001d7ca:	52                   	push   edx
c001d7cb:	bb 6c e7 01 c0       	mov    ebx,0xc001e76c
c001d7d0:	ff d0                	call   eax
c001d7d2:	83 eb 04             	sub    ebx,0x4
c001d7d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7d7:	83 f8 ff             	cmp    eax,0xffffffff
c001d7da:	75 f4                	jne    c001d7d0 <__do_global_ctors_aux+0x14>
c001d7dc:	58                   	pop    eax
c001d7dd:	5b                   	pop    ebx
c001d7de:	5d                   	pop    ebp
c001d7df:	c3                   	ret    
c001d7e0:	c3                   	ret    
c001d7e1:	66 90                	xchg   ax,ax
c001d7e3:	90                   	nop

c001d7e4 <__divdi3>:
c001d7e4:	55                   	push   ebp
c001d7e5:	57                   	push   edi
c001d7e6:	56                   	push   esi
c001d7e7:	53                   	push   ebx
c001d7e8:	83 ec 1c             	sub    esp,0x1c
c001d7eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d7ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d7f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d7f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d7fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d7fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d802:	85 db                	test   ebx,ebx
c001d804:	0f 88 8e 00 00 00    	js     c001d898 <__divdi3+0xb4>
c001d80a:	89 dd                	mov    ebp,ebx
c001d80c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d814:	89 d3                	mov    ebx,edx
c001d816:	85 d2                	test   edx,edx
c001d818:	79 0d                	jns    c001d827 <__divdi3+0x43>
c001d81a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001d81e:	f7 d8                	neg    eax
c001d820:	83 d2 00             	adc    edx,0x0
c001d823:	f7 da                	neg    edx
c001d825:	89 d3                	mov    ebx,edx
c001d827:	89 c7                	mov    edi,eax
c001d829:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d82c:	85 db                	test   ebx,ebx
c001d82e:	75 48                	jne    c001d878 <__divdi3+0x94>
c001d830:	39 ef                	cmp    edi,ebp
c001d832:	76 24                	jbe    c001d858 <__divdi3+0x74>
c001d834:	89 ea                	mov    edx,ebp
c001d836:	f7 f7                	div    edi
c001d838:	89 c1                	mov    ecx,eax
c001d83a:	31 f6                	xor    esi,esi
c001d83c:	89 c8                	mov    eax,ecx
c001d83e:	89 f2                	mov    edx,esi
c001d840:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d844:	85 c9                	test   ecx,ecx
c001d846:	74 07                	je     c001d84f <__divdi3+0x6b>
c001d848:	f7 d8                	neg    eax
c001d84a:	83 d2 00             	adc    edx,0x0
c001d84d:	f7 da                	neg    edx
c001d84f:	83 c4 1c             	add    esp,0x1c
c001d852:	5b                   	pop    ebx
c001d853:	5e                   	pop    esi
c001d854:	5f                   	pop    edi
c001d855:	5d                   	pop    ebp
c001d856:	c3                   	ret    
c001d857:	90                   	nop
c001d858:	85 ff                	test   edi,edi
c001d85a:	75 0b                	jne    c001d867 <__divdi3+0x83>
c001d85c:	b8 01 00 00 00       	mov    eax,0x1
c001d861:	31 d2                	xor    edx,edx
c001d863:	f7 f3                	div    ebx
c001d865:	89 c7                	mov    edi,eax
c001d867:	31 d2                	xor    edx,edx
c001d869:	89 e8                	mov    eax,ebp
c001d86b:	f7 f7                	div    edi
c001d86d:	89 c6                	mov    esi,eax
c001d86f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d872:	f7 f7                	div    edi
c001d874:	89 c1                	mov    ecx,eax
c001d876:	eb c4                	jmp    c001d83c <__divdi3+0x58>
c001d878:	39 eb                	cmp    ebx,ebp
c001d87a:	77 3c                	ja     c001d8b8 <__divdi3+0xd4>
c001d87c:	0f bd f3             	bsr    esi,ebx
c001d87f:	83 f6 1f             	xor    esi,0x1f
c001d882:	75 40                	jne    c001d8c4 <__divdi3+0xe0>
c001d884:	39 eb                	cmp    ebx,ebp
c001d886:	72 09                	jb     c001d891 <__divdi3+0xad>
c001d888:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001d88b:	0f 87 97 00 00 00    	ja     c001d928 <__divdi3+0x144>
c001d891:	b9 01 00 00 00       	mov    ecx,0x1
c001d896:	eb a4                	jmp    c001d83c <__divdi3+0x58>
c001d898:	f7 d9                	neg    ecx
c001d89a:	83 d3 00             	adc    ebx,0x0
c001d89d:	f7 db                	neg    ebx
c001d89f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d8a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d8a6:	89 dd                	mov    ebp,ebx
c001d8a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001d8b0:	e9 5f ff ff ff       	jmp    c001d814 <__divdi3+0x30>
c001d8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8b8:	31 f6                	xor    esi,esi
c001d8ba:	31 c9                	xor    ecx,ecx
c001d8bc:	e9 7b ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c4:	b8 20 00 00 00       	mov    eax,0x20
c001d8c9:	29 f0                	sub    eax,esi
c001d8cb:	89 f1                	mov    ecx,esi
c001d8cd:	d3 e3                	shl    ebx,cl
c001d8cf:	89 fa                	mov    edx,edi
c001d8d1:	88 c1                	mov    cl,al
c001d8d3:	d3 ea                	shr    edx,cl
c001d8d5:	09 da                	or     edx,ebx
c001d8d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8db:	89 f1                	mov    ecx,esi
c001d8dd:	d3 e7                	shl    edi,cl
c001d8df:	89 eb                	mov    ebx,ebp
c001d8e1:	88 c1                	mov    cl,al
c001d8e3:	d3 eb                	shr    ebx,cl
c001d8e5:	89 f1                	mov    ecx,esi
c001d8e7:	d3 e5                	shl    ebp,cl
c001d8e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d8ec:	88 c1                	mov    cl,al
c001d8ee:	d3 ea                	shr    edx,cl
c001d8f0:	09 d5                	or     ebp,edx
c001d8f2:	89 e8                	mov    eax,ebp
c001d8f4:	89 da                	mov    edx,ebx
c001d8f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001d8fa:	89 d3                	mov    ebx,edx
c001d8fc:	89 c5                	mov    ebp,eax
c001d8fe:	f7 e7                	mul    edi
c001d900:	39 d3                	cmp    ebx,edx
c001d902:	72 18                	jb     c001d91c <__divdi3+0x138>
c001d904:	74 0a                	je     c001d910 <__divdi3+0x12c>
c001d906:	89 e9                	mov    ecx,ebp
c001d908:	31 f6                	xor    esi,esi
c001d90a:	e9 2d ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d90f:	90                   	nop
c001d910:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d913:	89 f1                	mov    ecx,esi
c001d915:	d3 e7                	shl    edi,cl
c001d917:	39 c7                	cmp    edi,eax
c001d919:	73 eb                	jae    c001d906 <__divdi3+0x122>
c001d91b:	90                   	nop
c001d91c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001d91f:	31 f6                	xor    esi,esi
c001d921:	e9 16 ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d926:	66 90                	xchg   ax,ax
c001d928:	31 c9                	xor    ecx,ecx
c001d92a:	e9 0d ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d92f:	90                   	nop

c001d930 <__moddi3>:
c001d930:	55                   	push   ebp
c001d931:	57                   	push   edi
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	83 ec 2c             	sub    esp,0x2c
c001d937:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d93b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001d93f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d943:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001d947:	85 db                	test   ebx,ebx
c001d949:	0f 88 85 00 00 00    	js     c001d9d4 <__moddi3+0xa4>
c001d94f:	89 de                	mov    esi,ebx
c001d951:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d959:	89 d7                	mov    edi,edx
c001d95b:	85 d2                	test   edx,edx
c001d95d:	79 09                	jns    c001d968 <__moddi3+0x38>
c001d95f:	f7 d8                	neg    eax
c001d961:	83 d2 00             	adc    edx,0x0
c001d964:	f7 da                	neg    edx
c001d966:	89 d7                	mov    edi,edx
c001d968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d96c:	89 cd                	mov    ebp,ecx
c001d96e:	85 ff                	test   edi,edi
c001d970:	75 52                	jne    c001d9c4 <__moddi3+0x94>
c001d972:	89 c3                	mov    ebx,eax
c001d974:	39 f0                	cmp    eax,esi
c001d976:	76 24                	jbe    c001d99c <__moddi3+0x6c>
c001d978:	89 c8                	mov    eax,ecx
c001d97a:	89 f2                	mov    edx,esi
c001d97c:	f7 f3                	div    ebx
c001d97e:	89 d6                	mov    esi,edx
c001d980:	89 f0                	mov    eax,esi
c001d982:	31 d2                	xor    edx,edx
c001d984:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d988:	85 c9                	test   ecx,ecx
c001d98a:	74 07                	je     c001d993 <__moddi3+0x63>
c001d98c:	f7 d8                	neg    eax
c001d98e:	83 d2 00             	adc    edx,0x0
c001d991:	f7 da                	neg    edx
c001d993:	83 c4 2c             	add    esp,0x2c
c001d996:	5b                   	pop    ebx
c001d997:	5e                   	pop    esi
c001d998:	5f                   	pop    edi
c001d999:	5d                   	pop    ebp
c001d99a:	c3                   	ret    
c001d99b:	90                   	nop
c001d99c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d9a0:	85 db                	test   ebx,ebx
c001d9a2:	75 0d                	jne    c001d9b1 <__moddi3+0x81>
c001d9a4:	b8 01 00 00 00       	mov    eax,0x1
c001d9a9:	31 d2                	xor    edx,edx
c001d9ab:	f7 f7                	div    edi
c001d9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9b1:	89 f0                	mov    eax,esi
c001d9b3:	31 d2                	xor    edx,edx
c001d9b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d9b9:	f7 f7                	div    edi
c001d9bb:	89 e8                	mov    eax,ebp
c001d9bd:	f7 f7                	div    edi
c001d9bf:	89 d6                	mov    esi,edx
c001d9c1:	eb bd                	jmp    c001d980 <__moddi3+0x50>
c001d9c3:	90                   	nop
c001d9c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d9c8:	39 f7                	cmp    edi,esi
c001d9ca:	76 20                	jbe    c001d9ec <__moddi3+0xbc>
c001d9cc:	89 c8                	mov    eax,ecx
c001d9ce:	89 f2                	mov    edx,esi
c001d9d0:	eb b2                	jmp    c001d984 <__moddi3+0x54>
c001d9d2:	66 90                	xchg   ax,ax
c001d9d4:	f7 d9                	neg    ecx
c001d9d6:	83 d3 00             	adc    ebx,0x0
c001d9d9:	f7 db                	neg    ebx
c001d9db:	89 de                	mov    esi,ebx
c001d9dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001d9e5:	e9 6f ff ff ff       	jmp    c001d959 <__moddi3+0x29>
c001d9ea:	66 90                	xchg   ax,ax
c001d9ec:	0f bd c7             	bsr    eax,edi
c001d9ef:	83 f0 1f             	xor    eax,0x1f
c001d9f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d9f6:	75 24                	jne    c001da1c <__moddi3+0xec>
c001d9f8:	39 f7                	cmp    edi,esi
c001d9fa:	72 06                	jb     c001da02 <__moddi3+0xd2>
c001d9fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001da00:	77 0c                	ja     c001da0e <__moddi3+0xde>
c001da02:	89 e9                	mov    ecx,ebp
c001da04:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001da08:	19 fe                	sbb    esi,edi
c001da0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001da0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da12:	89 f2                	mov    edx,esi
c001da14:	e9 6b ff ff ff       	jmp    c001d984 <__moddi3+0x54>
c001da19:	8d 76 00             	lea    esi,[esi+0x0]
c001da1c:	b8 20 00 00 00       	mov    eax,0x20
c001da21:	89 c2                	mov    edx,eax
c001da23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001da27:	29 da                	sub    edx,ebx
c001da29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001da2d:	88 d9                	mov    cl,bl
c001da2f:	d3 e7                	shl    edi,cl
c001da31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da35:	88 d1                	mov    cl,dl
c001da37:	d3 e8                	shr    eax,cl
c001da39:	09 c7                	or     edi,eax
c001da3b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001da3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001da43:	89 d8                	mov    eax,ebx
c001da45:	88 d9                	mov    cl,bl
c001da47:	d3 e7                	shl    edi,cl
c001da49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001da4d:	89 f3                	mov    ebx,esi
c001da4f:	88 d1                	mov    cl,dl
c001da51:	d3 eb                	shr    ebx,cl
c001da53:	89 c7                	mov    edi,eax
c001da55:	88 c1                	mov    cl,al
c001da57:	d3 e6                	shl    esi,cl
c001da59:	89 e8                	mov    eax,ebp
c001da5b:	88 d1                	mov    cl,dl
c001da5d:	d3 e8                	shr    eax,cl
c001da5f:	09 f0                	or     eax,esi
c001da61:	89 f9                	mov    ecx,edi
c001da63:	d3 e5                	shl    ebp,cl
c001da65:	89 da                	mov    edx,ebx
c001da67:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001da6b:	89 d3                	mov    ebx,edx
c001da6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001da71:	89 c6                	mov    esi,eax
c001da73:	89 d1                	mov    ecx,edx
c001da75:	39 d3                	cmp    ebx,edx
c001da77:	72 27                	jb     c001daa0 <__moddi3+0x170>
c001da79:	74 21                	je     c001da9c <__moddi3+0x16c>
c001da7b:	29 f5                	sub    ebp,esi
c001da7d:	19 cb                	sbb    ebx,ecx
c001da7f:	89 de                	mov    esi,ebx
c001da81:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001da85:	d3 e6                	shl    esi,cl
c001da87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001da8b:	89 f9                	mov    ecx,edi
c001da8d:	d3 ed                	shr    ebp,cl
c001da8f:	09 ee                	or     esi,ebp
c001da91:	89 f0                	mov    eax,esi
c001da93:	d3 eb                	shr    ebx,cl
c001da95:	89 da                	mov    edx,ebx
c001da97:	e9 e8 fe ff ff       	jmp    c001d984 <__moddi3+0x54>
c001da9c:	39 c5                	cmp    ebp,eax
c001da9e:	73 db                	jae    c001da7b <__moddi3+0x14b>
c001daa0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001daa4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001daa8:	89 d1                	mov    ecx,edx
c001daaa:	89 c6                	mov    esi,eax
c001daac:	eb cd                	jmp    c001da7b <__moddi3+0x14b>
c001daae:	66 90                	xchg   ax,ax

c001dab0 <__udivdi3>:
c001dab0:	55                   	push   ebp
c001dab1:	57                   	push   edi
c001dab2:	56                   	push   esi
c001dab3:	53                   	push   ebx
c001dab4:	83 ec 1c             	sub    esp,0x1c
c001dab7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dabb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dabf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dac3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dac7:	85 d2                	test   edx,edx
c001dac9:	75 41                	jne    c001db0c <__udivdi3+0x5c>
c001dacb:	39 f7                	cmp    edi,esi
c001dacd:	76 15                	jbe    c001dae4 <__udivdi3+0x34>
c001dacf:	89 e8                	mov    eax,ebp
c001dad1:	89 f2                	mov    edx,esi
c001dad3:	f7 f7                	div    edi
c001dad5:	31 db                	xor    ebx,ebx
c001dad7:	89 da                	mov    edx,ebx
c001dad9:	83 c4 1c             	add    esp,0x1c
c001dadc:	5b                   	pop    ebx
c001dadd:	5e                   	pop    esi
c001dade:	5f                   	pop    edi
c001dadf:	5d                   	pop    ebp
c001dae0:	c3                   	ret    
c001dae1:	8d 76 00             	lea    esi,[esi+0x0]
c001dae4:	89 f9                	mov    ecx,edi
c001dae6:	85 ff                	test   edi,edi
c001dae8:	75 0b                	jne    c001daf5 <__udivdi3+0x45>
c001daea:	b8 01 00 00 00       	mov    eax,0x1
c001daef:	31 d2                	xor    edx,edx
c001daf1:	f7 f7                	div    edi
c001daf3:	89 c1                	mov    ecx,eax
c001daf5:	31 d2                	xor    edx,edx
c001daf7:	89 f0                	mov    eax,esi
c001daf9:	f7 f1                	div    ecx
c001dafb:	89 c3                	mov    ebx,eax
c001dafd:	89 e8                	mov    eax,ebp
c001daff:	f7 f1                	div    ecx
c001db01:	89 da                	mov    edx,ebx
c001db03:	83 c4 1c             	add    esp,0x1c
c001db06:	5b                   	pop    ebx
c001db07:	5e                   	pop    esi
c001db08:	5f                   	pop    edi
c001db09:	5d                   	pop    ebp
c001db0a:	c3                   	ret    
c001db0b:	90                   	nop
c001db0c:	39 f2                	cmp    edx,esi
c001db0e:	77 1c                	ja     c001db2c <__udivdi3+0x7c>
c001db10:	0f bd da             	bsr    ebx,edx
c001db13:	83 f3 1f             	xor    ebx,0x1f
c001db16:	75 24                	jne    c001db3c <__udivdi3+0x8c>
c001db18:	39 f2                	cmp    edx,esi
c001db1a:	72 08                	jb     c001db24 <__udivdi3+0x74>
c001db1c:	39 ef                	cmp    edi,ebp
c001db1e:	0f 87 84 00 00 00    	ja     c001dba8 <__udivdi3+0xf8>
c001db24:	b8 01 00 00 00       	mov    eax,0x1
c001db29:	eb ac                	jmp    c001dad7 <__udivdi3+0x27>
c001db2b:	90                   	nop
c001db2c:	31 db                	xor    ebx,ebx
c001db2e:	31 c0                	xor    eax,eax
c001db30:	89 da                	mov    edx,ebx
c001db32:	83 c4 1c             	add    esp,0x1c
c001db35:	5b                   	pop    ebx
c001db36:	5e                   	pop    esi
c001db37:	5f                   	pop    edi
c001db38:	5d                   	pop    ebp
c001db39:	c3                   	ret    
c001db3a:	66 90                	xchg   ax,ax
c001db3c:	b8 20 00 00 00       	mov    eax,0x20
c001db41:	29 d8                	sub    eax,ebx
c001db43:	88 d9                	mov    cl,bl
c001db45:	d3 e2                	shl    edx,cl
c001db47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db4b:	89 fa                	mov    edx,edi
c001db4d:	88 c1                	mov    cl,al
c001db4f:	d3 ea                	shr    edx,cl
c001db51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db55:	09 d1                	or     ecx,edx
c001db57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001db5b:	88 d9                	mov    cl,bl
c001db5d:	d3 e7                	shl    edi,cl
c001db5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001db63:	89 f7                	mov    edi,esi
c001db65:	88 c1                	mov    cl,al
c001db67:	d3 ef                	shr    edi,cl
c001db69:	88 d9                	mov    cl,bl
c001db6b:	d3 e6                	shl    esi,cl
c001db6d:	89 ea                	mov    edx,ebp
c001db6f:	88 c1                	mov    cl,al
c001db71:	d3 ea                	shr    edx,cl
c001db73:	09 d6                	or     esi,edx
c001db75:	89 f0                	mov    eax,esi
c001db77:	89 fa                	mov    edx,edi
c001db79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001db7d:	89 d7                	mov    edi,edx
c001db7f:	89 c6                	mov    esi,eax
c001db81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001db85:	39 d7                	cmp    edi,edx
c001db87:	72 13                	jb     c001db9c <__udivdi3+0xec>
c001db89:	74 09                	je     c001db94 <__udivdi3+0xe4>
c001db8b:	89 f0                	mov    eax,esi
c001db8d:	31 db                	xor    ebx,ebx
c001db8f:	e9 43 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001db94:	88 d9                	mov    cl,bl
c001db96:	d3 e5                	shl    ebp,cl
c001db98:	39 c5                	cmp    ebp,eax
c001db9a:	73 ef                	jae    c001db8b <__udivdi3+0xdb>
c001db9c:	8d 46 ff             	lea    eax,[esi-0x1]
c001db9f:	31 db                	xor    ebx,ebx
c001dba1:	e9 31 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001dba6:	66 90                	xchg   ax,ax
c001dba8:	31 c0                	xor    eax,eax
c001dbaa:	e9 28 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001dbaf:	90                   	nop

c001dbb0 <__umoddi3>:
c001dbb0:	55                   	push   ebp
c001dbb1:	57                   	push   edi
c001dbb2:	56                   	push   esi
c001dbb3:	53                   	push   ebx
c001dbb4:	83 ec 1c             	sub    esp,0x1c
c001dbb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dbbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dbbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dbc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dbc7:	89 da                	mov    edx,ebx
c001dbc9:	85 c0                	test   eax,eax
c001dbcb:	75 37                	jne    c001dc04 <__umoddi3+0x54>
c001dbcd:	39 df                	cmp    edi,ebx
c001dbcf:	76 13                	jbe    c001dbe4 <__umoddi3+0x34>
c001dbd1:	89 f0                	mov    eax,esi
c001dbd3:	f7 f7                	div    edi
c001dbd5:	89 d0                	mov    eax,edx
c001dbd7:	31 d2                	xor    edx,edx
c001dbd9:	83 c4 1c             	add    esp,0x1c
c001dbdc:	5b                   	pop    ebx
c001dbdd:	5e                   	pop    esi
c001dbde:	5f                   	pop    edi
c001dbdf:	5d                   	pop    ebp
c001dbe0:	c3                   	ret    
c001dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbe4:	89 fd                	mov    ebp,edi
c001dbe6:	85 ff                	test   edi,edi
c001dbe8:	75 0b                	jne    c001dbf5 <__umoddi3+0x45>
c001dbea:	b8 01 00 00 00       	mov    eax,0x1
c001dbef:	31 d2                	xor    edx,edx
c001dbf1:	f7 f7                	div    edi
c001dbf3:	89 c5                	mov    ebp,eax
c001dbf5:	89 d8                	mov    eax,ebx
c001dbf7:	31 d2                	xor    edx,edx
c001dbf9:	f7 f5                	div    ebp
c001dbfb:	89 f0                	mov    eax,esi
c001dbfd:	f7 f5                	div    ebp
c001dbff:	89 d0                	mov    eax,edx
c001dc01:	eb d4                	jmp    c001dbd7 <__umoddi3+0x27>
c001dc03:	90                   	nop
c001dc04:	89 f1                	mov    ecx,esi
c001dc06:	39 d8                	cmp    eax,ebx
c001dc08:	76 0a                	jbe    c001dc14 <__umoddi3+0x64>
c001dc0a:	89 f0                	mov    eax,esi
c001dc0c:	83 c4 1c             	add    esp,0x1c
c001dc0f:	5b                   	pop    ebx
c001dc10:	5e                   	pop    esi
c001dc11:	5f                   	pop    edi
c001dc12:	5d                   	pop    ebp
c001dc13:	c3                   	ret    
c001dc14:	0f bd e8             	bsr    ebp,eax
c001dc17:	83 f5 1f             	xor    ebp,0x1f
c001dc1a:	75 1c                	jne    c001dc38 <__umoddi3+0x88>
c001dc1c:	39 d8                	cmp    eax,ebx
c001dc1e:	72 04                	jb     c001dc24 <__umoddi3+0x74>
c001dc20:	39 f7                	cmp    edi,esi
c001dc22:	77 08                	ja     c001dc2c <__umoddi3+0x7c>
c001dc24:	89 da                	mov    edx,ebx
c001dc26:	29 fe                	sub    esi,edi
c001dc28:	19 c2                	sbb    edx,eax
c001dc2a:	89 f1                	mov    ecx,esi
c001dc2c:	89 c8                	mov    eax,ecx
c001dc2e:	83 c4 1c             	add    esp,0x1c
c001dc31:	5b                   	pop    ebx
c001dc32:	5e                   	pop    esi
c001dc33:	5f                   	pop    edi
c001dc34:	5d                   	pop    ebp
c001dc35:	c3                   	ret    
c001dc36:	66 90                	xchg   ax,ax
c001dc38:	ba 20 00 00 00       	mov    edx,0x20
c001dc3d:	29 ea                	sub    edx,ebp
c001dc3f:	89 e9                	mov    ecx,ebp
c001dc41:	d3 e0                	shl    eax,cl
c001dc43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc47:	89 f8                	mov    eax,edi
c001dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dc4d:	88 d1                	mov    cl,dl
c001dc4f:	d3 e8                	shr    eax,cl
c001dc51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc55:	09 c1                	or     ecx,eax
c001dc57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc5b:	89 e9                	mov    ecx,ebp
c001dc5d:	d3 e7                	shl    edi,cl
c001dc5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dc63:	89 d8                	mov    eax,ebx
c001dc65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc69:	88 d1                	mov    cl,dl
c001dc6b:	d3 e8                	shr    eax,cl
c001dc6d:	89 c7                	mov    edi,eax
c001dc6f:	89 e9                	mov    ecx,ebp
c001dc71:	d3 e3                	shl    ebx,cl
c001dc73:	89 f0                	mov    eax,esi
c001dc75:	88 d1                	mov    cl,dl
c001dc77:	d3 e8                	shr    eax,cl
c001dc79:	09 d8                	or     eax,ebx
c001dc7b:	89 e9                	mov    ecx,ebp
c001dc7d:	d3 e6                	shl    esi,cl
c001dc7f:	89 f3                	mov    ebx,esi
c001dc81:	89 fa                	mov    edx,edi
c001dc83:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001dc87:	89 d1                	mov    ecx,edx
c001dc89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dc8d:	89 c6                	mov    esi,eax
c001dc8f:	89 d7                	mov    edi,edx
c001dc91:	39 d1                	cmp    ecx,edx
c001dc93:	72 27                	jb     c001dcbc <__umoddi3+0x10c>
c001dc95:	74 21                	je     c001dcb8 <__umoddi3+0x108>
c001dc97:	89 ca                	mov    edx,ecx
c001dc99:	29 f3                	sub    ebx,esi
c001dc9b:	19 fa                	sbb    edx,edi
c001dc9d:	89 d0                	mov    eax,edx
c001dc9f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001dca3:	d3 e0                	shl    eax,cl
c001dca5:	89 e9                	mov    ecx,ebp
c001dca7:	d3 eb                	shr    ebx,cl
c001dca9:	09 d8                	or     eax,ebx
c001dcab:	d3 ea                	shr    edx,cl
c001dcad:	83 c4 1c             	add    esp,0x1c
c001dcb0:	5b                   	pop    ebx
c001dcb1:	5e                   	pop    esi
c001dcb2:	5f                   	pop    edi
c001dcb3:	5d                   	pop    ebp
c001dcb4:	c3                   	ret    
c001dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb8:	39 c3                	cmp    ebx,eax
c001dcba:	73 db                	jae    c001dc97 <__umoddi3+0xe7>
c001dcbc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dcc0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001dcc4:	89 d7                	mov    edi,edx
c001dcc6:	89 c6                	mov    esi,eax
c001dcc8:	eb cd                	jmp    c001dc97 <__umoddi3+0xe7>

Disassembly of section .init:

c001dcca <_init>:
c001dcca:	55                   	push   ebp
c001dccb:	89 e5                	mov    ebp,esp
c001dccd:	e8 22 24 fe ff       	call   c00000f4 <frame_dummy>
c001dcd2:	e8 e5 fa ff ff       	call   c001d7bc <__do_global_ctors_aux>
c001dcd7:	5d                   	pop    ebp
c001dcd8:	c3                   	ret    

Disassembly of section .fini:

c001dcd9 <_fini>:
c001dcd9:	55                   	push   ebp
c001dcda:	89 e5                	mov    ebp,esp
c001dcdc:	e8 a3 23 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001dce1:	5d                   	pop    ebp
c001dce2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001dce4 <Computer::~Computer()>:
c001dce4:	83 ec 0c             	sub    esp,0xc
c001dce7:	ba f4 ef 01 c0       	mov    edx,0xc001eff4
c001dcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf0:	89 10                	mov    DWORD PTR [eax],edx
c001dcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf6:	83 ec 0c             	sub    esp,0xc
c001dcf9:	50                   	push   eax
c001dcfa:	e8 3b dc fe ff       	call   c000b93a <Device::~Device()>
c001dcff:	83 c4 10             	add    esp,0x10
c001dd02:	90                   	nop
c001dd03:	83 c4 0c             	add    esp,0xc
c001dd06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001dd08 <Computer::~Computer()>:
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	83 ec 0c             	sub    esp,0xc
c001dd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd12:	e8 cd ff ff ff       	call   c001dce4 <Computer::~Computer()>
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	83 ec 08             	sub    esp,0x8
c001dd1d:	68 70 01 00 00       	push   0x170
c001dd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd26:	e8 d9 c7 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	83 c4 0c             	add    esp,0xc
c001dd31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001dd32 <idleCommon()>:
c001dd32:	83 ec 0c             	sub    esp,0xc
c001dd35:	fa                   	cli    
c001dd36:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001dd3c:	e8 67 6a ff ff       	call   c00147a8 <schedule()>
c001dd41:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001dd46:	48                   	dec    eax
c001dd47:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001dd4c:	75 01                	jne    c001dd4f <idleCommon()+0x1d>
c001dd4e:	fb                   	sti    
c001dd4f:	83 c4 0c             	add    esp,0xc
c001dd52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001dd54 <LinkedList<UnixFile>::~LinkedList()>:
c001dd54:	90                   	nop
c001dd55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001dd56 <LinkedList<UnixFile>::LinkedList()>:
c001dd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd96:	90                   	nop
c001dd97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dda0:	75 10                	jne    c001ddb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	68 08 f2 01 c0       	push   0xc001f208
c001ddaa:	e8 0c 26 ff ff       	call   c00103bb <KePanic(char const*)>
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddb8:	85 c0                	test   eax,eax
c001ddba:	74 34                	je     c001ddf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ddbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddc3:	85 c0                	test   eax,eax
c001ddc5:	74 29                	je     c001ddf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ddc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ddd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dde7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddee:	eb 65                	jmp    c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ddf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf6:	85 c0                	test   eax,eax
c001ddf8:	75 4b                	jne    c001de45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ddfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de01:	85 c0                	test   eax,eax
c001de03:	75 40                	jne    c001de45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001de05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de0d:	89 10                	mov    DWORD PTR [eax],edx
c001de0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001de1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de2f:	85 c0                	test   eax,eax
c001de31:	74 22                	je     c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001de33:	83 ec 0c             	sub    esp,0xc
c001de36:	68 2a f2 01 c0       	push   0xc001f22a
c001de3b:	e8 7b 25 ff ff       	call   c00103bb <KePanic(char const*)>
c001de40:	83 c4 10             	add    esp,0x10
c001de43:	eb 10                	jmp    c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	68 34 f2 01 c0       	push   0xc001f234
c001de4d:	e8 69 25 ff ff       	call   c00103bb <KePanic(char const*)>
c001de52:	83 c4 10             	add    esp,0x10
c001de55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de5c:	8d 50 01             	lea    edx,[eax+0x1]
c001de5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001de66:	90                   	nop
c001de67:	83 c4 0c             	add    esp,0xc
c001de6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001de6c <LinkedList<UnixFile>::getFirstElement()>:
c001de6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de70:	8b 00                	mov    eax,DWORD PTR [eax]
c001de72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001de74 <LinkedList<UnixFile>::removeFirst()>:
c001de74:	83 ec 0c             	sub    esp,0xc
c001de77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de7d:	85 c0                	test   eax,eax
c001de7f:	75 12                	jne    c001de93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	68 40 f2 01 c0       	push   0xc001f240
c001de89:	e8 2d 25 ff ff       	call   c00103bb <KePanic(char const*)>
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	eb 7e                	jmp    c001df11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de9d:	85 c0                	test   eax,eax
c001de9f:	74 10                	je     c001deb1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001dea1:	83 ec 0c             	sub    esp,0xc
c001dea4:	68 8b f2 01 c0       	push   0xc001f28b
c001dea9:	e8 0d 25 ff ff       	call   c00103bb <KePanic(char const*)>
c001deae:	83 c4 10             	add    esp,0x10
c001deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001deb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deba:	85 c0                	test   eax,eax
c001debc:	75 33                	jne    c001def1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001debe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ded3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deda:	83 f8 01             	cmp    eax,0x1
c001dedd:	74 21                	je     c001df00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dedf:	83 ec 0c             	sub    esp,0xc
c001dee2:	68 64 f2 01 c0       	push   0xc001f264
c001dee7:	e8 cf 24 ff ff       	call   c00103bb <KePanic(char const*)>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	eb 0f                	jmp    c001df00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001def1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def5:	8b 00                	mov    eax,DWORD PTR [eax]
c001def7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001defe:	89 10                	mov    DWORD PTR [eax],edx
c001df00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df07:	8d 50 ff             	lea    edx,[eax-0x1]
c001df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001df11:	83 c4 0c             	add    esp,0xc
c001df14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001df16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001df16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001df1e <DriverlessDevice::~DriverlessDevice()>:
c001df1e:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c001df23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df27:	89 10                	mov    DWORD PTR [eax],edx
c001df29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2d:	50                   	push   eax
c001df2e:	e8 07 da fe ff       	call   c000b93a <Device::~Device()>
c001df33:	83 c4 04             	add    esp,0x4
c001df36:	90                   	nop
c001df37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001df38 <DriverlessDevice::~DriverlessDevice()>:
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df42:	e8 d7 ff ff ff       	call   c001df1e <DriverlessDevice::~DriverlessDevice()>
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	83 ec 08             	sub    esp,0x8
c001df4d:	68 58 01 00 00       	push   0x158
c001df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df56:	e8 a9 c5 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001df5b:	83 c4 10             	add    esp,0x10
c001df5e:	83 c4 0c             	add    esp,0xc
c001df61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001df62 <LinkedList<Device>::addElement(Device*)>:
c001df62:	83 ec 0c             	sub    esp,0xc
c001df65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001df6a:	75 10                	jne    c001df7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	68 08 f2 01 c0       	push   0xc001f208
c001df74:	e8 42 24 ff ff       	call   c00103bb <KePanic(char const*)>
c001df79:	83 c4 10             	add    esp,0x10
c001df7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df80:	8b 00                	mov    eax,DWORD PTR [eax]
c001df82:	85 c0                	test   eax,eax
c001df84:	74 3a                	je     c001dfc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df8d:	85 c0                	test   eax,eax
c001df8f:	74 2f                	je     c001dfc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001df91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dfbe:	eb 68                	jmp    c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfc6:	85 c0                	test   eax,eax
c001dfc8:	75 4e                	jne    c001e018 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfd1:	85 c0                	test   eax,eax
c001dfd3:	75 43                	jne    c001e018 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfdd:	89 10                	mov    DWORD PTR [eax],edx
c001dfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfe7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dff1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e002:	85 c0                	test   eax,eax
c001e004:	74 22                	je     c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	68 2a f2 01 c0       	push   0xc001f22a
c001e00e:	e8 a8 23 ff ff       	call   c00103bb <KePanic(char const*)>
c001e013:	83 c4 10             	add    esp,0x10
c001e016:	eb 10                	jmp    c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	68 34 f2 01 c0       	push   0xc001f234
c001e020:	e8 96 23 ff ff       	call   c00103bb <KePanic(char const*)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e02f:	8d 50 01             	lea    edx,[eax+0x1]
c001e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e039:	90                   	nop
c001e03a:	83 c4 0c             	add    esp,0xc
c001e03d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e03e <LinkedList<Device>::LinkedList()>:
c001e03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e042:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e04c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e057:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e077:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e07e:	90                   	nop
c001e07f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e084:	8b 00                	mov    eax,DWORD PTR [eax]
c001e086:	85 c0                	test   eax,eax
c001e088:	75 0e                	jne    c001e098 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e08e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e091:	85 c0                	test   eax,eax
c001e093:	75 03                	jne    c001e098 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e095:	b0 01                	mov    al,0x1
c001e097:	c3                   	ret    
c001e098:	b0 00                	mov    al,0x0
c001e09a:	90                   	nop
c001e09b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e0a4:	83 ec 0c             	sub    esp,0xc
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	75 17                	jne    c001e0c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 40 f2 01 c0       	push   0xc001f240
c001e0b9:	e8 fd 22 ff ff       	call   c00103bb <KePanic(char const*)>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	e9 92 00 00 00       	jmp    c001e158 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e0c6:	66 90                	xchg   ax,ax
c001e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e0d2:	85 c0                	test   eax,eax
c001e0d4:	0f 95 c0             	setne  al
c001e0d7:	84 c0                	test   al,al
c001e0d9:	74 11                	je     c001e0ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e0db:	83 ec 0c             	sub    esp,0xc
c001e0de:	68 8b f2 01 c0       	push   0xc001f28b
c001e0e3:	e8 d3 22 ff ff       	call   c00103bb <KePanic(char const*)>
c001e0e8:	83 c4 10             	add    esp,0x10
c001e0eb:	90                   	nop
c001e0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e0f5:	85 c0                	test   eax,eax
c001e0f7:	0f 94 c0             	sete   al
c001e0fa:	84 c0                	test   al,al
c001e0fc:	74 36                	je     c001e134 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e102:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e117:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e11a:	83 f8 01             	cmp    eax,0x1
c001e11d:	74 25                	je     c001e144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	68 64 f2 01 c0       	push   0xc001f264
c001e127:	e8 8f 22 ff ff       	call   c00103bb <KePanic(char const*)>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	eb 13                	jmp    c001e144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e131:	8d 76 00             	lea    esi,[esi+0x0]
c001e134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e138:	8b 00                	mov    eax,DWORD PTR [eax]
c001e13a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e141:	89 10                	mov    DWORD PTR [eax],edx
c001e143:	90                   	nop
c001e144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e14b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e152:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e155:	8d 76 00             	lea    esi,[esi+0x0]
c001e158:	83 c4 0c             	add    esp,0xc
c001e15b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e164:	75 12                	jne    c001e178 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	68 08 f2 01 c0       	push   0xc001f208
c001e16e:	e8 48 22 ff ff       	call   c00103bb <KePanic(char const*)>
c001e173:	83 c4 10             	add    esp,0x10
c001e176:	66 90                	xchg   ax,ax
c001e178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e17e:	85 c0                	test   eax,eax
c001e180:	74 36                	je     c001e1b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e189:	85 c0                	test   eax,eax
c001e18b:	74 2b                	je     c001e1b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e194:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e198:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e1b4:	eb 6a                	jmp    c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e1b6:	66 90                	xchg   ax,ax
c001e1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1be:	85 c0                	test   eax,eax
c001e1c0:	75 4e                	jne    c001e210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1c9:	85 c0                	test   eax,eax
c001e1cb:	75 43                	jne    c001e210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1d5:	89 10                	mov    DWORD PTR [eax],edx
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1f7:	85 c0                	test   eax,eax
c001e1f9:	74 25                	je     c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	68 2a f2 01 c0       	push   0xc001f22a
c001e203:	e8 b3 21 ff ff       	call   c00103bb <KePanic(char const*)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	eb 13                	jmp    c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e20d:	8d 76 00             	lea    esi,[esi+0x0]
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 34 f2 01 c0       	push   0xc001f234
c001e218:	e8 9e 21 ff ff       	call   c00103bb <KePanic(char const*)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e224:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e227:	8d 50 01             	lea    edx,[eax+0x1]
c001e22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e231:	90                   	nop
c001e232:	83 c4 0c             	add    esp,0xc
c001e235:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e238 <ACPI::~ACPI()>:
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c001e240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e244:	89 10                	mov    DWORD PTR [eax],edx
c001e246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	50                   	push   eax
c001e24e:	e8 e7 d6 fe ff       	call   c000b93a <Device::~Device()>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	90                   	nop
c001e257:	83 c4 0c             	add    esp,0xc
c001e25a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e25c <ACPI::~ACPI()>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	83 ec 0c             	sub    esp,0xc
c001e262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e266:	e8 cd ff ff ff       	call   c001e238 <ACPI::~ACPI()>
c001e26b:	83 c4 10             	add    esp,0x10
c001e26e:	83 ec 08             	sub    esp,0x8
c001e271:	68 64 12 00 00       	push   0x1264
c001e276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e27a:	e8 85 c2 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e288 <LinkedList<Device>::~LinkedList()>:
c001e288:	90                   	nop
c001e289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e28c <LinkedList<Device>::isEmpty()>:
c001e28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e290:	8b 00                	mov    eax,DWORD PTR [eax]
c001e292:	85 c0                	test   eax,eax
c001e294:	75 0e                	jne    c001e2a4 <LinkedList<Device>::isEmpty()+0x18>
c001e296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e29d:	85 c0                	test   eax,eax
c001e29f:	75 03                	jne    c001e2a4 <LinkedList<Device>::isEmpty()+0x18>
c001e2a1:	b0 01                	mov    al,0x1
c001e2a3:	c3                   	ret    
c001e2a4:	b0 00                	mov    al,0x0
c001e2a6:	90                   	nop
c001e2a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e2a8 <LinkedList<Device>::getFirstElement()>:
c001e2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e2b0 <LinkedList<Device>::removeFirst()>:
c001e2b0:	83 ec 0c             	sub    esp,0xc
c001e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b9:	85 c0                	test   eax,eax
c001e2bb:	75 17                	jne    c001e2d4 <LinkedList<Device>::removeFirst()+0x24>
c001e2bd:	83 ec 0c             	sub    esp,0xc
c001e2c0:	68 40 f2 01 c0       	push   0xc001f240
c001e2c5:	e8 f1 20 ff ff       	call   c00103bb <KePanic(char const*)>
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	e9 92 00 00 00       	jmp    c001e364 <LinkedList<Device>::removeFirst()+0xb4>
c001e2d2:	66 90                	xchg   ax,ax
c001e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e2e1:	85 c0                	test   eax,eax
c001e2e3:	74 13                	je     c001e2f8 <LinkedList<Device>::removeFirst()+0x48>
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	68 8b f2 01 c0       	push   0xc001f28b
c001e2ed:	e8 c9 20 ff ff       	call   c00103bb <KePanic(char const*)>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e304:	85 c0                	test   eax,eax
c001e306:	75 34                	jne    c001e33c <LinkedList<Device>::removeFirst()+0x8c>
c001e308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e316:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e31d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e321:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e324:	83 f8 01             	cmp    eax,0x1
c001e327:	74 27                	je     c001e350 <LinkedList<Device>::removeFirst()+0xa0>
c001e329:	83 ec 0c             	sub    esp,0xc
c001e32c:	68 64 f2 01 c0       	push   0xc001f264
c001e331:	e8 85 20 ff ff       	call   c00103bb <KePanic(char const*)>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	eb 15                	jmp    c001e350 <LinkedList<Device>::removeFirst()+0xa0>
c001e33b:	90                   	nop
c001e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e340:	8b 00                	mov    eax,DWORD PTR [eax]
c001e342:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34c:	89 10                	mov    DWORD PTR [eax],edx
c001e34e:	66 90                	xchg   ax,ax
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e357:	8d 50 ff             	lea    edx,[eax-0x1]
c001e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e361:	8d 76 00             	lea    esi,[esi+0x0]
c001e364:	83 c4 0c             	add    esp,0xc
c001e367:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e368 <CPU::~CPU()>:
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	ba 44 00 02 c0       	mov    edx,0xc0020044
c001e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e374:	89 10                	mov    DWORD PTR [eax],edx
c001e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	50                   	push   eax
c001e37e:	e8 b7 d5 fe ff       	call   c000b93a <Device::~Device()>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	90                   	nop
c001e387:	83 c4 0c             	add    esp,0xc
c001e38a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e38c <CPU::~CPU()>:
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	83 ec 0c             	sub    esp,0xc
c001e392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e396:	e8 cd ff ff ff       	call   c001e368 <CPU::~CPU()>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	83 ec 08             	sub    esp,0x8
c001e3a1:	68 94 11 00 00       	push   0x1194
c001e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3aa:	e8 55 c1 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e3af:	83 c4 10             	add    esp,0x10
c001e3b2:	83 c4 0c             	add    esp,0xc
c001e3b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e3b8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e3b8:	90                   	nop
c001e3b9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e3bc <ThreadControlBlock::ThreadControlBlock()>:
c001e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e3c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3cb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3d6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e3dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3e1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e3f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e403:	90                   	nop
c001e404:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e40c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e416:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e421:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e42c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e436:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e43d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e441:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e448:	90                   	nop
c001e449:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e450:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e453:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e454 <PCI::~PCI()>:
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	ba c4 0d 02 c0       	mov    edx,0xc0020dc4
c001e45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e460:	89 10                	mov    DWORD PTR [eax],edx
c001e462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e466:	83 ec 0c             	sub    esp,0xc
c001e469:	50                   	push   eax
c001e46a:	e8 55 cf fe ff       	call   c000b3c4 <Bus::~Bus()>
c001e46f:	83 c4 10             	add    esp,0x10
c001e472:	90                   	nop
c001e473:	83 c4 0c             	add    esp,0xc
c001e476:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e478 <PCI::~PCI()>:
c001e478:	83 ec 0c             	sub    esp,0xc
c001e47b:	83 ec 0c             	sub    esp,0xc
c001e47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e482:	e8 cd ff ff ff       	call   c001e454 <PCI::~PCI()>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	83 ec 08             	sub    esp,0x8
c001e48d:	68 5c 01 00 00       	push   0x15c
c001e492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e496:	e8 69 c0 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	83 c4 0c             	add    esp,0xc
c001e4a1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e4a2 <IDE::~IDE()>:
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	ba 78 0e 02 c0       	mov    edx,0xc0020e78
c001e4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ae:	89 10                	mov    DWORD PTR [eax],edx
c001e4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	50                   	push   eax
c001e4b8:	e8 f7 d8 fe ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	90                   	nop
c001e4c1:	83 c4 0c             	add    esp,0xc
c001e4c4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e4c6 <IDE::~IDE()>:
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4d0:	e8 cd ff ff ff       	call   c001e4a2 <IDE::~IDE()>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	83 ec 08             	sub    esp,0x8
c001e4db:	68 70 02 00 00       	push   0x270
c001e4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4e4:	e8 1b c0 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	83 c4 0c             	add    esp,0xc
c001e4ef:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e4f0 <SATABus::~SATABus()>:
c001e4f0:	83 ec 0c             	sub    esp,0xc
c001e4f3:	ba c8 0e 02 c0       	mov    edx,0xc0020ec8
c001e4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fc:	89 10                	mov    DWORD PTR [eax],edx
c001e4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e502:	83 ec 0c             	sub    esp,0xc
c001e505:	50                   	push   eax
c001e506:	e8 a9 d8 fe ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	90                   	nop
c001e50f:	83 c4 0c             	add    esp,0xc
c001e512:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e514 <SATABus::~SATABus()>:
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e51e:	e8 cd ff ff ff       	call   c001e4f0 <SATABus::~SATABus()>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	83 ec 08             	sub    esp,0x8
c001e529:	68 64 01 00 00       	push   0x164
c001e52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e532:	e8 cd bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e537:	83 c4 10             	add    esp,0x10
c001e53a:	83 c4 0c             	add    esp,0xc
c001e53d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e53e <ATA::~ATA()>:
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	ba 08 0f 02 c0       	mov    edx,0xc0020f08
c001e546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54a:	89 10                	mov    DWORD PTR [eax],edx
c001e54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	50                   	push   eax
c001e554:	e8 3d d9 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	90                   	nop
c001e55d:	83 c4 0c             	add    esp,0xc
c001e560:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e562 <ATA::~ATA()>:
c001e562:	83 ec 0c             	sub    esp,0xc
c001e565:	83 ec 0c             	sub    esp,0xc
c001e568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e56c:	e8 cd ff ff ff       	call   c001e53e <ATA::~ATA()>
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	83 ec 08             	sub    esp,0x8
c001e577:	68 7c 01 00 00       	push   0x17c
c001e57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e580:	e8 7f bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e585:	83 c4 10             	add    esp,0x10
c001e588:	83 c4 0c             	add    esp,0xc
c001e58b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e58c <ATAPI::~ATAPI()>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	ba 50 0f 02 c0       	mov    edx,0xc0020f50
c001e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e598:	89 10                	mov    DWORD PTR [eax],edx
c001e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59e:	83 ec 0c             	sub    esp,0xc
c001e5a1:	50                   	push   eax
c001e5a2:	e8 ef d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	90                   	nop
c001e5ab:	83 c4 0c             	add    esp,0xc
c001e5ae:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e5b0 <ATAPI::~ATAPI()>:
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	83 ec 0c             	sub    esp,0xc
c001e5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5ba:	e8 cd ff ff ff       	call   c001e58c <ATAPI::~ATAPI()>
c001e5bf:	83 c4 10             	add    esp,0x10
c001e5c2:	83 ec 08             	sub    esp,0x8
c001e5c5:	68 84 01 00 00       	push   0x184
c001e5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5ce:	e8 31 bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e5d3:	83 c4 10             	add    esp,0x10
c001e5d6:	83 c4 0c             	add    esp,0xc
c001e5d9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e5da <SATA::~SATA()>:
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	ba 04 10 02 c0       	mov    edx,0xc0021004
c001e5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e6:	89 10                	mov    DWORD PTR [eax],edx
c001e5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ec:	83 ec 0c             	sub    esp,0xc
c001e5ef:	50                   	push   eax
c001e5f0:	e8 a1 d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e5f5:	83 c4 10             	add    esp,0x10
c001e5f8:	90                   	nop
c001e5f9:	83 c4 0c             	add    esp,0xc
c001e5fc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e5fe <SATA::~SATA()>:
c001e5fe:	83 ec 0c             	sub    esp,0xc
c001e601:	83 ec 0c             	sub    esp,0xc
c001e604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e608:	e8 cd ff ff ff       	call   c001e5da <SATA::~SATA()>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	83 ec 08             	sub    esp,0x8
c001e613:	68 7c 01 00 00       	push   0x17c
c001e618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e61c:	e8 e3 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e621:	83 c4 10             	add    esp,0x10
c001e624:	83 c4 0c             	add    esp,0xc
c001e627:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e628 <SATAPI::~SATAPI()>:
c001e628:	83 ec 0c             	sub    esp,0xc
c001e62b:	ba 28 11 02 c0       	mov    edx,0xc0021128
c001e630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e634:	89 10                	mov    DWORD PTR [eax],edx
c001e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	50                   	push   eax
c001e63e:	e8 53 d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e643:	83 c4 10             	add    esp,0x10
c001e646:	90                   	nop
c001e647:	83 c4 0c             	add    esp,0xc
c001e64a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e64c <SATAPI::~SATAPI()>:
c001e64c:	83 ec 0c             	sub    esp,0xc
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e656:	e8 cd ff ff ff       	call   c001e628 <SATAPI::~SATAPI()>
c001e65b:	83 c4 10             	add    esp,0x10
c001e65e:	83 ec 08             	sub    esp,0x8
c001e661:	68 84 01 00 00       	push   0x184
c001e666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e66a:	e8 95 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	83 c4 0c             	add    esp,0xc
c001e675:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e676 <IOAPIC::~IOAPIC()>:
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	ba 68 11 02 c0       	mov    edx,0xc0021168
c001e67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e682:	89 10                	mov    DWORD PTR [eax],edx
c001e684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	50                   	push   eax
c001e68c:	e8 a9 d2 fe ff       	call   c000b93a <Device::~Device()>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	90                   	nop
c001e695:	83 c4 0c             	add    esp,0xc
c001e698:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e69a <IOAPIC::~IOAPIC()>:
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	83 ec 0c             	sub    esp,0xc
c001e6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6a4:	e8 cd ff ff ff       	call   c001e676 <IOAPIC::~IOAPIC()>
c001e6a9:	83 c4 10             	add    esp,0x10
c001e6ac:	83 ec 08             	sub    esp,0x8
c001e6af:	68 68 01 00 00       	push   0x168
c001e6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6b8:	e8 47 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	83 c4 0c             	add    esp,0xc
c001e6c3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e6c4 <APICTimer::~APICTimer()>:
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	ba b0 11 02 c0       	mov    edx,0xc00211b0
c001e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d0:	89 10                	mov    DWORD PTR [eax],edx
c001e6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d6:	83 ec 0c             	sub    esp,0xc
c001e6d9:	50                   	push   eax
c001e6da:	e8 55 ec fe ff       	call   c000d334 <Timer::~Timer()>
c001e6df:	83 c4 10             	add    esp,0x10
c001e6e2:	90                   	nop
c001e6e3:	83 c4 0c             	add    esp,0xc
c001e6e6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e6e8 <APICTimer::~APICTimer()>:
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	83 ec 0c             	sub    esp,0xc
c001e6ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6f2:	e8 cd ff ff ff       	call   c001e6c4 <APICTimer::~APICTimer()>
c001e6f7:	83 c4 10             	add    esp,0x10
c001e6fa:	83 ec 08             	sub    esp,0x8
c001e6fd:	68 60 01 00 00       	push   0x160
c001e702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e706:	e8 f9 bd fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e70b:	83 c4 10             	add    esp,0x10
c001e70e:	83 c4 0c             	add    esp,0xc
c001e711:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e714 <PIT::~PIT()>:
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	ba 00 12 02 c0       	mov    edx,0xc0021200
c001e71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e720:	89 10                	mov    DWORD PTR [eax],edx
c001e722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e726:	83 ec 0c             	sub    esp,0xc
c001e729:	50                   	push   eax
c001e72a:	e8 05 ec fe ff       	call   c000d334 <Timer::~Timer()>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	90                   	nop
c001e733:	83 c4 0c             	add    esp,0xc
c001e736:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e738 <PIT::~PIT()>:
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	83 ec 0c             	sub    esp,0xc
c001e73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e742:	e8 cd ff ff ff       	call   c001e714 <PIT::~PIT()>
c001e747:	83 c4 10             	add    esp,0x10
c001e74a:	83 ec 08             	sub    esp,0x8
c001e74d:	68 5c 01 00 00       	push   0x15c
c001e752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e756:	e8 a9 bd fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 c4 0c             	add    esp,0xc
c001e761:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 35 01 02 c0       	mov    esi,0xc0020135
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 51 01 02 c0       	mov    esi,0xc0020151
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
