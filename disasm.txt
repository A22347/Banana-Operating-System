
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 86 02 00       	call   c0028658 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 92 02 c0       	mov    ebx,0xc0029202
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 92 02 c0    	cmp    ebx,0xc0029210
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d9 02 c0       	mov    eax,0xc002d958
c0000049:	3d 58 d9 02 c0       	cmp    eax,0xc002d958
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d9 02 c0       	push   0xc002d958
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d9 02 c0       	mov    eax,0xc002d958
c0000075:	2d 58 d9 02 c0       	sub    eax,0xc002d958
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d9 02 c0       	push   0xc002d958
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 92 02 c0       	mov    ebx,0xc0029218
c00000bb:	81 eb 14 92 02 c0    	sub    ebx,0xc0029214
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 92 02 c0       	mov    esi,0xc0029214
c00000ca:	a1 8c df 02 c0       	mov    eax,ds:0xc002df8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c df 02 c0       	mov    ds:0xc002df8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c df 02 c0       	mov    eax,ds:0xc002df8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d9 02 c0       	push   0xc002d958
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 df 02 c0 01 	mov    BYTE PTR ds:0xc002df88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 df 02 c0       	push   0xc002df90
c000012c:	68 58 d9 02 c0       	push   0xc002d958
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 05 d6 01 00       	call   c001d9a0 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 89 29 01 00       	call   c0012d3c <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 e3 d5 01 00       	call   c001d9a0 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 31 da 01 00       	call   c001de0d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 df df 01 00       	call   c001e3c4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 e3 02 c0 	lgdtd  ds:0xc002e3d0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 66 46 01 00       	call   c0014c3f <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 df 02 c0       	mov    ds:0xc002dfa8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 df 02 c0    	mov    DWORD PTR ds:0xc002dfa8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfa8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfc0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd203c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd203c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec df 02 c0    	cmp    DWORD PTR ds:0xc002dfec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dffc
c0000e60:	c7 42 0c f4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dff4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc df 02 c0    	mov    DWORD PTR ds:0xc002dffc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec df 02 c0    	mov    DWORD PTR ds:0xc002dfec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 df 02 c0 02 	test   BYTE PTR ds:0xc002dfc0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd203c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd203c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 df 02 c0 	lea    edx,[eax*8-0x3ffd200c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e000
c00011e2:	81 fb f4 df 02 c0    	cmp    ebx,0xc002dff4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 df 02 c0       	cmp    eax,0xc002dff4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 df 02 c0    	cmp    DWORD PTR ds:0xc002dff0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc df 02 c0       	mov    ds:0xc002dffc,eax
c000121e:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c0001223:	a3 f0 df 02 c0       	mov    ds:0xc002dff0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dff4
c0001231:	c7 40 0c f4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dff4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dff4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 df 02 c0 	lea    ebp,[edx*4-0x3ffd2048]
c0001282:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 df 02 c0 	lea    ecx,[edx*4-0x3ffd2040]
c000129d:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d0c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 df 02 c0 	lea    eax,[eax*8-0x3ffd200c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc df 02 c0    	mov    DWORD PTR ds:0xc002dffc,ecx
c0001357:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c000135d:	c7 41 08 f4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dff4
c0001364:	c7 41 0c f4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dff4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec df 02 c0 	lea    edx,[ecx*8-0x3ffd2014]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d0c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d0c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec df 02 c0 	lea    edx,[eax*4-0x3ffd2014]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d0c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc df 02 c0    	mov    DWORD PTR ds:0xc002dffc,edi
c000142a:	89 3d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,edi
c0001430:	c7 47 08 f4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dff4
c0001437:	c7 47 0c f4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dff4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 df 02 c0    	mov    DWORD PTR ds:0xc002dff0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec df 02 c0       	mov    eax,ds:0xc002dfec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec df 02 c0    	mov    DWORD PTR ds:0xc002dfec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 df 02 c0       	mov    edx,0xc002dfc0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfc0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e314
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e314,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 e3 02 c0    	mov    DWORD PTR ds:0xc002e314,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ec df 02 c0    	cmp    DWORD PTR ds:0xc002dfec,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ec df 02 c0    	mov    DWORD PTR ds:0xc002dfec,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d c0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfc0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 1c e3 02 c0    	push   DWORD PTR ds:0xc002e31c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d c0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfc0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 1c e3 02 c0       	mov    eax,ds:0xc002e31c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ec df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfec,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ec df 02 c0       	mov    eax,ds:0xc002dfec
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 c4 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd203c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 f4 df 02 c0       	mov    eax,0xc002dff4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ec e2 02 c0       	cmp    eax,0xc002e2ec
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 28 e3 02 c0       	mov    eax,ds:0xc002e328
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 10 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e310
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 24 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e324
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 34 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e334
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 c0 df 02 c0       	mov    eax,ds:0xc002dfc0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 04 e3 02 c0    	mov    DWORD PTR ds:0xc002e304,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 08 e3 02 c0    	mov    DWORD PTR ds:0xc002e308,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 14 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e314,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 90 f1 01 00       	jmp    c0020dbc <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 c1 f1 01 00       	jmp    c0020e03 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 e9 f1 01 00       	jmp    c0020e4a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 78 4a 02 00       	call   c00269bc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba cc c7 02 c0       	mov    edx,0xc002c7cc
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 60 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ca0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 40 e3 02 c0    	mov    ax,ds:0xc002e340
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 40 e3 02 c0    	mov    ds:0xc002e340,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 75 38 02 00       	call   c00269bc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 40 22 02 00       	call   c00269bc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 60 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ca0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 60 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ca0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 07 0c 02 00       	call   c00269bc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ed 0b 02 00       	call   c00269bc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 60 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ca0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 30 f3 01 00       	call   c00269bc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 94 02 c0       	mov    edx,0xc0029482
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 84 fc 01 00       	call   c002848f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 47 fc 01 00       	call   c0028471 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 1b fc 01 00       	call   c002848f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ce f2 01 00       	call   c0027b94 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 48 fd 01 00       	call   c0028620 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 95 fb 01 00       	call   c002848f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 d7 fa 01 00       	call   c002848f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 a4 fa 01 00       	call   c0028471 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 91 f9 01 00       	call   c002848f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 59 f9 01 00       	call   c0028471 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 65 f7 01 00       	call   c002848f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 2a f7 01 00       	call   c0028471 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 3a f4 01 00       	call   c0028223 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 b8 ed 01 00       	call   c0027bc0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 74 f6 01 00       	call   c0028493 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 62 f7 01 00       	call   c00285b7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 4c ed 01 00       	call   c0027bc0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 f7 f5 01 00       	call   c002848d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 d8 f5 01 00       	call   c0028491 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 66 f7 01 00       	call   c0028640 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 18 f3 01 00       	call   c0028223 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 96 ec 01 00       	call   c0027bc0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 52 f5 01 00       	call   c0028493 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 40 f6 01 00       	call   c00285b7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 2a ec 01 00       	call   c0027bc0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 d5 f4 01 00       	call   c002848d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 b5 f4 01 00       	call   c0028491 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 42 f6 01 00       	call   c0028640 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 f0 f3 01 00       	call   c002848f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ae f3 01 00       	call   c0028471 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 96 f3 01 00       	call   c002848f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 08 f1 01 00       	call   c0028223 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 0a e4 01 00       	call   c0027543 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 6d ea 01 00       	call   c0027bc0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 bf f0 01 00       	call   c0028223 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 c5 e3 01 00       	call   c0027543 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 94 f0 01 00       	call   c0028223 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 e4 f2 01 00       	call   c002848d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 c1 e9 01 00       	call   c0027b94 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 3b f4 01 00       	call   c0028620 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 6a f2 01 00       	call   c0028471 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 65 e9 01 00       	call   c0027b94 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 e3 ef 01 00       	call   c0028223 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 66 e9 01 00       	call   c0027bc0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 b8 ef 01 00       	call   c0028223 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 1f ec 01 00       	call   c0027ea4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 9e e2 01 00       	call   c0027543 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 fe db 01 00       	call   c0026ed8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 d5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 be e8 01 00       	call   c0027bc0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 a5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 17 e2 01 00       	call   c0027543 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 50 f1 01 00       	call   c0028493 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 38 eb 01 00       	call   c0027ea4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 be e1 01 00       	call   c0027543 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 a4 f2 01 00       	call   c0028640 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 7e ee 01 00       	call   c0028223 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 d5 e7 01 00       	call   c0027b94 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 b4 f0 01 00       	call   c002848f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 4d e1 01 00       	call   c0027543 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 79 e7 01 00       	call   c0027b94 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 13 f2 01 00       	call   c0028640 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 cc ed 01 00       	call   c0028223 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 49 e7 01 00       	call   c0027bc0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 9c ed 01 00       	call   c0028223 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 a2 e0 01 00       	call   c0027543 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 72 ed 01 00       	call   c0028223 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 c4 ef 01 00       	call   c002848f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 9b e6 01 00       	call   c0027b94 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 15 f1 01 00       	call   c0028620 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 44 ef 01 00       	call   c0028471 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 3e e6 01 00       	call   c0027b94 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 bc ec 01 00       	call   c0028223 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 3f e6 01 00       	call   c0027bc0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 91 ec 01 00       	call   c0028223 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 f8 e8 01 00       	call   c0027ea4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 77 df 01 00       	call   c0027543 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 c7 d8 01 00       	call   c0026ed8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 9e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 87 e5 01 00       	call   c0027bc0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 6e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 e0 de 01 00       	call   c0027543 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 19 ee 01 00       	call   c0028493 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 00 e8 01 00       	call   c0027ea4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 7f de 01 00       	call   c0027543 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 65 ef 01 00       	call   c0028640 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 3f eb 01 00       	call   c0028223 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 96 e4 01 00       	call   c0027b94 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 75 ed 01 00       	call   c002848f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 0e de 01 00       	call   c0027543 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 3a e4 01 00       	call   c0027b94 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 af ea 01 00       	call   c0028223 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 b5 dd 01 00       	call   c0027543 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 2a e9 01 00       	call   c0028223 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 a8 e2 01 00       	call   c0027bc0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 3a d5 01 00       	call   c0026ed8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 11 ec 01 00       	call   c00285b7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 fa e1 01 00       	call   c0027bc0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 dd eb 01 00       	call   c00285b7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 4f db 01 00       	call   c0027543 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 af eb 01 00       	call   c00285b7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 9e e1 01 00       	call   c0027bc0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 07 db 01 00       	call   c0027543 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 28 d4 01 00       	call   c0026ed8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ff ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 e8 e0 01 00       	call   c0027bc0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 cb ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 3d da 01 00       	call   c0027543 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 9d ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 8c e0 01 00       	call   c0027bc0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 f5 d9 01 00       	call   c0027543 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 d3 d9 01 00       	call   c0027543 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 af d2 01 00       	call   c0026ed8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 86 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 6f df 01 00       	call   c0027bc0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 52 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 c4 d8 01 00       	call   c0027543 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 24 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 0d df 01 00       	call   c0027bc0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 76 d8 01 00       	call   c0027543 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 d6 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 bf de 01 00       	call   c0027bc0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 28 d8 01 00       	call   c0027543 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 3d d1 01 00       	call   c0026ed8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 14 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 fd dd 01 00       	call   c0027bc0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 e4 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 56 d7 01 00       	call   c0027543 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 b6 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 9f dd 01 00       	call   c0027bc0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 08 d7 01 00       	call   c0027543 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 68 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 51 dd 01 00       	call   c0027bc0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ba d6 01 00       	call   c0027543 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 8e d6 01 00       	call   c0027543 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 eb dc 01 00       	call   c0027bc0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 a7 e5 01 00       	call   c0028493 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 36 d6 01 00       	call   c0027543 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 93 dc 01 00       	call   c0027bc0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 4f e5 01 00       	call   c0028493 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 c9 ce 01 00       	call   c0026ed8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 a0 e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 89 db 01 00       	call   c0027bc0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 6c e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 de d4 01 00       	call   c0027543 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 3e e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 27 db 01 00       	call   c0027bc0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 90 d4 01 00       	call   c0027543 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 f0 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 d9 da 01 00       	call   c0027bc0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 42 d4 01 00       	call   c0027543 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 a2 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 8b da 01 00       	call   c0027bc0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 f4 d3 01 00       	call   c0027543 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 54 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 3d da 01 00       	call   c0027bc0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 a6 d3 01 00       	call   c0027543 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 a8 cc 01 00       	call   c0026ed8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 7f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 68 d9 01 00       	call   c0027bc0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 4f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 c1 d2 01 00       	call   c0027543 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 21 e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 0a d9 01 00       	call   c0027bc0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 73 d2 01 00       	call   c0027543 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 d3 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 bc d8 01 00       	call   c0027bc0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 25 d2 01 00       	call   c0027543 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 85 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 6e d8 01 00       	call   c0027bc0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 d7 d1 01 00       	call   c0027543 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 37 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 20 d8 01 00       	call   c0027bc0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 89 d1 01 00       	call   c0027543 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 5d d1 01 00       	call   c0027543 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ba d7 01 00       	call   c0027bc0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 76 e0 01 00       	call   c0028493 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 05 d1 01 00       	call   c0027543 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 62 d7 01 00       	call   c0027bc0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 1e e0 01 00       	call   c0028493 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ac d0 01 00       	call   c0027543 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 09 d7 01 00       	call   c0027bc0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 c5 df 01 00       	call   c0028493 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 53 d0 01 00       	call   c0027543 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 b0 d6 01 00       	call   c0027bc0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 6c df 01 00       	call   c0028493 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ca c8 01 00       	call   c0026ed8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 a1 df 01 00       	call   c00285b7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 8a d5 01 00       	call   c0027bc0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 6d df 01 00       	call   c00285b7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 df ce 01 00       	call   c0027543 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 3f df 01 00       	call   c00285b7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 28 d5 01 00       	call   c0027bc0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 91 ce 01 00       	call   c0027543 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 f1 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 da d4 01 00       	call   c0027bc0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 43 ce 01 00       	call   c0027543 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 a3 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 8c d4 01 00       	call   c0027bc0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 f5 cd 01 00       	call   c0027543 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 55 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 3e d4 01 00       	call   c0027bc0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 a7 cd 01 00       	call   c0027543 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 07 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 f0 d3 01 00       	call   c0027bc0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 56 cd 01 00       	call   c0027543 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 b6 dd 01 00       	call   c00285b7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 9f d3 01 00       	call   c0027bc0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 08 cd 01 00       	call   c0027543 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 02 c6 01 00       	call   c0026ed8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 d9 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 c2 d2 01 00       	call   c0027bc0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 a2 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 14 cc 01 00       	call   c0027543 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 74 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 5d d2 01 00       	call   c0027bc0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 c6 cb 01 00       	call   c0027543 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 26 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 0f d2 01 00       	call   c0027bc0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 78 cb 01 00       	call   c0027543 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 d8 db 01 00       	call   c00285b7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 c1 d1 01 00       	call   c0027bc0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 2a cb 01 00       	call   c0027543 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 8a db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 73 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 dc ca 01 00       	call   c0027543 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 3c db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 25 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 8b ca 01 00       	call   c0027543 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 eb da 01 00       	call   c00285b7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 d4 d0 01 00       	call   c0027bc0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 43 ca 01 00       	call   c0027543 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 1c ca 01 00       	call   c0027543 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 7a d0 01 00       	call   c0027bc0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 36 d9 01 00       	call   c0028493 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 c5 c9 01 00       	call   c0027543 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 23 d0 01 00       	call   c0027bc0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 df d8 01 00       	call   c0028493 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 6d c9 01 00       	call   c0027543 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cb cf 01 00       	call   c0027bc0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 87 d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 15 c9 01 00       	call   c0027543 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 73 cf 01 00       	call   c0027bc0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 2f d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 bd c8 01 00       	call   c0027543 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 1b cf 01 00       	call   c0027bc0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 d7 d7 01 00       	call   c0028493 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 6b c8 01 00       	call   c0027543 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 c9 ce 01 00       	call   c0027bc0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 85 d7 01 00       	call   c0028493 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 99 c0 01 00       	call   c0026ed8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 70 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 59 cd 01 00       	call   c0027bc0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 40 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 b2 c6 01 00       	call   c0027543 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 e6 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 cf cc 01 00       	call   c0027bc0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 3a c6 01 00       	call   c0027543 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 87 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 70 cc 01 00       	call   c0027bc0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 db c5 01 00       	call   c0027543 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 28 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 11 cc 01 00       	call   c0027bc0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 7c c5 01 00       	call   c0027543 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 c9 d5 01 00       	call   c00285b7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 b2 cb 01 00       	call   c0027bc0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 1d c5 01 00       	call   c0027543 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 6a d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 53 cb 01 00       	call   c0027bc0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 be c4 01 00       	call   c0027543 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 0b d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 f4 ca 01 00       	call   c0027bc0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 5f c4 01 00       	call   c0027543 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ac d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 95 ca 01 00       	call   c0027bc0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 00 c4 01 00       	call   c0027543 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 4d d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 36 ca 01 00       	call   c0027bc0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 a1 c3 01 00       	call   c0027543 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 ab bc 01 00       	call   c0026ed8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 82 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 6b c9 01 00       	call   c0027bc0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 52 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 c4 c2 01 00       	call   c0027543 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 f7 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 e0 c8 01 00       	call   c0027bc0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 4b c2 01 00       	call   c0027543 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 97 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 80 c8 01 00       	call   c0027bc0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 eb c1 01 00       	call   c0027543 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 37 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 20 c8 01 00       	call   c0027bc0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 8b c1 01 00       	call   c0027543 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 d7 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 c0 c7 01 00       	call   c0027bc0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 2b c1 01 00       	call   c0027543 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 77 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 60 c7 01 00       	call   c0027bc0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 cb c0 01 00       	call   c0027543 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 17 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 00 c7 01 00       	call   c0027bc0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 6b c0 01 00       	call   c0027543 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 b7 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 a0 c6 01 00       	call   c0027bc0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 0b c0 01 00       	call   c0027543 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 57 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 40 c6 01 00       	call   c0027bc0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 ab bf 01 00       	call   c0027543 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 50 bf 01 00       	call   c0027543 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ad c5 01 00       	call   c0027bc0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 69 ce 01 00       	call   c0028493 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 f3 be 01 00       	call   c0027543 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 50 c5 01 00       	call   c0027bc0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 0c ce 01 00       	call   c0028493 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 96 be 01 00       	call   c0027543 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 f3 c4 01 00       	call   c0027bc0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 af cd 01 00       	call   c0028493 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 39 be 01 00       	call   c0027543 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 96 c4 01 00       	call   c0027bc0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 52 cd 01 00       	call   c0028493 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 dc bd 01 00       	call   c0027543 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 39 c4 01 00       	call   c0027bc0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 f5 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 7f bd 01 00       	call   c0027543 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 dc c3 01 00       	call   c0027bc0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 98 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 22 bd 01 00       	call   c0027543 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 7f c3 01 00       	call   c0027bc0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 3b cc 01 00       	call   c0028493 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 c5 bc 01 00       	call   c0027543 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 22 c3 01 00       	call   c0027bc0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 de cb 01 00       	call   c0028493 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 da c2 01 00       	call   c0027bc0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 4a cd 01 00       	jmp    c0028640 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 bc c9 01 00       	call   c002848f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 7a c9 01 00       	call   c0028471 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 11 c7 01 00       	call   c0028223 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 12 ba 01 00       	call   c0027543 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 e1 c6 01 00       	call   c0028223 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 48 c3 01 00       	call   c0027ea4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 e7 c8 01 00       	call   c0028471 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ea c8 01 00       	call   c002848f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 bd c8 01 00       	call   c002848f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 b6 c2 01 00       	call   c0027ea4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 38 ca 01 00       	call   c0028640 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 13 ca 01 00       	call   c0028640 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ed c5 01 00       	call   c0028223 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 44 bf 01 00       	call   c0027b94 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 23 c8 01 00       	call   c002848f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 bc b8 01 00       	call   c0027543 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 e0 be 01 00       	call   c0027b94 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 7a c9 01 00       	call   c0028640 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ba c1 01 00       	call   c0027ea4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 37 b8 01 00       	call   c0027543 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 63 c4 01 00       	call   c0028223 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 63 b7 01 00       	call   c0027543 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 43 b7 01 00       	call   c0027543 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 13 c4 01 00       	call   c0028223 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 63 c6 01 00       	call   c002848d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 42 bd 01 00       	call   c0027b94 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 bc c7 01 00       	call   c0028620 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 eb c5 01 00       	call   c0028471 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 e9 bc 01 00       	call   c0027b94 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 67 c3 01 00       	call   c0028223 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ea bc 01 00       	call   c0027bc0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 3c c3 01 00       	call   c0028223 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 a3 bf 01 00       	call   c0027ea4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 22 b6 01 00       	call   c0027543 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ec c2 01 00       	call   c0028223 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 38 c5 01 00       	call   c002848f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 2d bc 01 00       	call   c0027bc0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ff bb 01 00       	call   c0027bc0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 38 c2 01 00       	call   c0028223 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 9c be 01 00       	call   c0027ea4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 64 be 01 00       	call   c0027ea4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 e3 b4 01 00       	call   c0027543 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 c8 c5 01 00       	call   c0028640 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 a2 c1 01 00       	call   c0028223 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 f9 ba 01 00       	call   c0027b94 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 d8 c3 01 00       	call   c002848f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 70 b4 01 00       	call   c0027543 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 94 ba 01 00       	call   c0027b94 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 2e c5 01 00       	call   c0028640 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 f7 c2 01 00       	call   c002848f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 b5 c2 01 00       	call   c0028471 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 4c c0 01 00       	call   c0028223 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 4d b3 01 00       	call   c0027543 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 1c c0 01 00       	call   c0028223 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 83 bc 01 00       	call   c0027ea4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 22 c2 01 00       	call   c0028471 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 25 c2 01 00       	call   c002848f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 f8 c1 01 00       	call   c002848f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 f1 bb 01 00       	call   c0027ea4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 73 c3 01 00       	call   c0028640 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 4e c3 01 00       	call   c0028640 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 28 bf 01 00       	call   c0028223 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 7f b8 01 00       	call   c0027b94 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 5e c1 01 00       	call   c002848f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 f7 b1 01 00       	call   c0027543 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 1b b8 01 00       	call   c0027b94 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 b5 c2 01 00       	call   c0028640 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 f5 ba 01 00       	call   c0027ea4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 72 b1 01 00       	call   c0027543 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 9d bd 01 00       	call   c0028223 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 9d b0 01 00       	call   c0027543 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 7d b0 01 00       	call   c0027543 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 4d bd 01 00       	call   c0028223 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 9d bf 01 00       	call   c002848d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 7b b6 01 00       	call   c0027b94 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 f5 c0 01 00       	call   c0028620 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 24 bf 01 00       	call   c0028471 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 21 b6 01 00       	call   c0027b94 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 9f bc 01 00       	call   c0028223 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 22 b6 01 00       	call   c0027bc0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 74 bc 01 00       	call   c0028223 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 db b8 01 00       	call   c0027ea4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 5a af 01 00       	call   c0027543 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 24 bc 01 00       	call   c0028223 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 70 be 01 00       	call   c002848f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 65 b5 01 00       	call   c0027bc0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 37 b5 01 00       	call   c0027bc0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 6e bb 01 00       	call   c0028223 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 d2 b7 01 00       	call   c0027ea4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 9f b7 01 00       	call   c0027ea4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 1e ae 01 00       	call   c0027543 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 03 bf 01 00       	call   c0028640 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 dd ba 01 00       	call   c0028223 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 34 b4 01 00       	call   c0027b94 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 13 bd 01 00       	call   c002848f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 ab ad 01 00       	call   c0027543 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 cf b3 01 00       	call   c0027b94 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 69 be 01 00       	call   c0028640 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 32 bc 01 00       	call   c002848f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 f0 bb 01 00       	call   c0028471 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 87 b9 01 00       	call   c0028223 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 88 ac 01 00       	call   c0027543 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 57 b9 01 00       	call   c0028223 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 be b5 01 00       	call   c0027ea4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 5d bb 01 00       	call   c0028471 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 60 bb 01 00       	call   c002848f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 33 bb 01 00       	call   c002848f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 2c b5 01 00       	call   c0027ea4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ae bc 01 00       	call   c0028640 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 89 bc 01 00       	call   c0028640 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 63 b8 01 00       	call   c0028223 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ba b1 01 00       	call   c0027b94 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 99 ba 01 00       	call   c002848f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 32 ab 01 00       	call   c0027543 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 56 b1 01 00       	call   c0027b94 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 f0 bb 01 00       	call   c0028640 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 30 b4 01 00       	call   c0027ea4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ad aa 01 00       	call   c0027543 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 d8 b6 01 00       	call   c0028223 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 d8 a9 01 00       	call   c0027543 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 b8 a9 01 00       	call   c0027543 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 88 b6 01 00       	call   c0028223 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 d8 b8 01 00       	call   c002848d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 b6 af 01 00       	call   c0027b94 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 30 ba 01 00       	call   c0028620 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 5f b8 01 00       	call   c0028471 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 5c af 01 00       	call   c0027b94 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 da b5 01 00       	call   c0028223 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 5d af 01 00       	call   c0027bc0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 af b5 01 00       	call   c0028223 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 16 b2 01 00       	call   c0027ea4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 95 a8 01 00       	call   c0027543 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 5f b5 01 00       	call   c0028223 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 ab b7 01 00       	call   c002848f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 a0 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 72 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 a9 b4 01 00       	call   c0028223 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 0d b1 01 00       	call   c0027ea4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 da b0 01 00       	call   c0027ea4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 59 a7 01 00       	call   c0027543 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 3e b8 01 00       	call   c0028640 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 18 b4 01 00       	call   c0028223 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 6f ad 01 00       	call   c0027b94 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 4e b6 01 00       	call   c002848f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 e6 a6 01 00       	call   c0027543 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 0a ad 01 00       	call   c0027b94 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 a4 b7 01 00       	call   c0028640 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 6d b5 01 00       	call   c002848f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 2b b5 01 00       	call   c0028471 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 c2 b2 01 00       	call   c0028223 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 c3 a5 01 00       	call   c0027543 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 92 b2 01 00       	call   c0028223 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 f9 ae 01 00       	call   c0027ea4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 98 b4 01 00       	call   c0028471 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 9b b4 01 00       	call   c002848f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 6e b4 01 00       	call   c002848f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 67 ae 01 00       	call   c0027ea4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 e9 b5 01 00       	call   c0028640 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 c4 b5 01 00       	call   c0028640 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 9e b1 01 00       	call   c0028223 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 f5 aa 01 00       	call   c0027b94 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 d4 b3 01 00       	call   c002848f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 6d a4 01 00       	call   c0027543 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 91 aa 01 00       	call   c0027b94 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 2b b5 01 00       	call   c0028640 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 6b ad 01 00       	call   c0027ea4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 e8 a3 01 00       	call   c0027543 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 13 b0 01 00       	call   c0028223 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 13 a3 01 00       	call   c0027543 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 f3 a2 01 00       	call   c0027543 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 c3 af 01 00       	call   c0028223 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 13 b2 01 00       	call   c002848d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 f1 a8 01 00       	call   c0027b94 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 6b b3 01 00       	call   c0028620 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 9a b1 01 00       	call   c0028471 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 97 a8 01 00       	call   c0027b94 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 15 af 01 00       	call   c0028223 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 98 a8 01 00       	call   c0027bc0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ea ae 01 00       	call   c0028223 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 51 ab 01 00       	call   c0027ea4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 d0 a1 01 00       	call   c0027543 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 9a ae 01 00       	call   c0028223 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 e6 b0 01 00       	call   c002848f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 db a7 01 00       	call   c0027bc0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ad a7 01 00       	call   c0027bc0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 e4 ad 01 00       	call   c0028223 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 48 aa 01 00       	call   c0027ea4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 15 aa 01 00       	call   c0027ea4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 94 a0 01 00       	call   c0027543 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 79 b1 01 00       	call   c0028640 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 53 ad 01 00       	call   c0028223 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 aa a6 01 00       	call   c0027b94 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 89 af 01 00       	call   c002848f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 21 a0 01 00       	call   c0027543 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 45 a6 01 00       	call   c0027b94 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 df b0 01 00       	call   c0028640 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 a5 ae 01 00       	call   c002848f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 63 ae 01 00       	call   c0028471 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 fa ab 01 00       	call   c0028223 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 fb 9e 01 00       	call   c0027543 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ca ab 01 00       	call   c0028223 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 31 a8 01 00       	call   c0027ea4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 d0 ad 01 00       	call   c0028471 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 d3 ad 01 00       	call   c002848f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 a6 ad 01 00       	call   c002848f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 9f a7 01 00       	call   c0027ea4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 21 af 01 00       	call   c0028640 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 f8 ae 01 00       	call   c0028640 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 d2 aa 01 00       	call   c0028223 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 29 a4 01 00       	call   c0027b94 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 08 ad 01 00       	call   c002848f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 a1 9d 01 00       	call   c0027543 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 c9 a3 01 00       	call   c0027b94 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 63 ae 01 00       	call   c0028640 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 a4 a6 01 00       	call   c0027ea4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 21 9d 01 00       	call   c0027543 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 4d a9 01 00       	call   c0028223 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 4d 9c 01 00       	call   c0027543 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 2d 9c 01 00       	call   c0027543 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 fd a8 01 00       	call   c0028223 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 31 ab 01 00       	call   c0028471 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 28 a2 01 00       	call   c0027b94 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 a2 ac 01 00       	call   c0028620 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 d1 aa 01 00       	call   c0028471 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 cb a1 01 00       	call   c0027b94 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 49 a8 01 00       	call   c0028223 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 cc a1 01 00       	call   c0027bc0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 1e a8 01 00       	call   c0028223 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 85 a4 01 00       	call   c0027ea4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 04 9b 01 00       	call   c0027543 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ce a7 01 00       	call   c0028223 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 1a aa 01 00       	call   c002848f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 0f a1 01 00       	call   c0027bc0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 e1 a0 01 00       	call   c0027bc0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 25 a7 01 00       	call   c0028223 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 8c a3 01 00       	call   c0027ea4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 75 a0 01 00       	call   c0027bc0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 31 a9 01 00       	call   c0028493 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 24 a3 01 00       	call   c0027ea4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 a3 99 01 00       	call   c0027543 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 88 aa 01 00       	call   c0028640 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 62 a6 01 00       	call   c0028223 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 b9 9f 01 00       	call   c0027b94 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 98 a8 01 00       	call   c002848f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 30 99 01 00       	call   c0027543 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 58 9f 01 00       	call   c0027b94 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 f2 a9 01 00       	call   c0028640 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ad a6 01 00       	call   c002848f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 6b a6 01 00       	call   c0028471 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 57 a6 01 00       	call   c002848f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 c9 a3 01 00       	call   c0028223 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 47 9d 01 00       	call   c0027bc0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 99 a3 01 00       	call   c0028223 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 9f 96 01 00       	call   c0027543 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 6e a3 01 00       	call   c0028223 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 be a5 01 00       	call   c002848d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 9f 9c 01 00       	call   c0027b94 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 19 a7 01 00       	call   c0028620 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 48 a5 01 00       	call   c0028471 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 47 9c 01 00       	call   c0027b94 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 c5 a2 01 00       	call   c0028223 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 48 9c 01 00       	call   c0027bc0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 9a a2 01 00       	call   c0028223 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 01 9f 01 00       	call   c0027ea4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 80 95 01 00       	call   c0027543 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 a8 9e 01 00       	call   c0027ea4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 2e 95 01 00       	call   c0027543 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 14 a6 01 00       	call   c0028640 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ee a1 01 00       	call   c0028223 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 45 9b 01 00       	call   c0027b94 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 24 a4 01 00       	call   c002848f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 bd 94 01 00       	call   c0027543 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 e9 9a 01 00       	call   c0027b94 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 83 a5 01 00       	call   c0028640 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 38 a1 01 00       	call   c0028223 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 b5 9a 01 00       	call   c0027bc0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 06 a1 01 00       	call   c0028223 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 0c 94 01 00       	call   c0027543 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 dc a0 01 00       	call   c0028223 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 30 a3 01 00       	call   c0028491 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 09 9a 01 00       	call   c0027b94 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 83 a4 01 00       	call   c0028620 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 b2 a2 01 00       	call   c0028471 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 b0 99 01 00       	call   c0027b94 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 2e a0 01 00       	call   c0028223 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 b1 99 01 00       	call   c0027bc0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 03 a0 01 00       	call   c0028223 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 6a 9c 01 00       	call   c0027ea4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 e9 92 01 00       	call   c0027543 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 05 9c 01 00       	call   c0027ea4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 84 92 01 00       	call   c0027543 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 6a a3 01 00       	call   c0028640 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 44 9f 01 00       	call   c0028223 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 9b 98 01 00       	call   c0027b94 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 7a a1 01 00       	call   c002848f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 13 92 01 00       	call   c0027543 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 3f 98 01 00       	call   c0027b94 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 b0 9e 01 00       	call   c0028223 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 b6 91 01 00       	call   c0027543 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9f 02 c0       	push   0xc0029f86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 c8 e3 02 c0       	mov    eax,0xc002e3c8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 bc 69 02 c0       	mov    eax,0xc00269bc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9f 02 c0       	push   0xc0029f99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 f0 66 02 c0       	mov    eax,0xc00266f0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 bc 6a 02 c0       	mov    eax,0xc0026abc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9f 02 c0       	push   0xc0029fac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 3c 68 02 c0       	mov    eax,0xc002683c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 cc e3 02 c0       	mov    eax,0xc002e3cc
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 cd e3 02 c0       	mov    eax,0xc002e3cd
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 d7 5e 00 00       	call   c00144fa <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c000e668:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 99 f5 00 00       	call   c001dc0e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 82 f8 00 00       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 6a e7 01 c0       	push   0xc001e76a
c000e693:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c000e699:	e8 6e f8 00 00       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c000e6a6:	c6 05 cd e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3cd,0x1
c000e6ad:	e8 39 04 01 00       	call   c001eaeb <Vm::initialise8086()>
c000e6b2:	e8 2b 4c 00 00       	call   c00132e2 <Fs::initVFS()>
c000e6b7:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 cb de 00 00       	call   c001c59e <Sys::loadSyscalls()>
c000e6d3:	e8 ee bd 00 00       	call   c001a4c6 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6e2:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6e7:	e8 00 cb 00 00       	call   c001b1ec <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 d6 56 00 00       	call   c0013dca <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 c9 5d 00 00       	call   c00144ce <Device::loadDriversForAll()>
c000e705:	e8 02 b9 00 00       	call   c001a00c <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9f 02 c0       	push   0xc0029fed
c000e719:	e8 14 f0 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 3f f2 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 3c fb 00 00       	call   c001e270 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a0 02 c0       	push   0xc002a009
c000e749:	50                   	push   eax
c000e74a:	e8 25 5e 00 00       	call   c0014574 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 e1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3e1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 a3 7d 01 00       	call   c0026686 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 00 a4 00 00       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 d9 a3 00 00       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 b7 a3 00 00       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 95 a3 00 00       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 e0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3e0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 a3 a2 00 00       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 7e a2 00 00       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 0d 7c 01 00       	call   c0026640 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ca 7b 01 00       	call   c0026620 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 9a a2 00 00       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a0 02 c0       	push   0xc002a019
c000eaaf:	e8 aa 44 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a0 02 c0       	push   0xc002a02c
c000ead2:	e8 87 44 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a0 02 c0       	push   0xc002a03d
c000eaf5:	e8 64 44 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a0 02 c0       	push   0xc002a04e
c000eb18:	e8 41 44 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a0 02 c0       	push   0xc002a05f
c000eb3b:	e8 1e 44 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a0 02 c0       	push   0xc002a070
c000eb5e:	e8 fb 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a0 02 c0       	push   0xc002a081
c000eb81:	e8 d8 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a0 02 c0       	push   0xc002a092
c000eba4:	e8 b5 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebc7:	e8 92 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebea:	e8 6f 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec0d:	e8 4c 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec30:	e8 29 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec53:	e8 06 43 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec76:	e8 e3 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a1 02 c0       	push   0xc002a109
c000ec99:	e8 c0 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a1 02 c0       	push   0xc002a11a
c000ecbc:	e8 9d 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a1 02 c0       	push   0xc002a12b
c000ecdf:	e8 7a 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a1 02 c0       	push   0xc002a13c
c000ed02:	e8 57 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a1 02 c0       	push   0xc002a14d
c000ed21:	e8 38 42 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 b0 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bab0
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 27 42 00 00       	jmp    c0012f5e <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a1 02 c0       	push   0xc002a15e
c000ee0a:	e8 f0 b7 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a1 02 c0       	push   0xc002a164
c000ee42:	e8 b8 b7 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 e0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3e0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 04 d3 02 c0 	sete   BYTE PTR ds:0xc002d304
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 39 93 00 00       	call   c00181ee <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 c0 54 00 00       	call   c0014384 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 e2 9e 00 00       	call   c0018dd6 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 81 54 00 00       	call   c0014384 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 eb 59 00 00       	call   c001490a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 51 54 00 00       	call   c0014384 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 b7 f0 00 00       	call   c001e00c <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a1 02 c0       	push   0xc002a16a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 bb 3f 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a1 02 c0       	push   0xc002a17b
c000efc0:	e8 3a b6 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a1 02 c0       	push   0xc002a188
c000efd5:	e8 25 b6 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 0e b6 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a1 02 c0       	push   0xc002a1cc
c000f086:	e8 d3 3e 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 d2 e3 02 c0       	mov    ds:0xc002e3d2,eax
c000f0c7:	66 89 15 d0 e3 02 c0 	mov    WORD PTR ds:0xc002e3d0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 fe eb 00 00       	call   c001dddc <unlockScheduler()>
c000f1de:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 94 94 01 00       	call   c00286c0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 8b 94 01 00       	call   c00286c0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 d8 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e3d8,0x7ff
c000f323:	a3 da e3 02 c0       	mov    ds:0xc002e3da,eax
c000f328:	0f 01 1d d8 e3 02 c0 	lidtd  ds:0xc002e3d8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 2b 28 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5c 2e 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 98 1e 00 00       	call   c00114d6 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c9 1e 00 00       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d e0 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2e0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 e0 d2 02 c0       	mov    eax,ds:0xc002d2e0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6f4:	e8 65 38 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 e0 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d2e0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 21 27 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d e0 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2e0
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 0c 00 00       	push   0xc01
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 43 2c 00 00       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d e0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2e0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a2 02 c0       	push   0xc002a218
c000f7ad:	e8 4d ae 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a2 02 c0       	push   0xc002a21d
c000f7c3:	e8 37 ae 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 01 e6 00 00       	call   c001ddda <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 f2 e5 00 00       	call   c001dddc <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 45 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 6f 2c 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 27 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 12 29 00 00       	call   c0012138 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 00 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d300
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 b5 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 77 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 0e 0d 00 00       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 00 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d300
c000fb49:	80 3d 60 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e460,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 00 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d300,0x8000
c000fba3:	c6 05 60 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e460,0x1
c000fbaa:	c7 05 98 e4 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e498,0xc000fa16
c000fbb4:	c7 05 84 e4 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e484,0xc000f89d
c000fbbe:	c7 05 80 e4 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e480,0xc000f8e8
c000fbc8:	c7 05 8c e4 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e48c,0xc000fa5c
c000fbd2:	c7 05 94 e4 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e494,0xc000f966
c000fbdc:	c7 05 88 e4 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e488,0xc000f9c4
c000fbe6:	c7 05 90 e4 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e490,0xc000f9c5
c000fbf0:	c7 05 9c e4 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e49c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 10             	sub    esp,0x10
c000fc08:	e8 f5 09 00 00       	call   c0010602 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 24 a2 02 c0       	push   0xc002a224
c000fc4d:	e8 0c 33 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 54 04 00 00       	call   c00100bd <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 f6 20 00 00       	call   c0011d64 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 b1 ba 02 c0       	push   0xc002bab1
c000fc95:	e8 65 a9 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d e0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e0,ebx
c000fca6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 c6 22 00 00       	call   c0011f76 <VAS::VAS()>
c000fcb0:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fcc2:	e8 97 32 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 17 21 00 00       	call   c0011de3 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 58 a2 02 c0       	push   0xc002a258
c000fcf0:	e8 69 32 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 01 25 00 00       	call   c0012210 <VAS::~VAS()>
c000fd0f:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fd16:	e8 e4 a8 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000fd1b:	83 c4 20             	add    esp,0x20
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba 20 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1be0],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be 20 e4 02 c0       	mov    esi,0xc002e420
c000fd8c:	8d 90 20 e4 02 c0    	lea    edx,[eax-0x3ffd1be0]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 20 e4 02 c0    	lea    eax,[edx-0x3ffd1be0]
c000fdf2:	8d 94 11 20 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1be0]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 e4 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2e4
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 e4 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2e4
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 e4 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2e4
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 10 e4 02 c0       	mov    eax,ds:0xc002e410
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 10 e4 02 c0       	mov    ds:0xc002e410,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d 14 e4 02 c0    	idiv   DWORD PTR ds:0xc002e414
c000fe94:	39 05 0c e4 02 c0    	cmp    DWORD PTR ds:0xc002e40c,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 0c e4 02 c0       	mov    ds:0xc002e40c,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 d9 0a 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 1a a7 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 14             	sub    esp,0x14
c000feea:	8b 35 04 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e404
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x19>
c000fef4:	89 1d 04 e4 02 c0    	mov    DWORD PTR ds:0xc002e404,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x3d>
c000fefe:	53                   	push   ebx
c000feff:	e8 3b ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x82>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0xf>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 04 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e404,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x19>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 9c a2 02 c0       	push   0xc002a29c
c000ff2a:	e8 2f 30 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e7 fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 ac 00 00 00    	jne    c000fff2 <Phys::allocatePage()+0x10d>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 ad a2 02 c0       	push   0xc002a2ad
c000ff4e:	e8 ac a6 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d 04 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e404
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 dd fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x24>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9e fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 10 e4 02 c0       	mov    eax,ds:0xc002e410
c000ff74:	59                   	pop    ecx
c000ff75:	40                   	inc    eax
c000ff76:	5b                   	pop    ebx
c000ff77:	a3 10 e4 02 c0       	mov    ds:0xc002e410,eax
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff82:	c1 e0 02             	shl    eax,0x2
c000ff85:	99                   	cdq    
c000ff86:	f7 3d 14 e4 02 c0    	idiv   DWORD PTR ds:0xc002e414
c000ff8c:	39 05 0c e4 02 c0    	cmp    DWORD PTR ds:0xc002e40c,eax
c000ff92:	75 64                	jne    c000fff8 <Phys::allocatePage()+0x113>
c000ff94:	83 f8 32             	cmp    eax,0x32
c000ff97:	7e 51                	jle    c000ffea <Phys::allocatePage()+0x105>
c000ff99:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000ffa0:	75 48                	jne    c000ffea <Phys::allocatePage()+0x105>
c000ffa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa7:	85 c0                	test   eax,eax
c000ffa9:	74 22                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 1b                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffb2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb8:	85 c0                	test   eax,eax
c000ffba:	74 11                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffbc:	52                   	push   edx
c000ffbd:	68 c8 00 00 00       	push   0xc8
c000ffc2:	6a 04                	push   0x4
c000ffc4:	50                   	push   eax
c000ffc5:	e8 74 2b 00 00       	call   c0012b3e <VAS::scanForEviction(int, int)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	a1 10 e4 02 c0       	mov    eax,ds:0xc002e410
c000ffd2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd8:	c1 e0 02             	shl    eax,0x2
c000ffdb:	99                   	cdq    
c000ffdc:	f7 3d 14 e4 02 c0    	idiv   DWORD PTR ds:0xc002e414
c000ffe2:	39 05 0c e4 02 c0    	cmp    DWORD PTR ds:0xc002e40c,eax
c000ffe8:	75 2e                	jne    c0010018 <Phys::allocatePage()+0x133>
c000ffea:	a1 04 e4 02 c0       	mov    eax,ds:0xc002e404
c000ffef:	c1 e0 0c             	shl    eax,0xc
c000fff2:	83 c4 14             	add    esp,0x14
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	c3                   	ret    
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	a3 0c e4 02 c0       	mov    ds:0xc002e40c,eax
c0010000:	50                   	push   eax
c0010001:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010005:	e8 8c 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010011:	83 f8 32             	cmp    eax,0x32
c0010014:	7e d4                	jle    c000ffea <Phys::allocatePage()+0x105>
c0010016:	eb 81                	jmp    c000ff99 <Phys::allocatePage()+0xb4>
c0010018:	83 ec 0c             	sub    esp,0xc
c001001b:	a3 0c e4 02 c0       	mov    ds:0xc002e40c,eax
c0010020:	50                   	push   eax
c0010021:	e8 70 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	eb bf                	jmp    c000ffea <Phys::allocatePage()+0x105>

c001002b <Phys::allocateContiguousPages(int)>:
c001002b:	57                   	push   edi
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	31 db                	xor    ebx,ebx
c0010030:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010034:	e8 a1 dd 00 00       	call   c001ddda <lockScheduler()>
c0010039:	85 db                	test   ebx,ebx
c001003b:	75 11                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001003d:	e8 a3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010042:	83 ff 01             	cmp    edi,0x1
c0010045:	89 c6                	mov    esi,eax
c0010047:	74 21                	je     c001006a <Phys::allocateContiguousPages(int)+0x3f>
c0010049:	bb 01 00 00 00       	mov    ebx,0x1
c001004e:	e8 92 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010053:	89 da                	mov    edx,ebx
c0010055:	c1 e2 0c             	shl    edx,0xc
c0010058:	01 f2                	add    edx,esi
c001005a:	39 c2                	cmp    edx,eax
c001005c:	74 17                	je     c0010075 <Phys::allocateContiguousPages(int)+0x4a>
c001005e:	bb 01 00 00 00       	mov    ebx,0x1
c0010063:	89 c6                	mov    esi,eax
c0010065:	83 ff 01             	cmp    edi,0x1
c0010068:	75 e4                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001006a:	e8 6d dd 00 00       	call   c001dddc <unlockScheduler()>
c001006f:	89 f0                	mov    eax,esi
c0010071:	5b                   	pop    ebx
c0010072:	5e                   	pop    esi
c0010073:	5f                   	pop    edi
c0010074:	c3                   	ret    
c0010075:	43                   	inc    ebx
c0010076:	39 fb                	cmp    ebx,edi
c0010078:	75 bf                	jne    c0010039 <Phys::allocateContiguousPages(int)+0xe>
c001007a:	e8 5d dd 00 00       	call   c001dddc <unlockScheduler()>
c001007f:	89 f0                	mov    eax,esi
c0010081:	5b                   	pop    ebx
c0010082:	5e                   	pop    esi
c0010083:	5f                   	pop    edi
c0010084:	c3                   	ret    

c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010085:	56                   	push   esi
c0010086:	53                   	push   ebx
c0010087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008b:	39 1d 08 e4 02 c0    	cmp    DWORD PTR ds:0xc002e408,ebx
c0010091:	73 06                	jae    c0010099 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010093:	89 1d 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,ebx
c0010099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009d:	c1 eb 0c             	shr    ebx,0xc
c00100a0:	c1 e8 0c             	shr    eax,0xc
c00100a3:	39 d8                	cmp    eax,ebx
c00100a5:	73 13                	jae    c00100ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a7:	6a 00                	push   0x0
c00100a9:	8d 70 01             	lea    esi,[eax+0x1]
c00100ac:	50                   	push   eax
c00100ad:	e8 5b fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100b2:	5a                   	pop    edx
c00100b3:	89 f0                	mov    eax,esi
c00100b5:	59                   	pop    ecx
c00100b6:	39 f3                	cmp    ebx,esi
c00100b8:	75 ed                	jne    c00100a7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100ba:	5b                   	pop    ebx
c00100bb:	5e                   	pop    esi
c00100bc:	c3                   	ret    

c00100bd <Phys::physicalMemorySetup(unsigned int)>:
c00100bd:	55                   	push   ebp
c00100be:	57                   	push   edi
c00100bf:	56                   	push   esi
c00100c0:	53                   	push   ebx
c00100c1:	31 db                	xor    ebx,ebx
c00100c3:	83 ec 40             	sub    esp,0x40
c00100c6:	6a 30                	push   0x30
c00100c8:	6a 00                	push   0x0
c00100ca:	68 20 e4 02 c0       	push   0xc002e420
c00100cf:	e8 a4 06 ff ff       	call   c0000778 <memset>
c00100d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100dd:	05 00 10 00 00       	add    eax,0x1000
c00100e2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	83 ec 08             	sub    esp,0x8
c00100ec:	6a 01                	push   0x1
c00100ee:	53                   	push   ebx
c00100ef:	43                   	inc    ebx
c00100f0:	e8 18 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100fe:	75 e9                	jne    c00100e9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010100:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010107:	66 85 c0             	test   ax,ax
c001010a:	0f 84 8e 01 00 00    	je     c001029e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010114:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001011c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010120:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010129:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010131:	eb 15                	jmp    c0010148 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010133:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010137:	83 c3 18             	add    ebx,0x18
c001013a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010142:	0f 84 66 01 00 00    	je     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010148:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001014b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001014e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010151:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010155:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010159:	8b 33                	mov    esi,DWORD PTR [ebx]
c001015b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001015e:	01 f0                	add    eax,esi
c0010160:	55                   	push   ebp
c0010161:	11 fa                	adc    edx,edi
c0010163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010167:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001016b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001016f:	56                   	push   esi
c0010170:	68 e8 a2 02 c0       	push   0xc002a2e8
c0010175:	e8 e4 2d 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001017a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	09 f8                	or     eax,edi
c0010183:	0f 85 25 01 00 00    	jne    c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010189:	4d                   	dec    ebp
c001018a:	75 a7                	jne    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018c:	ba 00 00 08 00       	mov    edx,0x80000
c0010191:	89 c1                	mov    ecx,eax
c0010193:	39 f2                	cmp    edx,esi
c0010195:	19 f9                	sbb    ecx,edi
c0010197:	0f 82 a7 00 00 00    	jb     c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101a1:	89 c1                	mov    ecx,eax
c00101a3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a7:	0f 83 97 00 00 00    	jae    c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ad:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	19 e8                	sbb    eax,ebp
c00101be:	0f 82 14 01 00 00    	jb     c00102d8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101cc:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101d2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d7:	83 d5 ff             	adc    ebp,0xffffffff
c00101da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101de:	31 c0                	xor    eax,eax
c00101e0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e4:	39 fa                	cmp    edx,edi
c00101e6:	89 c1                	mov    ecx,eax
c00101e8:	19 e9                	sbb    ecx,ebp
c00101ea:	0f 83 43 ff ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f0:	be 00 00 08 00       	mov    esi,0x80000
c00101f5:	50                   	push   eax
c00101f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101fa:	57                   	push   edi
c00101fb:	56                   	push   esi
c00101fc:	68 0c a3 02 c0       	push   0xc002a30c
c0010201:	e8 58 2d 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0010206:	5a                   	pop    edx
c0010207:	59                   	pop    ecx
c0010208:	57                   	push   edi
c0010209:	56                   	push   esi
c001020a:	e8 76 fe ff ff       	call   c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001020f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010217:	83 c4 0c             	add    esp,0xc
c001021a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001021e:	03 05 14 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e414
c0010224:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001022b:	a3 14 e4 02 c0       	mov    ds:0xc002e414,eax
c0010230:	52                   	push   edx
c0010231:	50                   	push   eax
c0010232:	68 c9 a2 02 c0       	push   0xc002a2c9
c0010237:	e8 22 2d 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	e9 ef fe ff ff       	jmp    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010244:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010250:	39 ea                	cmp    edx,ebp
c0010252:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010256:	0f 82 d7 fe ff ff    	jb     c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010261:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010265:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010269:	0f 83 c4 fe ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026f:	39 ee                	cmp    esi,ebp
c0010271:	89 f8                	mov    eax,edi
c0010273:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010277:	0f 83 78 ff ff ff    	jae    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010285:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010289:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010295:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010299:	e9 57 ff ff ff       	jmp    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	68 bb a2 02 c0       	push   0xc002a2bb
c00102a6:	e8 54 a3 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	bb 40 01 00 00       	mov    ebx,0x140
c00102b3:	83 ec 08             	sub    esp,0x8
c00102b6:	6a 00                	push   0x0
c00102b8:	53                   	push   ebx
c00102b9:	43                   	inc    ebx
c00102ba:	e8 4e fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00102bf:	ff 05 14 e4 02 c0    	inc    DWORD PTR ds:0xc002e414
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102ce:	75 e3                	jne    c00102b3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102d0:	83 c4 3c             	add    esp,0x3c
c00102d3:	5b                   	pop    ebx
c00102d4:	5e                   	pop    esi
c00102d5:	5f                   	pop    edi
c00102d6:	5d                   	pop    ebp
c00102d7:	c3                   	ret    
c00102d8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e8:	e9 d7 fe ff ff       	jmp    c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102ed:	90                   	nop

c00102ee <Pipe::isAtty()>:
c00102ee:	31 c0                	xor    eax,eax
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::~Pipe()>:
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	89 10                	mov    DWORD PTR [eax],edx
c0010300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010304:	83 ec 0c             	sub    esp,0xc
c0010307:	50                   	push   eax
c0010308:	e8 37 16 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	90                   	nop
c0010311:	83 c4 0c             	add    esp,0xc
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <Pipe::~Pipe()>:
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	83 ec 0c             	sub    esp,0xc
c001031c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010320:	e8 cd ff ff ff       	call   c00102f2 <Pipe::~Pipe()>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	6a 20                	push   0x20
c001032d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010331:	e8 48 2b 00 00       	call   c0012e7e <operator delete(void*, unsigned long)>
c0010336:	83 c4 10             	add    esp,0x10
c0010339:	83 c4 0c             	add    esp,0xc
c001033c:	c3                   	ret    
c001033d:	90                   	nop

c001033e <Pipe::read(unsigned long long, void*, int*)>:
c001033e:	55                   	push   ebp
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	53                   	push   ebx
c0010342:	83 ec 1c             	sub    esp,0x1c
c0010345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010354:	89 c8                	mov    eax,ecx
c0010356:	99                   	cdq    
c0010357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001035b:	74 19                	je     c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035d:	39 f9                	cmp    ecx,edi
c001035f:	89 d1                	mov    ecx,edx
c0010361:	19 f1                	sbb    ecx,esi
c0010363:	73 11                	jae    c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010365:	e8 70 da 00 00       	call   c001ddda <lockScheduler()>
c001036a:	e8 a7 dd 00 00       	call   c001e116 <schedule()>
c001036f:	e8 68 da 00 00       	call   c001dddc <unlockScheduler()>
c0010374:	eb db                	jmp    c0010351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010376:	39 f8                	cmp    eax,edi
c0010378:	89 d1                	mov    ecx,edx
c001037a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001037e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010382:	19 f1                	sbb    ecx,esi
c0010384:	73 08                	jae    c001038e <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010386:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001038a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001038e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010391:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010394:	29 c6                	sub    esi,eax
c0010396:	89 f1                	mov    ecx,esi
c0010398:	c1 f9 1f             	sar    ecx,0x1f
c001039b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001039f:	89 ca                	mov    edx,ecx
c00103a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a5:	19 d1                	sbb    ecx,edx
c00103a7:	73 04                	jae    c00103ad <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103ad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103b1:	89 fd                	mov    ebp,edi
c00103b3:	29 f5                	sub    ebp,esi
c00103b5:	85 f6                	test   esi,esi
c00103b7:	74 12                	je     c00103cb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b9:	52                   	push   edx
c00103ba:	56                   	push   esi
c00103bb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103be:	50                   	push   eax
c00103bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103c3:	e8 7c 03 ff ff       	call   c0000744 <memcpy>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	85 ed                	test   ebp,ebp
c00103cd:	74 12                	je     c00103e1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103cf:	50                   	push   eax
c00103d0:	55                   	push   ebp
c00103d1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103d4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d8:	56                   	push   esi
c00103d9:	e8 66 03 ff ff       	call   c0000744 <memcpy>
c00103de:	83 c4 10             	add    esp,0x10
c00103e1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ea:	99                   	cdq    
c00103eb:	89 f7                	mov    edi,esi
c00103ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103f5:	c1 ff 1f             	sar    edi,0x1f
c00103f8:	57                   	push   edi
c00103f9:	56                   	push   esi
c00103fa:	52                   	push   edx
c00103fb:	50                   	push   eax
c00103fc:	e8 bb 66 01 00       	call   c0026abc <__umoddi3>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010407:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040c:	75 10                	jne    c001041e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	68 35 a3 02 c0       	push   0xc002a335
c0010416:	e8 e4 a1 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010426:	89 10                	mov    DWORD PTR [eax],edx
c0010428:	83 c4 1c             	add    esp,0x1c
c001042b:	31 c0                	xor    eax,eax
c001042d:	5b                   	pop    ebx
c001042e:	5e                   	pop    esi
c001042f:	5f                   	pop    edi
c0010430:	5d                   	pop    ebp
c0010431:	c3                   	ret    

c0010432 <Pipe::write(unsigned long long, void*, int*)>:
c0010432:	55                   	push   ebp
c0010433:	57                   	push   edi
c0010434:	56                   	push   esi
c0010435:	53                   	push   ebx
c0010436:	83 ec 1c             	sub    esp,0x1c
c0010439:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001043d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010441:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010445:	89 04 24             	mov    DWORD PTR [esp],eax
c0010448:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001044b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001044e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010452:	89 de                	mov    esi,ebx
c0010454:	89 df                	mov    edi,ebx
c0010456:	c1 ff 1f             	sar    edi,0x1f
c0010459:	01 c6                	add    esi,eax
c001045b:	89 c8                	mov    eax,ecx
c001045d:	11 d7                	adc    edi,edx
c001045f:	99                   	cdq    
c0010460:	39 f1                	cmp    ecx,esi
c0010462:	89 d0                	mov    eax,edx
c0010464:	19 f8                	sbb    eax,edi
c0010466:	b8 01 00 00 00       	mov    eax,0x1
c001046b:	0f 82 80 00 00 00    	jb     c00104f1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010471:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010474:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010477:	01 d8                	add    eax,ebx
c0010479:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001047d:	99                   	cdq    
c001047e:	f7 f9                	idiv   ecx
c0010480:	29 d1                	sub    ecx,edx
c0010482:	89 d7                	mov    edi,edx
c0010484:	89 c8                	mov    eax,ecx
c0010486:	99                   	cdq    
c0010487:	39 ce                	cmp    esi,ecx
c0010489:	19 d3                	sbb    ebx,edx
c001048b:	bb 00 00 00 00       	mov    ebx,0x0
c0010490:	72 04                	jb     c0010496 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010492:	89 f3                	mov    ebx,esi
c0010494:	29 cb                	sub    ebx,ecx
c0010496:	89 f1                	mov    ecx,esi
c0010498:	29 d9                	sub    ecx,ebx
c001049a:	74 1a                	je     c00104b6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001049c:	52                   	push   edx
c001049d:	51                   	push   ecx
c001049e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a9:	57                   	push   edi
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b6:	85 db                	test   ebx,ebx
c00104b8:	74 12                	je     c00104cc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ba:	50                   	push   eax
c00104bb:	53                   	push   ebx
c00104bc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104c0:	51                   	push   ecx
c00104c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104c4:	e8 7b 02 ff ff       	call   c0000744 <memcpy>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104cf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d4:	75 10                	jne    c00104e6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	68 51 a3 02 c0       	push   0xc002a351
c00104de:	e8 1c a1 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00104e3:	83 c4 10             	add    esp,0x10
c00104e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104ed:	89 38                	mov    DWORD PTR [eax],edi
c00104ef:	31 c0                	xor    eax,eax
c00104f1:	83 c4 1c             	add    esp,0x1c
c00104f4:	5b                   	pop    ebx
c00104f5:	5e                   	pop    esi
c00104f6:	5f                   	pop    edi
c00104f7:	5d                   	pop    ebp
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <Pipe::Pipe(int)>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010501:	83 ec 08             	sub    esp,0x8
c0010504:	6a 00                	push   0x0
c0010506:	50                   	push   eax
c0010507:	e8 56 12 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010522:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010529:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001053b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053f:	83 ec 0c             	sub    esp,0xc
c0010542:	50                   	push   eax
c0010543:	e8 fb f2 ff ff       	call   c000f843 <malloc>
c0010548:	83 c4 10             	add    esp,0x10
c001054b:	89 c2                	mov    edx,eax
c001054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010551:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001055c:	90                   	nop
c001055d:	83 c4 0c             	add    esp,0xc
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <VgaText::isAtty()>:
c0010562:	b0 01                	mov    al,0x1
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::~VgaText()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	89 10                	mov    DWORD PTR [eax],edx
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	50                   	push   eax
c001057c:	e8 c3 13 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	90                   	nop
c0010585:	83 c4 0c             	add    esp,0xc
c0010588:	c3                   	ret    
c0010589:	90                   	nop

c001058a <VgaText::~VgaText()>:
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 cd ff ff ff       	call   c0010566 <VgaText::~VgaText()>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	83 ec 08             	sub    esp,0x8
c001059f:	68 60 12 00 00       	push   0x1260
c00105a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a8:	e8 d1 28 00 00       	call   c0012e7e <operator delete(void*, unsigned long)>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	83 c4 0c             	add    esp,0xc
c00105b3:	c3                   	ret    

c00105b4 <VgaText::read(unsigned long long, void*, int*)>:
c00105b4:	83 ec 10             	sub    esp,0x10
c00105b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c3:	e8 38 5d 00 00       	call   c0016300 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105cc:	89 02                	mov    DWORD PTR [edx],eax
c00105ce:	31 c0                	xor    eax,eax
c00105d0:	83 c4 1c             	add    esp,0x1c
c00105d3:	c3                   	ret    

c00105d4 <setTerminalScrollLock(bool)>:
c00105d4:	c3                   	ret    

c00105d5 <addToTerminalCycle(VgaText*)>:
c00105d5:	8b 15 a0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a0
c00105db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105df:	85 d2                	test   edx,edx
c00105e1:	75 0c                	jne    c00105ef <addToTerminalCycle(VgaText*)+0x1a>
c00105e3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e9:	a3 a0 e4 02 c0       	mov    ds:0xc002e4a0,eax
c00105ee:	c3                   	ret    
c00105ef:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105f5:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105fb:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010601:	c3                   	ret    

c0010602 <installVgaTextImplementation()>:
c0010602:	83 ec 10             	sub    esp,0x10
c0010605:	6a 20                	push   0x20
c0010607:	6a 00                	push   0x0
c0010609:	68 80 e4 02 c0       	push   0xc002e480
c001060e:	e8 65 01 ff ff       	call   c0000778 <memset>
c0010613:	83 c4 1c             	add    esp,0x1c
c0010616:	c3                   	ret    

c0010617 <scrollTerminalScrollLock(int)>:
c0010617:	c3                   	ret    

c0010618 <VgaText::load()>:
c0010618:	53                   	push   ebx
c0010619:	31 c0                	xor    eax,eax
c001061b:	83 ec 58             	sub    esp,0x58
c001061e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010622:	89 e2                	mov    edx,esp
c0010624:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010628:	40                   	inc    eax
c0010629:	83 f8 50             	cmp    eax,0x50
c001062c:	75 f6                	jne    c0010624 <VgaText::load()+0xc>
c001062e:	31 c0                	xor    eax,eax
c0010630:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010637:	84 c9                	test   cl,cl
c0010639:	74 06                	je     c0010641 <VgaText::load()+0x29>
c001063b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063e:	40                   	inc    eax
c001063f:	eb ef                	jmp    c0010630 <VgaText::load()+0x18>
c0010641:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010647:	85 c0                	test   eax,eax
c0010649:	74 09                	je     c0010654 <VgaText::load()+0x3c>
c001064b:	51                   	push   ecx
c001064c:	51                   	push   ecx
c001064d:	52                   	push   edx
c001064e:	53                   	push   ebx
c001064f:	ff d0                	call   eax
c0010651:	83 c4 10             	add    esp,0x10
c0010654:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 09                	je     c0010667 <VgaText::load()+0x4f>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	83 c4 58             	add    esp,0x58
c001066a:	5b                   	pop    ebx
c001066b:	c3                   	ret    

c001066c <VgaText::updateCursor()>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	39 05 a4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a4,eax
c0010676:	75 0c                	jne    c0010684 <VgaText::updateCursor()+0x18>
c0010678:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001067e:	85 c0                	test   eax,eax
c0010680:	74 02                	je     c0010684 <VgaText::updateCursor()+0x18>
c0010682:	ff e0                	jmp    eax
c0010684:	c3                   	ret    
c0010685:	90                   	nop

c0010686 <VgaText::showCursor(bool)>:
c0010686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001068e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010694:	c3                   	ret    
c0010695:	90                   	nop

c0010696 <VgaText::disableBlink(bool)>:
c0010696:	56                   	push   esi
c0010697:	53                   	push   ebx
c0010698:	51                   	push   ecx
c0010699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106a1:	39 1d a4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a4,ebx
c00106a7:	75 18                	jne    c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106a9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 0e                	je     c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106b3:	89 f1                	mov    ecx,esi
c00106b5:	52                   	push   edx
c00106b6:	52                   	push   edx
c00106b7:	0f b6 d1             	movzx  edx,cl
c00106ba:	52                   	push   edx
c00106bb:	53                   	push   ebx
c00106bc:	ff d0                	call   eax
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	89 f0                	mov    eax,esi
c00106c3:	83 f0 01             	xor    eax,0x1
c00106c6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106cc:	58                   	pop    eax
c00106cd:	5b                   	pop    ebx
c00106ce:	5e                   	pop    esi
c00106cf:	c3                   	ret    

c00106d0 <VgaText::doANSI_SGR(int)>:
c00106d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d8:	85 d2                	test   edx,edx
c00106da:	75 14                	jne    c00106f0 <VgaText::doANSI_SGR(int)+0x20>
c00106dc:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106e2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ee:	eb 65                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c00106f0:	83 fa 07             	cmp    edx,0x7
c00106f3:	75 14                	jne    c0010709 <VgaText::doANSI_SGR(int)+0x39>
c00106f5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106fb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010701:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010707:	eb 4c                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010709:	83 fa 1b             	cmp    edx,0x1b
c001070c:	74 ce                	je     c00106dc <VgaText::doANSI_SGR(int)+0xc>
c001070e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010711:	83 f9 07             	cmp    ecx,0x7
c0010714:	77 09                	ja     c001071f <VgaText::doANSI_SGR(int)+0x4f>
c0010716:	8b 14 8d 20 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ce0]
c001071d:	eb 20                	jmp    c001073f <VgaText::doANSI_SGR(int)+0x6f>
c001071f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010722:	83 f9 07             	cmp    ecx,0x7
c0010725:	77 09                	ja     c0010730 <VgaText::doANSI_SGR(int)+0x60>
c0010727:	8b 14 8d 20 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ce0]
c001072e:	eb 25                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010730:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010733:	83 f9 07             	cmp    ecx,0x7
c0010736:	77 0e                	ja     c0010746 <VgaText::doANSI_SGR(int)+0x76>
c0010738:	8b 14 95 d8 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e28]
c001073f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010745:	c3                   	ret    
c0010746:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010749:	83 f9 07             	cmp    ecx,0x7
c001074c:	77 0d                	ja     c001075b <VgaText::doANSI_SGR(int)+0x8b>
c001074e:	8b 14 95 b0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e50]
c0010755:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001075b:	c3                   	ret    

c001075c <VgaText::setDefaultBgColour(VgaColour)>:
c001075c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010764:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001076a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010770:	c3                   	ret    
c0010771:	90                   	nop

c0010772 <VgaText::setDefaultFgColour(VgaColour)>:
c0010772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001077a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010780:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010786:	c3                   	ret    
c0010787:	90                   	nop

c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010788:	53                   	push   ebx
c0010789:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001078d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010791:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010795:	51                   	push   ecx
c0010796:	e8 c1 ff ff ff       	call   c001075c <VgaText::setDefaultBgColour(VgaColour)>
c001079b:	58                   	pop    eax
c001079c:	5a                   	pop    edx
c001079d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a5:	5b                   	pop    ebx
c00107a6:	eb ca                	jmp    c0010772 <VgaText::setDefaultFgColour(VgaColour)>

c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107b1:	83 e0 0f             	and    eax,0xf
c00107b4:	c1 e2 04             	shl    edx,0x4
c00107b7:	09 d0                	or     eax,edx
c00107b9:	c3                   	ret    

c00107ba <VgaText::scrollScreen()>:
c00107ba:	57                   	push   edi
c00107bb:	56                   	push   esi
c00107bc:	be 01 00 00 00       	mov    esi,0x1
c00107c1:	53                   	push   ebx
c00107c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107cc:	31 ff                	xor    edi,edi
c00107ce:	01 d9                	add    ecx,ebx
c00107d0:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107d3:	83 fe 17             	cmp    esi,0x17
c00107d6:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107dc:	75 28                	jne    c0010806 <VgaText::scrollScreen()+0x4c>
c00107de:	f7 c7 01 00 00 00    	test   edi,0x1
c00107e4:	74 1c                	je     c0010802 <VgaText::scrollScreen()+0x48>
c00107e6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107ed:	50                   	push   eax
c00107ee:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107f5:	50                   	push   eax
c00107f6:	e8 ad ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00107fb:	5a                   	pop    edx
c00107fc:	5a                   	pop    edx
c00107fd:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010800:	eb 04                	jmp    c0010806 <VgaText::scrollScreen()+0x4c>
c0010802:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010806:	47                   	inc    edi
c0010807:	41                   	inc    ecx
c0010808:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001080e:	75 c0                	jne    c00107d0 <VgaText::scrollScreen()+0x16>
c0010810:	46                   	inc    esi
c0010811:	83 fe 18             	cmp    esi,0x18
c0010814:	75 b0                	jne    c00107c6 <VgaText::scrollScreen()+0xc>
c0010816:	39 1d a4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a4,ebx
c001081c:	75 24                	jne    c0010842 <VgaText::scrollScreen()+0x88>
c001081e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010825:	74 08                	je     c001082f <VgaText::scrollScreen()+0x75>
c0010827:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001082d:	eb 13                	jmp    c0010842 <VgaText::scrollScreen()+0x88>
c001082f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010835:	85 c0                	test   eax,eax
c0010837:	74 09                	je     c0010842 <VgaText::scrollScreen()+0x88>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	53                   	push   ebx
c001083d:	ff d0                	call   eax
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010846:	5b                   	pop    ebx
c0010847:	5e                   	pop    esi
c0010848:	5f                   	pop    edi
c0010849:	e9 1e fe ff ff       	jmp    c001066c <VgaText::updateCursor()>

c001084e <VgaText::combineCharAndColour(char, unsigned char)>:
c001084e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010853:	c1 e0 08             	shl    eax,0x8
c0010856:	89 c2                	mov    edx,eax
c0010858:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001085d:	09 d0                	or     eax,edx
c001085f:	c3                   	ret    

c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010873:	50                   	push   eax
c0010874:	e8 2f ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010879:	5a                   	pop    edx
c001087a:	0f b6 c0             	movzx  eax,al
c001087d:	5b                   	pop    ebx
c001087e:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010883:	50                   	push   eax
c0010884:	53                   	push   ebx
c0010885:	e8 c4 ff ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c001088a:	5a                   	pop    edx
c001088b:	5a                   	pop    edx
c001088c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010892:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010896:	0f b7 d2             	movzx  edx,dx
c0010899:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001089e:	39 0d a4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a4,ecx
c00108a4:	75 14                	jne    c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108ac:	85 c0                	test   eax,eax
c00108ae:	74 0a                	je     c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108b0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	ff e0                	jmp    eax
c00108ba:	83 c4 08             	add    esp,0x8
c00108bd:	5b                   	pop    ebx
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::getCursorX()>:
c00108c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::getCursorY()>:
c00108cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d0:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::setCursor(int, int)>:
c00108d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108e0:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108ea:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108f0:	e9 77 fd ff ff       	jmp    c001066c <VgaText::updateCursor()>
c00108f5:	90                   	nop

c00108f6 <VgaText::setCursorX(int)>:
c00108f6:	83 ec 10             	sub    esp,0x10
c00108f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108fd:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010907:	50                   	push   eax
c0010908:	e8 cb ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001090d:	83 c4 1c             	add    esp,0x1c
c0010910:	c3                   	ret    
c0010911:	90                   	nop

c0010912 <VgaText::setCursorY(int)>:
c0010912:	83 ec 10             	sub    esp,0x10
c0010915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001091d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010923:	50                   	push   eax
c0010924:	e8 af ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010929:	83 c4 1c             	add    esp,0x1c
c001092c:	c3                   	ret    
c001092d:	90                   	nop

c001092e <VgaText::incrementCursor(bool)>:
c001092e:	56                   	push   esi
c001092f:	53                   	push   ebx
c0010930:	51                   	push   ecx
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010939:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001093f:	40                   	inc    eax
c0010940:	83 f8 50             	cmp    eax,0x50
c0010943:	74 08                	je     c001094d <VgaText::incrementCursor(bool)+0x1f>
c0010945:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001094b:	eb 33                	jmp    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001094d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010953:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001095d:	8d 50 01             	lea    edx,[eax+0x1]
c0010960:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010966:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001096c:	75 12                	jne    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010977:	53                   	push   ebx
c0010978:	e8 3d fe ff ff       	call   c00107ba <VgaText::scrollScreen()>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	89 f0                	mov    eax,esi
c0010982:	84 c0                	test   al,al
c0010984:	74 0c                	je     c0010992 <VgaText::incrementCursor(bool)+0x64>
c0010986:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001098a:	5a                   	pop    edx
c001098b:	5b                   	pop    ebx
c001098c:	5e                   	pop    esi
c001098d:	e9 da fc ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010992:	58                   	pop    eax
c0010993:	5b                   	pop    ebx
c0010994:	5e                   	pop    esi
c0010995:	c3                   	ret    

c0010996 <VgaText::updateRAMUsageDisplay(int)>:
c0010996:	56                   	push   esi
c0010997:	8b 35 00 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d300
c001099d:	53                   	push   ebx
c001099e:	bb 0a 00 00 00       	mov    ebx,0xa
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 fc fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	59                   	pop    ecx
c00109ae:	0f b6 c8             	movzx  ecx,al
c00109b1:	51                   	push   ecx
c00109b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b6:	99                   	cdq    
c00109b7:	f7 fb                	idiv   ebx
c00109b9:	89 d3                	mov    ebx,edx
c00109bb:	83 c0 30             	add    eax,0x30
c00109be:	83 c3 30             	add    ebx,0x30
c00109c1:	0f be c0             	movsx  eax,al
c00109c4:	0f b6 db             	movzx  ebx,bl
c00109c7:	50                   	push   eax
c00109c8:	e8 81 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5a                   	pop    edx
c00109ce:	5a                   	pop    edx
c00109cf:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d6:	51                   	push   ecx
c00109d7:	53                   	push   ebx
c00109d8:	e8 71 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5b                   	pop    ebx
c00109de:	5a                   	pop    edx
c00109df:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e6:	51                   	push   ecx
c00109e7:	6a 25                	push   0x25
c00109e9:	e8 60 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109ee:	59                   	pop    ecx
c00109ef:	5b                   	pop    ebx
c00109f0:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f7:	5b                   	pop    ebx
c00109f8:	5e                   	pop    esi
c00109f9:	c3                   	ret    

c00109fa <VgaText::updateDiskUsage()>:
c00109fa:	55                   	push   ebp
c00109fb:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a00:	57                   	push   edi
c0010a01:	8b 3d 00 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d300
c0010a07:	56                   	push   esi
c0010a08:	53                   	push   ebx
c0010a09:	6a 0f                	push   0xf
c0010a0b:	6a 00                	push   0x0
c0010a0d:	e8 96 fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a12:	5a                   	pop    edx
c0010a13:	0f b6 d8             	movzx  ebx,al
c0010a16:	59                   	pop    ecx
c0010a17:	8b 35 48 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032748
c0010a1d:	53                   	push   ebx
c0010a1e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a23:	89 f0                	mov    eax,esi
c0010a25:	99                   	cdq    
c0010a26:	f7 fd                	idiv   ebp
c0010a28:	99                   	cdq    
c0010a29:	f7 f9                	idiv   ecx
c0010a2b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2e:	0f b6 c0             	movzx  eax,al
c0010a31:	50                   	push   eax
c0010a32:	e8 17 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a37:	5d                   	pop    ebp
c0010a38:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a3d:	5a                   	pop    edx
c0010a3e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a42:	53                   	push   ebx
c0010a43:	89 f0                	mov    eax,esi
c0010a45:	99                   	cdq    
c0010a46:	f7 fd                	idiv   ebp
c0010a48:	99                   	cdq    
c0010a49:	f7 f9                	idiv   ecx
c0010a4b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4e:	0f b6 c0             	movzx  eax,al
c0010a51:	50                   	push   eax
c0010a52:	e8 f7 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a57:	5d                   	pop    ebp
c0010a58:	bd 64 00 00 00       	mov    ebp,0x64
c0010a5d:	5a                   	pop    edx
c0010a5e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a65:	53                   	push   ebx
c0010a66:	89 f0                	mov    eax,esi
c0010a68:	99                   	cdq    
c0010a69:	f7 fd                	idiv   ebp
c0010a6b:	99                   	cdq    
c0010a6c:	f7 f9                	idiv   ecx
c0010a6e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a71:	0f b6 c0             	movzx  eax,al
c0010a74:	50                   	push   eax
c0010a75:	e8 d4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7a:	5d                   	pop    ebp
c0010a7b:	5a                   	pop    edx
c0010a7c:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a83:	53                   	push   ebx
c0010a84:	89 f0                	mov    eax,esi
c0010a86:	99                   	cdq    
c0010a87:	f7 f9                	idiv   ecx
c0010a89:	89 d6                	mov    esi,edx
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 b4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5d                   	pop    ebp
c0010a9b:	5a                   	pop    edx
c0010a9c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010aa3:	53                   	push   ebx
c0010aa4:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa7:	0f b6 f0             	movzx  esi,al
c0010aaa:	56                   	push   esi
c0010aab:	e8 9e fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab0:	5e                   	pop    esi
c0010ab1:	8b 35 44 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032744
c0010ab7:	5d                   	pop    ebp
c0010ab8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010abf:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ac4:	53                   	push   ebx
c0010ac5:	89 f0                	mov    eax,esi
c0010ac7:	99                   	cdq    
c0010ac8:	f7 fd                	idiv   ebp
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 75 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	5d                   	pop    ebp
c0010adb:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ae2:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae7:	53                   	push   ebx
c0010ae8:	89 f0                	mov    eax,esi
c0010aea:	99                   	cdq    
c0010aeb:	f7 fd                	idiv   ebp
c0010aed:	99                   	cdq    
c0010aee:	f7 f9                	idiv   ecx
c0010af0:	8d 42 30             	lea    eax,[edx+0x30]
c0010af3:	0f b6 c0             	movzx  eax,al
c0010af6:	50                   	push   eax
c0010af7:	e8 52 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010afc:	5a                   	pop    edx
c0010afd:	5d                   	pop    ebp
c0010afe:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b05:	bd 64 00 00 00       	mov    ebp,0x64
c0010b0a:	53                   	push   ebx
c0010b0b:	89 f0                	mov    eax,esi
c0010b0d:	99                   	cdq    
c0010b0e:	f7 fd                	idiv   ebp
c0010b10:	99                   	cdq    
c0010b11:	f7 f9                	idiv   ecx
c0010b13:	83 c2 30             	add    edx,0x30
c0010b16:	0f b6 d2             	movzx  edx,dl
c0010b19:	52                   	push   edx
c0010b1a:	e8 2f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1f:	5a                   	pop    edx
c0010b20:	5d                   	pop    ebp
c0010b21:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b28:	53                   	push   ebx
c0010b29:	89 f0                	mov    eax,esi
c0010b2b:	99                   	cdq    
c0010b2c:	f7 f9                	idiv   ecx
c0010b2e:	89 d6                	mov    esi,edx
c0010b30:	99                   	cdq    
c0010b31:	f7 f9                	idiv   ecx
c0010b33:	8d 42 30             	lea    eax,[edx+0x30]
c0010b36:	0f b6 c0             	movzx  eax,al
c0010b39:	50                   	push   eax
c0010b3a:	e8 0f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3f:	5a                   	pop    edx
c0010b40:	59                   	pop    ecx
c0010b41:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b48:	53                   	push   ebx
c0010b49:	8d 46 30             	lea    eax,[esi+0x30]
c0010b4c:	0f b6 f0             	movzx  esi,al
c0010b4f:	56                   	push   esi
c0010b50:	e8 f9 fc ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b55:	5b                   	pop    ebx
c0010b56:	5e                   	pop    esi
c0010b57:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b5e:	5b                   	pop    ebx
c0010b5f:	5e                   	pop    esi
c0010b60:	5f                   	pop    edi
c0010b61:	5d                   	pop    ebp
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <VgaText::updateTitle()>:
c0010b64:	53                   	push   ebx
c0010b65:	31 c0                	xor    eax,eax
c0010b67:	83 ec 58             	sub    esp,0x58
c0010b6a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b6e:	89 e1                	mov    ecx,esp
c0010b70:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b74:	40                   	inc    eax
c0010b75:	83 f8 50             	cmp    eax,0x50
c0010b78:	75 f6                	jne    c0010b70 <VgaText::updateTitle()+0xc>
c0010b7a:	31 c0                	xor    eax,eax
c0010b7c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b83:	84 db                	test   bl,bl
c0010b85:	74 06                	je     c0010b8d <VgaText::updateTitle()+0x29>
c0010b87:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b8a:	40                   	inc    eax
c0010b8b:	eb ef                	jmp    c0010b7c <VgaText::updateTitle()+0x18>
c0010b8d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b93:	85 c0                	test   eax,eax
c0010b95:	74 09                	je     c0010ba0 <VgaText::updateTitle()+0x3c>
c0010b97:	53                   	push   ebx
c0010b98:	53                   	push   ebx
c0010b99:	51                   	push   ecx
c0010b9a:	52                   	push   edx
c0010b9b:	ff d0                	call   eax
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	e8 55 fe ff ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0010ba5:	83 c4 58             	add    esp,0x58
c0010ba8:	5b                   	pop    ebx
c0010ba9:	c3                   	ret    

c0010baa <VgaText::setTitleTextColour(VgaColour)>:
c0010baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb8:	eb aa                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bba <VgaText::setTitleColour(VgaColour)>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bc2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc8:	eb 9a                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bca <VgaText::setTitle(char*)>:
c0010bca:	53                   	push   ebx
c0010bcb:	83 ec 10             	sub    esp,0x10
c0010bce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bdc:	50                   	push   eax
c0010bdd:	e8 52 fc fe ff       	call   c0000834 <strcpy>
c0010be2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be6:	83 c4 18             	add    esp,0x18
c0010be9:	5b                   	pop    ebx
c0010bea:	e9 75 ff ff ff       	jmp    c0010b64 <VgaText::updateTitle()>
c0010bef:	90                   	nop

c0010bf0 <VgaText::decrementCursor(bool)>:
c0010bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bfe:	85 c0                	test   eax,eax
c0010c00:	74 07                	je     c0010c09 <VgaText::decrementCursor(bool)+0x19>
c0010c02:	48                   	dec    eax
c0010c03:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c09:	84 c9                	test   cl,cl
c0010c0b:	74 09                	je     c0010c16 <VgaText::decrementCursor(bool)+0x26>
c0010c0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c11:	e9 56 fa ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010c16:	c3                   	ret    
c0010c17:	90                   	nop

c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c18:	53                   	push   ebx
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c2c:	3c 07                	cmp    al,0x7
c0010c2e:	75 2a                	jne    c0010c5a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c30:	a1 5c e5 02 c0       	mov    eax,ds:0xc002e55c
c0010c35:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c3d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c45:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c51:	83 c4 08             	add    esp,0x8
c0010c54:	5b                   	pop    ebx
c0010c55:	e9 02 31 00 00       	jmp    c0013d5c <Buzzer::beep(int, int, bool)>
c0010c5a:	3c 0d                	cmp    al,0xd
c0010c5c:	75 0c                	jne    c0010c6a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c5e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c68:	eb 3b                	jmp    c0010ca5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c6a:	3c 0a                	cmp    al,0xa
c0010c6c:	75 40                	jne    c0010cae <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c6e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c74:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c7e:	8d 50 01             	lea    edx,[eax+0x1]
c0010c81:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c87:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c8d:	75 12                	jne    c0010ca1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c8f:	83 ec 0c             	sub    esp,0xc
c0010c92:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c98:	53                   	push   ebx
c0010c99:	e8 1c fb ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca5:	83 c4 08             	add    esp,0x8
c0010ca8:	5b                   	pop    ebx
c0010ca9:	e9 be f9 ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010cae:	3c 08                	cmp    al,0x8
c0010cb0:	75 31                	jne    c0010ce3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cb2:	50                   	push   eax
c0010cb3:	50                   	push   eax
c0010cb4:	6a 01                	push   0x1
c0010cb6:	53                   	push   ebx
c0010cb7:	e8 34 ff ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010cbc:	5a                   	pop    edx
c0010cbd:	59                   	pop    ecx
c0010cbe:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cca:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cd0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd6:	6a 20                	push   0x20
c0010cd8:	53                   	push   ebx
c0010cd9:	e8 82 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cde:	83 c4 28             	add    esp,0x28
c0010ce1:	5b                   	pop    ebx
c0010ce2:	c3                   	ret    
c0010ce3:	83 ec 08             	sub    esp,0x8
c0010ce6:	0f be c0             	movsx  eax,al
c0010ce9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cef:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cf5:	51                   	push   ecx
c0010cf6:	52                   	push   edx
c0010cf7:	50                   	push   eax
c0010cf8:	53                   	push   ebx
c0010cf9:	e8 62 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cfe:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d02:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d0a:	83 c4 28             	add    esp,0x28
c0010d0d:	5b                   	pop    ebx
c0010d0e:	e9 1b fc ff ff       	jmp    c001092e <VgaText::incrementCursor(bool)>
c0010d13:	90                   	nop

c0010d14 <VgaText::isShowingCursor()>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <VgaText::isBlinkDisabled()>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d2a:	83 f0 01             	xor    eax,0x1
c0010d2d:	c3                   	ret    

c0010d2e <VgaText::setCursorHeight(int)>:
c0010d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d36:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d3c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d47:	e9 3a f9 ff ff       	jmp    c0010686 <VgaText::showCursor(bool)>

c0010d4c <VgaText::getCursorHeight()>:
c0010d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d50:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d56:	c3                   	ret    

c0010d57 <setActiveTerminal(VgaText*)>:
c0010d57:	53                   	push   ebx
c0010d58:	83 ec 08             	sub    esp,0x8
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	85 db                	test   ebx,ebx
c0010d61:	75 11                	jne    c0010d74 <setActiveTerminal(VgaText*)+0x1d>
c0010d63:	c7 44 24 10 8c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a38c
c0010d6b:	83 c4 08             	add    esp,0x8
c0010d6e:	5b                   	pop    ebx
c0010d6f:	e9 8b 98 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c0010d74:	50                   	push   eax
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	68 9a a3 02 c0       	push   0xc002a39a
c0010d7c:	e8 dd 21 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0010d81:	a1 a4 e4 02 c0       	mov    eax,ds:0xc002e4a4
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	85 c0                	test   eax,eax
c0010d8b:	74 0c                	je     c0010d99 <setActiveTerminal(VgaText*)+0x42>
c0010d8d:	83 ec 0c             	sub    esp,0xc
c0010d90:	50                   	push   eax
c0010d91:	e8 d6 f8 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c0010d9f:	51                   	push   ecx
c0010da0:	51                   	push   ecx
c0010da1:	53                   	push   ebx
c0010da2:	68 b2 a3 02 c0       	push   0xc002a3b2
c0010da7:	e8 b2 21 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0010dac:	83 c4 0c             	add    esp,0xc
c0010daf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010db5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dbb:	53                   	push   ebx
c0010dbc:	e8 17 fb ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010dc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc4:	e8 57 ff ff ff       	call   c0010d20 <VgaText::isBlinkDisabled()>
c0010dc9:	5a                   	pop    edx
c0010dca:	0f b6 c0             	movzx  eax,al
c0010dcd:	59                   	pop    ecx
c0010dce:	50                   	push   eax
c0010dcf:	53                   	push   ebx
c0010dd0:	e8 c1 f8 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c0010dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd8:	e8 6f ff ff ff       	call   c0010d4c <VgaText::getCursorHeight()>
c0010ddd:	5a                   	pop    edx
c0010dde:	59                   	pop    ecx
c0010ddf:	50                   	push   eax
c0010de0:	53                   	push   ebx
c0010de1:	e8 48 ff ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010df0:	75 0a                	jne    c0010dfc <setActiveTerminal(VgaText*)+0xa5>
c0010df2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dfc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e00:	83 c4 08             	add    esp,0x8
c0010e03:	5b                   	pop    ebx
c0010e04:	e9 0f f8 ff ff       	jmp    c0010618 <VgaText::load()>

c0010e09 <doTerminalCycle()>:
c0010e09:	83 ec 18             	sub    esp,0x18
c0010e0c:	a1 a0 e4 02 c0       	mov    eax,ds:0xc002e4a0
c0010e11:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e17:	50                   	push   eax
c0010e18:	a3 a0 e4 02 c0       	mov    ds:0xc002e4a0,eax
c0010e1d:	e8 35 ff ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0010e22:	83 c4 1c             	add    esp,0x1c
c0010e25:	c3                   	ret    

c0010e26 <VgaText::doUpdate()>:
c0010e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e2a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e30:	85 c0                	test   eax,eax
c0010e32:	74 02                	je     c0010e36 <VgaText::doUpdate()+0x10>
c0010e34:	ff e0                	jmp    eax
c0010e36:	c3                   	ret    
c0010e37:	90                   	nop

c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e38:	55                   	push   ebp
c0010e39:	57                   	push   edi
c0010e3a:	56                   	push   esi
c0010e3b:	53                   	push   ebx
c0010e3c:	83 ec 1c             	sub    esp,0x1c
c0010e3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e43:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e48:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e4f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e52:	50                   	push   eax
c0010e53:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e58:	50                   	push   eax
c0010e59:	e8 4a f9 ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5e:	59                   	pop    ecx
c0010e5f:	0f b6 c0             	movzx  eax,al
c0010e62:	5b                   	pop    ebx
c0010e63:	31 c9                	xor    ecx,ecx
c0010e65:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e6d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e71:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e7b:	0f b7 db             	movzx  ebx,bx
c0010e7e:	01 db                	add    ebx,ebx
c0010e80:	01 fb                	add    ebx,edi
c0010e82:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e85:	84 c0                	test   al,al
c0010e87:	0f 84 38 01 00 00    	je     c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e8d:	3c 0d                	cmp    al,0xd
c0010e8f:	75 0f                	jne    c0010ea0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e91:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9b:	e9 1f 01 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea0:	3c 0a                	cmp    al,0xa
c0010ea2:	75 5b                	jne    c0010eff <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ea4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010eaa:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ebd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ec3:	75 12                	jne    c0010ed7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ece:	55                   	push   ebp
c0010ecf:	e8 e6 f8 ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	55                   	push   ebp
c0010edb:	e8 8c f7 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010ee0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ef1:	31 c9                	xor    ecx,ecx
c0010ef3:	0f b7 db             	movzx  ebx,bx
c0010ef6:	01 db                	add    ebx,ebx
c0010ef8:	01 fb                	add    ebx,edi
c0010efa:	e9 c0 00 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eff:	3c 08                	cmp    al,0x8
c0010f01:	75 4e                	jne    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f03:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f07:	53                   	push   ebx
c0010f08:	53                   	push   ebx
c0010f09:	6a 01                	push   0x1
c0010f0b:	55                   	push   ebp
c0010f0c:	e8 df fc ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010f11:	58                   	pop    eax
c0010f12:	5a                   	pop    edx
c0010f13:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f19:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f25:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f2b:	6a 20                	push   0x20
c0010f2d:	55                   	push   ebp
c0010f2e:	e8 2d f9 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f33:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f3b:	83 c4 20             	add    esp,0x20
c0010f3e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f48:	0f b7 db             	movzx  ebx,bx
c0010f4b:	01 db                	add    ebx,ebx
c0010f4d:	01 fb                	add    ebx,edi
c0010f4f:	eb 6e                	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f51:	51                   	push   ecx
c0010f52:	51                   	push   ecx
c0010f53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f57:	50                   	push   eax
c0010f58:	e8 f1 f8 ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f63:	39 2d a4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a4,ebp
c0010f69:	75 2a                	jne    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f71:	85 c0                	test   eax,eax
c0010f73:	74 20                	je     c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f75:	52                   	push   edx
c0010f76:	52                   	push   edx
c0010f77:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f7d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f8b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f8e:	51                   	push   ecx
c0010f8f:	55                   	push   ebp
c0010f90:	ff d0                	call   eax
c0010f92:	83 c4 20             	add    esp,0x20
c0010f95:	83 c3 02             	add    ebx,0x2
c0010f98:	50                   	push   eax
c0010f99:	50                   	push   eax
c0010f9a:	6a 00                	push   0x0
c0010f9c:	55                   	push   ebp
c0010f9d:	e8 8c f9 ff ff       	call   c001092e <VgaText::incrementCursor(bool)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fac:	75 0f                	jne    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb6:	0f b7 db             	movzx  ebx,bx
c0010fb9:	01 db                	add    ebx,ebx
c0010fbb:	01 fb                	add    ebx,edi
c0010fbd:	b1 01                	mov    cl,0x1
c0010fbf:	46                   	inc    esi
c0010fc0:	e9 bd fe ff ff       	jmp    c0010e82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fc5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	55                   	push   ebp
c0010fcd:	e8 9a f6 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd9:	84 c9                	test   cl,cl
c0010fdb:	74 0c                	je     c0010fe9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fdd:	83 ec 0c             	sub    esp,0xc
c0010fe0:	55                   	push   ebp
c0010fe1:	e8 40 fe ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ff0:	83 c4 1c             	add    esp,0x1c
c0010ff3:	5b                   	pop    ebx
c0010ff4:	5e                   	pop    esi
c0010ff5:	5f                   	pop    edi
c0010ff6:	5d                   	pop    ebp
c0010ff7:	c3                   	ret    

c0010ff8 <VgaText::clearScreen()>:
c0010ff8:	57                   	push   edi
c0010ff9:	56                   	push   esi
c0010ffa:	31 f6                	xor    esi,esi
c0010ffc:	53                   	push   ebx
c0010ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011001:	52                   	push   edx
c0011002:	6a 00                	push   0x0
c0011004:	6a 00                	push   0x0
c0011006:	53                   	push   ebx
c0011007:	e8 cc f8 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001100c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001101c:	7e 26                	jle    c0011044 <VgaText::clearScreen()+0x4c>
c001101e:	31 ff                	xor    edi,edi
c0011020:	50                   	push   eax
c0011021:	50                   	push   eax
c0011022:	56                   	push   esi
c0011023:	57                   	push   edi
c0011024:	47                   	inc    edi
c0011025:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001102b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011031:	6a 20                	push   0x20
c0011033:	53                   	push   ebx
c0011034:	e8 27 f8 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011039:	83 c4 20             	add    esp,0x20
c001103c:	83 ff 50             	cmp    edi,0x50
c001103f:	75 df                	jne    c0011020 <VgaText::clearScreen()+0x28>
c0011041:	46                   	inc    esi
c0011042:	eb d2                	jmp    c0011016 <VgaText::clearScreen()+0x1e>
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	53                   	push   ebx
c0011048:	e8 d9 fd ff ff       	call   c0010e26 <VgaText::doUpdate()>
c001104d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011054:	83 c4 10             	add    esp,0x10
c0011057:	5b                   	pop    ebx
c0011058:	5e                   	pop    esi
c0011059:	5f                   	pop    edi
c001105a:	c3                   	ret    
c001105b:	90                   	nop

c001105c <VgaText::putchar(char)>:
c001105c:	56                   	push   esi
c001105d:	53                   	push   ebx
c001105e:	83 ec 14             	sub    esp,0x14
c0011061:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011065:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011069:	3c 5b                	cmp    al,0x5b
c001106b:	75 21                	jne    c001108e <VgaText::putchar(char)+0x32>
c001106d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011074:	74 28                	je     c001109e <VgaText::putchar(char)+0x42>
c0011076:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001107f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011089:	e9 e2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001108e:	3c 1b                	cmp    al,0x1b
c0011090:	75 0c                	jne    c001109e <VgaText::putchar(char)+0x42>
c0011092:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011099:	e9 d2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001109e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110a4:	84 c9                	test   cl,cl
c00110a6:	0f 84 ab 00 00 00    	je     c0011157 <VgaText::putchar(char)+0xfb>
c00110ac:	8d 50 c0             	lea    edx,[eax-0x40]
c00110af:	80 fa 3e             	cmp    dl,0x3e
c00110b2:	0f 87 82 00 00 00    	ja     c001113a <VgaText::putchar(char)+0xde>
c00110b8:	3c 6d                	cmp    al,0x6d
c00110ba:	75 4d                	jne    c0011109 <VgaText::putchar(char)+0xad>
c00110bc:	31 f6                	xor    esi,esi
c00110be:	31 d2                	xor    edx,edx
c00110c0:	31 c0                	xor    eax,eax
c00110c2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c8:	7e 30                	jle    c00110fa <VgaText::putchar(char)+0x9e>
c00110ca:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110d2:	80 fa 3b             	cmp    dl,0x3b
c00110d5:	75 17                	jne    c00110ee <VgaText::putchar(char)+0x92>
c00110d7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110db:	50                   	push   eax
c00110dc:	53                   	push   ebx
c00110dd:	e8 ee f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c00110e2:	59                   	pop    ecx
c00110e3:	31 d2                	xor    edx,edx
c00110e5:	58                   	pop    eax
c00110e6:	31 c0                	xor    eax,eax
c00110e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110ec:	eb 09                	jmp    c00110f7 <VgaText::putchar(char)+0x9b>
c00110ee:	6b c0 0a             	imul   eax,eax,0xa
c00110f1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110f5:	88 ca                	mov    dl,cl
c00110f7:	46                   	inc    esi
c00110f8:	eb c8                	jmp    c00110c2 <VgaText::putchar(char)+0x66>
c00110fa:	84 d2                	test   dl,dl
c00110fc:	74 31                	je     c001112f <VgaText::putchar(char)+0xd3>
c00110fe:	50                   	push   eax
c00110ff:	53                   	push   ebx
c0011100:	e8 cb f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c0011105:	58                   	pop    eax
c0011106:	5a                   	pop    edx
c0011107:	eb 26                	jmp    c001112f <VgaText::putchar(char)+0xd3>
c0011109:	3c 4a                	cmp    al,0x4a
c001110b:	75 22                	jne    c001112f <VgaText::putchar(char)+0xd3>
c001110d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011114:	75 19                	jne    c001112f <VgaText::putchar(char)+0xd3>
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	53                   	push   ebx
c001111a:	e8 d9 fe ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001111f:	83 c4 0c             	add    esp,0xc
c0011122:	6a 00                	push   0x0
c0011124:	6a 00                	push   0x0
c0011126:	53                   	push   ebx
c0011127:	e8 ac f7 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011138:	eb 36                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001113a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011140:	83 fa 0e             	cmp    edx,0xe
c0011143:	7f 2b                	jg     c0011170 <VgaText::putchar(char)+0x114>
c0011145:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011148:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001114e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011155:	eb 19                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c0011157:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001115d:	0f be c0             	movsx  eax,al
c0011160:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011166:	50                   	push   eax
c0011167:	53                   	push   ebx
c0011168:	e8 ab fa ff ff       	call   c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	83 c4 14             	add    esp,0x14
c0011173:	5b                   	pop    ebx
c0011174:	5e                   	pop    esi
c0011175:	c3                   	ret    

c0011176 <VgaText::puts(char const*)>:
c0011176:	53                   	push   ebx
c0011177:	83 ec 08             	sub    esp,0x8
c001117a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001117e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011181:	84 c0                	test   al,al
c0011183:	74 12                	je     c0011197 <VgaText::puts(char const*)+0x21>
c0011185:	43                   	inc    ebx
c0011186:	51                   	push   ecx
c0011187:	51                   	push   ecx
c0011188:	50                   	push   eax
c0011189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118d:	e8 ca fe ff ff       	call   c001105c <VgaText::putchar(char)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	eb e7                	jmp    c001117e <VgaText::puts(char const*)+0x8>
c0011197:	83 c4 08             	add    esp,0x8
c001119a:	5b                   	pop    ebx
c001119b:	c3                   	ret    

c001119c <VgaText::putx(unsigned int)>:
c001119c:	57                   	push   edi
c001119d:	b9 11 00 00 00       	mov    ecx,0x11
c00111a2:	56                   	push   esi
c00111a3:	be ce a3 02 c0       	mov    esi,0xc002a3ce
c00111a8:	53                   	push   ebx
c00111a9:	83 ec 20             	sub    esp,0x20
c00111ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111b4:	fc                   	cld    
c00111b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b7:	be 08 00 00 00       	mov    esi,0x8
c00111bc:	50                   	push   eax
c00111bd:	50                   	push   eax
c00111be:	89 d8                	mov    eax,ebx
c00111c0:	c1 e3 04             	shl    ebx,0x4
c00111c3:	c1 e8 1c             	shr    eax,0x1c
c00111c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111cb:	50                   	push   eax
c00111cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d0:	e8 87 fe ff ff       	call   c001105c <VgaText::putchar(char)>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	4e                   	dec    esi
c00111d9:	75 e1                	jne    c00111bc <VgaText::putx(unsigned int)+0x20>
c00111db:	83 c4 20             	add    esp,0x20
c00111de:	5b                   	pop    ebx
c00111df:	5e                   	pop    esi
c00111e0:	5f                   	pop    edi
c00111e1:	c3                   	ret    

c00111e2 <VgaText::VgaText(char const*)>:
c00111e2:	57                   	push   edi
c00111e3:	56                   	push   esi
c00111e4:	53                   	push   ebx
c00111e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	6a 00                	push   0x0
c00111ee:	50                   	push   eax
c00111ef:	e8 6e 05 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	89 10                	mov    DWORD PTR [eax],edx
c0011202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011206:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001125b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011270:	bb 80 e4 02 c0       	mov    ebx,0xc002e480
c0011275:	b8 08 00 00 00       	mov    eax,0x8
c001127a:	fc                   	cld    
c001127b:	89 d7                	mov    edi,edx
c001127d:	89 de                	mov    esi,ebx
c001127f:	89 c1                	mov    ecx,eax
c0011281:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011287:	05 1e 10 00 00       	add    eax,0x101e
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011293:	50                   	push   eax
c0011294:	e8 9b f5 fe ff       	call   c0000834 <strcpy>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ae:	83 c0 0c             	add    eax,0xc
c00112b1:	83 ec 04             	sub    esp,0x4
c00112b4:	68 00 0f 00 00       	push   0xf00
c00112b9:	6a 00                	push   0x0
c00112bb:	50                   	push   eax
c00112bc:	e8 b7 f4 fe ff       	call   c0000778 <memset>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	83 ec 04             	sub    esp,0x4
c00112c7:	6a 00                	push   0x0
c00112c9:	6a 07                	push   0x7
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 b4 f4 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112d4:	83 c4 10             	add    esp,0x10
c00112d7:	83 ec 08             	sub    esp,0x8
c00112da:	6a 02                	push   0x2
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	e8 49 fa ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 ec 04             	sub    esp,0x4
c00112eb:	6a 00                	push   0x0
c00112ed:	6a 00                	push   0x0
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 e0 f5 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	83 ec 08             	sub    esp,0x8
c00112fe:	6a 01                	push   0x1
c0011300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011304:	e8 7d f3 ff ff       	call   c0010686 <VgaText::showCursor(bool)>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	6a 01                	push   0x1
c0011311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011315:	e8 7c f3 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011324:	e8 cf fc ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133b:	05 9e 10 00 00       	add    eax,0x109e
c0011340:	83 ec 04             	sub    esp,0x4
c0011343:	68 96 00 00 00       	push   0x96
c0011348:	6a 00                	push   0x0
c001134a:	50                   	push   eax
c001134b:	e8 28 f4 fe ff       	call   c0000778 <memset>
c0011350:	83 c4 10             	add    esp,0x10
c0011353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011357:	05 34 11 00 00       	add    eax,0x1134
c001135c:	83 ec 04             	sub    esp,0x4
c001135f:	68 2c 01 00 00       	push   0x12c
c0011364:	6a 00                	push   0x0
c0011366:	50                   	push   eax
c0011367:	e8 0c f4 fe ff       	call   c0000778 <memset>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	90                   	nop
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	c3                   	ret    

c0011374 <VgaText::receiveKey(unsigned char)>:
c0011374:	55                   	push   ebp
c0011375:	57                   	push   edi
c0011376:	56                   	push   esi
c0011377:	53                   	push   ebx
c0011378:	83 ec 1c             	sub    esp,0x1c
c001137b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001137f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011383:	84 db                	test   bl,bl
c0011385:	0f 84 c9 00 00 00    	je     c0011454 <VgaText::receiveKey(unsigned char)+0xe0>
c001138b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011391:	80 fb 08             	cmp    bl,0x8
c0011394:	75 2c                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0x4e>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	57                   	push   edi
c001139a:	e8 f5 f3 fe ff       	call   c0000794 <strlen>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	85 c0                	test   eax,eax
c00113a4:	74 41                	je     c00113e7 <VgaText::receiveKey(unsigned char)+0x73>
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	6a 08                	push   0x8
c00113aa:	56                   	push   esi
c00113ab:	e8 ac fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113b3:	e8 dc f3 fe ff       	call   c0000794 <strlen>
c00113b8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113c0:	eb 22                	jmp    c00113e4 <VgaText::receiveKey(unsigned char)+0x70>
c00113c2:	0f be c3             	movsx  eax,bl
c00113c5:	52                   	push   edx
c00113c6:	52                   	push   edx
c00113c7:	50                   	push   eax
c00113c8:	56                   	push   esi
c00113c9:	e8 8e fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113ce:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d7:	59                   	pop    ecx
c00113d8:	5d                   	pop    ebp
c00113d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113dd:	50                   	push   eax
c00113de:	57                   	push   edi
c00113df:	e8 90 f5 fe ff       	call   c0000974 <strcat>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ee:	75 05                	jne    c00113f5 <VgaText::receiveKey(unsigned char)+0x81>
c00113f0:	80 fb 0a             	cmp    bl,0xa
c00113f3:	75 53                	jne    c0011448 <VgaText::receiveKey(unsigned char)+0xd4>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113fe:	53                   	push   ebx
c00113ff:	e8 90 f3 fe ff       	call   c0000794 <strlen>
c0011404:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011407:	89 c5                	mov    ebp,eax
c0011409:	e8 86 f3 fe ff       	call   c0000794 <strlen>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011415:	3d 2c 01 00 00       	cmp    eax,0x12c
c001141a:	76 10                	jbe    c001142c <VgaText::receiveKey(unsigned char)+0xb8>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	68 df a3 02 c0       	push   0xc002a3df
c0011424:	e8 d6 91 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	50                   	push   eax
c001142d:	50                   	push   eax
c001142e:	57                   	push   edi
c001142f:	53                   	push   ebx
c0011430:	e8 3f f5 fe ff       	call   c0000974 <strcat>
c0011435:	83 c4 0c             	add    esp,0xc
c0011438:	68 96 00 00 00       	push   0x96
c001143d:	6a 00                	push   0x0
c001143f:	57                   	push   edi
c0011440:	e8 33 f3 fe ff       	call   c0000778 <memset>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	56                   	push   esi
c001144c:	e8 d5 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	83 c4 1c             	add    esp,0x1c
c0011457:	5b                   	pop    ebx
c0011458:	5e                   	pop    esi
c0011459:	5f                   	pop    edi
c001145a:	5d                   	pop    ebp
c001145b:	c3                   	ret    

c001145c <VgaText::write(unsigned long long, void*, int*)>:
c001145c:	55                   	push   ebp
c001145d:	57                   	push   edi
c001145e:	56                   	push   esi
c001145f:	53                   	push   ebx
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011467:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001146b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001146f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011476:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011479:	39 eb                	cmp    ebx,ebp
c001147b:	74 13                	je     c0011490 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001147d:	43                   	inc    ebx
c001147e:	50                   	push   eax
c001147f:	50                   	push   eax
c0011480:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011484:	50                   	push   eax
c0011485:	56                   	push   esi
c0011486:	e8 d1 fb ff ff       	call   c001105c <VgaText::putchar(char)>
c001148b:	83 c4 10             	add    esp,0x10
c001148e:	eb e9                	jmp    c0011479 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001149a:	56                   	push   esi
c001149b:	e8 86 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c00114a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a4:	89 38                	mov    DWORD PTR [eax],edi
c00114a6:	83 c4 1c             	add    esp,0x1c
c00114a9:	31 c0                	xor    eax,eax
c00114ab:	5b                   	pop    ebx
c00114ac:	5e                   	pop    esi
c00114ad:	5f                   	pop    edi
c00114ae:	5d                   	pop    ebp
c00114af:	c3                   	ret    

c00114b0 <newTerminal(char*)>:
c00114b0:	83 ec 28             	sub    esp,0x28
c00114b3:	68 60 12 00 00       	push   0x1260
c00114b8:	e8 86 e3 ff ff       	call   c000f843 <malloc>
c00114bd:	5a                   	pop    edx
c00114be:	59                   	pop    ecx
c00114bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c3:	50                   	push   eax
c00114c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c8:	e8 15 fd ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c00114cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d1:	83 c4 2c             	add    esp,0x2c
c00114d4:	c3                   	ret    
c00114d5:	90                   	nop

c00114d6 <TSS::TSS()>:
c00114d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114e1:	90                   	nop
c00114e2:	c3                   	ret    
c00114e3:	90                   	nop

c00114e4 <TSS::setESP(unsigned long)>:
c00114e4:	55                   	push   ebp
c00114e5:	89 e5                	mov    ebp,esp
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114f3:	90                   	nop
c00114f4:	5d                   	pop    ebp
c00114f5:	c3                   	ret    

c00114f6 <TSS::flush()>:
c00114f6:	55                   	push   ebp
c00114f7:	89 e5                	mov    ebp,esp
c00114f9:	83 ec 10             	sub    esp,0x10
c00114fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011501:	83 c8 03             	or     eax,0x3
c0011504:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011508:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001150c:	66 89 d0             	mov    ax,dx
c001150f:	0f 00 d8             	ltr    ax
c0011512:	90                   	nop
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <TSS::setup(unsigned long, unsigned long)>:
c0011516:	55                   	push   ebp
c0011517:	89 e5                	mov    ebp,esp
c0011519:	83 ec 18             	sub    esp,0x18
c001151c:	83 ec 0c             	sub    esp,0xc
c001151f:	6a 68                	push   0x68
c0011521:	e8 1d e3 ff ff       	call   c000f843 <malloc>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	89 c2                	mov    edx,eax
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	83 ec 04             	sub    esp,0x4
c001153a:	6a 68                	push   0x68
c001153c:	6a 00                	push   0x0
c001153e:	50                   	push   eax
c001153f:	e8 34 f2 fe ff       	call   c0000778 <memset>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011559:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001155f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011565:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011568:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011571:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115de:	0f 20 da             	mov    edx,cr3
c00115e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f7:	50                   	push   eax
c00115f8:	e8 21 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	83 ec 08             	sub    esp,0x8
c0011603:	6a 68                	push   0x68
c0011605:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011608:	50                   	push   eax
c0011609:	e8 2c da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011615:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011618:	83 e0 0f             	and    eax,0xf
c001161b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001161e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011621:	83 c8 40             	or     eax,0x40
c0011624:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011627:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001162c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011632:	05 78 01 00 00       	add    eax,0x178
c0011637:	83 ec 04             	sub    esp,0x4
c001163a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001163d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011640:	50                   	push   eax
c0011641:	e8 28 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	89 c2                	mov    edx,eax
c001164b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164e:	89 10                	mov    DWORD PTR [eax],edx
c0011650:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0011655:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001165b:	05 78 01 00 00       	add    eax,0x178
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	50                   	push   eax
c0011664:	e8 49 da ff ff       	call   c000f0b2 <GDT::flush()>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011671:	83 ec 08             	sub    esp,0x8
c0011674:	50                   	push   eax
c0011675:	68 48 a4 02 c0       	push   0xc002a448
c001167a:	e8 df 18 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011685:	8b 00                	mov    eax,DWORD PTR [eax]
c0011687:	c9                   	leave  
c0011688:	c3                   	ret    
c0011689:	90                   	nop

c001168a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001168a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011692:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011695:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001169a:	75 08                	jne    c00116a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001169c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116a2:	eb 38                	jmp    c00116dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a9:	75 17                	jne    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116c2:	89 c1                	mov    ecx,eax
c00116c4:	83 e1 fd             	and    ecx,0xfffffffd
c00116c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116cd:	74 cd                	je     c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116d4:	83 e0 ef             	and    eax,0xffffffef
c00116d7:	83 f8 08             	cmp    eax,0x8
c00116da:	76 c0                	jbe    c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116dc:	31 c0                	xor    eax,eax
c00116de:	c3                   	ret    
c00116df:	90                   	nop

c00116e0 <ReservedFilename::isAtty()>:
c00116e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e7:	31 c0                	xor    eax,eax
c00116e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116ef:	74 09                	je     c00116fa <ReservedFilename::isAtty()+0x1a>
c00116f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f7:	0f 94 c0             	sete   al
c00116fa:	c3                   	ret    
c00116fb:	90                   	nop

c00116fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001170b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011710:	75 08                	jne    c001171a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011712:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011718:	eb 3d                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001171f:	75 17                	jne    c0011738 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011729:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001172f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011735:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011738:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173d:	75 04                	jne    c0011743 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001173f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011741:	eb 14                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011743:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011748:	74 c8                	je     c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001174a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001174f:	83 e0 ef             	and    eax,0xffffffef
c0011752:	83 f8 08             	cmp    eax,0x8
c0011755:	76 bb                	jbe    c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011757:	31 c0                	xor    eax,eax
c0011759:	c3                   	ret    

c001175a <UnixFile::getFileDescriptor()>:
c001175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011761:	c3                   	ret    

c0011762 <UnixFile::UnixFile(int)>:
c0011762:	53                   	push   ebx
c0011763:	83 ec 28             	sub    esp,0x28
c0011766:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c001176b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176f:	89 10                	mov    DWORD PTR [eax],edx
c0011771:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011779:	0f 8f 8c 01 00 00    	jg     c001190b <UnixFile::UnixFile(int)+0x1a9>
c001177f:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c0011784:	8d 50 01             	lea    edx,[eax+0x1]
c0011787:	89 15 60 d3 02 c0    	mov    DWORD PTR ds:0xc002d360,edx
c001178d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011791:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011794:	83 ec 08             	sub    esp,0x8
c0011797:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001179b:	68 38 e5 02 c0       	push   0xc002e538
c00117a0:	e8 8b 6f 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	a0 34 e5 02 c0       	mov    al,ds:0xc002e534
c00117ad:	83 f0 01             	xor    eax,0x1
c00117b0:	84 c0                	test   al,al
c00117b2:	0f 84 54 01 00 00    	je     c001190c <UnixFile::UnixFile(int)+0x1aa>
c00117b8:	c6 05 34 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e534,0x1
c00117bf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c7:	83 ec 0c             	sub    esp,0xc
c00117ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117ce:	e8 70 e0 ff ff       	call   c000f843 <malloc>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	89 c3                	mov    ebx,eax
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	68 03 ff ff 0f       	push   0xfffff03
c00117e0:	53                   	push   ebx
c00117e1:	e8 2c 01 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	89 1d 2c e5 02 c0    	mov    DWORD PTR ds:0xc002e52c,ebx
c00117ef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fe:	e8 40 e0 ff ff       	call   c000f843 <malloc>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	89 c3                	mov    ebx,eax
c0011808:	83 ec 08             	sub    esp,0x8
c001180b:	68 01 ff ff 0f       	push   0xfffff01
c0011810:	53                   	push   ebx
c0011811:	e8 fc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	89 1d 30 e5 02 c0    	mov    DWORD PTR ds:0xc002e530,ebx
c001181f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001182e:	e8 10 e0 ff ff       	call   c000f843 <malloc>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	89 c3                	mov    ebx,eax
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 00 ff ff 0f       	push   0xfffff00
c0011840:	53                   	push   ebx
c0011841:	e8 cc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	89 1d 24 e5 02 c0    	mov    DWORD PTR ds:0xc002e524,ebx
c001184f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001185e:	e8 e0 df ff ff       	call   c000f843 <malloc>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	89 c3                	mov    ebx,eax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 02 ff ff 0f       	push   0xfffff02
c0011870:	53                   	push   ebx
c0011871:	e8 9c 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 1d 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,ebx
c001187f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011887:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001188c:	7f 7e                	jg     c001190c <UnixFile::UnixFile(int)+0x1aa>
c001188e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001189d:	e8 a1 df ff ff       	call   c000f843 <malloc>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	89 c3                	mov    ebx,eax
c00118a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ab:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	50                   	push   eax
c00118b4:	53                   	push   ebx
c00118b5:	e8 58 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118ba:	83 c4 10             	add    esp,0x10
c00118bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118c1:	89 1c 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],ebx
c00118c8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d7:	e8 67 df ff ff       	call   c000f843 <malloc>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	89 c3                	mov    ebx,eax
c00118e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118ea:	83 ec 08             	sub    esp,0x8
c00118ed:	50                   	push   eax
c00118ee:	53                   	push   ebx
c00118ef:	e8 1e 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118fb:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c0011902:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011906:	e9 7c ff ff ff       	jmp    c0011887 <UnixFile::UnixFile(int)+0x125>
c001190b:	90                   	nop
c001190c:	83 c4 28             	add    esp,0x28
c001190f:	5b                   	pop    ebx
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <ReservedFilename::ReservedFilename(int)>:
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011919:	83 ec 08             	sub    esp,0x8
c001191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011920:	50                   	push   eax
c0011921:	e8 3c fe ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	89 10                	mov    DWORD PTR [eax],edx
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001193c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001193f:	90                   	nop
c0011940:	83 c4 0c             	add    esp,0xc
c0011943:	c3                   	ret    

c0011944 <UnixFile::~UnixFile()>:
c0011944:	83 ec 1c             	sub    esp,0x1c
c0011947:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	89 10                	mov    DWORD PTR [eax],edx
c0011952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011959:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001195e:	7f 73                	jg     c00119d3 <UnixFile::~UnixFile()+0x8f>
c0011960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	68 38 e5 02 c0       	push   0xc002e538
c0011970:	e8 8f 6e 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 38 e5 02 c0       	push   0xc002e538
c0011984:	e8 83 6e 01 00       	call   c002880c <LinkedList<UnixFile>::removeFirst()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011990:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011994:	74 40                	je     c00119d6 <UnixFile::~UnixFile()+0x92>
c0011996:	83 ec 08             	sub    esp,0x8
c0011999:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001199d:	68 38 e5 02 c0       	push   0xc002e538
c00119a2:	e8 89 6d 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ae:	8d 50 01             	lea    edx,[eax+0x1]
c00119b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ba:	0f 94 c0             	sete   al
c00119bd:	84 c0                	test   al,al
c00119bf:	74 a7                	je     c0011968 <UnixFile::~UnixFile()+0x24>
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	68 0c a5 02 c0       	push   0xc002a50c
c00119c9:	e8 31 8c 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	eb 95                	jmp    c0011968 <UnixFile::~UnixFile()+0x24>
c00119d3:	90                   	nop
c00119d4:	eb 01                	jmp    c00119d7 <UnixFile::~UnixFile()+0x93>
c00119d6:	90                   	nop
c00119d7:	90                   	nop
c00119d8:	83 c4 1c             	add    esp,0x1c
c00119db:	c3                   	ret    

c00119dc <UnixFile::~UnixFile()>:
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e6:	e8 59 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	6a 0c                	push   0xc
c00119f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f7:	e8 82 14 00 00       	call   c0012e7e <operator delete(void*, unsigned long)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	83 c4 0c             	add    esp,0xc
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <ReservedFilename::~ReservedFilename()>:
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	89 10                	mov    DWORD PTR [eax],edx
c0011a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	50                   	push   eax
c0011a1a:	e8 25 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	90                   	nop
c0011a23:	83 c4 0c             	add    esp,0xc
c0011a26:	c3                   	ret    
c0011a27:	90                   	nop

c0011a28 <ReservedFilename::~ReservedFilename()>:
c0011a28:	83 ec 0c             	sub    esp,0xc
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a32:	e8 cd ff ff ff       	call   c0011a04 <ReservedFilename::~ReservedFilename()>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	83 ec 08             	sub    esp,0x8
c0011a3d:	6a 0c                	push   0xc
c0011a3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a43:	e8 36 14 00 00       	call   c0012e7e <operator delete(void*, unsigned long)>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	83 c4 0c             	add    esp,0xc
c0011a4e:	c3                   	ret    

c0011a4f <getFromFileDescriptor(int)>:
c0011a4f:	53                   	push   ebx
c0011a50:	83 ec 08             	sub    esp,0x8
c0011a53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a57:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a5d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a63:	7f 2c                	jg     c0011a91 <getFromFileDescriptor(int)+0x42>
c0011a65:	83 ec 0c             	sub    esp,0xc
c0011a68:	68 38 e5 02 c0       	push   0xc002e538
c0011a6d:	e8 92 6d 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	85 c0                	test   eax,eax
c0011a77:	75 04                	jne    c0011a7d <getFromFileDescriptor(int)+0x2e>
c0011a79:	31 c0                	xor    eax,eax
c0011a7b:	eb 6e                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a7d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a80:	74 69                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a82:	52                   	push   edx
c0011a83:	52                   	push   edx
c0011a84:	50                   	push   eax
c0011a85:	68 38 e5 02 c0       	push   0xc002e538
c0011a8a:	e8 1f 6e 01 00       	call   c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a8f:	eb e1                	jmp    c0011a72 <getFromFileDescriptor(int)+0x23>
c0011a91:	a1 2c e5 02 c0       	mov    eax,ds:0xc002e52c
c0011a96:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a9c:	74 4d                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 30 e5 02 c0       	mov    eax,ds:0xc002e530
c0011aa3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa9:	74 40                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011aab:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0011ab0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab6:	74 33                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ab8:	a1 24 e5 02 c0       	mov    eax,ds:0xc002e524
c0011abd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ac3:	74 26                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ac5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011acb:	83 f8 08             	cmp    eax,0x8
c0011ace:	77 09                	ja     c0011ad9 <getFromFileDescriptor(int)+0x8a>
c0011ad0:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c0011ad7:	eb 12                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ad9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011adf:	83 fb 08             	cmp    ebx,0x8
c0011ae2:	77 95                	ja     c0011a79 <getFromFileDescriptor(int)+0x2a>
c0011ae4:	8b 04 9d c0 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b40]
c0011aeb:	83 c4 08             	add    esp,0x8
c0011aee:	5b                   	pop    ebx
c0011aef:	c3                   	ret    

c0011af0 <__static_initialization_and_destruction_0(int, int)>:
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af8:	75 34                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b02:	75 2a                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	68 38 e5 02 c0       	push   0xc002e538
c0011b0c:	e8 c7 6b 01 00       	call   c00286d8 <LinkedList<UnixFile>::LinkedList()>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	83 ec 04             	sub    esp,0x4
c0011b17:	68 dc d2 02 c0       	push   0xc002d2dc
c0011b1c:	68 38 e5 02 c0       	push   0xc002e538
c0011b21:	68 d6 86 02 c0       	push   0xc00286d6
c0011b26:	e8 cd 12 00 00       	call   c0012df8 <__cxa_atexit>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	90                   	nop
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	c3                   	ret    

c0011b33 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b33:	83 ec 0c             	sub    esp,0xc
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	68 ff ff 00 00       	push   0xffff
c0011b3e:	6a 01                	push   0x1
c0011b40:	e8 ab ff ff ff       	call   c0011af0 <__static_initialization_and_destruction_0(int, int)>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	83 c4 0c             	add    esp,0xc
c0011b4b:	c3                   	ret    

c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b4c:	53                   	push   ebx
c0011b4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b55:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b5b:	89 c8                	mov    eax,ecx
c0011b5d:	d1 e8                	shr    eax,1
c0011b5f:	03 05 68 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d368
c0011b65:	83 e1 01             	and    ecx,0x1
c0011b68:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b6a:	75 09                	jne    c0011b75 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b6c:	83 e2 f0             	and    edx,0xfffffff0
c0011b6f:	09 da                	or     edx,ebx
c0011b71:	88 10                	mov    BYTE PTR [eax],dl
c0011b73:	5b                   	pop    ebx
c0011b74:	c3                   	ret    
c0011b75:	c1 e3 04             	shl    ebx,0x4
c0011b78:	83 e2 0f             	and    edx,0xf
c0011b7b:	09 da                	or     edx,ebx
c0011b7d:	88 10                	mov    BYTE PTR [eax],dl
c0011b7f:	5b                   	pop    ebx
c0011b80:	c3                   	ret    

c0011b81 <Virt::getPageState(unsigned long)>:
c0011b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b85:	8b 0d 68 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d368
c0011b8b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b91:	89 d0                	mov    eax,edx
c0011b93:	d1 e8                	shr    eax,1
c0011b95:	83 e2 01             	and    edx,0x1
c0011b98:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b9b:	75 04                	jne    c0011ba1 <Virt::getPageState(unsigned long)+0x20>
c0011b9d:	83 e0 0f             	and    eax,0xf
c0011ba0:	c3                   	ret    
c0011ba1:	c0 e8 04             	shr    al,0x4
c0011ba4:	c3                   	ret    

c0011ba5 <Virt::allocateKernelVirtualPages(int)>:
c0011ba5:	55                   	push   ebp
c0011ba6:	31 ed                	xor    ebp,ebp
c0011ba8:	57                   	push   edi
c0011ba9:	56                   	push   esi
c0011baa:	53                   	push   ebx
c0011bab:	31 db                	xor    ebx,ebx
c0011bad:	83 ec 1c             	sub    esp,0x1c
c0011bb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bb4:	8b 3d 64 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d364
c0011bba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bbf:	57                   	push   edi
c0011bc0:	e8 bc ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bc5:	5a                   	pop    edx
c0011bc6:	84 c0                	test   al,al
c0011bc8:	75 3a                	jne    c0011c04 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bca:	85 db                	test   ebx,ebx
c0011bcc:	75 02                	jne    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bce:	89 fd                	mov    ebp,edi
c0011bd0:	43                   	inc    ebx
c0011bd1:	39 f3                	cmp    ebx,esi
c0011bd3:	74 5a                	je     c0011c2f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bd5:	47                   	inc    edi
c0011bd6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bdc:	76 31                	jbe    c0011c0f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bde:	c7 05 64 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d364,0xc8000
c0011be8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bed:	75 28                	jne    c0011c17 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bf4:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf9:	57                   	push   edi
c0011bfa:	e8 82 ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bff:	5a                   	pop    edx
c0011c00:	84 c0                	test   al,al
c0011c02:	74 c6                	je     c0011bca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c04:	31 db                	xor    ebx,ebx
c0011c06:	47                   	inc    edi
c0011c07:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c0d:	77 cf                	ja     c0011bde <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c0f:	89 3d 64 d3 02 c0    	mov    DWORD PTR ds:0xc002d364,edi
c0011c15:	eb a8                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	68 64 a5 02 c0       	push   0xc002a564
c0011c1f:	e8 db 89 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011c24:	8b 3d 64 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d364
c0011c2a:	83 c4 10             	add    esp,0x10
c0011c2d:	eb 90                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2f:	89 2d 64 d3 02 c0    	mov    DWORD PTR ds:0xc002d364,ebp
c0011c35:	4b                   	dec    ebx
c0011c36:	74 5f                	je     c0011c97 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c38:	85 f6                	test   esi,esi
c0011c3a:	74 3d                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3c:	89 e8                	mov    eax,ebp
c0011c3e:	31 db                	xor    ebx,ebx
c0011c40:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c43:	eb 14                	jmp    c0011c59 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c45:	6a 01                	push   0x1
c0011c47:	43                   	inc    ebx
c0011c48:	50                   	push   eax
c0011c49:	e8 fe fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4e:	58                   	pop    eax
c0011c4f:	39 f3                	cmp    ebx,esi
c0011c51:	5a                   	pop    edx
c0011c52:	74 25                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c54:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0011c59:	8d 50 01             	lea    edx,[eax+0x1]
c0011c5c:	85 db                	test   ebx,ebx
c0011c5e:	89 15 64 d3 02 c0    	mov    DWORD PTR ds:0xc002d364,edx
c0011c64:	74 20                	je     c0011c86 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c66:	39 df                	cmp    edi,ebx
c0011c68:	75 db                	jne    c0011c45 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c6a:	6a 03                	push   0x3
c0011c6c:	43                   	inc    ebx
c0011c6d:	50                   	push   eax
c0011c6e:	e8 d9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c73:	59                   	pop    ecx
c0011c74:	39 f3                	cmp    ebx,esi
c0011c76:	58                   	pop    eax
c0011c77:	75 db                	jne    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c79:	83 c4 1c             	add    esp,0x1c
c0011c7c:	89 e8                	mov    eax,ebp
c0011c7e:	5b                   	pop    ebx
c0011c7f:	c1 e0 0c             	shl    eax,0xc
c0011c82:	5e                   	pop    esi
c0011c83:	5f                   	pop    edi
c0011c84:	5d                   	pop    ebp
c0011c85:	c3                   	ret    
c0011c86:	6a 02                	push   0x2
c0011c88:	bb 01 00 00 00       	mov    ebx,0x1
c0011c8d:	50                   	push   eax
c0011c8e:	e8 b9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c93:	58                   	pop    eax
c0011c94:	5a                   	pop    edx
c0011c95:	eb bd                	jmp    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c97:	6a 04                	push   0x4
c0011c99:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c9c:	55                   	push   ebp
c0011c9d:	a3 64 d3 02 c0       	mov    ds:0xc002d364,eax
c0011ca2:	e8 a5 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca7:	59                   	pop    ecx
c0011ca8:	89 e8                	mov    eax,ebp
c0011caa:	5b                   	pop    ebx
c0011cab:	c1 e0 0c             	shl    eax,0xc
c0011cae:	83 c4 1c             	add    esp,0x1c
c0011cb1:	5b                   	pop    ebx
c0011cb2:	5e                   	pop    esi
c0011cb3:	5f                   	pop    edi
c0011cb4:	5d                   	pop    ebp
c0011cb5:	c3                   	ret    

c0011cb6 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb6:	53                   	push   ebx
c0011cb7:	8b 15 48 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e548
c0011cbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cc1:	b8 01 00 00 00       	mov    eax,0x1
c0011cc6:	89 cb                	mov    ebx,ecx
c0011cc8:	d3 e0                	shl    eax,cl
c0011cca:	c1 eb 05             	shr    ebx,0x5
c0011ccd:	f7 d0                	not    eax
c0011ccf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cd2:	5b                   	pop    ebx
c0011cd3:	c3                   	ret    

c0011cd4 <Virt::swapIDToSector(unsigned long)>:
c0011cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd8:	0f af 05 6c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d36c
c0011cdf:	03 05 74 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d374
c0011ce5:	c3                   	ret    

c0011ce6 <Virt::allocateSwapfilePage()>:
c0011ce6:	55                   	push   ebp
c0011ce7:	31 d2                	xor    edx,edx
c0011ce9:	57                   	push   edi
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	8b 0d 6c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d36c
c0011cf5:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c0011cfa:	f7 f1                	div    ecx
c0011cfc:	39 0d 70 d3 02 c0    	cmp    DWORD PTR ds:0xc002d370,ecx
c0011d02:	72 2d                	jb     c0011d31 <Virt::allocateSwapfilePage()+0x4b>
c0011d04:	8b 35 48 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e548
c0011d0a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d0c:	f6 c2 01             	test   dl,0x1
c0011d0f:	74 3c                	je     c0011d4d <Virt::allocateSwapfilePage()+0x67>
c0011d11:	31 c9                	xor    ecx,ecx
c0011d13:	bf 01 00 00 00       	mov    edi,0x1
c0011d18:	eb 12                	jmp    c0011d2c <Virt::allocateSwapfilePage()+0x46>
c0011d1a:	89 fd                	mov    ebp,edi
c0011d1c:	89 ca                	mov    edx,ecx
c0011d1e:	d3 e5                	shl    ebp,cl
c0011d20:	c1 ea 05             	shr    edx,0x5
c0011d23:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d28:	85 ea                	test   edx,ebp
c0011d2a:	74 2a                	je     c0011d56 <Virt::allocateSwapfilePage()+0x70>
c0011d2c:	41                   	inc    ecx
c0011d2d:	39 c8                	cmp    eax,ecx
c0011d2f:	77 e9                	ja     c0011d1a <Virt::allocateSwapfilePage()+0x34>
c0011d31:	83 ec 0c             	sub    esp,0xc
c0011d34:	68 eb a6 02 c0       	push   0xc002a6eb
c0011d39:	e8 c1 88 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	31 c9                	xor    ecx,ecx
c0011d43:	83 c4 0c             	add    esp,0xc
c0011d46:	89 c8                	mov    eax,ecx
c0011d48:	5b                   	pop    ebx
c0011d49:	5e                   	pop    esi
c0011d4a:	5f                   	pop    edi
c0011d4b:	5d                   	pop    ebp
c0011d4c:	c3                   	ret    
c0011d4d:	89 f3                	mov    ebx,esi
c0011d4f:	bd 01 00 00 00       	mov    ebp,0x1
c0011d54:	31 c9                	xor    ecx,ecx
c0011d56:	09 ea                	or     edx,ebp
c0011d58:	89 c8                	mov    eax,ecx
c0011d5a:	89 13                	mov    DWORD PTR [ebx],edx
c0011d5c:	83 c4 0c             	add    esp,0xc
c0011d5f:	5b                   	pop    ebx
c0011d60:	5e                   	pop    esi
c0011d61:	5f                   	pop    edi
c0011d62:	5d                   	pop    ebp
c0011d63:	c3                   	ret    

c0011d64 <Virt::virtualMemorySetup()>:
c0011d64:	53                   	push   ebx
c0011d65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	6a 0f                	push   0xf
c0011d6f:	53                   	push   ebx
c0011d70:	43                   	inc    ebx
c0011d71:	e8 d6 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d76:	59                   	pop    ecx
c0011d77:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d7d:	58                   	pop    eax
c0011d7e:	75 ed                	jne    c0011d6d <Virt::virtualMemorySetup()+0x9>
c0011d80:	83 ec 08             	sub    esp,0x8
c0011d83:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d88:	68 00 00 00 c8       	push   0xc8000000
c0011d8d:	68 02 a7 02 c0       	push   0xc002a702
c0011d92:	e8 c7 11 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011d97:	58                   	pop    eax
c0011d98:	5a                   	pop    edx
c0011d99:	68 00 f0 ff ef       	push   0xeffff000
c0011d9e:	68 16 a7 02 c0       	push   0xc002a716
c0011da3:	e8 b6 11 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	83 ec 08             	sub    esp,0x8
c0011dae:	6a 00                	push   0x0
c0011db0:	53                   	push   ebx
c0011db1:	43                   	inc    ebx
c0011db2:	e8 95 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dc0:	75 e9                	jne    c0011dab <Virt::virtualMemorySetup()+0x47>
c0011dc2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc7:	83 ec 08             	sub    esp,0x8
c0011dca:	6a 0f                	push   0xf
c0011dcc:	53                   	push   ebx
c0011dcd:	43                   	inc    ebx
c0011dce:	e8 79 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ddc:	75 e9                	jne    c0011dc7 <Virt::virtualMemorySetup()+0x63>
c0011dde:	83 c4 08             	add    esp,0x8
c0011de1:	5b                   	pop    ebx
c0011de2:	c3                   	ret    

c0011de3 <Virt::swappingSetup()>:
c0011de3:	83 ec 14             	sub    esp,0x14
c0011de6:	31 d2                	xor    edx,edx
c0011de8:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c0011ded:	f7 35 6c d3 02 c0    	div    DWORD PTR ds:0xc002d36c
c0011df3:	c1 e8 05             	shr    eax,0x5
c0011df6:	50                   	push   eax
c0011df7:	68 2a a7 02 c0       	push   0xc002a72a
c0011dfc:	e8 5d 11 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011e01:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c0011e06:	31 d2                	xor    edx,edx
c0011e08:	f7 35 6c d3 02 c0    	div    DWORD PTR ds:0xc002d36c
c0011e0e:	c1 e8 05             	shr    eax,0x5
c0011e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e14:	e8 2a da ff ff       	call   c000f843 <malloc>
c0011e19:	83 c4 0c             	add    esp,0xc
c0011e1c:	89 c1                	mov    ecx,eax
c0011e1e:	a3 48 e5 02 c0       	mov    ds:0xc002e548,eax
c0011e23:	31 d2                	xor    edx,edx
c0011e25:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c0011e2a:	f7 35 6c d3 02 c0    	div    DWORD PTR ds:0xc002d36c
c0011e30:	c1 e8 05             	shr    eax,0x5
c0011e33:	50                   	push   eax
c0011e34:	6a 00                	push   0x0
c0011e36:	51                   	push   ecx
c0011e37:	e8 3c e9 fe ff       	call   c0000778 <memset>
c0011e3c:	83 c4 1c             	add    esp,0x1c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::getAKernelVAS()>:
c0011e40:	a1 4c e5 02 c0       	mov    eax,ds:0xc002e54c
c0011e45:	c3                   	ret    

c0011e46 <Virt::setupPageSwapping(int)>:
c0011e46:	57                   	push   edi
c0011e47:	56                   	push   esi
c0011e48:	53                   	push   ebx
c0011e49:	83 ec 1c             	sub    esp,0x1c
c0011e4c:	68 14 01 00 00       	push   0x114
c0011e51:	e8 ed d9 ff ff       	call   c000f843 <malloc>
c0011e56:	83 c4 0c             	add    esp,0xc
c0011e59:	89 c6                	mov    esi,eax
c0011e5b:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c0011e61:	68 45 a7 02 c0       	push   0xc002a745
c0011e66:	50                   	push   eax
c0011e67:	e8 4a 16 00 00       	call   c00134b6 <File::File(char const*, Process*)>
c0011e6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6f:	e8 1e 18 00 00       	call   c0013692 <File::unlink()>
c0011e74:	58                   	pop    eax
c0011e75:	5a                   	pop    edx
c0011e76:	6a 12                	push   0x12
c0011e78:	56                   	push   esi
c0011e79:	e8 9c 16 00 00       	call   c001351a <File::open(FileOpenMode)>
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	85 c0                	test   eax,eax
c0011e83:	0f 85 ca 00 00 00    	jne    c0011f53 <Virt::setupPageSwapping(int)+0x10d>
c0011e89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e95:	c1 e3 08             	shl    ebx,0x8
c0011e98:	83 ec 0c             	sub    esp,0xc
c0011e9b:	68 00 00 01 00       	push   0x10000
c0011ea0:	e8 9e d9 ff ff       	call   c000f843 <malloc>
c0011ea5:	83 c4 0c             	add    esp,0xc
c0011ea8:	89 c7                	mov    edi,eax
c0011eaa:	68 00 00 01 00       	push   0x10000
c0011eaf:	6a 00                	push   0x0
c0011eb1:	50                   	push   eax
c0011eb2:	e8 c1 e8 fe ff       	call   c0000778 <memset>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	85 db                	test   ebx,ebx
c0011ebc:	79 03                	jns    c0011ec1 <Virt::setupPageSwapping(int)+0x7b>
c0011ebe:	83 c3 0f             	add    ebx,0xf
c0011ec1:	c1 fb 04             	sar    ebx,0x4
c0011ec4:	4b                   	dec    ebx
c0011ec5:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec8:	74 4b                	je     c0011f15 <Virt::setupPageSwapping(int)+0xcf>
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ed3:	52                   	push   edx
c0011ed4:	57                   	push   edi
c0011ed5:	6a 00                	push   0x0
c0011ed7:	68 00 00 01 00       	push   0x10000
c0011edc:	56                   	push   esi
c0011edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ee0:	83 c4 20             	add    esp,0x20
c0011ee3:	85 c0                	test   eax,eax
c0011ee5:	75 59                	jne    c0011f40 <Virt::setupPageSwapping(int)+0xfa>
c0011ee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eeb:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ef0:	74 d2                	je     c0011ec4 <Virt::setupPageSwapping(int)+0x7e>
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	4b                   	dec    ebx
c0011ef6:	50                   	push   eax
c0011ef7:	68 98 a7 02 c0       	push   0xc002a798
c0011efc:	e8 5d 10 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011f01:	c7 04 24 a1 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7a1
c0011f08:	e8 f2 86 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	83 fb ff             	cmp    ebx,0xffffffff
c0011f13:	75 b5                	jne    c0011eca <Virt::setupPageSwapping(int)+0x84>
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	56                   	push   esi
c0011f19:	e8 5a 16 00 00       	call   c0013578 <File::close()>
c0011f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f21:	e8 3d d9 ff ff       	call   c000f863 <rfree>
c0011f26:	83 c4 10             	add    esp,0x10
c0011f29:	85 f6                	test   esi,esi
c0011f2b:	74 0c                	je     c0011f39 <Virt::setupPageSwapping(int)+0xf3>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f32:	56                   	push   esi
c0011f33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	5b                   	pop    ebx
c0011f3d:	5e                   	pop    esi
c0011f3e:	5f                   	pop    edi
c0011f3f:	c3                   	ret    
c0011f40:	83 ec 08             	sub    esp,0x8
c0011f43:	50                   	push   eax
c0011f44:	68 80 a7 02 c0       	push   0xc002a780
c0011f49:	e8 10 10 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	eb 94                	jmp    c0011ee7 <Virt::setupPageSwapping(int)+0xa1>
c0011f53:	83 ec 08             	sub    esp,0x8
c0011f56:	50                   	push   eax
c0011f57:	68 5c a7 02 c0       	push   0xc002a75c
c0011f5c:	e8 fd 0f 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0011f61:	c7 04 24 65 a7 02 c0 	mov    DWORD PTR [esp],0xc002a765
c0011f68:	e8 92 86 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	e9 14 ff ff ff       	jmp    c0011e89 <Virt::setupPageSwapping(int)+0x43>
c0011f75:	90                   	nop

c0011f76 <VAS::VAS()>:
c0011f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f85:	a3 4c e5 02 c0       	mov    ds:0xc002e54c,eax
c0011f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f96:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa4:	90                   	nop
c0011fa5:	c3                   	ret    

c0011fa6 <VAS::VAS(VAS*)>:
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb4:	83 ec 0c             	sub    esp,0xc
c0011fb7:	68 84 a5 02 c0       	push   0xc002a584
c0011fbc:	e8 3e 86 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	90                   	nop
c0011fc5:	83 c4 0c             	add    esp,0xc
c0011fc8:	c3                   	ret    
c0011fc9:	90                   	nop

c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fce:	89 c2                	mov    edx,eax
c0011fd0:	c1 e8 0a             	shr    eax,0xa
c0011fd3:	c1 ea 16             	shr    edx,0x16
c0011fd6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fdb:	19 c9                	sbb    ecx,ecx
c0011fdd:	c1 e2 0c             	shl    edx,0xc
c0011fe0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe6:	25 fc 0f 00 00       	and    eax,0xffc
c0011feb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ff2:	01 d0                	add    eax,edx
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <VAS::getPageTableEntry(unsigned long)>:
c0011ff6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ffa:	89 ca                	mov    edx,ecx
c0011ffc:	c1 e9 0a             	shr    ecx,0xa
c0011fff:	c1 ea 16             	shr    edx,0x16
c0012002:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012008:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200e:	c1 e0 0c             	shl    eax,0xc
c0012011:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012014:	c3                   	ret    

c0012015 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	be 01 00 00 00       	mov    esi,0x1
c001201c:	53                   	push   ebx
c001201d:	83 ec 10             	sub    esp,0x10
c0012020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012024:	c1 eb 0c             	shr    ebx,0xc
c0012027:	eb 3f                	jmp    c0012068 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012029:	e8 12 fe ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	57                   	push   edi
c0012032:	50                   	push   eax
c0012033:	e8 be ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	8b 00                	mov    eax,DWORD PTR [eax]
c001203d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012041:	f6 c4 04             	test   ah,0x4
c0012044:	75 5f                	jne    c00120a5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012046:	80 fa 04             	cmp    dl,0x4
c0012049:	74 78                	je     c00120c3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001204b:	80 fa 02             	cmp    dl,0x2
c001204e:	0f 84 88 00 00 00    	je     c00120dc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012054:	80 fa 03             	cmp    dl,0x3
c0012057:	0f 84 ad 00 00 00    	je     c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001205d:	fe ca                	dec    dl
c001205f:	0f 84 92 00 00 00    	je     c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012065:	43                   	inc    ebx
c0012066:	31 f6                	xor    esi,esi
c0012068:	53                   	push   ebx
c0012069:	e8 13 fb ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c001206e:	5f                   	pop    edi
c001206f:	89 df                	mov    edi,ebx
c0012071:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012075:	c1 e7 0c             	shl    edi,0xc
c0012078:	84 c0                	test   al,al
c001207a:	75 ad                	jne    c0012029 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	68 a7 a7 02 c0       	push   0xc002a7a7
c0012084:	e8 76 85 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0012089:	e8 b2 fd ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001208e:	5a                   	pop    edx
c001208f:	59                   	pop    ecx
c0012090:	57                   	push   edi
c0012091:	50                   	push   eax
c0012092:	e8 5f ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	8b 00                	mov    eax,DWORD PTR [eax]
c001209c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a0:	f6 c4 04             	test   ah,0x4
c00120a3:	74 c0                	je     c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	50                   	push   eax
c00120b2:	e8 a4 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120be:	80 fa 04             	cmp    dl,0x4
c00120c1:	75 88                	jne    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120c3:	89 f0                	mov    eax,esi
c00120c5:	84 c0                	test   al,al
c00120c7:	75 47                	jne    c0012110 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c9:	c7 44 24 20 a8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5a8
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	e9 23 85 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c00120dc:	89 f0                	mov    eax,esi
c00120de:	84 c0                	test   al,al
c00120e0:	75 15                	jne    c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	68 c3 a7 02 c0       	push   0xc002a7c3
c00120ea:	e8 10 85 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	e9 6e ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f7:	83 ec 08             	sub    esp,0x8
c00120fa:	6a 00                	push   0x0
c00120fc:	53                   	push   ebx
c00120fd:	e8 4a fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	e9 5b ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001210a:	89 f0                	mov    eax,esi
c001210c:	84 c0                	test   al,al
c001210e:	75 15                	jne    c0012125 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012110:	83 ec 08             	sub    esp,0x8
c0012113:	6a 00                	push   0x0
c0012115:	53                   	push   ebx
c0012116:	e8 31 fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	5b                   	pop    ebx
c0012122:	5e                   	pop    esi
c0012123:	5f                   	pop    edi
c0012124:	c3                   	ret    
c0012125:	c7 44 24 20 df a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7df
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	e9 c7 84 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>

c0012138 <VAS::freeAllocatedPages(unsigned long)>:
c0012138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012140:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012144:	74 09                	je     c001214f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001214a:	e9 c6 fe ff ff       	jmp    c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001214f:	c7 44 24 04 cc a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5cc
c0012157:	e9 02 0e 00 00       	jmp    c0012f5e <Dbg::kprintf(char const*, ...)>

c001215c <VAS::virtualToPhysical(unsigned long)>:
c001215c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012160:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012164:	e8 8d fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012169:	5a                   	pop    edx
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	59                   	pop    ecx
c001216d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012172:	c3                   	ret    
c0012173:	90                   	nop

c0012174 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012174:	55                   	push   ebp
c0012175:	57                   	push   edi
c0012176:	56                   	push   esi
c0012177:	53                   	push   ebx
c0012178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001217c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012180:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012184:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012188:	85 db                	test   ebx,ebx
c001218a:	7e 22                	jle    c00121ae <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001218c:	c1 e3 0c             	shl    ebx,0xc
c001218f:	01 f3                	add    ebx,esi
c0012191:	56                   	push   esi
c0012192:	81 c6 00 10 00 00    	add    esi,0x1000
c0012198:	55                   	push   ebp
c0012199:	e8 58 fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001219e:	5a                   	pop    edx
c001219f:	59                   	pop    ecx
c00121a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a2:	21 f9                	and    ecx,edi
c00121a4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a8:	39 f3                	cmp    ebx,esi
c00121aa:	89 08                	mov    DWORD PTR [eax],ecx
c00121ac:	75 e3                	jne    c0012191 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	5f                   	pop    edi
c00121b1:	5d                   	pop    ebp
c00121b2:	c3                   	ret    
c00121b3:	90                   	nop

c00121b4 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b4:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00121b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c6:	75 01                	jne    c00121c9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c8:	c3                   	ret    
c00121c9:	68 80 00 00 00       	push   0x80
c00121ce:	6a ff                	push   0xffffffff
c00121d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121dc:	e8 93 ff ff ff       	call   c0012174 <VAS::reflagRange(unsigned long, int, int, int)>
c00121e1:	83 c4 14             	add    esp,0x14
c00121e4:	c3                   	ret    
c00121e5:	90                   	nop

c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f9:	19 c0                	sbb    eax,eax
c00121fb:	83 ca 03             	or     edx,0x3
c00121fe:	83 e0 fc             	and    eax,0xfffffffc
c0012201:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012208:	0f 20 d8             	mov    eax,cr3
c001220b:	0f 22 d8             	mov    cr3,eax
c001220e:	c3                   	ret    
c001220f:	90                   	nop

c0012210 <VAS::~VAS()>:
c0012210:	83 ec 2c             	sub    esp,0x2c
c0012213:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001221b:	e8 ba bb 00 00       	call   c001ddda <lockScheduler()>
c0012220:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012225:	8b 00                	mov    eax,DWORD PTR [eax]
c0012227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001222a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012230:	83 ec 04             	sub    esp,0x4
c0012233:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012237:	6a 01                	push   0x1
c0012239:	50                   	push   eax
c001223a:	e8 a7 ff ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001224a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012252:	0f 8f d7 00 00 00    	jg     c001232f <VAS::~VAS()+0x11f>
c0012258:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012263:	c1 e2 02             	shl    edx,0x2
c0012266:	01 d0                	add    eax,edx
c0012268:	8b 00                	mov    eax,DWORD PTR [eax]
c001226a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012272:	83 e0 01             	and    eax,0x1
c0012275:	0f 84 ab 00 00 00    	je     c0012326 <VAS::~VAS()+0x116>
c001227b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012283:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001228b:	7f 75                	jg     c0012302 <VAS::~VAS()+0xf2>
c001228d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012291:	c1 e0 0a             	shl    eax,0xa
c0012294:	89 c2                	mov    edx,eax
c0012296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001229a:	01 d0                	add    eax,edx
c001229c:	c1 e0 0c             	shl    eax,0xc
c001229f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00122aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122ad:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122b3:	83 ec 04             	sub    esp,0x4
c00122b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122ba:	6a 01                	push   0x1
c00122bc:	50                   	push   eax
c00122bd:	e8 08 fd ff ff       	call   c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d7:	25 01 04 00 00       	and    eax,0x401
c00122dc:	3d 01 04 00 00       	cmp    eax,0x401
c00122e1:	75 19                	jne    c00122fc <VAS::~VAS()+0xec>
c00122e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	50                   	push   eax
c00122f0:	e8 66 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122fc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012300:	eb 81                	jmp    c0012283 <VAS::~VAS()+0x73>
c0012302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012306:	25 00 04 00 00       	and    eax,0x400
c001230b:	74 19                	je     c0012326 <VAS::~VAS()+0x116>
c001230d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012311:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	50                   	push   eax
c001231a:	e8 3c db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012326:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001232a:	e9 1b ff ff ff       	jmp    c001224a <VAS::~VAS()+0x3a>
c001232f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012333:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	50                   	push   eax
c001233a:	e8 d6 fc ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012346:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	50                   	push   eax
c001234d:	e8 09 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001235d:	c1 e0 02             	shl    eax,0x2
c0012360:	83 ec 08             	sub    esp,0x8
c0012363:	50                   	push   eax
c0012364:	68 f0 a5 02 c0       	push   0xc002a5f0
c0012369:	e8 f0 0b 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	e8 66 ba 00 00       	call   c001dddc <unlockScheduler()>
c0012376:	90                   	nop
c0012377:	83 c4 2c             	add    esp,0x2c
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001237c:	55                   	push   ebp
c001237d:	57                   	push   edi
c001237e:	56                   	push   esi
c001237f:	53                   	push   ebx
c0012380:	83 ec 1c             	sub    esp,0x1c
c0012383:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012387:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001238b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012391:	77 08                	ja     c001239b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012393:	0f 20 d8             	mov    eax,cr3
c0012396:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012399:	75 47                	jne    c00123e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001239b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239f:	09 d8                	or     eax,ebx
c00123a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a6:	75 57                	jne    c00123ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a8:	89 de                	mov    esi,ebx
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 ee 16             	shr    esi,0x16
c00123b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123bb:	74 54                	je     c0012411 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123cb:	c1 e6 0c             	shl    esi,0xc
c00123ce:	c1 eb 0a             	shr    ebx,0xa
c00123d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123da:	83 c4 1c             	add    esp,0x1c
c00123dd:	5b                   	pop    ebx
c00123de:	5e                   	pop    esi
c00123df:	5f                   	pop    edi
c00123e0:	5d                   	pop    ebp
c00123e1:	c3                   	ret    
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	68 10 a6 02 c0       	push   0xc002a610
c00123ea:	e8 6f 0b 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f6:	09 d8                	or     eax,ebx
c00123f8:	a9 ff 0f 00 00       	test   eax,0xfff
c00123fd:	74 a9                	je     c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	68 78 a6 02 c0       	push   0xc002a678
c0012407:	e8 f3 81 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	eb 97                	jmp    c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012415:	e8 cb da ff ff       	call   c000fee5 <Phys::allocatePage()>
c001241a:	89 c5                	mov    ebp,eax
c001241c:	e8 1f fa ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012428:	6a 01                	push   0x1
c001242a:	e8 76 f7 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001242f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012436:	6a 01                	push   0x1
c0012438:	50                   	push   eax
c0012439:	55                   	push   ebp
c001243a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012440:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012444:	51                   	push   ecx
c0012445:	e8 26 02 00 00       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	68 00 10 00 00       	push   0x1000
c0012452:	6a 00                	push   0x0
c0012454:	50                   	push   eax
c0012455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012459:	e8 1a e3 fe ff       	call   c0000778 <memset>
c001245e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012462:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012465:	e8 ab fb ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001246a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012477:	e9 41 ff ff ff       	jmp    c00123bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001247c <VAS::allocatePages(int, int)>:
c001247c:	55                   	push   ebp
c001247d:	57                   	push   edi
c001247e:	56                   	push   esi
c001247f:	53                   	push   ebx
c0012480:	83 ec 1c             	sub    esp,0x1c
c0012483:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012487:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001248c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012492:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012498:	83 e0 01             	and    eax,0x1
c001249b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124a3:	0f 85 cc 00 00 00    	jne    c0012575 <VAS::allocatePages(int, int)+0xf9>
c00124a9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b0:	85 c0                	test   eax,eax
c00124b2:	0f 84 a1 00 00 00    	je     c0012559 <VAS::allocatePages(int, int)+0xdd>
c00124b8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c0:	c1 e6 0c             	shl    esi,0xc
c00124c3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c7:	85 c0                	test   eax,eax
c00124c9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124cc:	7e 33                	jle    c0012501 <VAS::allocatePages(int, int)+0x85>
c00124ce:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d6:	81 cd 00 04 00 00    	or     ebp,0x400
c00124dc:	e8 04 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c00124e1:	55                   	push   ebp
c00124e2:	53                   	push   ebx
c00124e3:	50                   	push   eax
c00124e4:	57                   	push   edi
c00124e5:	e8 92 fe ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f2:	74 03                	je     c00124f7 <VAS::allocatePages(int, int)+0x7b>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 de                	cmp    esi,ebx
c00124ff:	75 db                	jne    c00124dc <VAS::allocatePages(int, int)+0x60>
c0012501:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012506:	75 12                	jne    c001251a <VAS::allocatePages(int, int)+0x9e>
c0012508:	0f 20 d8             	mov    eax,cr3
c001250b:	0f 22 d8             	mov    cr3,eax
c001250e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012512:	83 c4 1c             	add    esp,0x1c
c0012515:	5b                   	pop    ebx
c0012516:	5e                   	pop    esi
c0012517:	5f                   	pop    edi
c0012518:	5d                   	pop    ebp
c0012519:	c3                   	ret    
c001251a:	c1 ee 0a             	shr    esi,0xa
c001251d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012521:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012527:	c1 eb 0a             	shr    ebx,0xa
c001252a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012530:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012536:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253c:	39 c3                	cmp    ebx,eax
c001253e:	77 ce                	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012540:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012543:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012549:	39 d8                	cmp    eax,ebx
c001254b:	73 f3                	jae    c0012540 <VAS::allocatePages(int, int)+0xc4>
c001254d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012551:	83 c4 1c             	add    esp,0x1c
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	5d                   	pop    ebp
c0012558:	c3                   	ret    
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 9c a6 02 c0       	push   0xc002a69c
c0012561:	e8 99 80 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0012566:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012569:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	e9 43 ff ff ff       	jmp    c00124b8 <VAS::allocatePages(int, int)+0x3c>
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001257c:	e8 24 f6 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001258d:	0f 87 9b 00 00 00    	ja     c001262e <VAS::allocatePages(int, int)+0x1b2>
c0012593:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012597:	85 d2                	test   edx,edx
c0012599:	7e 3c                	jle    c00125d7 <VAS::allocatePages(int, int)+0x15b>
c001259b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a7:	c1 e5 0c             	shl    ebp,0xc
c00125aa:	81 ce 00 04 00 00    	or     esi,0x400
c00125b0:	01 dd                	add    ebp,ebx
c00125b2:	e8 2e d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00125b7:	56                   	push   esi
c00125b8:	53                   	push   ebx
c00125b9:	50                   	push   eax
c00125ba:	57                   	push   edi
c00125bb:	e8 bc fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c8:	74 03                	je     c00125cd <VAS::allocatePages(int, int)+0x151>
c00125ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d3:	39 dd                	cmp    ebp,ebx
c00125d5:	75 db                	jne    c00125b2 <VAS::allocatePages(int, int)+0x136>
c00125d7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125dc:	0f 84 26 ff ff ff    	je     c0012508 <VAS::allocatePages(int, int)+0x8c>
c00125e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125ea:	89 d3                	mov    ebx,edx
c00125ec:	c1 e0 0c             	shl    eax,0xc
c00125ef:	c1 eb 0a             	shr    ebx,0xa
c00125f2:	01 d0                	add    eax,edx
c00125f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125fa:	c1 e8 0a             	shr    eax,0xa
c00125fd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012603:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012608:	2d 00 00 40 00       	sub    eax,0x400000
c001260d:	39 c3                	cmp    ebx,eax
c001260f:	0f 87 f9 fe ff ff    	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012615:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012618:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261e:	39 d8                	cmp    eax,ebx
c0012620:	73 f3                	jae    c0012615 <VAS::allocatePages(int, int)+0x199>
c0012622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012626:	83 c4 1c             	add    esp,0x1c
c0012629:	5b                   	pop    ebx
c001262a:	5e                   	pop    esi
c001262b:	5f                   	pop    edi
c001262c:	5d                   	pop    ebp
c001262d:	c3                   	ret    
c001262e:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0012633:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012639:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012640:	0f 84 4d ff ff ff    	je     c0012593 <VAS::allocatePages(int, int)+0x117>
c0012646:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264e:	e9 40 ff ff ff       	jmp    c0012593 <VAS::allocatePages(int, int)+0x117>
c0012653:	90                   	nop

c0012654 <VAS::setCPUSpecific(unsigned long)>:
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	6a 05                	push   0x5
c0012659:	68 00 00 40 c2       	push   0xc2400000
c001265e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012666:	e8 11 fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001266b:	83 c4 1c             	add    esp,0x1c
c001266e:	c3                   	ret    
c001266f:	90                   	nop

c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012670:	55                   	push   ebp
c0012671:	57                   	push   edi
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	83 ec 1c             	sub    esp,0x1c
c0012677:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001267c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012680:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012686:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001268a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012690:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012694:	83 e0 01             	and    eax,0x1
c0012697:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001269b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269f:	85 c0                	test   eax,eax
c00126a1:	7e 39                	jle    c00126dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	c1 e0 0c             	shl    eax,0xc
c00126ac:	01 f0                	add    eax,esi
c00126ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b2:	55                   	push   ebp
c00126b3:	53                   	push   ebx
c00126b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b8:	29 f0                	sub    eax,esi
c00126ba:	01 d8                	add    eax,ebx
c00126bc:	50                   	push   eax
c00126bd:	57                   	push   edi
c00126be:	e8 b9 fc ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126cb:	74 03                	je     c00126d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126da:	75 d6                	jne    c00126b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126dc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126e1:	75 10                	jne    c00126f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126e3:	0f 20 d8             	mov    eax,cr3
c00126e6:	0f 22 d8             	mov    cr3,eax
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	89 f0                	mov    eax,esi
c00126ee:	5b                   	pop    ebx
c00126ef:	5e                   	pop    esi
c00126f0:	5f                   	pop    edi
c00126f1:	5d                   	pop    ebp
c00126f2:	c3                   	ret    
c00126f3:	89 f3                	mov    ebx,esi
c00126f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f9:	c1 eb 0a             	shr    ebx,0xa
c00126fc:	c1 e0 0c             	shl    eax,0xc
c00126ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012705:	01 f0                	add    eax,esi
c0012707:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001270d:	c1 e8 0a             	shr    eax,0xa
c0012710:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012715:	2d 00 00 40 00       	sub    eax,0x400000
c001271a:	39 c3                	cmp    ebx,eax
c001271c:	77 cb                	ja     c00126e9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012721:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012727:	39 d8                	cmp    eax,ebx
c0012729:	73 f3                	jae    c001271e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001272b:	83 c4 1c             	add    esp,0x1c
c001272e:	89 f0                	mov    eax,esi
c0012730:	5b                   	pop    ebx
c0012731:	5e                   	pop    esi
c0012732:	5f                   	pop    edi
c0012733:	5d                   	pop    ebp
c0012734:	c3                   	ret    
c0012735:	90                   	nop

c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012736:	55                   	push   ebp
c0012737:	57                   	push   edi
c0012738:	56                   	push   esi
c0012739:	53                   	push   ebx
c001273a:	83 ec 1c             	sub    esp,0x1c
c001273d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012741:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012745:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012749:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012752:	75 4a                	jne    c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012754:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012758:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001275b:	c1 eb 16             	shr    ebx,0x16
c001275e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012765:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012769:	74 4d                	je     c00127b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001276b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012773:	c1 e8 0a             	shr    eax,0xa
c0012776:	80 fa 01             	cmp    dl,0x1
c0012779:	19 d2                	sbb    edx,edx
c001277b:	c1 e3 0c             	shl    ebx,0xc
c001277e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012782:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012788:	25 fc 0f 00 00       	and    eax,0xffc
c001278d:	01 d8                	add    eax,ebx
c001278f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012796:	83 c4 1c             	add    esp,0x1c
c0012799:	5b                   	pop    ebx
c001279a:	5e                   	pop    esi
c001279b:	5f                   	pop    edi
c001279c:	5d                   	pop    ebp
c001279d:	c3                   	ret    
c001279e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	68 c8 a6 02 c0       	push   0xc002a6c8
c00127aa:	e8 50 7e 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b6:	eb 9c                	jmp    c0012754 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127bc:	e8 24 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00127c1:	89 c5                	mov    ebp,eax
c00127c3:	e8 78 f6 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cf:	6a 01                	push   0x1
c00127d1:	e8 cf f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c00127d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127dd:	6a 01                	push   0x1
c00127df:	50                   	push   eax
c00127e0:	55                   	push   ebp
c00127e1:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127eb:	51                   	push   ecx
c00127ec:	e8 7f fe ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127f1:	83 c4 1c             	add    esp,0x1c
c00127f4:	68 00 10 00 00       	push   0x1000
c00127f9:	6a 00                	push   0x0
c00127fb:	50                   	push   eax
c00127fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012800:	e8 73 df fe ff       	call   c0000778 <memset>
c0012805:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012809:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280c:	e8 04 f8 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0012811:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001281a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281e:	e9 48 ff ff ff       	jmp    c001276b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012823:	90                   	nop

c0012824 <VAS::VAS(bool)>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 28             	sub    esp,0x28
c0012828:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001282c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012843:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012846:	e8 9a d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001284b:	89 c2                	mov    edx,eax
c001284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012851:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012854:	e8 e7 f5 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012859:	89 c3                	mov    ebx,eax
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	6a 01                	push   0x1
c0012860:	e8 40 f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	89 c2                	mov    edx,eax
c001286a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012871:	83 ec 0c             	sub    esp,0xc
c0012874:	6a 03                	push   0x3
c0012876:	6a 01                	push   0x1
c0012878:	52                   	push   edx
c0012879:	50                   	push   eax
c001287a:	53                   	push   ebx
c001287b:	e8 f0 fd ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012880:	83 c4 20             	add    esp,0x20
c0012883:	89 c2                	mov    edx,eax
c0012885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012889:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001288c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012894:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001289c:	7f 1c                	jg     c00128ba <VAS::VAS(bool)+0x96>
c001289e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a9:	c1 e2 02             	shl    edx,0x2
c00128ac:	01 d0                	add    eax,edx
c00128ae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b8:	eb da                	jmp    c0012894 <VAS::VAS(bool)+0x70>
c00128ba:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128c2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128ca:	7f 7a                	jg     c0012946 <VAS::VAS(bool)+0x122>
c00128cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d0:	2d 00 02 00 00       	sub    eax,0x200
c00128d5:	c1 e0 0c             	shl    eax,0xc
c00128d8:	83 c8 03             	or     eax,0x3
c00128db:	89 c2                	mov    edx,eax
c00128dd:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ee:	83 e0 10             	and    eax,0x10
c00128f1:	84 c0                	test   al,al
c00128f3:	74 07                	je     c00128fc <VAS::VAS(bool)+0xd8>
c00128f5:	b8 00 01 00 00       	mov    eax,0x100
c00128fa:	eb 05                	jmp    c0012901 <VAS::VAS(bool)+0xdd>
c00128fc:	b8 00 00 00 00       	mov    eax,0x0
c0012901:	09 d0                	or     eax,edx
c0012903:	89 c1                	mov    ecx,eax
c0012905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012910:	c1 e2 02             	shl    edx,0x2
c0012913:	01 d0                	add    eax,edx
c0012915:	89 ca                	mov    edx,ecx
c0012917:	89 10                	mov    DWORD PTR [eax],edx
c0012919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001291d:	2d 40 03 00 00       	sub    eax,0x340
c0012922:	83 f8 7f             	cmp    eax,0x7f
c0012925:	77 16                	ja     c001293d <VAS::VAS(bool)+0x119>
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012932:	c1 e2 02             	shl    edx,0x2
c0012935:	01 d0                	add    eax,edx
c0012937:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001293d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012941:	e9 7c ff ff ff       	jmp    c00128c2 <VAS::VAS(bool)+0x9e>
c0012946:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001294b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012951:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012957:	83 e0 10             	and    eax,0x10
c001295a:	84 c0                	test   al,al
c001295c:	74 07                	je     c0012965 <VAS::VAS(bool)+0x141>
c001295e:	b8 03 41 00 00       	mov    eax,0x4103
c0012963:	eb 05                	jmp    c001296a <VAS::VAS(bool)+0x146>
c0012965:	b8 03 40 00 00       	mov    eax,0x4003
c001296a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012971:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012977:	89 02                	mov    DWORD PTR [edx],eax
c0012979:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001297e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	50                   	push   eax
c001298e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012992:	e8 bd fc ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129a1:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00129a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b2:	83 e0 10             	and    eax,0x10
c00129b5:	84 c0                	test   al,al
c00129b7:	74 07                	je     c00129c0 <VAS::VAS(bool)+0x19c>
c00129b9:	b8 00 01 00 00       	mov    eax,0x100
c00129be:	eb 05                	jmp    c00129c5 <VAS::VAS(bool)+0x1a1>
c00129c0:	b8 00 00 00 00       	mov    eax,0x0
c00129c5:	09 c2                	or     edx,eax
c00129c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ce:	05 fc 0f 00 00       	add    eax,0xffc
c00129d3:	83 ca 03             	or     edx,0x3
c00129d6:	89 10                	mov    DWORD PTR [eax],edx
c00129d8:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00129dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e3:	83 ec 0c             	sub    esp,0xc
c00129e6:	50                   	push   eax
c00129e7:	e8 84 1c 00 00       	call   c0014670 <Device::getName()>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	83 ec 08             	sub    esp,0x8
c00129f2:	68 f9 a7 02 c0       	push   0xc002a7f9
c00129f7:	50                   	push   eax
c00129f8:	e8 c3 de fe ff       	call   c00008c0 <strcmp>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	85 c0                	test   eax,eax
c0012a02:	0f 94 c0             	sete   al
c0012a05:	84 c0                	test   al,al
c0012a07:	74 70                	je     c0012a79 <VAS::VAS(bool)+0x255>
c0012a09:	e8 af b3 00 00       	call   c001ddbd <disableIRQs()>
c0012a0e:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0012a13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a19:	05 7c 09 00 00       	add    eax,0x97c
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 95 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2f:	89 c3                	mov    ebx,eax
c0012a31:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0012a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3c:	05 7c 09 00 00       	add    eax,0x97c
c0012a41:	83 ec 0c             	sub    esp,0xc
c0012a44:	50                   	push   eax
c0012a45:	e8 72 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	83 ec 08             	sub    esp,0x8
c0012a50:	50                   	push   eax
c0012a51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a55:	e8 9c f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012a5a:	83 c4 10             	add    esp,0x10
c0012a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a64:	6a 11                	push   0x11
c0012a66:	53                   	push   ebx
c0012a67:	50                   	push   eax
c0012a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6c:	e8 0b f9 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	e8 52 b3 00 00       	call   c001ddcb <enableIRQs()>
c0012a79:	90                   	nop
c0012a7a:	83 c4 28             	add    esp,0x28
c0012a7d:	5b                   	pop    ebx
c0012a7e:	c3                   	ret    
c0012a7f:	90                   	nop

c0012a80 <VAS::evict(unsigned long)>:
c0012a80:	55                   	push   ebp
c0012a81:	57                   	push   edi
c0012a82:	56                   	push   esi
c0012a83:	53                   	push   ebx
c0012a84:	83 ec 1c             	sub    esp,0x1c
c0012a87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a93:	e8 42 b3 00 00       	call   c001ddda <lockScheduler()>
c0012a98:	e8 49 f2 ff ff       	call   c0011ce6 <Virt::allocateSwapfilePage()>
c0012a9d:	89 c7                	mov    edi,eax
c0012a9f:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0012aa4:	85 c0                	test   eax,eax
c0012aa6:	7e 3d                	jle    c0012ae5 <VAS::evict(unsigned long)+0x65>
c0012aa8:	89 ee                	mov    esi,ebp
c0012aaa:	31 db                	xor    ebx,ebx
c0012aac:	83 ec 0c             	sub    esp,0xc
c0012aaf:	57                   	push   edi
c0012ab0:	e8 1f f2 ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab8:	01 d8                	add    eax,ebx
c0012aba:	6a 01                	push   0x1
c0012abc:	31 d2                	xor    edx,edx
c0012abe:	43                   	inc    ebx
c0012abf:	52                   	push   edx
c0012ac0:	81 c6 00 02 00 00    	add    esi,0x200
c0012ac6:	50                   	push   eax
c0012ac7:	0f be 05 78 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d378
c0012ace:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c0012ad5:	e8 00 3d 00 00       	call   c00167da <LogicalDisk::write(unsigned long long, int, void*)>
c0012ada:	83 c4 20             	add    esp,0x20
c0012add:	39 1d 6c d3 02 c0    	cmp    DWORD PTR ds:0xc002d36c,ebx
c0012ae3:	7f c7                	jg     c0012aac <VAS::evict(unsigned long)+0x2c>
c0012ae5:	83 ec 08             	sub    esp,0x8
c0012ae8:	c1 e7 0b             	shl    edi,0xb
c0012aeb:	55                   	push   ebp
c0012aec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af0:	e8 01 f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012af5:	89 c3                	mov    ebx,eax
c0012af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012af9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b01:	e8 55 d3 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012b06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b08:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b0e:	09 d7                	or     edi,edx
c0012b10:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b12:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0012b17:	40                   	inc    eax
c0012b18:	a3 44 e5 02 c0       	mov    ds:0xc002e544,eax
c0012b1d:	0f 20 da             	mov    edx,cr3
c0012b20:	0f 22 da             	mov    cr3,edx
c0012b23:	83 c4 0c             	add    esp,0xc
c0012b26:	50                   	push   eax
c0012b27:	55                   	push   ebp
c0012b28:	68 07 a8 02 c0       	push   0xc002a807
c0012b2d:	e8 2c 04 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012b32:	83 c4 2c             	add    esp,0x2c
c0012b35:	5b                   	pop    ebx
c0012b36:	5e                   	pop    esi
c0012b37:	5f                   	pop    edi
c0012b38:	5d                   	pop    ebp
c0012b39:	e9 9e b2 00 00       	jmp    c001dddc <unlockScheduler()>

c0012b3e <VAS::scanForEviction(int, int)>:
c0012b3e:	55                   	push   ebp
c0012b3f:	31 ed                	xor    ebp,ebp
c0012b41:	57                   	push   edi
c0012b42:	56                   	push   esi
c0012b43:	be 00 00 40 00       	mov    esi,0x400000
c0012b48:	53                   	push   ebx
c0012b49:	83 ec 28             	sub    esp,0x28
c0012b4c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012b50:	68 1c a8 02 c0       	push   0xc002a81c
c0012b55:	e8 04 04 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	ff 05 50 e5 02 c0    	inc    DWORD PTR ds:0xc002e550
c0012b63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b6b:	eb 11                	jmp    c0012b7e <VAS::scanForEviction(int, int)+0x40>
c0012b6d:	83 c5 04             	add    ebp,0x4
c0012b70:	81 c6 00 00 40 00    	add    esi,0x400000
c0012b76:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c0012b7c:	74 65                	je     c0012be3 <VAS::scanForEviction(int, int)+0xa5>
c0012b7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012b81:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012b85:	74 e6                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012b87:	8d be 00 00 c0 ff    	lea    edi,[esi-0x400000]
c0012b8d:	eb 0a                	jmp    c0012b99 <VAS::scanForEviction(int, int)+0x5b>
c0012b8f:	81 c7 00 10 00 00    	add    edi,0x1000
c0012b95:	39 fe                	cmp    esi,edi
c0012b97:	74 d4                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012b99:	83 ec 08             	sub    esp,0x8
c0012b9c:	57                   	push   edi
c0012b9d:	53                   	push   ebx
c0012b9e:	e8 53 f4 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba8:	89 c1                	mov    ecx,eax
c0012baa:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012bb0:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012bb6:	75 d7                	jne    c0012b8f <VAS::scanForEviction(int, int)+0x51>
c0012bb8:	a8 01                	test   al,0x1
c0012bba:	74 d3                	je     c0012b8f <VAS::scanForEviction(int, int)+0x51>
c0012bbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012bc1:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0012bc6:	76 c7                	jbe    c0012b8f <VAS::scanForEviction(int, int)+0x51>
c0012bc8:	83 ec 08             	sub    esp,0x8
c0012bcb:	57                   	push   edi
c0012bcc:	53                   	push   ebx
c0012bcd:	e8 ae fe ff ff       	call   c0012a80 <VAS::evict(unsigned long)>
c0012bd2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012bd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012be1:	75 ac                	jne    c0012b8f <VAS::scanForEviction(int, int)+0x51>
c0012be3:	83 c4 1c             	add    esp,0x1c
c0012be6:	5b                   	pop    ebx
c0012be7:	5e                   	pop    esi
c0012be8:	5f                   	pop    edi
c0012be9:	5d                   	pop    ebp
c0012bea:	c3                   	ret    
c0012beb:	90                   	nop

c0012bec <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bec:	55                   	push   ebp
c0012bed:	57                   	push   edi
c0012bee:	56                   	push   esi
c0012bef:	53                   	push   ebx
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	e8 e2 b1 00 00       	call   c001ddda <lockScheduler()>
c0012bf8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012bfc:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012c02:	74 33                	je     c0012c37 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c0012c04:	83 ec 08             	sub    esp,0x8
c0012c07:	56                   	push   esi
c0012c08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c0c:	e8 e5 f3 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012c11:	83 c4 10             	add    esp,0x10
c0012c14:	89 c3                	mov    ebx,eax
c0012c16:	85 c0                	test   eax,eax
c0012c18:	74 0e                	je     c0012c28 <VAS::tryLoadBackOffDisk(unsigned long)+0x3c>
c0012c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c1c:	25 01 04 00 00       	and    eax,0x401
c0012c21:	3d 00 04 00 00       	cmp    eax,0x400
c0012c26:	74 19                	je     c0012c41 <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c0012c28:	e8 af b1 00 00       	call   c001dddc <unlockScheduler()>
c0012c2d:	31 c0                	xor    eax,eax
c0012c2f:	83 c4 0c             	add    esp,0xc
c0012c32:	5b                   	pop    ebx
c0012c33:	5e                   	pop    esi
c0012c34:	5f                   	pop    edi
c0012c35:	5d                   	pop    ebp
c0012c36:	c3                   	ret    
c0012c37:	83 c4 0c             	add    esp,0xc
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	5b                   	pop    ebx
c0012c3d:	5e                   	pop    esi
c0012c3e:	5f                   	pop    edi
c0012c3f:	5d                   	pop    ebp
c0012c40:	c3                   	ret    
c0012c41:	c6 05 00 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e400,0x1
c0012c48:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012c4a:	e8 96 d2 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012c4f:	c1 ed 0b             	shr    ebp,0xb
c0012c52:	c6 05 00 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e400,0x0
c0012c59:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c5b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c61:	09 c2                	or     edx,eax
c0012c63:	81 ca 01 08 00 00    	or     edx,0x801
c0012c69:	89 13                	mov    DWORD PTR [ebx],edx
c0012c6b:	8b 0d 6c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d36c
c0012c71:	85 c9                	test   ecx,ecx
c0012c73:	7e 3d                	jle    c0012cb2 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0012c75:	89 f7                	mov    edi,esi
c0012c77:	31 db                	xor    ebx,ebx
c0012c79:	83 ec 0c             	sub    esp,0xc
c0012c7c:	55                   	push   ebp
c0012c7d:	e8 52 f0 ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012c82:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c85:	01 d8                	add    eax,ebx
c0012c87:	6a 01                	push   0x1
c0012c89:	31 d2                	xor    edx,edx
c0012c8b:	43                   	inc    ebx
c0012c8c:	52                   	push   edx
c0012c8d:	81 c7 00 02 00 00    	add    edi,0x200
c0012c93:	50                   	push   eax
c0012c94:	0f be 05 78 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d378
c0012c9b:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c0012ca2:	e8 c7 3a 00 00       	call   c001676e <LogicalDisk::read(unsigned long long, int, void*)>
c0012ca7:	83 c4 20             	add    esp,0x20
c0012caa:	39 1d 6c d3 02 c0    	cmp    DWORD PTR ds:0xc002d36c,ebx
c0012cb0:	7f c7                	jg     c0012c79 <VAS::tryLoadBackOffDisk(unsigned long)+0x8d>
c0012cb2:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0012cb7:	48                   	dec    eax
c0012cb8:	52                   	push   edx
c0012cb9:	a3 44 e5 02 c0       	mov    ds:0xc002e544,eax
c0012cbe:	50                   	push   eax
c0012cbf:	56                   	push   esi
c0012cc0:	68 35 a8 02 c0       	push   0xc002a835
c0012cc5:	e8 94 02 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012cca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ccd:	e8 e4 ef ff ff       	call   c0011cb6 <Virt::freeSwapfilePage(unsigned long)>
c0012cd2:	e8 05 b1 00 00       	call   c001dddc <unlockScheduler()>
c0012cd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	25 ff 0f 00 00       	and    eax,0xfff
c0012ce3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ce8:	77 1d                	ja     c0012d07 <VAS::tryLoadBackOffDisk(unsigned long)+0x11b>
c0012cea:	a1 54 e5 02 c0       	mov    eax,ds:0xc002e554
c0012cef:	40                   	inc    eax
c0012cf0:	a3 54 e5 02 c0       	mov    ds:0xc002e554,eax
c0012cf5:	83 f8 02             	cmp    eax,0x2
c0012cf8:	74 25                	je     c0012d1f <VAS::tryLoadBackOffDisk(unsigned long)+0x133>
c0012cfa:	0f 20 d8             	mov    eax,cr3
c0012cfd:	0f 22 d8             	mov    cr3,eax
c0012d00:	b0 01                	mov    al,0x1
c0012d02:	e9 28 ff ff ff       	jmp    c0012c2f <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012d07:	83 ec 08             	sub    esp,0x8
c0012d0a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012d10:	56                   	push   esi
c0012d11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d15:	e8 d2 fe ff ff       	call   c0012bec <VAS::tryLoadBackOffDisk(unsigned long)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	eb cb                	jmp    c0012cea <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c0012d1f:	50                   	push   eax
c0012d20:	6a 04                	push   0x4
c0012d22:	6a 01                	push   0x1
c0012d24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d28:	e8 11 fe ff ff       	call   c0012b3e <VAS::scanForEviction(int, int)>
c0012d2d:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	eb be                	jmp    c0012cfa <VAS::tryLoadBackOffDisk(unsigned long)+0x10e>

c0012d3c <mapVASFirstTime>:
c0012d3c:	55                   	push   ebp
c0012d3d:	57                   	push   edi
c0012d3e:	56                   	push   esi
c0012d3f:	53                   	push   ebx
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d48:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d4b:	4a                   	dec    edx
c0012d4c:	0f 84 8e 00 00 00    	je     c0012de0 <mapVASFirstTime+0xa4>
c0012d52:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d55:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d58:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d5d:	c1 e5 15             	shl    ebp,0x15
c0012d60:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d65:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d6b:	29 eb                	sub    ebx,ebp
c0012d6d:	29 ee                	sub    esi,ebp
c0012d6f:	e8 71 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	68 03 04 00 00       	push   0x403
c0012d7c:	6a 01                	push   0x1
c0012d7e:	53                   	push   ebx
c0012d7f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d85:	50                   	push   eax
c0012d86:	57                   	push   edi
c0012d87:	e8 e4 f8 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d8c:	83 c4 20             	add    esp,0x20
c0012d8f:	39 f3                	cmp    ebx,esi
c0012d91:	75 dc                	jne    c0012d6f <mapVASFirstTime+0x33>
c0012d93:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d98:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d9d:	29 ee                	sub    esi,ebp
c0012d9f:	29 e8                	sub    eax,ebp
c0012da1:	89 c5                	mov    ebp,eax
c0012da3:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012da7:	19 db                	sbb    ebx,ebx
c0012da9:	e8 37 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012dae:	83 e3 04             	and    ebx,0x4
c0012db1:	83 ec 0c             	sub    esp,0xc
c0012db4:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dba:	53                   	push   ebx
c0012dbb:	6a 01                	push   0x1
c0012dbd:	56                   	push   esi
c0012dbe:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dc4:	50                   	push   eax
c0012dc5:	57                   	push   edi
c0012dc6:	e8 a5 f8 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dcb:	83 c4 20             	add    esp,0x20
c0012dce:	39 f5                	cmp    ebp,esi
c0012dd0:	75 d1                	jne    c0012da3 <mapVASFirstTime+0x67>
c0012dd2:	0f 20 d8             	mov    eax,cr3
c0012dd5:	0f 22 d8             	mov    cr3,eax
c0012dd8:	83 c4 0c             	add    esp,0xc
c0012ddb:	5b                   	pop    ebx
c0012ddc:	5e                   	pop    esi
c0012ddd:	5f                   	pop    edi
c0012dde:	5d                   	pop    ebp
c0012ddf:	c3                   	ret    
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	68 4a a8 02 c0       	push   0xc002a84a
c0012de8:	e8 71 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	83 c4 0c             	add    esp,0xc
c0012df3:	5b                   	pop    ebx
c0012df4:	5e                   	pop    esi
c0012df5:	5f                   	pop    edi
c0012df6:	5d                   	pop    ebp
c0012df7:	c3                   	ret    

c0012df8 <__cxa_atexit>:
c0012df8:	31 c0                	xor    eax,eax
c0012dfa:	c3                   	ret    

c0012dfb <__cxa_finalize>:
c0012dfb:	c3                   	ret    

c0012dfc <__stack_chk_fail>:
c0012dfc:	55                   	push   ebp
c0012dfd:	89 e5                	mov    ebp,esp
c0012dff:	83 ec 14             	sub    esp,0x14
c0012e02:	68 63 a8 02 c0       	push   0xc002a863
c0012e07:	e8 52 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012e0c:	58                   	pop    eax
c0012e0d:	5a                   	pop    edx
c0012e0e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e11:	68 b3 a8 02 c0       	push   0xc002a8b3
c0012e16:	e8 43 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012e1b:	59                   	pop    ecx
c0012e1c:	58                   	pop    eax
c0012e1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e20:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e23:	68 b3 a8 02 c0       	push   0xc002a8b3
c0012e28:	e8 31 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012e2d:	5a                   	pop    edx
c0012e2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e31:	59                   	pop    ecx
c0012e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e34:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e37:	68 b3 a8 02 c0       	push   0xc002a8b3
c0012e3c:	e8 1d 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012e41:	5a                   	pop    edx
c0012e42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e45:	59                   	pop    ecx
c0012e46:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e4a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e4d:	68 b3 a8 02 c0       	push   0xc002a8b3
c0012e52:	e8 07 01 00 00       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0012e57:	c7 04 24 bb a8 02 c0 	mov    DWORD PTR [esp],0xc002a8bb
c0012e5e:	e8 9c 77 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0012e63:	83 c4 10             	add    esp,0x10
c0012e66:	c9                   	leave  
c0012e67:	c3                   	ret    

c0012e68 <__cxa_pure_virtual>:
c0012e68:	83 ec 18             	sub    esp,0x18
c0012e6b:	68 d3 a8 02 c0       	push   0xc002a8d3
c0012e70:	e8 8a 77 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0012e75:	83 c4 1c             	add    esp,0x1c
c0012e78:	c3                   	ret    

c0012e79 <operator new[](unsigned long)>:
c0012e79:	e9 c5 c9 ff ff       	jmp    c000f843 <malloc>

c0012e7e <operator delete(void*, unsigned long)>:
c0012e7e:	e9 e0 c9 ff ff       	jmp    c000f863 <rfree>

c0012e83 <operator delete[](void*)>:
c0012e83:	e9 db c9 ff ff       	jmp    c000f863 <rfree>

c0012e88 <operator delete[](void*, unsigned long)>:
c0012e88:	e9 d6 c9 ff ff       	jmp    c000f863 <rfree>

c0012e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e8d:	57                   	push   edi
c0012e8e:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e93:	56                   	push   esi
c0012e94:	be e8 a8 02 c0       	mov    esi,0xc002a8e8
c0012e99:	53                   	push   ebx
c0012e9a:	83 ec 40             	sub    esp,0x40
c0012e9d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ea1:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ea5:	fc                   	cld    
c0012ea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ea8:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012eac:	83 f9 3e             	cmp    ecx,0x3e
c0012eaf:	7e 05                	jle    c0012eb6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012eb1:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012eb6:	89 df                	mov    edi,ebx
c0012eb8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ebc:	eb 02                	jmp    c0012ec0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ebe:	89 c7                	mov    edi,eax
c0012ec0:	31 d2                	xor    edx,edx
c0012ec2:	46                   	inc    esi
c0012ec3:	89 f8                	mov    eax,edi
c0012ec5:	f7 f1                	div    ecx
c0012ec7:	39 cf                	cmp    edi,ecx
c0012ec9:	73 f3                	jae    c0012ebe <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ecb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ece:	eb 02                	jmp    c0012ed2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ed0:	89 c3                	mov    ebx,eax
c0012ed2:	31 d2                	xor    edx,edx
c0012ed4:	4e                   	dec    esi
c0012ed5:	89 d8                	mov    eax,ebx
c0012ed7:	f7 f1                	div    ecx
c0012ed9:	39 cb                	cmp    ebx,ecx
c0012edb:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012edf:	88 16                	mov    BYTE PTR [esi],dl
c0012ee1:	73 ed                	jae    c0012ed0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ee3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ee7:	83 c4 40             	add    esp,0x40
c0012eea:	5b                   	pop    ebx
c0012eeb:	5e                   	pop    esi
c0012eec:	5f                   	pop    edi
c0012eed:	c3                   	ret    

c0012eee <Dbg::logc(char)>:
c0012eee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef2:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ef7:	ec                   	in     al,dx
c0012ef8:	a8 20                	test   al,0x20
c0012efa:	74 fb                	je     c0012ef7 <Dbg::logc(char)+0x9>
c0012efc:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f01:	88 c8                	mov    al,cl
c0012f03:	ee                   	out    dx,al
c0012f04:	c3                   	ret    

c0012f05 <Dbg::logs(char*)>:
c0012f05:	53                   	push   ebx
c0012f06:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f0a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f0d:	84 c0                	test   al,al
c0012f0f:	74 0f                	je     c0012f20 <Dbg::logs(char*)+0x1b>
c0012f11:	50                   	push   eax
c0012f12:	43                   	inc    ebx
c0012f13:	e8 d6 ff ff ff       	call   c0012eee <Dbg::logc(char)>
c0012f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f1b:	5a                   	pop    edx
c0012f1c:	84 c0                	test   al,al
c0012f1e:	75 f1                	jne    c0012f11 <Dbg::logs(char*)+0xc>
c0012f20:	5b                   	pop    ebx
c0012f21:	c3                   	ret    

c0012f22 <Dbg::logWriteInt(unsigned int)>:
c0012f22:	83 ec 10             	sub    esp,0x10
c0012f25:	6a 0a                	push   0xa
c0012f27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f2b:	50                   	push   eax
c0012f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f30:	e8 58 ff ff ff       	call   c0012e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f35:	50                   	push   eax
c0012f36:	e8 ca ff ff ff       	call   c0012f05 <Dbg::logs(char*)>
c0012f3b:	83 c4 20             	add    esp,0x20
c0012f3e:	c3                   	ret    

c0012f3f <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f3f:	83 ec 10             	sub    esp,0x10
c0012f42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f4a:	50                   	push   eax
c0012f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4f:	e8 39 ff ff ff       	call   c0012e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f54:	50                   	push   eax
c0012f55:	e8 ab ff ff ff       	call   c0012f05 <Dbg::logs(char*)>
c0012f5a:	83 c4 20             	add    esp,0x20
c0012f5d:	c3                   	ret    

c0012f5e <Dbg::kprintf(char const*, ...)>:
c0012f5e:	55                   	push   ebp
c0012f5f:	57                   	push   edi
c0012f60:	56                   	push   esi
c0012f61:	53                   	push   ebx
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f69:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f71:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f74:	84 c0                	test   al,al
c0012f76:	74 4a                	je     c0012fc2 <Dbg::kprintf(char const*, ...)+0x64>
c0012f78:	31 db                	xor    ebx,ebx
c0012f7a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f7d:	3c 25                	cmp    al,0x25
c0012f7f:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f82:	0f 85 e4 00 00 00    	jne    c001306c <Dbg::kprintf(char const*, ...)+0x10e>
c0012f88:	83 c3 02             	add    ebx,0x2
c0012f8b:	8a 07                	mov    al,BYTE PTR [edi]
c0012f8d:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f90:	83 e8 25             	sub    eax,0x25
c0012f93:	3c 53                	cmp    al,0x53
c0012f95:	0f 87 ba 00 00 00    	ja     c0013055 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f9b:	0f b6 c0             	movzx  eax,al
c0012f9e:	ff 24 85 28 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd56d8]
c0012fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa9:	89 c8                	mov    eax,ecx
c0012fab:	83 c1 04             	add    ecx,0x4
c0012fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fb2:	ff 30                	push   DWORD PTR [eax]
c0012fb4:	e8 4c ff ff ff       	call   c0012f05 <Dbg::logs(char*)>
c0012fb9:	58                   	pop    eax
c0012fba:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fbe:	84 c0                	test   al,al
c0012fc0:	75 b8                	jne    c0012f7a <Dbg::kprintf(char const*, ...)+0x1c>
c0012fc2:	83 c4 0c             	add    esp,0xc
c0012fc5:	5b                   	pop    ebx
c0012fc6:	5e                   	pop    esi
c0012fc7:	5f                   	pop    edi
c0012fc8:	5d                   	pop    ebp
c0012fc9:	c3                   	ret    
c0012fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fce:	89 d0                	mov    eax,edx
c0012fd0:	83 c2 04             	add    edx,0x4
c0012fd3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fd7:	ff 30                	push   DWORD PTR [eax]
c0012fd9:	e8 44 ff ff ff       	call   c0012f22 <Dbg::logWriteInt(unsigned int)>
c0012fde:	58                   	pop    eax
c0012fdf:	eb d9                	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe5:	89 d0                	mov    eax,edx
c0012fe7:	83 c2 04             	add    edx,0x4
c0012fea:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ff1:	50                   	push   eax
c0012ff2:	e8 f7 fe ff ff       	call   c0012eee <Dbg::logc(char)>
c0012ff7:	58                   	pop    eax
c0012ff8:	eb c0                	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ffe:	89 c8                	mov    eax,ecx
c0013000:	83 c1 04             	add    ecx,0x4
c0013003:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013007:	ff 30                	push   DWORD PTR [eax]
c0013009:	e8 14 ff ff ff       	call   c0012f22 <Dbg::logWriteInt(unsigned int)>
c001300e:	5f                   	pop    edi
c001300f:	eb a9                	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c0013011:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013015:	89 c8                	mov    eax,ecx
c0013017:	83 c1 04             	add    ecx,0x4
c001301a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001301e:	6a 10                	push   0x10
c0013020:	ff 30                	push   DWORD PTR [eax]
c0013022:	e8 18 ff ff ff       	call   c0012f3f <Dbg::logWriteIntBase(unsigned int, int)>
c0013027:	59                   	pop    ecx
c0013028:	5f                   	pop    edi
c0013029:	eb 8f                	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c001302b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001302f:	89 d0                	mov    eax,edx
c0013031:	83 c2 08             	add    edx,0x8
c0013034:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013038:	6a 10                	push   0x10
c001303a:	ff 30                	push   DWORD PTR [eax]
c001303c:	e8 fe fe ff ff       	call   c0012f3f <Dbg::logWriteIntBase(unsigned int, int)>
c0013041:	58                   	pop    eax
c0013042:	5a                   	pop    edx
c0013043:	e9 72 ff ff ff       	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c0013048:	6a 25                	push   0x25
c001304a:	e8 9f fe ff ff       	call   c0012eee <Dbg::logc(char)>
c001304f:	58                   	pop    eax
c0013050:	e9 65 ff ff ff       	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c0013055:	6a 25                	push   0x25
c0013057:	e8 92 fe ff ff       	call   c0012eee <Dbg::logc(char)>
c001305c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001305f:	50                   	push   eax
c0013060:	e8 89 fe ff ff       	call   c0012eee <Dbg::logc(char)>
c0013065:	5a                   	pop    edx
c0013066:	59                   	pop    ecx
c0013067:	e9 4e ff ff ff       	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>
c001306c:	50                   	push   eax
c001306d:	89 eb                	mov    ebx,ebp
c001306f:	e8 7a fe ff ff       	call   c0012eee <Dbg::logc(char)>
c0013074:	89 fd                	mov    ebp,edi
c0013076:	58                   	pop    eax
c0013077:	e9 3e ff ff ff       	jmp    c0012fba <Dbg::kprintf(char const*, ...)+0x5c>

c001307c <File::read(unsigned long long, void*, int*)>:
c001307c:	53                   	push   ebx
c001307d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013081:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013085:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001308c:	3c 19                	cmp    al,0x19
c001308e:	77 35                	ja     c00130c5 <File::read(unsigned long long, void*, int*)+0x49>
c0013090:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0013097:	85 c0                	test   eax,eax
c0013099:	74 2a                	je     c00130c5 <File::read(unsigned long long, void*, int*)+0x49>
c001309b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130a1:	85 c0                	test   eax,eax
c00130a3:	74 20                	je     c00130c5 <File::read(unsigned long long, void*, int*)+0x49>
c00130a5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a9:	74 21                	je     c00130cc <File::read(unsigned long long, void*, int*)+0x50>
c00130ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130b1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130bf:	5b                   	pop    ebx
c00130c0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130c3:	ff e0                	jmp    eax
c00130c5:	b8 0b 00 00 00       	mov    eax,0xb
c00130ca:	eb 05                	jmp    c00130d1 <File::read(unsigned long long, void*, int*)+0x55>
c00130cc:	b8 05 00 00 00       	mov    eax,0x5
c00130d1:	5b                   	pop    ebx
c00130d2:	c3                   	ret    
c00130d3:	90                   	nop

c00130d4 <File::write(unsigned long long, void*, int*)>:
c00130d4:	53                   	push   ebx
c00130d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130dd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e4:	3c 19                	cmp    al,0x19
c00130e6:	77 35                	ja     c001311d <File::write(unsigned long long, void*, int*)+0x49>
c00130e8:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c00130ef:	85 c0                	test   eax,eax
c00130f1:	74 2a                	je     c001311d <File::write(unsigned long long, void*, int*)+0x49>
c00130f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130f9:	85 c0                	test   eax,eax
c00130fb:	74 20                	je     c001311d <File::write(unsigned long long, void*, int*)+0x49>
c00130fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013101:	74 21                	je     c0013124 <File::write(unsigned long long, void*, int*)+0x50>
c0013103:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013105:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013109:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001310f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013113:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013117:	5b                   	pop    ebx
c0013118:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001311b:	ff e0                	jmp    eax
c001311d:	b8 0b 00 00 00       	mov    eax,0xb
c0013122:	eb 05                	jmp    c0013129 <File::write(unsigned long long, void*, int*)+0x55>
c0013124:	b8 05 00 00 00       	mov    eax,0x5
c0013129:	5b                   	pop    ebx
c001312a:	c3                   	ret    
c001312b:	90                   	nop

c001312c <Directory::read(unsigned long long, void*, int*)>:
c001312c:	53                   	push   ebx
c001312d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013131:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013135:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001313c:	3c 19                	cmp    al,0x19
c001313e:	77 35                	ja     c0013175 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013140:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0013147:	85 c0                	test   eax,eax
c0013149:	74 2a                	je     c0013175 <Directory::read(unsigned long long, void*, int*)+0x49>
c001314b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013151:	85 c0                	test   eax,eax
c0013153:	74 20                	je     c0013175 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013155:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013159:	74 21                	je     c001317c <Directory::read(unsigned long long, void*, int*)+0x50>
c001315b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001315d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013161:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013167:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001316b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001316f:	5b                   	pop    ebx
c0013170:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013173:	ff e0                	jmp    eax
c0013175:	b8 0b 00 00 00       	mov    eax,0xb
c001317a:	eb 05                	jmp    c0013181 <Directory::read(unsigned long long, void*, int*)+0x55>
c001317c:	b8 05 00 00 00       	mov    eax,0x5
c0013181:	5b                   	pop    ebx
c0013182:	c3                   	ret    
c0013183:	90                   	nop

c0013184 <Directory::write(unsigned long long, void*, int*)>:
c0013184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013188:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001318f:	b8 0b 00 00 00       	mov    eax,0xb
c0013194:	80 fa 19             	cmp    dl,0x19
c0013197:	77 18                	ja     c00131b1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013199:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00131a0:	85 d2                	test   edx,edx
c00131a2:	74 0d                	je     c00131b1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131a4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131ab:	19 c0                	sbb    eax,eax
c00131ad:	83 e0 0a             	and    eax,0xa
c00131b0:	40                   	inc    eax
c00131b1:	c3                   	ret    

c00131b2 <File::isAtty()>:
c00131b2:	31 c0                	xor    eax,eax
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <Directory::isAtty()>:
c00131b6:	31 c0                	xor    eax,eax
c00131b8:	c3                   	ret    
c00131b9:	90                   	nop

c00131ba <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131ba:	b8 0a 00 00 00       	mov    eax,0xa
c00131bf:	c3                   	ret    

c00131c0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131c0:	b8 0a 00 00 00       	mov    eax,0xa
c00131c5:	c3                   	ret    

c00131c6 <File::~File()>:
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c00131ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d2:	89 10                	mov    DWORD PTR [eax],edx
c00131d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	50                   	push   eax
c00131dc:	e8 63 e7 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	90                   	nop
c00131e5:	83 c4 0c             	add    esp,0xc
c00131e8:	c3                   	ret    
c00131e9:	90                   	nop

c00131ea <File::~File()>:
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	83 ec 0c             	sub    esp,0xc
c00131f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f4:	e8 cd ff ff ff       	call   c00131c6 <File::~File()>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 ec 08             	sub    esp,0x8
c00131ff:	68 14 01 00 00       	push   0x114
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 71 fc ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	83 c4 0c             	add    esp,0xc
c0013213:	c3                   	ret    

c0013214 <Directory::~Directory()>:
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	ba 00 ab 02 c0       	mov    edx,0xc002ab00
c001321c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013220:	89 10                	mov    DWORD PTR [eax],edx
c0013222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	50                   	push   eax
c001322a:	e8 15 e7 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	90                   	nop
c0013233:	83 c4 0c             	add    esp,0xc
c0013236:	c3                   	ret    
c0013237:	90                   	nop

c0013238 <Directory::~Directory()>:
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	83 ec 0c             	sub    esp,0xc
c001323e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013242:	e8 cd ff ff ff       	call   c0013214 <Directory::~Directory()>
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	83 ec 08             	sub    esp,0x8
c001324d:	68 14 01 00 00       	push   0x114
c0013252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013256:	e8 23 fc ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001325b:	83 c4 10             	add    esp,0x10
c001325e:	83 c4 0c             	add    esp,0xc
c0013261:	c3                   	ret    

c0013262 <Filesystem::Filesystem()>:
c0013262:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c0013267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001326b:	89 10                	mov    DWORD PTR [eax],edx
c001326d:	8b 15 58 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e558
c0013273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013277:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001327a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327e:	a3 58 e5 02 c0       	mov    ds:0xc002e558,eax
c0013283:	90                   	nop
c0013284:	c3                   	ret    
c0013285:	90                   	nop

c0013286 <Filesystem::~Filesystem()>:
c0013286:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c001328b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328f:	89 10                	mov    DWORD PTR [eax],edx
c0013291:	90                   	nop
c0013292:	c3                   	ret    
c0013293:	90                   	nop

c0013294 <Filesystem::~Filesystem()>:
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001329b:	e8 e6 ff ff ff       	call   c0013286 <Filesystem::~Filesystem()>
c00132a0:	83 c4 04             	add    esp,0x4
c00132a3:	83 ec 08             	sub    esp,0x8
c00132a6:	6a 08                	push   0x8
c00132a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ac:	e8 cd fb ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00132b1:	83 c4 10             	add    esp,0x10
c00132b4:	83 c4 0c             	add    esp,0xc
c00132b7:	c3                   	ret    

c00132b8 <Fs::getcwd(Process*, char*, int)>:
c00132b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132bc:	31 c0                	xor    eax,eax
c00132be:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132c5:	7d 15                	jge    c00132dc <Fs::getcwd(Process*, char*, int)+0x24>
c00132c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132cb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132d2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132d5:	84 c9                	test   cl,cl
c00132d7:	74 06                	je     c00132df <Fs::getcwd(Process*, char*, int)+0x27>
c00132d9:	40                   	inc    eax
c00132da:	eb e2                	jmp    c00132be <Fs::getcwd(Process*, char*, int)+0x6>
c00132dc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132df:	31 c0                	xor    eax,eax
c00132e1:	c3                   	ret    

c00132e2 <Fs::initVFS()>:
c00132e2:	83 ec 18             	sub    esp,0x18
c00132e5:	6a 08                	push   0x8
c00132e7:	e8 57 c5 ff ff       	call   c000f843 <malloc>
c00132ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ef:	e8 5a dc 00 00       	call   c0020f4e <FAT::FAT()>
c00132f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132fb:	e8 43 c5 ff ff       	call   c000f843 <malloc>
c0013300:	89 04 24             	mov    DWORD PTR [esp],eax
c0013303:	e8 9e ee 00 00       	call   c00221a6 <ISO9660::ISO9660()>
c0013308:	83 c4 1c             	add    esp,0x1c
c001330b:	c3                   	ret    

c001330c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001330c:	55                   	push   ebp
c001330d:	57                   	push   edi
c001330e:	56                   	push   esi
c001330f:	53                   	push   ebx
c0013310:	81 ec 10 04 00 00    	sub    esp,0x410
c0013316:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001331d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013324:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001332b:	68 00 04 00 00       	push   0x400
c0013330:	6a 00                	push   0x0
c0013332:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013336:	56                   	push   esi
c0013337:	e8 3c d4 fe ff       	call   c0000778 <memset>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013343:	75 0b                	jne    c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013345:	50                   	push   eax
c0013346:	50                   	push   eax
c0013347:	57                   	push   edi
c0013348:	56                   	push   esi
c0013349:	e8 e6 d4 fe ff       	call   c0000834 <strcpy>
c001334e:	eb 41                	jmp    c0013391 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013350:	8a 07                	mov    al,BYTE PTR [edi]
c0013352:	3c 5c                	cmp    al,0x5c
c0013354:	74 04                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013356:	3c 2f                	cmp    al,0x2f
c0013358:	75 18                	jne    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001335a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001335d:	3c 60                	cmp    al,0x60
c001335f:	7e 03                	jle    c0013364 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013361:	83 e8 20             	sub    eax,0x20
c0013364:	88 04 24             	mov    BYTE PTR [esp],al
c0013367:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001336e:	50                   	push   eax
c001336f:	50                   	push   eax
c0013370:	eb 18                	jmp    c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013372:	50                   	push   eax
c0013373:	50                   	push   eax
c0013374:	55                   	push   ebp
c0013375:	56                   	push   esi
c0013376:	e8 b9 d4 fe ff       	call   c0000834 <strcpy>
c001337b:	5a                   	pop    edx
c001337c:	59                   	pop    ecx
c001337d:	68 a1 c1 02 c0       	push   0xc002c1a1
c0013382:	56                   	push   esi
c0013383:	e8 ec d5 fe ff       	call   c0000974 <strcat>
c0013388:	5d                   	pop    ebp
c0013389:	58                   	pop    eax
c001338a:	57                   	push   edi
c001338b:	56                   	push   esi
c001338c:	e8 e3 d5 fe ff       	call   c0000974 <strcat>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013397:	3c 60                	cmp    al,0x60
c0013399:	7e 03                	jle    c001339e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001339b:	83 e8 20             	sub    eax,0x20
c001339e:	88 04 24             	mov    BYTE PTR [esp],al
c00133a1:	88 03                	mov    BYTE PTR [ebx],al
c00133a3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133aa:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133b0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133b4:	bf 03 00 00 00       	mov    edi,0x3
c00133b9:	b8 03 00 00 00       	mov    eax,0x3
c00133be:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133c1:	84 d2                	test   dl,dl
c00133c3:	0f 84 91 00 00 00    	je     c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133c9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133cc:	80 fa 5c             	cmp    dl,0x5c
c00133cf:	74 05                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133d1:	80 fa 2f             	cmp    dl,0x2f
c00133d4:	75 12                	jne    c00133e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133d6:	89 c5                	mov    ebp,eax
c00133d8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133dd:	74 09                	je     c00133e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133df:	40                   	inc    eax
c00133e0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133e4:	89 cf                	mov    edi,ecx
c00133e6:	eb d6                	jmp    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133e8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133ed:	75 5b                	jne    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133ef:	80 fa 2e             	cmp    dl,0x2e
c00133f2:	75 56                	jne    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133f4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133f8:	74 19                	je     c0013413 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133fa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133ff:	74 53                	je     c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013401:	89 f9                	mov    ecx,edi
c0013403:	41                   	inc    ecx
c0013404:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013407:	80 fa 2f             	cmp    dl,0x2f
c001340a:	74 f7                	je     c0013403 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001340c:	80 fa 5c             	cmp    dl,0x5c
c001340f:	74 f2                	je     c0013403 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013411:	eb d1                	jmp    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013413:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013418:	74 3a                	je     c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001341a:	83 f8 03             	cmp    eax,0x3
c001341d:	74 c5                	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001341f:	41                   	inc    ecx
c0013420:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013423:	80 fa 2f             	cmp    dl,0x2f
c0013426:	74 f7                	je     c001341f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013428:	80 fa 5c             	cmp    dl,0x5c
c001342b:	74 f2                	je     c001341f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001342d:	48                   	dec    eax
c001342e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013432:	75 06                	jne    c001343a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013434:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013438:	eb f3                	jmp    c001342d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001343a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001343e:	74 07                	je     c0013447 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013440:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013444:	48                   	dec    eax
c0013445:	eb f3                	jmp    c001343a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013447:	40                   	inc    eax
c0013448:	eb 9a                	jmp    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344a:	80 fa 2f             	cmp    dl,0x2f
c001344d:	74 95                	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344f:	80 fa 5c             	cmp    dl,0x5c
c0013452:	74 90                	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013454:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013457:	40                   	inc    eax
c0013458:	eb 8a                	jmp    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001345a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001345e:	83 ec 0c             	sub    esp,0xc
c0013461:	53                   	push   ebx
c0013462:	e8 2d d3 fe ff       	call   c0000794 <strlen>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001346f:	75 26                	jne    c0013497 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013471:	83 ec 0c             	sub    esp,0xc
c0013474:	53                   	push   ebx
c0013475:	e8 1a d3 fe ff       	call   c0000794 <strlen>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013482:	74 26                	je     c00134aa <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	53                   	push   ebx
c0013488:	e8 07 d3 fe ff       	call   c0000794 <strlen>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013495:	eb c7                	jmp    c001345e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013497:	83 ec 0c             	sub    esp,0xc
c001349a:	53                   	push   ebx
c001349b:	e8 f4 d2 fe ff       	call   c0000794 <strlen>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134a8:	74 c7                	je     c0013471 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134aa:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134b0:	5b                   	pop    ebx
c00134b1:	5e                   	pop    esi
c00134b2:	5f                   	pop    edi
c00134b3:	5d                   	pop    ebp
c00134b4:	c3                   	ret    
c00134b5:	90                   	nop

c00134b6 <File::File(char const*, Process*)>:
c00134b6:	83 ec 0c             	sub    esp,0xc
c00134b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bd:	83 ec 08             	sub    esp,0x8
c00134c0:	6a 00                	push   0x0
c00134c2:	50                   	push   eax
c00134c3:	e8 9a e2 ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	89 10                	mov    DWORD PTR [eax],edx
c00134d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	83 c0 0d             	add    eax,0xd
c00134e7:	83 ec 04             	sub    esp,0x4
c00134ea:	52                   	push   edx
c00134eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ef:	50                   	push   eax
c00134f0:	e8 17 fe ff ff       	call   c001330c <Fs::standardiseFiles(char*, char const*, char const*)>
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134ff:	8d 50 bf             	lea    edx,[eax-0x41]
c0013502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013506:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001350c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013510:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013514:	90                   	nop
c0013515:	83 c4 0c             	add    esp,0xc
c0013518:	c3                   	ret    
c0013519:	90                   	nop

c001351a <File::open(FileOpenMode)>:
c001351a:	53                   	push   ebx
c001351b:	b8 0b 00 00 00       	mov    eax,0xb
c0013520:	83 ec 08             	sub    esp,0x8
c0013523:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013527:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001352e:	80 fa 19             	cmp    dl,0x19
c0013531:	77 40                	ja     c0013573 <File::open(FileOpenMode)+0x59>
c0013533:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c001353a:	85 d2                	test   edx,edx
c001353c:	74 35                	je     c0013573 <File::open(FileOpenMode)+0x59>
c001353e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013544:	85 d2                	test   edx,edx
c0013546:	74 2b                	je     c0013573 <File::open(FileOpenMode)+0x59>
c0013548:	b8 06 00 00 00       	mov    eax,0x6
c001354d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013551:	75 20                	jne    c0013573 <File::open(FileOpenMode)+0x59>
c0013553:	8b 02                	mov    eax,DWORD PTR [edx]
c0013555:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001355b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001355f:	51                   	push   ecx
c0013560:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013563:	51                   	push   ecx
c0013564:	52                   	push   edx
c0013565:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	85 c0                	test   eax,eax
c001356d:	75 04                	jne    c0013573 <File::open(FileOpenMode)+0x59>
c001356f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013573:	83 c4 08             	add    esp,0x8
c0013576:	5b                   	pop    ebx
c0013577:	c3                   	ret    

c0013578 <File::close()>:
c0013578:	53                   	push   ebx
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	83 ec 08             	sub    esp,0x8
c0013581:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013585:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001358c:	80 fa 19             	cmp    dl,0x19
c001358f:	77 41                	ja     c00135d2 <File::close()+0x5a>
c0013591:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c0013598:	85 db                	test   ebx,ebx
c001359a:	74 36                	je     c00135d2 <File::close()+0x5a>
c001359c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135a3:	74 2d                	je     c00135d2 <File::close()+0x5a>
c00135a5:	b8 05 00 00 00       	mov    eax,0x5
c00135aa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135ae:	74 22                	je     c00135d2 <File::close()+0x5a>
c00135b0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135b4:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c00135bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135c1:	53                   	push   ebx
c00135c2:	53                   	push   ebx
c00135c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00135c5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135cb:	50                   	push   eax
c00135cc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	83 c4 08             	add    esp,0x8
c00135d5:	5b                   	pop    ebx
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <File::seek(unsigned long long)>:
c00135d8:	56                   	push   esi
c00135d9:	53                   	push   ebx
c00135da:	b8 0b 00 00 00       	mov    eax,0xb
c00135df:	51                   	push   ecx
c00135e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135e8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135f3:	80 fa 19             	cmp    dl,0x19
c00135f6:	77 31                	ja     c0013629 <File::seek(unsigned long long)+0x51>
c00135f8:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00135ff:	85 d2                	test   edx,edx
c0013601:	74 26                	je     c0013629 <File::seek(unsigned long long)+0x51>
c0013603:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013609:	85 d2                	test   edx,edx
c001360b:	74 1c                	je     c0013629 <File::seek(unsigned long long)+0x51>
c001360d:	b8 05 00 00 00       	mov    eax,0x5
c0013612:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013616:	74 11                	je     c0013629 <File::seek(unsigned long long)+0x51>
c0013618:	8b 02                	mov    eax,DWORD PTR [edx]
c001361a:	53                   	push   ebx
c001361b:	51                   	push   ecx
c001361c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013622:	52                   	push   edx
c0013623:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	5a                   	pop    edx
c001362a:	5b                   	pop    ebx
c001362b:	5e                   	pop    esi
c001362c:	c3                   	ret    
c001362d:	90                   	nop

c001362e <File::tell(unsigned long long*)>:
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	b8 0b 00 00 00       	mov    eax,0xb
c0013636:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001363a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013641:	80 fa 19             	cmp    dl,0x19
c0013644:	77 34                	ja     c001367a <File::tell(unsigned long long*)+0x4c>
c0013646:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c001364d:	85 d2                	test   edx,edx
c001364f:	74 29                	je     c001367a <File::tell(unsigned long long*)+0x4c>
c0013651:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013657:	85 d2                	test   edx,edx
c0013659:	74 1f                	je     c001367a <File::tell(unsigned long long*)+0x4c>
c001365b:	b8 05 00 00 00       	mov    eax,0x5
c0013660:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013664:	74 14                	je     c001367a <File::tell(unsigned long long*)+0x4c>
c0013666:	50                   	push   eax
c0013667:	8b 02                	mov    eax,DWORD PTR [edx]
c0013669:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001366d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013673:	52                   	push   edx
c0013674:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013677:	83 c4 10             	add    esp,0x10
c001367a:	83 c4 0c             	add    esp,0xc
c001367d:	c3                   	ret    

c001367e <File::rewind()>:
c001367e:	83 ec 10             	sub    esp,0x10
c0013681:	6a 00                	push   0x0
c0013683:	6a 00                	push   0x0
c0013685:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013689:	e8 4a ff ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001368e:	83 c4 1c             	add    esp,0x1c
c0013691:	c3                   	ret    

c0013692 <File::unlink()>:
c0013692:	83 ec 0c             	sub    esp,0xc
c0013695:	b8 0b 00 00 00       	mov    eax,0xb
c001369a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a5:	80 f9 19             	cmp    cl,0x19
c00136a8:	77 2f                	ja     c00136d9 <File::unlink()+0x47>
c00136aa:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00136b1:	85 c9                	test   ecx,ecx
c00136b3:	74 24                	je     c00136d9 <File::unlink()+0x47>
c00136b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136bb:	85 c9                	test   ecx,ecx
c00136bd:	74 1a                	je     c00136d9 <File::unlink()+0x47>
c00136bf:	b8 06 00 00 00       	mov    eax,0x6
c00136c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c8:	75 0f                	jne    c00136d9 <File::unlink()+0x47>
c00136ca:	83 c2 0d             	add    edx,0xd
c00136cd:	50                   	push   eax
c00136ce:	50                   	push   eax
c00136cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d1:	52                   	push   edx
c00136d2:	51                   	push   ecx
c00136d3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	83 c4 0c             	add    esp,0xc
c00136dc:	c3                   	ret    
c00136dd:	90                   	nop

c00136de <File::rename(char const*)>:
c00136de:	83 ec 0c             	sub    esp,0xc
c00136e1:	b8 0b 00 00 00       	mov    eax,0xb
c00136e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f1:	80 f9 19             	cmp    cl,0x19
c00136f4:	77 32                	ja     c0013728 <File::rename(char const*)+0x4a>
c00136f6:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00136fd:	85 c9                	test   ecx,ecx
c00136ff:	74 27                	je     c0013728 <File::rename(char const*)+0x4a>
c0013701:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013707:	85 c9                	test   ecx,ecx
c0013709:	74 1d                	je     c0013728 <File::rename(char const*)+0x4a>
c001370b:	b8 06 00 00 00       	mov    eax,0x6
c0013710:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013714:	75 12                	jne    c0013728 <File::rename(char const*)+0x4a>
c0013716:	83 c2 0d             	add    edx,0xd
c0013719:	50                   	push   eax
c001371a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001371c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013720:	52                   	push   edx
c0013721:	51                   	push   ecx
c0013722:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	83 c4 0c             	add    esp,0xc
c001372b:	c3                   	ret    

c001372c <File::chfatattr(unsigned char, unsigned char)>:
c001372c:	57                   	push   edi
c001372d:	b8 0b 00 00 00       	mov    eax,0xb
c0013732:	56                   	push   esi
c0013733:	53                   	push   ebx
c0013734:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013738:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001373c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013743:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013747:	80 f9 19             	cmp    cl,0x19
c001374a:	77 37                	ja     c0013783 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001374c:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013753:	85 c9                	test   ecx,ecx
c0013755:	74 2c                	je     c0013783 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013757:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001375d:	85 c9                	test   ecx,ecx
c001375f:	74 22                	je     c0013783 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013761:	b8 06 00 00 00       	mov    eax,0x6
c0013766:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001376a:	75 17                	jne    c0013783 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001376c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001376e:	89 f0                	mov    eax,esi
c0013770:	83 c2 0d             	add    edx,0xd
c0013773:	0f b6 f0             	movzx  esi,al
c0013776:	0f b6 db             	movzx  ebx,bl
c0013779:	56                   	push   esi
c001377a:	53                   	push   ebx
c001377b:	52                   	push   edx
c001377c:	51                   	push   ecx
c001377d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	5b                   	pop    ebx
c0013784:	5e                   	pop    esi
c0013785:	5f                   	pop    edi
c0013786:	c3                   	ret    
c0013787:	90                   	nop

c0013788 <File::exists()>:
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	31 c0                	xor    eax,eax
c001378d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013791:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013798:	80 f9 19             	cmp    cl,0x19
c001379b:	77 24                	ja     c00137c1 <File::exists()+0x39>
c001379d:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00137a4:	85 c9                	test   ecx,ecx
c00137a6:	74 19                	je     c00137c1 <File::exists()+0x39>
c00137a8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137ae:	85 c9                	test   ecx,ecx
c00137b0:	74 0f                	je     c00137c1 <File::exists()+0x39>
c00137b2:	83 c2 0d             	add    edx,0xd
c00137b5:	50                   	push   eax
c00137b6:	50                   	push   eax
c00137b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137b9:	52                   	push   edx
c00137ba:	51                   	push   ecx
c00137bb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	83 c4 0c             	add    esp,0xc
c00137c4:	c3                   	ret    
c00137c5:	90                   	nop

c00137c6 <File::stat(unsigned long long*, bool*)>:
c00137c6:	56                   	push   esi
c00137c7:	53                   	push   ebx
c00137c8:	50                   	push   eax
c00137c9:	b8 0b 00 00 00       	mov    eax,0xb
c00137ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137e1:	80 f9 19             	cmp    cl,0x19
c00137e4:	77 3d                	ja     c0013823 <File::stat(unsigned long long*, bool*)+0x5d>
c00137e6:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00137ed:	85 c9                	test   ecx,ecx
c00137ef:	74 32                	je     c0013823 <File::stat(unsigned long long*, bool*)+0x5d>
c00137f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137f7:	85 c9                	test   ecx,ecx
c00137f9:	74 28                	je     c0013823 <File::stat(unsigned long long*, bool*)+0x5d>
c00137fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013801:	74 13                	je     c0013816 <File::stat(unsigned long long*, bool*)+0x50>
c0013803:	83 ec 04             	sub    esp,0x4
c0013806:	56                   	push   esi
c0013807:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001380d:	51                   	push   ecx
c001380e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013811:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013814:	eb 0a                	jmp    c0013820 <File::stat(unsigned long long*, bool*)+0x5a>
c0013816:	53                   	push   ebx
c0013817:	83 c2 0d             	add    edx,0xd
c001381a:	56                   	push   esi
c001381b:	52                   	push   edx
c001381c:	51                   	push   ecx
c001381d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	5a                   	pop    edx
c0013824:	5b                   	pop    ebx
c0013825:	5e                   	pop    esi
c0013826:	c3                   	ret    

c0013827 <Fs::setcwd(Process*, char*)>:
c0013827:	55                   	push   ebp
c0013828:	57                   	push   edi
c0013829:	56                   	push   esi
c001382a:	53                   	push   ebx
c001382b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013831:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013838:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001383e:	57                   	push   edi
c001383f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013846:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001384a:	56                   	push   esi
c001384b:	e8 bc fa ff ff       	call   c001330c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013850:	89 34 24             	mov    DWORD PTR [esp],esi
c0013853:	e8 3c cf fe ff       	call   c0000794 <strlen>
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	83 f8 02             	cmp    eax,0x2
c001385e:	77 17                	ja     c0013877 <Fs::setcwd(Process*, char*)+0x50>
c0013860:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013865:	83 e8 41             	sub    eax,0x41
c0013868:	83 f8 19             	cmp    eax,0x19
c001386b:	76 24                	jbe    c0013891 <Fs::setcwd(Process*, char*)+0x6a>
c001386d:	b8 03 00 00 00       	mov    eax,0x3
c0013872:	e9 e0 00 00 00       	jmp    c0013957 <Fs::setcwd(Process*, char*)+0x130>
c0013877:	83 ec 0c             	sub    esp,0xc
c001387a:	56                   	push   esi
c001387b:	e8 14 cf fe ff       	call   c0000794 <strlen>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	83 f8 03             	cmp    eax,0x3
c0013886:	75 34                	jne    c00138bc <Fs::setcwd(Process*, char*)+0x95>
c0013888:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001388d:	75 2d                	jne    c00138bc <Fs::setcwd(Process*, char*)+0x95>
c001388f:	eb cf                	jmp    c0013860 <Fs::setcwd(Process*, char*)+0x39>
c0013891:	8b 14 85 00 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1600]
c0013898:	b8 05 00 00 00       	mov    eax,0x5
c001389d:	85 d2                	test   edx,edx
c001389f:	0f 84 b2 00 00 00    	je     c0013957 <Fs::setcwd(Process*, char*)+0x130>
c00138a5:	b8 06 00 00 00       	mov    eax,0x6
c00138aa:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138b1:	0f 85 92 00 00 00    	jne    c0013949 <Fs::setcwd(Process*, char*)+0x122>
c00138b7:	e9 9b 00 00 00       	jmp    c0013957 <Fs::setcwd(Process*, char*)+0x130>
c00138bc:	83 ec 0c             	sub    esp,0xc
c00138bf:	68 14 01 00 00       	push   0x114
c00138c4:	e8 7a bf ff ff       	call   c000f843 <malloc>
c00138c9:	83 c4 0c             	add    esp,0xc
c00138cc:	89 c3                	mov    ebx,eax
c00138ce:	55                   	push   ebp
c00138cf:	56                   	push   esi
c00138d0:	50                   	push   eax
c00138d1:	e8 e0 fb ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c00138d6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138db:	83 c4 0c             	add    esp,0xc
c00138de:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138e2:	50                   	push   eax
c00138e3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138e7:	50                   	push   eax
c00138e8:	53                   	push   ebx
c00138e9:	e8 d8 fe ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	83 f8 02             	cmp    eax,0x2
c00138f4:	74 04                	je     c00138fa <Fs::setcwd(Process*, char*)+0xd3>
c00138f6:	85 c0                	test   eax,eax
c00138f8:	74 1c                	je     c0013916 <Fs::setcwd(Process*, char*)+0xef>
c00138fa:	b8 01 00 00 00       	mov    eax,0x1
c00138ff:	85 db                	test   ebx,ebx
c0013901:	74 54                	je     c0013957 <Fs::setcwd(Process*, char*)+0x130>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013908:	53                   	push   ebx
c0013909:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	b8 01 00 00 00       	mov    eax,0x1
c0013914:	eb 41                	jmp    c0013957 <Fs::setcwd(Process*, char*)+0x130>
c0013916:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001391b:	75 1c                	jne    c0013939 <Fs::setcwd(Process*, char*)+0x112>
c001391d:	b8 02 00 00 00       	mov    eax,0x2
c0013922:	85 db                	test   ebx,ebx
c0013924:	74 31                	je     c0013957 <Fs::setcwd(Process*, char*)+0x130>
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	8b 03                	mov    eax,DWORD PTR [ebx]
c001392b:	53                   	push   ebx
c001392c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	b8 02 00 00 00       	mov    eax,0x2
c0013937:	eb 1e                	jmp    c0013957 <Fs::setcwd(Process*, char*)+0x130>
c0013939:	85 db                	test   ebx,ebx
c001393b:	74 0c                	je     c0013949 <Fs::setcwd(Process*, char*)+0x122>
c001393d:	83 ec 0c             	sub    esp,0xc
c0013940:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013942:	53                   	push   ebx
c0013943:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	50                   	push   eax
c001394a:	50                   	push   eax
c001394b:	56                   	push   esi
c001394c:	57                   	push   edi
c001394d:	e8 e2 ce fe ff       	call   c0000834 <strcpy>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	31 c0                	xor    eax,eax
c0013957:	81 c4 1c 02 00 00    	add    esp,0x21c
c001395d:	5b                   	pop    ebx
c001395e:	5e                   	pop    esi
c001395f:	5f                   	pop    edi
c0013960:	5d                   	pop    ebp
c0013961:	c3                   	ret    

c0013962 <Directory::Directory(char const*, Process*)>:
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013969:	83 ec 08             	sub    esp,0x8
c001396c:	6a 00                	push   0x0
c001396e:	50                   	push   eax
c001396f:	e8 ee dd ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0013974:	83 c4 10             	add    esp,0x10
c0013977:	ba 00 ab 02 c0       	mov    edx,0xc002ab00
c001397c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013980:	89 10                	mov    DWORD PTR [eax],edx
c0013982:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013986:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001398c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013990:	83 c0 0d             	add    eax,0xd
c0013993:	83 ec 04             	sub    esp,0x4
c0013996:	52                   	push   edx
c0013997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001399b:	50                   	push   eax
c001399c:	e8 6b f9 ff ff       	call   c001330c <Fs::standardiseFiles(char*, char const*, char const*)>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139ab:	8d 50 bf             	lea    edx,[eax-0x41]
c00139ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139c0:	90                   	nop
c00139c1:	83 c4 0c             	add    esp,0xc
c00139c4:	c3                   	ret    
c00139c5:	90                   	nop

c00139c6 <Directory::open()>:
c00139c6:	53                   	push   ebx
c00139c7:	b8 0b 00 00 00       	mov    eax,0xb
c00139cc:	83 ec 08             	sub    esp,0x8
c00139cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139d3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139da:	80 fa 19             	cmp    dl,0x19
c00139dd:	77 3d                	ja     c0013a1c <Directory::open()+0x56>
c00139df:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00139e6:	85 d2                	test   edx,edx
c00139e8:	74 32                	je     c0013a1c <Directory::open()+0x56>
c00139ea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139f0:	85 d2                	test   edx,edx
c00139f2:	74 28                	je     c0013a1c <Directory::open()+0x56>
c00139f4:	b8 06 00 00 00       	mov    eax,0x6
c00139f9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139fd:	75 1d                	jne    c0013a1c <Directory::open()+0x56>
c00139ff:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a05:	50                   	push   eax
c0013a06:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a08:	51                   	push   ecx
c0013a09:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a0c:	51                   	push   ecx
c0013a0d:	52                   	push   edx
c0013a0e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a11:	83 c4 10             	add    esp,0x10
c0013a14:	85 c0                	test   eax,eax
c0013a16:	75 04                	jne    c0013a1c <Directory::open()+0x56>
c0013a18:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a1c:	83 c4 08             	add    esp,0x8
c0013a1f:	5b                   	pop    ebx
c0013a20:	c3                   	ret    
c0013a21:	90                   	nop

c0013a22 <Directory::close()>:
c0013a22:	53                   	push   ebx
c0013a23:	b8 0b 00 00 00       	mov    eax,0xb
c0013a28:	83 ec 08             	sub    esp,0x8
c0013a2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a2f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a36:	80 fa 19             	cmp    dl,0x19
c0013a39:	77 41                	ja     c0013a7c <Directory::close()+0x5a>
c0013a3b:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c0013a42:	85 db                	test   ebx,ebx
c0013a44:	74 36                	je     c0013a7c <Directory::close()+0x5a>
c0013a46:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a4d:	74 2d                	je     c0013a7c <Directory::close()+0x5a>
c0013a4f:	b8 05 00 00 00       	mov    eax,0x5
c0013a54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a58:	74 22                	je     c0013a7c <Directory::close()+0x5a>
c0013a5a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a5e:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c0013a65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a6b:	53                   	push   ebx
c0013a6c:	53                   	push   ebx
c0013a6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a6f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a75:	50                   	push   eax
c0013a76:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	83 c4 08             	add    esp,0x8
c0013a7f:	5b                   	pop    ebx
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Directory::unlink()>:
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a95:	80 f9 19             	cmp    cl,0x19
c0013a98:	77 2f                	ja     c0013ac9 <Directory::unlink()+0x47>
c0013a9a:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013aa1:	85 c9                	test   ecx,ecx
c0013aa3:	74 24                	je     c0013ac9 <Directory::unlink()+0x47>
c0013aa5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aab:	85 c9                	test   ecx,ecx
c0013aad:	74 1a                	je     c0013ac9 <Directory::unlink()+0x47>
c0013aaf:	b8 06 00 00 00       	mov    eax,0x6
c0013ab4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab8:	75 0f                	jne    c0013ac9 <Directory::unlink()+0x47>
c0013aba:	83 c2 0d             	add    edx,0xd
c0013abd:	50                   	push   eax
c0013abe:	50                   	push   eax
c0013abf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac1:	52                   	push   edx
c0013ac2:	51                   	push   ecx
c0013ac3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	83 c4 0c             	add    esp,0xc
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Directory::rename(char const*)>:
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ada:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ae1:	80 f9 19             	cmp    cl,0x19
c0013ae4:	77 32                	ja     c0013b18 <Directory::rename(char const*)+0x4a>
c0013ae6:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013aed:	85 c9                	test   ecx,ecx
c0013aef:	74 27                	je     c0013b18 <Directory::rename(char const*)+0x4a>
c0013af1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af7:	85 c9                	test   ecx,ecx
c0013af9:	74 1d                	je     c0013b18 <Directory::rename(char const*)+0x4a>
c0013afb:	b8 06 00 00 00       	mov    eax,0x6
c0013b00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b04:	75 12                	jne    c0013b18 <Directory::rename(char const*)+0x4a>
c0013b06:	83 c2 0d             	add    edx,0xd
c0013b09:	50                   	push   eax
c0013b0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b10:	52                   	push   edx
c0013b11:	51                   	push   ecx
c0013b12:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b15:	83 c4 10             	add    esp,0x10
c0013b18:	83 c4 0c             	add    esp,0xc
c0013b1b:	c3                   	ret    

c0013b1c <Directory::exists()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	31 c0                	xor    eax,eax
c0013b21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b25:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b2c:	80 f9 19             	cmp    cl,0x19
c0013b2f:	77 24                	ja     c0013b55 <Directory::exists()+0x39>
c0013b31:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013b38:	85 c9                	test   ecx,ecx
c0013b3a:	74 19                	je     c0013b55 <Directory::exists()+0x39>
c0013b3c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b42:	85 c9                	test   ecx,ecx
c0013b44:	74 0f                	je     c0013b55 <Directory::exists()+0x39>
c0013b46:	83 c2 0d             	add    edx,0xd
c0013b49:	50                   	push   eax
c0013b4a:	50                   	push   eax
c0013b4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b4d:	52                   	push   edx
c0013b4e:	51                   	push   ecx
c0013b4f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Directory::read(dirent*)>:
c0013b5a:	83 ec 1c             	sub    esp,0x1c
c0013b5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b62:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b66:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b6d:	80 fa 19             	cmp    dl,0x19
c0013b70:	77 30                	ja     c0013ba2 <Directory::read(dirent*)+0x48>
c0013b72:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0013b79:	85 d2                	test   edx,edx
c0013b7b:	74 25                	je     c0013ba2 <Directory::read(dirent*)+0x48>
c0013b7d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b84:	74 1c                	je     c0013ba2 <Directory::read(dirent*)+0x48>
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b8b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b8f:	52                   	push   edx
c0013b90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b94:	6a 00                	push   0x0
c0013b96:	68 10 01 00 00       	push   0x110
c0013b9b:	51                   	push   ecx
c0013b9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b9f:	83 c4 20             	add    esp,0x20
c0013ba2:	83 c4 1c             	add    esp,0x1c
c0013ba5:	c3                   	ret    

c0013ba6 <Directory::create()>:
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb9:	80 f9 19             	cmp    cl,0x19
c0013bbc:	77 2f                	ja     c0013bed <Directory::create()+0x47>
c0013bbe:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013bc5:	85 c9                	test   ecx,ecx
c0013bc7:	74 24                	je     c0013bed <Directory::create()+0x47>
c0013bc9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bcf:	85 c9                	test   ecx,ecx
c0013bd1:	74 1a                	je     c0013bed <Directory::create()+0x47>
c0013bd3:	b8 06 00 00 00       	mov    eax,0x6
c0013bd8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bdc:	75 0f                	jne    c0013bed <Directory::create()+0x47>
c0013bde:	83 c2 0d             	add    edx,0xd
c0013be1:	50                   	push   eax
c0013be2:	50                   	push   eax
c0013be3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be5:	52                   	push   edx
c0013be6:	51                   	push   ecx
c0013be7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	83 c4 0c             	add    esp,0xc
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bf2:	b8 0a 00 00 00       	mov    eax,0xa
c0013bf7:	c3                   	ret    

c0013bf8 <Bus::Bus(char const*)>:
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bff:	83 ec 08             	sub    esp,0x8
c0013c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c06:	50                   	push   eax
c0013c07:	e8 68 09 00 00       	call   c0014574 <Device::Device(char const*)>
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0013c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c18:	89 10                	mov    DWORD PTR [eax],edx
c0013c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c28:	90                   	nop
c0013c29:	83 c4 0c             	add    esp,0xc
c0013c2c:	c3                   	ret    
c0013c2d:	90                   	nop

c0013c2e <Bus::~Bus()>:
c0013c2e:	83 ec 0c             	sub    esp,0xc
c0013c31:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0013c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3a:	89 10                	mov    DWORD PTR [eax],edx
c0013c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c40:	83 ec 0c             	sub    esp,0xc
c0013c43:	50                   	push   eax
c0013c44:	e8 0d 06 00 00       	call   c0014256 <Device::~Device()>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	90                   	nop
c0013c4d:	83 c4 0c             	add    esp,0xc
c0013c50:	c3                   	ret    
c0013c51:	90                   	nop

c0013c52 <Bus::~Bus()>:
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	83 ec 0c             	sub    esp,0xc
c0013c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5c:	e8 cd ff ff ff       	call   c0013c2e <Bus::~Bus()>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	83 ec 08             	sub    esp,0x8
c0013c67:	68 58 01 00 00       	push   0x158
c0013c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c70:	e8 09 f2 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0013c75:	83 c4 10             	add    esp,0x10
c0013c78:	83 c4 0c             	add    esp,0xc
c0013c7b:	c3                   	ret    

c0013c7c <Buzzer::Buzzer(char const*)>:
c0013c7c:	83 ec 0c             	sub    esp,0xc
c0013c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c83:	83 ec 08             	sub    esp,0x8
c0013c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c8a:	50                   	push   eax
c0013c8b:	e8 e4 08 00 00       	call   c0014574 <Device::Device(char const*)>
c0013c90:	83 c4 10             	add    esp,0x10
c0013c93:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0013c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9c:	89 10                	mov    DWORD PTR [eax],edx
c0013c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cba:	90                   	nop
c0013cbb:	83 c4 0c             	add    esp,0xc
c0013cbe:	c3                   	ret    
c0013cbf:	90                   	nop

c0013cc0 <Buzzer::~Buzzer()>:
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0013cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ccc:	89 10                	mov    DWORD PTR [eax],edx
c0013cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	50                   	push   eax
c0013cd6:	e8 7b 05 00 00       	call   c0014256 <Device::~Device()>
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	90                   	nop
c0013cdf:	83 c4 0c             	add    esp,0xc
c0013ce2:	c3                   	ret    
c0013ce3:	90                   	nop

c0013ce4 <Buzzer::~Buzzer()>:
c0013ce4:	83 ec 0c             	sub    esp,0xc
c0013ce7:	83 ec 0c             	sub    esp,0xc
c0013cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cee:	e8 cd ff ff ff       	call   c0013cc0 <Buzzer::~Buzzer()>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	83 ec 08             	sub    esp,0x8
c0013cf9:	68 5c 01 00 00       	push   0x15c
c0013cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d02:	e8 77 f1 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	83 c4 0c             	add    esp,0xc
c0013d0d:	c3                   	ret    

c0013d0e <Buzzer::stop()>:
c0013d0e:	83 ec 14             	sub    esp,0x14
c0013d11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d17:	6a 00                	push   0x0
c0013d19:	50                   	push   eax
c0013d1a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d1d:	83 c4 1c             	add    esp,0x1c
c0013d20:	c3                   	ret    

c0013d21 <beepThread(void*)>:
c0013d21:	53                   	push   ebx
c0013d22:	83 ec 08             	sub    esp,0x8
c0013d25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d29:	e8 ae a0 00 00       	call   c001dddc <unlockScheduler()>
c0013d2e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d33:	52                   	push   edx
c0013d34:	52                   	push   edx
c0013d35:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d3b:	52                   	push   edx
c0013d3c:	50                   	push   eax
c0013d3d:	e8 e8 a5 00 00       	call   c001e32a <nanoSleep(unsigned long long)>
c0013d42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d45:	e8 c4 ff ff ff       	call   c0013d0e <Buzzer::stop()>
c0013d4a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d52:	83 c4 18             	add    esp,0x18
c0013d55:	5b                   	pop    ebx
c0013d56:	e9 15 a5 00 00       	jmp    c001e270 <blockTask(TaskState)>
c0013d5b:	90                   	nop

c0013d5c <Buzzer::beep(int, int, bool)>:
c0013d5c:	57                   	push   edi
c0013d5d:	56                   	push   esi
c0013d5e:	53                   	push   ebx
c0013d5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d6b:	52                   	push   edx
c0013d6c:	52                   	push   edx
c0013d6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d73:	56                   	push   esi
c0013d74:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	89 f8                	mov    eax,edi
c0013d7c:	84 c0                	test   al,al
c0013d7e:	74 1f                	je     c0013d9f <Buzzer::beep(int, int, bool)+0x43>
c0013d80:	50                   	push   eax
c0013d81:	50                   	push   eax
c0013d82:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d88:	99                   	cdq    
c0013d89:	52                   	push   edx
c0013d8a:	50                   	push   eax
c0013d8b:	e8 9a a5 00 00       	call   c001e32a <nanoSleep(unsigned long long)>
c0013d90:	83 c4 10             	add    esp,0x10
c0013d93:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d97:	5b                   	pop    ebx
c0013d98:	5e                   	pop    esi
c0013d99:	5f                   	pop    edi
c0013d9a:	e9 6f ff ff ff       	jmp    c0013d0e <Buzzer::stop()>
c0013d9f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013da5:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0013daa:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013db2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013db6:	c7 44 24 14 21 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d21
c0013dbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dc2:	5b                   	pop    ebx
c0013dc3:	5e                   	pop    esi
c0013dc4:	5f                   	pop    edi
c0013dc5:	e9 42 a1 00 00       	jmp    c001df0c <Process::createThread(void (*)(void*), void*, int)>

c0013dca <User::loadClockSettings(int)>:
c0013dca:	53                   	push   ebx
c0013dcb:	83 ec 14             	sub    esp,0x14
c0013dce:	68 14 01 00 00       	push   0x114
c0013dd3:	e8 6b ba ff ff       	call   c000f843 <malloc>
c0013dd8:	83 c4 0c             	add    esp,0xc
c0013ddb:	89 c3                	mov    ebx,eax
c0013ddd:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c0013de3:	68 70 ab 02 c0       	push   0xc002ab70
c0013de8:	50                   	push   eax
c0013de9:	e8 c8 f6 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c0013dee:	58                   	pop    eax
c0013def:	5a                   	pop    edx
c0013df0:	6a 01                	push   0x1
c0013df2:	53                   	push   ebx
c0013df3:	e8 22 f7 ff ff       	call   c001351a <File::open(FileOpenMode)>
c0013df8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dfb:	e8 78 f7 ff ff       	call   c0013578 <File::close()>
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	85 db                	test   ebx,ebx
c0013e05:	74 0f                	je     c0013e16 <User::loadClockSettings(int)+0x4c>
c0013e07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e09:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e10:	83 c4 08             	add    esp,0x8
c0013e13:	5b                   	pop    ebx
c0013e14:	ff e0                	jmp    eax
c0013e16:	83 c4 08             	add    esp,0x8
c0013e19:	5b                   	pop    ebx
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <Clock::Clock(char const*)>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e23:	83 ec 08             	sub    esp,0x8
c0013e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e2a:	50                   	push   eax
c0013e2b:	e8 44 07 00 00       	call   c0014574 <Device::Device(char const*)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c0013e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3c:	89 10                	mov    DWORD PTR [eax],edx
c0013e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e42:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e4c:	90                   	nop
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <Clock::~Clock()>:
c0013e52:	83 ec 0c             	sub    esp,0xc
c0013e55:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	89 10                	mov    DWORD PTR [eax],edx
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	50                   	push   eax
c0013e68:	e8 e9 03 00 00       	call   c0014256 <Device::~Device()>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	90                   	nop
c0013e71:	83 c4 0c             	add    esp,0xc
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <Clock::~Clock()>:
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	83 ec 0c             	sub    esp,0xc
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 cd ff ff ff       	call   c0013e52 <Clock::~Clock()>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 ec 08             	sub    esp,0x8
c0013e8b:	68 58 01 00 00       	push   0x158
c0013e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e94:	e8 e5 ef ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0013e99:	83 c4 10             	add    esp,0x10
c0013e9c:	83 c4 0c             	add    esp,0xc
c0013e9f:	c3                   	ret    

c0013ea0 <Clock::timeInSecondsLocal()>:
c0013ea0:	53                   	push   ebx
c0013ea1:	83 ec 14             	sub    esp,0x14
c0013ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013eaa:	50                   	push   eax
c0013eab:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013eae:	0f b6 0d 60 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e560
c0013eb5:	03 0d 64 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e564
c0013ebb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ec1:	89 cb                	mov    ebx,ecx
c0013ec3:	c1 fb 1f             	sar    ebx,0x1f
c0013ec6:	01 c8                	add    eax,ecx
c0013ec8:	11 da                	adc    edx,ebx
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	31 c9                	xor    ecx,ecx
c0013ecf:	80 3d 61 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e561,0x0
c0013ed6:	74 05                	je     c0013edd <Clock::timeInSecondsLocal()+0x3d>
c0013ed8:	b9 08 07 00 00       	mov    ecx,0x708
c0013edd:	31 db                	xor    ebx,ebx
c0013edf:	01 c8                	add    eax,ecx
c0013ee1:	11 da                	adc    edx,ebx
c0013ee3:	83 c4 08             	add    esp,0x8
c0013ee6:	5b                   	pop    ebx
c0013ee7:	c3                   	ret    

c0013ee8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ee8:	57                   	push   edi
c0013ee9:	56                   	push   esi
c0013eea:	53                   	push   ebx
c0013eeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013eef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ef3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ef5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ef9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013efc:	0f b6 05 60 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e560
c0013f03:	03 05 64 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e564
c0013f09:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f0f:	99                   	cdq    
c0013f10:	29 c6                	sub    esi,eax
c0013f12:	19 d7                	sbb    edi,edx
c0013f14:	89 f0                	mov    eax,esi
c0013f16:	89 fa                	mov    edx,edi
c0013f18:	31 f6                	xor    esi,esi
c0013f1a:	80 3d 61 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e561,0x0
c0013f21:	74 05                	je     c0013f28 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f23:	be 08 07 00 00       	mov    esi,0x708
c0013f28:	31 ff                	xor    edi,edi
c0013f2a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f2e:	29 f0                	sub    eax,esi
c0013f30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f34:	19 fa                	sbb    edx,edi
c0013f36:	89 d8                	mov    eax,ebx
c0013f38:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f3c:	5b                   	pop    ebx
c0013f3d:	5e                   	pop    esi
c0013f3e:	5f                   	pop    edi
c0013f3f:	ff e0                	jmp    eax

c0013f41 <datetimeToSeconds(datetime_t)>:
c0013f41:	55                   	push   ebp
c0013f42:	57                   	push   edi
c0013f43:	56                   	push   esi
c0013f44:	53                   	push   ebx
c0013f45:	83 ec 14             	sub    esp,0x14
c0013f48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f4c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f50:	89 d3                	mov    ebx,edx
c0013f52:	0f b6 c6             	movzx  eax,dh
c0013f55:	c1 eb 10             	shr    ebx,0x10
c0013f58:	48                   	dec    eax
c0013f59:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f5e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f62:	0f b6 f5             	movzx  esi,ch
c0013f65:	89 cf                	mov    edi,ecx
c0013f67:	6b f6 3c             	imul   esi,esi,0x3c
c0013f6a:	c1 ef 10             	shr    edi,0x10
c0013f6d:	0f b6 c9             	movzx  ecx,cl
c0013f70:	89 f8                	mov    eax,edi
c0013f72:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f78:	0f b6 f8             	movzx  edi,al
c0013f7b:	0f b6 d2             	movzx  edx,dl
c0013f7e:	01 fe                	add    esi,edi
c0013f80:	01 f1                	add    ecx,esi
c0013f82:	0f b7 f3             	movzx  esi,bx
c0013f85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f89:	c1 f9 1f             	sar    ecx,0x1f
c0013f8c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f91:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f95:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f9a:	8b 0c 8d e0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5420]
c0013fa1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fa5:	76 29                	jbe    c0013fd0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fa7:	f6 c3 03             	test   bl,0x3
c0013faa:	75 24                	jne    c0013fd0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fac:	31 d2                	xor    edx,edx
c0013fae:	bf 64 00 00 00       	mov    edi,0x64
c0013fb3:	89 d8                	mov    eax,ebx
c0013fb5:	66 f7 f7             	div    di
c0013fb8:	66 85 d2             	test   dx,dx
c0013fbb:	75 12                	jne    c0013fcf <datetimeToSeconds(datetime_t)+0x8e>
c0013fbd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fc3:	bf 90 01 00 00       	mov    edi,0x190
c0013fc8:	99                   	cdq    
c0013fc9:	f7 ff                	idiv   edi
c0013fcb:	85 d2                	test   edx,edx
c0013fcd:	75 01                	jne    c0013fd0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fcf:	41                   	inc    ecx
c0013fd0:	66 83 fb 46          	cmp    bx,0x46
c0013fd4:	76 45                	jbe    c001401b <datetimeToSeconds(datetime_t)+0xda>
c0013fd6:	bb 46 00 00 00       	mov    ebx,0x46
c0013fdb:	bf 64 00 00 00       	mov    edi,0x64
c0013fe0:	bd 90 01 00 00       	mov    ebp,0x190
c0013fe5:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fea:	f6 c3 03             	test   bl,0x3
c0013fed:	75 23                	jne    c0014012 <datetimeToSeconds(datetime_t)+0xd1>
c0013fef:	89 d8                	mov    eax,ebx
c0013ff1:	99                   	cdq    
c0013ff2:	f7 ff                	idiv   edi
c0013ff4:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ff9:	85 d2                	test   edx,edx
c0013ffb:	75 15                	jne    c0014012 <datetimeToSeconds(datetime_t)+0xd1>
c0013ffd:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014003:	99                   	cdq    
c0014004:	f7 fd                	idiv   ebp
c0014006:	83 fa 01             	cmp    edx,0x1
c0014009:	19 c0                	sbb    eax,eax
c001400b:	f7 d0                	not    eax
c001400d:	05 6e 01 00 00       	add    eax,0x16e
c0014012:	01 c1                	add    ecx,eax
c0014014:	43                   	inc    ebx
c0014015:	39 f3                	cmp    ebx,esi
c0014017:	7c cc                	jl     c0013fe5 <datetimeToSeconds(datetime_t)+0xa4>
c0014019:	eb 35                	jmp    c0014050 <datetimeToSeconds(datetime_t)+0x10f>
c001401b:	74 33                	je     c0014050 <datetimeToSeconds(datetime_t)+0x10f>
c001401d:	b8 45 00 00 00       	mov    eax,0x45
c0014022:	89 c2                	mov    edx,eax
c0014024:	83 e2 03             	and    edx,0x3
c0014027:	39 f0                	cmp    eax,esi
c0014029:	7e 0f                	jle    c001403a <datetimeToSeconds(datetime_t)+0xf9>
c001402b:	83 fa 01             	cmp    edx,0x1
c001402e:	19 d2                	sbb    edx,edx
c0014030:	48                   	dec    eax
c0014031:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014038:	eb e8                	jmp    c0014022 <datetimeToSeconds(datetime_t)+0xe1>
c001403a:	b8 6d 01 00 00       	mov    eax,0x16d
c001403f:	85 d2                	test   edx,edx
c0014041:	75 0b                	jne    c001404e <datetimeToSeconds(datetime_t)+0x10d>
c0014043:	66 83 fb 01          	cmp    bx,0x1
c0014047:	19 c0                	sbb    eax,eax
c0014049:	05 6e 01 00 00       	add    eax,0x16e
c001404e:	29 c1                	sub    ecx,eax
c0014050:	b8 80 51 01 00       	mov    eax,0x15180
c0014055:	f7 e9                	imul   ecx
c0014057:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001405b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001405f:	83 c4 14             	add    esp,0x14
c0014062:	5b                   	pop    ebx
c0014063:	5e                   	pop    esi
c0014064:	5f                   	pop    edi
c0014065:	5d                   	pop    ebp
c0014066:	c3                   	ret    
c0014067:	90                   	nop

c0014068 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014068:	57                   	push   edi
c0014069:	56                   	push   esi
c001406a:	53                   	push   ebx
c001406b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001406f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014071:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014074:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014078:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001407c:	e8 c0 fe ff ff       	call   c0013f41 <datetimeToSeconds(datetime_t)>
c0014081:	59                   	pop    ecx
c0014082:	0f b6 0d 60 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e560
c0014089:	5b                   	pop    ebx
c001408a:	03 0d 64 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e564
c0014090:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014096:	89 cb                	mov    ebx,ecx
c0014098:	c1 fb 1f             	sar    ebx,0x1f
c001409b:	29 c8                	sub    eax,ecx
c001409d:	19 da                	sbb    edx,ebx
c001409f:	31 c9                	xor    ecx,ecx
c00140a1:	80 3d 61 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e561,0x0
c00140a8:	74 05                	je     c00140af <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140aa:	b9 08 07 00 00       	mov    ecx,0x708
c00140af:	31 db                	xor    ebx,ebx
c00140b1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140b5:	29 c8                	sub    eax,ecx
c00140b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140bb:	19 da                	sbb    edx,ebx
c00140bd:	89 f8                	mov    eax,edi
c00140bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140c3:	5b                   	pop    ebx
c00140c4:	5e                   	pop    esi
c00140c5:	5f                   	pop    edi
c00140c6:	ff e0                	jmp    eax

c00140c8 <secondsToDatetime(unsigned long long)>:
c00140c8:	55                   	push   ebp
c00140c9:	57                   	push   edi
c00140ca:	56                   	push   esi
c00140cb:	53                   	push   ebx
c00140cc:	83 ec 1c             	sub    esp,0x1c
c00140cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140d7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140db:	6a 00                	push   0x0
c00140dd:	68 80 51 01 00       	push   0x15180
c00140e2:	55                   	push   ebp
c00140e3:	57                   	push   edi
c00140e4:	e8 d3 28 01 00       	call   c00269bc <__udivdi3>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f6:	6a 00                	push   0x0
c00140f8:	68 80 51 01 00       	push   0x15180
c00140fd:	55                   	push   ebp
c00140fe:	57                   	push   edi
c00140ff:	bf 10 0e 00 00       	mov    edi,0xe10
c0014104:	e8 b3 29 01 00       	call   c0026abc <__umoddi3>
c0014109:	83 c4 10             	add    esp,0x10
c001410c:	99                   	cdq    
c001410d:	f7 ff                	idiv   edi
c001410f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014114:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014117:	89 d0                	mov    eax,edx
c0014119:	99                   	cdq    
c001411a:	f7 ff                	idiv   edi
c001411c:	85 db                	test   ebx,ebx
c001411e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014121:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014124:	79 11                	jns    c0014137 <secondsToDatetime(unsigned long long)+0x6f>
c0014126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001412a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014130:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014135:	eb 07                	jmp    c001413e <secondsToDatetime(unsigned long long)+0x76>
c0014137:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001413c:	89 d8                	mov    eax,ebx
c001413e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014143:	99                   	cdq    
c0014144:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014149:	f7 f9                	idiv   ecx
c001414b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014150:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014154:	31 d2                	xor    edx,edx
c0014156:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001415e:	01 c3                	add    ebx,eax
c0014160:	89 d8                	mov    eax,ebx
c0014162:	f7 f1                	div    ecx
c0014164:	31 d2                	xor    edx,edx
c0014166:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014169:	89 d8                	mov    eax,ebx
c001416b:	f7 f7                	div    edi
c001416d:	31 d2                	xor    edx,edx
c001416f:	29 c1                	sub    ecx,eax
c0014171:	89 d8                	mov    eax,ebx
c0014173:	f7 f5                	div    ebp
c0014175:	bd 6d 01 00 00       	mov    ebp,0x16d
c001417a:	29 c1                	sub    ecx,eax
c001417c:	31 d2                	xor    edx,edx
c001417e:	89 c8                	mov    eax,ecx
c0014180:	f7 f5                	div    ebp
c0014182:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001418b:	31 d2                	xor    edx,edx
c001418d:	89 c8                	mov    eax,ecx
c001418f:	f7 f5                	div    ebp
c0014191:	31 d2                	xor    edx,edx
c0014193:	01 c3                	add    ebx,eax
c0014195:	89 c8                	mov    eax,ecx
c0014197:	f7 f7                	div    edi
c0014199:	bf 99 00 00 00       	mov    edi,0x99
c001419e:	29 c3                	sub    ebx,eax
c00141a0:	31 d2                	xor    edx,edx
c00141a2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141aa:	29 c3                	sub    ebx,eax
c00141ac:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141af:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141b2:	bb 05 00 00 00       	mov    ebx,0x5
c00141b7:	83 c1 02             	add    ecx,0x2
c00141ba:	89 c8                	mov    eax,ecx
c00141bc:	f7 f7                	div    edi
c00141be:	31 d2                	xor    edx,edx
c00141c0:	89 c7                	mov    edi,eax
c00141c2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141c8:	83 c0 02             	add    eax,0x2
c00141cb:	f7 f3                	div    ebx
c00141cd:	89 eb                	mov    ebx,ebp
c00141cf:	29 c3                	sub    ebx,eax
c00141d1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141d7:	88 1e                	mov    BYTE PTR [esi],bl
c00141d9:	19 c0                	sbb    eax,eax
c00141db:	31 d2                	xor    edx,edx
c00141dd:	83 e0 0c             	and    eax,0xc
c00141e0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141e4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141f0:	83 f9 01             	cmp    ecx,0x1
c00141f3:	0f 96 c2             	setbe  dl
c00141f6:	41                   	inc    ecx
c00141f7:	01 d0                	add    eax,edx
c00141f9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141fc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014200:	83 c4 1c             	add    esp,0x1c
c0014203:	89 f0                	mov    eax,esi
c0014205:	5b                   	pop    ebx
c0014206:	5e                   	pop    esi
c0014207:	5f                   	pop    edi
c0014208:	5d                   	pop    ebp
c0014209:	c2 04 00             	ret    0x4

c001420c <Clock::timeInDatetimeLocal()>:
c001420c:	53                   	push   ebx
c001420d:	83 ec 14             	sub    esp,0x14
c0014210:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014214:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014218:	e8 83 fc ff ff       	call   c0013ea0 <Clock::timeInSecondsLocal()>
c001421d:	83 c4 0c             	add    esp,0xc
c0014220:	52                   	push   edx
c0014221:	50                   	push   eax
c0014222:	53                   	push   ebx
c0014223:	e8 a0 fe ff ff       	call   c00140c8 <secondsToDatetime(unsigned long long)>
c0014228:	89 d8                	mov    eax,ebx
c001422a:	83 c4 14             	add    esp,0x14
c001422d:	5b                   	pop    ebx
c001422e:	c2 04 00             	ret    0x4
c0014231:	90                   	nop

c0014232 <Device::hibernate()>:
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::wake()>:
c0014234:	c3                   	ret    
c0014235:	90                   	nop

c0014236 <Device::detect()>:
c0014236:	c3                   	ret    
c0014237:	90                   	nop

c0014238 <Device::disableLegacy()>:
c0014238:	c3                   	ret    
c0014239:	90                   	nop

c001423a <Device::powerSaving(PowerSavingLevel)>:
c001423a:	c3                   	ret    
c001423b:	90                   	nop

c001423c <DriverlessDevice::close(int, int, void*)>:
c001423c:	31 c0                	xor    eax,eax
c001423e:	c3                   	ret    
c001423f:	90                   	nop

c0014240 <DriverlessDevice::detect()>:
c0014240:	c3                   	ret    
c0014241:	90                   	nop

c0014242 <DriverlessDevice::open(int, int, void*)>:
c0014242:	83 ec 18             	sub    esp,0x18
c0014245:	68 10 ac 02 c0       	push   0xc002ac10
c001424a:	e8 b0 63 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c001424f:	83 c8 ff             	or     eax,0xffffffff
c0014252:	83 c4 1c             	add    esp,0x1c
c0014255:	c3                   	ret    

c0014256 <Device::~Device()>:
c0014256:	ba 38 ac 02 c0       	mov    edx,0xc002ac38
c001425b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001425f:	89 10                	mov    DWORD PTR [eax],edx
c0014261:	90                   	nop
c0014262:	c3                   	ret    
c0014263:	90                   	nop

c0014264 <Device::~Device()>:
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001426b:	e8 e6 ff ff ff       	call   c0014256 <Device::~Device()>
c0014270:	83 c4 04             	add    esp,0x4
c0014273:	83 ec 08             	sub    esp,0x8
c0014276:	68 58 01 00 00       	push   0x158
c001427b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427f:	e8 fa eb ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	83 c4 0c             	add    esp,0xc
c001428a:	c3                   	ret    
c001428b:	90                   	nop

c001428c <Device::findAndLoadDriver()>:
c001428c:	c3                   	ret    
c001428d:	90                   	nop

c001428e <Device::preOpenPCI(PCIDeviceInfo)>:
c001428e:	57                   	push   edi
c001428f:	b9 09 00 00 00       	mov    ecx,0x9
c0014294:	56                   	push   esi
c0014295:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014299:	8d 74 24 10          	lea    esi,[esp+0x10]
c001429d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142a7:	81 c7 18 01 00 00    	add    edi,0x118
c00142ad:	fc                   	cld    
c00142ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142b0:	5e                   	pop    esi
c00142b1:	5f                   	pop    edi
c00142b2:	c3                   	ret    
c00142b3:	90                   	nop

c00142b4 <Device::preOpenACPI(void*, char*, char*)>:
c00142b4:	56                   	push   esi
c00142b5:	53                   	push   ebx
c00142b6:	83 ec 08             	sub    esp,0x8
c00142b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142c1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142cf:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142d5:	6a 1e                	push   0x1e
c00142d7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142e1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142e7:	50                   	push   eax
c00142e8:	e8 57 c4 fe ff       	call   c0000744 <memcpy>
c00142ed:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142f1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142f5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142fd:	83 c4 14             	add    esp,0x14
c0014300:	5b                   	pop    ebx
c0014301:	5e                   	pop    esi
c0014302:	e9 3d c4 fe ff       	jmp    c0000744 <memcpy>
c0014307:	90                   	nop

c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001430c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014311:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014318:	75 0b                	jne    c0014325 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001431a:	8b 00                	mov    eax,DWORD PTR [eax]
c001431c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014320:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014323:	eb 1e                	jmp    c0014343 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014325:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001432a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014330:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014336:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014338:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001433c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014340:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014343:	ff e0                	jmp    eax
c0014345:	90                   	nop

c0014346 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001434f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014356:	75 0b                	jne    c0014363 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014358:	8b 00                	mov    eax,DWORD PTR [eax]
c001435a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001435e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014361:	eb 1e                	jmp    c0014381 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014363:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0014368:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001436e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014374:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014376:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001437a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014381:	ff e0                	jmp    eax
c0014383:	90                   	nop

c0014384 <Device::addChild(Device*)>:
c0014384:	53                   	push   ebx
c0014385:	83 ec 08             	sub    esp,0x8
c0014388:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001438c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014390:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014396:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001439c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001439e:	85 d2                	test   edx,edx
c00143a0:	74 04                	je     c00143a6 <Device::addChild(Device*)+0x22>
c00143a2:	89 d3                	mov    ebx,edx
c00143a4:	eb f6                	jmp    c001439c <Device::addChild(Device*)+0x18>
c00143a6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143a9:	83 ec 0c             	sub    esp,0xc
c00143ac:	6a 08                	push   0x8
c00143ae:	e8 90 b4 ff ff       	call   c000f843 <malloc>
c00143b3:	89 03                	mov    DWORD PTR [ebx],eax
c00143b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143c2:	83 c4 18             	add    esp,0x18
c00143c5:	5b                   	pop    ebx
c00143c6:	c3                   	ret    
c00143c7:	90                   	nop

c00143c8 <Device::removeAllChildren()>:
c00143c8:	56                   	push   esi
c00143c9:	53                   	push   ebx
c00143ca:	52                   	push   edx
c00143cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143cf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d8:	74 17                	je     c00143f1 <Device::removeAllChildren()+0x29>
c00143da:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143dd:	85 c0                	test   eax,eax
c00143df:	74 0c                	je     c00143ed <Device::removeAllChildren()+0x25>
c00143e1:	83 ec 0c             	sub    esp,0xc
c00143e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00143e6:	50                   	push   eax
c00143e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143ea:	83 c4 10             	add    esp,0x10
c00143ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ef:	eb e4                	jmp    c00143d5 <Device::removeAllChildren()+0xd>
c00143f1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143fd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014403:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001440a:	58                   	pop    eax
c001440b:	5b                   	pop    ebx
c001440c:	5e                   	pop    esi
c001440d:	c3                   	ret    

c001440e <Device::hibernateAll()>:
c001440e:	53                   	push   ebx
c001440f:	83 ec 14             	sub    esp,0x14
c0014412:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014416:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014418:	53                   	push   ebx
c0014419:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001441c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014422:	83 c4 10             	add    esp,0x10
c0014425:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014428:	74 0f                	je     c0014439 <Device::hibernateAll()+0x2b>
c001442a:	83 ec 0c             	sub    esp,0xc
c001442d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014430:	e8 d9 ff ff ff       	call   c001440e <Device::hibernateAll()>
c0014435:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014437:	eb e9                	jmp    c0014422 <Device::hibernateAll()+0x14>
c0014439:	83 c4 08             	add    esp,0x8
c001443c:	5b                   	pop    ebx
c001443d:	c3                   	ret    

c001443e <Device::wakeAll()>:
c001443e:	53                   	push   ebx
c001443f:	83 ec 14             	sub    esp,0x14
c0014442:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014446:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014448:	53                   	push   ebx
c0014449:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001444c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014458:	74 0f                	je     c0014469 <Device::wakeAll()+0x2b>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014460:	e8 d9 ff ff ff       	call   c001443e <Device::wakeAll()>
c0014465:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014467:	eb e9                	jmp    c0014452 <Device::wakeAll()+0x14>
c0014469:	83 c4 08             	add    esp,0x8
c001446c:	5b                   	pop    ebx
c001446d:	c3                   	ret    

c001446e <Device::detectAll()>:
c001446e:	53                   	push   ebx
c001446f:	83 ec 14             	sub    esp,0x14
c0014472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014476:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014478:	53                   	push   ebx
c0014479:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001447c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014488:	74 0f                	je     c0014499 <Device::detectAll()+0x2b>
c001448a:	83 ec 0c             	sub    esp,0xc
c001448d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014490:	e8 d9 ff ff ff       	call   c001446e <Device::detectAll()>
c0014495:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014497:	eb e9                	jmp    c0014482 <Device::detectAll()+0x14>
c0014499:	83 c4 08             	add    esp,0x8
c001449c:	5b                   	pop    ebx
c001449d:	c3                   	ret    

c001449e <Device::disableLegacyAll()>:
c001449e:	53                   	push   ebx
c001449f:	83 ec 14             	sub    esp,0x14
c00144a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a8:	53                   	push   ebx
c00144a9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144ac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b2:	83 c4 10             	add    esp,0x10
c00144b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b8:	74 0f                	je     c00144c9 <Device::disableLegacyAll()+0x2b>
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c0:	e8 d9 ff ff ff       	call   c001449e <Device::disableLegacyAll()>
c00144c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c7:	eb e9                	jmp    c00144b2 <Device::disableLegacyAll()+0x14>
c00144c9:	83 c4 08             	add    esp,0x8
c00144cc:	5b                   	pop    ebx
c00144cd:	c3                   	ret    

c00144ce <Device::loadDriversForAll()>:
c00144ce:	53                   	push   ebx
c00144cf:	83 ec 08             	sub    esp,0x8
c00144d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144dc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144de:	85 db                	test   ebx,ebx
c00144e0:	74 12                	je     c00144f4 <Device::loadDriversForAll()+0x26>
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144e8:	e8 e1 ff ff ff       	call   c00144ce <Device::loadDriversForAll()>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	89 d8                	mov    eax,ebx
c00144f2:	eb e8                	jmp    c00144dc <Device::loadDriversForAll()+0xe>
c00144f4:	83 c4 08             	add    esp,0x8
c00144f7:	5b                   	pop    ebx
c00144f8:	c3                   	ret    
c00144f9:	90                   	nop

c00144fa <Device::closeAll()>:
c00144fa:	53                   	push   ebx
c00144fb:	83 ec 08             	sub    esp,0x8
c00144fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014502:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014504:	6a 00                	push   0x0
c0014506:	6a 00                	push   0x0
c0014508:	6a 00                	push   0x0
c001450a:	53                   	push   ebx
c001450b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001450e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451a:	74 0f                	je     c001452b <Device::closeAll()+0x31>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014522:	e8 d3 ff ff ff       	call   c00144fa <Device::closeAll()>
c0014527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014529:	eb e9                	jmp    c0014514 <Device::closeAll()+0x1a>
c001452b:	83 c4 08             	add    esp,0x8
c001452e:	5b                   	pop    ebx
c001452f:	c3                   	ret    

c0014530 <Device::powerSavingAll(PowerSavingLevel)>:
c0014530:	56                   	push   esi
c0014531:	53                   	push   ebx
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014539:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001453d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453f:	56                   	push   esi
c0014540:	53                   	push   ebx
c0014541:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014544:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001454a:	83 c4 10             	add    esp,0x10
c001454d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014550:	74 0f                	je     c0014561 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014552:	52                   	push   edx
c0014553:	52                   	push   edx
c0014554:	56                   	push   esi
c0014555:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014558:	e8 d3 ff ff ff       	call   c0014530 <Device::powerSavingAll(PowerSavingLevel)>
c001455d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001455f:	eb e9                	jmp    c001454a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014561:	58                   	pop    eax
c0014562:	5b                   	pop    ebx
c0014563:	5e                   	pop    esi
c0014564:	c3                   	ret    
c0014565:	90                   	nop

c0014566 <Device::setName(char const*)>:
c0014566:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001456e:	e9 c1 c2 fe ff       	jmp    c0000834 <strcpy>
c0014573:	90                   	nop

c0014574 <Device::Device(char const*)>:
c0014574:	83 ec 1c             	sub    esp,0x1c
c0014577:	ba 38 ac 02 c0       	mov    edx,0xc002ac38
c001457c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014580:	89 10                	mov    DWORD PTR [eax],edx
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014594:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001459e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ba:	83 ec 08             	sub    esp,0x8
c00145bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145c5:	e8 9c ff ff ff       	call   c0014566 <Device::setName(char const*)>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145d5:	83 ec 0c             	sub    esp,0xc
c00145d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145dc:	e8 62 b2 ff ff       	call   c000f843 <malloc>
c00145e1:	83 c4 10             	add    esp,0x10
c00145e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145f5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014605:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001460b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014615:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014636:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014644:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001464e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014652:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001465c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014660:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001466a:	90                   	nop
c001466b:	83 c4 1c             	add    esp,0x1c
c001466e:	c3                   	ret    
c001466f:	90                   	nop

c0014670 <Device::getName()>:
c0014670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014674:	05 d0 00 00 00       	add    eax,0xd0
c0014679:	c3                   	ret    

c001467a <DriverlessDevice::DriverlessDevice(char const*)>:
c001467a:	83 ec 0c             	sub    esp,0xc
c001467d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014681:	83 ec 08             	sub    esp,0x8
c0014684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014688:	50                   	push   eax
c0014689:	e8 e6 fe ff ff       	call   c0014574 <Device::Device(char const*)>
c001468e:	83 c4 10             	add    esp,0x10
c0014691:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0014696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469a:	89 10                	mov    DWORD PTR [eax],edx
c001469c:	90                   	nop
c001469d:	83 c4 0c             	add    esp,0xc
c00146a0:	c3                   	ret    
c00146a1:	90                   	nop

c00146a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146a2:	57                   	push   edi
c00146a3:	56                   	push   esi
c00146a4:	53                   	push   ebx
c00146a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146b1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146b7:	75 0c                	jne    c00146c5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146b9:	52                   	push   edx
c00146ba:	52                   	push   edx
c00146bb:	53                   	push   ebx
c00146bc:	56                   	push   esi
c00146bd:	e8 38 42 01 00       	call   c00288fa <LinkedList<Device>::addElement(Device*)>
c00146c2:	83 c4 10             	add    esp,0x10
c00146c5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146ce:	74 12                	je     c00146e2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146d0:	50                   	push   eax
c00146d1:	57                   	push   edi
c00146d2:	56                   	push   esi
c00146d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146d6:	e8 c7 ff ff ff       	call   c00146a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146dd:	83 c4 10             	add    esp,0x10
c00146e0:	eb e9                	jmp    c00146cb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146e2:	5b                   	pop    ebx
c00146e3:	5e                   	pop    esi
c00146e4:	5f                   	pop    edi
c00146e5:	c3                   	ret    

c00146e6 <getDevicesOfType(DeviceType)>:
c00146e6:	53                   	push   ebx
c00146e7:	83 ec 14             	sub    esp,0x14
c00146ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146ee:	53                   	push   ebx
c00146ef:	e8 e2 42 01 00       	call   c00289d6 <LinkedList<Device>::LinkedList()>
c00146f4:	83 c4 0c             	add    esp,0xc
c00146f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146fb:	53                   	push   ebx
c00146fc:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c0014702:	e8 9b ff ff ff       	call   c00146a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014707:	89 d8                	mov    eax,ebx
c0014709:	83 c4 18             	add    esp,0x18
c001470c:	5b                   	pop    ebx
c001470d:	c2 04 00             	ret    0x4

c0014710 <HardDiskController::HardDiskController(char const*)>:
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014717:	83 ec 08             	sub    esp,0x8
c001471a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471e:	50                   	push   eax
c001471f:	e8 50 fe ff ff       	call   c0014574 <Device::Device(char const*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c001472c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014730:	89 10                	mov    DWORD PTR [eax],edx
c0014732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014736:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014740:	90                   	nop
c0014741:	83 c4 0c             	add    esp,0xc
c0014744:	c3                   	ret    
c0014745:	90                   	nop

c0014746 <HardDiskController::~HardDiskController()>:
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c001474e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014752:	89 10                	mov    DWORD PTR [eax],edx
c0014754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	50                   	push   eax
c001475c:	e8 f5 fa ff ff       	call   c0014256 <Device::~Device()>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	90                   	nop
c0014765:	83 c4 0c             	add    esp,0xc
c0014768:	c3                   	ret    
c0014769:	90                   	nop

c001476a <HardDiskController::~HardDiskController()>:
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	83 ec 0c             	sub    esp,0xc
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	e8 cd ff ff ff       	call   c0014746 <HardDiskController::~HardDiskController()>
c0014779:	83 c4 10             	add    esp,0x10
c001477c:	83 ec 08             	sub    esp,0x8
c001477f:	68 58 01 00 00       	push   0x158
c0014784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014788:	e8 f1 e6 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 c4 0c             	add    esp,0xc
c0014793:	c3                   	ret    

c0014794 <PhysicalDisk::eject()>:
c0014794:	83 ec 18             	sub    esp,0x18
c0014797:	68 b4 ac 02 c0       	push   0xc002acb4
c001479c:	e8 bd e7 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00147a1:	83 c8 ff             	or     eax,0xffffffff
c00147a4:	83 c4 1c             	add    esp,0x1c
c00147a7:	c3                   	ret    

c00147a8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147af:	83 ec 08             	sub    esp,0x8
c00147b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b6:	50                   	push   eax
c00147b7:	e8 b8 fd ff ff       	call   c0014574 <Device::Device(char const*)>
c00147bc:	83 c4 10             	add    esp,0x10
c00147bf:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c00147c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c8:	89 10                	mov    DWORD PTR [eax],edx
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014800:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001480a:	90                   	nop
c001480b:	83 c4 0c             	add    esp,0xc
c001480e:	c3                   	ret    
c001480f:	90                   	nop

c0014810 <PhysicalDisk::startCache()>:
c0014810:	56                   	push   esi
c0014811:	53                   	push   ebx
c0014812:	83 ec 10             	sub    esp,0x10
c0014815:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014819:	6a 44                	push   0x44
c001481b:	e8 23 b0 ff ff       	call   c000f843 <malloc>
c0014820:	89 c6                	mov    esi,eax
c0014822:	58                   	pop    eax
c0014823:	5a                   	pop    edx
c0014824:	53                   	push   ebx
c0014825:	56                   	push   esi
c0014826:	e8 29 27 00 00       	call   c0016f54 <VCache::VCache(PhysicalDisk*)>
c001482b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014831:	83 c4 14             	add    esp,0x14
c0014834:	5b                   	pop    ebx
c0014835:	5e                   	pop    esi
c0014836:	c3                   	ret    
c0014837:	90                   	nop

c0014838 <PhysicalDisk::~PhysicalDisk()>:
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c0014840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014844:	89 10                	mov    DWORD PTR [eax],edx
c0014846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484a:	83 ec 0c             	sub    esp,0xc
c001484d:	50                   	push   eax
c001484e:	e8 03 fa ff ff       	call   c0014256 <Device::~Device()>
c0014853:	83 c4 10             	add    esp,0x10
c0014856:	90                   	nop
c0014857:	83 c4 0c             	add    esp,0xc
c001485a:	c3                   	ret    
c001485b:	90                   	nop

c001485c <PhysicalDisk::~PhysicalDisk()>:
c001485c:	83 ec 0c             	sub    esp,0xc
c001485f:	83 ec 0c             	sub    esp,0xc
c0014862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014866:	e8 cd ff ff ff       	call   c0014838 <PhysicalDisk::~PhysicalDisk()>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	83 ec 08             	sub    esp,0x8
c0014871:	68 6c 01 00 00       	push   0x16c
c0014876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487a:	e8 ff e5 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	83 c4 0c             	add    esp,0xc
c0014885:	c3                   	ret    

c0014886 <FPU::FPU(char const*)>:
c0014886:	83 ec 0c             	sub    esp,0xc
c0014889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488d:	83 ec 08             	sub    esp,0x8
c0014890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014894:	50                   	push   eax
c0014895:	e8 da fc ff ff       	call   c0014574 <Device::Device(char const*)>
c001489a:	83 c4 10             	add    esp,0x10
c001489d:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c00148a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a6:	89 10                	mov    DWORD PTR [eax],edx
c00148a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ac:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148b6:	90                   	nop
c00148b7:	83 c4 0c             	add    esp,0xc
c00148ba:	c3                   	ret    
c00148bb:	90                   	nop

c00148bc <FPU::~FPU()>:
c00148bc:	83 ec 0c             	sub    esp,0xc
c00148bf:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c00148c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c8:	89 10                	mov    DWORD PTR [eax],edx
c00148ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ce:	83 ec 0c             	sub    esp,0xc
c00148d1:	50                   	push   eax
c00148d2:	e8 7f f9 ff ff       	call   c0014256 <Device::~Device()>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	90                   	nop
c00148db:	83 c4 0c             	add    esp,0xc
c00148de:	c3                   	ret    
c00148df:	90                   	nop

c00148e0 <FPU::~FPU()>:
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ea:	e8 cd ff ff ff       	call   c00148bc <FPU::~FPU()>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	83 ec 08             	sub    esp,0x8
c00148f5:	68 58 01 00 00       	push   0x158
c00148fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148fe:	e8 7b e5 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	83 c4 0c             	add    esp,0xc
c0014909:	c3                   	ret    

c001490a <setupFPU()>:
c001490a:	53                   	push   ebx
c001490b:	83 ec 08             	sub    esp,0x8
c001490e:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c0014914:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001491b:	74 19                	je     c0014936 <setupFPU()+0x2c>
c001491d:	83 ec 0c             	sub    esp,0xc
c0014920:	68 58 01 00 00       	push   0x158
c0014925:	e8 19 af ff ff       	call   c000f843 <malloc>
c001492a:	89 c3                	mov    ebx,eax
c001492c:	89 04 24             	mov    DWORD PTR [esp],eax
c001492f:	e8 0c 0c 01 00       	call   c0025540 <AVX::AVX()>
c0014934:	eb 5b                	jmp    c0014991 <setupFPU()+0x87>
c0014936:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001493c:	84 c0                	test   al,al
c001493e:	79 19                	jns    c0014959 <setupFPU()+0x4f>
c0014940:	83 ec 0c             	sub    esp,0xc
c0014943:	68 58 01 00 00       	push   0x158
c0014948:	e8 f6 ae ff ff       	call   c000f843 <malloc>
c001494d:	89 c3                	mov    ebx,eax
c001494f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014952:	e8 0f 0d 01 00       	call   c0025666 <SSE::SSE()>
c0014957:	eb 38                	jmp    c0014991 <setupFPU()+0x87>
c0014959:	a8 20                	test   al,0x20
c001495b:	74 19                	je     c0014976 <setupFPU()+0x6c>
c001495d:	83 ec 0c             	sub    esp,0xc
c0014960:	68 58 01 00 00       	push   0x158
c0014965:	e8 d9 ae ff ff       	call   c000f843 <malloc>
c001496a:	89 c3                	mov    ebx,eax
c001496c:	89 04 24             	mov    DWORD PTR [esp],eax
c001496f:	e8 5c 0c 01 00       	call   c00255d0 <MMX::MMX()>
c0014974:	eb 1b                	jmp    c0014991 <setupFPU()+0x87>
c0014976:	a8 10                	test   al,0x10
c0014978:	74 1c                	je     c0014996 <setupFPU()+0x8c>
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	68 58 01 00 00       	push   0x158
c0014982:	e8 bc ae ff ff       	call   c000f843 <malloc>
c0014987:	89 c3                	mov    ebx,eax
c0014989:	89 04 24             	mov    DWORD PTR [esp],eax
c001498c:	e8 63 0d 01 00       	call   c00256f4 <x87::x87()>
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	eb 24                	jmp    c00149ba <setupFPU()+0xb0>
c0014996:	83 e0 ef             	and    eax,0xffffffef
c0014999:	83 ec 0c             	sub    esp,0xc
c001499c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149a2:	68 14 ad 02 c0       	push   0xc002ad14
c00149a7:	e8 b2 e5 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00149ac:	0f 20 c0             	mov    eax,cr0
c00149af:	83 c8 04             	or     eax,0x4
c00149b2:	0f 22 c0             	mov    cr0,eax
c00149b5:	31 db                	xor    ebx,ebx
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	89 d8                	mov    eax,ebx
c00149bc:	83 c4 08             	add    esp,0x8
c00149bf:	5b                   	pop    ebx
c00149c0:	c3                   	ret    
c00149c1:	90                   	nop

c00149c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149ca:	c1 e0 04             	shl    eax,0x4
c00149cd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149d1:	8d 50 10             	lea    edx,[eax+0x10]
c00149d4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149da:	74 08                	je     c00149e4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149dc:	83 c0 04             	add    eax,0x4
c00149df:	39 d0                	cmp    eax,edx
c00149e1:	75 f1                	jne    c00149d4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149e3:	c3                   	ret    
c00149e4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149ee:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149f8:	eb e2                	jmp    c00149dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149fa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149fa:	57                   	push   edi
c00149fb:	31 c0                	xor    eax,eax
c00149fd:	56                   	push   esi
c00149fe:	53                   	push   ebx
c00149ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a07:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a0b:	89 da                	mov    edx,ebx
c0014a0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a11:	c1 e2 04             	shl    edx,0x4
c0014a14:	01 ca                	add    edx,ecx
c0014a16:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a1e:	74 16                	je     c0014a36 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a20:	40                   	inc    eax
c0014a21:	83 f8 04             	cmp    eax,0x4
c0014a24:	75 f0                	jne    c0014a16 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a26:	c7 44 24 10 58 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad58
c0014a2e:	5b                   	pop    ebx
c0014a2f:	5e                   	pop    esi
c0014a30:	5f                   	pop    edi
c0014a31:	e9 c9 5b 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c0014a36:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a39:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a3c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a42:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a48:	5b                   	pop    ebx
c0014a49:	5e                   	pop    esi
c0014a4a:	5f                   	pop    edi
c0014a4b:	c3                   	ret    

c0014a4c <doubleFault(regs*, void*)>:
c0014a4c:	55                   	push   ebp
c0014a4d:	89 e5                	mov    ebp,esp
c0014a4f:	83 ec 08             	sub    esp,0x8
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	68 93 ad 02 c0       	push   0xc002ad93
c0014a5a:	e8 a0 5b 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0014a5f:	83 c4 10             	add    esp,0x10
c0014a62:	90                   	nop
c0014a63:	c9                   	leave  
c0014a64:	c3                   	ret    
c0014a65:	90                   	nop

c0014a66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a66:	56                   	push   esi
c0014a67:	53                   	push   ebx
c0014a68:	50                   	push   eax
c0014a69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a71:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a76:	75 35                	jne    c0014aad <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a78:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a7b:	31 d2                	xor    edx,edx
c0014a7d:	89 c1                	mov    ecx,eax
c0014a7f:	c1 e1 04             	shl    ecx,0x4
c0014a82:	01 f1                	add    ecx,esi
c0014a84:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a8c:	74 3e                	je     c0014acc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a8e:	42                   	inc    edx
c0014a8f:	83 fa 04             	cmp    edx,0x4
c0014a92:	75 f0                	jne    c0014a84 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a94:	83 ec 0c             	sub    esp,0xc
c0014a97:	68 d8 ad 02 c0       	push   0xc002add8
c0014a9c:	e8 5e 5b 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0014aa1:	83 c4 10             	add    esp,0x10
c0014aa4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014aa9:	5a                   	pop    edx
c0014aaa:	5b                   	pop    ebx
c0014aab:	5e                   	pop    esi
c0014aac:	c3                   	ret    
c0014aad:	83 ec 0c             	sub    esp,0xc
c0014ab0:	56                   	push   esi
c0014ab1:	e8 ba fb ff ff       	call   c0014670 <Device::getName()>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014abc:	75 ba                	jne    c0014a78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014abe:	83 fb 0f             	cmp    ebx,0xf
c0014ac1:	7f 29                	jg     c0014aec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ac3:	0f b6 9b 20 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd29e0]
c0014aca:	eb ac                	jmp    c0014a78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014acc:	8d 04 82             	lea    eax,[edx+eax*4]
c0014acf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ad3:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ad6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014adc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ae0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ae6:	89 d8                	mov    eax,ebx
c0014ae8:	5a                   	pop    edx
c0014ae9:	5b                   	pop    ebx
c0014aea:	5e                   	pop    esi
c0014aeb:	c3                   	ret    
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	68 a0 ad 02 c0       	push   0xc002ada0
c0014af4:	e8 06 5b 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0014af9:	83 c4 10             	add    esp,0x10
c0014afc:	e9 77 ff ff ff       	jmp    c0014a78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b01:	90                   	nop

c0014b02 <InterruptController::clearAllHandlers(int, bool)>:
c0014b02:	56                   	push   esi
c0014b03:	53                   	push   ebx
c0014b04:	52                   	push   edx
c0014b05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b0d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b12:	75 61                	jne    c0014b75 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b14:	8d 46 20             	lea    eax,[esi+0x20]
c0014b17:	c1 e6 04             	shl    esi,0x4
c0014b1a:	c1 e0 04             	shl    eax,0x4
c0014b1d:	01 de                	add    esi,ebx
c0014b1f:	01 d8                	add    eax,ebx
c0014b21:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b2b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b35:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b3f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b49:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b53:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b5d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b67:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b71:	58                   	pop    eax
c0014b72:	5b                   	pop    ebx
c0014b73:	5e                   	pop    esi
c0014b74:	c3                   	ret    
c0014b75:	83 ec 0c             	sub    esp,0xc
c0014b78:	53                   	push   ebx
c0014b79:	e8 f2 fa ff ff       	call   c0014670 <Device::getName()>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b84:	75 8e                	jne    c0014b14 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b86:	83 fe 0f             	cmp    esi,0xf
c0014b89:	7f 09                	jg     c0014b94 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b8b:	0f b6 b6 20 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd29e0]
c0014b92:	eb 80                	jmp    c0014b14 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b94:	83 ec 0c             	sub    esp,0xc
c0014b97:	68 14 ae 02 c0       	push   0xc002ae14
c0014b9c:	e8 5e 5a 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	e9 6b ff ff ff       	jmp    c0014b14 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba9:	90                   	nop

c0014baa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014baa:	56                   	push   esi
c0014bab:	53                   	push   ebx
c0014bac:	52                   	push   edx
c0014bad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bb5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bba:	75 3a                	jne    c0014bf6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc0:	8d 50 20             	lea    edx,[eax+0x20]
c0014bc3:	c1 e2 04             	shl    edx,0x4
c0014bc6:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bc9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bcd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bd3:	74 0b                	je     c0014be0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bd5:	83 c0 04             	add    eax,0x4
c0014bd8:	39 d0                	cmp    eax,edx
c0014bda:	75 f1                	jne    c0014bcd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bdc:	58                   	pop    eax
c0014bdd:	5b                   	pop    ebx
c0014bde:	5e                   	pop    esi
c0014bdf:	c3                   	ret    
c0014be0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bea:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bf4:	eb df                	jmp    c0014bd5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bf6:	83 ec 0c             	sub    esp,0xc
c0014bf9:	56                   	push   esi
c0014bfa:	e8 71 fa ff ff       	call   c0014670 <Device::getName()>
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c05:	75 b5                	jne    c0014bbc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c07:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c0c:	7f 11                	jg     c0014c1f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c12:	0f b6 80 20 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd29e0]
c0014c19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c1d:	eb 9d                	jmp    c0014bbc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c1f:	83 ec 0c             	sub    esp,0xc
c0014c22:	68 14 ae 02 c0       	push   0xc002ae14
c0014c27:	e8 d3 59 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0014c2c:	83 c4 10             	add    esp,0x10
c0014c2f:	eb 8b                	jmp    c0014bbc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c31 <nmiHandler(regs*, void*)>:
c0014c31:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0014c36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c3a:	e9 4d a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c3f <int_handler>:
c0014c3f:	55                   	push   ebp
c0014c40:	57                   	push   edi
c0014c41:	56                   	push   esi
c0014c42:	53                   	push   ebx
c0014c43:	83 ec 0c             	sub    esp,0xc
c0014c46:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c4a:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c0014c51:	74 0b                	je     c0014c5e <int_handler+0x1f>
c0014c53:	fa                   	cli    
c0014c54:	f4                   	hlt    
c0014c55:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c0014c5c:	75 f5                	jne    c0014c53 <int_handler+0x14>
c0014c5e:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0014c63:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c6c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c72:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c75:	83 f8 17             	cmp    eax,0x17
c0014c78:	77 13                	ja     c0014c8d <int_handler+0x4e>
c0014c7a:	83 ec 08             	sub    esp,0x8
c0014c7d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c7f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c82:	0f b6 c0             	movzx  eax,al
c0014c85:	50                   	push   eax
c0014c86:	57                   	push   edi
c0014c87:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	83 c3 15             	add    ebx,0x15
c0014c90:	c1 e3 04             	shl    ebx,0x4
c0014c93:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c97:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c9e:	31 db                	xor    ebx,ebx
c0014ca0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ca4:	85 c0                	test   eax,eax
c0014ca6:	74 13                	je     c0014cbb <int_handler+0x7c>
c0014ca8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014cab:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014caf:	74 1c                	je     c0014ccd <int_handler+0x8e>
c0014cb1:	83 ec 08             	sub    esp,0x8
c0014cb4:	52                   	push   edx
c0014cb5:	56                   	push   esi
c0014cb6:	ff d0                	call   eax
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	43                   	inc    ebx
c0014cbc:	83 fb 04             	cmp    ebx,0x4
c0014cbf:	75 df                	jne    c0014ca0 <int_handler+0x61>
c0014cc1:	83 c4 0c             	add    esp,0xc
c0014cc4:	31 c0                	xor    eax,eax
c0014cc6:	5b                   	pop    ebx
c0014cc7:	31 d2                	xor    edx,edx
c0014cc9:	5e                   	pop    esi
c0014cca:	5f                   	pop    edi
c0014ccb:	5d                   	pop    ebp
c0014ccc:	c3                   	ret    
c0014ccd:	83 ec 08             	sub    esp,0x8
c0014cd0:	52                   	push   edx
c0014cd1:	56                   	push   esi
c0014cd2:	ff d0                	call   eax
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	83 c4 0c             	add    esp,0xc
c0014cda:	5b                   	pop    ebx
c0014cdb:	5e                   	pop    esi
c0014cdc:	5f                   	pop    edi
c0014cdd:	5d                   	pop    ebp
c0014cde:	c3                   	ret    
c0014cdf:	90                   	nop

c0014ce0 <InterruptController::InterruptController(char const*)>:
c0014ce0:	83 ec 1c             	sub    esp,0x1c
c0014ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce7:	83 ec 08             	sub    esp,0x8
c0014cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cee:	50                   	push   eax
c0014cef:	e8 80 f8 ff ff       	call   c0014574 <Device::Device(char const*)>
c0014cf4:	83 c4 10             	add    esp,0x10
c0014cf7:	ba b0 b0 02 c0       	mov    edx,0xc002b0b0
c0014cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d00:	89 10                	mov    DWORD PTR [eax],edx
c0014d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d06:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d18:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d20:	7f 5e                	jg     c0014d80 <InterruptController::InterruptController(char const*)+0xa0>
c0014d22:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d2a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d2f:	7f 49                	jg     c0014d7a <InterruptController::InterruptController(char const*)+0x9a>
c0014d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d39:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d44:	01 ca                	add    edx,ecx
c0014d46:	83 c2 54             	add    edx,0x54
c0014d49:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d59:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d64:	01 ca                	add    edx,ecx
c0014d66:	81 c2 54 04 00 00    	add    edx,0x454
c0014d6c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d74:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d78:	eb b0                	jmp    c0014d2a <InterruptController::InterruptController(char const*)+0x4a>
c0014d7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d7e:	eb 98                	jmp    c0014d18 <InterruptController::InterruptController(char const*)+0x38>
c0014d80:	90                   	nop
c0014d81:	83 c4 1c             	add    esp,0x1c
c0014d84:	c3                   	ret    
c0014d85:	90                   	nop

c0014d86 <InterruptController::~InterruptController()>:
c0014d86:	83 ec 0c             	sub    esp,0xc
c0014d89:	ba b0 b0 02 c0       	mov    edx,0xc002b0b0
c0014d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d92:	89 10                	mov    DWORD PTR [eax],edx
c0014d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d98:	83 ec 0c             	sub    esp,0xc
c0014d9b:	50                   	push   eax
c0014d9c:	e8 b5 f4 ff ff       	call   c0014256 <Device::~Device()>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	90                   	nop
c0014da5:	83 c4 0c             	add    esp,0xc
c0014da8:	c3                   	ret    
c0014da9:	90                   	nop

c0014daa <InterruptController::~InterruptController()>:
c0014daa:	83 ec 0c             	sub    esp,0xc
c0014dad:	83 ec 0c             	sub    esp,0xc
c0014db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db4:	e8 cd ff ff ff       	call   c0014d86 <InterruptController::~InterruptController()>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	83 ec 08             	sub    esp,0x8
c0014dbf:	68 58 21 00 00       	push   0x2158
c0014dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc8:	e8 b1 e0 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	83 c4 0c             	add    esp,0xc
c0014dd3:	c3                   	ret    

c0014dd4 <displayDebugInfo(regs*)>:
c0014dd4:	55                   	push   ebp
c0014dd5:	57                   	push   edi
c0014dd6:	56                   	push   esi
c0014dd7:	53                   	push   ebx
c0014dd8:	83 ec 24             	sub    esp,0x24
c0014ddb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ddf:	0f 20 c2             	mov    edx,cr0
c0014de2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014de6:	0f 20 d7             	mov    edi,cr2
c0014de9:	0f 20 de             	mov    esi,cr3
c0014dec:	0f 20 e5             	mov    ebp,cr4
c0014def:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014df2:	68 4e ae 02 c0       	push   0xc002ae4e
c0014df7:	e8 62 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014dfc:	59                   	pop    ecx
c0014dfd:	58                   	pop    eax
c0014dfe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e01:	68 59 ae 02 c0       	push   0xc002ae59
c0014e06:	e8 53 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e0b:	58                   	pop    eax
c0014e0c:	5a                   	pop    edx
c0014e0d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e10:	68 64 ae 02 c0       	push   0xc002ae64
c0014e15:	e8 44 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e1a:	59                   	pop    ecx
c0014e1b:	58                   	pop    eax
c0014e1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e1f:	68 6f ae 02 c0       	push   0xc002ae6f
c0014e24:	e8 35 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e29:	58                   	pop    eax
c0014e2a:	5a                   	pop    edx
c0014e2b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e2e:	68 7a ae 02 c0       	push   0xc002ae7a
c0014e33:	e8 26 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e38:	59                   	pop    ecx
c0014e39:	58                   	pop    eax
c0014e3a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e3d:	68 85 ae 02 c0       	push   0xc002ae85
c0014e42:	e8 17 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e47:	58                   	pop    eax
c0014e48:	5a                   	pop    edx
c0014e49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e4c:	68 90 ae 02 c0       	push   0xc002ae90
c0014e51:	e8 08 e1 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e56:	59                   	pop    ecx
c0014e57:	58                   	pop    eax
c0014e58:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e5b:	68 9b ae 02 c0       	push   0xc002ae9b
c0014e60:	e8 f9 e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e65:	58                   	pop    eax
c0014e66:	5a                   	pop    edx
c0014e67:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e6a:	68 a6 ae 02 c0       	push   0xc002aea6
c0014e6f:	e8 ea e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e74:	59                   	pop    ecx
c0014e75:	58                   	pop    eax
c0014e76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e79:	68 b5 ae 02 c0       	push   0xc002aeb5
c0014e7e:	e8 db e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e83:	58                   	pop    eax
c0014e84:	5a                   	pop    edx
c0014e85:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e88:	68 c0 ae 02 c0       	push   0xc002aec0
c0014e8d:	e8 cc e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	57                   	push   edi
c0014e95:	68 cb ae 02 c0       	push   0xc002aecb
c0014e9a:	e8 bf e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014e9f:	58                   	pop    eax
c0014ea0:	5a                   	pop    edx
c0014ea1:	56                   	push   esi
c0014ea2:	68 d6 ae 02 c0       	push   0xc002aed6
c0014ea7:	e8 b2 e0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0014eac:	59                   	pop    ecx
c0014ead:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014eb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb8:	e8 9a be ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0014ebd:	58                   	pop    eax
c0014ebe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ec1:	5a                   	pop    edx
c0014ec2:	c1 e0 05             	shl    eax,0x5
c0014ec5:	05 80 d3 02 c0       	add    eax,0xc002d380
c0014eca:	50                   	push   eax
c0014ecb:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed6:	e8 9b c2 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014edb:	59                   	pop    ecx
c0014edc:	58                   	pop    eax
c0014edd:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ee2:	68 e1 ae 02 c0       	push   0xc002aee1
c0014ee7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eed:	e8 84 c2 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014ef2:	58                   	pop    eax
c0014ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef8:	5a                   	pop    edx
c0014ef9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014efc:	83 c0 0c             	add    eax,0xc
c0014eff:	50                   	push   eax
c0014f00:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0b:	e8 66 c2 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014f10:	59                   	pop    ecx
c0014f11:	58                   	pop    eax
c0014f12:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f17:	68 ea ae 02 c0       	push   0xc002aeea
c0014f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f22:	e8 4f c2 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014f27:	58                   	pop    eax
c0014f28:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f2d:	5a                   	pop    edx
c0014f2e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f37:	e8 60 c2 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014f3c:	59                   	pop    ecx
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f43:	68 f2 ae 02 c0       	push   0xc002aef2
c0014f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4e:	e8 23 c2 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014f53:	58                   	pop    eax
c0014f54:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f59:	5a                   	pop    edx
c0014f5a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f63:	e8 34 c2 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014f68:	59                   	pop    ecx
c0014f69:	58                   	pop    eax
c0014f6a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f6f:	68 fa ae 02 c0       	push   0xc002aefa
c0014f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7a:	e8 f7 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014f7f:	58                   	pop    eax
c0014f80:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f85:	5a                   	pop    edx
c0014f86:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8f:	e8 08 c2 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014f94:	59                   	pop    ecx
c0014f95:	58                   	pop    eax
c0014f96:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f9b:	68 02 af 02 c0       	push   0xc002af02
c0014fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa6:	e8 cb c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fab:	58                   	pop    eax
c0014fac:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fb1:	5a                   	pop    edx
c0014fb2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbb:	e8 dc c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014fc0:	59                   	pop    ecx
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fc7:	68 0a af 02 c0       	push   0xc002af0a
c0014fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd2:	e8 9f c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fdd:	5a                   	pop    edx
c0014fde:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe7:	e8 b0 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014fec:	59                   	pop    ecx
c0014fed:	58                   	pop    eax
c0014fee:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ff3:	68 12 af 02 c0       	push   0xc002af12
c0014ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffe:	e8 73 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015003:	58                   	pop    eax
c0015004:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015009:	5a                   	pop    edx
c001500a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001500d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015013:	e8 84 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015018:	59                   	pop    ecx
c0015019:	58                   	pop    eax
c001501a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001501f:	68 1a af 02 c0       	push   0xc002af1a
c0015024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502a:	e8 47 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001502f:	58                   	pop    eax
c0015030:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015035:	5a                   	pop    edx
c0015036:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001503a:	52                   	push   edx
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 56 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015046:	59                   	pop    ecx
c0015047:	58                   	pop    eax
c0015048:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001504d:	68 23 af 02 c0       	push   0xc002af23
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 19 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001505d:	58                   	pop    eax
c001505e:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015063:	5a                   	pop    edx
c0015064:	57                   	push   edi
c0015065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506b:	e8 2c c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015070:	59                   	pop    ecx
c0015071:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015076:	5f                   	pop    edi
c0015077:	68 2b af 02 c0       	push   0xc002af2b
c001507c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015082:	e8 ef c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015087:	58                   	pop    eax
c0015088:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001508d:	5a                   	pop    edx
c001508e:	56                   	push   esi
c001508f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015095:	e8 02 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001509a:	59                   	pop    ecx
c001509b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150a0:	5e                   	pop    esi
c00150a1:	68 33 af 02 c0       	push   0xc002af33
c00150a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ac:	e8 c5 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150b1:	5f                   	pop    edi
c00150b2:	58                   	pop    eax
c00150b3:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150b8:	55                   	push   ebp
c00150b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bf:	e8 d8 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150c4:	58                   	pop    eax
c00150c5:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150ca:	5a                   	pop    edx
c00150cb:	68 3b af 02 c0       	push   0xc002af3b
c00150d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d6:	e8 9b c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150db:	0f 21 c0             	mov    eax,db0
c00150de:	59                   	pop    ecx
c00150df:	5e                   	pop    esi
c00150e0:	50                   	push   eax
c00150e1:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ec:	e8 ab c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150f1:	5f                   	pop    edi
c00150f2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150f7:	5d                   	pop    ebp
c00150f8:	68 44 af 02 c0       	push   0xc002af44
c00150fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015103:	e8 6e c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015108:	0f 21 c8             	mov    eax,db1
c001510b:	5a                   	pop    edx
c001510c:	59                   	pop    ecx
c001510d:	50                   	push   eax
c001510e:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015119:	e8 7e c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001511e:	5e                   	pop    esi
c001511f:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015124:	5f                   	pop    edi
c0015125:	68 4c af 02 c0       	push   0xc002af4c
c001512a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015130:	e8 41 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015135:	0f 21 d0             	mov    eax,db2
c0015138:	5d                   	pop    ebp
c0015139:	5a                   	pop    edx
c001513a:	50                   	push   eax
c001513b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015146:	e8 51 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001514b:	59                   	pop    ecx
c001514c:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015151:	5e                   	pop    esi
c0015152:	68 54 af 02 c0       	push   0xc002af54
c0015157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515d:	e8 14 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015162:	0f 21 d8             	mov    eax,db3
c0015165:	5f                   	pop    edi
c0015166:	5d                   	pop    ebp
c0015167:	50                   	push   eax
c0015168:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001516d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015173:	e8 24 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015178:	58                   	pop    eax
c0015179:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001517e:	5a                   	pop    edx
c001517f:	68 5c af 02 c0       	push   0xc002af5c
c0015184:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518a:	e8 e7 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001518f:	0f 21 f0             	mov    eax,db6
c0015192:	59                   	pop    ecx
c0015193:	5e                   	pop    esi
c0015194:	50                   	push   eax
c0015195:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001519a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a0:	e8 f7 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151a5:	5f                   	pop    edi
c00151a6:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00151ab:	5d                   	pop    ebp
c00151ac:	68 64 af 02 c0       	push   0xc002af64
c00151b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b7:	e8 ba bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00151bc:	0f 21 f8             	mov    eax,db7
c00151bf:	5a                   	pop    edx
c00151c0:	59                   	pop    ecx
c00151c1:	50                   	push   eax
c00151c2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 ca bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151d2:	5e                   	pop    esi
c00151d3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151d6:	e8 06 85 00 00       	call   c001d6e1 <Thr::getDriverNameFromAddress(unsigned long)>
c00151db:	83 c4 10             	add    esp,0x10
c00151de:	85 c0                	test   eax,eax
c00151e0:	74 7d                	je     c001525f <displayDebugInfo(regs*)+0x48b>
c00151e2:	89 c6                	mov    esi,eax
c00151e4:	50                   	push   eax
c00151e5:	50                   	push   eax
c00151e6:	56                   	push   esi
c00151e7:	68 6c af 02 c0       	push   0xc002af6c
c00151ec:	e8 6d dd ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00151f1:	5a                   	pop    edx
c00151f2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00151f7:	59                   	pop    ecx
c00151f8:	68 7a af 02 c0       	push   0xc002af7a
c00151fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015203:	e8 6e bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015208:	5f                   	pop    edi
c0015209:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001520e:	5d                   	pop    ebp
c001520f:	56                   	push   esi
c0015210:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015216:	e8 5b bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001521b:	58                   	pop    eax
c001521c:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015221:	5a                   	pop    edx
c0015222:	68 86 af 02 c0       	push   0xc002af86
c0015227:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001522d:	e8 44 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015232:	59                   	pop    ecx
c0015233:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015238:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001523e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015241:	e8 d2 84 00 00       	call   c001d718 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015246:	5b                   	pop    ebx
c0015247:	5d                   	pop    ebp
c0015248:	50                   	push   eax
c0015249:	57                   	push   edi
c001524a:	e8 4d bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001524f:	58                   	pop    eax
c0015250:	5a                   	pop    edx
c0015251:	56                   	push   esi
c0015252:	68 92 af 02 c0       	push   0xc002af92
c0015257:	e8 02 dd ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	fa                   	cli    
c0015260:	f4                   	hlt    
c0015261:	eb fe                	jmp    c0015261 <displayDebugInfo(regs*)+0x48d>

c0015263 <x87EmulHandler(regs*, void*)>:
c0015263:	53                   	push   ebx
c0015264:	83 ec 14             	sub    esp,0x14
c0015267:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001526b:	53                   	push   ebx
c001526c:	e8 fd a7 00 00       	call   c001fa6e <Vm::x87Handler(regs*)>
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	84 c0                	test   al,al
c0015276:	74 05                	je     c001527d <x87EmulHandler(regs*, void*)+0x1a>
c0015278:	83 c4 08             	add    esp,0x8
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	83 ec 0c             	sub    esp,0xc
c0015280:	68 a2 af 02 c0       	push   0xc002afa2
c0015285:	e8 d4 dc ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001528a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001528d:	e8 42 fb ff ff       	call   c0014dd4 <displayDebugInfo(regs*)>

c0015292 <gpFault(regs*, void*)>:
c0015292:	53                   	push   ebx
c0015293:	83 ec 14             	sub    esp,0x14
c0015296:	c7 05 80 e5 02 c0 eb ed 01 c0 	mov    DWORD PTR ds:0xc002e580,0xc001edeb
c00152a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152a4:	53                   	push   ebx
c00152a5:	e8 41 9b 00 00       	call   c001edeb <Vm::faultHandler(regs*)>
c00152aa:	83 c4 10             	add    esp,0x10
c00152ad:	84 c0                	test   al,al
c00152af:	74 05                	je     c00152b6 <gpFault(regs*, void*)+0x24>
c00152b1:	83 c4 08             	add    esp,0x8
c00152b4:	5b                   	pop    ebx
c00152b5:	c3                   	ret    
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	68 b8 af 02 c0       	push   0xc002afb8
c00152be:	e8 9b dc ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00152c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152c6:	e8 09 fb ff ff       	call   c0014dd4 <displayDebugInfo(regs*)>

c00152cb <pgFault(regs*, void*)>:
c00152cb:	83 ec 14             	sub    esp,0x14
c00152ce:	0f 20 d0             	mov    eax,cr2
c00152d1:	50                   	push   eax
c00152d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152da:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152e0:	e8 07 d9 ff ff       	call   c0012bec <VAS::tryLoadBackOffDisk(unsigned long)>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	84 c0                	test   al,al
c00152ea:	74 04                	je     c00152f0 <pgFault(regs*, void*)+0x25>
c00152ec:	83 c4 0c             	add    esp,0xc
c00152ef:	c3                   	ret    
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	68 d3 af 02 c0       	push   0xc002afd3
c00152f8:	e8 61 dc ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00152fd:	58                   	pop    eax
c00152fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015302:	e8 cd fa ff ff       	call   c0014dd4 <displayDebugInfo(regs*)>

c0015307 <otherISRHandler(regs*, void*)>:
c0015307:	53                   	push   ebx
c0015308:	83 ec 0c             	sub    esp,0xc
c001530b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001530f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015312:	50                   	push   eax
c0015313:	50                   	push   eax
c0015314:	68 e0 af 02 c0       	push   0xc002afe0
c0015319:	e8 40 dc ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001531e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015321:	e8 ae fa ff ff       	call   c0014dd4 <displayDebugInfo(regs*)>

c0015326 <opcodeFault(regs*, void*)>:
c0015326:	55                   	push   ebp
c0015327:	89 e5                	mov    ebp,esp
c0015329:	56                   	push   esi
c001532a:	53                   	push   ebx
c001532b:	83 ec 40             	sub    esp,0x40
c001532e:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0015333:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015339:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001533f:	84 c0                	test   al,al
c0015341:	74 24                	je     c0015367 <opcodeFault(regs*, void*)+0x41>
c0015343:	83 ec 0c             	sub    esp,0xc
c0015346:	68 00 b0 02 c0       	push   0xc002b000
c001534b:	e8 0e dc ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015356:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015359:	8d 50 19             	lea    edx,[eax+0x19]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015362:	e9 be 05 00 00       	jmp    c0015925 <opcodeFault(regs*, void*)+0x5ff>
c0015367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015370:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015374:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015384:	8a 00                	mov    al,BYTE PTR [eax]
c0015386:	3c f0                	cmp    al,0xf0
c0015388:	75 17                	jne    c00153a1 <opcodeFault(regs*, void*)+0x7b>
c001538a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001538d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015390:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015393:	8d 50 01             	lea    edx,[eax+0x1]
c0015396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015399:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539c:	e9 da 00 00 00       	jmp    c001547b <opcodeFault(regs*, void*)+0x155>
c00153a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a4:	8a 00                	mov    al,BYTE PTR [eax]
c00153a6:	3c f2                	cmp    al,0xf2
c00153a8:	74 09                	je     c00153b3 <opcodeFault(regs*, void*)+0x8d>
c00153aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ad:	8a 00                	mov    al,BYTE PTR [eax]
c00153af:	3c f3                	cmp    al,0xf3
c00153b1:	75 1b                	jne    c00153ce <opcodeFault(regs*, void*)+0xa8>
c00153b3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c0:	8d 50 01             	lea    edx,[eax+0x1]
c00153c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c9:	e9 ad 00 00 00       	jmp    c001547b <opcodeFault(regs*, void*)+0x155>
c00153ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d1:	8a 00                	mov    al,BYTE PTR [eax]
c00153d3:	3c 66                	cmp    al,0x66
c00153d5:	75 1f                	jne    c00153f6 <opcodeFault(regs*, void*)+0xd0>
c00153d7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153db:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153df:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e8:	8d 50 01             	lea    edx,[eax+0x1]
c00153eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f1:	e9 85 00 00 00       	jmp    c001547b <opcodeFault(regs*, void*)+0x155>
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8a 00                	mov    al,BYTE PTR [eax]
c00153fb:	3c 67                	cmp    al,0x67
c00153fd:	75 18                	jne    c0015417 <opcodeFault(regs*, void*)+0xf1>
c00153ff:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015403:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540c:	8d 50 01             	lea    edx,[eax+0x1]
c001540f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015415:	eb 64                	jmp    c001547b <opcodeFault(regs*, void*)+0x155>
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	3c 2e                	cmp    al,0x2e
c001541e:	74 09                	je     c0015429 <opcodeFault(regs*, void*)+0x103>
c0015420:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015423:	8a 00                	mov    al,BYTE PTR [eax]
c0015425:	3c 3e                	cmp    al,0x3e
c0015427:	75 18                	jne    c0015441 <opcodeFault(regs*, void*)+0x11b>
c0015429:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001542d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015433:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015436:	8d 50 01             	lea    edx,[eax+0x1]
c0015439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543f:	eb 3a                	jmp    c001547b <opcodeFault(regs*, void*)+0x155>
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8a 00                	mov    al,BYTE PTR [eax]
c0015446:	3c 36                	cmp    al,0x36
c0015448:	74 1b                	je     c0015465 <opcodeFault(regs*, void*)+0x13f>
c001544a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544d:	8a 00                	mov    al,BYTE PTR [eax]
c001544f:	3c 26                	cmp    al,0x26
c0015451:	74 12                	je     c0015465 <opcodeFault(regs*, void*)+0x13f>
c0015453:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015456:	8a 00                	mov    al,BYTE PTR [eax]
c0015458:	3c 64                	cmp    al,0x64
c001545a:	74 09                	je     c0015465 <opcodeFault(regs*, void*)+0x13f>
c001545c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545f:	8a 00                	mov    al,BYTE PTR [eax]
c0015461:	3c 65                	cmp    al,0x65
c0015463:	75 16                	jne    c001547b <opcodeFault(regs*, void*)+0x155>
c0015465:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015469:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015472:	8d 50 01             	lea    edx,[eax+0x1]
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547e:	8a 00                	mov    al,BYTE PTR [eax]
c0015480:	3c 0f                	cmp    al,0xf
c0015482:	0f 85 ad 00 00 00    	jne    c0015535 <opcodeFault(regs*, void*)+0x20f>
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	40                   	inc    eax
c001548c:	8a 00                	mov    al,BYTE PTR [eax]
c001548e:	3c c2                	cmp    al,0xc2
c0015490:	74 0e                	je     c00154a0 <opcodeFault(regs*, void*)+0x17a>
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	40                   	inc    eax
c0015496:	8a 00                	mov    al,BYTE PTR [eax]
c0015498:	3c c3                	cmp    al,0xc3
c001549a:	0f 85 95 00 00 00    	jne    c0015535 <opcodeFault(regs*, void*)+0x20f>
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	68 23 b0 02 c0       	push   0xc002b023
c00154a8:	e8 b1 da ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b6:	8d 50 01             	lea    edx,[eax+0x1]
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c5:	8a 00                	mov    al,BYTE PTR [eax]
c00154c7:	8d 50 fe             	lea    edx,[eax-0x2]
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	88 10                	mov    BYTE PTR [eax],dl
c00154cf:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154d2:	50                   	push   eax
c00154d3:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154d6:	50                   	push   eax
c00154d7:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154da:	50                   	push   eax
c00154db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154de:	e8 e3 47 00 00       	call   c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ec:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ef:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154f2:	01 d0                	add    eax,edx
c00154f4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015500:	48                   	dec    eax
c0015501:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015507:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001550a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	83 ec 04             	sub    esp,0x4
c0015513:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015516:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015519:	50                   	push   eax
c001551a:	e8 95 ac fe ff       	call   c00001b4 <voodooXADD>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015525:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015528:	01 c2                	add    edx,eax
c001552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015530:	e9 f0 03 00 00       	jmp    c0015925 <opcodeFault(regs*, void*)+0x5ff>
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	3c 0f                	cmp    al,0xf
c001553c:	0f 85 8b 01 00 00    	jne    c00156cd <opcodeFault(regs*, void*)+0x3a7>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	40                   	inc    eax
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	3c c7                	cmp    al,0xc7
c001554a:	0f 86 7d 01 00 00    	jbe    c00156cd <opcodeFault(regs*, void*)+0x3a7>
c0015550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015553:	40                   	inc    eax
c0015554:	8a 00                	mov    al,BYTE PTR [eax]
c0015556:	3c cf                	cmp    al,0xcf
c0015558:	0f 87 6f 01 00 00    	ja     c00156cd <opcodeFault(regs*, void*)+0x3a7>
c001555e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015561:	40                   	inc    eax
c0015562:	8a 00                	mov    al,BYTE PTR [eax]
c0015564:	83 c0 38             	add    eax,0x38
c0015567:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001556a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001556e:	75 0b                	jne    c001557b <opcodeFault(regs*, void*)+0x255>
c0015570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015573:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015576:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015579:	eb 75                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c001557b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001557f:	75 0b                	jne    c001558c <opcodeFault(regs*, void*)+0x266>
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015587:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558a:	eb 64                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c001558c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015590:	75 0b                	jne    c001559d <opcodeFault(regs*, void*)+0x277>
c0015592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015595:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015598:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559b:	eb 53                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c001559d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155a1:	75 0b                	jne    c00155ae <opcodeFault(regs*, void*)+0x288>
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ac:	eb 42                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c00155ae:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155b2:	75 0b                	jne    c00155bf <opcodeFault(regs*, void*)+0x299>
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bd:	eb 31                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c00155bf:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155c3:	75 0b                	jne    c00155d0 <opcodeFault(regs*, void*)+0x2aa>
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ce:	eb 20                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c00155d0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155d4:	75 0b                	jne    c00155e1 <opcodeFault(regs*, void*)+0x2bb>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155df:	eb 0f                	jmp    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c00155e1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e5:	75 09                	jne    c00155f0 <opcodeFault(regs*, void*)+0x2ca>
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155f4:	74 10                	je     c0015606 <opcodeFault(regs*, void*)+0x2e0>
c00155f6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155fd:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015604:	eb 2d                	jmp    c0015633 <opcodeFault(regs*, void*)+0x30d>
c0015606:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015609:	c1 e0 18             	shl    eax,0x18
c001560c:	89 c2                	mov    edx,eax
c001560e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015611:	c1 e0 08             	shl    eax,0x8
c0015614:	25 00 00 ff 00       	and    eax,0xff0000
c0015619:	09 c2                	or     edx,eax
c001561b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561e:	c1 e8 08             	shr    eax,0x8
c0015621:	25 00 ff 00 00       	and    eax,0xff00
c0015626:	09 c2                	or     edx,eax
c0015628:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001562b:	c1 e8 18             	shr    eax,0x18
c001562e:	09 d0                	or     eax,edx
c0015630:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015633:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015637:	75 0b                	jne    c0015644 <opcodeFault(regs*, void*)+0x31e>
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001563f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015642:	eb 75                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015644:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015648:	75 0b                	jne    c0015655 <opcodeFault(regs*, void*)+0x32f>
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015650:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015653:	eb 64                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015655:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015659:	75 0b                	jne    c0015666 <opcodeFault(regs*, void*)+0x340>
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015661:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015664:	eb 53                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015666:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001566a:	75 0b                	jne    c0015677 <opcodeFault(regs*, void*)+0x351>
c001566c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015675:	eb 42                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015677:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001567b:	75 0b                	jne    c0015688 <opcodeFault(regs*, void*)+0x362>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015683:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015686:	eb 31                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015688:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001568c:	75 0b                	jne    c0015699 <opcodeFault(regs*, void*)+0x373>
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015694:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015697:	eb 20                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c0015699:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001569d:	75 0b                	jne    c00156aa <opcodeFault(regs*, void*)+0x384>
c001569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156a8:	eb 0f                	jmp    c00156b9 <opcodeFault(regs*, void*)+0x393>
c00156aa:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156ae:	75 09                	jne    c00156b9 <opcodeFault(regs*, void*)+0x393>
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156bf:	8d 50 02             	lea    edx,[eax+0x2]
c00156c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c8:	e9 58 02 00 00       	jmp    c0015925 <opcodeFault(regs*, void*)+0x5ff>
c00156cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d0:	8a 00                	mov    al,BYTE PTR [eax]
c00156d2:	3c 0f                	cmp    al,0xf
c00156d4:	0f 85 76 01 00 00    	jne    c0015850 <opcodeFault(regs*, void*)+0x52a>
c00156da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156dd:	40                   	inc    eax
c00156de:	8a 00                	mov    al,BYTE PTR [eax]
c00156e0:	3c c7                	cmp    al,0xc7
c00156e2:	0f 85 68 01 00 00    	jne    c0015850 <opcodeFault(regs*, void*)+0x52a>
c00156e8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156f1:	8d 50 01             	lea    edx,[eax+0x1]
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156fa:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156fd:	50                   	push   eax
c00156fe:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015701:	50                   	push   eax
c0015702:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015705:	50                   	push   eax
c0015706:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015709:	e8 b8 45 00 00       	call   c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015714:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015717:	83 f0 01             	xor    eax,0x1
c001571a:	84 c0                	test   al,al
c001571c:	0f 84 2e 01 00 00    	je     c0015850 <opcodeFault(regs*, void*)+0x52a>
c0015722:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015725:	3c 01                	cmp    al,0x1
c0015727:	0f 85 23 01 00 00    	jne    c0015850 <opcodeFault(regs*, void*)+0x52a>
c001572d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015730:	83 f0 01             	xor    eax,0x1
c0015733:	84 c0                	test   al,al
c0015735:	0f 84 15 01 00 00    	je     c0015850 <opcodeFault(regs*, void*)+0x52a>
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015741:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015744:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001574b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001574e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015751:	89 c2                	mov    edx,eax
c0015753:	b8 00 00 00 00       	mov    eax,0x0
c0015758:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001575b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015764:	ba 00 00 00 00       	mov    edx,0x0
c0015769:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001576c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001576f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015772:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015775:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015778:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001577f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015782:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015785:	89 c2                	mov    edx,eax
c0015787:	b8 00 00 00 00       	mov    eax,0x0
c001578c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001578f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015795:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015798:	ba 00 00 00 00       	mov    edx,0x0
c001579d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157a0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157a3:	e8 32 86 00 00       	call   c001ddda <lockScheduler()>
c00157a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b0:	89 c1                	mov    ecx,eax
c00157b2:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157b5:	89 cb                	mov    ebx,ecx
c00157b7:	89 d0                	mov    eax,edx
c00157b9:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157bc:	89 c6                	mov    esi,eax
c00157be:	89 f0                	mov    eax,esi
c00157c0:	09 d8                	or     eax,ebx
c00157c2:	85 c0                	test   eax,eax
c00157c4:	75 21                	jne    c00157e7 <opcodeFault(regs*, void*)+0x4c1>
c00157c6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157c9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157cc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157cf:	89 01                	mov    DWORD PTR [ecx],eax
c00157d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157da:	83 c8 40             	or     eax,0x40
c00157dd:	89 c2                	mov    edx,eax
c00157df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157e5:	eb 3e                	jmp    c0015825 <opcodeFault(regs*, void*)+0x4ff>
c00157e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ef:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157f2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157f5:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157fe:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015801:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015804:	89 d0                	mov    eax,edx
c0015806:	31 d2                	xor    edx,edx
c0015808:	89 c3                	mov    ebx,eax
c001580a:	89 d6                	mov    esi,edx
c001580c:	89 da                	mov    edx,ebx
c001580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015811:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015817:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001581a:	83 e0 bf             	and    eax,0xffffffbf
c001581d:	89 c2                	mov    edx,eax
c001581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015822:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015825:	e8 b2 85 00 00       	call   c001dddc <unlockScheduler()>
c001582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015830:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015833:	01 c2                	add    edx,eax
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001583b:	83 ec 0c             	sub    esp,0xc
c001583e:	68 32 b0 02 c0       	push   0xc002b032
c0015843:	e8 16 d7 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0015848:	83 c4 10             	add    esp,0x10
c001584b:	e9 d5 00 00 00       	jmp    c0015925 <opcodeFault(regs*, void*)+0x5ff>
c0015850:	83 ec 0c             	sub    esp,0xc
c0015853:	68 45 b0 02 c0       	push   0xc002b045
c0015858:	e8 01 d7 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015869:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001586c:	c1 e0 04             	shl    eax,0x4
c001586f:	01 d0                	add    eax,edx
c0015871:	83 c0 03             	add    eax,0x3
c0015874:	8a 00                	mov    al,BYTE PTR [eax]
c0015876:	0f b6 d8             	movzx  ebx,al
c0015879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015885:	c1 e0 04             	shl    eax,0x4
c0015888:	01 d0                	add    eax,edx
c001588a:	83 c0 02             	add    eax,0x2
c001588d:	8a 00                	mov    al,BYTE PTR [eax]
c001588f:	0f b6 c8             	movzx  ecx,al
c0015892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015895:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589e:	c1 e0 04             	shl    eax,0x4
c00158a1:	01 d0                	add    eax,edx
c00158a3:	40                   	inc    eax
c00158a4:	8a 00                	mov    al,BYTE PTR [eax]
c00158a6:	0f b6 d0             	movzx  edx,al
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b5:	c1 e0 04             	shl    eax,0x4
c00158b8:	01 f0                	add    eax,esi
c00158ba:	8a 00                	mov    al,BYTE PTR [eax]
c00158bc:	0f b6 c0             	movzx  eax,al
c00158bf:	83 ec 0c             	sub    esp,0xc
c00158c2:	53                   	push   ebx
c00158c3:	51                   	push   ecx
c00158c4:	52                   	push   edx
c00158c5:	50                   	push   eax
c00158c6:	68 58 b0 02 c0       	push   0xc002b058
c00158cb:	e8 8e d6 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00158d0:	83 c4 20             	add    esp,0x20
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d9:	83 c0 03             	add    eax,0x3
c00158dc:	8a 00                	mov    al,BYTE PTR [eax]
c00158de:	0f b6 d8             	movzx  ebx,al
c00158e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e7:	83 c0 02             	add    eax,0x2
c00158ea:	8a 00                	mov    al,BYTE PTR [eax]
c00158ec:	0f b6 c8             	movzx  ecx,al
c00158ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f5:	40                   	inc    eax
c00158f6:	8a 00                	mov    al,BYTE PTR [eax]
c00158f8:	0f b6 d0             	movzx  edx,al
c00158fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015901:	8a 00                	mov    al,BYTE PTR [eax]
c0015903:	0f b6 c0             	movzx  eax,al
c0015906:	83 ec 0c             	sub    esp,0xc
c0015909:	53                   	push   ebx
c001590a:	51                   	push   ecx
c001590b:	52                   	push   edx
c001590c:	50                   	push   eax
c001590d:	68 80 b0 02 c0       	push   0xc002b080
c0015912:	e8 47 d6 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0015917:	83 c4 20             	add    esp,0x20
c001591a:	83 ec 0c             	sub    esp,0xc
c001591d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015920:	e8 af f4 ff ff       	call   c0014dd4 <displayDebugInfo(regs*)>
c0015925:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015928:	5b                   	pop    ebx
c0015929:	5e                   	pop    esi
c001592a:	5d                   	pop    ebp
c001592b:	c3                   	ret    

c001592c <displayProgramFault(char const*)>:
c001592c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015931:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015934:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001593a:	85 c0                	test   eax,eax
c001593c:	74 15                	je     c0015953 <displayProgramFault(char const*)+0x27>
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	6a 04                	push   0x4
c0015943:	6a 0f                	push   0xf
c0015945:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015949:	50                   	push   eax
c001594a:	e8 e9 b4 ff ff       	call   c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001594f:	83 c4 1c             	add    esp,0x1c
c0015952:	c3                   	ret    
c0015953:	c3                   	ret    

c0015954 <setupInterruptController()>:
c0015954:	55                   	push   ebp
c0015955:	89 e5                	mov    ebp,esp
c0015957:	53                   	push   ebx
c0015958:	83 ec 24             	sub    esp,0x24
c001595b:	b8 00 00 00 00       	mov    eax,0x0
c0015960:	85 c0                	test   eax,eax
c0015962:	0f 95 c0             	setne  al
c0015965:	84 c0                	test   al,al
c0015967:	74 5b                	je     c00159c4 <setupInterruptController()+0x70>
c0015969:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015970:	83 ec 0c             	sub    esp,0xc
c0015973:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015976:	e8 c8 9e ff ff       	call   c000f843 <malloc>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	89 c3                	mov    ebx,eax
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	53                   	push   ebx
c0015984:	e8 a9 ff 00 00       	call   c0025932 <APIC::APIC()>
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001598f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015992:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015995:	8b 00                	mov    eax,DWORD PTR [eax]
c0015997:	83 c0 08             	add    eax,0x8
c001599a:	8b 00                	mov    eax,DWORD PTR [eax]
c001599c:	6a 00                	push   0x0
c001599e:	6a 00                	push   0x0
c00159a0:	6a 00                	push   0x0
c00159a2:	52                   	push   edx
c00159a3:	ff d0                	call   eax
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00159ad:	83 ec 08             	sub    esp,0x8
c00159b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159b3:	50                   	push   eax
c00159b4:	e8 cb e9 ff ff       	call   c0014384 <Device::addChild(Device*)>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159bf:	e9 52 03 00 00       	jmp    c0015d16 <setupInterruptController()+0x3c2>
c00159c4:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00159c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159cf:	83 e0 01             	and    eax,0x1
c00159d2:	84 c0                	test   al,al
c00159d4:	0f 95 c0             	setne  al
c00159d7:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159da:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159e1:	83 ec 0c             	sub    esp,0xc
c00159e4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159e7:	e8 57 9e ff ff       	call   c000f843 <malloc>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	89 c3                	mov    ebx,eax
c00159f1:	83 ec 0c             	sub    esp,0xc
c00159f4:	53                   	push   ebx
c00159f5:	e8 90 04 01 00       	call   c0025e8a <PIC::PIC()>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a08:	83 c0 08             	add    eax,0x8
c0015a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0d:	6a 00                	push   0x0
c0015a0f:	6a 00                	push   0x0
c0015a11:	6a 00                	push   0x0
c0015a13:	52                   	push   edx
c0015a14:	ff d0                	call   eax
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a1d:	74 73                	je     c0015a92 <setupInterruptController()+0x13e>
c0015a1f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	83 c0 0c             	add    eax,0xc
c0015a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2c:	6a 00                	push   0x0
c0015a2e:	6a 00                	push   0x0
c0015a30:	6a 00                	push   0x0
c0015a32:	52                   	push   edx
c0015a33:	ff d0                	call   eax
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a3c:	74 15                	je     c0015a53 <setupInterruptController()+0xff>
c0015a3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a43:	83 c0 04             	add    eax,0x4
c0015a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4e:	ff d0                	call   eax
c0015a50:	83 c4 10             	add    esp,0x10
c0015a53:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a60:	e8 de 9d ff ff       	call   c000f843 <malloc>
c0015a65:	83 c4 10             	add    esp,0x10
c0015a68:	89 c3                	mov    ebx,eax
c0015a6a:	83 ec 0c             	sub    esp,0xc
c0015a6d:	53                   	push   ebx
c0015a6e:	e8 bf fe 00 00       	call   c0025932 <APIC::APIC()>
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a79:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	83 c0 08             	add    eax,0x8
c0015a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a86:	6a 00                	push   0x0
c0015a88:	6a 00                	push   0x0
c0015a8a:	6a 00                	push   0x0
c0015a8c:	52                   	push   edx
c0015a8d:	ff d0                	call   eax
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0015a97:	83 ec 08             	sub    esp,0x8
c0015a9a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9d:	50                   	push   eax
c0015a9e:	e8 e1 e8 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aab:	83 c0 24             	add    eax,0x24
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	6a 00                	push   0x0
c0015ab2:	68 07 53 01 c0       	push   0xc0015307
c0015ab7:	6a 00                	push   0x0
c0015ab9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abc:	ff d0                	call   eax
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac6:	83 c0 24             	add    eax,0x24
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	6a 00                	push   0x0
c0015acd:	68 07 53 01 c0       	push   0xc0015307
c0015ad2:	6a 01                	push   0x1
c0015ad4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad7:	ff d0                	call   eax
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	83 c0 24             	add    eax,0x24
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	6a 00                	push   0x0
c0015ae8:	68 31 4c 01 c0       	push   0xc0014c31
c0015aed:	6a 02                	push   0x2
c0015aef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af2:	ff d0                	call   eax
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afc:	83 c0 24             	add    eax,0x24
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	6a 00                	push   0x0
c0015b03:	68 07 53 01 c0       	push   0xc0015307
c0015b08:	6a 03                	push   0x3
c0015b0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0d:	ff d0                	call   eax
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b17:	83 c0 24             	add    eax,0x24
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	6a 00                	push   0x0
c0015b1e:	68 07 53 01 c0       	push   0xc0015307
c0015b23:	6a 04                	push   0x4
c0015b25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b28:	ff d0                	call   eax
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b32:	83 c0 24             	add    eax,0x24
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	6a 00                	push   0x0
c0015b39:	68 07 53 01 c0       	push   0xc0015307
c0015b3e:	6a 05                	push   0x5
c0015b40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b43:	ff d0                	call   eax
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4d:	83 c0 24             	add    eax,0x24
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	6a 00                	push   0x0
c0015b54:	68 26 53 01 c0       	push   0xc0015326
c0015b59:	6a 06                	push   0x6
c0015b5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5e:	ff d0                	call   eax
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b68:	83 c0 24             	add    eax,0x24
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	6a 00                	push   0x0
c0015b6f:	68 63 52 01 c0       	push   0xc0015263
c0015b74:	6a 07                	push   0x7
c0015b76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b79:	ff d0                	call   eax
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b83:	83 c0 24             	add    eax,0x24
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	6a 00                	push   0x0
c0015b8a:	68 4c 4a 01 c0       	push   0xc0014a4c
c0015b8f:	6a 08                	push   0x8
c0015b91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b94:	ff d0                	call   eax
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9e:	83 c0 24             	add    eax,0x24
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	6a 00                	push   0x0
c0015ba5:	68 07 53 01 c0       	push   0xc0015307
c0015baa:	6a 09                	push   0x9
c0015bac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015baf:	ff d0                	call   eax
c0015bb1:	83 c4 10             	add    esp,0x10
c0015bb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb9:	83 c0 24             	add    eax,0x24
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	6a 00                	push   0x0
c0015bc0:	68 07 53 01 c0       	push   0xc0015307
c0015bc5:	6a 0a                	push   0xa
c0015bc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bca:	ff d0                	call   eax
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd4:	83 c0 24             	add    eax,0x24
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	6a 00                	push   0x0
c0015bdb:	68 07 53 01 c0       	push   0xc0015307
c0015be0:	6a 0b                	push   0xb
c0015be2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be5:	ff d0                	call   eax
c0015be7:	83 c4 10             	add    esp,0x10
c0015bea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bef:	83 c0 24             	add    eax,0x24
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	6a 00                	push   0x0
c0015bf6:	68 07 53 01 c0       	push   0xc0015307
c0015bfb:	6a 0c                	push   0xc
c0015bfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c00:	ff d0                	call   eax
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0a:	83 c0 24             	add    eax,0x24
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	6a 00                	push   0x0
c0015c11:	68 92 52 01 c0       	push   0xc0015292
c0015c16:	6a 0d                	push   0xd
c0015c18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1b:	ff d0                	call   eax
c0015c1d:	83 c4 10             	add    esp,0x10
c0015c20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c25:	83 c0 24             	add    eax,0x24
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	6a 00                	push   0x0
c0015c2c:	68 cb 52 01 c0       	push   0xc00152cb
c0015c31:	6a 0e                	push   0xe
c0015c33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c36:	ff d0                	call   eax
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c40:	83 c0 24             	add    eax,0x24
c0015c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c45:	6a 00                	push   0x0
c0015c47:	68 07 53 01 c0       	push   0xc0015307
c0015c4c:	6a 0f                	push   0xf
c0015c4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c51:	ff d0                	call   eax
c0015c53:	83 c4 10             	add    esp,0x10
c0015c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5b:	83 c0 24             	add    eax,0x24
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	6a 00                	push   0x0
c0015c62:	68 07 53 01 c0       	push   0xc0015307
c0015c67:	6a 10                	push   0x10
c0015c69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6c:	ff d0                	call   eax
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c76:	83 c0 24             	add    eax,0x24
c0015c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7b:	6a 00                	push   0x0
c0015c7d:	68 07 53 01 c0       	push   0xc0015307
c0015c82:	6a 11                	push   0x11
c0015c84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c87:	ff d0                	call   eax
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c91:	83 c0 24             	add    eax,0x24
c0015c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c96:	6a 00                	push   0x0
c0015c98:	68 07 53 01 c0       	push   0xc0015307
c0015c9d:	6a 12                	push   0x12
c0015c9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca2:	ff d0                	call   eax
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cac:	83 c0 24             	add    eax,0x24
c0015caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb1:	6a 00                	push   0x0
c0015cb3:	68 07 53 01 c0       	push   0xc0015307
c0015cb8:	6a 13                	push   0x13
c0015cba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cbd:	ff d0                	call   eax
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc7:	83 c0 24             	add    eax,0x24
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	6a 00                	push   0x0
c0015cce:	68 07 53 01 c0       	push   0xc0015307
c0015cd3:	6a 14                	push   0x14
c0015cd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd8:	ff d0                	call   eax
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce2:	83 c0 24             	add    eax,0x24
c0015ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce7:	6a 00                	push   0x0
c0015ce9:	68 07 53 01 c0       	push   0xc0015307
c0015cee:	6a 1e                	push   0x1e
c0015cf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf3:	ff d0                	call   eax
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfd:	83 c0 24             	add    eax,0x24
c0015d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d02:	6a 00                	push   0x0
c0015d04:	68 89 c7 01 c0       	push   0xc001c789
c0015d09:	6a 60                	push   0x60
c0015d0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0e:	ff d0                	call   eax
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d16:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d19:	c9                   	leave  
c0015d1a:	c3                   	ret    
c0015d1b:	90                   	nop

c0015d1c <InterruptController::convertLegacyIRQNumber(int)>:
c0015d1c:	55                   	push   ebp
c0015d1d:	89 e5                	mov    ebp,esp
c0015d1f:	83 ec 08             	sub    esp,0x8
c0015d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d25:	83 ec 0c             	sub    esp,0xc
c0015d28:	50                   	push   eax
c0015d29:	e8 42 e9 ff ff       	call   c0014670 <Device::getName()>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	8a 00                	mov    al,BYTE PTR [eax]
c0015d33:	3c 41                	cmp    al,0x41
c0015d35:	0f 94 c0             	sete   al
c0015d38:	84 c0                	test   al,al
c0015d3a:	74 28                	je     c0015d64 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d3c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d40:	7f 12                	jg     c0015d54 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d45:	05 20 d6 02 c0       	add    eax,0xc002d620
c0015d4a:	8a 00                	mov    al,BYTE PTR [eax]
c0015d4c:	0f b6 c0             	movzx  eax,al
c0015d4f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d52:	eb 10                	jmp    c0015d64 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	68 a0 ad 02 c0       	push   0xc002ada0
c0015d5c:	e8 9e 48 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d67:	c9                   	leave  
c0015d68:	c3                   	ret    
c0015d69:	90                   	nop

c0015d6a <startGUI(void*)>:
c0015d6a:	55                   	push   ebp
c0015d6b:	89 e5                	mov    ebp,esp
c0015d6d:	53                   	push   ebx
c0015d6e:	83 ec 04             	sub    esp,0x4
c0015d71:	e8 66 80 00 00       	call   c001dddc <unlockScheduler()>
c0015d76:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0015d7c:	83 ec 08             	sub    esp,0x8
c0015d7f:	6a 01                	push   0x1
c0015d81:	68 f0 b0 02 c0       	push   0xc002b0f0
c0015d86:	e8 a7 79 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	83 ec 08             	sub    esp,0x8
c0015d91:	53                   	push   ebx
c0015d92:	50                   	push   eax
c0015d93:	e8 ce 7b 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	6a 01                	push   0x1
c0015da6:	68 0a b1 02 c0       	push   0xc002b10a
c0015dab:	e8 82 79 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	83 ec 08             	sub    esp,0x8
c0015db6:	53                   	push   ebx
c0015db7:	50                   	push   eax
c0015db8:	e8 a9 7b 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	90                   	nop
c0015dc1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc4:	c9                   	leave  
c0015dc5:	c3                   	ret    

c0015dc6 <startGUIVESA(void*)>:
c0015dc6:	55                   	push   ebp
c0015dc7:	89 e5                	mov    ebp,esp
c0015dc9:	53                   	push   ebx
c0015dca:	83 ec 04             	sub    esp,0x4
c0015dcd:	e8 0a 80 00 00       	call   c001dddc <unlockScheduler()>
c0015dd2:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0015dd8:	83 ec 08             	sub    esp,0x8
c0015ddb:	6a 01                	push   0x1
c0015ddd:	68 24 b1 02 c0       	push   0xc002b124
c0015de2:	e8 4b 79 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	83 ec 08             	sub    esp,0x8
c0015ded:	53                   	push   ebx
c0015dee:	50                   	push   eax
c0015def:	e8 72 7b 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0015dfd:	83 ec 08             	sub    esp,0x8
c0015e00:	6a 01                	push   0x1
c0015e02:	68 0a b1 02 c0       	push   0xc002b10a
c0015e07:	e8 26 79 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c0015e0c:	83 c4 10             	add    esp,0x10
c0015e0f:	83 ec 08             	sub    esp,0x8
c0015e12:	53                   	push   ebx
c0015e13:	50                   	push   eax
c0015e14:	e8 4d 7b 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c0015e19:	83 c4 10             	add    esp,0x10
c0015e1c:	90                   	nop
c0015e1d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e20:	c9                   	leave  
c0015e21:	c3                   	ret    

c0015e22 <sendKeyToTerminal(unsigned char)>:
c0015e22:	55                   	push   ebp
c0015e23:	89 e5                	mov    ebp,esp
c0015e25:	83 ec 28             	sub    esp,0x28
c0015e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e2e:	a1 a4 e4 02 c0       	mov    eax,ds:0xc002e4a4
c0015e33:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	52                   	push   edx
c0015e3b:	50                   	push   eax
c0015e3c:	e8 33 b5 ff ff       	call   c0011374 <VgaText::receiveKey(unsigned char)>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e48:	75 41                	jne    c0015e8b <sendKeyToTerminal(unsigned char)+0x69>
c0015e4a:	e8 b2 7f 00 00       	call   c001de01 <lockStuff()>
c0015e4f:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0015e54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e57:	c7 05 a0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5a0,0x0
c0015e61:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e65:	74 1f                	je     c0015e86 <sendKeyToTerminal(unsigned char)+0x64>
c0015e67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e6a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e76:	83 ec 0c             	sub    esp,0xc
c0015e79:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e7c:	e8 71 85 00 00       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c0015e81:	83 c4 10             	add    esp,0x10
c0015e84:	eb db                	jmp    c0015e61 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e86:	e8 10 83 00 00       	call   c001e19b <unlockStuff()>
c0015e8b:	90                   	nop
c0015e8c:	c9                   	leave  
c0015e8d:	c3                   	ret    

c0015e8e <sendKeyboardToken(KeyboardToken)>:
c0015e8e:	55                   	push   ebp
c0015e8f:	89 e5                	mov    ebp,esp
c0015e91:	83 ec 18             	sub    esp,0x18
c0015e94:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9a:	0f b7 c0             	movzx  eax,ax
c0015e9d:	83 f2 01             	xor    edx,0x1
c0015ea0:	88 90 c0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a40],dl
c0015ea6:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015eab:	85 c0                	test   eax,eax
c0015ead:	74 24                	je     c0015ed3 <sendKeyboardToken(KeyboardToken)+0x45>
c0015eaf:	8b 0d a8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5a8
c0015eb5:	83 ec 04             	sub    esp,0x4
c0015eb8:	68 c0 e5 02 c0       	push   0xc002e5c0
c0015ebd:	83 ec 08             	sub    esp,0x8
c0015ec0:	89 e2                	mov    edx,esp
c0015ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec5:	89 02                	mov    DWORD PTR [edx],eax
c0015ec7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eca:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ece:	ff d1                	call   ecx
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed6:	66 3d 03 02          	cmp    ax,0x203
c0015eda:	75 07                	jne    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x55>
c0015edc:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0015ee1:	84 c0                	test   al,al
c0015ee3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ee7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015eea:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c0015eef:	38 c2                	cmp    dl,al
c0015ef1:	74 1c                	je     c0015f0f <sendKeyboardToken(KeyboardToken)+0x81>
c0015ef3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ef6:	a2 c8 e9 02 c0       	mov    ds:0xc002e9c8,al
c0015efb:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c0015f00:	0f b6 c0             	movzx  eax,al
c0015f03:	83 ec 0c             	sub    esp,0xc
c0015f06:	50                   	push   eax
c0015f07:	e8 c8 a6 ff ff       	call   c00105d4 <setTerminalScrollLock(bool)>
c0015f0c:	83 c4 10             	add    esp,0x10
c0015f0f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f12:	84 c0                	test   al,al
c0015f14:	0f 84 ae 00 00 00    	je     c0015fc8 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1d:	66 3d 10 03          	cmp    ax,0x310
c0015f21:	75 06                	jne    c0015f29 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f23:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2c:	66 3d 11 03          	cmp    ax,0x311
c0015f30:	75 06                	jne    c0015f38 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f32:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3b:	66 3d 12 03          	cmp    ax,0x312
c0015f3f:	75 06                	jne    c0015f47 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f41:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4a:	66 3d 13 03          	cmp    ax,0x313
c0015f4e:	75 06                	jne    c0015f56 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f50:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f59:	66 3d 14 03          	cmp    ax,0x314
c0015f5d:	75 06                	jne    c0015f65 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f5f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f68:	66 3d 15 03          	cmp    ax,0x315
c0015f6c:	75 06                	jne    c0015f74 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f6e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f77:	66 3d 16 03          	cmp    ax,0x316
c0015f7b:	75 06                	jne    c0015f83 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f7d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f86:	66 3d 17 03          	cmp    ax,0x317
c0015f8a:	75 06                	jne    c0015f92 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f8c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f95:	66 3d 18 03          	cmp    ax,0x318
c0015f99:	75 06                	jne    c0015fa1 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f9b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 19 03          	cmp    ax,0x319
c0015fa8:	75 06                	jne    c0015fb0 <sendKeyboardToken(KeyboardToken)+0x122>
c0015faa:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb7:	0f 85 c9 00 00 00    	jne    c0016086 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fbd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fc3:	e9 be 00 00 00       	jmp    c0016086 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcb:	66 3d 10 03          	cmp    ax,0x310
c0015fcf:	75 0a                	jne    c0015fdb <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fd1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fde:	66 3d 11 03          	cmp    ax,0x311
c0015fe2:	75 0a                	jne    c0015fee <sendKeyboardToken(KeyboardToken)+0x160>
c0015fe4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff1:	66 3d 12 03          	cmp    ax,0x312
c0015ff5:	75 0a                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0x173>
c0015ff7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ffd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 13 03          	cmp    ax,0x313
c0016008:	75 0a                	jne    c0016014 <sendKeyboardToken(KeyboardToken)+0x186>
c001600a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016010:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016017:	66 3d 14 03          	cmp    ax,0x314
c001601b:	75 0a                	jne    c0016027 <sendKeyboardToken(KeyboardToken)+0x199>
c001601d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016023:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602a:	66 3d 15 03          	cmp    ax,0x315
c001602e:	75 0a                	jne    c001603a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016030:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016036:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603d:	66 3d 16 03          	cmp    ax,0x316
c0016041:	75 0a                	jne    c001604d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016043:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016049:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016050:	66 3d 17 03          	cmp    ax,0x317
c0016054:	75 0a                	jne    c0016060 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016056:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001605c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016063:	66 3d 18 03          	cmp    ax,0x318
c0016067:	75 0a                	jne    c0016073 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016069:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001606f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016076:	66 3d 19 03          	cmp    ax,0x319
c001607a:	75 0a                	jne    c0016086 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001607c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016082:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016089:	66 3d 00 02          	cmp    ax,0x200
c001608d:	75 2c                	jne    c00160bb <sendKeyboardToken(KeyboardToken)+0x22d>
c001608f:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c0016094:	83 f0 01             	xor    eax,0x1
c0016097:	84 c0                	test   al,al
c0016099:	74 20                	je     c00160bb <sendKeyboardToken(KeyboardToken)+0x22d>
c001609b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00160a0:	6a 01                	push   0x1
c00160a2:	6a 00                	push   0x0
c00160a4:	68 6a 5d 01 c0       	push   0xc0015d6a
c00160a9:	50                   	push   eax
c00160aa:	e8 5d 7e 00 00       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c00160af:	83 c4 10             	add    esp,0x10
c00160b2:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c00160b9:	eb 33                	jmp    c00160ee <sendKeyboardToken(KeyboardToken)+0x260>
c00160bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160be:	66 3d 01 02          	cmp    ax,0x201
c00160c2:	75 2a                	jne    c00160ee <sendKeyboardToken(KeyboardToken)+0x260>
c00160c4:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c00160c9:	83 f0 01             	xor    eax,0x1
c00160cc:	84 c0                	test   al,al
c00160ce:	74 1e                	je     c00160ee <sendKeyboardToken(KeyboardToken)+0x260>
c00160d0:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00160d5:	6a 01                	push   0x1
c00160d7:	6a 00                	push   0x0
c00160d9:	68 c6 5d 01 c0       	push   0xc0015dc6
c00160de:	50                   	push   eax
c00160df:	e8 28 7e 00 00       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c00160e4:	83 c4 10             	add    esp,0x10
c00160e7:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c00160ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f1:	66 3d 1d 03          	cmp    ax,0x31d
c00160f5:	75 06                	jne    c00160fd <sendKeyboardToken(KeyboardToken)+0x26f>
c00160f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016100:	66 3d 1c 03          	cmp    ax,0x31c
c0016104:	75 06                	jne    c001610c <sendKeyboardToken(KeyboardToken)+0x27e>
c0016106:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001610c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610f:	66 3d 1b 03          	cmp    ax,0x31b
c0016113:	75 06                	jne    c001611b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016115:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001611b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611e:	66 3d 1e 03          	cmp    ax,0x31e
c0016122:	75 06                	jne    c001612a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016124:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001612a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612d:	66 3d 1f 03          	cmp    ax,0x31f
c0016131:	75 06                	jne    c0016139 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016133:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613c:	66 3d 1a 03          	cmp    ax,0x31a
c0016140:	75 06                	jne    c0016148 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016142:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016148:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001614c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614f:	83 f0 01             	xor    eax,0x1
c0016152:	84 c0                	test   al,al
c0016154:	74 77                	je     c00161cd <sendKeyboardToken(KeyboardToken)+0x33f>
c0016156:	a0 c1 e6 02 c0       	mov    al,ds:0xc002e6c1
c001615b:	84 c0                	test   al,al
c001615d:	74 41                	je     c00161a0 <sendKeyboardToken(KeyboardToken)+0x312>
c001615f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016163:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016167:	74 2b                	je     c0016194 <sendKeyboardToken(KeyboardToken)+0x306>
c0016169:	8b 15 c4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9c4
c001616f:	89 d0                	mov    eax,edx
c0016171:	c1 e0 02             	shl    eax,0x2
c0016174:	01 d0                	add    eax,edx
c0016176:	01 c0                	add    eax,eax
c0016178:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c001617d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016180:	0f b7 c0             	movzx  eax,ax
c0016183:	8d 50 d0             	lea    edx,[eax-0x30]
c0016186:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c001618b:	01 d0                	add    eax,edx
c001618d:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c0016192:	eb 6d                	jmp    c0016201 <sendKeyboardToken(KeyboardToken)+0x373>
c0016194:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c001619e:	eb 61                	jmp    c0016201 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a0:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c00161a5:	85 c0                	test   eax,eax
c00161a7:	74 18                	je     c00161c1 <sendKeyboardToken(KeyboardToken)+0x333>
c00161a9:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c00161ae:	0f b6 c0             	movzx  eax,al
c00161b1:	83 ec 0c             	sub    esp,0xc
c00161b4:	50                   	push   eax
c00161b5:	e8 68 fc ff ff       	call   c0015e22 <sendKeyToTerminal(unsigned char)>
c00161ba:	83 c4 10             	add    esp,0x10
c00161bd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c1:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c00161cb:	eb 34                	jmp    c0016201 <sendKeyboardToken(KeyboardToken)+0x373>
c00161cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d0:	66 3d 01 01          	cmp    ax,0x101
c00161d4:	75 2b                	jne    c0016201 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d6:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c00161db:	85 c0                	test   eax,eax
c00161dd:	74 18                	je     c00161f7 <sendKeyboardToken(KeyboardToken)+0x369>
c00161df:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c00161e4:	0f b6 c0             	movzx  eax,al
c00161e7:	83 ec 0c             	sub    esp,0xc
c00161ea:	50                   	push   eax
c00161eb:	e8 32 fc ff ff       	call   c0015e22 <sendKeyToTerminal(unsigned char)>
c00161f0:	83 c4 10             	add    esp,0x10
c00161f3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f7:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0016201:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016204:	83 f0 01             	xor    eax,0x1
c0016207:	84 c0                	test   al,al
c0016209:	74 4c                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001620b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001620e:	83 f0 01             	xor    eax,0x1
c0016211:	84 c0                	test   al,al
c0016213:	74 42                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016215:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c001621a:	83 f0 01             	xor    eax,0x1
c001621d:	84 c0                	test   al,al
c001621f:	74 36                	je     c0016257 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016224:	66 83 f8 1f          	cmp    ax,0x1f
c0016228:	76 09                	jbe    c0016233 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001622a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622d:	66 83 f8 7e          	cmp    ax,0x7e
c0016231:	76 12                	jbe    c0016245 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016236:	66 83 f8 0a          	cmp    ax,0xa
c001623a:	74 09                	je     c0016245 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001623c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623f:	66 83 f8 08          	cmp    ax,0x8
c0016243:	75 12                	jne    c0016257 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016248:	0f b6 c0             	movzx  eax,al
c001624b:	83 ec 0c             	sub    esp,0xc
c001624e:	50                   	push   eax
c001624f:	e8 ce fb ff ff       	call   c0015e22 <sendKeyToTerminal(unsigned char)>
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001625a:	83 f0 01             	xor    eax,0x1
c001625d:	84 c0                	test   al,al
c001625f:	74 4f                	je     c00162b0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016261:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016264:	83 f0 01             	xor    eax,0x1
c0016267:	84 c0                	test   al,al
c0016269:	74 45                	je     c00162b0 <sendKeyboardToken(KeyboardToken)+0x422>
c001626b:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0016270:	84 c0                	test   al,al
c0016272:	74 3c                	je     c00162b0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016277:	66 83 f8 3f          	cmp    ax,0x3f
c001627b:	76 33                	jbe    c00162b0 <sendKeyboardToken(KeyboardToken)+0x422>
c001627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016280:	66 83 f8 7f          	cmp    ax,0x7f
c0016284:	77 2a                	ja     c00162b0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016289:	88 c2                	mov    dl,al
c001628b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628e:	66 83 f8 5f          	cmp    ax,0x5f
c0016292:	76 04                	jbe    c0016298 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016294:	b0 20                	mov    al,0x20
c0016296:	eb 02                	jmp    c001629a <sendKeyboardToken(KeyboardToken)+0x40c>
c0016298:	b0 00                	mov    al,0x0
c001629a:	29 c2                	sub    edx,eax
c001629c:	88 d0                	mov    al,dl
c001629e:	83 e8 40             	sub    eax,0x40
c00162a1:	0f b6 c0             	movzx  eax,al
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	50                   	push   eax
c00162a8:	e8 75 fb ff ff       	call   c0015e22 <sendKeyToTerminal(unsigned char)>
c00162ad:	83 c4 10             	add    esp,0x10
c00162b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b3:	66 3d 00 03          	cmp    ax,0x300
c00162b7:	75 0f                	jne    c00162c8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162bc:	83 f0 01             	xor    eax,0x1
c00162bf:	84 c0                	test   al,al
c00162c1:	74 05                	je     c00162c8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c3:	e8 41 ab ff ff       	call   c0010e09 <doTerminalCycle()>
c00162c8:	90                   	nop
c00162c9:	c9                   	leave  
c00162ca:	c3                   	ret    

c00162cb <clearInternalKeybuffer(VgaText*)>:
c00162cb:	55                   	push   ebp
c00162cc:	89 e5                	mov    ebp,esp
c00162ce:	83 ec 08             	sub    esp,0x8
c00162d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d4:	05 34 11 00 00       	add    eax,0x1134
c00162d9:	83 ec 0c             	sub    esp,0xc
c00162dc:	50                   	push   eax
c00162dd:	e8 b2 a4 fe ff       	call   c0000794 <strlen>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e8:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ee:	83 ec 04             	sub    esp,0x4
c00162f1:	50                   	push   eax
c00162f2:	6a 00                	push   0x0
c00162f4:	52                   	push   edx
c00162f5:	e8 7e a4 fe ff       	call   c0000778 <memset>
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	90                   	nop
c00162fe:	c9                   	leave  
c00162ff:	c3                   	ret    

c0016300 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016300:	55                   	push   ebp
c0016301:	89 e5                	mov    ebp,esp
c0016303:	83 ec 18             	sub    esp,0x18
c0016306:	fb                   	sti    
c0016307:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001630e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016312:	0f 84 8a 00 00 00    	je     c00163a2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016321:	84 c0                	test   al,al
c0016323:	75 11                	jne    c0016336 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016325:	e8 b0 7a 00 00       	call   c001ddda <lockScheduler()>
c001632a:	e8 e7 7d 00 00       	call   c001e116 <schedule()>
c001632f:	e8 a8 7a 00 00       	call   c001dddc <unlockScheduler()>
c0016334:	eb e2                	jmp    c0016318 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016339:	8d 50 01             	lea    edx,[eax+0x1]
c001633c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001633f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016342:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016348:	88 10                	mov    BYTE PTR [eax],dl
c001634a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016353:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016359:	05 34 11 00 00       	add    eax,0x1134
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	50                   	push   eax
c0016362:	e8 2d a4 fe ff       	call   c0000794 <strlen>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001636d:	81 c2 34 11 00 00    	add    edx,0x1134
c0016373:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016376:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016379:	81 c2 34 11 00 00    	add    edx,0x1134
c001637f:	83 ec 04             	sub    esp,0x4
c0016382:	50                   	push   eax
c0016383:	51                   	push   ecx
c0016384:	52                   	push   edx
c0016385:	e8 f2 a2 fe ff       	call   c000067c <memmove>
c001638a:	83 c4 10             	add    esp,0x10
c001638d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016390:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016393:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016397:	0f 85 71 ff ff ff    	jne    c001630e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001639d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a0:	eb 03                	jmp    c00163a5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a5:	c9                   	leave  
c00163a6:	c3                   	ret    
c00163a7:	90                   	nop

c00163a8 <Keyboard::Keyboard(char const*)>:
c00163a8:	83 ec 0c             	sub    esp,0xc
c00163ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163af:	83 ec 08             	sub    esp,0x8
c00163b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b6:	50                   	push   eax
c00163b7:	e8 b8 e1 ff ff       	call   c0014574 <Device::Device(char const*)>
c00163bc:	83 c4 10             	add    esp,0x10
c00163bf:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c00163c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c8:	89 10                	mov    DWORD PTR [eax],edx
c00163ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ce:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163d8:	c6 05 a4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a4,0x1
c00163df:	90                   	nop
c00163e0:	83 c4 0c             	add    esp,0xc
c00163e3:	c3                   	ret    

c00163e4 <Keyboard::~Keyboard()>:
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c00163ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f0:	89 10                	mov    DWORD PTR [eax],edx
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	50                   	push   eax
c00163fa:	e8 57 de ff ff       	call   c0014256 <Device::~Device()>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	90                   	nop
c0016403:	83 c4 0c             	add    esp,0xc
c0016406:	c3                   	ret    
c0016407:	90                   	nop

c0016408 <Keyboard::~Keyboard()>:
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	83 ec 0c             	sub    esp,0xc
c001640e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016412:	e8 cd ff ff ff       	call   c00163e4 <Keyboard::~Keyboard()>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	83 ec 08             	sub    esp,0x8
c001641d:	68 5c 01 00 00       	push   0x15c
c0016422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016426:	e8 53 ca ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	83 c4 0c             	add    esp,0xc
c0016431:	c3                   	ret    

c0016432 <LogicalDisk::close(int, int, void*)>:
c0016432:	83 c8 ff             	or     eax,0xffffffff
c0016435:	c3                   	ret    

c0016436 <LogicalDisk::~LogicalDisk()>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	89 10                	mov    DWORD PTR [eax],edx
c0016444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	50                   	push   eax
c001644c:	e8 05 de ff ff       	call   c0014256 <Device::~Device()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	90                   	nop
c0016455:	83 c4 0c             	add    esp,0xc
c0016458:	c3                   	ret    
c0016459:	90                   	nop

c001645a <LogicalDisk::~LogicalDisk()>:
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016464:	e8 cd ff ff ff       	call   c0016436 <LogicalDisk::~LogicalDisk()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	83 ec 08             	sub    esp,0x8
c001646f:	68 74 01 00 00       	push   0x174
c0016474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016478:	e8 01 ca ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	83 c4 0c             	add    esp,0xc
c0016483:	c3                   	ret    

c0016484 <LogicalDisk::open(int, int, void*)>:
c0016484:	83 ec 18             	sub    esp,0x18
c0016487:	68 74 b1 02 c0       	push   0xc002b174
c001648c:	e8 6e 41 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0016491:	83 c8 ff             	or     eax,0xffffffff
c0016494:	83 c4 1c             	add    esp,0x1c
c0016497:	c3                   	ret    

c0016498 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016498:	53                   	push   ebx
c0016499:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001649d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164a5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164ab:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164b1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164b7:	77 10                	ja     c00164c9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164b9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164bf:	89 d3                	mov    ebx,edx
c00164c1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164c7:	72 05                	jb     c00164ce <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164c9:	83 c8 ff             	or     eax,0xffffffff
c00164cc:	89 c2                	mov    edx,eax
c00164ce:	5b                   	pop    ebx
c00164cf:	c3                   	ret    

c00164d0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164d0:	56                   	push   esi
c00164d1:	83 c8 ff             	or     eax,0xffffffff
c00164d4:	53                   	push   ebx
c00164d5:	89 c2                	mov    edx,eax
c00164d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164e9:	77 27                	ja     c0016512 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164eb:	89 d8                	mov    eax,ebx
c00164ed:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164f3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164fe:	89 c2                	mov    edx,eax
c0016500:	73 10                	jae    c0016512 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016502:	89 c8                	mov    eax,ecx
c0016504:	89 da                	mov    edx,ebx
c0016506:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001650c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016512:	5b                   	pop    ebx
c0016513:	5e                   	pop    esi
c0016514:	c3                   	ret    
c0016515:	90                   	nop

c0016516 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016516:	83 ec 1c             	sub    esp,0x1c
c0016519:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001651d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016525:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016529:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001652d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016530:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653c:	83 ec 08             	sub    esp,0x8
c001653f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016543:	50                   	push   eax
c0016544:	e8 2b e0 ff ff       	call   c0014574 <Device::Device(char const*)>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c0016551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016555:	89 10                	mov    DWORD PTR [eax],edx
c0016557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016566:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001656d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016571:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001657b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016583:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016587:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001658d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016593:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016597:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001659a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001659e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165a4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165b2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165c6:	90                   	nop
c00165c7:	83 c4 1c             	add    esp,0x1c
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <LogicalDisk::assignDriveLetter()>:
c00165cc:	55                   	push   ebp
c00165cd:	57                   	push   edi
c00165ce:	56                   	push   esi
c00165cf:	53                   	push   ebx
c00165d0:	83 ec 14             	sub    esp,0x14
c00165d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d7:	8b 3d e0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e0
c00165dd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165e7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165ed:	8b 3d e4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e4
c00165f3:	3c 01                	cmp    al,0x1
c00165f5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165fd:	19 c0                	sbb    eax,eax
c00165ff:	83 e0 02             	and    eax,0x2
c0016602:	83 c0 41             	add    eax,0x41
c0016605:	0f be e8             	movsx  ebp,al
c0016608:	3c 43                	cmp    al,0x43
c001660a:	75 10                	jne    c001661c <LogicalDisk::assignDriveLetter()+0x50>
c001660c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016613:	75 5d                	jne    c0016672 <LogicalDisk::assignDriveLetter()+0xa6>
c0016615:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001661a:	75 56                	jne    c0016672 <LogicalDisk::assignDriveLetter()+0xa6>
c001661c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001661f:	ba 01 00 00 00       	mov    edx,0x1
c0016624:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016628:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001662c:	d3 e2                	shl    edx,cl
c001662e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016632:	89 d7                	mov    edi,edx
c0016634:	89 d6                	mov    esi,edx
c0016636:	c1 ff 1f             	sar    edi,0x1f
c0016639:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001663d:	21 f9                	and    ecx,edi
c001663f:	09 d1                	or     ecx,edx
c0016641:	75 2f                	jne    c0016672 <LogicalDisk::assignDriveLetter()+0xa6>
c0016643:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016647:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001664b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016651:	09 f2                	or     edx,esi
c0016653:	89 15 e0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e0,edx
c0016659:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001665d:	09 fa                	or     edx,edi
c001665f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016663:	89 15 e4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e4,edx
c0016669:	89 1c bd 00 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1600],ebx
c0016670:	eb 08                	jmp    c001667a <LogicalDisk::assignDriveLetter()+0xae>
c0016672:	45                   	inc    ebp
c0016673:	40                   	inc    eax
c0016674:	3c 5b                	cmp    al,0x5b
c0016676:	75 90                	jne    c0016608 <LogicalDisk::assignDriveLetter()+0x3c>
c0016678:	31 c0                	xor    eax,eax
c001667a:	83 c4 14             	add    esp,0x14
c001667d:	5b                   	pop    ebx
c001667e:	5e                   	pop    esi
c001667f:	5f                   	pop    edi
c0016680:	5d                   	pop    ebp
c0016681:	c3                   	ret    

c0016682 <LogicalDisk::mount()>:
c0016682:	56                   	push   esi
c0016683:	53                   	push   ebx
c0016684:	51                   	push   ecx
c0016685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016689:	8b 1d 58 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e558
c001668f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016699:	85 db                	test   ebx,ebx
c001669b:	74 50                	je     c00166ed <LogicalDisk::mount()+0x6b>
c001669d:	e8 23 77 00 00       	call   c001ddc5 <getIRQNestingLevel()>
c00166a2:	52                   	push   edx
c00166a3:	52                   	push   edx
c00166a4:	50                   	push   eax
c00166a5:	68 98 b1 02 c0       	push   0xc002b198
c00166aa:	e8 af c8 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00166af:	83 c4 0c             	add    esp,0xc
c00166b2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166bb:	83 e8 41             	sub    eax,0x41
c00166be:	50                   	push   eax
c00166bf:	56                   	push   esi
c00166c0:	53                   	push   ebx
c00166c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166c4:	83 c4 10             	add    esp,0x10
c00166c7:	84 c0                	test   al,al
c00166c9:	74 08                	je     c00166d3 <LogicalDisk::mount()+0x51>
c00166cb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166d1:	eb 1c                	jmp    c00166ef <LogicalDisk::mount()+0x6d>
c00166d3:	e8 ed 76 00 00       	call   c001ddc5 <getIRQNestingLevel()>
c00166d8:	51                   	push   ecx
c00166d9:	51                   	push   ecx
c00166da:	50                   	push   eax
c00166db:	68 b3 b1 02 c0       	push   0xc002b1b3
c00166e0:	e8 79 c8 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00166e5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166e8:	83 c4 10             	add    esp,0x10
c00166eb:	eb ac                	jmp    c0016699 <LogicalDisk::mount()+0x17>
c00166ed:	31 c0                	xor    eax,eax
c00166ef:	5a                   	pop    edx
c00166f0:	5b                   	pop    ebx
c00166f1:	5e                   	pop    esi
c00166f2:	c3                   	ret    
c00166f3:	90                   	nop

c00166f4 <LogicalDisk::unmount()>:
c00166f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016702:	c3                   	ret    
c0016703:	90                   	nop

c0016704 <LogicalDisk::eject()>:
c0016704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016708:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001670e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016714:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016717:	90                   	nop

c0016718 <LogicalDisk::unassignDriveLetter()>:
c0016718:	57                   	push   edi
c0016719:	56                   	push   esi
c001671a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016725:	84 c9                	test   cl,cl
c0016727:	75 0f                	jne    c0016738 <LogicalDisk::unassignDriveLetter()+0x20>
c0016729:	c7 44 24 0c ce b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b1ce
c0016731:	5e                   	pop    esi
c0016732:	5f                   	pop    edi
c0016733:	e9 c7 3e 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c0016738:	83 e9 41             	sub    ecx,0x41
c001673b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016742:	b8 01 00 00 00       	mov    eax,0x1
c0016747:	c7 04 8d 00 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1600],0x0
c0016752:	d3 e0                	shl    eax,cl
c0016754:	89 c7                	mov    edi,eax
c0016756:	f7 d0                	not    eax
c0016758:	c1 ff 1f             	sar    edi,0x1f
c001675b:	21 05 e0 e9 02 c0    	and    DWORD PTR ds:0xc002e9e0,eax
c0016761:	89 fe                	mov    esi,edi
c0016763:	f7 d6                	not    esi
c0016765:	21 35 e4 e9 02 c0    	and    DWORD PTR ds:0xc002e9e4,esi
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	c3                   	ret    

c001676e <LogicalDisk::read(unsigned long long, int, void*)>:
c001676e:	57                   	push   edi
c001676f:	56                   	push   esi
c0016770:	53                   	push   ebx
c0016771:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001677d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016787:	77 41                	ja     c00167ca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016789:	99                   	cdq    
c001678a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016790:	01 c8                	add    eax,ecx
c0016792:	11 da                	adc    edx,ebx
c0016794:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001679a:	19 d7                	sbb    edi,edx
c001679c:	72 33                	jb     c00167d1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001679e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167c2:	5b                   	pop    ebx
c00167c3:	5e                   	pop    esi
c00167c4:	5f                   	pop    edi
c00167c5:	e9 b0 0a 00 00       	jmp    c001727a <VCache::read(unsigned long long, int, void*)>
c00167ca:	b8 05 00 00 00       	mov    eax,0x5
c00167cf:	eb 05                	jmp    c00167d6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167d1:	b8 07 00 00 00       	mov    eax,0x7
c00167d6:	5b                   	pop    ebx
c00167d7:	5e                   	pop    esi
c00167d8:	5f                   	pop    edi
c00167d9:	c3                   	ret    

c00167da <LogicalDisk::write(unsigned long long, int, void*)>:
c00167da:	57                   	push   edi
c00167db:	56                   	push   esi
c00167dc:	53                   	push   ebx
c00167dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167f3:	77 41                	ja     c0016836 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167f5:	99                   	cdq    
c00167f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167fc:	01 c8                	add    eax,ecx
c00167fe:	11 da                	adc    edx,ebx
c0016800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016806:	19 d7                	sbb    edi,edx
c0016808:	72 33                	jb     c001683d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001680a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001681a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001682a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682e:	5b                   	pop    ebx
c001682f:	5e                   	pop    esi
c0016830:	5f                   	pop    edi
c0016831:	e9 4e 09 00 00       	jmp    c0017184 <VCache::write(unsigned long long, int, void*)>
c0016836:	b8 05 00 00 00       	mov    eax,0x5
c001683b:	eb 05                	jmp    c0016842 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001683d:	b8 07 00 00 00       	mov    eax,0x7
c0016842:	5b                   	pop    ebx
c0016843:	5e                   	pop    esi
c0016844:	5f                   	pop    edi
c0016845:	c3                   	ret    

c0016846 <Mouse::Mouse(char const*)>:
c0016846:	83 ec 0c             	sub    esp,0xc
c0016849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684d:	83 ec 08             	sub    esp,0x8
c0016850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016854:	50                   	push   eax
c0016855:	e8 1a dd ff ff       	call   c0014574 <Device::Device(char const*)>
c001685a:	83 c4 10             	add    esp,0x10
c001685d:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016866:	89 10                	mov    DWORD PTR [eax],edx
c0016868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016876:	90                   	nop
c0016877:	83 c4 0c             	add    esp,0xc
c001687a:	c3                   	ret    
c001687b:	90                   	nop

c001687c <Mouse::~Mouse()>:
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016888:	89 10                	mov    DWORD PTR [eax],edx
c001688a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688e:	83 ec 0c             	sub    esp,0xc
c0016891:	50                   	push   eax
c0016892:	e8 bf d9 ff ff       	call   c0014256 <Device::~Device()>
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	90                   	nop
c001689b:	83 c4 0c             	add    esp,0xc
c001689e:	c3                   	ret    
c001689f:	90                   	nop

c00168a0 <Mouse::~Mouse()>:
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	83 ec 0c             	sub    esp,0xc
c00168a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168aa:	e8 cd ff ff ff       	call   c001687c <Mouse::~Mouse()>
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	83 ec 08             	sub    esp,0x8
c00168b5:	68 58 01 00 00       	push   0x158
c00168ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168be:	e8 bb c5 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	83 c4 0c             	add    esp,0xc
c00168c9:	c3                   	ret    

c00168ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168ca:	55                   	push   ebp
c00168cb:	57                   	push   edi
c00168cc:	56                   	push   esi
c00168cd:	53                   	push   ebx
c00168ce:	81 ec 28 01 00 00    	sub    esp,0x128
c00168d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168e2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168e9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168ff:	e8 6c dd ff ff       	call   c0014670 <Device::getName()>
c0016904:	5a                   	pop    edx
c0016905:	59                   	pop    ecx
c0016906:	50                   	push   eax
c0016907:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001690b:	55                   	push   ebp
c001690c:	e8 23 9f fe ff       	call   c0000834 <strcpy>
c0016911:	5b                   	pop    ebx
c0016912:	58                   	pop    eax
c0016913:	68 48 b2 02 c0       	push   0xc002b248
c0016918:	55                   	push   ebp
c0016919:	e8 56 a0 fe ff       	call   c0000974 <strcat>
c001691e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016925:	e8 19 8f ff ff       	call   c000f843 <malloc>
c001692a:	83 c4 0c             	add    esp,0xc
c001692d:	89 c3                	mov    ebx,eax
c001692f:	57                   	push   edi
c0016930:	56                   	push   esi
c0016931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016939:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016940:	55                   	push   ebp
c0016941:	50                   	push   eax
c0016942:	e8 cf fb ff ff       	call   c0016516 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016947:	83 c4 14             	add    esp,0x14
c001694a:	53                   	push   ebx
c001694b:	e8 7c fc ff ff       	call   c00165cc <LogicalDisk::assignDriveLetter()>
c0016950:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016953:	89 c6                	mov    esi,eax
c0016955:	e8 28 fd ff ff       	call   c0016682 <LogicalDisk::mount()>
c001695a:	58                   	pop    eax
c001695b:	5a                   	pop    edx
c001695c:	53                   	push   ebx
c001695d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016964:	e8 1b da ff ff       	call   c0014384 <Device::addChild(Device*)>
c0016969:	59                   	pop    ecx
c001696a:	89 f0                	mov    eax,esi
c001696c:	5b                   	pop    ebx
c001696d:	0f be f0             	movsx  esi,al
c0016970:	56                   	push   esi
c0016971:	68 53 b2 02 c0       	push   0xc002b253
c0016976:	e8 e3 c5 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001697b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016981:	5b                   	pop    ebx
c0016982:	5e                   	pop    esi
c0016983:	5f                   	pop    edi
c0016984:	5d                   	pop    ebp
c0016985:	c3                   	ret    

c0016986 <createPartitionsForDisk(PhysicalDisk*)>:
c0016986:	55                   	push   ebp
c0016987:	57                   	push   edi
c0016988:	56                   	push   esi
c0016989:	53                   	push   ebx
c001698a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016990:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016997:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001699d:	3d 00 02 00 00       	cmp    eax,0x200
c00169a2:	74 27                	je     c00169cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169b0:	83 ec 10             	sub    esp,0x10
c00169b3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169b7:	99                   	cdq    
c00169b8:	c1 e6 0a             	shl    esi,0xa
c00169bb:	52                   	push   edx
c00169bc:	89 fd                	mov    ebp,edi
c00169be:	50                   	push   eax
c00169bf:	55                   	push   ebp
c00169c0:	56                   	push   esi
c00169c1:	e8 f6 ff 00 00       	call   c00269bc <__udivdi3>
c00169c6:	e9 b1 00 00 00       	jmp    c0016a7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169d4:	56                   	push   esi
c00169d5:	6a 01                	push   0x1
c00169d7:	6a 00                	push   0x0
c00169d9:	6a 00                	push   0x0
c00169db:	53                   	push   ebx
c00169dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169df:	83 c4 20             	add    esp,0x20
c00169e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169ea:	75 0a                	jne    c00169f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169f4:	74 2c                	je     c0016a22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a08:	83 ec 10             	sub    esp,0x10
c0016a0b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a0f:	89 f7                	mov    edi,esi
c0016a11:	c1 e0 0a             	shl    eax,0xa
c0016a14:	c1 ff 1f             	sar    edi,0x1f
c0016a17:	57                   	push   edi
c0016a18:	56                   	push   esi
c0016a19:	52                   	push   edx
c0016a1a:	50                   	push   eax
c0016a1b:	e8 9c ff 00 00       	call   c00269bc <__udivdi3>
c0016a20:	eb 5a                	jmp    c0016a7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a29:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a30:	83 e1 7f             	and    ecx,0x7f
c0016a33:	83 e0 7f             	and    eax,0x7f
c0016a36:	01 c1                	add    ecx,eax
c0016a38:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a3f:	83 e0 7f             	and    eax,0x7f
c0016a42:	01 c1                	add    ecx,eax
c0016a44:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a4b:	83 e0 7f             	and    eax,0x7f
c0016a4e:	00 c1                	add    cl,al
c0016a50:	74 41                	je     c0016a93 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a64:	83 ec 10             	sub    esp,0x10
c0016a67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a6b:	89 f7                	mov    edi,esi
c0016a6d:	c1 e0 0a             	shl    eax,0xa
c0016a70:	c1 ff 1f             	sar    edi,0x1f
c0016a73:	57                   	push   edi
c0016a74:	56                   	push   esi
c0016a75:	52                   	push   edx
c0016a76:	50                   	push   eax
c0016a77:	e8 40 ff 00 00       	call   c00269bc <__udivdi3>
c0016a7c:	83 c4 14             	add    esp,0x14
c0016a7f:	52                   	push   edx
c0016a80:	50                   	push   eax
c0016a81:	6a 00                	push   0x0
c0016a83:	6a 00                	push   0x0
c0016a85:	53                   	push   ebx
c0016a86:	e8 3f fe ff ff       	call   c00168ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a8b:	83 c4 20             	add    esp,0x20
c0016a8e:	e9 79 01 00 00       	jmp    c0016c0c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a93:	89 f0                	mov    eax,esi
c0016a95:	31 f6                	xor    esi,esi
c0016a97:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a9e:	75 02                	jne    c0016aa2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aa0:	89 f1                	mov    ecx,esi
c0016aa2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aa9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ab0:	c1 e2 08             	shl    edx,0x8
c0016ab3:	c1 e7 10             	shl    edi,0x10
c0016ab6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016abe:	09 fa                	or     edx,edi
c0016ac0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ac8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016acf:	83 c0 10             	add    eax,0x10
c0016ad2:	09 fa                	or     edx,edi
c0016ad4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016adb:	c1 e7 18             	shl    edi,0x18
c0016ade:	09 fa                	or     edx,edi
c0016ae0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ae7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016aeb:	c1 e7 10             	shl    edi,0x10
c0016aee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016af5:	c1 e2 08             	shl    edx,0x8
c0016af8:	09 fa                	or     edx,edi
c0016afa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b01:	09 fa                	or     edx,edi
c0016b03:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b0a:	c1 e7 18             	shl    edi,0x18
c0016b0d:	09 fa                	or     edx,edi
c0016b0f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b13:	46                   	inc    esi
c0016b14:	83 fe 04             	cmp    esi,0x4
c0016b17:	0f 85 7a ff ff ff    	jne    c0016a97 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b21:	83 f0 01             	xor    eax,0x1
c0016b24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b28:	75 57                	jne    c0016b81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2e:	83 f0 01             	xor    eax,0x1
c0016b31:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b35:	75 4a                	jne    c0016b81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b37:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b3b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b4b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b51:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b57:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b5d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b61:	89 f7                	mov    edi,esi
c0016b63:	c1 e0 0a             	shl    eax,0xa
c0016b66:	c1 ff 1f             	sar    edi,0x1f
c0016b69:	57                   	push   edi
c0016b6a:	56                   	push   esi
c0016b6b:	52                   	push   edx
c0016b6c:	50                   	push   eax
c0016b6d:	e8 4a fe 00 00       	call   c00269bc <__udivdi3>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b7d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b81:	84 c9                	test   cl,cl
c0016b83:	74 53                	je     c0016bd8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b85:	0f b6 c9             	movzx  ecx,cl
c0016b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b94:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ba0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ba4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ba8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bb8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bbc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bc0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bc4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bd0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bd4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bd8:	31 ed                	xor    ebp,ebp
c0016bda:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bde:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016be2:	89 f8                	mov    eax,edi
c0016be4:	09 f0                	or     eax,esi
c0016be6:	74 1e                	je     c0016c06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016be8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bf0:	89 d1                	mov    ecx,edx
c0016bf2:	09 c1                	or     ecx,eax
c0016bf4:	74 10                	je     c0016c06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	57                   	push   edi
c0016bfa:	56                   	push   esi
c0016bfb:	52                   	push   edx
c0016bfc:	50                   	push   eax
c0016bfd:	53                   	push   ebx
c0016bfe:	e8 c7 fc ff ff       	call   c00168ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c03:	83 c4 20             	add    esp,0x20
c0016c06:	45                   	inc    ebp
c0016c07:	83 fd 04             	cmp    ebp,0x4
c0016c0a:	75 ce                	jne    c0016bda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c0c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c12:	5b                   	pop    ebx
c0016c13:	5e                   	pop    esi
c0016c14:	5f                   	pop    edi
c0016c15:	5d                   	pop    ebp
c0016c16:	c3                   	ret    
c0016c17:	90                   	nop

c0016c18 <Serial::Serial(char const*)>:
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1f:	83 ec 08             	sub    esp,0x8
c0016c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c26:	50                   	push   eax
c0016c27:	e8 48 d9 ff ff       	call   c0014574 <Device::Device(char const*)>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c0016c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c38:	89 10                	mov    DWORD PTR [eax],edx
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c48:	90                   	nop
c0016c49:	83 c4 0c             	add    esp,0xc
c0016c4c:	c3                   	ret    
c0016c4d:	90                   	nop

c0016c4e <Serial::~Serial()>:
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	89 10                	mov    DWORD PTR [eax],edx
c0016c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	50                   	push   eax
c0016c64:	e8 ed d5 ff ff       	call   c0014256 <Device::~Device()>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	90                   	nop
c0016c6d:	83 c4 0c             	add    esp,0xc
c0016c70:	c3                   	ret    
c0016c71:	90                   	nop

c0016c72 <Serial::~Serial()>:
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	83 ec 0c             	sub    esp,0xc
c0016c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7c:	e8 cd ff ff ff       	call   c0016c4e <Serial::~Serial()>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	83 ec 08             	sub    esp,0x8
c0016c87:	68 58 01 00 00       	push   0x158
c0016c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c90:	e8 e9 c1 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	83 c4 0c             	add    esp,0xc
c0016c9b:	c3                   	ret    

c0016c9c <Timer::Timer(char const*)>:
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca3:	83 ec 08             	sub    esp,0x8
c0016ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016caa:	50                   	push   eax
c0016cab:	e8 c4 d8 ff ff       	call   c0014574 <Device::Device(char const*)>
c0016cb0:	83 c4 10             	add    esp,0x10
c0016cb3:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c0016cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbc:	89 10                	mov    DWORD PTR [eax],edx
c0016cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016ccc:	90                   	nop
c0016ccd:	83 c4 0c             	add    esp,0xc
c0016cd0:	c3                   	ret    
c0016cd1:	90                   	nop

c0016cd2 <Timer::~Timer()>:
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c0016cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cde:	89 10                	mov    DWORD PTR [eax],edx
c0016ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	50                   	push   eax
c0016ce8:	e8 69 d5 ff ff       	call   c0014256 <Device::~Device()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	90                   	nop
c0016cf1:	83 c4 0c             	add    esp,0xc
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <Timer::~Timer()>:
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d00:	e8 cd ff ff ff       	call   c0016cd2 <Timer::~Timer()>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	83 ec 08             	sub    esp,0x8
c0016d0b:	68 5c 01 00 00       	push   0x15c
c0016d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d14:	e8 65 c1 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	83 c4 0c             	add    esp,0xc
c0016d1f:	c3                   	ret    

c0016d20 <Timer::read()>:
c0016d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d24:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d2a:	c3                   	ret    

c0016d2b <timerHandler(unsigned long long)>:
c0016d2b:	55                   	push   ebp
c0016d2c:	57                   	push   edi
c0016d2d:	56                   	push   esi
c0016d2e:	53                   	push   ebx
c0016d2f:	83 ec 0c             	sub    esp,0xc
c0016d32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d36:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d3a:	01 35 70 ea 02 c0    	add    DWORD PTR ds:0xc002ea70,esi
c0016d40:	11 3d 74 ea 02 c0    	adc    DWORD PTR ds:0xc002ea74,edi
c0016d46:	80 3d cd e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3cd,0x0
c0016d4d:	0f 84 07 01 00 00    	je     c0016e5a <timerHandler(unsigned long long)+0x12f>
c0016d53:	e8 a9 70 00 00       	call   c001de01 <lockStuff()>
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	68 3c 19 03 c0       	push   0xc003193c
c0016d60:	e8 c9 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d65:	c7 04 24 3c 19 03 c0 	mov    DWORD PTR [esp],0xc003193c
c0016d6c:	89 c3                	mov    ebx,eax
c0016d6e:	e8 c3 1c 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	84 c0                	test   al,al
c0016d78:	74 60                	je     c0016dda <timerHandler(unsigned long long)+0xaf>
c0016d7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d80:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d83:	85 c0                	test   eax,eax
c0016d85:	0f 85 91 00 00 00    	jne    c0016e1c <timerHandler(unsigned long long)+0xf1>
c0016d8b:	e9 be 00 00 00       	jmp    c0016e4e <timerHandler(unsigned long long)+0x123>
c0016d90:	83 ec 0c             	sub    esp,0xc
c0016d93:	55                   	push   ebp
c0016d94:	e8 59 76 00 00       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c0016d99:	83 c4 10             	add    esp,0x10
c0016d9c:	39 eb                	cmp    ebx,ebp
c0016d9e:	75 12                	jne    c0016db2 <timerHandler(unsigned long long)+0x87>
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	68 3c 19 03 c0       	push   0xc003193c
c0016da8:	e8 81 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dad:	89 c3                	mov    ebx,eax
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	68 3c 19 03 c0       	push   0xc003193c
c0016dba:	e8 77 1c 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	84 c0                	test   al,al
c0016dc4:	75 b4                	jne    c0016d7a <timerHandler(unsigned long long)+0x4f>
c0016dc6:	83 ec 0c             	sub    esp,0xc
c0016dc9:	68 3c 19 03 c0       	push   0xc003193c
c0016dce:	e8 5b 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	39 d8                	cmp    eax,ebx
c0016dd8:	74 a0                	je     c0016d7a <timerHandler(unsigned long long)+0x4f>
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	68 3c 19 03 c0       	push   0xc003193c
c0016de2:	e8 47 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de7:	c7 04 24 3c 19 03 c0 	mov    DWORD PTR [esp],0xc003193c
c0016dee:	89 c5                	mov    ebp,eax
c0016df0:	e8 5d 1c 01 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df5:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dfe:	39 15 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,edx
c0016e04:	a1 74 ea 02 c0       	mov    eax,ds:0xc002ea74
c0016e09:	19 c8                	sbb    eax,ecx
c0016e0b:	73 83                	jae    c0016d90 <timerHandler(unsigned long long)+0x65>
c0016e0d:	50                   	push   eax
c0016e0e:	50                   	push   eax
c0016e0f:	55                   	push   ebp
c0016e10:	68 3c 19 03 c0       	push   0xc003193c
c0016e15:	e8 e6 1c 01 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e1a:	eb 93                	jmp    c0016daf <timerHandler(unsigned long long)+0x84>
c0016e1c:	80 3d cc e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3cc,0x0
c0016e23:	74 29                	je     c0016e4e <timerHandler(unsigned long long)+0x123>
c0016e25:	39 c6                	cmp    esi,eax
c0016e27:	bb 00 00 00 00       	mov    ebx,0x0
c0016e2c:	19 df                	sbb    edi,ebx
c0016e2e:	72 19                	jb     c0016e49 <timerHandler(unsigned long long)+0x11e>
c0016e30:	e8 a5 6f 00 00       	call   c001ddda <lockScheduler()>
c0016e35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e3a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e3d:	e8 d4 72 00 00       	call   c001e116 <schedule()>
c0016e42:	e8 95 6f 00 00       	call   c001dddc <unlockScheduler()>
c0016e47:	eb 05                	jmp    c0016e4e <timerHandler(unsigned long long)+0x123>
c0016e49:	29 f0                	sub    eax,esi
c0016e4b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e4e:	83 c4 0c             	add    esp,0xc
c0016e51:	5b                   	pop    ebx
c0016e52:	5e                   	pop    esi
c0016e53:	5f                   	pop    edi
c0016e54:	5d                   	pop    ebp
c0016e55:	e9 41 73 00 00       	jmp    c001e19b <unlockStuff()>
c0016e5a:	83 c4 0c             	add    esp,0xc
c0016e5d:	5b                   	pop    ebx
c0016e5e:	5e                   	pop    esi
c0016e5f:	5f                   	pop    edi
c0016e60:	5d                   	pop    ebp
c0016e61:	c3                   	ret    

c0016e62 <setupTimer(int)>:
c0016e62:	57                   	push   edi
c0016e63:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0016e68:	56                   	push   esi
c0016e69:	53                   	push   ebx
c0016e6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e7d:	e8 ee d7 ff ff       	call   c0014670 <Device::getName()>
c0016e82:	83 c4 10             	add    esp,0x10
c0016e85:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e88:	0f 85 8d 00 00 00    	jne    c0016f1b <setupTimer(int)+0xb9>
c0016e8e:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0016e93:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e9a:	74 7f                	je     c0016f1b <setupTimer(int)+0xb9>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	68 5c 01 00 00       	push   0x15c
c0016ea4:	e8 9a 89 ff ff       	call   c000f843 <malloc>
c0016ea9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016eac:	89 c3                	mov    ebx,eax
c0016eae:	e8 e1 f6 00 00       	call   c0026594 <PIT::PIT()>
c0016eb3:	59                   	pop    ecx
c0016eb4:	5f                   	pop    edi
c0016eb5:	53                   	push   ebx
c0016eb6:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c0016ebc:	e8 c3 d4 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0016ec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ec3:	6a 00                	push   0x0
c0016ec5:	6a 00                	push   0x0
c0016ec7:	56                   	push   esi
c0016ec8:	53                   	push   ebx
c0016ec9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ecc:	83 c4 14             	add    esp,0x14
c0016ecf:	68 60 01 00 00       	push   0x160
c0016ed4:	e8 6a 89 ff ff       	call   c000f843 <malloc>
c0016ed9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016edc:	89 c7                	mov    edi,eax
c0016ede:	e8 61 f5 00 00       	call   c0026444 <APICTimer::APICTimer()>
c0016ee3:	6a 00                	push   0x0
c0016ee5:	6a 00                	push   0x0
c0016ee7:	56                   	push   esi
c0016ee8:	57                   	push   edi
c0016ee9:	e8 58 f4 00 00       	call   c0026346 <APICTimer::open(int, int, void*)>
c0016eee:	83 c4 20             	add    esp,0x20
c0016ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ef3:	6a 00                	push   0x0
c0016ef5:	6a 00                	push   0x0
c0016ef7:	6a 00                	push   0x0
c0016ef9:	53                   	push   ebx
c0016efa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016efd:	58                   	pop    eax
c0016efe:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0016f03:	5a                   	pop    edx
c0016f04:	57                   	push   edi
c0016f05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f0b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f11:	e8 6e d4 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	eb 33                	jmp    c0016f4e <setupTimer(int)+0xec>
c0016f1b:	83 ec 0c             	sub    esp,0xc
c0016f1e:	68 5c 01 00 00       	push   0x15c
c0016f23:	e8 1b 89 ff ff       	call   c000f843 <malloc>
c0016f28:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f2b:	89 c3                	mov    ebx,eax
c0016f2d:	e8 62 f6 00 00       	call   c0026594 <PIT::PIT()>
c0016f32:	58                   	pop    eax
c0016f33:	5a                   	pop    edx
c0016f34:	53                   	push   ebx
c0016f35:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c0016f3b:	e8 44 d4 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0016f40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f42:	6a 00                	push   0x0
c0016f44:	6a 00                	push   0x0
c0016f46:	56                   	push   esi
c0016f47:	53                   	push   ebx
c0016f48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f4b:	83 c4 20             	add    esp,0x20
c0016f4e:	89 d8                	mov    eax,ebx
c0016f50:	5b                   	pop    ebx
c0016f51:	5e                   	pop    esi
c0016f52:	5f                   	pop    edi
c0016f53:	c3                   	ret    

c0016f54 <VCache::VCache(PhysicalDisk*)>:
c0016f54:	53                   	push   ebx
c0016f55:	83 ec 18             	sub    esp,0x18
c0016f58:	ba f4 b2 02 c0       	mov    edx,0xc002b2f4
c0016f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f61:	89 10                	mov    DWORD PTR [eax],edx
c0016f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f67:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f72:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f96:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fbb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fce:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fe5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff4:	e8 4a 88 ff ff       	call   c000f843 <malloc>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	89 c3                	mov    ebx,eax
c0016ffe:	83 ec 0c             	sub    esp,0xc
c0017001:	53                   	push   ebx
c0017002:	e8 f3 6e 00 00       	call   c001defa <Mutex::Mutex()>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017015:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017019:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017020:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001702b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017035:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001703c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017042:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017048:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001704c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001704f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017056:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001705a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017064:	05 00 01 00 00       	add    eax,0x100
c0017069:	c1 e0 04             	shl    eax,0x4
c001706c:	83 ec 0c             	sub    esp,0xc
c001706f:	50                   	push   eax
c0017070:	e8 ce 87 ff ff       	call   c000f843 <malloc>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	89 c2                	mov    edx,eax
c001707a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017085:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001708c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017090:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017094:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017098:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001709e:	c1 e0 07             	shl    eax,0x7
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	50                   	push   eax
c00170a5:	e8 99 87 ff ff       	call   c000f843 <malloc>
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	89 c2                	mov    edx,eax
c00170af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170b6:	90                   	nop
c00170b7:	83 c4 18             	add    esp,0x18
c00170ba:	5b                   	pop    ebx
c00170bb:	c3                   	ret    

c00170bc <VCache::invalidateReadBuffer()>:
c00170bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170c6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170ca:	c3                   	ret    
c00170cb:	90                   	nop

c00170cc <VCache::writeWriteBuffer()>:
c00170cc:	53                   	push   ebx
c00170cd:	83 ec 14             	sub    esp,0x14
c00170d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170e5:	50                   	push   eax
c00170e6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170f7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170fb:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017102:	83 c4 28             	add    esp,0x28
c0017105:	5b                   	pop    ebx
c0017106:	c3                   	ret    
c0017107:	90                   	nop

c0017108 <VCache::~VCache()>:
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	ba f4 b2 02 c0       	mov    edx,0xc002b2f4
c0017110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017114:	89 10                	mov    DWORD PTR [eax],edx
c0017116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001711d:	84 c0                	test   al,al
c001711f:	74 0f                	je     c0017130 <VCache::~VCache()+0x28>
c0017121:	83 ec 0c             	sub    esp,0xc
c0017124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017128:	e8 9f ff ff ff       	call   c00170cc <VCache::writeWriteBuffer()>
c001712d:	83 c4 10             	add    esp,0x10
c0017130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017134:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017137:	83 ec 0c             	sub    esp,0xc
c001713a:	50                   	push   eax
c001713b:	e8 13 87 ff ff       	call   c000f853 <free>
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017147:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001714a:	83 ec 0c             	sub    esp,0xc
c001714d:	50                   	push   eax
c001714e:	e8 00 87 ff ff       	call   c000f853 <free>
c0017153:	83 c4 10             	add    esp,0x10
c0017156:	90                   	nop
c0017157:	83 c4 0c             	add    esp,0xc
c001715a:	c3                   	ret    
c001715b:	90                   	nop

c001715c <VCache::~VCache()>:
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	83 ec 0c             	sub    esp,0xc
c0017162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017166:	e8 9d ff ff ff       	call   c0017108 <VCache::~VCache()>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	83 ec 08             	sub    esp,0x8
c0017171:	6a 44                	push   0x44
c0017173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017177:	e8 02 bd ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	83 c4 0c             	add    esp,0xc
c0017182:	c3                   	ret    
c0017183:	90                   	nop

c0017184 <VCache::write(unsigned long long, int, void*)>:
c0017184:	55                   	push   ebp
c0017185:	57                   	push   edi
c0017186:	56                   	push   esi
c0017187:	53                   	push   ebx
c0017188:	83 ec 28             	sub    esp,0x28
c001718b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001718f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017193:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017197:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001719b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001719e:	e8 b9 71 00 00       	call   c001e35c <Semaphore::acquire()>
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171aa:	74 0c                	je     c00171b8 <VCache::write(unsigned long long, int, void*)+0x34>
c00171ac:	83 ec 0c             	sub    esp,0xc
c00171af:	53                   	push   ebx
c00171b0:	e8 07 ff ff ff       	call   c00170bc <VCache::invalidateReadBuffer()>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171bc:	74 66                	je     c0017224 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c1:	99                   	cdq    
c00171c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171c9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171cc:	89 c1                	mov    ecx,eax
c00171ce:	89 d0                	mov    eax,edx
c00171d0:	31 f1                	xor    ecx,esi
c00171d2:	31 f8                	xor    eax,edi
c00171d4:	89 ca                	mov    edx,ecx
c00171d6:	09 c2                	or     edx,eax
c00171d8:	75 3e                	jne    c0017218 <VCache::write(unsigned long long, int, void*)+0x94>
c00171da:	83 fd 01             	cmp    ebp,0x1
c00171dd:	75 39                	jne    c0017218 <VCache::write(unsigned long long, int, void*)+0x94>
c00171df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171e8:	51                   	push   ecx
c00171e9:	50                   	push   eax
c00171ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171f2:	0f af c8             	imul   ecx,eax
c00171f5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171f8:	51                   	push   ecx
c00171f9:	e8 46 95 fe ff       	call   c0000744 <memcpy>
c00171fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017201:	83 c4 10             	add    esp,0x10
c0017204:	40                   	inc    eax
c0017205:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017208:	83 c0 80             	add    eax,0xffffff80
c001720b:	75 57                	jne    c0017264 <VCache::write(unsigned long long, int, void*)+0xe0>
c001720d:	83 ec 0c             	sub    esp,0xc
c0017210:	53                   	push   ebx
c0017211:	e8 b6 fe ff ff       	call   c00170cc <VCache::writeWriteBuffer()>
c0017216:	eb 34                	jmp    c001724c <VCache::write(unsigned long long, int, void*)+0xc8>
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	53                   	push   ebx
c001721c:	e8 ab fe ff ff       	call   c00170cc <VCache::writeWriteBuffer()>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017227:	83 fd 7f             	cmp    ebp,0x7f
c001722a:	7f 25                	jg     c0017251 <VCache::write(unsigned long long, int, void*)+0xcd>
c001722c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001722f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017232:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017235:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017239:	52                   	push   edx
c001723a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017240:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017244:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017247:	e8 f8 94 fe ff       	call   c0000744 <memcpy>
c001724c:	83 c4 10             	add    esp,0x10
c001724f:	eb 13                	jmp    c0017264 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	8b 10                	mov    edx,DWORD PTR [eax]
c0017256:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001725a:	55                   	push   ebp
c001725b:	57                   	push   edi
c001725c:	56                   	push   esi
c001725d:	50                   	push   eax
c001725e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017261:	83 c4 20             	add    esp,0x20
c0017264:	83 ec 0c             	sub    esp,0xc
c0017267:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001726a:	e8 9b 76 00 00       	call   c001e90a <Semaphore::release()>
c001726f:	83 c4 2c             	add    esp,0x2c
c0017272:	31 c0                	xor    eax,eax
c0017274:	5b                   	pop    ebx
c0017275:	5e                   	pop    esi
c0017276:	5f                   	pop    edi
c0017277:	5d                   	pop    ebp
c0017278:	c3                   	ret    
c0017279:	90                   	nop

c001727a <VCache::read(unsigned long long, int, void*)>:
c001727a:	55                   	push   ebp
c001727b:	57                   	push   edi
c001727c:	56                   	push   esi
c001727d:	53                   	push   ebx
c001727e:	83 ec 28             	sub    esp,0x28
c0017281:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017285:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017289:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001728d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017291:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017295:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017299:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001729d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172a0:	e8 b7 70 00 00       	call   c001e35c <Semaphore::acquire()>
c00172a5:	83 c4 10             	add    esp,0x10
c00172a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172ac:	74 0c                	je     c00172ba <VCache::read(unsigned long long, int, void*)+0x40>
c00172ae:	83 ec 0c             	sub    esp,0xc
c00172b1:	53                   	push   ebx
c00172b2:	e8 15 fe ff ff       	call   c00170cc <VCache::writeWriteBuffer()>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	83 fe 01             	cmp    esi,0x1
c00172bd:	0f 85 80 00 00 00    	jne    c0017343 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172cd:	75 74                	jne    c0017343 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172d2:	89 d1                	mov    ecx,edx
c00172d4:	f7 d9                	neg    ecx
c00172d6:	89 cf                	mov    edi,ecx
c00172d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172dc:	c1 ff 1f             	sar    edi,0x1f
c00172df:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172e2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172e6:	89 ce                	mov    esi,ecx
c00172e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172ec:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172f0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172f4:	89 cf                	mov    edi,ecx
c00172f6:	74 0a                	je     c0017302 <VCache::read(unsigned long long, int, void*)+0x88>
c00172f8:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172fb:	75 05                	jne    c0017302 <VCache::read(unsigned long long, int, void*)+0x88>
c00172fd:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017300:	74 1c                	je     c001731e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017302:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017306:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017309:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001730c:	83 ec 0c             	sub    esp,0xc
c001730f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017311:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017314:	52                   	push   edx
c0017315:	57                   	push   edi
c0017316:	56                   	push   esi
c0017317:	50                   	push   eax
c0017318:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001731b:	83 c4 20             	add    esp,0x20
c001731e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017321:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017327:	50                   	push   eax
c0017328:	52                   	push   edx
c0017329:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001732c:	48                   	dec    eax
c001732d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017331:	0f af c2             	imul   eax,edx
c0017334:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017337:	50                   	push   eax
c0017338:	55                   	push   ebp
c0017339:	e8 06 94 fe ff       	call   c0000744 <memcpy>
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	eb 21                	jmp    c0017364 <VCache::read(unsigned long long, int, void*)+0xea>
c0017343:	83 ec 0c             	sub    esp,0xc
c0017346:	53                   	push   ebx
c0017347:	e8 70 fd ff ff       	call   c00170bc <VCache::invalidateReadBuffer()>
c001734c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017351:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017354:	56                   	push   esi
c0017355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001735d:	50                   	push   eax
c001735e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017361:	83 c4 20             	add    esp,0x20
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001736a:	e8 9b 75 00 00       	call   c001e90a <Semaphore::release()>
c001736f:	83 c4 2c             	add    esp,0x2c
c0017372:	31 c0                	xor    eax,eax
c0017374:	5b                   	pop    ebx
c0017375:	5e                   	pop    esi
c0017376:	5f                   	pop    edi
c0017377:	5d                   	pop    ebp
c0017378:	c3                   	ret    
c0017379:	90                   	nop

c001737a <Video::putrect(int, int, int, int, unsigned int)>:
c001737a:	55                   	push   ebp
c001737b:	57                   	push   edi
c001737c:	56                   	push   esi
c001737d:	53                   	push   ebx
c001737e:	83 ec 1c             	sub    esp,0x1c
c0017381:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017385:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017389:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001738d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017391:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017395:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017399:	01 df                	add    edi,ebx
c001739b:	39 fb                	cmp    ebx,edi
c001739d:	7d 1f                	jge    c00173be <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001739f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173a3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173a7:	7d 12                	jge    c00173bb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00173ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173af:	53                   	push   ebx
c00173b0:	55                   	push   ebp
c00173b1:	45                   	inc    ebp
c00173b2:	56                   	push   esi
c00173b3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173b6:	83 c4 10             	add    esp,0x10
c00173b9:	eb e8                	jmp    c00173a3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173bb:	43                   	inc    ebx
c00173bc:	eb dd                	jmp    c001739b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173be:	83 c4 1c             	add    esp,0x1c
c00173c1:	5b                   	pop    ebx
c00173c2:	5e                   	pop    esi
c00173c3:	5f                   	pop    edi
c00173c4:	5d                   	pop    ebp
c00173c5:	c3                   	ret    

c00173c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173c6:	55                   	push   ebp
c00173c7:	57                   	push   edi
c00173c8:	31 ff                	xor    edi,edi
c00173ca:	56                   	push   esi
c00173cb:	53                   	push   ebx
c00173cc:	83 ec 1c             	sub    esp,0x1c
c00173cf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173d7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173de:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173e7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ef:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173f2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f6:	01 f9                	add    ecx,edi
c00173f8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173fc:	7d 2f                	jge    c001742d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173fe:	31 f6                	xor    esi,esi
c0017400:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017404:	01 f2                	add    edx,esi
c0017406:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001740a:	7d 1a                	jge    c0017426 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001740c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001740f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017412:	46                   	inc    esi
c0017413:	51                   	push   ecx
c0017414:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017418:	52                   	push   edx
c0017419:	55                   	push   ebp
c001741a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017424:	eb da                	jmp    c0017400 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017426:	47                   	inc    edi
c0017427:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001742b:	eb c5                	jmp    c00173f2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001742d:	83 c4 1c             	add    esp,0x1c
c0017430:	5b                   	pop    ebx
c0017431:	5e                   	pop    esi
c0017432:	5f                   	pop    edi
c0017433:	5d                   	pop    ebp
c0017434:	c3                   	ret    
c0017435:	90                   	nop

c0017436 <Video::blit(unsigned int*, int, int, int, int)>:
c0017436:	55                   	push   ebp
c0017437:	57                   	push   edi
c0017438:	56                   	push   esi
c0017439:	53                   	push   ebx
c001743a:	83 ec 1c             	sub    esp,0x1c
c001743d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017441:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017445:	85 c0                	test   eax,eax
c0017447:	79 02                	jns    c001744b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017449:	31 c0                	xor    eax,eax
c001744b:	c1 e0 02             	shl    eax,0x2
c001744e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017456:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001745a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001745e:	39 d8                	cmp    eax,ebx
c0017460:	7e 49                	jle    c00174ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017462:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017468:	7c 41                	jl     c00174ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001746a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001746e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017472:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017476:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001747a:	39 f9                	cmp    ecx,edi
c001747c:	7e 22                	jle    c00174a0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001747e:	83 c5 04             	add    ebp,0x4
c0017481:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017487:	7c 14                	jl     c001749d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017489:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001748b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001748e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017492:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017496:	56                   	push   esi
c0017497:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001749a:	83 c4 10             	add    esp,0x10
c001749d:	47                   	inc    edi
c001749e:	eb d2                	jmp    c0017472 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a4:	43                   	inc    ebx
c00174a5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174a9:	eb ab                	jmp    c0017456 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174ab:	83 c4 1c             	add    esp,0x1c
c00174ae:	5b                   	pop    ebx
c00174af:	5e                   	pop    esi
c00174b0:	5f                   	pop    edi
c00174b1:	5d                   	pop    ebp
c00174b2:	c3                   	ret    
c00174b3:	90                   	nop

c00174b4 <Video::clearScreen(unsigned int)>:
c00174b4:	57                   	push   edi
c00174b5:	56                   	push   esi
c00174b6:	53                   	push   ebx
c00174b7:	31 db                	xor    ebx,ebx
c00174b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174bd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174c3:	7e 1f                	jle    c00174e4 <Video::clearScreen(unsigned int)+0x30>
c00174c5:	31 ff                	xor    edi,edi
c00174c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174cd:	7e 12                	jle    c00174e1 <Video::clearScreen(unsigned int)+0x2d>
c00174cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00174d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174d5:	53                   	push   ebx
c00174d6:	57                   	push   edi
c00174d7:	47                   	inc    edi
c00174d8:	56                   	push   esi
c00174d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174dc:	83 c4 10             	add    esp,0x10
c00174df:	eb e6                	jmp    c00174c7 <Video::clearScreen(unsigned int)+0x13>
c00174e1:	43                   	inc    ebx
c00174e2:	eb d9                	jmp    c00174bd <Video::clearScreen(unsigned int)+0x9>
c00174e4:	5b                   	pop    ebx
c00174e5:	5e                   	pop    esi
c00174e6:	5f                   	pop    edi
c00174e7:	c3                   	ret    

c00174e8 <Video::putpixel(int, int, unsigned int)>:
c00174e8:	c7 44 24 04 fc b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2fc
c00174f0:	e9 0a 31 00 00       	jmp    c001a5ff <Krnl::panic(char const*)>
c00174f5:	90                   	nop

c00174f6 <Video::Video(char const*)>:
c00174f6:	83 ec 0c             	sub    esp,0xc
c00174f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fd:	83 ec 08             	sub    esp,0x8
c0017500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017504:	50                   	push   eax
c0017505:	e8 6a d0 ff ff       	call   c0014574 <Device::Device(char const*)>
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0017512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017516:	89 10                	mov    DWORD PTR [eax],edx
c0017518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017526:	90                   	nop
c0017527:	83 c4 0c             	add    esp,0xc
c001752a:	c3                   	ret    
c001752b:	90                   	nop

c001752c <Video::~Video()>:
c001752c:	83 ec 0c             	sub    esp,0xc
c001752f:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0017534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017538:	89 10                	mov    DWORD PTR [eax],edx
c001753a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753e:	83 ec 0c             	sub    esp,0xc
c0017541:	50                   	push   eax
c0017542:	e8 0f cd ff ff       	call   c0014256 <Device::~Device()>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	90                   	nop
c001754b:	83 c4 0c             	add    esp,0xc
c001754e:	c3                   	ret    
c001754f:	90                   	nop

c0017550 <Video::~Video()>:
c0017550:	83 ec 0c             	sub    esp,0xc
c0017553:	83 ec 0c             	sub    esp,0xc
c0017556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001755a:	e8 cd ff ff ff       	call   c001752c <Video::~Video()>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	83 ec 08             	sub    esp,0x8
c0017565:	68 64 01 00 00       	push   0x164
c001756a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756e:	e8 0b b9 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	83 c4 0c             	add    esp,0xc
c0017579:	c3                   	ret    

c001757a <Video::isMonochrome()>:
c001757a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017584:	c3                   	ret    
c0017585:	90                   	nop

c0017586 <Video::getWidth()>:
c0017586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001758a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017590:	c3                   	ret    
c0017591:	90                   	nop

c0017592 <Video::getHeight()>:
c0017592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017596:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001759c:	c3                   	ret    
c001759d:	90                   	nop

c001759e <Video::drawCursor(int, int, unsigned char*, int)>:
c001759e:	55                   	push   ebp
c001759f:	57                   	push   edi
c00175a0:	56                   	push   esi
c00175a1:	53                   	push   ebx
c00175a2:	83 ec 2c             	sub    esp,0x2c
c00175a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175ad:	83 f8 01             	cmp    eax,0x1
c00175b0:	19 c9                	sbb    ecx,ecx
c00175b2:	31 db                	xor    ebx,ebx
c00175b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175b8:	89 cd                	mov    ebp,ecx
c00175ba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175c2:	f7 d5                	not    ebp
c00175c4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175ce:	01 d8                	add    eax,ebx
c00175d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175d4:	56                   	push   esi
c00175d5:	e8 b8 ff ff ff       	call   c0017592 <Video::getHeight()>
c00175da:	59                   	pop    ecx
c00175db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175df:	7e 70                	jle    c0017651 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175e9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175f4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175ff:	89 f8                	mov    eax,edi
c0017601:	83 c0 20             	add    eax,0x20
c0017604:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017608:	56                   	push   esi
c0017609:	e8 78 ff ff ff       	call   c0017586 <Video::getWidth()>
c001760e:	5a                   	pop    edx
c001760f:	39 c7                	cmp    edi,eax
c0017611:	7d 34                	jge    c0017647 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017613:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017618:	74 05                	je     c001761f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001761a:	8b 06                	mov    eax,DWORD PTR [esi]
c001761c:	55                   	push   ebp
c001761d:	eb 0d                	jmp    c001762c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001761f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017624:	74 12                	je     c0017638 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017626:	8b 06                	mov    eax,DWORD PTR [esi]
c0017628:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001762c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017630:	57                   	push   edi
c0017631:	56                   	push   esi
c0017632:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001763c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017640:	47                   	inc    edi
c0017641:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017645:	75 c1                	jne    c0017608 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017647:	43                   	inc    ebx
c0017648:	83 fb 20             	cmp    ebx,0x20
c001764b:	0f 85 79 ff ff ff    	jne    c00175ca <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017651:	83 c4 2c             	add    esp,0x2c
c0017654:	5b                   	pop    ebx
c0017655:	5e                   	pop    esi
c0017656:	5f                   	pop    edi
c0017657:	5d                   	pop    ebp
c0017658:	c3                   	ret    
c0017659:	90                   	nop

c001765a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001765a:	55                   	push   ebp
c001765b:	57                   	push   edi
c001765c:	56                   	push   esi
c001765d:	53                   	push   ebx
c001765e:	83 ec 28             	sub    esp,0x28
c0017661:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017665:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017669:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001766d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017671:	c1 e7 08             	shl    edi,0x8
c0017674:	01 c7                	add    edi,eax
c0017676:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001767a:	c1 e0 08             	shl    eax,0x8
c001767d:	01 d0                	add    eax,edx
c001767f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017687:	0f af c7             	imul   eax,edi
c001768a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017691:	50                   	push   eax
c0017692:	e8 ac 81 ff ff       	call   c000f843 <malloc>
c0017697:	83 c4 10             	add    esp,0x10
c001769a:	89 c5                	mov    ebp,eax
c001769c:	85 c0                	test   eax,eax
c001769e:	75 15                	jne    c00176b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	68 1d b3 02 c0       	push   0xc002b31d
c00176a8:	e8 b1 b8 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	e9 1c 01 00 00       	jmp    c00177d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176b5:	be 12 00 00 00       	mov    esi,0x12
c00176ba:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176be:	74 11                	je     c00176d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176c0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176c4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176c8:	c1 fe 03             	sar    esi,0x3
c00176cb:	0f af f0             	imul   esi,eax
c00176ce:	83 c6 12             	add    esi,0x12
c00176d1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176d5:	74 04                	je     c00176db <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176d7:	85 ff                	test   edi,edi
c00176d9:	75 12                	jne    c00176ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176db:	83 ec 0c             	sub    esp,0xc
c00176de:	68 34 b3 02 c0       	push   0xc002b334
c00176e3:	e8 76 b8 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00176e8:	e9 ce 00 00 00       	jmp    c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176ed:	52                   	push   edx
c00176ee:	52                   	push   edx
c00176ef:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176f3:	50                   	push   eax
c00176f4:	68 49 b3 02 c0       	push   0xc002b349
c00176f9:	e8 60 b8 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00176fe:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017702:	83 c4 10             	add    esp,0x10
c0017705:	80 fa 02             	cmp    dl,0x2
c0017708:	0f 85 98 00 00 00    	jne    c00177a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001770e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017713:	75 10                	jne    c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017715:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017719:	75 0a                	jne    c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001771b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001771e:	83 e8 18             	sub    eax,0x18
c0017721:	a8 f7                	test   al,0xf7
c0017723:	74 0a                	je     c001772f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017725:	83 ec 0c             	sub    esp,0xc
c0017728:	68 56 b3 02 c0       	push   0xc002b356
c001772d:	eb 7f                	jmp    c00177ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001772f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017737:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001773f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017743:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001774b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001774f:	75 0c                	jne    c001775d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017751:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017756:	c1 e0 18             	shl    eax,0x18
c0017759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001775d:	41                   	inc    ecx
c001775e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017763:	c1 e2 10             	shl    edx,0x10
c0017766:	89 d0                	mov    eax,edx
c0017768:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001776d:	c1 e2 08             	shl    edx,0x8
c0017770:	09 c2                	or     edx,eax
c0017772:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017776:	09 c2                	or     edx,eax
c0017778:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001777c:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017780:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017784:	c1 f8 03             	sar    eax,0x3
c0017787:	01 c6                	add    esi,eax
c0017789:	89 c8                	mov    eax,ecx
c001778b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001778f:	39 c7                	cmp    edi,eax
c0017791:	7f b0                	jg     c0017743 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017793:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001779b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001779e:	7e 22                	jle    c00177c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177a4:	eb 99                	jmp    c001773f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177a6:	50                   	push   eax
c00177a7:	50                   	push   eax
c00177a8:	52                   	push   edx
c00177a9:	68 64 b3 02 c0       	push   0xc002b364
c00177ae:	e8 ab b7 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00177b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177b6:	e8 98 80 ff ff       	call   c000f853 <free>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	31 ed                	xor    ebp,ebp
c00177c0:	eb 0f                	jmp    c00177d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177c6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177c9:	89 38                	mov    DWORD PTR [eax],edi
c00177cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177cf:	89 08                	mov    DWORD PTR [eax],ecx
c00177d1:	83 c4 1c             	add    esp,0x1c
c00177d4:	89 e8                	mov    eax,ebp
c00177d6:	5b                   	pop    ebx
c00177d7:	5e                   	pop    esi
c00177d8:	5f                   	pop    edi
c00177d9:	5d                   	pop    ebp
c00177da:	c3                   	ret    
c00177db:	90                   	nop

c00177dc <Video::putTGA(int, int, unsigned char*, int)>:
c00177dc:	55                   	push   ebp
c00177dd:	57                   	push   edi
c00177de:	56                   	push   esi
c00177df:	53                   	push   ebx
c00177e0:	83 ec 28             	sub    esp,0x28
c00177e3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177eb:	50                   	push   eax
c00177ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177f0:	50                   	push   eax
c00177f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f9:	56                   	push   esi
c00177fa:	e8 5b fe ff ff       	call   c001765a <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177ff:	83 c4 20             	add    esp,0x20
c0017802:	85 c0                	test   eax,eax
c0017804:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017808:	74 35                	je     c001783f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001780a:	89 c7                	mov    edi,eax
c001780c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017810:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017814:	39 d8                	cmp    eax,ebx
c0017816:	7e 27                	jle    c001783f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017818:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001781c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017820:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017824:	39 e8                	cmp    eax,ebp
c0017826:	7e 14                	jle    c001783c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017828:	8b 06                	mov    eax,DWORD PTR [esi]
c001782a:	83 c7 04             	add    edi,0x4
c001782d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017830:	53                   	push   ebx
c0017831:	55                   	push   ebp
c0017832:	45                   	inc    ebp
c0017833:	56                   	push   esi
c0017834:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017837:	83 c4 10             	add    esp,0x10
c001783a:	eb e0                	jmp    c001781c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001783c:	43                   	inc    ebx
c001783d:	eb cd                	jmp    c001780c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001783f:	83 c4 1c             	add    esp,0x1c
c0017842:	5b                   	pop    ebx
c0017843:	5e                   	pop    esi
c0017844:	5f                   	pop    edi
c0017845:	5d                   	pop    ebp
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <ACPI::close(int, int, void*)>:
c0017848:	83 ec 1c             	sub    esp,0x1c
c001784b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017853:	74 0a                	je     c001785f <ACPI::close(int, int, void*)+0x17>
c0017855:	b8 00 00 00 00       	mov    eax,0x0
c001785a:	e9 9a 00 00 00       	jmp    c00178f9 <ACPI::close(int, int, void*)+0xb1>
c001785f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017864:	75 37                	jne    c001789d <ACPI::close(int, int, void*)+0x55>
c0017866:	83 ec 0c             	sub    esp,0xc
c0017869:	68 c0 b3 02 c0       	push   0xc002b3c0
c001786e:	e8 eb b6 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0017873:	83 c4 10             	add    esp,0x10
c0017876:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001787b:	85 c0                	test   eax,eax
c001787d:	74 07                	je     c0017886 <ACPI::close(int, int, void*)+0x3e>
c001787f:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0017884:	ff d0                	call   eax
c0017886:	83 ec 0c             	sub    esp,0xc
c0017889:	68 e4 b4 02 c0       	push   0xc002b4e4
c001788e:	e8 6c 2d 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001789b:	eb 5c                	jmp    c00178f9 <ACPI::close(int, int, void*)+0xb1>
c001789d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178a2:	75 50                	jne    c00178f4 <ACPI::close(int, int, void*)+0xac>
c00178a4:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c00178a9:	85 c0                	test   eax,eax
c00178ab:	74 07                	je     c00178b4 <ACPI::close(int, int, void*)+0x6c>
c00178ad:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c00178b2:	ff d0                	call   eax
c00178b4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178b9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178be:	83 e0 02             	and    eax,0x2
c00178c1:	74 1c                	je     c00178df <ACPI::close(int, int, void*)+0x97>
c00178c3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ce:	89 c2                	mov    edx,eax
c00178d0:	ec                   	in     al,dx
c00178d1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178d5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178dd:	eb da                	jmp    c00178b9 <ACPI::close(int, int, void*)+0x71>
c00178df:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178e6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178eb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178f3:	ee                   	out    dx,al
c00178f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178f9:	83 c4 1c             	add    esp,0x1c
c00178fc:	c3                   	ret    

c00178fd <findRSDP()>:
c00178fd:	83 ec 1c             	sub    esp,0x1c
c0017900:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017905:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001790b:	83 e0 04             	and    eax,0x4
c001790e:	84 c0                	test   al,al
c0017910:	75 07                	jne    c0017919 <findRSDP()+0x1c>
c0017912:	b8 00 00 00 00       	mov    eax,0x0
c0017917:	eb 6a                	jmp    c0017983 <findRSDP()+0x86>
c0017919:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001791e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017923:	7f 1b                	jg     c0017940 <findRSDP()+0x43>
c0017925:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001792a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017930:	83 e2 fb             	and    edx,0xfffffffb
c0017933:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017939:	b8 00 00 00 00       	mov    eax,0x0
c001793e:	eb 43                	jmp    c0017983 <findRSDP()+0x86>
c0017940:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017948:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017950:	77 2c                	ja     c001797e <findRSDP()+0x81>
c0017952:	83 ec 04             	sub    esp,0x4
c0017955:	6a 08                	push   0x8
c0017957:	68 cd b3 02 c0       	push   0xc002b3cd
c001795c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017960:	e8 db 8c fe ff       	call   c0000640 <memcmp>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	85 c0                	test   eax,eax
c001796a:	0f 94 c0             	sete   al
c001796d:	84 c0                	test   al,al
c001796f:	74 06                	je     c0017977 <findRSDP()+0x7a>
c0017971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017975:	eb 0c                	jmp    c0017983 <findRSDP()+0x86>
c0017977:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001797c:	eb ca                	jmp    c0017948 <findRSDP()+0x4b>
c001797e:	b8 00 00 00 00       	mov    eax,0x0
c0017983:	83 c4 1c             	add    esp,0x1c
c0017986:	c3                   	ret    

c0017987 <loadACPITables(unsigned char*)>:
c0017987:	56                   	push   esi
c0017988:	53                   	push   ebx
c0017989:	83 ec 44             	sub    esp,0x44
c001798c:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017991:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017997:	83 e0 04             	and    eax,0x4
c001799a:	84 c0                	test   al,al
c001799c:	0f 84 05 02 00 00    	je     c0017ba7 <loadACPITables(unsigned char*)+0x220>
c00179a2:	a0 c0 0c 03 c0       	mov    al,ds:0xc0030cc0
c00179a7:	84 c0                	test   al,al
c00179a9:	74 75                	je     c0017a20 <loadACPITables(unsigned char*)+0x99>
c00179ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ba:	83 e8 24             	sub    eax,0x24
c00179bd:	c1 e8 03             	shr    eax,0x3
c00179c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179c4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179d0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179d4:	0f 8d b2 00 00 00    	jge    c0017a8c <loadACPITables(unsigned char*)+0x105>
c00179da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179de:	83 c0 24             	add    eax,0x24
c00179e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f1:	c1 e0 03             	shl    eax,0x3
c00179f4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a01:	89 c1                	mov    ecx,eax
c0017a03:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017a08:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0b:	89 15 ac 0a 03 c0    	mov    DWORD PTR ds:0xc0030aac,edx
c0017a11:	89 ca                	mov    edx,ecx
c0017a13:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c0017a1a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a1e:	eb ac                	jmp    c00179cc <loadACPITables(unsigned char*)+0x45>
c0017a20:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2f:	83 e8 24             	sub    eax,0x24
c0017a32:	c1 e8 02             	shr    eax,0x2
c0017a35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a39:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a45:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a49:	7d 41                	jge    c0017a8c <loadACPITables(unsigned char*)+0x105>
c0017a4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4f:	83 c0 24             	add    eax,0x24
c0017a52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a62:	c1 e0 02             	shl    eax,0x2
c0017a65:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a6f:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017a74:	8d 50 01             	lea    edx,[eax+0x1]
c0017a77:	89 15 ac 0a 03 c0    	mov    DWORD PTR ds:0xc0030aac,edx
c0017a7d:	89 ca                	mov    edx,ecx
c0017a7f:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c0017a86:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a8a:	eb b5                	jmp    c0017a41 <loadACPITables(unsigned char*)+0xba>
c0017a8c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a94:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017a99:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a9d:	0f 8d 05 01 00 00    	jge    c0017ba8 <loadACPITables(unsigned char*)+0x221>
c0017aa3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa7:	8b 04 c5 c4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf53c]
c0017aae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abe:	25 ff 0f 00 00       	and    eax,0xfff
c0017ac3:	89 c6                	mov    esi,eax
c0017ac5:	e8 76 a3 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017aca:	89 c3                	mov    ebx,eax
c0017acc:	83 ec 0c             	sub    esp,0xc
c0017acf:	6a 01                	push   0x1
c0017ad1:	e8 cf a0 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017add:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ae3:	83 ec 0c             	sub    esp,0xc
c0017ae6:	6a 01                	push   0x1
c0017ae8:	6a 01                	push   0x1
c0017aea:	50                   	push   eax
c0017aeb:	52                   	push   edx
c0017aec:	53                   	push   ebx
c0017aed:	e8 7e ab ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017af2:	83 c4 20             	add    esp,0x20
c0017af5:	09 f0                	or     eax,esi
c0017af7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017afb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aff:	c1 e0 03             	shl    eax,0x3
c0017b02:	05 c0 0a 03 c0       	add    eax,0xc0030ac0
c0017b07:	83 ec 04             	sub    esp,0x4
c0017b0a:	6a 04                	push   0x4
c0017b0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b10:	50                   	push   eax
c0017b11:	e8 2e 8c fe ff       	call   c0000744 <memcpy>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b28:	05 00 10 00 00       	add    eax,0x1000
c0017b2d:	c1 e8 0c             	shr    eax,0xc
c0017b30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b38:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b3f:	25 ff 0f 00 00       	and    eax,0xfff
c0017b44:	89 c6                	mov    esi,eax
c0017b46:	e8 f5 a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017b4b:	89 c3                	mov    ebx,eax
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b54:	e8 4c a0 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b66:	83 ec 0c             	sub    esp,0xc
c0017b69:	6a 01                	push   0x1
c0017b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b6f:	50                   	push   eax
c0017b70:	52                   	push   edx
c0017b71:	53                   	push   ebx
c0017b72:	e8 f9 aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b77:	83 c4 20             	add    esp,0x20
c0017b7a:	09 f0                	or     eax,esi
c0017b7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b83:	83 ec 0c             	sub    esp,0xc
c0017b86:	50                   	push   eax
c0017b87:	e8 89 a4 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b97:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c0017b9e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017ba2:	e9 ed fe ff ff       	jmp    c0017a94 <loadACPITables(unsigned char*)+0x10d>
c0017ba7:	90                   	nop
c0017ba8:	83 c4 44             	add    esp,0x44
c0017bab:	5b                   	pop    ebx
c0017bac:	5e                   	pop    esi
c0017bad:	c3                   	ret    

c0017bae <findRSDT(unsigned char*)>:
c0017bae:	56                   	push   esi
c0017baf:	53                   	push   ebx
c0017bb0:	83 ec 44             	sub    esp,0x44
c0017bb3:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017bb8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bbe:	83 e0 04             	and    eax,0x4
c0017bc1:	84 c0                	test   al,al
c0017bc3:	75 0a                	jne    c0017bcf <findRSDT(unsigned char*)+0x21>
c0017bc5:	b8 00 00 00 00       	mov    eax,0x0
c0017bca:	e9 f7 00 00 00       	jmp    c0017cc6 <findRSDT(unsigned char*)+0x118>
c0017bcf:	83 ec 04             	sub    esp,0x4
c0017bd2:	6a 24                	push   0x24
c0017bd4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bd8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bdc:	50                   	push   eax
c0017bdd:	e8 62 8b fe ff       	call   c0000744 <memcpy>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017be9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bed:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c0d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c12:	89 c6                	mov    esi,eax
c0017c14:	e8 27 a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017c19:	89 c3                	mov    ebx,eax
c0017c1b:	83 ec 0c             	sub    esp,0xc
c0017c1e:	6a 02                	push   0x2
c0017c20:	e8 80 9f ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017c25:	83 c4 10             	add    esp,0x10
c0017c28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c2c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	6a 01                	push   0x1
c0017c37:	6a 02                	push   0x2
c0017c39:	50                   	push   eax
c0017c3a:	52                   	push   edx
c0017c3b:	53                   	push   ebx
c0017c3c:	e8 2f aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c41:	83 c4 20             	add    esp,0x20
c0017c44:	09 f0                	or     eax,esi
c0017c46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4e:	25 ff 0f 00 00       	and    eax,0xfff
c0017c53:	89 c6                	mov    esi,eax
c0017c55:	e8 e6 a1 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017c5a:	89 c3                	mov    ebx,eax
c0017c5c:	83 ec 0c             	sub    esp,0xc
c0017c5f:	6a 02                	push   0x2
c0017c61:	e8 3f 9f ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017c66:	83 c4 10             	add    esp,0x10
c0017c69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c6d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c73:	83 ec 0c             	sub    esp,0xc
c0017c76:	6a 01                	push   0x1
c0017c78:	6a 02                	push   0x2
c0017c7a:	50                   	push   eax
c0017c7b:	52                   	push   edx
c0017c7c:	53                   	push   ebx
c0017c7d:	e8 ee a9 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c82:	83 c4 20             	add    esp,0x20
c0017c85:	09 f0                	or     eax,esi
c0017c87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c8b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c90:	75 11                	jne    c0017ca3 <findRSDT(unsigned char*)+0xf5>
c0017c92:	c6 05 c0 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030cc0,0x0
c0017c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c9d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ca1:	eb 1f                	jmp    c0017cc2 <findRSDT(unsigned char*)+0x114>
c0017ca3:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ca8:	75 11                	jne    c0017cbb <findRSDT(unsigned char*)+0x10d>
c0017caa:	c6 05 c0 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030cc0,0x1
c0017cb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cb9:	eb 07                	jmp    c0017cc2 <findRSDT(unsigned char*)+0x114>
c0017cbb:	b8 00 00 00 00       	mov    eax,0x0
c0017cc0:	eb 04                	jmp    c0017cc6 <findRSDT(unsigned char*)+0x118>
c0017cc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cc6:	83 c4 44             	add    esp,0x44
c0017cc9:	5b                   	pop    ebx
c0017cca:	5e                   	pop    esi
c0017ccb:	c3                   	ret    

c0017ccc <findDataTable(unsigned char*, char*)>:
c0017ccc:	83 ec 1c             	sub    esp,0x1c
c0017ccf:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017cd4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cda:	83 e0 04             	and    eax,0x4
c0017cdd:	84 c0                	test   al,al
c0017cdf:	75 07                	jne    c0017ce8 <findDataTable(unsigned char*, char*)+0x1c>
c0017ce1:	b8 00 00 00 00       	mov    eax,0x0
c0017ce6:	eb 7c                	jmp    c0017d64 <findDataTable(unsigned char*, char*)+0x98>
c0017ce8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cf0:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017cf5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cf9:	7d 3a                	jge    c0017d35 <findDataTable(unsigned char*, char*)+0x69>
c0017cfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cff:	c1 e0 03             	shl    eax,0x3
c0017d02:	05 c0 0a 03 c0       	add    eax,0xc0030ac0
c0017d07:	83 ec 04             	sub    esp,0x4
c0017d0a:	6a 04                	push   0x4
c0017d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d10:	50                   	push   eax
c0017d11:	e8 2a 89 fe ff       	call   c0000640 <memcmp>
c0017d16:	83 c4 10             	add    esp,0x10
c0017d19:	85 c0                	test   eax,eax
c0017d1b:	0f 94 c0             	sete   al
c0017d1e:	84 c0                	test   al,al
c0017d20:	74 0d                	je     c0017d2f <findDataTable(unsigned char*, char*)+0x63>
c0017d22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d26:	8b 04 c5 c4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf53c]
c0017d2d:	eb 35                	jmp    c0017d64 <findDataTable(unsigned char*, char*)+0x98>
c0017d2f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d33:	eb bb                	jmp    c0017cf0 <findDataTable(unsigned char*, char*)+0x24>
c0017d35:	a0 c0 0c 03 c0       	mov    al,ds:0xc0030cc0
c0017d3a:	84 c0                	test   al,al
c0017d3c:	74 07                	je     c0017d45 <findDataTable(unsigned char*, char*)+0x79>
c0017d3e:	b8 58 00 00 00       	mov    eax,0x58
c0017d43:	eb 05                	jmp    c0017d4a <findDataTable(unsigned char*, char*)+0x7e>
c0017d45:	b8 52 00 00 00       	mov    eax,0x52
c0017d4a:	83 ec 04             	sub    esp,0x4
c0017d4d:	50                   	push   eax
c0017d4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d52:	68 08 b5 02 c0       	push   0xc002b508
c0017d57:	e8 02 b2 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	b8 00 00 00 00       	mov    eax,0x0
c0017d64:	83 c4 1c             	add    esp,0x1c
c0017d67:	c3                   	ret    

c0017d68 <scanMADT()>:
c0017d68:	53                   	push   ebx
c0017d69:	83 ec 38             	sub    esp,0x38
c0017d6c:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017d71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d77:	83 e0 04             	and    eax,0x4
c0017d7a:	84 c0                	test   al,al
c0017d7c:	0f 84 63 04 00 00    	je     c00181e5 <scanMADT()+0x47d>
c0017d82:	e8 76 fb ff ff       	call   c00178fd <findRSDP()>
c0017d87:	a3 cc 0c 03 c0       	mov    ds:0xc0030ccc,eax
c0017d8c:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017d91:	85 c0                	test   eax,eax
c0017d93:	75 19                	jne    c0017dae <scanMADT()+0x46>
c0017d95:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017d9a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017da0:	83 e2 fb             	and    edx,0xfffffffb
c0017da3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017da9:	e9 3b 04 00 00       	jmp    c00181e9 <scanMADT()+0x481>
c0017dae:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017db3:	83 ec 0c             	sub    esp,0xc
c0017db6:	50                   	push   eax
c0017db7:	e8 f2 fd ff ff       	call   c0017bae <findRSDT(unsigned char*)>
c0017dbc:	83 c4 10             	add    esp,0x10
c0017dbf:	a3 c8 0c 03 c0       	mov    ds:0xc0030cc8,eax
c0017dc4:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017dc9:	85 c0                	test   eax,eax
c0017dcb:	75 19                	jne    c0017de6 <scanMADT()+0x7e>
c0017dcd:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017dd2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dd8:	83 e2 fb             	and    edx,0xfffffffb
c0017ddb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017de1:	e9 03 04 00 00       	jmp    c00181e9 <scanMADT()+0x481>
c0017de6:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017deb:	83 ec 0c             	sub    esp,0xc
c0017dee:	50                   	push   eax
c0017def:	e8 93 fb ff ff       	call   c0017987 <loadACPITables(unsigned char*)>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017dfc:	83 ec 08             	sub    esp,0x8
c0017dff:	68 d6 b3 02 c0       	push   0xc002b3d6
c0017e04:	50                   	push   eax
c0017e05:	e8 c2 fe ff ff       	call   c0017ccc <findDataTable(unsigned char*, char*)>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e11:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e16:	75 19                	jne    c0017e31 <scanMADT()+0xc9>
c0017e18:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0017e1d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e23:	83 e2 fe             	and    edx,0xfffffffe
c0017e26:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e2c:	e9 b8 03 00 00       	jmp    c00181e9 <scanMADT()+0x481>
c0017e31:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e40:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e44:	0f 87 9f 03 00 00    	ja     c00181e9 <scanMADT()+0x481>
c0017e4a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e52:	0f 87 91 03 00 00    	ja     c00181e9 <scanMADT()+0x481>
c0017e58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e64:	8d 50 01             	lea    edx,[eax+0x1]
c0017e67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e73:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7b:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e86:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e8a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e8e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e93:	0f 86 4f 03 00 00    	jbe    c00181e8 <scanMADT()+0x480>
c0017e99:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e9e:	75 57                	jne    c0017ef7 <scanMADT()+0x18f>
c0017ea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eab:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017eb1:	0f b6 d2             	movzx  edx,dl
c0017eb4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eb8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ebc:	88 82 00 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf100],al
c0017ec2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ecd:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017ed3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ed6:	88 0d c0 0e 03 c0    	mov    BYTE PTR ds:0xc0030ec0,cl
c0017edc:	0f b6 d2             	movzx  edx,dl
c0017edf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ee3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ee7:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017eed:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ef2:	e9 da 02 00 00       	jmp    c00181d1 <scanMADT()+0x469>
c0017ef7:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017efc:	0f 85 14 01 00 00    	jne    c0018016 <scanMADT()+0x2ae>
c0017f02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f06:	8d 50 01             	lea    edx,[eax+0x1]
c0017f09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f0d:	8a 15 80 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d80
c0017f13:	0f b6 d2             	movzx  edx,dl
c0017f16:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f1a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f1e:	88 82 a0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf260],al
c0017f24:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f30:	01 d0                	add    eax,edx
c0017f32:	83 c0 2c             	add    eax,0x2c
c0017f35:	8a 00                	mov    al,BYTE PTR [eax]
c0017f37:	0f b6 d0             	movzx  edx,al
c0017f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f45:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f49:	0f b6 c0             	movzx  eax,al
c0017f4c:	c1 e0 08             	shl    eax,0x8
c0017f4f:	89 d1                	mov    ecx,edx
c0017f51:	09 c1                	or     ecx,eax
c0017f53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f57:	8d 50 02             	lea    edx,[eax+0x2]
c0017f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f62:	0f b6 c0             	movzx  eax,al
c0017f65:	c1 e0 10             	shl    eax,0x10
c0017f68:	09 c1                	or     ecx,eax
c0017f6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6e:	8d 50 03             	lea    edx,[eax+0x3]
c0017f71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f75:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f79:	0f b6 c0             	movzx  eax,al
c0017f7c:	c1 e0 18             	shl    eax,0x18
c0017f7f:	09 c1                	or     ecx,eax
c0017f81:	89 ca                	mov    edx,ecx
c0017f83:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017f88:	0f b6 c0             	movzx  eax,al
c0017f8b:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0017f92:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9f:	01 d0                	add    eax,edx
c0017fa1:	83 c0 2c             	add    eax,0x2c
c0017fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fa6:	0f b6 d0             	movzx  edx,al
c0017fa9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fad:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fb8:	0f b6 c0             	movzx  eax,al
c0017fbb:	c1 e0 08             	shl    eax,0x8
c0017fbe:	89 d1                	mov    ecx,edx
c0017fc0:	09 c1                	or     ecx,eax
c0017fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc6:	8d 50 02             	lea    edx,[eax+0x2]
c0017fc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fcd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fd1:	0f b6 c0             	movzx  eax,al
c0017fd4:	c1 e0 10             	shl    eax,0x10
c0017fd7:	09 c1                	or     ecx,eax
c0017fd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdd:	8d 50 03             	lea    edx,[eax+0x3]
c0017fe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	c1 e0 18             	shl    eax,0x18
c0017fee:	09 c1                	or     ecx,eax
c0017ff0:	89 ca                	mov    edx,ecx
c0017ff2:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017ff7:	0f b6 c0             	movzx  eax,al
c0017ffa:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c0018001:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018006:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c001800b:	40                   	inc    eax
c001800c:	a2 80 0d 03 c0       	mov    ds:0xc0030d80,al
c0018011:	e9 bb 01 00 00       	jmp    c00181d1 <scanMADT()+0x469>
c0018016:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001801b:	0f 85 e9 00 00 00    	jne    c001810a <scanMADT()+0x3a2>
c0018021:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018025:	8d 50 01             	lea    edx,[eax+0x1]
c0018028:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001802c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018030:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018034:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018038:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803c:	8d 50 01             	lea    edx,[eax+0x1]
c001803f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018043:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018047:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001804b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001804f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018057:	01 d0                	add    eax,edx
c0018059:	83 c0 2c             	add    eax,0x2c
c001805c:	8a 00                	mov    al,BYTE PTR [eax]
c001805e:	0f b6 d0             	movzx  edx,al
c0018061:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018065:	8d 48 01             	lea    ecx,[eax+0x1]
c0018068:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018070:	0f b6 c0             	movzx  eax,al
c0018073:	c1 e0 08             	shl    eax,0x8
c0018076:	89 d1                	mov    ecx,edx
c0018078:	09 c1                	or     ecx,eax
c001807a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807e:	8d 50 02             	lea    edx,[eax+0x2]
c0018081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018085:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018089:	0f b6 c0             	movzx  eax,al
c001808c:	c1 e0 10             	shl    eax,0x10
c001808f:	09 c1                	or     ecx,eax
c0018091:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018095:	8d 50 03             	lea    edx,[eax+0x3]
c0018098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a0:	0f b6 c0             	movzx  eax,al
c00180a3:	c1 e0 18             	shl    eax,0x18
c00180a6:	09 c8                	or     eax,ecx
c00180a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180ac:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b9:	01 d0                	add    eax,edx
c00180bb:	83 c0 2c             	add    eax,0x2c
c00180be:	8a 00                	mov    al,BYTE PTR [eax]
c00180c0:	0f b6 c0             	movzx  eax,al
c00180c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ce:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180d2:	0f b6 d2             	movzx  edx,dl
c00180d5:	c1 e2 08             	shl    edx,0x8
c00180d8:	09 d0                	or     eax,edx
c00180da:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180df:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180e4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180ed:	88 90 20 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd29e0],dl
c00180f3:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180f8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180fd:	66 89 84 12 60 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf2a0],ax
c0018105:	e9 c7 00 00 00       	jmp    c00181d1 <scanMADT()+0x469>
c001810a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001810f:	0f 85 b0 00 00 00    	jne    c00181c5 <scanMADT()+0x45d>
c0018115:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018119:	8d 50 01             	lea    edx,[eax+0x1]
c001811c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018120:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018124:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018128:	0f b6 c0             	movzx  eax,al
c001812b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001812f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018133:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018137:	01 d0                	add    eax,edx
c0018139:	83 c0 2c             	add    eax,0x2c
c001813c:	8a 00                	mov    al,BYTE PTR [eax]
c001813e:	0f b6 d0             	movzx  edx,al
c0018141:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018145:	8d 48 01             	lea    ecx,[eax+0x1]
c0018148:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018150:	0f b6 c0             	movzx  eax,al
c0018153:	c1 e0 08             	shl    eax,0x8
c0018156:	09 d0                	or     eax,edx
c0018158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001815c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018161:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018165:	8d 50 01             	lea    edx,[eax+0x1]
c0018168:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001816c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018170:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018174:	0f b6 c0             	movzx  eax,al
c0018177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001817b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817f:	c1 e0 08             	shl    eax,0x8
c0018182:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018186:	89 c1                	mov    ecx,eax
c0018188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001818c:	c1 e0 18             	shl    eax,0x18
c001818f:	89 c3                	mov    ebx,eax
c0018191:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0018196:	8d 50 01             	lea    edx,[eax+0x1]
c0018199:	89 15 d0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cd0,edx
c001819f:	09 d9                	or     ecx,ebx
c00181a1:	89 ca                	mov    edx,ecx
c00181a3:	89 14 85 e0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf320],edx
c00181aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b6:	68 38 b5 02 c0       	push   0xc002b538
c00181bb:	e8 9e ad ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	eb 0c                	jmp    c00181d1 <scanMADT()+0x469>
c00181c5:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181ca:	75 05                	jne    c00181d1 <scanMADT()+0x469>
c00181cc:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181d1:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181da:	01 d0                	add    eax,edx
c00181dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181e0:	e9 54 fc ff ff       	jmp    c0017e39 <scanMADT()+0xd1>
c00181e5:	90                   	nop
c00181e6:	eb 01                	jmp    c00181e9 <scanMADT()+0x481>
c00181e8:	90                   	nop
c00181e9:	83 c4 38             	add    esp,0x38
c00181ec:	5b                   	pop    ebx
c00181ed:	c3                   	ret    

c00181ee <ACPI::ACPI()>:
c00181ee:	83 ec 0c             	sub    esp,0xc
c00181f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f5:	83 ec 08             	sub    esp,0x8
c00181f8:	68 db b3 02 c0       	push   0xc002b3db
c00181fd:	50                   	push   eax
c00181fe:	e8 71 c3 ff ff       	call   c0014574 <Device::Device(char const*)>
c0018203:	83 c4 10             	add    esp,0x10
c0018206:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c001820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820f:	89 10                	mov    DWORD PTR [eax],edx
c0018211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018215:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001821c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018220:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018247:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001824e:	e8 15 fb ff ff       	call   c0017d68 <scanMADT()>
c0018253:	90                   	nop
c0018254:	83 c4 0c             	add    esp,0xc
c0018257:	c3                   	ret    

c0018258 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018258:	83 ec 2c             	sub    esp,0x2c
c001825b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001825f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018263:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018267:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001826b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018270:	88 d0                	mov    al,dl
c0018272:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018276:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001827b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018283:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018287:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001828d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018291:	0f 8d 97 00 00 00    	jge    c001832e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001829b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829f:	83 c2 2a             	add    edx,0x2a
c00182a2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182a6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182ab:	75 78                	jne    c0018325 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b5:	83 c2 2a             	add    edx,0x2a
c00182b8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182bc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182c0:	75 63                	jne    c0018325 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182c2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182c7:	74 3a                	je     c0018303 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d1:	83 c2 2a             	add    edx,0x2a
c00182d4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182df:	39 c2                	cmp    edx,eax
c00182e1:	74 10                	je     c00182f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182e3:	83 ec 0c             	sub    esp,0xc
c00182e6:	68 74 b5 02 c0       	push   0xc002b574
c00182eb:	e8 0f 23 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	83 ec 0c             	sub    esp,0xc
c00182f6:	68 e0 b3 02 c0       	push   0xc002b3e0
c00182fb:	e8 ff 22 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018307:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001830b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830f:	83 c2 2a             	add    edx,0x2a
c0018312:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018316:	8b 02                	mov    eax,DWORD PTR [edx]
c0018318:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001831b:	89 01                	mov    DWORD PTR [ecx],eax
c001831d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018320:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018325:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018329:	e9 55 ff ff ff       	jmp    c0018283 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001832e:	90                   	nop
c001832f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018333:	83 c4 2c             	add    esp,0x2c
c0018336:	c2 04 00             	ret    0x4
c0018339:	90                   	nop

c001833a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001833a:	83 ec 1c             	sub    esp,0x1c
c001833d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018341:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018345:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018349:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001834e:	88 c8                	mov    al,cl
c0018350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018354:	88 d0                	mov    al,dl
c0018356:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001835a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018368:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001836b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001836f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018377:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001837d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018381:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018388:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001838d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018391:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018397:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001839b:	8d 48 01             	lea    ecx,[eax+0x1]
c001839e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a2:	83 c2 2a             	add    edx,0x2a
c00183a5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ad:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183be:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183cc:	8d 50 01             	lea    edx,[eax+0x1]
c00183cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183dd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183e3:	3d 00 02 00 00       	cmp    eax,0x200
c00183e8:	75 10                	jne    c00183fa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183ea:	83 ec 0c             	sub    esp,0xc
c00183ed:	68 ef b3 02 c0       	push   0xc002b3ef
c00183f2:	e8 08 22 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c00183f7:	83 c4 10             	add    esp,0x10
c00183fa:	90                   	nop
c00183fb:	83 c4 1c             	add    esp,0x1c
c00183fe:	c3                   	ret    
c00183ff:	90                   	nop

c0018400 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018400:	b8 00 00 00 00       	mov    eax,0x0
c0018405:	c3                   	ret    

c0018406 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018406:	83 ec 1c             	sub    esp,0x1c
c0018409:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001840d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018410:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018414:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0018419:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001841e:	83 ec 08             	sub    esp,0x8
c0018421:	52                   	push   edx
c0018422:	50                   	push   eax
c0018423:	e8 30 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001842f:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0018434:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018439:	83 ec 04             	sub    esp,0x4
c001843c:	6a 01                	push   0x1
c001843e:	52                   	push   edx
c001843f:	50                   	push   eax
c0018440:	e8 29 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	90                   	nop
c0018449:	83 c4 1c             	add    esp,0x1c
c001844c:	c3                   	ret    
c001844d:	90                   	nop

c001844e <ACPI::open(int, int, void*)>:
c001844e:	53                   	push   ebx
c001844f:	83 ec 28             	sub    esp,0x28
c0018452:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018456:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001845d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018461:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018468:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001846d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018473:	83 e0 04             	and    eax,0x4
c0018476:	84 c0                	test   al,al
c0018478:	74 47                	je     c00184c1 <ACPI::open(int, int, void*)+0x73>
c001847a:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c001847f:	83 ec 08             	sub    esp,0x8
c0018482:	68 0c b4 02 c0       	push   0xc002b40c
c0018487:	50                   	push   eax
c0018488:	e8 3f f8 ff ff       	call   c0017ccc <findDataTable(unsigned char*, char*)>
c001848d:	83 c4 10             	add    esp,0x10
c0018490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018494:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018499:	74 26                	je     c00184c1 <ACPI::open(int, int, void*)+0x73>
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	68 11 b4 02 c0       	push   0xc002b411
c00184a3:	e8 b6 aa ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184af:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ba:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184c1:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184cd:	8a 00                	mov    al,BYTE PTR [eax]
c00184cf:	3c 01                	cmp    al,0x1
c00184d1:	75 28                	jne    c00184fb <ACPI::open(int, int, void*)+0xad>
c00184d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e9:	83 ec 0c             	sub    esp,0xc
c00184ec:	68 22 b4 02 c0       	push   0xc002b422
c00184f1:	e8 68 aa ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	eb 25                	jmp    c0018520 <ACPI::open(int, int, void*)+0xd2>
c00184fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184ff:	8a 00                	mov    al,BYTE PTR [eax]
c0018501:	3c 02                	cmp    al,0x2
c0018503:	75 1b                	jne    c0018520 <ACPI::open(int, int, void*)+0xd2>
c0018505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018509:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 2a b4 02 c0       	push   0xc002b42a
c0018518:	e8 41 aa ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018524:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001852a:	83 f0 01             	xor    eax,0x1
c001852d:	84 c0                	test   al,al
c001852f:	74 6a                	je     c001859b <ACPI::open(int, int, void*)+0x14d>
c0018531:	83 ec 0c             	sub    esp,0xc
c0018534:	68 32 b4 02 c0       	push   0xc002b432
c0018539:	e8 20 aa ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001853e:	83 c4 10             	add    esp,0x10
c0018541:	e8 0a 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018546:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001854a:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001854f:	75 28                	jne    c0018579 <ACPI::open(int, int, void*)+0x12b>
c0018551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018555:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001855c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018560:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018567:	83 ec 0c             	sub    esp,0xc
c001856a:	68 40 b4 02 c0       	push   0xc002b440
c001856f:	e8 ea a9 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018574:	83 c4 10             	add    esp,0x10
c0018577:	eb 22                	jmp    c001859b <ACPI::open(int, int, void*)+0x14d>
c0018579:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001857e:	75 1b                	jne    c001859b <ACPI::open(int, int, void*)+0x14d>
c0018580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018584:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001858b:	83 ec 0c             	sub    esp,0xc
c001858e:	68 4a b4 02 c0       	push   0xc002b44a
c0018593:	e8 c6 a9 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018598:	83 c4 10             	add    esp,0x10
c001859b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185a5:	84 c0                	test   al,al
c00185a7:	74 13                	je     c00185bc <ACPI::open(int, int, void*)+0x16e>
c00185a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ad:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185b3:	83 f0 01             	xor    eax,0x1
c00185b6:	0f b6 c0             	movzx  eax,al
c00185b9:	40                   	inc    eax
c00185ba:	eb 05                	jmp    c00185c1 <ACPI::open(int, int, void*)+0x173>
c00185bc:	b8 00 00 00 00       	mov    eax,0x0
c00185c1:	83 ec 08             	sub    esp,0x8
c00185c4:	50                   	push   eax
c00185c5:	68 54 b4 02 c0       	push   0xc002b454
c00185ca:	e8 8f a9 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d6:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185dc:	84 c0                	test   al,al
c00185de:	74 67                	je     c0018647 <ACPI::open(int, int, void*)+0x1f9>
c00185e0:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185ef:	e8 4f 72 ff ff       	call   c000f843 <malloc>
c00185f4:	83 c4 10             	add    esp,0x10
c00185f7:	89 c3                	mov    ebx,eax
c00185f9:	83 ec 0c             	sub    esp,0xc
c00185fc:	53                   	push   ebx
c00185fd:	e8 dc a2 00 00       	call   c00228de <PCI::PCI()>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001860d:	83 ec 08             	sub    esp,0x8
c0018610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018614:	50                   	push   eax
c0018615:	e8 6a bd ff ff       	call   c0014384 <Device::addChild(Device*)>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018621:	8b 00                	mov    eax,DWORD PTR [eax]
c0018623:	83 c0 08             	add    eax,0x8
c0018626:	8b 00                	mov    eax,DWORD PTR [eax]
c0018628:	6a 00                	push   0x0
c001862a:	6a 00                	push   0x0
c001862c:	6a 00                	push   0x0
c001862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018632:	ff d0                	call   eax
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	83 ec 0c             	sub    esp,0xc
c001863a:	68 5d b4 02 c0       	push   0xc002b45d
c001863f:	e8 1a a9 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018644:	83 c4 10             	add    esp,0x10
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	68 68 b4 02 c0       	push   0xc002b468
c001864f:	e8 81 46 00 00       	call   c001ccd5 <Thr::loadKernelSymbolTable(char const*)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c001865d:	83 ec 08             	sub    esp,0x8
c0018660:	6a 01                	push   0x1
c0018662:	68 86 b4 02 c0       	push   0xc002b486
c0018667:	e8 c6 50 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c001866c:	83 c4 10             	add    esp,0x10
c001866f:	83 ec 08             	sub    esp,0x8
c0018672:	53                   	push   ebx
c0018673:	50                   	push   eax
c0018674:	e8 ed 52 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c0018679:	83 c4 10             	add    esp,0x10
c001867c:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018682:	83 ec 08             	sub    esp,0x8
c0018685:	6a 01                	push   0x1
c0018687:	68 a3 b4 02 c0       	push   0xc002b4a3
c001868c:	e8 a1 50 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c0018691:	83 c4 10             	add    esp,0x10
c0018694:	83 ec 08             	sub    esp,0x8
c0018697:	53                   	push   ebx
c0018698:	50                   	push   eax
c0018699:	e8 c8 52 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00186a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186ac:	83 e0 04             	and    eax,0x4
c00186af:	84 c0                	test   al,al
c00186b1:	0f 84 d2 00 00 00    	je     c0018789 <ACPI::open(int, int, void*)+0x33b>
c00186b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186be:	83 ec 0c             	sub    esp,0xc
c00186c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186c5:	e8 79 71 ff ff       	call   c000f843 <malloc>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	89 c3                	mov    ebx,eax
c00186cf:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00186d4:	83 ec 04             	sub    esp,0x4
c00186d7:	50                   	push   eax
c00186d8:	68 c0 b4 02 c0       	push   0xc002b4c0
c00186dd:	53                   	push   ebx
c00186de:	e8 d3 ad ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186ef:	74 17                	je     c0018708 <ACPI::open(int, int, void*)+0x2ba>
c00186f1:	83 ec 0c             	sub    esp,0xc
c00186f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186f8:	e8 8b b0 ff ff       	call   c0013788 <File::exists()>
c00186fd:	83 c4 10             	add    esp,0x10
c0018700:	84 c0                	test   al,al
c0018702:	74 04                	je     c0018708 <ACPI::open(int, int, void*)+0x2ba>
c0018704:	b0 01                	mov    al,0x1
c0018706:	eb 02                	jmp    c001870a <ACPI::open(int, int, void*)+0x2bc>
c0018708:	b0 00                	mov    al,0x0
c001870a:	84 c0                	test   al,al
c001870c:	74 22                	je     c0018730 <ACPI::open(int, int, void*)+0x2e2>
c001870e:	83 ec 08             	sub    esp,0x8
c0018711:	6a 01                	push   0x1
c0018713:	68 c0 b4 02 c0       	push   0xc002b4c0
c0018718:	e8 15 50 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	83 ec 08             	sub    esp,0x8
c0018723:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018727:	50                   	push   eax
c0018728:	e8 39 52 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018735:	74 1e                	je     c0018755 <ACPI::open(int, int, void*)+0x307>
c0018737:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001873c:	74 17                	je     c0018755 <ACPI::open(int, int, void*)+0x307>
c001873e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018742:	8b 00                	mov    eax,DWORD PTR [eax]
c0018744:	83 c0 08             	add    eax,0x8
c0018747:	8b 00                	mov    eax,DWORD PTR [eax]
c0018749:	83 ec 0c             	sub    esp,0xc
c001874c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018750:	ff d0                	call   eax
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c001875a:	83 ec 08             	sub    esp,0x8
c001875d:	68 dd b4 02 c0       	push   0xc002b4dd
c0018762:	50                   	push   eax
c0018763:	e8 64 f5 ff ff       	call   c0017ccc <findDataTable(unsigned char*, char*)>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018774:	74 13                	je     c0018789 <ACPI::open(int, int, void*)+0x33b>
c0018776:	83 ec 08             	sub    esp,0x8
c0018779:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001877d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018781:	e8 80 fc ff ff       	call   c0018406 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	b8 00 00 00 00       	mov    eax,0x0
c001878e:	83 c4 28             	add    esp,0x28
c0018791:	5b                   	pop    ebx
c0018792:	c3                   	ret    
c0018793:	90                   	nop

c0018794 <ACPI::sleep()>:
c0018794:	83 ec 0c             	sub    esp,0xc
c0018797:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001879c:	85 c0                	test   eax,eax
c001879e:	74 07                	je     c00187a7 <ACPI::sleep()+0x13>
c00187a0:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c00187a5:	ff d0                	call   eax
c00187a7:	90                   	nop
c00187a8:	83 c4 0c             	add    esp,0xc
c00187ab:	c3                   	ret    

c00187ac <CPU::close(int, int, void*)>:
c00187ac:	31 c0                	xor    eax,eax
c00187ae:	c3                   	ret    
c00187af:	90                   	nop

c00187b0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187b0:	55                   	push   ebp
c00187b1:	57                   	push   edi
c00187b2:	56                   	push   esi
c00187b3:	53                   	push   ebx
c00187b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187bc:	89 ce                	mov    esi,ecx
c00187be:	89 d5                	mov    ebp,edx
c00187c0:	80 f9 04             	cmp    cl,0x4
c00187c3:	75 28                	jne    c00187ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187c5:	8d 42 f9             	lea    eax,[edx-0x7]
c00187c8:	3c 03                	cmp    al,0x3
c00187ca:	0f 86 63 01 00 00    	jbe    c0018933 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187d0:	80 fa 03             	cmp    dl,0x3
c00187d3:	0f 84 5a 01 00 00    	je     c0018933 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187d9:	8d 7a f2             	lea    edi,[edx-0xe]
c00187dc:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00187e1:	89 fb                	mov    ebx,edi
c00187e3:	80 fb 01             	cmp    bl,0x1
c00187e6:	77 4e                	ja     c0018836 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187e8:	e9 52 01 00 00       	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ed:	80 f9 05             	cmp    cl,0x5
c00187f0:	75 4d                	jne    c001883f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187f2:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00187f7:	80 fa 03             	cmp    dl,0x3
c00187fa:	0f 86 3f 01 00 00    	jbe    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018800:	8d 7a fa             	lea    edi,[edx-0x6]
c0018803:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018808:	89 fb                	mov    ebx,edi
c001880a:	80 fb 01             	cmp    bl,0x1
c001880d:	0f 86 2c 01 00 00    	jbe    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018813:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018818:	80 fa 08             	cmp    dl,0x8
c001881b:	0f 84 1e 01 00 00    	je     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018821:	89 d7                	mov    edi,edx
c0018823:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018828:	83 e7 fb             	and    edi,0xfffffffb
c001882b:	89 fb                	mov    ebx,edi
c001882d:	80 fb 09             	cmp    bl,0x9
c0018830:	0f 84 09 01 00 00    	je     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018836:	31 c0                	xor    eax,eax
c0018838:	89 eb                	mov    ebx,ebp
c001883a:	0f b6 fb             	movzx  edi,bl
c001883d:	eb 30                	jmp    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001883f:	31 c0                	xor    eax,eax
c0018841:	80 f9 06             	cmp    cl,0x6
c0018844:	75 f2                	jne    c0018838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018846:	80 fa 0a             	cmp    dl,0xa
c0018849:	77 ed                	ja     c0018838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001884b:	bf de 05 00 00       	mov    edi,0x5de
c0018850:	0f a3 d7             	bt     edi,edx
c0018853:	73 e3                	jae    c0018838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018855:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001885a:	e9 e0 00 00 00       	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885f:	39 c7                	cmp    edi,eax
c0018861:	0f 84 d3 00 00 00    	je     c001893a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018867:	40                   	inc    eax
c0018868:	3d d0 00 00 00       	cmp    eax,0xd0
c001886d:	74 09                	je     c0018878 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001886f:	89 f3                	mov    ebx,esi
c0018871:	80 fb 0f             	cmp    bl,0xf
c0018874:	75 f1                	jne    c0018867 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018876:	eb e7                	jmp    c001885f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018878:	80 f9 10             	cmp    cl,0x10
c001887b:	75 14                	jne    c0018891 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001887d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018880:	83 e0 fb             	and    eax,0xfffffffb
c0018883:	3c 02                	cmp    al,0x2
c0018885:	76 34                	jbe    c00188bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018887:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c001888c:	80 fa 02             	cmp    dl,0x2
c001888f:	eb 24                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018891:	80 f9 11             	cmp    cl,0x11
c0018894:	75 13                	jne    c00188a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018896:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c001889b:	80 fa 03             	cmp    dl,0x3
c001889e:	0f 85 9b 00 00 00    	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a4:	e9 91 00 00 00       	jmp    c001893a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188a9:	80 f9 12             	cmp    cl,0x12
c00188ac:	75 14                	jne    c00188c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188ae:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c00188b3:	fe ca                	dec    dl
c00188b5:	0f 85 84 00 00 00    	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bb:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00188c0:	eb 7d                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c2:	80 f9 14             	cmp    cl,0x14
c00188c5:	75 12                	jne    c00188d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188c7:	4a                   	dec    edx
c00188c8:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c00188cd:	80 fa 01             	cmp    dl,0x1
c00188d0:	77 6d                	ja     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d2:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00188d7:	eb 66                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d9:	80 f9 15             	cmp    cl,0x15
c00188dc:	75 31                	jne    c001890f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188de:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00188e3:	80 fa 01             	cmp    dl,0x1
c00188e6:	74 57                	je     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e8:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c00188ed:	80 fa 13             	cmp    dl,0x13
c00188f0:	76 0c                	jbe    c00188fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188f2:	80 fa 30             	cmp    dl,0x30
c00188f5:	75 48                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f7:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00188fc:	eb 41                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fe:	b9 04 00 09 00       	mov    ecx,0x90004
c0018903:	0f a3 d1             	bt     ecx,edx
c0018906:	73 37                	jae    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018908:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c001890d:	eb 30                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890f:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c0018914:	80 f9 16             	cmp    cl,0x16
c0018917:	75 26                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018919:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001891e:	84 d2                	test   dl,dl
c0018920:	74 1d                	je     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018922:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c0018927:	80 fa 30             	cmp    dl,0x30
c001892a:	75 13                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892c:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018931:	eb 0c                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018933:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018938:	eb 05                	jmp    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893a:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001893f:	5b                   	pop    ebx
c0018940:	5e                   	pop    esi
c0018941:	5f                   	pop    edi
c0018942:	5d                   	pop    ebp
c0018943:	c3                   	ret    

c0018944 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018944:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001894c:	80 f9 04             	cmp    cl,0x4
c001894f:	75 6b                	jne    c00189bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018951:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018956:	80 fa 01             	cmp    dl,0x1
c0018959:	0f 86 92 02 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895f:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018964:	80 fa 02             	cmp    dl,0x2
c0018967:	0f 84 84 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896d:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018972:	80 fa 03             	cmp    dl,0x3
c0018975:	0f 84 76 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897b:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018980:	80 fa 04             	cmp    dl,0x4
c0018983:	0f 84 68 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018989:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c001898e:	80 fa 05             	cmp    dl,0x5
c0018991:	0f 84 5a 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018997:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c001899c:	80 fa 07             	cmp    dl,0x7
c001899f:	0f 84 4c 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a5:	83 ea 08             	sub    edx,0x8
c00189a8:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c00189ad:	80 fa 01             	cmp    dl,0x1
c00189b0:	0f 87 3b 02 00 00    	ja     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b6:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00189bb:	c3                   	ret    
c00189bc:	80 f9 05             	cmp    cl,0x5
c00189bf:	75 45                	jne    c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189c1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189c4:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00189c9:	80 f9 02             	cmp    cl,0x2
c00189cc:	0f 86 1f 02 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d2:	80 fa 04             	cmp    dl,0x4
c00189d5:	0f 84 f3 01 00 00    	je     c0018bce <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189db:	80 fa 07             	cmp    dl,0x7
c00189de:	0f 84 0d 02 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e4:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189e9:	80 fa 08             	cmp    dl,0x8
c00189ec:	0f 84 ff 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f2:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c00189f7:	80 fa 09             	cmp    dl,0x9
c00189fa:	0f 85 f1 01 00 00    	jne    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a00:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a05:	c3                   	ret    
c0018a06:	80 f9 06             	cmp    cl,0x6
c0018a09:	0f 85 85 01 00 00    	jne    c0018b94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a0f:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018a14:	80 fa 01             	cmp    dl,0x1
c0018a17:	0f 84 d4 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a20:	3c 01                	cmp    al,0x1
c0018a22:	0f 86 ac 01 00 00    	jbe    c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a28:	80 fa 03             	cmp    dl,0x3
c0018a2b:	0f 84 a3 01 00 00    	je     c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a31:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a34:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a39:	80 f9 01             	cmp    cl,0x1
c0018a3c:	0f 86 af 01 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a42:	80 fa 09             	cmp    dl,0x9
c0018a45:	0f 84 8f 01 00 00    	je     c0018bda <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a4b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a4e:	80 f9 01             	cmp    cl,0x1
c0018a51:	0f 86 9a 01 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a57:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a5c:	80 fa 0d             	cmp    dl,0xd
c0018a5f:	0f 84 8c 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a6a:	80 fa 0e             	cmp    dl,0xe
c0018a6d:	0f 84 7e 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a73:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a78:	80 fa 0f             	cmp    dl,0xf
c0018a7b:	0f 84 70 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a81:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a86:	80 fa 15             	cmp    dl,0x15
c0018a89:	0f 84 62 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a92:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a97:	80 f9 01             	cmp    cl,0x1
c0018a9a:	0f 86 51 01 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa0:	80 fa 1a             	cmp    dl,0x1a
c0018aa3:	0f 84 37 01 00 00    	je     c0018be0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018aa9:	80 fa 1c             	cmp    dl,0x1c
c0018aac:	0f 84 34 01 00 00    	je     c0018be6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ab2:	80 fa 1d             	cmp    dl,0x1d
c0018ab5:	0f 84 36 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018ac0:	80 fa 25             	cmp    dl,0x25
c0018ac3:	0f 84 28 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac9:	8d 4a da             	lea    ecx,[edx-0x26]
c0018acc:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ad1:	80 f9 01             	cmp    cl,0x1
c0018ad4:	0f 86 17 01 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ada:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018adf:	80 fa 2a             	cmp    dl,0x2a
c0018ae2:	0f 84 09 01 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018aed:	80 fa 2c             	cmp    dl,0x2c
c0018af0:	0f 84 fb 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af6:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018afb:	80 fa 2d             	cmp    dl,0x2d
c0018afe:	0f 84 ed 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b04:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b09:	80 fa 2e             	cmp    dl,0x2e
c0018b0c:	0f 84 df 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b12:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b17:	80 fa 2f             	cmp    dl,0x2f
c0018b1a:	0f 84 d1 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b20:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b23:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018b28:	80 f9 01             	cmp    cl,0x1
c0018b2b:	0f 86 c0 00 00 00    	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b31:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b36:	80 fa 37             	cmp    dl,0x37
c0018b39:	0f 84 b2 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3f:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b44:	80 fa 3a             	cmp    dl,0x3a
c0018b47:	0f 84 a4 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b52:	80 fa 3c             	cmp    dl,0x3c
c0018b55:	0f 84 96 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5b:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018b60:	80 fa 3d             	cmp    dl,0x3d
c0018b63:	0f 84 88 00 00 00    	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b69:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b6e:	80 fa 3e             	cmp    dl,0x3e
c0018b71:	74 7e                	je     c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b73:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b76:	3c 01                	cmp    al,0x1
c0018b78:	76 72                	jbe    c0018bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b7a:	80 fa 3f             	cmp    dl,0x3f
c0018b7d:	74 6d                	je     c0018bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b7f:	80 fa 4a             	cmp    dl,0x4a
c0018b82:	74 0a                	je     c0018b8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b84:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c0018b89:	80 fa 4d             	cmp    dl,0x4d
c0018b8c:	75 63                	jne    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8e:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b93:	c3                   	ret    
c0018b94:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c0018b99:	80 f9 0b             	cmp    cl,0xb
c0018b9c:	75 0a                	jne    c0018ba8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b9e:	fe ca                	dec    dl
c0018ba0:	75 4f                	jne    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba2:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018ba7:	c3                   	ret    
c0018ba8:	80 f9 0f             	cmp    cl,0xf
c0018bab:	75 44                	jne    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bad:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018bb2:	80 fa 02             	cmp    dl,0x2
c0018bb5:	76 3a                	jbe    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb7:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bba:	3c 01                	cmp    al,0x1
c0018bbc:	76 0a                	jbe    c0018bc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bbe:	b8 c2 b8 02 c0       	mov    eax,0xc002b8c2
c0018bc3:	80 fa 06             	cmp    dl,0x6
c0018bc6:	75 29                	jne    c0018bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc8:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018bcd:	c3                   	ret    
c0018bce:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018bd3:	c3                   	ret    
c0018bd4:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018bd9:	c3                   	ret    
c0018bda:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018bdf:	c3                   	ret    
c0018be0:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018be5:	c3                   	ret    
c0018be6:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018beb:	c3                   	ret    
c0018bec:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018bf1:	c3                   	ret    

c0018bf2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bf2:	60                   	pusha  
c0018bf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bff:	9c                   	pushf  
c0018c00:	fa                   	cli    
c0018c01:	0f 09                	wbinvd 
c0018c03:	0f 30                	wrmsr  
c0018c05:	9d                   	popf   
c0018c06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c0a:	89 02                	mov    DWORD PTR [edx],eax
c0018c0c:	61                   	popa   
c0018c0d:	c3                   	ret    

c0018c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c0e:	60                   	pusha  
c0018c0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c13:	9c                   	pushf  
c0018c14:	fa                   	cli    
c0018c15:	0f 09                	wbinvd 
c0018c17:	31 c0                	xor    eax,eax
c0018c19:	31 d2                	xor    edx,edx
c0018c1b:	0f 32                	rdmsr  
c0018c1d:	9d                   	popf   
c0018c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c22:	89 02                	mov    DWORD PTR [edx],eax
c0018c24:	61                   	popa   
c0018c25:	c3                   	ret    

c0018c26 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	83 ec 10             	sub    esp,0x10
c0018c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c2f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c34:	75 5d                	jne    c0018c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c36:	83 f8 08             	cmp    eax,0x8
c0018c39:	75 09                	jne    c0018c44 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c3b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c40:	7e 13                	jle    c0018c55 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c42:	eb 30                	jmp    c0018c74 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c44:	83 f8 06             	cmp    eax,0x6
c0018c47:	7c 4a                	jl     c0018c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c49:	83 f8 07             	cmp    eax,0x7
c0018c4c:	7e 07                	jle    c0018c55 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c4e:	83 f8 09             	cmp    eax,0x9
c0018c51:	74 21                	je     c0018c74 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c53:	eb 3e                	jmp    c0018c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c55:	89 e6                	mov    esi,esp
c0018c57:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0018c5d:	56                   	push   esi
c0018c5e:	c1 eb 15             	shr    ebx,0x15
c0018c61:	68 82 00 00 c0       	push   0xc0000082
c0018c66:	83 e3 7e             	and    ebx,0x7e
c0018c69:	e8 a0 ff ff ff       	call   c0018c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c6e:	56                   	push   esi
c0018c6f:	6a 00                	push   0x0
c0018c71:	53                   	push   ebx
c0018c72:	eb 12                	jmp    c0018c86 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c74:	89 e3                	mov    ebx,esp
c0018c76:	53                   	push   ebx
c0018c77:	68 82 00 00 c0       	push   0xc0000082
c0018c7c:	e8 8d ff ff ff       	call   c0018c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c81:	53                   	push   ebx
c0018c82:	6a 00                	push   0x0
c0018c84:	6a 00                	push   0x0
c0018c86:	68 82 00 00 c0       	push   0xc0000082
c0018c8b:	e8 62 ff ff ff       	call   c0018bf2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c90:	83 c4 18             	add    esp,0x18
c0018c93:	83 c4 10             	add    esp,0x10
c0018c96:	5b                   	pop    ebx
c0018c97:	5e                   	pop    esi
c0018c98:	c3                   	ret    
c0018c99:	90                   	nop

c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c9a:	55                   	push   ebp
c0018c9b:	57                   	push   edi
c0018c9c:	56                   	push   esi
c0018c9d:	53                   	push   ebx
c0018c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ca2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ca6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018caa:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cae:	39 05 e0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8e0,eax
c0018cb4:	75 23                	jne    c0018cd9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cb6:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0018cbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cbf:	89 06                	mov    DWORD PTR [esi],eax
c0018cc1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0018cc6:	89 07                	mov    DWORD PTR [edi],eax
c0018cc8:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c0018ccd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cd0:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c0018cd5:	89 02                	mov    DWORD PTR [edx],eax
c0018cd7:	eb 3f                	jmp    c0018d18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cd9:	31 c9                	xor    ecx,ecx
c0018cdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cdf:	0f a2                	cpuid  
c0018ce1:	89 06                	mov    DWORD PTR [esi],eax
c0018ce3:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ce5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ce9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cec:	89 10                	mov    DWORD PTR [eax],edx
c0018cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cf2:	a3 e0 d8 02 c0       	mov    ds:0xc002d8e0,eax
c0018cf7:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cf9:	a3 2c 0f 03 c0       	mov    ds:0xc0030f2c,eax
c0018cfe:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d00:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0018d05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d08:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c0018d0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d13:	a3 20 0f 03 c0       	mov    ds:0xc0030f20,eax
c0018d18:	5b                   	pop    ebx
c0018d19:	5e                   	pop    esi
c0018d1a:	5f                   	pop    edi
c0018d1b:	5d                   	pop    ebp
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop

c0018d1e <CPU::cpuidCheckEDX(unsigned int)>:
c0018d1e:	83 ec 10             	sub    esp,0x10
c0018d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d25:	50                   	push   eax
c0018d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2a:	50                   	push   eax
c0018d2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2f:	50                   	push   eax
c0018d30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d34:	50                   	push   eax
c0018d35:	6a 01                	push   0x1
c0018d37:	e8 5e ff ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d40:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d44:	0f 95 c0             	setne  al
c0018d47:	83 c4 24             	add    esp,0x24
c0018d4a:	c3                   	ret    
c0018d4b:	90                   	nop

c0018d4c <CPU::cpuidCheckECX(unsigned int)>:
c0018d4c:	83 ec 10             	sub    esp,0x10
c0018d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d53:	50                   	push   eax
c0018d54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d58:	50                   	push   eax
c0018d59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5d:	50                   	push   eax
c0018d5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d62:	50                   	push   eax
c0018d63:	6a 01                	push   0x1
c0018d65:	e8 30 ff ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d6e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d72:	0f 95 c0             	setne  al
c0018d75:	83 c4 24             	add    esp,0x24
c0018d78:	c3                   	ret    
c0018d79:	90                   	nop

c0018d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d7a:	83 ec 10             	sub    esp,0x10
c0018d7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d81:	50                   	push   eax
c0018d82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d86:	50                   	push   eax
c0018d87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8b:	50                   	push   eax
c0018d8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d90:	50                   	push   eax
c0018d91:	6a 07                	push   0x7
c0018d93:	e8 02 ff ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d9c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018da0:	0f 95 c0             	setne  al
c0018da3:	83 c4 24             	add    esp,0x24
c0018da6:	c3                   	ret    
c0018da7:	90                   	nop

c0018da8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018da8:	83 ec 10             	sub    esp,0x10
c0018dab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daf:	50                   	push   eax
c0018db0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db4:	50                   	push   eax
c0018db5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db9:	50                   	push   eax
c0018dba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbe:	50                   	push   eax
c0018dbf:	6a 07                	push   0x7
c0018dc1:	e8 d4 fe ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dce:	0f 95 c0             	setne  al
c0018dd1:	83 c4 24             	add    esp,0x24
c0018dd4:	c3                   	ret    
c0018dd5:	90                   	nop

c0018dd6 <CPU::CPU()>:
c0018dd6:	83 ec 0c             	sub    esp,0xc
c0018dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ddd:	83 ec 08             	sub    esp,0x8
c0018de0:	68 c2 b8 02 c0       	push   0xc002b8c2
c0018de5:	50                   	push   eax
c0018de6:	e8 89 b7 ff ff       	call   c0014574 <Device::Device(char const*)>
c0018deb:	83 c4 10             	add    esp,0x10
c0018dee:	ba 9c b9 02 c0       	mov    edx,0xc002b99c
c0018df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df7:	89 10                	mov    DWORD PTR [eax],edx
c0018df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dfd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0b:	05 78 01 00 00       	add    eax,0x178
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	50                   	push   eax
c0018e14:	e8 3f 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e19:	83 c4 10             	add    esp,0x10
c0018e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e20:	05 7c 09 00 00       	add    eax,0x97c
c0018e25:	83 ec 0c             	sub    esp,0xc
c0018e28:	50                   	push   eax
c0018e29:	e8 8c 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e35:	05 7c 11 00 00       	add    eax,0x117c
c0018e3a:	83 ec 0c             	sub    esp,0xc
c0018e3d:	50                   	push   eax
c0018e3e:	e8 93 86 ff ff       	call   c00114d6 <TSS::TSS()>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e4a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e55:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e5f:	90                   	nop
c0018e60:	83 c4 0c             	add    esp,0xc
c0018e63:	c3                   	ret    

c0018e64 <CPU::displayFeatures()>:
c0018e64:	53                   	push   ebx
c0018e65:	83 ec 10             	sub    esp,0x10
c0018e68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e6c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e72:	68 d0 b5 02 c0       	push   0xc002b5d0
c0018e77:	e8 e2 a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018e7c:	59                   	pop    ecx
c0018e7d:	58                   	pop    eax
c0018e7e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e84:	50                   	push   eax
c0018e85:	68 e1 b5 02 c0       	push   0xc002b5e1
c0018e8a:	e8 cf a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018e8f:	58                   	pop    eax
c0018e90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e96:	5a                   	pop    edx
c0018e97:	c1 e8 0e             	shr    eax,0xe
c0018e9a:	0f b6 c0             	movzx  eax,al
c0018e9d:	50                   	push   eax
c0018e9e:	68 f2 b5 02 c0       	push   0xc002b5f2
c0018ea3:	e8 b6 a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018ea8:	59                   	pop    ecx
c0018ea9:	58                   	pop    eax
c0018eaa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb0:	66 c1 e8 06          	shr    ax,0x6
c0018eb4:	0f b6 c0             	movzx  eax,al
c0018eb7:	50                   	push   eax
c0018eb8:	68 03 b6 02 c0       	push   0xc002b603
c0018ebd:	e8 9c a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018ec2:	c7 04 24 b0 ba 02 c0 	mov    DWORD PTR [esp],0xc002bab0
c0018ec9:	e8 90 a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018ece:	83 c4 10             	add    esp,0x10
c0018ed1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ed6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018edd:	74 05                	je     c0018ee4 <CPU::displayFeatures()+0x80>
c0018edf:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ee4:	52                   	push   edx
c0018ee5:	52                   	push   edx
c0018ee6:	50                   	push   eax
c0018ee7:	68 14 b6 02 c0       	push   0xc002b614
c0018eec:	e8 6d a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ef9:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f00:	78 05                	js     c0018f07 <CPU::displayFeatures()+0xa3>
c0018f02:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f07:	51                   	push   ecx
c0018f08:	51                   	push   ecx
c0018f09:	50                   	push   eax
c0018f0a:	68 2b b6 02 c0       	push   0xc002b62b
c0018f0f:	e8 4a a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f1c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f23:	75 05                	jne    c0018f2a <CPU::displayFeatures()+0xc6>
c0018f25:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f2a:	52                   	push   edx
c0018f2b:	52                   	push   edx
c0018f2c:	50                   	push   eax
c0018f2d:	68 42 b6 02 c0       	push   0xc002b642
c0018f32:	e8 27 a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f3f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f46:	75 05                	jne    c0018f4d <CPU::displayFeatures()+0xe9>
c0018f48:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f4d:	51                   	push   ecx
c0018f4e:	51                   	push   ecx
c0018f4f:	50                   	push   eax
c0018f50:	68 59 b6 02 c0       	push   0xc002b659
c0018f55:	e8 04 a0 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f62:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f69:	75 05                	jne    c0018f70 <CPU::displayFeatures()+0x10c>
c0018f6b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f70:	52                   	push   edx
c0018f71:	52                   	push   edx
c0018f72:	50                   	push   eax
c0018f73:	68 70 b6 02 c0       	push   0xc002b670
c0018f78:	e8 e1 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f85:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f8c:	75 05                	jne    c0018f93 <CPU::displayFeatures()+0x12f>
c0018f8e:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f93:	51                   	push   ecx
c0018f94:	51                   	push   ecx
c0018f95:	50                   	push   eax
c0018f96:	68 87 b6 02 c0       	push   0xc002b687
c0018f9b:	e8 be 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fa8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018faf:	75 05                	jne    c0018fb6 <CPU::displayFeatures()+0x152>
c0018fb1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fb6:	52                   	push   edx
c0018fb7:	52                   	push   edx
c0018fb8:	50                   	push   eax
c0018fb9:	68 9e b6 02 c0       	push   0xc002b69e
c0018fbe:	e8 9b 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fcb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fd2:	75 05                	jne    c0018fd9 <CPU::displayFeatures()+0x175>
c0018fd4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fd9:	51                   	push   ecx
c0018fda:	51                   	push   ecx
c0018fdb:	50                   	push   eax
c0018fdc:	68 b5 b6 02 c0       	push   0xc002b6b5
c0018fe1:	e8 78 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fee:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ff5:	75 05                	jne    c0018ffc <CPU::displayFeatures()+0x198>
c0018ff7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ffc:	52                   	push   edx
c0018ffd:	52                   	push   edx
c0018ffe:	50                   	push   eax
c0018fff:	68 cc b6 02 c0       	push   0xc002b6cc
c0019004:	e8 55 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019011:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019018:	75 05                	jne    c001901f <CPU::displayFeatures()+0x1bb>
c001901a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001901f:	51                   	push   ecx
c0019020:	51                   	push   ecx
c0019021:	50                   	push   eax
c0019022:	68 e3 b6 02 c0       	push   0xc002b6e3
c0019027:	e8 32 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019034:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001903b:	75 05                	jne    c0019042 <CPU::displayFeatures()+0x1de>
c001903d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019042:	52                   	push   edx
c0019043:	52                   	push   edx
c0019044:	50                   	push   eax
c0019045:	68 fa b6 02 c0       	push   0xc002b6fa
c001904a:	e8 0f 9f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019057:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001905e:	75 05                	jne    c0019065 <CPU::displayFeatures()+0x201>
c0019060:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019065:	51                   	push   ecx
c0019066:	51                   	push   ecx
c0019067:	50                   	push   eax
c0019068:	68 11 b7 02 c0       	push   0xc002b711
c001906d:	e8 ec 9e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0019072:	83 c4 10             	add    esp,0x10
c0019075:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001907a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019081:	75 05                	jne    c0019088 <CPU::displayFeatures()+0x224>
c0019083:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019088:	52                   	push   edx
c0019089:	52                   	push   edx
c001908a:	50                   	push   eax
c001908b:	68 28 b7 02 c0       	push   0xc002b728
c0019090:	e8 c9 9e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001909d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190a4:	78 05                	js     c00190ab <CPU::displayFeatures()+0x247>
c00190a6:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c00190ab:	51                   	push   ecx
c00190ac:	51                   	push   ecx
c00190ad:	50                   	push   eax
c00190ae:	68 3f b7 02 c0       	push   0xc002b73f
c00190b3:	e8 a6 9e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c00190c0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190c7:	75 05                	jne    c00190ce <CPU::displayFeatures()+0x26a>
c00190c9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c00190ce:	52                   	push   edx
c00190cf:	52                   	push   edx
c00190d0:	50                   	push   eax
c00190d1:	68 56 b7 02 c0       	push   0xc002b756
c00190d6:	e8 83 9e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00190db:	83 c4 18             	add    esp,0x18
c00190de:	5b                   	pop    ebx
c00190df:	c3                   	ret    

c00190e0 <CPU::detectFeatures()>:
c00190e0:	55                   	push   ebp
c00190e1:	57                   	push   edi
c00190e2:	56                   	push   esi
c00190e3:	53                   	push   ebx
c00190e4:	83 ec 50             	sub    esp,0x50
c00190e7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190eb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190f5:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190fc:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019102:	6a 0d                	push   0xd
c0019104:	6a 00                	push   0x0
c0019106:	57                   	push   edi
c0019107:	e8 6c 76 fe ff       	call   c0000778 <memset>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0019114:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001911b:	0f 84 20 09 00 00    	je     c0019a41 <CPU::detectFeatures()+0x961>
c0019121:	83 ec 0c             	sub    esp,0xc
c0019124:	6a 10                	push   0x10
c0019126:	e8 f3 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c001912b:	83 e0 01             	and    eax,0x1
c001912e:	8d 14 00             	lea    edx,[eax+eax*1]
c0019131:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019137:	83 e0 fd             	and    eax,0xfffffffd
c001913a:	09 d0                	or     eax,edx
c001913c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019142:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019149:	e8 d0 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c001914e:	83 e0 01             	and    eax,0x1
c0019151:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019158:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915e:	83 e0 fb             	and    eax,0xfffffffb
c0019161:	09 d0                	or     eax,edx
c0019163:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019169:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019170:	e8 a9 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c0019175:	83 e0 01             	and    eax,0x1
c0019178:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001917f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019185:	83 e0 f7             	and    eax,0xfffffff7
c0019188:	09 d0                	or     eax,edx
c001918a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019190:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019197:	e8 82 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c001919c:	83 e0 01             	and    eax,0x1
c001919f:	c1 e0 04             	shl    eax,0x4
c00191a2:	88 c2                	mov    dl,al
c00191a4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191aa:	83 e0 ef             	and    eax,0xffffffef
c00191ad:	09 d0                	or     eax,edx
c00191af:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191bc:	e8 5d fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c00191c1:	83 e0 01             	and    eax,0x1
c00191c4:	c1 e0 05             	shl    eax,0x5
c00191c7:	88 c2                	mov    dl,al
c00191c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cf:	83 e0 df             	and    eax,0xffffffdf
c00191d2:	09 d0                	or     eax,edx
c00191d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191e1:	e8 38 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c00191e6:	83 e0 01             	and    eax,0x1
c00191e9:	8d 14 00             	lea    edx,[eax+eax*1]
c00191ec:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191f2:	83 e0 fd             	and    eax,0xfffffffd
c00191f5:	09 d0                	or     eax,edx
c00191f7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191fd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019204:	e8 15 fb ff ff       	call   c0018d1e <CPU::cpuidCheckEDX(unsigned int)>
c0019209:	83 e0 01             	and    eax,0x1
c001920c:	c1 e0 06             	shl    eax,0x6
c001920f:	88 c2                	mov    dl,al
c0019211:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019217:	83 e0 bf             	and    eax,0xffffffbf
c001921a:	09 d0                	or     eax,edx
c001921c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019222:	58                   	pop    eax
c0019223:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019227:	56                   	push   esi
c0019228:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001922c:	55                   	push   ebp
c001922d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019231:	50                   	push   eax
c0019232:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019236:	52                   	push   edx
c0019237:	6a 00                	push   0x0
c0019239:	e8 5c fa ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001923e:	83 c4 1c             	add    esp,0x1c
c0019241:	6a 04                	push   0x4
c0019243:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019247:	50                   	push   eax
c0019248:	57                   	push   edi
c0019249:	e8 f6 74 fe ff       	call   c0000744 <memcpy>
c001924e:	83 c4 0c             	add    esp,0xc
c0019251:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019257:	6a 04                	push   0x4
c0019259:	56                   	push   esi
c001925a:	50                   	push   eax
c001925b:	e8 e4 74 fe ff       	call   c0000744 <memcpy>
c0019260:	83 c4 0c             	add    esp,0xc
c0019263:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019269:	6a 04                	push   0x4
c001926b:	55                   	push   ebp
c001926c:	50                   	push   eax
c001926d:	e8 d2 74 fe ff       	call   c0000744 <memcpy>
c0019272:	58                   	pop    eax
c0019273:	5a                   	pop    edx
c0019274:	68 6d b7 02 c0       	push   0xc002b76d
c0019279:	57                   	push   edi
c001927a:	e8 41 76 fe ff       	call   c00008c0 <strcmp>
c001927f:	83 c4 10             	add    esp,0x10
c0019282:	85 c0                	test   eax,eax
c0019284:	75 0f                	jne    c0019295 <CPU::detectFeatures()+0x1b5>
c0019286:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019290:	e9 22 02 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c0019295:	50                   	push   eax
c0019296:	50                   	push   eax
c0019297:	68 7a b7 02 c0       	push   0xc002b77a
c001929c:	57                   	push   edi
c001929d:	e8 1e 76 fe ff       	call   c00008c0 <strcmp>
c00192a2:	83 c4 10             	add    esp,0x10
c00192a5:	85 c0                	test   eax,eax
c00192a7:	74 dd                	je     c0019286 <CPU::detectFeatures()+0x1a6>
c00192a9:	51                   	push   ecx
c00192aa:	51                   	push   ecx
c00192ab:	68 87 b7 02 c0       	push   0xc002b787
c00192b0:	57                   	push   edi
c00192b1:	e8 0a 76 fe ff       	call   c00008c0 <strcmp>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	85 c0                	test   eax,eax
c00192bb:	74 2a                	je     c00192e7 <CPU::detectFeatures()+0x207>
c00192bd:	52                   	push   edx
c00192be:	52                   	push   edx
c00192bf:	68 94 b7 02 c0       	push   0xc002b794
c00192c4:	57                   	push   edi
c00192c5:	e8 f6 75 fe ff       	call   c00008c0 <strcmp>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	85 c0                	test   eax,eax
c00192cf:	74 16                	je     c00192e7 <CPU::detectFeatures()+0x207>
c00192d1:	50                   	push   eax
c00192d2:	50                   	push   eax
c00192d3:	68 a1 b7 02 c0       	push   0xc002b7a1
c00192d8:	57                   	push   edi
c00192d9:	e8 e2 75 fe ff       	call   c00008c0 <strcmp>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	85 c0                	test   eax,eax
c00192e3:	74 48                	je     c001932d <CPU::detectFeatures()+0x24d>
c00192e5:	eb 0f                	jmp    c00192f6 <CPU::detectFeatures()+0x216>
c00192e7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192f1:	e9 c1 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c00192f6:	50                   	push   eax
c00192f7:	50                   	push   eax
c00192f8:	68 ae b7 02 c0       	push   0xc002b7ae
c00192fd:	57                   	push   edi
c00192fe:	e8 bd 75 fe ff       	call   c00008c0 <strcmp>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	85 c0                	test   eax,eax
c0019308:	74 23                	je     c001932d <CPU::detectFeatures()+0x24d>
c001930a:	50                   	push   eax
c001930b:	50                   	push   eax
c001930c:	68 bb b7 02 c0       	push   0xc002b7bb
c0019311:	57                   	push   edi
c0019312:	e8 a9 75 fe ff       	call   c00008c0 <strcmp>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	85 c0                	test   eax,eax
c001931c:	75 1e                	jne    c001933c <CPU::detectFeatures()+0x25c>
c001931e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019328:	e9 8a 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c001932d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019337:	e9 7b 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c001933c:	50                   	push   eax
c001933d:	50                   	push   eax
c001933e:	68 c8 b7 02 c0       	push   0xc002b7c8
c0019343:	57                   	push   edi
c0019344:	e8 77 75 fe ff       	call   c00008c0 <strcmp>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	85 c0                	test   eax,eax
c001934e:	75 0f                	jne    c001935f <CPU::detectFeatures()+0x27f>
c0019350:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001935a:	e9 58 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c001935f:	50                   	push   eax
c0019360:	50                   	push   eax
c0019361:	68 87 b7 02 c0       	push   0xc002b787
c0019366:	57                   	push   edi
c0019367:	e8 54 75 fe ff       	call   c00008c0 <strcmp>
c001936c:	83 c4 10             	add    esp,0x10
c001936f:	85 c0                	test   eax,eax
c0019371:	75 0f                	jne    c0019382 <CPU::detectFeatures()+0x2a2>
c0019373:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001937d:	e9 35 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c0019382:	50                   	push   eax
c0019383:	50                   	push   eax
c0019384:	68 d5 b7 02 c0       	push   0xc002b7d5
c0019389:	57                   	push   edi
c001938a:	e8 31 75 fe ff       	call   c00008c0 <strcmp>
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	85 c0                	test   eax,eax
c0019394:	75 0f                	jne    c00193a5 <CPU::detectFeatures()+0x2c5>
c0019396:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193a0:	e9 12 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c00193a5:	51                   	push   ecx
c00193a6:	51                   	push   ecx
c00193a7:	68 e2 b7 02 c0       	push   0xc002b7e2
c00193ac:	57                   	push   edi
c00193ad:	e8 0e 75 fe ff       	call   c00008c0 <strcmp>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	85 c0                	test   eax,eax
c00193b7:	75 0f                	jne    c00193c8 <CPU::detectFeatures()+0x2e8>
c00193b9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193c3:	e9 ef 00 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c00193c8:	52                   	push   edx
c00193c9:	52                   	push   edx
c00193ca:	68 ef b7 02 c0       	push   0xc002b7ef
c00193cf:	57                   	push   edi
c00193d0:	e8 eb 74 fe ff       	call   c00008c0 <strcmp>
c00193d5:	83 c4 10             	add    esp,0x10
c00193d8:	85 c0                	test   eax,eax
c00193da:	75 0f                	jne    c00193eb <CPU::detectFeatures()+0x30b>
c00193dc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193e6:	e9 cc 00 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c00193eb:	50                   	push   eax
c00193ec:	50                   	push   eax
c00193ed:	68 fc b7 02 c0       	push   0xc002b7fc
c00193f2:	57                   	push   edi
c00193f3:	e8 c8 74 fe ff       	call   c00008c0 <strcmp>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	85 c0                	test   eax,eax
c00193fd:	75 0f                	jne    c001940e <CPU::detectFeatures()+0x32e>
c00193ff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019409:	e9 a9 00 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c001940e:	50                   	push   eax
c001940f:	50                   	push   eax
c0019410:	68 09 b8 02 c0       	push   0xc002b809
c0019415:	57                   	push   edi
c0019416:	e8 a5 74 fe ff       	call   c00008c0 <strcmp>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	85 c0                	test   eax,eax
c0019420:	75 0f                	jne    c0019431 <CPU::detectFeatures()+0x351>
c0019422:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001942c:	e9 86 00 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c0019431:	50                   	push   eax
c0019432:	50                   	push   eax
c0019433:	68 16 b8 02 c0       	push   0xc002b816
c0019438:	57                   	push   edi
c0019439:	e8 82 74 fe ff       	call   c00008c0 <strcmp>
c001943e:	83 c4 10             	add    esp,0x10
c0019441:	85 c0                	test   eax,eax
c0019443:	75 0c                	jne    c0019451 <CPU::detectFeatures()+0x371>
c0019445:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001944f:	eb 66                	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c0019451:	50                   	push   eax
c0019452:	50                   	push   eax
c0019453:	68 23 b8 02 c0       	push   0xc002b823
c0019458:	57                   	push   edi
c0019459:	e8 62 74 fe ff       	call   c00008c0 <strcmp>
c001945e:	83 c4 10             	add    esp,0x10
c0019461:	85 c0                	test   eax,eax
c0019463:	75 0c                	jne    c0019471 <CPU::detectFeatures()+0x391>
c0019465:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001946f:	eb 46                	jmp    c00194b7 <CPU::detectFeatures()+0x3d7>
c0019471:	50                   	push   eax
c0019472:	50                   	push   eax
c0019473:	68 30 b8 02 c0       	push   0xc002b830
c0019478:	57                   	push   edi
c0019479:	e8 42 74 fe ff       	call   c00008c0 <strcmp>
c001947e:	83 c4 10             	add    esp,0x10
c0019481:	85 c0                	test   eax,eax
c0019483:	74 e0                	je     c0019465 <CPU::detectFeatures()+0x385>
c0019485:	50                   	push   eax
c0019486:	50                   	push   eax
c0019487:	68 3d b8 02 c0       	push   0xc002b83d
c001948c:	57                   	push   edi
c001948d:	e8 2e 74 fe ff       	call   c00008c0 <strcmp>
c0019492:	83 c4 10             	add    esp,0x10
c0019495:	85 c0                	test   eax,eax
c0019497:	74 cc                	je     c0019465 <CPU::detectFeatures()+0x385>
c0019499:	51                   	push   ecx
c001949a:	51                   	push   ecx
c001949b:	68 4a b8 02 c0       	push   0xc002b84a
c00194a0:	57                   	push   edi
c00194a1:	e8 1a 74 fe ff       	call   c00008c0 <strcmp>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	85 c0                	test   eax,eax
c00194ab:	74 b8                	je     c0019465 <CPU::detectFeatures()+0x385>
c00194ad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194b7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194bc:	0f 86 be 00 00 00    	jbe    c0019580 <CPU::detectFeatures()+0x4a0>
c00194c2:	83 ec 0c             	sub    esp,0xc
c00194c5:	68 80 00 00 00       	push   0x80
c00194ca:	e8 ab f8 ff ff       	call   c0018d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194cf:	83 e0 01             	and    eax,0x1
c00194d2:	c1 e0 06             	shl    eax,0x6
c00194d5:	88 c2                	mov    dl,al
c00194d7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194dd:	83 e0 bf             	and    eax,0xffffffbf
c00194e0:	09 d0                	or     eax,edx
c00194e2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194e8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194ef:	e8 86 f8 ff ff       	call   c0018d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194f4:	83 e0 01             	and    eax,0x1
c00194f7:	c1 e0 04             	shl    eax,0x4
c00194fa:	88 c2                	mov    dl,al
c00194fc:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019502:	83 e0 ef             	and    eax,0xffffffef
c0019505:	09 d0                	or     eax,edx
c0019507:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001950d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019514:	e8 61 f8 ff ff       	call   c0018d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019519:	c1 e0 07             	shl    eax,0x7
c001951c:	88 c2                	mov    dl,al
c001951e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019524:	83 e0 7f             	and    eax,0x7f
c0019527:	09 d0                	or     eax,edx
c0019529:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001952f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019536:	e8 6d f8 ff ff       	call   c0018da8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001953b:	83 e0 01             	and    eax,0x1
c001953e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019545:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001954b:	83 e0 f7             	and    eax,0xfffffff7
c001954e:	09 d0                	or     eax,edx
c0019550:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019556:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001955d:	e8 46 f8 ff ff       	call   c0018da8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019562:	83 c4 10             	add    esp,0x10
c0019565:	83 e0 01             	and    eax,0x1
c0019568:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001956f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019575:	83 e0 fb             	and    eax,0xfffffffb
c0019578:	09 d0                	or     eax,edx
c001957a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	56                   	push   esi
c0019584:	55                   	push   ebp
c0019585:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019589:	57                   	push   edi
c001958a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001958e:	50                   	push   eax
c001958f:	6a 01                	push   0x1
c0019591:	e8 04 f7 ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019596:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001959a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195a0:	88 ca                	mov    dl,cl
c00195a2:	83 e0 f0             	and    eax,0xfffffff0
c00195a5:	83 e2 0f             	and    edx,0xf
c00195a8:	09 d0                	or     eax,edx
c00195aa:	88 ca                	mov    dl,cl
c00195ac:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195b2:	c0 ea 04             	shr    dl,0x4
c00195b5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195b9:	0f b6 c2             	movzx  eax,dl
c00195bc:	83 c4 20             	add    esp,0x20
c00195bf:	c1 e0 06             	shl    eax,0x6
c00195c2:	89 c5                	mov    ebp,eax
c00195c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ca:	66 25 3f c0          	and    ax,0xc03f
c00195ce:	09 e8                	or     eax,ebp
c00195d0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195d7:	89 c8                	mov    eax,ecx
c00195d9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195df:	c1 e8 08             	shr    eax,0x8
c00195e2:	83 e2 3f             	and    edx,0x3f
c00195e5:	83 e0 0f             	and    eax,0xf
c00195e8:	89 c5                	mov    ebp,eax
c00195ea:	c1 e5 06             	shl    ebp,0x6
c00195ed:	09 d5                	or     ebp,edx
c00195ef:	89 ea                	mov    edx,ebp
c00195f1:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195f7:	88 c2                	mov    dl,al
c00195f9:	c0 ea 02             	shr    dl,0x2
c00195fc:	89 d5                	mov    ebp,edx
c00195fe:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019604:	83 e2 c0             	and    edx,0xffffffc0
c0019607:	09 d5                	or     ebp,edx
c0019609:	89 ea                	mov    edx,ebp
c001960b:	89 cd                	mov    ebp,ecx
c001960d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019613:	c1 ed 0c             	shr    ebp,0xc
c0019616:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001961c:	83 e5 03             	and    ebp,0x3
c001961f:	83 e2 cf             	and    edx,0xffffffcf
c0019622:	c1 e5 04             	shl    ebp,0x4
c0019625:	09 d5                	or     ebp,edx
c0019627:	3c 06                	cmp    al,0x6
c0019629:	89 ea                	mov    edx,ebp
c001962b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019631:	74 04                	je     c0019637 <CPU::detectFeatures()+0x557>
c0019633:	3c 0f                	cmp    al,0xf
c0019635:	75 5c                	jne    c0019693 <CPU::detectFeatures()+0x5b3>
c0019637:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001963b:	89 cd                	mov    ebp,ecx
c001963d:	c1 ed 10             	shr    ebp,0x10
c0019640:	c1 e5 04             	shl    ebp,0x4
c0019643:	09 ea                	or     edx,ebp
c0019645:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001964b:	0f b6 d2             	movzx  edx,dl
c001964e:	66 81 e5 3f c0       	and    bp,0xc03f
c0019653:	c1 e2 06             	shl    edx,0x6
c0019656:	09 ea                	or     edx,ebp
c0019658:	3c 0f                	cmp    al,0xf
c001965a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019661:	75 30                	jne    c0019693 <CPU::detectFeatures()+0x5b3>
c0019663:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019669:	c1 e9 14             	shr    ecx,0x14
c001966c:	83 e0 3f             	and    eax,0x3f
c001966f:	83 c1 0f             	add    ecx,0xf
c0019672:	88 ca                	mov    dl,cl
c0019674:	c0 e9 02             	shr    cl,0x2
c0019677:	c1 e2 06             	shl    edx,0x6
c001967a:	09 d0                	or     eax,edx
c001967c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019682:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019688:	83 e0 c0             	and    eax,0xffffffc0
c001968b:	09 c1                	or     ecx,eax
c001968d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001969d:	56                   	push   esi
c001969e:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196a2:	50                   	push   eax
c00196a3:	57                   	push   edi
c00196a4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196a8:	55                   	push   ebp
c00196a9:	68 00 00 00 80       	push   0x80000000
c00196ae:	e8 e7 f5 ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196b3:	83 c4 20             	add    esp,0x20
c00196b6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196c2:	76 1e                	jbe    c00196e2 <CPU::detectFeatures()+0x602>
c00196c4:	83 ec 0c             	sub    esp,0xc
c00196c7:	56                   	push   esi
c00196c8:	50                   	push   eax
c00196c9:	57                   	push   edi
c00196ca:	55                   	push   ebp
c00196cb:	68 01 00 00 80       	push   0x80000001
c00196d0:	e8 c5 f5 ff ff       	call   c0018c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196df:	83 c4 20             	add    esp,0x20
c00196e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196e8:	83 f8 01             	cmp    eax,0x1
c00196eb:	75 6f                	jne    c001975c <CPU::detectFeatures()+0x67c>
c00196ed:	51                   	push   ecx
c00196ee:	51                   	push   ecx
c00196ef:	68 56 b8 02 c0       	push   0xc002b856
c00196f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196f8:	56                   	push   esi
c00196f9:	e8 36 71 fe ff       	call   c0000834 <strcpy>
c00196fe:	5f                   	pop    edi
c00196ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019705:	5d                   	pop    ebp
c0019706:	66 c1 e8 06          	shr    ax,0x6
c001970a:	0f b6 c0             	movzx  eax,al
c001970d:	50                   	push   eax
c001970e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019714:	c1 e8 0e             	shr    eax,0xe
c0019717:	0f b6 c0             	movzx  eax,al
c001971a:	50                   	push   eax
c001971b:	e8 24 f2 ff ff       	call   c0018944 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019720:	5a                   	pop    edx
c0019721:	59                   	pop    ecx
c0019722:	50                   	push   eax
c0019723:	56                   	push   esi
c0019724:	e8 4b 72 fe ff       	call   c0000974 <strcat>
c0019729:	5f                   	pop    edi
c001972a:	5d                   	pop    ebp
c001972b:	56                   	push   esi
c001972c:	53                   	push   ebx
c001972d:	e8 34 ae ff ff       	call   c0014566 <Device::setName(char const*)>
c0019732:	58                   	pop    eax
c0019733:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019739:	5a                   	pop    edx
c001973a:	68 5d b8 02 c0       	push   0xc002b85d
c001973f:	50                   	push   eax
c0019740:	e8 7b 71 fe ff       	call   c00008c0 <strcmp>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	85 c0                	test   eax,eax
c001974a:	0f 85 71 03 00 00    	jne    c0019ac1 <CPU::detectFeatures()+0x9e1>
c0019750:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019757:	e9 65 03 00 00       	jmp    c0019ac1 <CPU::detectFeatures()+0x9e1>
c001975c:	83 f8 02             	cmp    eax,0x2
c001975f:	0f 85 b5 00 00 00    	jne    c001981a <CPU::detectFeatures()+0x73a>
c0019765:	57                   	push   edi
c0019766:	57                   	push   edi
c0019767:	68 6f b8 02 c0       	push   0xc002b86f
c001976c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019770:	56                   	push   esi
c0019771:	e8 be 70 fe ff       	call   c0000834 <strcpy>
c0019776:	5d                   	pop    ebp
c0019777:	58                   	pop    eax
c0019778:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977e:	66 c1 e8 06          	shr    ax,0x6
c0019782:	0f b6 c0             	movzx  eax,al
c0019785:	50                   	push   eax
c0019786:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001978c:	c1 e8 0e             	shr    eax,0xe
c001978f:	0f b6 c0             	movzx  eax,al
c0019792:	50                   	push   eax
c0019793:	e8 18 f0 ff ff       	call   c00187b0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019798:	5a                   	pop    edx
c0019799:	59                   	pop    ecx
c001979a:	50                   	push   eax
c001979b:	56                   	push   esi
c001979c:	e8 d3 71 fe ff       	call   c0000974 <strcat>
c00197a1:	5f                   	pop    edi
c00197a2:	5d                   	pop    ebp
c00197a3:	56                   	push   esi
c00197a4:	53                   	push   ebx
c00197a5:	e8 bc ad ff ff       	call   c0014566 <Device::setName(char const*)>
c00197aa:	58                   	pop    eax
c00197ab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197b1:	5a                   	pop    edx
c00197b2:	68 74 b8 02 c0       	push   0xc002b874
c00197b7:	50                   	push   eax
c00197b8:	e8 03 71 fe ff       	call   c00008c0 <strcmp>
c00197bd:	83 c4 10             	add    esp,0x10
c00197c0:	85 c0                	test   eax,eax
c00197c2:	75 20                	jne    c00197e4 <CPU::detectFeatures()+0x704>
c00197c4:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c00197ca:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197d0:	a8 01                	test   al,0x1
c00197d2:	74 10                	je     c00197e4 <CPU::detectFeatures()+0x704>
c00197d4:	83 e0 fe             	and    eax,0xfffffffe
c00197d7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197dd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ea:	c1 e8 0e             	shr    eax,0xe
c00197ed:	3c 05                	cmp    al,0x5
c00197ef:	0f 85 cc 02 00 00    	jne    c0019ac1 <CPU::detectFeatures()+0x9e1>
c00197f5:	56                   	push   esi
c00197f6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197fc:	83 e0 0f             	and    eax,0xf
c00197ff:	50                   	push   eax
c0019800:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019806:	66 c1 e8 06          	shr    ax,0x6
c001980a:	0f b6 c0             	movzx  eax,al
c001980d:	50                   	push   eax
c001980e:	6a 05                	push   0x5
c0019810:	e8 11 f4 ff ff       	call   c0018c26 <CPU::AMD_K6_writeback(int, int, int)>
c0019815:	e9 1f 02 00 00       	jmp    c0019a39 <CPU::detectFeatures()+0x959>
c001981a:	8d 50 fd             	lea    edx,[eax-0x3]
c001981d:	83 fa 01             	cmp    edx,0x1
c0019820:	76 09                	jbe    c001982b <CPU::detectFeatures()+0x74b>
c0019822:	83 f8 06             	cmp    eax,0x6
c0019825:	0f 85 91 01 00 00    	jne    c00199bc <CPU::detectFeatures()+0x8dc>
c001982b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019831:	c1 ea 0e             	shr    edx,0xe
c0019834:	80 fa 05             	cmp    dl,0x5
c0019837:	75 7b                	jne    c00198b4 <CPU::detectFeatures()+0x7d4>
c0019839:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001983f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019844:	66 81 fa 00 01       	cmp    dx,0x100
c0019849:	75 0c                	jne    c0019857 <CPU::detectFeatures()+0x777>
c001984b:	51                   	push   ecx
c001984c:	51                   	push   ecx
c001984d:	68 7b b8 02 c0       	push   0xc002b87b
c0019852:	e9 dc 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019857:	66 81 fa 00 02       	cmp    dx,0x200
c001985c:	75 0c                	jne    c001986a <CPU::detectFeatures()+0x78a>
c001985e:	52                   	push   edx
c001985f:	52                   	push   edx
c0019860:	68 8e b8 02 c0       	push   0xc002b88e
c0019865:	e9 c9 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c001986a:	66 81 fa 40 02       	cmp    dx,0x240
c001986f:	75 0c                	jne    c001987d <CPU::detectFeatures()+0x79d>
c0019871:	50                   	push   eax
c0019872:	50                   	push   eax
c0019873:	68 a0 b8 02 c0       	push   0xc002b8a0
c0019878:	e9 b6 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c001987d:	83 f8 06             	cmp    eax,0x6
c0019880:	75 0c                	jne    c001988e <CPU::detectFeatures()+0x7ae>
c0019882:	50                   	push   eax
c0019883:	50                   	push   eax
c0019884:	68 b2 b8 02 c0       	push   0xc002b8b2
c0019889:	e9 a5 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c001988e:	83 f8 04             	cmp    eax,0x4
c0019891:	75 0c                	jne    c001989f <CPU::detectFeatures()+0x7bf>
c0019893:	50                   	push   eax
c0019894:	50                   	push   eax
c0019895:	68 be b8 02 c0       	push   0xc002b8be
c001989a:	e9 94 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c001989f:	83 f8 03             	cmp    eax,0x3
c00198a2:	0f 85 19 02 00 00    	jne    c0019ac1 <CPU::detectFeatures()+0x9e1>
c00198a8:	50                   	push   eax
c00198a9:	50                   	push   eax
c00198aa:	68 c6 b8 02 c0       	push   0xc002b8c6
c00198af:	e9 7f 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00198b4:	80 fa 06             	cmp    dl,0x6
c00198b7:	0f 85 db 00 00 00    	jne    c0019998 <CPU::detectFeatures()+0x8b8>
c00198bd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198c3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198c8:	66 81 fa 80 01       	cmp    dx,0x180
c00198cd:	75 0c                	jne    c00198db <CPU::detectFeatures()+0x7fb>
c00198cf:	50                   	push   eax
c00198d0:	50                   	push   eax
c00198d1:	68 d1 b8 02 c0       	push   0xc002b8d1
c00198d6:	e9 58 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00198db:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198e1:	66 f7 c1 80 ff       	test   cx,0xff80
c00198e6:	75 0c                	jne    c00198f4 <CPU::detectFeatures()+0x814>
c00198e8:	50                   	push   eax
c00198e9:	50                   	push   eax
c00198ea:	68 e1 b8 02 c0       	push   0xc002b8e1
c00198ef:	e9 3f 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00198f4:	66 81 fa 40 02       	cmp    dx,0x240
c00198f9:	75 0c                	jne    c0019907 <CPU::detectFeatures()+0x827>
c00198fb:	55                   	push   ebp
c00198fc:	55                   	push   ebp
c00198fd:	68 e8 b8 02 c0       	push   0xc002b8e8
c0019902:	e9 2c 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019907:	66 81 fa 80 02       	cmp    dx,0x280
c001990c:	75 0c                	jne    c001991a <CPU::detectFeatures()+0x83a>
c001990e:	57                   	push   edi
c001990f:	57                   	push   edi
c0019910:	68 f1 b8 02 c0       	push   0xc002b8f1
c0019915:	e9 19 01 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c001991a:	66 81 fa 40 03       	cmp    dx,0x340
c001991f:	74 ed                	je     c001990e <CPU::detectFeatures()+0x82e>
c0019921:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019926:	75 0c                	jne    c0019934 <CPU::detectFeatures()+0x854>
c0019928:	56                   	push   esi
c0019929:	56                   	push   esi
c001992a:	68 f8 b8 02 c0       	push   0xc002b8f8
c001992f:	e9 ff 00 00 00       	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019934:	83 f8 06             	cmp    eax,0x6
c0019937:	0f 84 45 ff ff ff    	je     c0019882 <CPU::detectFeatures()+0x7a2>
c001993d:	83 f8 04             	cmp    eax,0x4
c0019940:	0f 84 4d ff ff ff    	je     c0019893 <CPU::detectFeatures()+0x7b3>
c0019946:	83 f8 03             	cmp    eax,0x3
c0019949:	0f 85 72 01 00 00    	jne    c0019ac1 <CPU::detectFeatures()+0x9e1>
c001994f:	51                   	push   ecx
c0019950:	51                   	push   ecx
c0019951:	68 01 b9 02 c0       	push   0xc002b901
c0019956:	53                   	push   ebx
c0019957:	e8 0a ac ff ff       	call   c0014566 <Device::setName(char const*)>
c001995c:	b1 c1                	mov    cl,0xc1
c001995e:	88 c8                	mov    al,cl
c0019960:	e6 22                	out    0x22,al
c0019962:	e4 23                	in     al,0x23
c0019964:	88 c2                	mov    dl,al
c0019966:	88 c8                	mov    al,cl
c0019968:	e6 22                	out    0x22,al
c001996a:	88 d0                	mov    al,dl
c001996c:	83 c8 10             	or     eax,0x10
c001996f:	e6 23                	out    0x23,al
c0019971:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019978:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001997b:	89 d0                	mov    eax,edx
c001997d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019983:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019987:	40                   	inc    eax
c0019988:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001998e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019993:	e9 a1 00 00 00       	jmp    c0019a39 <CPU::detectFeatures()+0x959>
c0019998:	83 f8 06             	cmp    eax,0x6
c001999b:	0f 84 e1 fe ff ff    	je     c0019882 <CPU::detectFeatures()+0x7a2>
c00199a1:	83 f8 04             	cmp    eax,0x4
c00199a4:	0f 84 e9 fe ff ff    	je     c0019893 <CPU::detectFeatures()+0x7b3>
c00199aa:	83 f8 03             	cmp    eax,0x3
c00199ad:	0f 85 0e 01 00 00    	jne    c0019ac1 <CPU::detectFeatures()+0x9e1>
c00199b3:	52                   	push   edx
c00199b4:	52                   	push   edx
c00199b5:	68 0c b9 02 c0       	push   0xc002b90c
c00199ba:	eb 77                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00199bc:	83 f8 07             	cmp    eax,0x7
c00199bf:	75 09                	jne    c00199ca <CPU::detectFeatures()+0x8ea>
c00199c1:	50                   	push   eax
c00199c2:	50                   	push   eax
c00199c3:	68 16 b9 02 c0       	push   0xc002b916
c00199c8:	eb 69                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 0a             	cmp    eax,0xa
c00199cd:	75 09                	jne    c00199d8 <CPU::detectFeatures()+0x8f8>
c00199cf:	50                   	push   eax
c00199d0:	50                   	push   eax
c00199d1:	68 21 b9 02 c0       	push   0xc002b921
c00199d6:	eb 5b                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00199d8:	83 f8 0b             	cmp    eax,0xb
c00199db:	75 09                	jne    c00199e6 <CPU::detectFeatures()+0x906>
c00199dd:	50                   	push   eax
c00199de:	50                   	push   eax
c00199df:	68 29 b9 02 c0       	push   0xc002b929
c00199e4:	eb 4d                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00199e6:	83 f8 08             	cmp    eax,0x8
c00199e9:	75 09                	jne    c00199f4 <CPU::detectFeatures()+0x914>
c00199eb:	50                   	push   eax
c00199ec:	50                   	push   eax
c00199ed:	68 32 b9 02 c0       	push   0xc002b932
c00199f2:	eb 3f                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c00199f4:	83 f8 09             	cmp    eax,0x9
c00199f7:	75 09                	jne    c0019a02 <CPU::detectFeatures()+0x922>
c00199f9:	50                   	push   eax
c00199fa:	50                   	push   eax
c00199fb:	68 3a b9 02 c0       	push   0xc002b93a
c0019a00:	eb 31                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019a02:	83 f8 05             	cmp    eax,0x5
c0019a05:	75 09                	jne    c0019a10 <CPU::detectFeatures()+0x930>
c0019a07:	50                   	push   eax
c0019a08:	50                   	push   eax
c0019a09:	68 42 b9 02 c0       	push   0xc002b942
c0019a0e:	eb 23                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019a10:	83 f8 0c             	cmp    eax,0xc
c0019a13:	75 09                	jne    c0019a1e <CPU::detectFeatures()+0x93e>
c0019a15:	55                   	push   ebp
c0019a16:	55                   	push   ebp
c0019a17:	68 50 b9 02 c0       	push   0xc002b950
c0019a1c:	eb 15                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019a1e:	83 f8 0d             	cmp    eax,0xd
c0019a21:	75 09                	jne    c0019a2c <CPU::detectFeatures()+0x94c>
c0019a23:	57                   	push   edi
c0019a24:	57                   	push   edi
c0019a25:	68 5b b9 02 c0       	push   0xc002b95b
c0019a2a:	eb 07                	jmp    c0019a33 <CPU::detectFeatures()+0x953>
c0019a2c:	56                   	push   esi
c0019a2d:	56                   	push   esi
c0019a2e:	68 6f b9 02 c0       	push   0xc002b96f
c0019a33:	53                   	push   ebx
c0019a34:	e8 2d ab ff ff       	call   c0014566 <Device::setName(char const*)>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	e9 80 00 00 00       	jmp    c0019ac1 <CPU::detectFeatures()+0x9e1>
c0019a41:	51                   	push   ecx
c0019a42:	51                   	push   ecx
c0019a43:	68 bb b7 02 c0       	push   0xc002b7bb
c0019a48:	57                   	push   edi
c0019a49:	e8 e6 6d fe ff       	call   c0000834 <strcpy>
c0019a4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a58:	e8 51 68 fe ff       	call   c00002ae <is486>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	85 c0                	test   eax,eax
c0019a62:	74 2b                	je     c0019a8f <CPU::detectFeatures()+0x9af>
c0019a64:	52                   	push   edx
c0019a65:	52                   	push   edx
c0019a66:	68 7b b9 02 c0       	push   0xc002b97b
c0019a6b:	53                   	push   ebx
c0019a6c:	e8 f5 aa ff ff       	call   c0014566 <Device::setName(char const*)>
c0019a71:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a78:	0f 20 c0             	mov    eax,cr0
c0019a7b:	83 e0 14             	and    eax,0x14
c0019a7e:	83 c4 10             	add    esp,0x10
c0019a81:	83 f8 04             	cmp    eax,0x4
c0019a84:	75 1f                	jne    c0019aa5 <CPU::detectFeatures()+0x9c5>
c0019a86:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a8d:	eb 32                	jmp    c0019ac1 <CPU::detectFeatures()+0x9e1>
c0019a8f:	50                   	push   eax
c0019a90:	50                   	push   eax
c0019a91:	68 86 b9 02 c0       	push   0xc002b986
c0019a96:	53                   	push   ebx
c0019a97:	e8 ca aa ff ff       	call   c0014566 <Device::setName(char const*)>
c0019a9c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019aa3:	eb d3                	jmp    c0019a78 <CPU::detectFeatures()+0x998>
c0019aa5:	e8 df 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019aaa:	83 e0 01             	and    eax,0x1
c0019aad:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ab0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ab6:	83 e0 fd             	and    eax,0xfffffffd
c0019ab9:	09 d0                	or     eax,edx
c0019abb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ac1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ac8:	83 c4 4c             	add    esp,0x4c
c0019acb:	5b                   	pop    ebx
c0019acc:	5e                   	pop    esi
c0019acd:	5f                   	pop    edi
c0019ace:	5d                   	pop    ebp
c0019acf:	c3                   	ret    

c0019ad0 <CPU::setupSMEP()>:
c0019ad0:	0f 20 e0             	mov    eax,cr4
c0019ad3:	0d 00 00 10 00       	or     eax,0x100000
c0019ad8:	0f 22 e0             	mov    cr4,eax
c0019adb:	c3                   	ret    

c0019adc <CPU::setupUMIP()>:
c0019adc:	0f 20 e0             	mov    eax,cr4
c0019adf:	80 cc 08             	or     ah,0x8
c0019ae2:	0f 22 e0             	mov    cr4,eax
c0019ae5:	c3                   	ret    

c0019ae6 <CPU::setupTSC()>:
c0019ae6:	0f 20 e0             	mov    eax,cr4
c0019ae9:	83 c8 04             	or     eax,0x4
c0019aec:	0f 22 e0             	mov    cr4,eax
c0019aef:	c3                   	ret    

c0019af0 <CPU::setupLargePages()>:
c0019af0:	0f 20 e0             	mov    eax,cr4
c0019af3:	83 c8 10             	or     eax,0x10
c0019af6:	0f 22 e0             	mov    cr4,eax
c0019af9:	c3                   	ret    

c0019afa <CPU::setupPAT()>:
c0019afa:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0019aff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b06:	74 2c                	je     c0019b34 <CPU::setupPAT()+0x3a>
c0019b08:	53                   	push   ebx
c0019b09:	83 ec 10             	sub    esp,0x10
c0019b0c:	68 77 02 00 00       	push   0x277
c0019b11:	50                   	push   eax
c0019b12:	e8 d1 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b17:	83 e2 f8             	and    edx,0xfffffff8
c0019b1a:	83 ca 01             	or     edx,0x1
c0019b1d:	52                   	push   edx
c0019b1e:	50                   	push   eax
c0019b1f:	68 77 02 00 00       	push   0x277
c0019b24:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c0019b2a:	e8 e5 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b2f:	83 c4 28             	add    esp,0x28
c0019b32:	5b                   	pop    ebx
c0019b33:	c3                   	ret    
c0019b34:	c3                   	ret    
c0019b35:	90                   	nop

c0019b36 <CPU::setupMTRR()>:
c0019b36:	c3                   	ret    
c0019b37:	90                   	nop

c0019b38 <CPU::setupGlobalPages()>:
c0019b38:	0f 20 e0             	mov    eax,cr4
c0019b3b:	0c 80                	or     al,0x80
c0019b3d:	0f 22 e0             	mov    cr4,eax
c0019b40:	c3                   	ret    
c0019b41:	90                   	nop

c0019b42 <CPU::allowUsermodeDataAccess()>:
c0019b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b46:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b4d:	74 03                	je     c0019b52 <CPU::allowUsermodeDataAccess()+0x10>
c0019b4f:	0f 01 cb             	stac   
c0019b52:	c3                   	ret    
c0019b53:	90                   	nop

c0019b54 <CPU::prohibitUsermodeDataAccess()>:
c0019b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b58:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b5f:	74 03                	je     c0019b64 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b61:	0f 01 ca             	clac   
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <CPU::setupSMAP()>:
c0019b66:	0f 20 e0             	mov    eax,cr4
c0019b69:	0d 00 00 20 00       	or     eax,0x200000
c0019b6e:	0f 22 e0             	mov    cr4,eax
c0019b71:	eb e1                	jmp    c0019b54 <CPU::prohibitUsermodeDataAccess()>
c0019b73:	90                   	nop

c0019b74 <CPU::setupFeatures()>:
c0019b74:	83 ec 0c             	sub    esp,0xc
c0019b77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b7b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b82:	74 07                	je     c0019b8b <CPU::setupFeatures()+0x17>
c0019b84:	52                   	push   edx
c0019b85:	e8 46 ff ff ff       	call   c0019ad0 <CPU::setupSMEP()>
c0019b8a:	58                   	pop    eax
c0019b8b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b92:	74 07                	je     c0019b9b <CPU::setupFeatures()+0x27>
c0019b94:	52                   	push   edx
c0019b95:	e8 cc ff ff ff       	call   c0019b66 <CPU::setupSMAP()>
c0019b9a:	58                   	pop    eax
c0019b9b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019ba2:	74 07                	je     c0019bab <CPU::setupFeatures()+0x37>
c0019ba4:	52                   	push   edx
c0019ba5:	e8 32 ff ff ff       	call   c0019adc <CPU::setupUMIP()>
c0019baa:	58                   	pop    eax
c0019bab:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bb2:	74 07                	je     c0019bbb <CPU::setupFeatures()+0x47>
c0019bb4:	52                   	push   edx
c0019bb5:	e8 2c ff ff ff       	call   c0019ae6 <CPU::setupTSC()>
c0019bba:	58                   	pop    eax
c0019bbb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bc2:	74 07                	je     c0019bcb <CPU::setupFeatures()+0x57>
c0019bc4:	52                   	push   edx
c0019bc5:	e8 26 ff ff ff       	call   c0019af0 <CPU::setupLargePages()>
c0019bca:	59                   	pop    ecx
c0019bcb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bd2:	74 07                	je     c0019bdb <CPU::setupFeatures()+0x67>
c0019bd4:	52                   	push   edx
c0019bd5:	e8 5e ff ff ff       	call   c0019b38 <CPU::setupGlobalPages()>
c0019bda:	58                   	pop    eax
c0019bdb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019be2:	74 0c                	je     c0019bf0 <CPU::setupFeatures()+0x7c>
c0019be4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019be8:	83 c4 0c             	add    esp,0xc
c0019beb:	e9 0a ff ff ff       	jmp    c0019afa <CPU::setupPAT()>
c0019bf0:	83 c4 0c             	add    esp,0xc
c0019bf3:	c3                   	ret    

c0019bf4 <CPU::open(int, int, void*)>:
c0019bf4:	57                   	push   edi
c0019bf5:	56                   	push   esi
c0019bf6:	53                   	push   ebx
c0019bf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bfb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bff:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c05:	83 ec 0c             	sub    esp,0xc
c0019c08:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c0e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c14:	50                   	push   eax
c0019c15:	e8 ba 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c1a:	83 c4 0c             	add    esp,0xc
c0019c1d:	6a 00                	push   0x0
c0019c1f:	68 ef be ad de       	push   0xdeadbeef
c0019c24:	57                   	push   edi
c0019c25:	e8 ec 78 ff ff       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c0019c2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c2d:	e8 c4 78 ff ff       	call   c00114f6 <TSS::flush()>
c0019c32:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c38:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c3b:	e8 f0 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c40:	b8 00 04 00 00       	mov    eax,0x400
c0019c45:	0f 23 f8             	mov    db7,eax
c0019c48:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c52:	e8 8e 62 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019c57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c5d:	89 30                	mov    DWORD PTR [eax],esi
c0019c5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c65:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c68:	58                   	pop    eax
c0019c69:	5a                   	pop    edx
c0019c6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c74:	e8 db 89 ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0019c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c7c:	e8 5f f4 ff ff       	call   c00190e0 <CPU::detectFeatures()>
c0019c81:	e8 ce bc ff ff       	call   c0015954 <setupInterruptController()>
c0019c86:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c8c:	a1 e0 e3 02 c0       	mov    eax,ds:0xc002e3e0
c0019c91:	83 e0 10             	and    eax,0x10
c0019c94:	83 f8 01             	cmp    eax,0x1
c0019c97:	19 c0                	sbb    eax,eax
c0019c99:	83 e0 46             	and    eax,0x46
c0019c9c:	83 c0 1e             	add    eax,0x1e
c0019c9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ca2:	e8 bb d1 ff ff       	call   c0016e62 <setupTimer(int)>
c0019ca7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb0:	e8 bf fe ff ff       	call   c0019b74 <CPU::setupFeatures()>
c0019cb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb8:	e8 a7 f1 ff ff       	call   c0018e64 <CPU::displayFeatures()>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	31 c0                	xor    eax,eax
c0019cc2:	5b                   	pop    ebx
c0019cc3:	5e                   	pop    esi
c0019cc4:	5f                   	pop    edi
c0019cc5:	c3                   	ret    

c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cc6:	57                   	push   edi
c0019cc7:	56                   	push   esi
c0019cc8:	53                   	push   ebx
c0019cc9:	51                   	push   ecx
c0019cca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cce:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cd1:	0f 02 c0             	lar    eax,ax
c0019cd4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cd7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cdb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cde:	88 ca                	mov    dl,cl
c0019ce0:	c0 ea 06             	shr    dl,0x6
c0019ce3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ce7:	89 ca                	mov    edx,ecx
c0019ce9:	66 c1 ea 03          	shr    dx,0x3
c0019ced:	83 e2 07             	and    edx,0x7
c0019cf0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cf5:	88 17                	mov    BYTE PTR [edi],dl
c0019cf7:	0f 84 a6 01 00 00    	je     c0019ea3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cfd:	83 e1 07             	and    ecx,0x7
c0019d00:	80 f9 04             	cmp    cl,0x4
c0019d03:	0f 84 98 00 00 00    	je     c0019da1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d09:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d0e:	0f 95 c0             	setne  al
c0019d11:	80 f9 05             	cmp    cl,0x5
c0019d14:	0f 95 c2             	setne  dl
c0019d17:	08 c2                	or     dl,al
c0019d19:	74 79                	je     c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d1b:	84 c9                	test   cl,cl
c0019d1d:	75 05                	jne    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d1f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d22:	eb 3c                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d24:	80 f9 01             	cmp    cl,0x1
c0019d27:	75 05                	jne    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d29:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d2c:	eb 32                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2e:	80 f9 02             	cmp    cl,0x2
c0019d31:	75 05                	jne    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d33:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d36:	eb 28                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d38:	31 c0                	xor    eax,eax
c0019d3a:	80 f9 03             	cmp    cl,0x3
c0019d3d:	75 05                	jne    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d3f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d42:	eb 1c                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d44:	80 f9 05             	cmp    cl,0x5
c0019d47:	75 05                	jne    c0019d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d49:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d4c:	eb 12                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4e:	80 f9 06             	cmp    cl,0x6
c0019d51:	75 05                	jne    c0019d58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d56:	eb 08                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d58:	80 f9 07             	cmp    cl,0x7
c0019d5b:	75 03                	jne    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d60:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d65:	75 10                	jne    c0019d77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d67:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d6b:	b9 03 00 00 00       	mov    ecx,0x3
c0019d70:	01 d0                	add    eax,edx
c0019d72:	e9 37 01 00 00       	jmp    c0019eae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d77:	b9 02 00 00 00       	mov    ecx,0x2
c0019d7c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d81:	0f 85 27 01 00 00    	jne    c0019eae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d87:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d8a:	b9 06 00 00 00       	mov    ecx,0x6
c0019d8f:	e9 1a 01 00 00       	jmp    c0019eae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d94:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d97:	b9 06 00 00 00       	mov    ecx,0x6
c0019d9c:	e9 0f 01 00 00       	jmp    c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019da1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019da4:	88 ca                	mov    dl,cl
c0019da6:	c0 ea 06             	shr    dl,0x6
c0019da9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019dad:	89 ca                	mov    edx,ecx
c0019daf:	66 c1 ea 03          	shr    dx,0x3
c0019db3:	83 e2 07             	and    edx,0x7
c0019db6:	80 e1 07             	and    cl,0x7
c0019db9:	75 05                	jne    c0019dc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019dbb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dbe:	eb 4c                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc0:	80 f9 01             	cmp    cl,0x1
c0019dc3:	75 05                	jne    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dc5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dc8:	eb 42                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dca:	80 f9 02             	cmp    cl,0x2
c0019dcd:	75 05                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dcf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dd2:	eb 38                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd4:	80 f9 03             	cmp    cl,0x3
c0019dd7:	75 05                	jne    c0019dde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dd9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ddc:	eb 2e                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dde:	80 f9 04             	cmp    cl,0x4
c0019de1:	75 12                	jne    c0019df5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019de3:	f6 c4 60             	test   ah,0x60
c0019de6:	75 08                	jne    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019de8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019deb:	8d 78 14             	lea    edi,[eax+0x14]
c0019dee:	eb 1c                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019df3:	eb 17                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df5:	80 f9 05             	cmp    cl,0x5
c0019df8:	75 05                	jne    c0019dff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dfa:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019dfd:	eb 0d                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dff:	80 f9 06             	cmp    cl,0x6
c0019e02:	75 05                	jne    c0019e09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e04:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e07:	eb 03                	jmp    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e09:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e0c:	84 d2                	test   dl,dl
c0019e0e:	75 05                	jne    c0019e15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e10:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e13:	eb 3c                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e15:	80 fa 01             	cmp    dl,0x1
c0019e18:	75 05                	jne    c0019e1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e1a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e1d:	eb 32                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1f:	80 fa 02             	cmp    dl,0x2
c0019e22:	75 05                	jne    c0019e29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e24:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e27:	eb 28                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e29:	80 fa 03             	cmp    dl,0x3
c0019e2c:	75 05                	jne    c0019e33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e2e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e31:	eb 1e                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e33:	31 c0                	xor    eax,eax
c0019e35:	80 fa 04             	cmp    dl,0x4
c0019e38:	74 17                	je     c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e3a:	80 fa 05             	cmp    dl,0x5
c0019e3d:	75 05                	jne    c0019e44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e3f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e42:	eb 0d                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e44:	80 fa 06             	cmp    dl,0x6
c0019e47:	75 05                	jne    c0019e4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e4c:	eb 03                	jmp    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e51:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e56:	0f 94 c2             	sete   dl
c0019e59:	80 f9 05             	cmp    cl,0x5
c0019e5c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e60:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e65:	d3 e0                	shl    eax,cl
c0019e67:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e6b:	74 0a                	je     c0019e77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e6d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e70:	b9 07 00 00 00       	mov    ecx,0x7
c0019e75:	eb 37                	jmp    c0019eae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e77:	01 f8                	add    eax,edi
c0019e79:	b9 03 00 00 00       	mov    ecx,0x3
c0019e7e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e83:	74 2b                	je     c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e85:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e8a:	75 0d                	jne    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e8c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e90:	01 c8                	add    eax,ecx
c0019e92:	b9 04 00 00 00       	mov    ecx,0x4
c0019e97:	eb 17                	jmp    c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e99:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e9c:	b9 07 00 00 00       	mov    ecx,0x7
c0019ea1:	eb 0d                	jmp    c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea3:	b9 02 00 00 00       	mov    ecx,0x2
c0019ea8:	b2 01                	mov    dl,0x1
c0019eaa:	31 c0                	xor    eax,eax
c0019eac:	eb 02                	jmp    c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eae:	31 d2                	xor    edx,edx
c0019eb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019eb4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019eb6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eba:	88 11                	mov    BYTE PTR [ecx],dl
c0019ebc:	5a                   	pop    edx
c0019ebd:	5b                   	pop    ebx
c0019ebe:	5e                   	pop    esi
c0019ebf:	5f                   	pop    edi
c0019ec0:	c3                   	ret    

c0019ec1 <Krnl::smpEntry()>:
c0019ec1:	eb fe                	jmp    c0019ec1 <Krnl::smpEntry()>

c0019ec3 <Krnl::startCPU(int)>:
c0019ec3:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0019ec8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ecf:	0f 84 36 01 00 00    	je     c001a00b <Krnl::startCPU(int)+0x148>
c0019ed5:	53                   	push   ebx
c0019ed6:	83 ec 08             	sub    esp,0x8
c0019ed9:	e8 fc 3e 00 00       	call   c001ddda <lockScheduler()>
c0019ede:	52                   	push   edx
c0019edf:	52                   	push   edx
c0019ee0:	6a 1b                	push   0x1b
c0019ee2:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c0019ee8:	e8 fb 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019eed:	59                   	pop    ecx
c0019eee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ef3:	89 c3                	mov    ebx,eax
c0019ef5:	58                   	pop    eax
c0019ef6:	53                   	push   ebx
c0019ef7:	68 c0 b9 02 c0       	push   0xc002b9c0
c0019efc:	e8 5d 90 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0019f01:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f0f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f19:	c1 e0 18             	shl    eax,0x18
c0019f1c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f2b:	09 c2                	or     edx,eax
c0019f2d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f33:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f39:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f3f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f45:	80 cd c5             	or     ch,0xc5
c0019f48:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f4e:	f3 90                	pause  
c0019f50:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f52:	0f ba e1 0c          	bt     ecx,0xc
c0019f56:	72 f6                	jb     c0019f4e <Krnl::startCPU(int)+0x8b>
c0019f58:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f5e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f64:	09 c1                	or     ecx,eax
c0019f66:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f6c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f72:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f78:	80 cd 85             	or     ch,0x85
c0019f7b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f81:	f3 90                	pause  
c0019f83:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f85:	0f ba e1 0c          	bt     ecx,0xc
c0019f89:	72 f6                	jb     c0019f81 <Krnl::startCPU(int)+0xbe>
c0019f8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f95:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f9b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fa1:	09 c1                	or     ecx,eax
c0019fa3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fa9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019faf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fb5:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fbb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fc1:	f3 90                	pause  
c0019fc3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fc5:	0f ba e1 0c          	bt     ecx,0xc
c0019fc9:	72 f6                	jb     c0019fc1 <Krnl::startCPU(int)+0xfe>
c0019fcb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fd5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fdb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fe1:	09 c8                	or     eax,ecx
c0019fe3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fe9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fef:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ff4:	0d 02 06 00 00       	or     eax,0x602
c0019ff9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fff:	f3 90                	pause  
c001a001:	8b 02                	mov    eax,DWORD PTR [edx]
c001a003:	0f ba e0 0c          	bt     eax,0xc
c001a007:	72 f6                	jb     c0019fff <Krnl::startCPU(int)+0x13c>
c001a009:	eb fe                	jmp    c001a009 <Krnl::startCPU(int)+0x146>
c001a00b:	c3                   	ret    

c001a00c <Krnl::startCPUs()>:
c001a00c:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001a011:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a017:	88 c2                	mov    dl,al
c001a019:	83 e2 0a             	and    edx,0xa
c001a01c:	80 fa 0a             	cmp    dl,0xa
c001a01f:	75 09                	jne    c001a02a <Krnl::startCPUs()+0x1e>
c001a021:	a8 01                	test   al,0x1
c001a023:	74 05                	je     c001a02a <Krnl::startCPUs()+0x1e>
c001a025:	e9 71 61 fe ff       	jmp    c000019b <prepareTramp>
c001a02a:	c3                   	ret    
c001a02b:	90                   	nop

c001a02c <EnvVarContainer::getEnv(char const*)>:
c001a02c:	57                   	push   edi
c001a02d:	56                   	push   esi
c001a02e:	53                   	push   ebx
c001a02f:	31 db                	xor    ebx,ebx
c001a031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a035:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a037:	7e 2b                	jle    c001a064 <EnvVarContainer::getEnv(char const*)+0x38>
c001a039:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a040:	50                   	push   eax
c001a041:	50                   	push   eax
c001a042:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a045:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a048:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a04c:	e8 6f 68 fe ff       	call   c00008c0 <strcmp>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	85 c0                	test   eax,eax
c001a056:	75 09                	jne    c001a061 <EnvVarContainer::getEnv(char const*)+0x35>
c001a058:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a05b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a05f:	eb 05                	jmp    c001a066 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a061:	43                   	inc    ebx
c001a062:	eb d1                	jmp    c001a035 <EnvVarContainer::getEnv(char const*)+0x9>
c001a064:	31 c0                	xor    eax,eax
c001a066:	5b                   	pop    ebx
c001a067:	5e                   	pop    esi
c001a068:	5f                   	pop    edi
c001a069:	c3                   	ret    

c001a06a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a06a:	57                   	push   edi
c001a06b:	56                   	push   esi
c001a06c:	53                   	push   ebx
c001a06d:	83 ec 1c             	sub    esp,0x1c
c001a070:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a074:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a078:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a07c:	57                   	push   edi
c001a07d:	e8 12 67 fe ff       	call   c0000794 <strlen>
c001a082:	40                   	inc    eax
c001a083:	89 04 24             	mov    DWORD PTR [esp],eax
c001a086:	e8 b8 57 ff ff       	call   c000f843 <malloc>
c001a08b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a08e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a092:	e8 fd 66 fe ff       	call   c0000794 <strlen>
c001a097:	40                   	inc    eax
c001a098:	89 04 24             	mov    DWORD PTR [esp],eax
c001a09b:	e8 a3 57 ff ff       	call   c000f843 <malloc>
c001a0a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0a7:	e8 e8 66 fe ff       	call   c0000794 <strlen>
c001a0ac:	83 c4 0c             	add    esp,0xc
c001a0af:	40                   	inc    eax
c001a0b0:	50                   	push   eax
c001a0b1:	6a 00                	push   0x0
c001a0b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b7:	e8 bc 66 fe ff       	call   c0000778 <memset>
c001a0bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0bf:	e8 d0 66 fe ff       	call   c0000794 <strlen>
c001a0c4:	83 c4 0c             	add    esp,0xc
c001a0c7:	40                   	inc    eax
c001a0c8:	50                   	push   eax
c001a0c9:	57                   	push   edi
c001a0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0ce:	e8 71 66 fe ff       	call   c0000744 <memcpy>
c001a0d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d6:	e8 b9 66 fe ff       	call   c0000794 <strlen>
c001a0db:	83 c4 0c             	add    esp,0xc
c001a0de:	40                   	inc    eax
c001a0df:	50                   	push   eax
c001a0e0:	6a 00                	push   0x0
c001a0e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e6:	e8 8d 66 fe ff       	call   c0000778 <memset>
c001a0eb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ee:	e8 a1 66 fe ff       	call   c0000794 <strlen>
c001a0f3:	83 c4 0c             	add    esp,0xc
c001a0f6:	40                   	inc    eax
c001a0f7:	50                   	push   eax
c001a0f8:	56                   	push   esi
c001a0f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0fd:	e8 42 66 fe ff       	call   c0000744 <memcpy>
c001a102:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a104:	40                   	inc    eax
c001a105:	89 03                	mov    DWORD PTR [ebx],eax
c001a107:	c1 e0 03             	shl    eax,0x3
c001a10a:	5a                   	pop    edx
c001a10b:	59                   	pop    ecx
c001a10c:	50                   	push   eax
c001a10d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a110:	e8 1a 57 ff ff       	call   c000f82f <realloc>
c001a115:	83 c4 0c             	add    esp,0xc
c001a118:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a11b:	6a 08                	push   0x8
c001a11d:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a121:	52                   	push   edx
c001a122:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a124:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a128:	50                   	push   eax
c001a129:	e8 16 66 fe ff       	call   c0000744 <memcpy>
c001a12e:	83 c4 20             	add    esp,0x20
c001a131:	5b                   	pop    ebx
c001a132:	5e                   	pop    esi
c001a133:	5f                   	pop    edi
c001a134:	c3                   	ret    
c001a135:	90                   	nop

c001a136 <EnvVarContainer::deleteEnv(char const*)>:
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a138:	55                   	push   ebp
c001a139:	57                   	push   edi
c001a13a:	56                   	push   esi
c001a13b:	53                   	push   ebx
c001a13c:	81 ec 38 01 00 00    	sub    esp,0x138
c001a142:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a149:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a150:	68 14 01 00 00       	push   0x114
c001a155:	e8 e9 56 ff ff       	call   c000f843 <malloc>
c001a15a:	83 c4 0c             	add    esp,0xc
c001a15d:	89 c7                	mov    edi,eax
c001a15f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a162:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a169:	50                   	push   eax
c001a16a:	e8 47 93 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001a16f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a172:	e8 11 96 ff ff       	call   c0013788 <File::exists()>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	84 c0                	test   al,al
c001a17c:	75 31                	jne    c001a1af <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a17e:	51                   	push   ecx
c001a17f:	51                   	push   ecx
c001a180:	6a 12                	push   0x12
c001a182:	57                   	push   edi
c001a183:	e8 92 93 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001a188:	8b 07                	mov    eax,DWORD PTR [edi]
c001a18a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a18d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a190:	e8 ff 65 fe ff       	call   c0000794 <strlen>
c001a195:	5a                   	pop    edx
c001a196:	31 d2                	xor    edx,edx
c001a198:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a19c:	51                   	push   ecx
c001a19d:	55                   	push   ebp
c001a19e:	52                   	push   edx
c001a19f:	50                   	push   eax
c001a1a0:	57                   	push   edi
c001a1a1:	ff d3                	call   ebx
c001a1a3:	83 c4 14             	add    esp,0x14
c001a1a6:	57                   	push   edi
c001a1a7:	e8 cc 93 ff ff       	call   c0013578 <File::close()>
c001a1ac:	83 c4 10             	add    esp,0x10
c001a1af:	31 db                	xor    ebx,ebx
c001a1b1:	50                   	push   eax
c001a1b2:	31 ed                	xor    ebp,ebp
c001a1b4:	68 00 01 00 00       	push   0x100
c001a1b9:	6a 00                	push   0x0
c001a1bb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1bf:	50                   	push   eax
c001a1c0:	e8 b3 65 fe ff       	call   c0000778 <memset>
c001a1c5:	58                   	pop    eax
c001a1c6:	5a                   	pop    edx
c001a1c7:	6a 01                	push   0x1
c001a1c9:	57                   	push   edi
c001a1ca:	e8 4b 93 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	83 ec 0c             	sub    esp,0xc
c001a1d5:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1db:	51                   	push   ecx
c001a1dc:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1e0:	52                   	push   edx
c001a1e1:	6a 00                	push   0x0
c001a1e3:	6a 01                	push   0x1
c001a1e5:	57                   	push   edi
c001a1e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1e9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1ed:	83 c4 20             	add    esp,0x20
c001a1f0:	3c 0d                	cmp    al,0xd
c001a1f2:	0f 84 12 01 00 00    	je     c001a30a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1f8:	85 db                	test   ebx,ebx
c001a1fa:	0f 84 fd 00 00 00    	je     c001a2fd <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a200:	3c 0a                	cmp    al,0xa
c001a202:	74 13                	je     c001a217 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a204:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a209:	74 0c                	je     c001a217 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a20b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a211:	0f 8e e6 00 00 00    	jle    c001a2fd <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a217:	83 ec 0c             	sub    esp,0xc
c001a21a:	8d 53 01             	lea    edx,[ebx+0x1]
c001a21d:	29 dd                	sub    ebp,ebx
c001a21f:	52                   	push   edx
c001a220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a224:	e8 1a 56 ff ff       	call   c000f843 <malloc>
c001a229:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a230:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a233:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a237:	e8 07 56 ff ff       	call   c000f843 <malloc>
c001a23c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a240:	83 c4 0c             	add    esp,0xc
c001a243:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a247:	52                   	push   edx
c001a248:	6a 00                	push   0x0
c001a24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a24e:	e8 25 65 fe ff       	call   c0000778 <memset>
c001a253:	83 c4 0c             	add    esp,0xc
c001a256:	53                   	push   ebx
c001a257:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a25b:	55                   	push   ebp
c001a25c:	01 eb                	add    ebx,ebp
c001a25e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a262:	e8 dd 64 fe ff       	call   c0000744 <memcpy>
c001a267:	83 c4 0c             	add    esp,0xc
c001a26a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a26e:	51                   	push   ecx
c001a26f:	6a 00                	push   0x0
c001a271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a275:	e8 fe 64 fe ff       	call   c0000778 <memset>
c001a27a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a27d:	e8 12 65 fe ff       	call   c0000794 <strlen>
c001a282:	83 c4 0c             	add    esp,0xc
c001a285:	50                   	push   eax
c001a286:	53                   	push   ebx
c001a287:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a28b:	e8 b4 64 fe ff       	call   c0000744 <memcpy>
c001a290:	5b                   	pop    ebx
c001a291:	58                   	pop    eax
c001a292:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a296:	68 d1 b9 02 c0       	push   0xc002b9d1
c001a29b:	e8 be 8c ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a2a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2a2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2a5:	40                   	inc    eax
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	89 06                	mov    DWORD PTR [esi],eax
c001a2ab:	85 d2                	test   edx,edx
c001a2ad:	75 0c                	jne    c001a2bb <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2af:	83 ec 0c             	sub    esp,0xc
c001a2b2:	6a 08                	push   0x8
c001a2b4:	e8 8a 55 ff ff       	call   c000f843 <malloc>
c001a2b9:	eb 0c                	jmp    c001a2c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2bb:	c1 e0 03             	shl    eax,0x3
c001a2be:	51                   	push   ecx
c001a2bf:	51                   	push   ecx
c001a2c0:	50                   	push   eax
c001a2c1:	52                   	push   edx
c001a2c2:	e8 68 55 ff ff       	call   c000f82f <realloc>
c001a2c7:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2ca:	83 c4 10             	add    esp,0x10
c001a2cd:	31 db                	xor    ebx,ebx
c001a2cf:	52                   	push   edx
c001a2d0:	6a 08                	push   0x8
c001a2d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2d6:	50                   	push   eax
c001a2d7:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2d9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2dc:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2e0:	50                   	push   eax
c001a2e1:	e8 5e 64 fe ff       	call   c0000744 <memcpy>
c001a2e6:	83 c4 0c             	add    esp,0xc
c001a2e9:	68 00 01 00 00       	push   0x100
c001a2ee:	6a 00                	push   0x0
c001a2f0:	55                   	push   ebp
c001a2f1:	31 ed                	xor    ebp,ebp
c001a2f3:	e8 80 64 fe ff       	call   c0000778 <memset>
c001a2f8:	83 c4 10             	add    esp,0x10
c001a2fb:	eb 0d                	jmp    c001a30a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2fd:	3c 3d                	cmp    al,0x3d
c001a2ff:	74 07                	je     c001a308 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a301:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a305:	45                   	inc    ebp
c001a306:	eb 02                	jmp    c001a30a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a308:	89 eb                	mov    ebx,ebp
c001a30a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a30f:	0f 85 bd fe ff ff    	jne    c001a1d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a315:	50                   	push   eax
c001a316:	50                   	push   eax
c001a317:	ff 36                	push   DWORD PTR [esi]
c001a319:	68 df b9 02 c0       	push   0xc002b9df
c001a31e:	e8 3b 8c ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a323:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a329:	5b                   	pop    ebx
c001a32a:	5e                   	pop    esi
c001a32b:	5f                   	pop    edi
c001a32c:	5d                   	pop    ebp
c001a32d:	c3                   	ret    

c001a32e <EnvVarContainer::__loadSystem()>:
c001a32e:	83 ec 10             	sub    esp,0x10
c001a331:	68 00 d9 02 c0       	push   0xc002d900
c001a336:	68 0a ba 02 c0       	push   0xc002ba0a
c001a33b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a33f:	e8 f4 fd ff ff       	call   c001a138 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a344:	83 c4 1c             	add    esp,0x1c
c001a347:	c3                   	ret    

c001a348 <EnvVarContainer::__loadUser()>:
c001a348:	c3                   	ret    
c001a349:	90                   	nop

c001a34a <EnvVarContainer::EnvVarContainer(Process*)>:
c001a34a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a35c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a35f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a363:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a36a:	90                   	nop
c001a36b:	c3                   	ret    

c001a36c <EnvVarContainer::~EnvVarContainer()>:
c001a36c:	83 ec 0c             	sub    esp,0xc
c001a36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a373:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a376:	85 c0                	test   eax,eax
c001a378:	74 1d                	je     c001a397 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a380:	85 c0                	test   eax,eax
c001a382:	74 13                	je     c001a397 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	50                   	push   eax
c001a38f:	e8 bf 54 ff ff       	call   c000f853 <free>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	90                   	nop
c001a398:	83 c4 0c             	add    esp,0xc
c001a39b:	c3                   	ret    

c001a39c <Krnl::getEnv(Process*, char const*)>:
c001a39c:	53                   	push   ebx
c001a39d:	83 ec 08             	sub    esp,0x8
c001a3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3a8:	39 05 54 19 03 c0    	cmp    DWORD PTR ds:0xc0031954,eax
c001a3ae:	74 04                	je     c001a3b4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	75 0b                	jne    c001a3bf <Krnl::getEnv(Process*, char const*)+0x23>
c001a3b4:	a1 34 0f 03 c0       	mov    eax,ds:0xc0030f34
c001a3b9:	85 c0                	test   eax,eax
c001a3bb:	75 19                	jne    c001a3d6 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3bd:	eb 27                	jmp    c001a3e6 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3bf:	52                   	push   edx
c001a3c0:	52                   	push   edx
c001a3c1:	53                   	push   ebx
c001a3c2:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3c8:	e8 5f fc ff ff       	call   c001a02c <EnvVarContainer::getEnv(char const*)>
c001a3cd:	83 c4 10             	add    esp,0x10
c001a3d0:	85 c0                	test   eax,eax
c001a3d2:	75 28                	jne    c001a3fc <Krnl::getEnv(Process*, char const*)+0x60>
c001a3d4:	eb de                	jmp    c001a3b4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3d6:	52                   	push   edx
c001a3d7:	52                   	push   edx
c001a3d8:	53                   	push   ebx
c001a3d9:	50                   	push   eax
c001a3da:	e8 4d fc ff ff       	call   c001a02c <EnvVarContainer::getEnv(char const*)>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	85 c0                	test   eax,eax
c001a3e4:	75 16                	jne    c001a3fc <Krnl::getEnv(Process*, char const*)+0x60>
c001a3e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3ea:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a3ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3f3:	83 c4 08             	add    esp,0x8
c001a3f6:	5b                   	pop    ebx
c001a3f7:	e9 30 fc ff ff       	jmp    c001a02c <EnvVarContainer::getEnv(char const*)>
c001a3fc:	83 c4 08             	add    esp,0x8
c001a3ff:	5b                   	pop    ebx
c001a400:	c3                   	ret    

c001a401 <Krnl::setEnvSystem(char const*, char const*)>:
c001a401:	83 ec 10             	sub    esp,0x10
c001a404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a408:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a40c:	ff 35 38 0f 03 c0    	push   DWORD PTR ds:0xc0030f38
c001a412:	e8 53 fc ff ff       	call   c001a06a <EnvVarContainer::setEnv(char const*, char const*)>
c001a417:	83 c4 1c             	add    esp,0x1c
c001a41a:	c3                   	ret    

c001a41b <Krnl::setEnvUser(char const*, char const*)>:
c001a41b:	a1 34 0f 03 c0       	mov    eax,ds:0xc0030f34
c001a420:	85 c0                	test   eax,eax
c001a422:	74 15                	je     c001a439 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a424:	83 ec 10             	sub    esp,0x10
c001a427:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42f:	50                   	push   eax
c001a430:	e8 35 fc ff ff       	call   c001a06a <EnvVarContainer::setEnv(char const*, char const*)>
c001a435:	83 c4 1c             	add    esp,0x1c
c001a438:	c3                   	ret    
c001a439:	c3                   	ret    

c001a43a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a444:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a448:	e9 1d fc ff ff       	jmp    c001a06a <EnvVarContainer::setEnv(char const*, char const*)>

c001a44d <Krnl::deleteEnvSystem(char const*)>:
c001a44d:	c3                   	ret    

c001a44e <Krnl::deleteEnvUser(char const*)>:
c001a44e:	c3                   	ret    

c001a44f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a44f:	c3                   	ret    

c001a450 <Krnl::newProcessEnv(Process*)>:
c001a450:	83 ec 28             	sub    esp,0x28
c001a453:	6a 0c                	push   0xc
c001a455:	e8 e9 53 ff ff       	call   c000f843 <malloc>
c001a45a:	5a                   	pop    edx
c001a45b:	59                   	pop    ecx
c001a45c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a460:	50                   	push   eax
c001a461:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a465:	e8 e0 fe ff ff       	call   c001a34a <EnvVarContainer::EnvVarContainer(Process*)>
c001a46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a46e:	83 c4 2c             	add    esp,0x2c
c001a471:	c3                   	ret    

c001a472 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a472:	56                   	push   esi
c001a473:	53                   	push   ebx
c001a474:	83 ec 10             	sub    esp,0x10
c001a477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a47b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a481:	6a 0c                	push   0xc
c001a483:	e8 bb 53 ff ff       	call   c000f843 <malloc>
c001a488:	89 c3                	mov    ebx,eax
c001a48a:	58                   	pop    eax
c001a48b:	5a                   	pop    edx
c001a48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a490:	53                   	push   ebx
c001a491:	e8 b4 fe ff ff       	call   c001a34a <EnvVarContainer::EnvVarContainer(Process*)>
c001a496:	8b 06                	mov    eax,DWORD PTR [esi]
c001a498:	89 03                	mov    DWORD PTR [ebx],eax
c001a49a:	c1 e0 03             	shl    eax,0x3
c001a49d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a0:	e8 9e 53 ff ff       	call   c000f843 <malloc>
c001a4a5:	83 c4 0c             	add    esp,0xc
c001a4a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4ab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4ad:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4b4:	52                   	push   edx
c001a4b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4b8:	50                   	push   eax
c001a4b9:	e8 86 62 fe ff       	call   c0000744 <memcpy>
c001a4be:	89 d8                	mov    eax,ebx
c001a4c0:	83 c4 14             	add    esp,0x14
c001a4c3:	5b                   	pop    ebx
c001a4c4:	5e                   	pop    esi
c001a4c5:	c3                   	ret    

c001a4c6 <Krnl::loadSystemEnv()>:
c001a4c6:	53                   	push   ebx
c001a4c7:	83 ec 14             	sub    esp,0x14
c001a4ca:	6a 0c                	push   0xc
c001a4cc:	e8 72 53 ff ff       	call   c000f843 <malloc>
c001a4d1:	89 c3                	mov    ebx,eax
c001a4d3:	58                   	pop    eax
c001a4d4:	5a                   	pop    edx
c001a4d5:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001a4db:	53                   	push   ebx
c001a4dc:	e8 69 fe ff ff       	call   c001a34a <EnvVarContainer::EnvVarContainer(Process*)>
c001a4e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4e4:	89 1d 38 0f 03 c0    	mov    DWORD PTR ds:0xc0030f38,ebx
c001a4ea:	e8 3f fe ff ff       	call   c001a32e <EnvVarContainer::__loadSystem()>
c001a4ef:	83 c4 18             	add    esp,0x18
c001a4f2:	5b                   	pop    ebx
c001a4f3:	c3                   	ret    

c001a4f4 <Krnl::loadUserEnv()>:
c001a4f4:	53                   	push   ebx
c001a4f5:	83 ec 14             	sub    esp,0x14
c001a4f8:	6a 0c                	push   0xc
c001a4fa:	e8 44 53 ff ff       	call   c000f843 <malloc>
c001a4ff:	89 c3                	mov    ebx,eax
c001a501:	58                   	pop    eax
c001a502:	5a                   	pop    edx
c001a503:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001a509:	53                   	push   ebx
c001a50a:	e8 3b fe ff ff       	call   c001a34a <EnvVarContainer::EnvVarContainer(Process*)>
c001a50f:	89 1d 34 0f 03 c0    	mov    DWORD PTR ds:0xc0030f34,ebx
c001a515:	83 c4 18             	add    esp,0x18
c001a518:	5b                   	pop    ebx
c001a519:	c3                   	ret    

c001a51a <Krnl::flushEnv()>:
c001a51a:	c3                   	ret    

c001a51b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a51f:	8b 15 34 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f34
c001a525:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a52b:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a530:	8b 00                	mov    eax,DWORD PTR [eax]
c001a532:	03 01                	add    eax,DWORD PTR [ecx]
c001a534:	85 d2                	test   edx,edx
c001a536:	74 02                	je     c001a53a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a538:	03 02                	add    eax,DWORD PTR [edx]
c001a53a:	c3                   	ret    

c001a53b <Krnl::getProcessEnvPair(Process*, int)>:
c001a53b:	57                   	push   edi
c001a53c:	8b 0d 34 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f34
c001a542:	56                   	push   esi
c001a543:	85 c9                	test   ecx,ecx
c001a545:	53                   	push   ebx
c001a546:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a54a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a54e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a554:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a558:	8b 02                	mov    eax,DWORD PTR [edx]
c001a55a:	75 47                	jne    c001a5a3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a55c:	39 c3                	cmp    ebx,eax
c001a55e:	7c 47                	jl     c001a5a7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a560:	8b 15 38 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f38
c001a566:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a568:	01 c1                	add    ecx,eax
c001a56a:	39 d9                	cmp    ecx,ebx
c001a56c:	7e 6c                	jle    c001a5da <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a56e:	51                   	push   ecx
c001a56f:	89 d9                	mov    ecx,ebx
c001a571:	29 c1                	sub    ecx,eax
c001a573:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a576:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a57a:	53                   	push   ebx
c001a57b:	68 2c ba 02 c0       	push   0xc002ba2c
c001a580:	e8 d9 89 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a585:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a58b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a58d:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a595:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a599:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a59c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a59f:	89 06                	mov    DWORD PTR [esi],eax
c001a5a1:	eb 51                	jmp    c001a5f4 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5a3:	39 c3                	cmp    ebx,eax
c001a5a5:	7d 05                	jge    c001a5ac <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5a7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5aa:	eb 20                	jmp    c001a5cc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5ac:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5ae:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5b1:	39 da                	cmp    edx,ebx
c001a5b3:	7e 04                	jle    c001a5b9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5b5:	29 c3                	sub    ebx,eax
c001a5b7:	eb 10                	jmp    c001a5c9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5b9:	8b 0d 38 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f38
c001a5bf:	03 11                	add    edx,DWORD PTR [ecx]
c001a5c1:	39 da                	cmp    edx,ebx
c001a5c3:	7e 15                	jle    c001a5da <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5c5:	29 c3                	sub    ebx,eax
c001a5c7:	29 fb                	sub    ebx,edi
c001a5c9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5cc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5d0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5d3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5d6:	89 06                	mov    DWORD PTR [esi],eax
c001a5d8:	eb 1d                	jmp    c001a5f7 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5da:	83 ec 0c             	sub    esp,0xc
c001a5dd:	68 40 ba 02 c0       	push   0xc002ba40
c001a5e2:	e8 18 00 00 00       	call   c001a5ff <Krnl::panic(char const*)>
c001a5e7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5ed:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5f4:	83 c4 10             	add    esp,0x10
c001a5f7:	89 f0                	mov    eax,esi
c001a5f9:	5b                   	pop    ebx
c001a5fa:	5e                   	pop    esi
c001a5fb:	5f                   	pop    edi
c001a5fc:	c2 04 00             	ret    0x4

c001a5ff <Krnl::panic(char const*)>:
c001a5ff:	55                   	push   ebp
c001a600:	89 e5                	mov    ebp,esp
c001a602:	53                   	push   ebx
c001a603:	83 ec 0c             	sub    esp,0xc
c001a606:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a609:	fa                   	cli    
c001a60a:	c6 05 44 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f44,0x1
c001a611:	53                   	push   ebx
c001a612:	c6 05 04 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d304,0x0
c001a619:	68 5a ba 02 c0       	push   0xc002ba5a
c001a61e:	e8 3b 89 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a623:	58                   	pop    eax
c001a624:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a629:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62f:	e8 23 67 ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001a634:	83 c4 0c             	add    esp,0xc
c001a637:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a63c:	6a 01                	push   0x1
c001a63e:	6a 0f                	push   0xf
c001a640:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a646:	e8 3d 61 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a64b:	58                   	pop    eax
c001a64c:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a651:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a657:	e8 9c 69 ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001a65c:	58                   	pop    eax
c001a65d:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a662:	5a                   	pop    edx
c001a663:	68 73 ba 02 c0       	push   0xc002ba73
c001a668:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66e:	e8 03 6b ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a673:	59                   	pop    ecx
c001a674:	58                   	pop    eax
c001a675:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a67a:	68 18 bb 02 c0       	push   0xc002bb18
c001a67f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a685:	e8 ec 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a68a:	58                   	pop    eax
c001a68b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a690:	5a                   	pop    edx
c001a691:	68 8f ba 02 c0       	push   0xc002ba8f
c001a696:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69c:	e8 d5 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a6a1:	59                   	pop    ecx
c001a6a2:	58                   	pop    eax
c001a6a3:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6a8:	53                   	push   ebx
c001a6a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6af:	e8 c2 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a6b4:	58                   	pop    eax
c001a6b5:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6ba:	5a                   	pop    edx
c001a6bb:	68 af ba 02 c0       	push   0xc002baaf
c001a6c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c6:	e8 ab 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a6cb:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001a6d0:	83 c4 10             	add    esp,0x10
c001a6d3:	85 c0                	test   eax,eax
c001a6d5:	74 02                	je     c001a6d9 <Krnl::panic(char const*)+0xda>
c001a6d7:	ff d0                	call   eax
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6df:	e8 fd 2f 00 00       	call   c001d6e1 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6e4:	83 c4 10             	add    esp,0x10
c001a6e7:	89 c3                	mov    ebx,eax
c001a6e9:	85 c0                	test   eax,eax
c001a6eb:	0f 84 50 02 00 00    	je     c001a941 <Krnl::panic(char const*)+0x342>
c001a6f1:	83 ec 08             	sub    esp,0x8
c001a6f4:	8b 15 54 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031954
c001a6fa:	68 54 bb 02 c0       	push   0xc002bb54
c001a6ff:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a705:	e8 6c 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a70a:	58                   	pop    eax
c001a70b:	5a                   	pop    edx
c001a70c:	8b 15 54 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031954
c001a712:	68 8f ba 02 c0       	push   0xc002ba8f
c001a717:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a71d:	e8 54 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a722:	59                   	pop    ecx
c001a723:	58                   	pop    eax
c001a724:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a729:	53                   	push   ebx
c001a72a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a730:	e8 41 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a735:	83 c4 10             	add    esp,0x10
c001a738:	83 ec 08             	sub    esp,0x8
c001a73b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a740:	68 ae ba 02 c0       	push   0xc002baae
c001a745:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74b:	e8 26 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a750:	58                   	pop    eax
c001a751:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a756:	5a                   	pop    edx
c001a757:	68 ac bb 02 c0       	push   0xc002bbac
c001a75c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a762:	e8 0f 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a767:	59                   	pop    ecx
c001a768:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a76d:	5b                   	pop    ebx
c001a76e:	68 ec bb 02 c0       	push   0xc002bbec
c001a773:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a779:	e8 f8 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a77e:	58                   	pop    eax
c001a77f:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a784:	5a                   	pop    edx
c001a785:	68 9a ba 02 c0       	push   0xc002ba9a
c001a78a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a790:	e8 e1 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a795:	59                   	pop    ecx
c001a796:	5b                   	pop    ebx
c001a797:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a79a:	68 b2 ba 02 c0       	push   0xc002bab2
c001a79f:	e8 ba 87 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a7a4:	58                   	pop    eax
c001a7a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7a8:	5a                   	pop    edx
c001a7a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7ac:	68 bb ba 02 c0       	push   0xc002babb
c001a7b1:	e8 a8 87 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a7b6:	59                   	pop    ecx
c001a7b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ba:	5b                   	pop    ebx
c001a7bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7c0:	68 c4 ba 02 c0       	push   0xc002bac4
c001a7c5:	e8 94 87 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001a7ca:	58                   	pop    eax
c001a7cb:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7d0:	5a                   	pop    edx
c001a7d1:	68 30 bc 02 c0       	push   0xc002bc30
c001a7d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7dc:	e8 95 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7e1:	59                   	pop    ecx
c001a7e2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7e7:	5b                   	pop    ebx
c001a7e8:	68 cd ba 02 c0       	push   0xc002bacd
c001a7ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f3:	e8 7e 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7f8:	0f 20 c0             	mov    eax,cr0
c001a7fb:	5a                   	pop    edx
c001a7fc:	59                   	pop    ecx
c001a7fd:	50                   	push   eax
c001a7fe:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a803:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a809:	e8 8e 69 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a80e:	5b                   	pop    ebx
c001a80f:	58                   	pop    eax
c001a810:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a815:	68 d7 ba 02 c0       	push   0xc002bad7
c001a81a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a820:	e8 51 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a825:	0f 20 d0             	mov    eax,cr2
c001a828:	5a                   	pop    edx
c001a829:	59                   	pop    ecx
c001a82a:	50                   	push   eax
c001a82b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a830:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a836:	e8 61 69 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a83b:	5b                   	pop    ebx
c001a83c:	58                   	pop    eax
c001a83d:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a842:	68 e1 ba 02 c0       	push   0xc002bae1
c001a847:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84d:	e8 24 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a852:	0f 20 d8             	mov    eax,cr3
c001a855:	5a                   	pop    edx
c001a856:	59                   	pop    ecx
c001a857:	50                   	push   eax
c001a858:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a85d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a863:	e8 34 69 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a868:	5b                   	pop    ebx
c001a869:	58                   	pop    eax
c001a86a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a86f:	68 f4 ba 02 c0       	push   0xc002baf4
c001a874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87a:	e8 f7 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a87f:	0f 20 e0             	mov    eax,cr4
c001a882:	5a                   	pop    edx
c001a883:	59                   	pop    ecx
c001a884:	50                   	push   eax
c001a885:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a88a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a890:	e8 07 69 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a895:	5b                   	pop    ebx
c001a896:	58                   	pop    eax
c001a897:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a89c:	68 fe ba 02 c0       	push   0xc002bafe
c001a8a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a7:	e8 ca 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8ac:	5a                   	pop    edx
c001a8ad:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8b2:	59                   	pop    ecx
c001a8b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8bc:	50                   	push   eax
c001a8bd:	e8 da 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a8c2:	5b                   	pop    ebx
c001a8c3:	58                   	pop    eax
c001a8c4:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8c9:	68 15 bb 02 c0       	push   0xc002bb15
c001a8ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d4:	e8 9d 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8d9:	5a                   	pop    edx
c001a8da:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8df:	59                   	pop    ecx
c001a8e0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8ec:	50                   	push   eax
c001a8ed:	e8 aa 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a8f2:	5b                   	pop    ebx
c001a8f3:	58                   	pop    eax
c001a8f4:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8f9:	68 15 bb 02 c0       	push   0xc002bb15
c001a8fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a904:	e8 6d 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a909:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a90e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a911:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a917:	8b 12                	mov    edx,DWORD PTR [edx]
c001a919:	59                   	pop    ecx
c001a91a:	5b                   	pop    ebx
c001a91b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a91e:	50                   	push   eax
c001a91f:	e8 78 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	b2 fe                	mov    dl,0xfe
c001a929:	e4 60                	in     al,0x60
c001a92b:	3c 1c                	cmp    al,0x1c
c001a92d:	74 04                	je     c001a933 <Krnl::panic(char const*)+0x334>
c001a92f:	3c 5a                	cmp    al,0x5a
c001a931:	75 f6                	jne    c001a929 <Krnl::panic(char const*)+0x32a>
c001a933:	e4 64                	in     al,0x64
c001a935:	a8 02                	test   al,0x2
c001a937:	75 fa                	jne    c001a933 <Krnl::panic(char const*)+0x334>
c001a939:	88 d0                	mov    al,dl
c001a93b:	e6 64                	out    0x64,al
c001a93d:	fa                   	cli    
c001a93e:	f4                   	hlt    
c001a93f:	eb e8                	jmp    c001a929 <Krnl::panic(char const*)+0x32a>
c001a941:	50                   	push   eax
c001a942:	50                   	push   eax
c001a943:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a948:	68 80 bb 02 c0       	push   0xc002bb80
c001a94d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a953:	e8 1e 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a958:	58                   	pop    eax
c001a959:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a95e:	5a                   	pop    edx
c001a95f:	68 8f ba 02 c0       	push   0xc002ba8f
c001a964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96a:	e8 07 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a96f:	59                   	pop    ecx
c001a970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a975:	5b                   	pop    ebx
c001a976:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a979:	83 c0 0c             	add    eax,0xc
c001a97c:	50                   	push   eax
c001a97d:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a982:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a988:	e8 e9 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	e9 a3 fd ff ff       	jmp    c001a738 <Krnl::panic(char const*)+0x139>

c001a995 <Net::switchEndian16(unsigned short)>:
c001a995:	83 ec 04             	sub    esp,0x4
c001a998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a99c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9a4:	c1 f8 08             	sar    eax,0x8
c001a9a7:	89 c2                	mov    edx,eax
c001a9a9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9ad:	c1 e0 08             	shl    eax,0x8
c001a9b0:	09 d0                	or     eax,edx
c001a9b2:	83 c4 04             	add    esp,0x4
c001a9b5:	c3                   	ret    

c001a9b6 <Net::switchEndian32(unsigned int)>:
c001a9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ba:	c1 e8 18             	shr    eax,0x18
c001a9bd:	89 c2                	mov    edx,eax
c001a9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c3:	c1 e0 08             	shl    eax,0x8
c001a9c6:	25 00 00 ff 00       	and    eax,0xff0000
c001a9cb:	09 c2                	or     edx,eax
c001a9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d1:	c1 e8 08             	shr    eax,0x8
c001a9d4:	25 00 ff 00 00       	and    eax,0xff00
c001a9d9:	09 c2                	or     edx,eax
c001a9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9df:	c1 e0 18             	shl    eax,0x18
c001a9e2:	09 d0                	or     eax,edx
c001a9e4:	c3                   	ret    

c001a9e5 <Net::crc32Calc(unsigned char*, int)>:
c001a9e5:	83 ec 10             	sub    esp,0x10
c001a9e8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9ed:	75 07                	jne    c001a9f6 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9ef:	b8 00 00 00 00       	mov    eax,0x0
c001a9f4:	eb 7c                	jmp    c001aa72 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9f6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9fb:	7f 07                	jg     c001aa04 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9fd:	b8 00 00 00 00       	mov    eax,0x0
c001aa02:	eb 6e                	jmp    c001aa72 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa04:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa18:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa1c:	7d 4e                	jge    c001aa6c <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa26:	01 d0                	add    eax,edx
c001aa28:	8a 00                	mov    al,BYTE PTR [eax]
c001aa2a:	0f b6 c0             	movzx  eax,al
c001aa2d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa31:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa39:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa3e:	7f 26                	jg     c001aa66 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa44:	83 e0 01             	and    eax,0x1
c001aa47:	74 0d                	je     c001aa56 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4d:	d1 e8                	shr    eax,1
c001aa4f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa54:	eb 06                	jmp    c001aa5c <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5a:	d1 e8                	shr    eax,1
c001aa5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa60:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa64:	eb d3                	jmp    c001aa39 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa66:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa6a:	eb a8                	jmp    c001aa14 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa70:	f7 d0                	not    eax
c001aa72:	83 c4 10             	add    esp,0x10
c001aa75:	c3                   	ret    

c001aa76 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa76:	83 ec 1c             	sub    esp,0x1c
c001aa79:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa89:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa8e:	7f 14                	jg     c001aaa4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa94:	8d 50 01             	lea    edx,[eax+0x1]
c001aa97:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa9b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa9e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaa2:	eb e5                	jmp    c001aa89 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaa4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa8:	8d 50 01             	lea    edx,[eax+0x1]
c001aaab:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaaf:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aab2:	83 ec 04             	sub    esp,0x4
c001aab5:	6a 06                	push   0x6
c001aab7:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aabb:	50                   	push   eax
c001aabc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aac0:	e8 7f 5c fe ff       	call   c0000744 <memcpy>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aacd:	83 ec 04             	sub    esp,0x4
c001aad0:	6a 06                	push   0x6
c001aad2:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aad6:	50                   	push   eax
c001aad7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aadb:	e8 64 5c fe ff       	call   c0000744 <memcpy>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaec:	0f b7 c0             	movzx  eax,ax
c001aaef:	c1 f8 08             	sar    eax,0x8
c001aaf2:	89 c1                	mov    ecx,eax
c001aaf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf8:	8d 50 01             	lea    edx,[eax+0x1]
c001aafb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaff:	88 ca                	mov    dl,cl
c001ab01:	88 10                	mov    BYTE PTR [eax],dl
c001ab03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab0e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab12:	88 10                	mov    BYTE PTR [eax],dl
c001ab14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab1c:	83 ec 04             	sub    esp,0x4
c001ab1f:	52                   	push   edx
c001ab20:	50                   	push   eax
c001ab21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab25:	e8 1a 5c fe ff       	call   c0000744 <memcpy>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab39:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab3d:	83 ec 08             	sub    esp,0x8
c001ab40:	50                   	push   eax
c001ab41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab45:	e8 9b fe ff ff       	call   c001a9e5 <Net::crc32Calc(unsigned char*, int)>
c001ab4a:	83 c4 10             	add    esp,0x10
c001ab4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab55:	c1 e8 18             	shr    eax,0x18
c001ab58:	89 c1                	mov    ecx,eax
c001ab5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab61:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab65:	88 ca                	mov    dl,cl
c001ab67:	88 10                	mov    BYTE PTR [eax],dl
c001ab69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab6d:	c1 e8 10             	shr    eax,0x10
c001ab70:	89 c1                	mov    ecx,eax
c001ab72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab76:	8d 50 01             	lea    edx,[eax+0x1]
c001ab79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab7d:	88 ca                	mov    dl,cl
c001ab7f:	88 10                	mov    BYTE PTR [eax],dl
c001ab81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab85:	c1 e8 08             	shr    eax,0x8
c001ab88:	89 c1                	mov    ecx,eax
c001ab8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab91:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab95:	88 ca                	mov    dl,cl
c001ab97:	88 10                	mov    BYTE PTR [eax],dl
c001ab99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9d:	8d 50 01             	lea    edx,[eax+0x1]
c001aba0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aba8:	88 10                	mov    BYTE PTR [eax],dl
c001abaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abae:	83 c4 1c             	add    esp,0x1c
c001abb1:	c3                   	ret    

c001abb2 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abb2:	83 ec 2c             	sub    esp,0x2c
c001abb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abbd:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abc2:	83 ec 04             	sub    esp,0x4
c001abc5:	6a 06                	push   0x6
c001abc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abcf:	83 c0 0e             	add    eax,0xe
c001abd2:	50                   	push   eax
c001abd3:	e8 6c 5b fe ff       	call   c0000744 <memcpy>
c001abd8:	83 c4 10             	add    esp,0x10
c001abdb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abe0:	83 ec 04             	sub    esp,0x4
c001abe3:	6a 06                	push   0x6
c001abe5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abe9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abed:	83 c0 08             	add    eax,0x8
c001abf0:	50                   	push   eax
c001abf1:	e8 4e 5b fe ff       	call   c0000744 <memcpy>
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac02:	8d 50 01             	lea    edx,[eax+0x1]
c001ac05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac09:	8a 00                	mov    al,BYTE PTR [eax]
c001ac0b:	0f b6 c0             	movzx  eax,al
c001ac0e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac17:	8d 50 01             	lea    edx,[eax+0x1]
c001ac1a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac1e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac20:	0f b6 c0             	movzx  eax,al
c001ac23:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac28:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac2d:	c1 e0 08             	shl    eax,0x8
c001ac30:	89 c2                	mov    edx,eax
c001ac32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac36:	09 d0                	or     eax,edx
c001ac38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac3c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac40:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac45:	75 3a                	jne    c001ac81 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac4b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac4e:	66 3d dc 05          	cmp    ax,0x5dc
c001ac52:	77 10                	ja     c001ac64 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac5b:	0f b7 c0             	movzx  eax,ax
c001ac5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac62:	eb 1d                	jmp    c001ac81 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	68 58 bc 02 c0       	push   0xc002bc58
c001ac6c:	e8 ed 82 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac78:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac7c:	e9 c0 00 00 00       	jmp    c001ad41 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac81:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac89:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac8b:	83 ec 04             	sub    esp,0x4
c001ac8e:	52                   	push   edx
c001ac8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac93:	50                   	push   eax
c001ac94:	e8 ab 5a fe ff       	call   c0000744 <memcpy>
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aca0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aca4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca8:	8d 50 01             	lea    edx,[eax+0x1]
c001acab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acaf:	8a 00                	mov    al,BYTE PTR [eax]
c001acb1:	0f b6 c0             	movzx  eax,al
c001acb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acbc:	8d 50 01             	lea    edx,[eax+0x1]
c001acbf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acc3:	8a 00                	mov    al,BYTE PTR [eax]
c001acc5:	0f b6 c0             	movzx  eax,al
c001acc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001accc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd0:	8d 50 01             	lea    edx,[eax+0x1]
c001acd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd7:	8a 00                	mov    al,BYTE PTR [eax]
c001acd9:	0f b6 c0             	movzx  eax,al
c001acdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ace0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace4:	8d 50 01             	lea    edx,[eax+0x1]
c001ace7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aceb:	8a 00                	mov    al,BYTE PTR [eax]
c001aced:	0f b6 c0             	movzx  eax,al
c001acf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf8:	c1 e0 18             	shl    eax,0x18
c001acfb:	89 c2                	mov    edx,eax
c001acfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad01:	c1 e0 10             	shl    eax,0x10
c001ad04:	09 c2                	or     edx,eax
c001ad06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad0a:	c1 e0 08             	shl    eax,0x8
c001ad0d:	09 d0                	or     eax,edx
c001ad0f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad1b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad1f:	83 e8 04             	sub    eax,0x4
c001ad22:	83 ec 08             	sub    esp,0x8
c001ad25:	50                   	push   eax
c001ad26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad2a:	e8 b6 fc ff ff       	call   c001a9e5 <Net::crc32Calc(unsigned char*, int)>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad36:	0f 94 c2             	sete   dl
c001ad39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad3d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad40:	90                   	nop
c001ad41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad45:	83 c4 2c             	add    esp,0x2c
c001ad48:	c2 04 00             	ret    0x4

c001ad4b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad4b:	55                   	push   ebp
c001ad4c:	57                   	push   edi
c001ad4d:	56                   	push   esi
c001ad4e:	53                   	push   ebx
c001ad4f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad55:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad5c:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad5e:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad61:	80 fb 40             	cmp    bl,0x40
c001ad64:	75 1b                	jne    c001ad81 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad66:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad68:	84 d2                	test   dl,dl
c001ad6a:	0f 84 f1 00 00 00    	je     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad70:	8d 46 01             	lea    eax,[esi+0x1]
c001ad73:	80 fa 3a             	cmp    dl,0x3a
c001ad76:	74 04                	je     c001ad7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad78:	89 c6                	mov    esi,eax
c001ad7a:	eb ea                	jmp    c001ad66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad7f:	89 c6                	mov    esi,eax
c001ad81:	50                   	push   eax
c001ad82:	6a 40                	push   0x40
c001ad84:	6a 00                	push   0x0
c001ad86:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad8a:	50                   	push   eax
c001ad8b:	e8 e8 59 fe ff       	call   c0000778 <memset>
c001ad90:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad97:	31 c0                	xor    eax,eax
c001ad99:	83 c4 10             	add    esp,0x10
c001ad9c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad9e:	84 c9                	test   cl,cl
c001ada0:	0f 84 bb 00 00 00    	je     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada6:	3d c7 00 00 00       	cmp    eax,0xc7
c001adab:	0f 8f b0 00 00 00    	jg     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb1:	80 f9 0a             	cmp    cl,0xa
c001adb4:	0f 85 98 00 00 00    	jne    c001ae52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adba:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adbf:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adc3:	a8 df                	test   al,0xdf
c001adc5:	0f 94 c1             	sete   cl
c001adc8:	3c 23                	cmp    al,0x23
c001adca:	0f 94 c2             	sete   dl
c001adcd:	08 d1                	or     cl,dl
c001adcf:	75 4a                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add1:	8d 50 f7             	lea    edx,[eax-0x9]
c001add4:	80 fa 01             	cmp    dl,0x1
c001add7:	76 42                	jbe    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add9:	3c 5b                	cmp    al,0x5b
c001addb:	75 42                	jne    c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001addd:	80 fb 40             	cmp    bl,0x40
c001ade0:	75 39                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ade9:	52                   	push   edx
c001adea:	e8 a5 59 fe ff       	call   c0000794 <strlen>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	83 f8 3f             	cmp    eax,0x3f
c001adf5:	77 6a                	ja     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf7:	50                   	push   eax
c001adf8:	50                   	push   eax
c001adf9:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adfd:	52                   	push   edx
c001adfe:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae02:	52                   	push   edx
c001ae03:	e8 2c 5a fe ff       	call   c0000834 <strcpy>
c001ae08:	58                   	pop    eax
c001ae09:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae0d:	52                   	push   edx
c001ae0e:	e8 81 59 fe ff       	call   c0000794 <strlen>
c001ae13:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	31 d2                	xor    edx,edx
c001ae1d:	eb 3a                	jmp    c001ae59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae1f:	80 fb 40             	cmp    bl,0x40
c001ae22:	74 06                	je     c001ae2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae24:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae28:	eb 20                	jmp    c001ae4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae2a:	50                   	push   eax
c001ae2b:	50                   	push   eax
c001ae2c:	55                   	push   ebp
c001ae2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae31:	50                   	push   eax
c001ae32:	e8 89 5a fe ff       	call   c00008c0 <strcmp>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	85 c0                	test   eax,eax
c001ae3c:	75 dd                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae3e:	eb e4                	jmp    c001ae24 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae40:	8d 50 01             	lea    edx,[eax+0x1]
c001ae43:	80 f9 3d             	cmp    cl,0x3d
c001ae46:	74 1d                	je     c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae48:	89 d0                	mov    eax,edx
c001ae4a:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae4c:	84 c9                	test   cl,cl
c001ae4e:	75 f0                	jne    c001ae40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae50:	eb 0f                	jmp    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae52:	8d 50 01             	lea    edx,[eax+0x1]
c001ae55:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae59:	47                   	inc    edi
c001ae5a:	89 d0                	mov    eax,edx
c001ae5c:	e9 3b ff ff ff       	jmp    c001ad9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae61:	31 c0                	xor    eax,eax
c001ae63:	eb 33                	jmp    c001ae98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae6c:	50                   	push   eax
c001ae6d:	50                   	push   eax
c001ae6e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae72:	50                   	push   eax
c001ae73:	56                   	push   esi
c001ae74:	e8 47 5a fe ff       	call   c00008c0 <strcmp>
c001ae79:	83 c4 10             	add    esp,0x10
c001ae7c:	85 c0                	test   eax,eax
c001ae7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae82:	75 97                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae84:	51                   	push   ecx
c001ae85:	51                   	push   ecx
c001ae86:	52                   	push   edx
c001ae87:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae8e:	e8 a1 59 fe ff       	call   c0000834 <strcpy>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	b0 01                	mov    al,0x1
c001ae98:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae9e:	5b                   	pop    ebx
c001ae9f:	5e                   	pop    esi
c001aea0:	5f                   	pop    edi
c001aea1:	5d                   	pop    ebp
c001aea2:	c3                   	ret    

c001aea3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aea3:	57                   	push   edi
c001aea4:	56                   	push   esi
c001aea5:	53                   	push   ebx
c001aea6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aeac:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aeb3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeba:	53                   	push   ebx
c001aebb:	e8 d4 58 fe ff       	call   c0000794 <strlen>
c001aec0:	89 34 24             	mov    DWORD PTR [esp],esi
c001aec3:	89 c7                	mov    edi,eax
c001aec5:	e8 ca 58 fe ff       	call   c0000794 <strlen>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aed1:	3d ff 00 00 00       	cmp    eax,0xff
c001aed6:	0f 87 d3 00 00 00    	ja     c001afaf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aedc:	57                   	push   edi
c001aedd:	57                   	push   edi
c001aede:	56                   	push   esi
c001aedf:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aee3:	56                   	push   esi
c001aee4:	e8 4b 59 fe ff       	call   c0000834 <strcpy>
c001aee9:	58                   	pop    eax
c001aeea:	5a                   	pop    edx
c001aeeb:	68 a1 c1 02 c0       	push   0xc002c1a1
c001aef0:	56                   	push   esi
c001aef1:	e8 7e 5a fe ff       	call   c0000974 <strcat>
c001aef6:	59                   	pop    ecx
c001aef7:	5f                   	pop    edi
c001aef8:	53                   	push   ebx
c001aef9:	56                   	push   esi
c001aefa:	e8 75 5a fe ff       	call   c0000974 <strcat>
c001aeff:	58                   	pop    eax
c001af00:	5a                   	pop    edx
c001af01:	68 a4 bc 02 c0       	push   0xc002bca4
c001af06:	56                   	push   esi
c001af07:	e8 68 5a fe ff       	call   c0000974 <strcat>
c001af0c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af13:	e8 2b 49 ff ff       	call   c000f843 <malloc>
c001af18:	83 c4 0c             	add    esp,0xc
c001af1b:	89 c3                	mov    ebx,eax
c001af1d:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001af23:	56                   	push   esi
c001af24:	50                   	push   eax
c001af25:	e8 8c 85 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	85 db                	test   ebx,ebx
c001af2f:	74 7e                	je     c001afaf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af31:	51                   	push   ecx
c001af32:	51                   	push   ecx
c001af33:	6a 01                	push   0x1
c001af35:	53                   	push   ebx
c001af36:	e8 df 85 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001af3b:	83 c4 10             	add    esp,0x10
c001af3e:	85 c0                	test   eax,eax
c001af40:	74 08                	je     c001af4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af42:	83 ec 0c             	sub    esp,0xc
c001af45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af47:	53                   	push   ebx
c001af48:	eb 5f                	jmp    c001afa9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af4a:	52                   	push   edx
c001af4b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af4f:	50                   	push   eax
c001af50:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af54:	50                   	push   eax
c001af55:	53                   	push   ebx
c001af56:	e8 6b 88 ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c001af5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	89 c1                	mov    ecx,eax
c001af64:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af68:	74 31                	je     c001af9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af6a:	83 ec 0c             	sub    esp,0xc
c001af6d:	50                   	push   eax
c001af6e:	e8 d0 48 ff ff       	call   c000f843 <malloc>
c001af73:	89 c6                	mov    esi,eax
c001af75:	58                   	pop    eax
c001af76:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af78:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af7c:	52                   	push   edx
c001af7d:	56                   	push   esi
c001af7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af86:	53                   	push   ebx
c001af87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af8a:	83 c4 20             	add    esp,0x20
c001af8d:	85 c0                	test   eax,eax
c001af8f:	75 0a                	jne    c001af9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af95:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af99:	74 18                	je     c001afb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af9b:	83 ec 0c             	sub    esp,0xc
c001af9e:	53                   	push   ebx
c001af9f:	e8 d4 85 ff ff       	call   c0013578 <File::close()>
c001afa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	31 c0                	xor    eax,eax
c001afb1:	eb 3b                	jmp    c001afee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afb3:	83 ec 0c             	sub    esp,0xc
c001afb6:	53                   	push   ebx
c001afb7:	e8 bc 85 ff ff       	call   c0013578 <File::close()>
c001afbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afc4:	83 c4 0c             	add    esp,0xc
c001afc7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afce:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afd5:	56                   	push   esi
c001afd6:	e8 70 fd ff ff       	call   c001ad4b <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afdb:	89 34 24             	mov    DWORD PTR [esp],esi
c001afde:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afe2:	e8 6c 48 ff ff       	call   c000f853 <free>
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afee:	81 c4 20 01 00 00    	add    esp,0x120
c001aff4:	5b                   	pop    ebx
c001aff5:	5e                   	pop    esi
c001aff6:	5f                   	pop    edi
c001aff7:	c3                   	ret    

c001aff8 <Reg::getLine(char*, char*, char*)>:
c001aff8:	57                   	push   edi
c001aff9:	56                   	push   esi
c001affa:	53                   	push   ebx
c001affb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b003:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b007:	57                   	push   edi
c001b008:	56                   	push   esi
c001b009:	53                   	push   ebx
c001b00a:	68 a9 bc 02 c0       	push   0xc002bca9
c001b00f:	e8 8f fe ff ff       	call   c001aea3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b014:	83 c4 10             	add    esp,0x10
c001b017:	84 c0                	test   al,al
c001b019:	75 10                	jne    c001b02b <Reg::getLine(char*, char*, char*)+0x33>
c001b01b:	57                   	push   edi
c001b01c:	56                   	push   esi
c001b01d:	53                   	push   ebx
c001b01e:	68 ce bc 02 c0       	push   0xc002bcce
c001b023:	e8 7b fe ff ff       	call   c001aea3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	5b                   	pop    ebx
c001b02c:	5e                   	pop    esi
c001b02d:	5f                   	pop    edi
c001b02e:	c3                   	ret    

c001b02f <Reg::readInt(char*, char*, int*)>:
c001b02f:	55                   	push   ebp
c001b030:	57                   	push   edi
c001b031:	56                   	push   esi
c001b032:	53                   	push   ebx
c001b033:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b039:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b03d:	57                   	push   edi
c001b03e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b045:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b04c:	e8 a7 ff ff ff       	call   c001aff8 <Reg::getLine(char*, char*, char*)>
c001b051:	83 c4 10             	add    esp,0x10
c001b054:	84 c0                	test   al,al
c001b056:	0f 84 b3 00 00 00    	je     c001b10f <Reg::readInt(char*, char*, int*)+0xe0>
c001b05c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b060:	80 fa 2b             	cmp    dl,0x2b
c001b063:	74 0c                	je     c001b071 <Reg::readInt(char*, char*, int*)+0x42>
c001b065:	80 fa 2d             	cmp    dl,0x2d
c001b068:	75 0e                	jne    c001b078 <Reg::readInt(char*, char*, int*)+0x49>
c001b06a:	ba 01 00 00 00       	mov    edx,0x1
c001b06f:	eb 0b                	jmp    c001b07c <Reg::readInt(char*, char*, int*)+0x4d>
c001b071:	ba 01 00 00 00       	mov    edx,0x1
c001b076:	eb 02                	jmp    c001b07a <Reg::readInt(char*, char*, int*)+0x4b>
c001b078:	31 d2                	xor    edx,edx
c001b07a:	31 c0                	xor    eax,eax
c001b07c:	be 0a 00 00 00       	mov    esi,0xa
c001b081:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b086:	75 20                	jne    c001b0a8 <Reg::readInt(char*, char*, int*)+0x79>
c001b088:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b08c:	80 f9 78             	cmp    cl,0x78
c001b08f:	75 0a                	jne    c001b09b <Reg::readInt(char*, char*, int*)+0x6c>
c001b091:	83 c2 02             	add    edx,0x2
c001b094:	be 10 00 00 00       	mov    esi,0x10
c001b099:	eb 0d                	jmp    c001b0a8 <Reg::readInt(char*, char*, int*)+0x79>
c001b09b:	80 f9 62             	cmp    cl,0x62
c001b09e:	75 08                	jne    c001b0a8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0a0:	83 c2 02             	add    edx,0x2
c001b0a3:	be 02 00 00 00       	mov    esi,0x2
c001b0a8:	01 d7                	add    edi,edx
c001b0aa:	31 d2                	xor    edx,edx
c001b0ac:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0ae:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0b2:	80 fb 0d             	cmp    bl,0xd
c001b0b5:	0f 94 c3             	sete   bl
c001b0b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0bd:	0f 94 c1             	sete   cl
c001b0c0:	08 cb                	or     bl,cl
c001b0c2:	75 3a                	jne    c001b0fe <Reg::readInt(char*, char*, int*)+0xcf>
c001b0c4:	0f af d6             	imul   edx,esi
c001b0c7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0cc:	83 fe 10             	cmp    esi,0x10
c001b0cf:	75 26                	jne    c001b0f7 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0d1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0d5:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0d8:	89 e9                	mov    ecx,ebp
c001b0da:	80 f9 05             	cmp    cl,0x5
c001b0dd:	77 06                	ja     c001b0e5 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0df:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0e3:	eb 16                	jmp    c001b0fb <Reg::readInt(char*, char*, int*)+0xcc>
c001b0e5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0e9:	83 e9 61             	sub    ecx,0x61
c001b0ec:	80 f9 05             	cmp    cl,0x5
c001b0ef:	77 06                	ja     c001b0f7 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0f1:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0f5:	eb 04                	jmp    c001b0fb <Reg::readInt(char*, char*, int*)+0xcc>
c001b0f7:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0fb:	47                   	inc    edi
c001b0fc:	eb ae                	jmp    c001b0ac <Reg::readInt(char*, char*, int*)+0x7d>
c001b0fe:	84 c0                	test   al,al
c001b100:	74 02                	je     c001b104 <Reg::readInt(char*, char*, int*)+0xd5>
c001b102:	f7 da                	neg    edx
c001b104:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b10b:	89 10                	mov    DWORD PTR [eax],edx
c001b10d:	88 d8                	mov    al,bl
c001b10f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b115:	5b                   	pop    ebx
c001b116:	5e                   	pop    esi
c001b117:	5f                   	pop    edi
c001b118:	5d                   	pop    ebp
c001b119:	c3                   	ret    

c001b11a <Reg::readString(char*, char*, char*, int)>:
c001b11a:	57                   	push   edi
c001b11b:	56                   	push   esi
c001b11c:	53                   	push   ebx
c001b11d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b123:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b12a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b12e:	57                   	push   edi
c001b12f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b136:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b13d:	e8 b6 fe ff ff       	call   c001aff8 <Reg::getLine(char*, char*, char*)>
c001b142:	83 c4 10             	add    esp,0x10
c001b145:	89 c6                	mov    esi,eax
c001b147:	84 c0                	test   al,al
c001b149:	74 44                	je     c001b18f <Reg::readString(char*, char*, char*, int)+0x75>
c001b14b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b152:	31 c0                	xor    eax,eax
c001b154:	4a                   	dec    edx
c001b155:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b158:	84 c9                	test   cl,cl
c001b15a:	74 0f                	je     c001b16b <Reg::readString(char*, char*, char*, int)+0x51>
c001b15c:	39 c2                	cmp    edx,eax
c001b15e:	7e 0b                	jle    c001b16b <Reg::readString(char*, char*, char*, int)+0x51>
c001b160:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b163:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b168:	40                   	inc    eax
c001b169:	eb ea                	jmp    c001b155 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b16b:	83 ec 0c             	sub    esp,0xc
c001b16e:	53                   	push   ebx
c001b16f:	e8 20 56 fe ff       	call   c0000794 <strlen>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b17c:	75 11                	jne    c001b18f <Reg::readString(char*, char*, char*, int)+0x75>
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	53                   	push   ebx
c001b182:	e8 0d 56 fe ff       	call   c0000794 <strlen>
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b18f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b195:	89 f0                	mov    eax,esi
c001b197:	5b                   	pop    ebx
c001b198:	5e                   	pop    esi
c001b199:	5f                   	pop    edi
c001b19a:	c3                   	ret    

c001b19b <Reg::readBool(char*, char*, bool*)>:
c001b19b:	83 ec 20             	sub    esp,0x20
c001b19e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1a2:	50                   	push   eax
c001b1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ab:	e8 7f fe ff ff       	call   c001b02f <Reg::readInt(char*, char*, int*)>
c001b1b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1b5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1b9:	0f 95 02             	setne  BYTE PTR [edx]
c001b1bc:	83 c4 2c             	add    esp,0x2c
c001b1bf:	c3                   	ret    

c001b1c0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1c0:	53                   	push   ebx
c001b1c1:	83 ec 1c             	sub    esp,0x1c
c001b1c4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1cc:	50                   	push   eax
c001b1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d5:	e8 c1 ff ff ff       	call   c001b19b <Reg::readBool(char*, char*, bool*)>
c001b1da:	83 c4 10             	add    esp,0x10
c001b1dd:	84 c0                	test   al,al
c001b1df:	74 04                	je     c001b1e5 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1e1:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1e5:	88 d8                	mov    al,bl
c001b1e7:	83 c4 18             	add    esp,0x18
c001b1ea:	5b                   	pop    ebx
c001b1eb:	c3                   	ret    

c001b1ec <Reg::readIntWithDefault(char*, char*, int)>:
c001b1ec:	53                   	push   ebx
c001b1ed:	83 ec 1c             	sub    esp,0x1c
c001b1f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1f8:	50                   	push   eax
c001b1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b201:	e8 29 fe ff ff       	call   c001b02f <Reg::readInt(char*, char*, int*)>
c001b206:	83 c4 10             	add    esp,0x10
c001b209:	84 c0                	test   al,al
c001b20b:	74 04                	je     c001b211 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b20d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b211:	89 d8                	mov    eax,ebx
c001b213:	83 c4 18             	add    esp,0x18
c001b216:	5b                   	pop    ebx
c001b217:	c3                   	ret    

c001b218 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b218:	57                   	push   edi
c001b219:	56                   	push   esi
c001b21a:	53                   	push   ebx
c001b21b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b21f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b227:	56                   	push   esi
c001b228:	53                   	push   ebx
c001b229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b231:	e8 e4 fe ff ff       	call   c001b11a <Reg::readString(char*, char*, char*, int)>
c001b236:	83 c4 10             	add    esp,0x10
c001b239:	84 c0                	test   al,al
c001b23b:	75 1b                	jne    c001b258 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b23d:	50                   	push   eax
c001b23e:	56                   	push   esi
c001b23f:	4e                   	dec    esi
c001b240:	6a 00                	push   0x0
c001b242:	53                   	push   ebx
c001b243:	e8 30 55 fe ff       	call   c0000778 <memset>
c001b248:	83 c4 0c             	add    esp,0xc
c001b24b:	56                   	push   esi
c001b24c:	57                   	push   edi
c001b24d:	53                   	push   ebx
c001b24e:	89 fb                	mov    ebx,edi
c001b250:	e8 ef 54 fe ff       	call   c0000744 <memcpy>
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	89 d8                	mov    eax,ebx
c001b25a:	5b                   	pop    ebx
c001b25b:	5e                   	pop    esi
c001b25c:	5f                   	pop    edi
c001b25d:	c3                   	ret    

c001b25e <Sys::eject(regs*)>:
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	83 ca ff             	or     edx,0xffffffff
c001b264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b268:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b26b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b270:	83 e9 41             	sub    ecx,0x41
c001b273:	83 f9 19             	cmp    ecx,0x19
c001b276:	77 18                	ja     c001b290 <Sys::eject(regs*)+0x32>
c001b278:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001b27f:	85 c9                	test   ecx,ecx
c001b281:	74 0d                	je     c001b290 <Sys::eject(regs*)+0x32>
c001b283:	83 ec 0c             	sub    esp,0xc
c001b286:	51                   	push   ecx
c001b287:	e8 78 b4 ff ff       	call   c0016704 <LogicalDisk::eject()>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	99                   	cdq    
c001b290:	83 c4 0c             	add    esp,0xc
c001b293:	c3                   	ret    

c001b294 <Sys::exit(regs*)>:
c001b294:	83 ec 18             	sub    esp,0x18
c001b297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b29b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29e:	e8 7a 35 00 00       	call   c001e81d <terminateTask(int)>
c001b2a3:	83 c8 ff             	or     eax,0xffffffff
c001b2a6:	83 c4 1c             	add    esp,0x1c
c001b2a9:	89 c2                	mov    edx,eax
c001b2ab:	c3                   	ret    

c001b2ac <Sys::getCwd(regs*)>:
c001b2ac:	83 ec 10             	sub    esp,0x10
c001b2af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2b3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2c1:	e8 f2 7f ff ff       	call   c00132b8 <Fs::getcwd(Process*, char*, int)>
c001b2c6:	83 c4 1c             	add    esp,0x1c
c001b2c9:	99                   	cdq    
c001b2ca:	c3                   	ret    

c001b2cb <Sys::getPID(regs*)>:
c001b2cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2d5:	99                   	cdq    
c001b2d6:	c3                   	ret    

c001b2d7 <Sys::getRAMData(regs*)>:
c001b2d7:	8b 0d 14 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e414
c001b2dd:	6b 05 10 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e410,0x64
c001b2e4:	99                   	cdq    
c001b2e5:	f7 f9                	idiv   ecx
c001b2e7:	c1 e0 18             	shl    eax,0x18
c001b2ea:	09 c8                	or     eax,ecx
c001b2ec:	99                   	cdq    
c001b2ed:	c3                   	ret    

c001b2ee <Sys::loadDLL(regs*)>:
c001b2ee:	56                   	push   esi
c001b2ef:	53                   	push   ebx
c001b2f0:	31 d2                	xor    edx,edx
c001b2f2:	51                   	push   ecx
c001b2f3:	b8 01 00 00 00       	mov    eax,0x1
c001b2f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2fc:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b300:	0f 84 8c 00 00 00    	je     c001b392 <Sys::loadDLL(regs*)+0xa4>
c001b306:	83 ec 0c             	sub    esp,0xc
c001b309:	68 14 01 00 00       	push   0x114
c001b30e:	e8 30 45 ff ff       	call   c000f843 <malloc>
c001b313:	83 c4 0c             	add    esp,0xc
c001b316:	89 c3                	mov    ebx,eax
c001b318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b320:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b323:	53                   	push   ebx
c001b324:	e8 8d 81 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001b329:	83 c4 10             	add    esp,0x10
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	b8 02 00 00 00       	mov    eax,0x2
c001b333:	85 db                	test   ebx,ebx
c001b335:	74 5b                	je     c001b392 <Sys::loadDLL(regs*)+0xa4>
c001b337:	83 ec 0c             	sub    esp,0xc
c001b33a:	53                   	push   ebx
c001b33b:	e8 48 84 ff ff       	call   c0013788 <File::exists()>
c001b340:	83 c4 10             	add    esp,0x10
c001b343:	84 c0                	test   al,al
c001b345:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b347:	75 11                	jne    c001b35a <Sys::loadDLL(regs*)+0x6c>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	53                   	push   ebx
c001b34d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	b8 03 00 00 00       	mov    eax,0x3
c001b358:	eb 36                	jmp    c001b390 <Sys::loadDLL(regs*)+0xa2>
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	53                   	push   ebx
c001b35e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b361:	58                   	pop    eax
c001b362:	5a                   	pop    edx
c001b363:	6a 00                	push   0x0
c001b365:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b368:	e8 c5 23 00 00       	call   c001d732 <Thr::loadDLL(char const*, bool)>
c001b36d:	83 c4 10             	add    esp,0x10
c001b370:	89 c1                	mov    ecx,eax
c001b372:	31 d2                	xor    edx,edx
c001b374:	b8 04 00 00 00       	mov    eax,0x4
c001b379:	85 c9                	test   ecx,ecx
c001b37b:	74 15                	je     c001b392 <Sys::loadDLL(regs*)+0xa4>
c001b37d:	53                   	push   ebx
c001b37e:	53                   	push   ebx
c001b37f:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c001b385:	51                   	push   ecx
c001b386:	e8 db 25 00 00       	call   c001d966 <Thr::executeDLL(unsigned long, void*)>
c001b38b:	83 c4 10             	add    esp,0x10
c001b38e:	31 c0                	xor    eax,eax
c001b390:	31 d2                	xor    edx,edx
c001b392:	59                   	pop    ecx
c001b393:	5b                   	pop    ebx
c001b394:	5e                   	pop    esi
c001b395:	c3                   	ret    

c001b396 <Sys::read(regs*)>:
c001b396:	57                   	push   edi
c001b397:	56                   	push   esi
c001b398:	53                   	push   ebx
c001b399:	83 ec 10             	sub    esp,0x10
c001b39c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3a3:	83 f8 02             	cmp    eax,0x2
c001b3a6:	77 10                	ja     c001b3b8 <Sys::read(regs*)+0x22>
c001b3a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3b6:	eb 0e                	jmp    c001b3c6 <Sys::read(regs*)+0x30>
c001b3b8:	83 ec 0c             	sub    esp,0xc
c001b3bb:	50                   	push   eax
c001b3bc:	e8 8e 66 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b3c1:	83 c4 10             	add    esp,0x10
c001b3c4:	89 c1                	mov    ecx,eax
c001b3c6:	83 c8 ff             	or     eax,0xffffffff
c001b3c9:	85 c9                	test   ecx,ecx
c001b3cb:	89 c2                	mov    edx,eax
c001b3cd:	74 28                	je     c001b3f7 <Sys::read(regs*)+0x61>
c001b3cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d7:	31 ff                	xor    edi,edi
c001b3d9:	83 ec 0c             	sub    esp,0xc
c001b3dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3de:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3e2:	52                   	push   edx
c001b3e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e9:	57                   	push   edi
c001b3ea:	56                   	push   esi
c001b3eb:	51                   	push   ecx
c001b3ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3f3:	83 c4 20             	add    esp,0x20
c001b3f6:	99                   	cdq    
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	5b                   	pop    ebx
c001b3fb:	5e                   	pop    esi
c001b3fc:	5f                   	pop    edi
c001b3fd:	c3                   	ret    

c001b3fe <Sys::sbrk(regs*)>:
c001b3fe:	56                   	push   esi
c001b3ff:	53                   	push   ebx
c001b400:	50                   	push   eax
c001b401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b40a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b40d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b410:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b416:	85 db                	test   ebx,ebx
c001b418:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b41b:	74 02                	je     c001b41f <Sys::sbrk(regs*)+0x21>
c001b41d:	79 06                	jns    c001b425 <Sys::sbrk(regs*)+0x27>
c001b41f:	89 f0                	mov    eax,esi
c001b421:	31 d2                	xor    edx,edx
c001b423:	eb 2a                	jmp    c001b44f <Sys::sbrk(regs*)+0x51>
c001b425:	83 c8 ff             	or     eax,0xffffffff
c001b428:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b42e:	89 c2                	mov    edx,eax
c001b430:	77 1d                	ja     c001b44f <Sys::sbrk(regs*)+0x51>
c001b432:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b438:	50                   	push   eax
c001b439:	c1 ea 0c             	shr    edx,0xc
c001b43c:	68 07 04 00 00       	push   0x407
c001b441:	52                   	push   edx
c001b442:	51                   	push   ecx
c001b443:	e8 34 70 ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001b448:	89 f0                	mov    eax,esi
c001b44a:	31 d2                	xor    edx,edx
c001b44c:	83 c4 10             	add    esp,0x10
c001b44f:	59                   	pop    ecx
c001b450:	5b                   	pop    ebx
c001b451:	5e                   	pop    esi
c001b452:	c3                   	ret    

c001b453 <Sys::setCwd(regs*)>:
c001b453:	83 ec 14             	sub    esp,0x14
c001b456:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b45a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b45d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b462:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b465:	e8 bd 83 ff ff       	call   c0013827 <Fs::setcwd(Process*, char*)>
c001b46a:	83 c4 1c             	add    esp,0x1c
c001b46d:	99                   	cdq    
c001b46e:	c3                   	ret    

c001b46f <Sys::setTime(regs*)>:
c001b46f:	55                   	push   ebp
c001b470:	31 d2                	xor    edx,edx
c001b472:	57                   	push   edi
c001b473:	bf 18 00 00 00       	mov    edi,0x18
c001b478:	56                   	push   esi
c001b479:	53                   	push   ebx
c001b47a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b47f:	83 ec 30             	sub    esp,0x30
c001b482:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b486:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b489:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b48c:	f7 f3                	div    ebx
c001b48e:	89 d6                	mov    esi,edx
c001b490:	31 d2                	xor    edx,edx
c001b492:	f7 f3                	div    ebx
c001b494:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b497:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b49b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4a0:	31 d2                	xor    edx,edx
c001b4a2:	f7 f3                	div    ebx
c001b4a4:	31 d2                	xor    edx,edx
c001b4a6:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4ab:	f7 f7                	div    edi
c001b4ad:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4b4:	0f b7 cd             	movzx  ecx,bp
c001b4b7:	56                   	push   esi
c001b4b8:	89 c7                	mov    edi,eax
c001b4ba:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4be:	c1 e6 10             	shl    esi,0x10
c001b4c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4c5:	83 e7 1f             	and    edi,0x1f
c001b4c8:	51                   	push   ecx
c001b4c9:	47                   	inc    edi
c001b4ca:	c1 e8 05             	shr    eax,0x5
c001b4cd:	31 d2                	xor    edx,edx
c001b4cf:	f7 f3                	div    ebx
c001b4d1:	31 db                	xor    ebx,ebx
c001b4d3:	52                   	push   edx
c001b4d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4d8:	57                   	push   edi
c001b4d9:	68 e9 bc 02 c0       	push   0xc002bce9
c001b4de:	e8 7b 7a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b4e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4e7:	89 f8                	mov    eax,edi
c001b4e9:	31 c9                	xor    ecx,ecx
c001b4eb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4ef:	88 c1                	mov    cl,al
c001b4f1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4f7:	88 d5                	mov    ch,dl
c001b4f9:	c1 e0 10             	shl    eax,0x10
c001b4fc:	0f b7 d1             	movzx  edx,cx
c001b4ff:	09 c2                	or     edx,eax
c001b501:	89 d8                	mov    eax,ebx
c001b503:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b508:	09 f0                	or     eax,esi
c001b50a:	89 c3                	mov    ebx,eax
c001b50c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b510:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b514:	83 c4 18             	add    esp,0x18
c001b517:	53                   	push   ebx
c001b518:	52                   	push   edx
c001b519:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b51d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b521:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b525:	e8 17 8a ff ff       	call   c0013f41 <datetimeToSeconds(datetime_t)>
c001b52a:	83 c4 0c             	add    esp,0xc
c001b52d:	52                   	push   edx
c001b52e:	50                   	push   eax
c001b52f:	56                   	push   esi
c001b530:	e8 93 8b ff ff       	call   c00140c8 <secondsToDatetime(unsigned long long)>
c001b535:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b539:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b53d:	51                   	push   ecx
c001b53e:	89 d6                	mov    esi,edx
c001b540:	51                   	push   ecx
c001b541:	c1 ee 10             	shr    esi,0x10
c001b544:	89 f3                	mov    ebx,esi
c001b546:	0f b6 f3             	movzx  esi,bl
c001b549:	56                   	push   esi
c001b54a:	0f b6 f6             	movzx  esi,dh
c001b54d:	0f b6 d2             	movzx  edx,dl
c001b550:	56                   	push   esi
c001b551:	52                   	push   edx
c001b552:	89 c2                	mov    edx,eax
c001b554:	c1 ea 10             	shr    edx,0x10
c001b557:	52                   	push   edx
c001b558:	0f b6 d4             	movzx  edx,ah
c001b55b:	0f b6 c0             	movzx  eax,al
c001b55e:	52                   	push   edx
c001b55f:	50                   	push   eax
c001b560:	68 05 bd 02 c0       	push   0xc002bd05
c001b565:	e8 f4 79 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b56a:	83 c4 2c             	add    esp,0x2c
c001b56d:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001b572:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b576:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b57a:	53                   	push   ebx
c001b57b:	51                   	push   ecx
c001b57c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b582:	e8 e1 8a ff ff       	call   c0014068 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b587:	83 f0 01             	xor    eax,0x1
c001b58a:	31 d2                	xor    edx,edx
c001b58c:	0f b6 c0             	movzx  eax,al
c001b58f:	83 c4 3c             	add    esp,0x3c
c001b592:	5b                   	pop    ebx
c001b593:	5e                   	pop    esi
c001b594:	5f                   	pop    edi
c001b595:	5d                   	pop    ebp
c001b596:	c3                   	ret    

c001b597 <Sys::timezone(regs*)>:
c001b597:	53                   	push   ebx
c001b598:	83 ec 08             	sub    esp,0x8
c001b59b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b59f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5a3:	75 17                	jne    c001b5bc <Sys::timezone(regs*)+0x25>
c001b5a5:	83 ec 0c             	sub    esp,0xc
c001b5a8:	68 21 bd 02 c0       	push   0xc002bd21
c001b5ad:	e8 ac 79 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b5b2:	83 c8 ff             	or     eax,0xffffffff
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	89 c2                	mov    edx,eax
c001b5ba:	eb 20                	jmp    c001b5dc <Sys::timezone(regs*)+0x45>
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	68 59 bd 02 c0       	push   0xc002bd59
c001b5c4:	e8 95 79 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b5c9:	58                   	pop    eax
c001b5ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5cd:	e8 f8 87 ff ff       	call   c0013dca <User::loadClockSettings(int)>
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	b8 01 00 00 00       	mov    eax,0x1
c001b5da:	31 d2                	xor    edx,edx
c001b5dc:	83 c4 08             	add    esp,0x8
c001b5df:	5b                   	pop    ebx
c001b5e0:	c3                   	ret    

c001b5e1 <Sys::write(regs*)>:
c001b5e1:	57                   	push   edi
c001b5e2:	56                   	push   esi
c001b5e3:	53                   	push   ebx
c001b5e4:	83 ec 10             	sub    esp,0x10
c001b5e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ee:	83 f8 02             	cmp    eax,0x2
c001b5f1:	77 10                	ja     c001b603 <Sys::write(regs*)+0x22>
c001b5f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5fb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b601:	eb 0e                	jmp    c001b611 <Sys::write(regs*)+0x30>
c001b603:	83 ec 0c             	sub    esp,0xc
c001b606:	50                   	push   eax
c001b607:	e8 43 64 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	89 c1                	mov    ecx,eax
c001b611:	83 c8 ff             	or     eax,0xffffffff
c001b614:	85 c9                	test   ecx,ecx
c001b616:	89 c2                	mov    edx,eax
c001b618:	74 28                	je     c001b642 <Sys::write(regs*)+0x61>
c001b61a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b622:	31 ff                	xor    edi,edi
c001b624:	83 ec 0c             	sub    esp,0xc
c001b627:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b629:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b62d:	52                   	push   edx
c001b62e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b631:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b634:	57                   	push   edi
c001b635:	56                   	push   esi
c001b636:	51                   	push   ecx
c001b637:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63e:	83 c4 20             	add    esp,0x20
c001b641:	99                   	cdq    
c001b642:	83 c4 10             	add    esp,0x10
c001b645:	5b                   	pop    ebx
c001b646:	5e                   	pop    esi
c001b647:	5f                   	pop    edi
c001b648:	c3                   	ret    

c001b649 <Sys::wsbe(regs*)>:
c001b649:	57                   	push   edi
c001b64a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b64f:	56                   	push   esi
c001b650:	be 98 bd 02 c0       	mov    esi,0xc002bd98
c001b655:	53                   	push   ebx
c001b656:	83 ec 30             	sub    esp,0x30
c001b659:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b65d:	fc                   	cld    
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b663:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b66f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b675:	8b 06                	mov    eax,DWORD PTR [esi]
c001b677:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b67a:	57                   	push   edi
c001b67b:	e8 14 51 fe ff       	call   c0000794 <strlen>
c001b680:	5a                   	pop    edx
c001b681:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b685:	52                   	push   edx
c001b686:	31 d2                	xor    edx,edx
c001b688:	57                   	push   edi
c001b689:	52                   	push   edx
c001b68a:	50                   	push   eax
c001b68b:	56                   	push   esi
c001b68c:	ff d3                	call   ebx
c001b68e:	83 c4 14             	add    esp,0x14
c001b691:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b695:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b698:	e8 80 31 00 00       	call   c001e81d <terminateTask(int)>
c001b69d:	83 c4 40             	add    esp,0x40
c001b6a0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6a5:	5b                   	pop    ebx
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	5e                   	pop    esi
c001b6a9:	5f                   	pop    edi
c001b6aa:	c3                   	ret    

c001b6ab <Sys::yield(regs*)>:
c001b6ab:	57                   	push   edi
c001b6ac:	56                   	push   esi
c001b6ad:	53                   	push   ebx
c001b6ae:	e8 27 27 00 00       	call   c001ddda <lockScheduler()>
c001b6b3:	e8 5e 2a 00 00       	call   c001e116 <schedule()>
c001b6b8:	e8 1f 27 00 00       	call   c001dddc <unlockScheduler()>
c001b6bd:	8b 35 70 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea70
c001b6c3:	8b 3d 74 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea74
c001b6c9:	89 f0                	mov    eax,esi
c001b6cb:	89 fb                	mov    ebx,edi
c001b6cd:	89 f1                	mov    ecx,esi
c001b6cf:	c1 e0 07             	shl    eax,0x7
c001b6d2:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6d6:	25 80 30 0f 00       	and    eax,0xf3080
c001b6db:	c1 eb 17             	shr    ebx,0x17
c001b6de:	31 c8                	xor    eax,ecx
c001b6e0:	89 da                	mov    edx,ebx
c001b6e2:	5b                   	pop    ebx
c001b6e3:	5e                   	pop    esi
c001b6e4:	5f                   	pop    edi
c001b6e5:	c3                   	ret    

c001b6e6 <sysCallSeekDir(regs*)>:
c001b6e6:	31 c0                	xor    eax,eax
c001b6e8:	31 d2                	xor    edx,edx
c001b6ea:	c3                   	ret    

c001b6eb <sysCallTellDir(regs*)>:
c001b6eb:	31 c0                	xor    eax,eax
c001b6ed:	31 d2                	xor    edx,edx
c001b6ef:	c3                   	ret    

c001b6f0 <sysCallVerify(regs*)>:
c001b6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6f9:	c3                   	ret    

c001b6fa <sysFormatDisk(regs*)>:
c001b6fa:	56                   	push   esi
c001b6fb:	53                   	push   ebx
c001b6fc:	53                   	push   ebx
c001b6fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b701:	8b 1d 58 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e558
c001b707:	eb 25                	jmp    c001b72e <sysFormatDisk(regs*)+0x34>
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b70f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b711:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b714:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b717:	50                   	push   eax
c001b718:	ff 34 85 00 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1600]
c001b71f:	53                   	push   ebx
c001b720:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b723:	83 c4 20             	add    esp,0x20
c001b726:	83 f8 08             	cmp    eax,0x8
c001b729:	75 12                	jne    c001b73d <sysFormatDisk(regs*)+0x43>
c001b72b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b72e:	85 db                	test   ebx,ebx
c001b730:	75 d7                	jne    c001b709 <sysFormatDisk(regs*)+0xf>
c001b732:	59                   	pop    ecx
c001b733:	b8 03 00 00 00       	mov    eax,0x3
c001b738:	31 d2                	xor    edx,edx
c001b73a:	5b                   	pop    ebx
c001b73b:	5e                   	pop    esi
c001b73c:	c3                   	ret    
c001b73d:	85 c0                	test   eax,eax
c001b73f:	74 1b                	je     c001b75c <sysFormatDisk(regs*)+0x62>
c001b741:	83 f8 09             	cmp    eax,0x9
c001b744:	74 0b                	je     c001b751 <sysFormatDisk(regs*)+0x57>
c001b746:	59                   	pop    ecx
c001b747:	b8 02 00 00 00       	mov    eax,0x2
c001b74c:	31 d2                	xor    edx,edx
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	c3                   	ret    
c001b751:	59                   	pop    ecx
c001b752:	b8 01 00 00 00       	mov    eax,0x1
c001b757:	31 d2                	xor    edx,edx
c001b759:	5b                   	pop    ebx
c001b75a:	5e                   	pop    esi
c001b75b:	c3                   	ret    
c001b75c:	59                   	pop    ecx
c001b75d:	31 c0                	xor    eax,eax
c001b75f:	31 d2                	xor    edx,edx
c001b761:	5b                   	pop    ebx
c001b762:	5e                   	pop    esi
c001b763:	c3                   	ret    

c001b764 <sysSetDiskVolumeLabel(regs*)>:
c001b764:	56                   	push   esi
c001b765:	53                   	push   ebx
c001b766:	53                   	push   ebx
c001b767:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b76b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b76e:	83 f8 19             	cmp    eax,0x19
c001b771:	77 29                	ja     c001b79c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b773:	8b 0c 85 00 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1600]
c001b77a:	85 c9                	test   ecx,ecx
c001b77c:	74 1e                	je     c001b79c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b781:	85 d2                	test   edx,edx
c001b783:	74 17                	je     c001b79c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b785:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b78b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b78d:	52                   	push   edx
c001b78e:	50                   	push   eax
c001b78f:	51                   	push   ecx
c001b790:	53                   	push   ebx
c001b791:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b794:	83 c4 10             	add    esp,0x10
c001b797:	99                   	cdq    
c001b798:	59                   	pop    ecx
c001b799:	5b                   	pop    ebx
c001b79a:	5e                   	pop    esi
c001b79b:	c3                   	ret    
c001b79c:	59                   	pop    ecx
c001b79d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a7:	5b                   	pop    ebx
c001b7a8:	5e                   	pop    esi
c001b7a9:	c3                   	ret    

c001b7aa <sysGetDiskVolumeLabel(regs*)>:
c001b7aa:	57                   	push   edi
c001b7ab:	56                   	push   esi
c001b7ac:	53                   	push   ebx
c001b7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7b4:	83 fa 19             	cmp    edx,0x19
c001b7b7:	77 34                	ja     c001b7ed <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b9:	8b 0c 95 00 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1600]
c001b7c0:	85 c9                	test   ecx,ecx
c001b7c2:	74 29                	je     c001b7ed <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7c7:	85 db                	test   ebx,ebx
c001b7c9:	74 22                	je     c001b7ed <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7cb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7ce:	85 c0                	test   eax,eax
c001b7d0:	74 1b                	je     c001b7ed <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7d8:	83 ec 0c             	sub    esp,0xc
c001b7db:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7dd:	50                   	push   eax
c001b7de:	53                   	push   ebx
c001b7df:	52                   	push   edx
c001b7e0:	51                   	push   ecx
c001b7e1:	56                   	push   esi
c001b7e2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7e5:	83 c4 20             	add    esp,0x20
c001b7e8:	99                   	cdq    
c001b7e9:	5b                   	pop    ebx
c001b7ea:	5e                   	pop    esi
c001b7eb:	5f                   	pop    edi
c001b7ec:	c3                   	ret    
c001b7ed:	5b                   	pop    ebx
c001b7ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7f8:	5e                   	pop    esi
c001b7f9:	5f                   	pop    edi
c001b7fa:	c3                   	ret    

c001b7fb <sysShutdown(regs*)>:
c001b7fb:	83 ec 0c             	sub    esp,0xc
c001b7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b802:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b805:	85 c0                	test   eax,eax
c001b807:	74 18                	je     c001b821 <sysShutdown(regs*)+0x26>
c001b809:	83 f8 01             	cmp    eax,0x1
c001b80c:	74 38                	je     c001b846 <sysShutdown(regs*)+0x4b>
c001b80e:	83 f8 02             	cmp    eax,0x2
c001b811:	74 24                	je     c001b837 <sysShutdown(regs*)+0x3c>
c001b813:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b818:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b81d:	83 c4 0c             	add    esp,0xc
c001b820:	c3                   	ret    
c001b821:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001b826:	8b 10                	mov    edx,DWORD PTR [eax]
c001b828:	6a 00                	push   0x0
c001b82a:	6a 00                	push   0x0
c001b82c:	6a 00                	push   0x0
c001b82e:	50                   	push   eax
c001b82f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b832:	83 c4 10             	add    esp,0x10
c001b835:	eb dc                	jmp    c001b813 <sysShutdown(regs*)+0x18>
c001b837:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001b83c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b83e:	6a 00                	push   0x0
c001b840:	6a 00                	push   0x0
c001b842:	6a 01                	push   0x1
c001b844:	eb e8                	jmp    c001b82e <sysShutdown(regs*)+0x33>
c001b846:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001b84b:	85 c0                	test   eax,eax
c001b84d:	74 02                	je     c001b851 <sysShutdown(regs*)+0x56>
c001b84f:	ff d0                	call   eax
c001b851:	31 c0                	xor    eax,eax
c001b853:	31 d2                	xor    edx,edx
c001b855:	83 c4 0c             	add    esp,0xc
c001b858:	c3                   	ret    

c001b859 <sysCallRealpath(regs*)>:
c001b859:	83 ec 0c             	sub    esp,0xc
c001b85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b860:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b863:	85 d2                	test   edx,edx
c001b865:	74 07                	je     c001b86e <sysCallRealpath(regs*)+0x15>
c001b867:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b86a:	85 c0                	test   eax,eax
c001b86c:	75 0b                	jne    c001b879 <sysCallRealpath(regs*)+0x20>
c001b86e:	b8 01 00 00 00       	mov    eax,0x1
c001b873:	31 d2                	xor    edx,edx
c001b875:	83 c4 0c             	add    esp,0xc
c001b878:	c3                   	ret    
c001b879:	51                   	push   ecx
c001b87a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b880:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b883:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b889:	51                   	push   ecx
c001b88a:	52                   	push   edx
c001b88b:	50                   	push   eax
c001b88c:	e8 7b 7a ff ff       	call   c001330c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	31 c0                	xor    eax,eax
c001b896:	31 d2                	xor    edx,edx
c001b898:	83 c4 0c             	add    esp,0xc
c001b89b:	c3                   	ret    

c001b89c <sysCallGetArgc(regs*)>:
c001b89c:	83 ec 14             	sub    esp,0x14
c001b89f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a7:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8ad:	68 c4 bd 02 c0       	push   0xc002bdc4
c001b8b2:	e8 a7 76 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b8b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8bf:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8c5:	83 c4 1c             	add    esp,0x1c
c001b8c8:	99                   	cdq    
c001b8c9:	c3                   	ret    

c001b8ca <sysCallReadDir(regs*)>:
c001b8ca:	53                   	push   ebx
c001b8cb:	83 ec 18             	sub    esp,0x18
c001b8ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8d5:	83 f8 02             	cmp    eax,0x2
c001b8d8:	76 53                	jbe    c001b92d <sysCallReadDir(regs*)+0x63>
c001b8da:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8dd:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8e3:	77 4f                	ja     c001b934 <sysCallReadDir(regs*)+0x6a>
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	50                   	push   eax
c001b8e9:	e8 61 61 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	85 c0                	test   eax,eax
c001b8f3:	74 50                	je     c001b945 <sysCallReadDir(regs*)+0x7b>
c001b8f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8fd:	83 ec 0c             	sub    esp,0xc
c001b900:	8b 10                	mov    edx,DWORD PTR [eax]
c001b902:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b906:	51                   	push   ecx
c001b907:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b90a:	6a 00                	push   0x0
c001b90c:	68 10 01 00 00       	push   0x110
c001b911:	50                   	push   eax
c001b912:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b915:	83 c4 20             	add    esp,0x20
c001b918:	85 c0                	test   eax,eax
c001b91a:	74 38                	je     c001b954 <sysCallReadDir(regs*)+0x8a>
c001b91c:	83 f8 07             	cmp    eax,0x7
c001b91f:	74 0c                	je     c001b92d <sysCallReadDir(regs*)+0x63>
c001b921:	b8 02 00 00 00       	mov    eax,0x2
c001b926:	31 d2                	xor    edx,edx
c001b928:	83 c4 18             	add    esp,0x18
c001b92b:	5b                   	pop    ebx
c001b92c:	c3                   	ret    
c001b92d:	b8 01 00 00 00       	mov    eax,0x1
c001b932:	eb f2                	jmp    c001b926 <sysCallReadDir(regs*)+0x5c>
c001b934:	83 ec 08             	sub    esp,0x8
c001b937:	52                   	push   edx
c001b938:	68 dc be 02 c0       	push   0xc002bedc
c001b93d:	e8 1c 76 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001b942:	83 c4 10             	add    esp,0x10
c001b945:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b94a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b94f:	83 c4 18             	add    esp,0x18
c001b952:	5b                   	pop    ebx
c001b953:	c3                   	ret    
c001b954:	31 c0                	xor    eax,eax
c001b956:	eb ce                	jmp    c001b926 <sysCallReadDir(regs*)+0x5c>

c001b958 <sysCallIsATTY(regs*)>:
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b962:	83 f8 02             	cmp    eax,0x2
c001b965:	76 07                	jbe    c001b96e <sysCallIsATTY(regs*)+0x16>
c001b967:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b96c:	75 26                	jne    c001b994 <sysCallIsATTY(regs*)+0x3c>
c001b96e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b973:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b976:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b97c:	85 c0                	test   eax,eax
c001b97e:	74 24                	je     c001b9a4 <sysCallIsATTY(regs*)+0x4c>
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	8b 10                	mov    edx,DWORD PTR [eax]
c001b985:	50                   	push   eax
c001b986:	ff 12                	call   DWORD PTR [edx]
c001b988:	31 d2                	xor    edx,edx
c001b98a:	0f b6 c0             	movzx  eax,al
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	83 c4 0c             	add    esp,0xc
c001b993:	c3                   	ret    
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	50                   	push   eax
c001b998:	e8 b2 60 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	85 c0                	test   eax,eax
c001b9a2:	75 dc                	jne    c001b980 <sysCallIsATTY(regs*)+0x28>
c001b9a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ae:	83 c4 0c             	add    esp,0xc
c001b9b1:	c3                   	ret    

c001b9b2 <sysCallSeek(regs*)>:
c001b9b2:	53                   	push   ebx
c001b9b3:	83 ec 08             	sub    esp,0x8
c001b9b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9bd:	83 f8 02             	cmp    eax,0x2
c001b9c0:	76 4a                	jbe    c001ba0c <sysCallSeek(regs*)+0x5a>
c001b9c2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9c7:	77 32                	ja     c001b9fb <sysCallSeek(regs*)+0x49>
c001b9c9:	83 ec 0c             	sub    esp,0xc
c001b9cc:	50                   	push   eax
c001b9cd:	e8 7d 60 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b9d2:	83 c4 0c             	add    esp,0xc
c001b9d5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9d8:	31 db                	xor    ebx,ebx
c001b9da:	53                   	push   ebx
c001b9db:	51                   	push   ecx
c001b9dc:	50                   	push   eax
c001b9dd:	e8 f6 7b ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001b9e2:	83 c4 10             	add    esp,0x10
c001b9e5:	85 c0                	test   eax,eax
c001b9e7:	0f 95 c0             	setne  al
c001b9ea:	31 d2                	xor    edx,edx
c001b9ec:	0f b6 c0             	movzx  eax,al
c001b9ef:	f7 d8                	neg    eax
c001b9f1:	83 d2 00             	adc    edx,0x0
c001b9f4:	83 c4 08             	add    esp,0x8
c001b9f7:	f7 da                	neg    edx
c001b9f9:	5b                   	pop    ebx
c001b9fa:	c3                   	ret    
c001b9fb:	83 ec 08             	sub    esp,0x8
c001b9fe:	50                   	push   eax
c001b9ff:	68 cf bd 02 c0       	push   0xc002bdcf
c001ba04:	e8 55 75 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba11:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba16:	83 c4 08             	add    esp,0x8
c001ba19:	5b                   	pop    ebx
c001ba1a:	c3                   	ret    

c001ba1b <sysCallTell(regs*)>:
c001ba1b:	53                   	push   ebx
c001ba1c:	83 ec 08             	sub    esp,0x8
c001ba1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba26:	83 f8 02             	cmp    eax,0x2
c001ba29:	76 5e                	jbe    c001ba89 <sysCallTell(regs*)+0x6e>
c001ba2b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba30:	77 2d                	ja     c001ba5f <sysCallTell(regs*)+0x44>
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	50                   	push   eax
c001ba36:	e8 14 60 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001ba3b:	5a                   	pop    edx
c001ba3c:	59                   	pop    ecx
c001ba3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba40:	50                   	push   eax
c001ba41:	e8 e8 7b ff ff       	call   c001362e <File::tell(unsigned long long*)>
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	85 c0                	test   eax,eax
c001ba4b:	0f 95 c0             	setne  al
c001ba4e:	31 d2                	xor    edx,edx
c001ba50:	0f b6 c0             	movzx  eax,al
c001ba53:	f7 d8                	neg    eax
c001ba55:	83 d2 00             	adc    edx,0x0
c001ba58:	83 c4 08             	add    esp,0x8
c001ba5b:	f7 da                	neg    edx
c001ba5d:	5b                   	pop    ebx
c001ba5e:	c3                   	ret    
c001ba5f:	83 ec 08             	sub    esp,0x8
c001ba62:	50                   	push   eax
c001ba63:	68 e9 bd 02 c0       	push   0xc002bde9
c001ba68:	e8 f1 74 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ba6d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba80:	31 d2                	xor    edx,edx
c001ba82:	31 c0                	xor    eax,eax
c001ba84:	83 c4 08             	add    esp,0x8
c001ba87:	5b                   	pop    ebx
c001ba88:	c3                   	ret    
c001ba89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba93:	83 c4 08             	add    esp,0x8
c001ba96:	5b                   	pop    ebx
c001ba97:	c3                   	ret    

c001ba98 <sysCallSize(regs*)>:
c001ba98:	53                   	push   ebx
c001ba99:	83 ec 18             	sub    esp,0x18
c001ba9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa3:	83 f8 02             	cmp    eax,0x2
c001baa6:	76 64                	jbe    c001bb0c <sysCallSize(regs*)+0x74>
c001baa8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baad:	77 33                	ja     c001bae2 <sysCallSize(regs*)+0x4a>
c001baaf:	83 ec 0c             	sub    esp,0xc
c001bab2:	50                   	push   eax
c001bab3:	e8 97 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bab8:	83 c4 0c             	add    esp,0xc
c001babb:	8d 54 24 13          	lea    edx,[esp+0x13]
c001babf:	52                   	push   edx
c001bac0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bac3:	50                   	push   eax
c001bac4:	e8 fd 7c ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	85 c0                	test   eax,eax
c001bace:	0f 95 c0             	setne  al
c001bad1:	31 d2                	xor    edx,edx
c001bad3:	0f b6 c0             	movzx  eax,al
c001bad6:	f7 d8                	neg    eax
c001bad8:	83 d2 00             	adc    edx,0x0
c001badb:	83 c4 18             	add    esp,0x18
c001bade:	f7 da                	neg    edx
c001bae0:	5b                   	pop    ebx
c001bae1:	c3                   	ret    
c001bae2:	83 ec 08             	sub    esp,0x8
c001bae5:	50                   	push   eax
c001bae6:	68 03 be 02 c0       	push   0xc002be03
c001baeb:	e8 6e 74 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001baf0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baf3:	83 c4 10             	add    esp,0x10
c001baf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb03:	31 d2                	xor    edx,edx
c001bb05:	31 c0                	xor    eax,eax
c001bb07:	83 c4 18             	add    esp,0x18
c001bb0a:	5b                   	pop    ebx
c001bb0b:	c3                   	ret    
c001bb0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb11:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb16:	83 c4 18             	add    esp,0x18
c001bb19:	5b                   	pop    ebx
c001bb1a:	c3                   	ret    

c001bb1b <sysCallSizeFromFilename(regs*)>:
c001bb1b:	57                   	push   edi
c001bb1c:	56                   	push   esi
c001bb1d:	53                   	push   ebx
c001bb1e:	83 ec 20             	sub    esp,0x20
c001bb21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb25:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb28:	83 fb 02             	cmp    ebx,0x2
c001bb2b:	0f 86 99 00 00 00    	jbe    c001bbca <sysCallSizeFromFilename(regs*)+0xaf>
c001bb31:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb37:	77 65                	ja     c001bb9e <sysCallSizeFromFilename(regs*)+0x83>
c001bb39:	83 ec 0c             	sub    esp,0xc
c001bb3c:	68 14 01 00 00       	push   0x114
c001bb41:	e8 fd 3c ff ff       	call   c000f843 <malloc>
c001bb46:	83 c4 0c             	add    esp,0xc
c001bb49:	89 c6                	mov    esi,eax
c001bb4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb53:	53                   	push   ebx
c001bb54:	56                   	push   esi
c001bb55:	e8 5c 79 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001bb5a:	83 c4 0c             	add    esp,0xc
c001bb5d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb61:	50                   	push   eax
c001bb62:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb65:	56                   	push   esi
c001bb66:	e8 5b 7c ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c001bb6b:	83 c4 10             	add    esp,0x10
c001bb6e:	85 f6                	test   esi,esi
c001bb70:	74 14                	je     c001bb86 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb76:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	56                   	push   esi
c001bb7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb86:	85 c0                	test   eax,eax
c001bb88:	0f 95 c0             	setne  al
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	0f b6 c0             	movzx  eax,al
c001bb90:	f7 d8                	neg    eax
c001bb92:	83 d2 00             	adc    edx,0x0
c001bb95:	83 c4 20             	add    esp,0x20
c001bb98:	f7 da                	neg    edx
c001bb9a:	5b                   	pop    ebx
c001bb9b:	5e                   	pop    esi
c001bb9c:	5f                   	pop    edi
c001bb9d:	c3                   	ret    
c001bb9e:	83 ec 08             	sub    esp,0x8
c001bba1:	53                   	push   ebx
c001bba2:	68 03 be 02 c0       	push   0xc002be03
c001bba7:	e8 b2 73 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001bbac:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbbf:	31 d2                	xor    edx,edx
c001bbc1:	83 c4 20             	add    esp,0x20
c001bbc4:	31 c0                	xor    eax,eax
c001bbc6:	5b                   	pop    ebx
c001bbc7:	5e                   	pop    esi
c001bbc8:	5f                   	pop    edi
c001bbc9:	c3                   	ret    
c001bbca:	83 c4 20             	add    esp,0x20
c001bbcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd2:	5b                   	pop    ebx
c001bbd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd8:	5e                   	pop    esi
c001bbd9:	5f                   	pop    edi
c001bbda:	c3                   	ret    

c001bbdb <sysCallClose(regs*)>:
c001bbdb:	53                   	push   ebx
c001bbdc:	83 ec 08             	sub    esp,0x8
c001bbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbe6:	83 f8 02             	cmp    eax,0x2
c001bbe9:	76 50                	jbe    c001bc3b <sysCallClose(regs*)+0x60>
c001bbeb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbf0:	74 58                	je     c001bc4a <sysCallClose(regs*)+0x6f>
c001bbf2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbf7:	74 60                	je     c001bc59 <sysCallClose(regs*)+0x7e>
c001bbf9:	77 2f                	ja     c001bc2a <sysCallClose(regs*)+0x4f>
c001bbfb:	83 ec 0c             	sub    esp,0xc
c001bbfe:	50                   	push   eax
c001bbff:	e8 4b 5e ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bc04:	89 c3                	mov    ebx,eax
c001bc06:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc09:	e8 6a 79 ff ff       	call   c0013578 <File::close()>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	85 db                	test   ebx,ebx
c001bc13:	74 0c                	je     c001bc21 <sysCallClose(regs*)+0x46>
c001bc15:	83 ec 0c             	sub    esp,0xc
c001bc18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc1a:	53                   	push   ebx
c001bc1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	31 c0                	xor    eax,eax
c001bc23:	31 d2                	xor    edx,edx
c001bc25:	83 c4 08             	add    esp,0x8
c001bc28:	5b                   	pop    ebx
c001bc29:	c3                   	ret    
c001bc2a:	83 ec 08             	sub    esp,0x8
c001bc2d:	50                   	push   eax
c001bc2e:	68 00 bf 02 c0       	push   0xc002bf00
c001bc33:	e8 26 73 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc40:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc45:	83 c4 08             	add    esp,0x8
c001bc48:	5b                   	pop    ebx
c001bc49:	c3                   	ret    
c001bc4a:	83 ec 0c             	sub    esp,0xc
c001bc4d:	68 1e be 02 c0       	push   0xc002be1e
c001bc52:	e8 07 73 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001bc57:	eb c5                	jmp    c001bc1e <sysCallClose(regs*)+0x43>
c001bc59:	83 ec 0c             	sub    esp,0xc
c001bc5c:	68 2c be 02 c0       	push   0xc002be2c
c001bc61:	eb ef                	jmp    c001bc52 <sysCallClose(regs*)+0x77>

c001bc63 <sysCallOpenDir(regs*)>:
c001bc63:	56                   	push   esi
c001bc64:	53                   	push   ebx
c001bc65:	53                   	push   ebx
c001bc66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc6a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc6d:	85 f6                	test   esi,esi
c001bc6f:	74 59                	je     c001bcca <sysCallOpenDir(regs*)+0x67>
c001bc71:	83 ec 0c             	sub    esp,0xc
c001bc74:	68 14 01 00 00       	push   0x114
c001bc79:	e8 c5 3b ff ff       	call   c000f843 <malloc>
c001bc7e:	83 c4 0c             	add    esp,0xc
c001bc81:	89 c6                	mov    esi,eax
c001bc83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc88:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc8b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc8e:	56                   	push   esi
c001bc8f:	e8 ce 7c ff ff       	call   c0013962 <Directory::Directory(char const*, Process*)>
c001bc94:	83 c4 10             	add    esp,0x10
c001bc97:	85 f6                	test   esi,esi
c001bc99:	74 2f                	je     c001bcca <sysCallOpenDir(regs*)+0x67>
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	56                   	push   esi
c001bc9f:	e8 22 7d ff ff       	call   c00139c6 <Directory::open()>
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	85 c0                	test   eax,eax
c001bca9:	75 1f                	jne    c001bcca <sysCallOpenDir(regs*)+0x67>
c001bcab:	83 ec 0c             	sub    esp,0xc
c001bcae:	56                   	push   esi
c001bcaf:	e8 a6 5a ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001bcb4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	89 02                	mov    DWORD PTR [edx],eax
c001bcbc:	c1 f8 1f             	sar    eax,0x1f
c001bcbf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcc2:	31 c0                	xor    eax,eax
c001bcc4:	59                   	pop    ecx
c001bcc5:	31 d2                	xor    edx,edx
c001bcc7:	5b                   	pop    ebx
c001bcc8:	5e                   	pop    esi
c001bcc9:	c3                   	ret    
c001bcca:	59                   	pop    ecx
c001bccb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd5:	5b                   	pop    ebx
c001bcd6:	5e                   	pop    esi
c001bcd7:	c3                   	ret    

c001bcd8 <sysCallCloseDir(regs*)>:
c001bcd8:	53                   	push   ebx
c001bcd9:	83 ec 08             	sub    esp,0x8
c001bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bce3:	83 f8 02             	cmp    eax,0x2
c001bce6:	76 47                	jbe    c001bd2f <sysCallCloseDir(regs*)+0x57>
c001bce8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bced:	77 2f                	ja     c001bd1e <sysCallCloseDir(regs*)+0x46>
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	50                   	push   eax
c001bcf3:	e8 57 5d ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bcf8:	89 c3                	mov    ebx,eax
c001bcfa:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcfd:	e8 20 7d ff ff       	call   c0013a22 <Directory::close()>
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	85 db                	test   ebx,ebx
c001bd07:	74 0c                	je     c001bd15 <sysCallCloseDir(regs*)+0x3d>
c001bd09:	83 ec 0c             	sub    esp,0xc
c001bd0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd0e:	53                   	push   ebx
c001bd0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	31 c0                	xor    eax,eax
c001bd17:	31 d2                	xor    edx,edx
c001bd19:	83 c4 08             	add    esp,0x8
c001bd1c:	5b                   	pop    ebx
c001bd1d:	c3                   	ret    
c001bd1e:	83 ec 08             	sub    esp,0x8
c001bd21:	50                   	push   eax
c001bd22:	68 28 bf 02 c0       	push   0xc002bf28
c001bd27:	e8 32 72 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd34:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd39:	83 c4 08             	add    esp,0x8
c001bd3c:	5b                   	pop    ebx
c001bd3d:	c3                   	ret    

c001bd3e <sysCallMakeDir(regs*)>:
c001bd3e:	56                   	push   esi
c001bd3f:	53                   	push   ebx
c001bd40:	83 ec 10             	sub    esp,0x10
c001bd43:	68 14 01 00 00       	push   0x114
c001bd48:	e8 f6 3a ff ff       	call   c000f843 <malloc>
c001bd4d:	83 c4 0c             	add    esp,0xc
c001bd50:	89 c3                	mov    ebx,eax
c001bd52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd57:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd5e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd61:	53                   	push   ebx
c001bd62:	e8 fb 7b ff ff       	call   c0013962 <Directory::Directory(char const*, Process*)>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	85 db                	test   ebx,ebx
c001bd6c:	74 32                	je     c001bda0 <sysCallMakeDir(regs*)+0x62>
c001bd6e:	83 ec 0c             	sub    esp,0xc
c001bd71:	53                   	push   ebx
c001bd72:	e8 2f 7e ff ff       	call   c0013ba6 <Directory::create()>
c001bd77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd7a:	89 c6                	mov    esi,eax
c001bd7c:	e8 a1 7c ff ff       	call   c0013a22 <Directory::close()>
c001bd81:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	31 c0                	xor    eax,eax
c001bd8e:	59                   	pop    ecx
c001bd8f:	85 f6                	test   esi,esi
c001bd91:	5b                   	pop    ebx
c001bd92:	0f 95 c0             	setne  al
c001bd95:	5e                   	pop    esi
c001bd96:	31 d2                	xor    edx,edx
c001bd98:	f7 d8                	neg    eax
c001bd9a:	83 d2 00             	adc    edx,0x0
c001bd9d:	f7 da                	neg    edx
c001bd9f:	c3                   	ret    
c001bda0:	59                   	pop    ecx
c001bda1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdab:	5b                   	pop    ebx
c001bdac:	5e                   	pop    esi
c001bdad:	c3                   	ret    

c001bdae <sysCallWait(regs*)>:
c001bdae:	83 ec 10             	sub    esp,0x10
c001bdb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdb5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdb8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdbb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdbe:	e8 ce 24 00 00       	call   c001e291 <waitTask(int, int*, int)>
c001bdc3:	83 c4 1c             	add    esp,0x1c
c001bdc6:	99                   	cdq    
c001bdc7:	c3                   	ret    

c001bdc8 <sysCallNotImpl(regs*)>:
c001bdc8:	83 ec 18             	sub    esp,0x18
c001bdcb:	68 3a be 02 c0       	push   0xc002be3a
c001bdd0:	e8 2a e8 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001bdd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdda:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bddf:	83 c4 1c             	add    esp,0x1c
c001bde2:	c3                   	ret    

c001bde3 <sysPanic(regs*)>:
c001bde3:	83 ec 18             	sub    esp,0x18
c001bde6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdea:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bded:	e8 0d e8 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001bdf2:	c7 04 24 54 be 02 c0 	mov    DWORD PTR [esp],0xc002be54
c001bdf9:	e8 01 e8 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001bdfe:	b8 01 00 00 00       	mov    eax,0x1
c001be03:	31 d2                	xor    edx,edx
c001be05:	83 c4 1c             	add    esp,0x1c
c001be08:	c3                   	ret    

c001be09 <sysCallRmdir(regs*)>:
c001be09:	56                   	push   esi
c001be0a:	53                   	push   ebx
c001be0b:	83 ec 20             	sub    esp,0x20
c001be0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be15:	68 14 01 00 00       	push   0x114
c001be1a:	e8 24 3a ff ff       	call   c000f843 <malloc>
c001be1f:	83 c4 0c             	add    esp,0xc
c001be22:	89 c3                	mov    ebx,eax
c001be24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be29:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be2c:	56                   	push   esi
c001be2d:	53                   	push   ebx
c001be2e:	e8 83 76 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001be33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be36:	e8 57 78 ff ff       	call   c0013692 <File::unlink()>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	85 db                	test   ebx,ebx
c001be40:	74 14                	je     c001be56 <sysCallRmdir(regs*)+0x4d>
c001be42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be46:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be48:	83 ec 0c             	sub    esp,0xc
c001be4b:	53                   	push   ebx
c001be4c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be56:	85 c0                	test   eax,eax
c001be58:	0f 95 c0             	setne  al
c001be5b:	31 d2                	xor    edx,edx
c001be5d:	0f b6 c0             	movzx  eax,al
c001be60:	f7 d8                	neg    eax
c001be62:	83 d2 00             	adc    edx,0x0
c001be65:	83 c4 14             	add    esp,0x14
c001be68:	f7 da                	neg    edx
c001be6a:	5b                   	pop    ebx
c001be6b:	5e                   	pop    esi
c001be6c:	c3                   	ret    

c001be6d <sysCallUnlink(regs*)>:
c001be6d:	56                   	push   esi
c001be6e:	53                   	push   ebx
c001be6f:	83 ec 20             	sub    esp,0x20
c001be72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be76:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be79:	68 14 01 00 00       	push   0x114
c001be7e:	e8 c0 39 ff ff       	call   c000f843 <malloc>
c001be83:	83 c4 0c             	add    esp,0xc
c001be86:	89 c3                	mov    ebx,eax
c001be88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be90:	56                   	push   esi
c001be91:	53                   	push   ebx
c001be92:	e8 1f 76 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001be97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be9a:	e8 f3 77 ff ff       	call   c0013692 <File::unlink()>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	85 db                	test   ebx,ebx
c001bea4:	74 14                	je     c001beba <sysCallUnlink(regs*)+0x4d>
c001bea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beac:	83 ec 0c             	sub    esp,0xc
c001beaf:	53                   	push   ebx
c001beb0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beb3:	83 c4 10             	add    esp,0x10
c001beb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beba:	85 c0                	test   eax,eax
c001bebc:	0f 95 c0             	setne  al
c001bebf:	31 d2                	xor    edx,edx
c001bec1:	0f b6 c0             	movzx  eax,al
c001bec4:	f7 d8                	neg    eax
c001bec6:	83 d2 00             	adc    edx,0x0
c001bec9:	83 c4 14             	add    esp,0x14
c001becc:	f7 da                	neg    edx
c001bece:	5b                   	pop    ebx
c001becf:	5e                   	pop    esi
c001bed0:	c3                   	ret    

c001bed1 <sysCallGetArgv(regs*)>:
c001bed1:	83 ec 0c             	sub    esp,0xc
c001bed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bed8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bedb:	85 c0                	test   eax,eax
c001bedd:	78 2b                	js     c001bf0a <sysCallGetArgv(regs*)+0x39>
c001bedf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bee5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bee8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001beee:	7d 1a                	jge    c001bf0a <sysCallGetArgv(regs*)+0x39>
c001bef0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bef7:	85 c0                	test   eax,eax
c001bef9:	74 17                	je     c001bf12 <sysCallGetArgv(regs*)+0x41>
c001befb:	83 ec 08             	sub    esp,0x8
c001befe:	50                   	push   eax
c001beff:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf02:	e8 2d 49 fe ff       	call   c0000834 <strcpy>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	31 c0                	xor    eax,eax
c001bf0c:	31 d2                	xor    edx,edx
c001bf0e:	83 c4 0c             	add    esp,0xc
c001bf11:	c3                   	ret    
c001bf12:	b8 01 00 00 00       	mov    eax,0x1
c001bf17:	31 d2                	xor    edx,edx
c001bf19:	83 c4 0c             	add    esp,0xc
c001bf1c:	c3                   	ret    

c001bf1d <sysCallTTYName(regs*)>:
c001bf1d:	56                   	push   esi
c001bf1e:	53                   	push   ebx
c001bf1f:	53                   	push   ebx
c001bf20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf24:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf27:	85 c0                	test   eax,eax
c001bf29:	74 5f                	je     c001bf8a <sysCallTTYName(regs*)+0x6d>
c001bf2b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf2e:	83 f8 02             	cmp    eax,0x2
c001bf31:	77 3e                	ja     c001bf71 <sysCallTTYName(regs*)+0x54>
c001bf33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf3b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf41:	85 db                	test   ebx,ebx
c001bf43:	74 45                	je     c001bf8a <sysCallTTYName(regs*)+0x6d>
c001bf45:	83 ec 0c             	sub    esp,0xc
c001bf48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf4a:	53                   	push   ebx
c001bf4b:	ff 10                	call   DWORD PTR [eax]
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	84 c0                	test   al,al
c001bf52:	74 41                	je     c001bf95 <sysCallTTYName(regs*)+0x78>
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf5d:	53                   	push   ebx
c001bf5e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf61:	e8 ce 48 fe ff       	call   c0000834 <strcpy>
c001bf66:	83 c4 10             	add    esp,0x10
c001bf69:	31 c0                	xor    eax,eax
c001bf6b:	59                   	pop    ecx
c001bf6c:	31 d2                	xor    edx,edx
c001bf6e:	5b                   	pop    ebx
c001bf6f:	5e                   	pop    esi
c001bf70:	c3                   	ret    
c001bf71:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf76:	74 bb                	je     c001bf33 <sysCallTTYName(regs*)+0x16>
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	50                   	push   eax
c001bf7c:	e8 ce 5a ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	89 c3                	mov    ebx,eax
c001bf86:	85 db                	test   ebx,ebx
c001bf88:	75 bb                	jne    c001bf45 <sysCallTTYName(regs*)+0x28>
c001bf8a:	59                   	pop    ecx
c001bf8b:	b8 01 00 00 00       	mov    eax,0x1
c001bf90:	31 d2                	xor    edx,edx
c001bf92:	5b                   	pop    ebx
c001bf93:	5e                   	pop    esi
c001bf94:	c3                   	ret    
c001bf95:	59                   	pop    ecx
c001bf96:	b8 02 00 00 00       	mov    eax,0x2
c001bf9b:	31 d2                	xor    edx,edx
c001bf9d:	5b                   	pop    ebx
c001bf9e:	5e                   	pop    esi
c001bf9f:	c3                   	ret    

c001bfa0 <sysCallUSleep(regs*)>:
c001bfa0:	83 ec 14             	sub    esp,0x14
c001bfa3:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfac:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfb3:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfb6:	01 ca                	add    edx,ecx
c001bfb8:	52                   	push   edx
c001bfb9:	50                   	push   eax
c001bfba:	e8 6b 23 00 00       	call   c001e32a <nanoSleep(unsigned long long)>
c001bfbf:	31 c0                	xor    eax,eax
c001bfc1:	31 d2                	xor    edx,edx
c001bfc3:	83 c4 1c             	add    esp,0x1c
c001bfc6:	c3                   	ret    

c001bfc7 <sysCallSpawn(regs*)>:
c001bfc7:	56                   	push   esi
c001bfc8:	53                   	push   ebx
c001bfc9:	53                   	push   ebx
c001bfca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfce:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfd1:	85 f6                	test   esi,esi
c001bfd3:	75 08                	jne    c001bfdd <sysCallSpawn(regs*)+0x16>
c001bfd5:	59                   	pop    ecx
c001bfd6:	31 c0                	xor    eax,eax
c001bfd8:	31 d2                	xor    edx,edx
c001bfda:	5b                   	pop    ebx
c001bfdb:	5e                   	pop    esi
c001bfdc:	c3                   	ret    
c001bfdd:	83 ec 0c             	sub    esp,0xc
c001bfe0:	68 3f 07 00 00       	push   0x73f
c001bfe5:	e8 59 38 ff ff       	call   c000f843 <malloc>
c001bfea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfed:	89 c6                	mov    esi,eax
c001bfef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bff7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bffa:	56                   	push   esi
c001bffb:	e8 2a 1a 00 00       	call   c001da2a <Process::Process(char const*, Process*, char**)>
c001c000:	83 c4 20             	add    esp,0x20
c001c003:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c00a:	75 c9                	jne    c001bfd5 <sysCallSpawn(regs*)+0xe>
c001c00c:	83 ec 0c             	sub    esp,0xc
c001c00f:	56                   	push   esi
c001c010:	e8 db 1f 00 00       	call   c001dff0 <Process::createUserThread()>
c001c015:	8b 06                	mov    eax,DWORD PTR [esi]
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	99                   	cdq    
c001c01b:	59                   	pop    ecx
c001c01c:	5b                   	pop    ebx
c001c01d:	5e                   	pop    esi
c001c01e:	c3                   	ret    

c001c01f <sysCallGetEnv(regs*)>:
c001c01f:	55                   	push   ebp
c001c020:	57                   	push   edi
c001c021:	56                   	push   esi
c001c022:	53                   	push   ebx
c001c023:	83 ec 28             	sub    esp,0x28
c001c026:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c02a:	68 63 be 02 c0       	push   0xc002be63
c001c02f:	e8 2a 6f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c034:	5f                   	pop    edi
c001c035:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c038:	5d                   	pop    ebp
c001c039:	53                   	push   ebx
c001c03a:	68 92 c1 02 c0       	push   0xc002c192
c001c03f:	e8 1a 6f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c044:	58                   	pop    eax
c001c045:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c048:	5a                   	pop    edx
c001c049:	57                   	push   edi
c001c04a:	68 6c be 02 c0       	push   0xc002be6c
c001c04f:	e8 0a 6f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c054:	59                   	pop    ecx
c001c055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c05d:	e8 b9 e4 ff ff       	call   c001a51b <Krnl::getProcessTotalEnvCount(Process*)>
c001c062:	5a                   	pop    edx
c001c063:	89 c5                	mov    ebp,eax
c001c065:	59                   	pop    ecx
c001c066:	50                   	push   eax
c001c067:	68 76 be 02 c0       	push   0xc002be76
c001c06c:	e8 ed 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	39 ef                	cmp    edi,ebp
c001c076:	7c 15                	jl     c001c08d <sysCallGetEnv(regs*)+0x6e>
c001c078:	85 db                	test   ebx,ebx
c001c07a:	75 0c                	jne    c001c088 <sysCallGetEnv(regs*)+0x69>
c001c07c:	83 c4 1c             	add    esp,0x1c
c001c07f:	31 c0                	xor    eax,eax
c001c081:	5b                   	pop    ebx
c001c082:	31 d2                	xor    edx,edx
c001c084:	5e                   	pop    esi
c001c085:	5f                   	pop    edi
c001c086:	5d                   	pop    ebp
c001c087:	c3                   	ret    
c001c088:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c08b:	eb ef                	jmp    c001c07c <sysCallGetEnv(regs*)+0x5d>
c001c08d:	83 ec 0c             	sub    esp,0xc
c001c090:	68 82 be 02 c0       	push   0xc002be82
c001c095:	e8 c4 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c09a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c09e:	83 c4 0c             	add    esp,0xc
c001c0a1:	57                   	push   edi
c001c0a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0a8:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0ab:	50                   	push   eax
c001c0ac:	e8 8a e4 ff ff       	call   c001a53b <Krnl::getProcessEnvPair(Process*, int)>
c001c0b1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0b9:	68 11 c2 02 c0       	push   0xc002c211
c001c0be:	e8 9b 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0c9:	85 f6                	test   esi,esi
c001c0cb:	75 47                	jne    c001c114 <sysCallGetEnv(regs*)+0xf5>
c001c0cd:	83 ec 0c             	sub    esp,0xc
c001c0d0:	55                   	push   ebp
c001c0d1:	e8 be 46 fe ff       	call   c0000794 <strlen>
c001c0d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0d9:	89 c3                	mov    ebx,eax
c001c0db:	e8 b4 46 fe ff       	call   c0000794 <strlen>
c001c0e0:	5a                   	pop    edx
c001c0e1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0e5:	59                   	pop    ecx
c001c0e6:	50                   	push   eax
c001c0e7:	68 85 be 02 c0       	push   0xc002be85
c001c0ec:	e8 6d 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c0f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0f4:	e8 9b 46 fe ff       	call   c0000794 <strlen>
c001c0f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0fc:	89 c3                	mov    ebx,eax
c001c0fe:	e8 91 46 fe ff       	call   c0000794 <strlen>
c001c103:	83 c4 10             	add    esp,0x10
c001c106:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c10a:	83 c4 1c             	add    esp,0x1c
c001c10d:	31 d2                	xor    edx,edx
c001c10f:	5b                   	pop    ebx
c001c110:	5e                   	pop    esi
c001c111:	5f                   	pop    edi
c001c112:	5d                   	pop    ebp
c001c113:	c3                   	ret    
c001c114:	83 ec 0c             	sub    esp,0xc
c001c117:	68 2b c2 02 c0       	push   0xc002c22b
c001c11c:	e8 3d 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c121:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c124:	58                   	pop    eax
c001c125:	5a                   	pop    edx
c001c126:	55                   	push   ebp
c001c127:	53                   	push   ebx
c001c128:	e8 07 47 fe ff       	call   c0000834 <strcpy>
c001c12d:	59                   	pop    ecx
c001c12e:	5e                   	pop    esi
c001c12f:	68 8f be 02 c0       	push   0xc002be8f
c001c134:	53                   	push   ebx
c001c135:	e8 3a 48 fe ff       	call   c0000974 <strcat>
c001c13a:	5d                   	pop    ebp
c001c13b:	58                   	pop    eax
c001c13c:	57                   	push   edi
c001c13d:	53                   	push   ebx
c001c13e:	e8 31 48 fe ff       	call   c0000974 <strcat>
c001c143:	c7 04 24 45 c2 02 c0 	mov    DWORD PTR [esp],0xc002c245
c001c14a:	e8 0f 6e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c14f:	83 c4 10             	add    esp,0x10
c001c152:	e9 25 ff ff ff       	jmp    c001c07c <sysCallGetEnv(regs*)+0x5d>

c001c157 <sysAppSettings(regs*)>:
c001c157:	53                   	push   ebx
c001c158:	83 ec 08             	sub    esp,0x8
c001c15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c162:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c168:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c16d:	66 3d c0 09          	cmp    ax,0x9c0
c001c171:	75 2f                	jne    c001c1a2 <sysAppSettings(regs*)+0x4b>
c001c173:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c179:	83 e0 1f             	and    eax,0x1f
c001c17c:	3c 01                	cmp    al,0x1
c001c17e:	74 2e                	je     c001c1ae <sysAppSettings(regs*)+0x57>
c001c180:	3c 07                	cmp    al,0x7
c001c182:	0f 84 bd 00 00 00    	je     c001c245 <sysAppSettings(regs*)+0xee>
c001c188:	84 c0                	test   al,al
c001c18a:	0f 84 dc 00 00 00    	je     c001c26c <sysAppSettings(regs*)+0x115>
c001c190:	3c 08                	cmp    al,0x8
c001c192:	74 6d                	je     c001c201 <sysAppSettings(regs*)+0xaa>
c001c194:	0f b6 c0             	movzx  eax,al
c001c197:	83 c4 08             	add    esp,0x8
c001c19a:	05 e8 03 00 00       	add    eax,0x3e8
c001c19f:	5b                   	pop    ebx
c001c1a0:	99                   	cdq    
c001c1a1:	c3                   	ret    
c001c1a2:	b8 01 00 00 00       	mov    eax,0x1
c001c1a7:	31 d2                	xor    edx,edx
c001c1a9:	83 c4 08             	add    esp,0x8
c001c1ac:	5b                   	pop    ebx
c001c1ad:	c3                   	ret    
c001c1ae:	51                   	push   ecx
c001c1af:	68 00 01 00 00       	push   0x100
c001c1b4:	6a 00                	push   0x0
c001c1b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1be:	83 c0 0c             	add    eax,0xc
c001c1c1:	50                   	push   eax
c001c1c2:	e8 b1 45 fe ff       	call   c0000778 <memset>
c001c1c7:	83 c4 0c             	add    esp,0xc
c001c1ca:	68 ff 00 00 00       	push   0xff
c001c1cf:	53                   	push   ebx
c001c1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d8:	83 c0 0c             	add    eax,0xc
c001c1db:	50                   	push   eax
c001c1dc:	e8 63 45 fe ff       	call   c0000744 <memcpy>
c001c1e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e6:	5b                   	pop    ebx
c001c1e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ea:	5a                   	pop    edx
c001c1eb:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1ee:	52                   	push   edx
c001c1ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1f5:	e8 d0 49 ff ff       	call   c0010bca <VgaText::setTitle(char*)>
c001c1fa:	83 c4 10             	add    esp,0x10
c001c1fd:	31 c0                	xor    eax,eax
c001c1ff:	eb a6                	jmp    c001c1a7 <sysAppSettings(regs*)+0x50>
c001c201:	83 ec 08             	sub    esp,0x8
c001c204:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c20a:	83 e0 0f             	and    eax,0xf
c001c20d:	50                   	push   eax
c001c20e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c213:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c216:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c21c:	e8 99 49 ff ff       	call   c0010bba <VgaText::setTitleColour(VgaColour)>
c001c221:	58                   	pop    eax
c001c222:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c228:	5a                   	pop    edx
c001c229:	c1 e8 04             	shr    eax,0x4
c001c22c:	83 e0 0f             	and    eax,0xf
c001c22f:	50                   	push   eax
c001c230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23e:	e8 67 49 ff ff       	call   c0010baa <VgaText::setTitleTextColour(VgaColour)>
c001c243:	eb b5                	jmp    c001c1fa <sysAppSettings(regs*)+0xa3>
c001c245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c24d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c253:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c259:	c0 e8 06             	shr    al,0x6
c001c25c:	83 e0 01             	and    eax,0x1
c001c25f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c265:	31 c0                	xor    eax,eax
c001c267:	e9 3b ff ff ff       	jmp    c001c1a7 <sysAppSettings(regs*)+0x50>
c001c26c:	b8 02 00 00 00       	mov    eax,0x2
c001c271:	e9 31 ff ff ff       	jmp    c001c1a7 <sysAppSettings(regs*)+0x50>

c001c276 <sysSetFatAttrib(regs*)>:
c001c276:	57                   	push   edi
c001c277:	56                   	push   esi
c001c278:	53                   	push   ebx
c001c279:	83 ec 1c             	sub    esp,0x1c
c001c27c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c280:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c283:	68 14 01 00 00       	push   0x114
c001c288:	e8 b6 35 ff ff       	call   c000f843 <malloc>
c001c28d:	83 c4 0c             	add    esp,0xc
c001c290:	89 c3                	mov    ebx,eax
c001c292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c297:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c29a:	57                   	push   edi
c001c29b:	53                   	push   ebx
c001c29c:	e8 15 72 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001c2a1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2a4:	83 c4 0c             	add    esp,0xc
c001c2a7:	0f b6 d4             	movzx  edx,ah
c001c2aa:	0f b6 c0             	movzx  eax,al
c001c2ad:	52                   	push   edx
c001c2ae:	50                   	push   eax
c001c2af:	53                   	push   ebx
c001c2b0:	e8 77 74 ff ff       	call   c001372c <File::chfatattr(unsigned char, unsigned char)>
c001c2b5:	83 c4 10             	add    esp,0x10
c001c2b8:	85 db                	test   ebx,ebx
c001c2ba:	74 14                	je     c001c2d0 <sysSetFatAttrib(regs*)+0x5a>
c001c2bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2c2:	83 ec 0c             	sub    esp,0xc
c001c2c5:	53                   	push   ebx
c001c2c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2c9:	83 c4 10             	add    esp,0x10
c001c2cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2d0:	85 c0                	test   eax,eax
c001c2d2:	0f 95 c0             	setne  al
c001c2d5:	31 d2                	xor    edx,edx
c001c2d7:	0f b6 c0             	movzx  eax,al
c001c2da:	f7 d8                	neg    eax
c001c2dc:	83 d2 00             	adc    edx,0x0
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	f7 da                	neg    edx
c001c2e4:	5b                   	pop    ebx
c001c2e5:	5e                   	pop    esi
c001c2e6:	5f                   	pop    edi
c001c2e7:	c3                   	ret    

c001c2e8 <sysPipe(regs*)>:
c001c2e8:	57                   	push   edi
c001c2e9:	56                   	push   esi
c001c2ea:	53                   	push   ebx
c001c2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ef:	83 ec 0c             	sub    esp,0xc
c001c2f2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2f5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2f8:	6a 20                	push   0x20
c001c2fa:	e8 44 35 ff ff       	call   c000f843 <malloc>
c001c2ff:	89 c3                	mov    ebx,eax
c001c301:	58                   	pop    eax
c001c302:	5a                   	pop    edx
c001c303:	68 00 50 00 00       	push   0x5000
c001c308:	53                   	push   ebx
c001c309:	e8 ec 41 ff ff       	call   c00104fa <Pipe::Pipe(int)>
c001c30e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c311:	e8 44 54 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c316:	89 07                	mov    DWORD PTR [edi],eax
c001c318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c31b:	e8 3a 54 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	89 06                	mov    DWORD PTR [esi],eax
c001c325:	31 d2                	xor    edx,edx
c001c327:	5b                   	pop    ebx
c001c328:	31 c0                	xor    eax,eax
c001c32a:	5e                   	pop    esi
c001c32b:	5f                   	pop    edi
c001c32c:	c3                   	ret    

c001c32d <sysGetUnixTime(regs*)>:
c001c32d:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001c332:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c33c:	e9 5f 7b ff ff       	jmp    c0013ea0 <Clock::timeInSecondsLocal()>

c001c341 <string_ends_with(char const*, char const*)>:
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c348:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	53                   	push   ebx
c001c350:	e8 3f 44 fe ff       	call   c0000794 <strlen>
c001c355:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c358:	89 c6                	mov    esi,eax
c001c35a:	e8 35 44 fe ff       	call   c0000794 <strlen>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	39 c6                	cmp    esi,eax
c001c364:	7d 06                	jge    c001c36c <string_ends_with(char const*, char const*)+0x2b>
c001c366:	5b                   	pop    ebx
c001c367:	31 c0                	xor    eax,eax
c001c369:	5e                   	pop    esi
c001c36a:	5f                   	pop    edi
c001c36b:	c3                   	ret    
c001c36c:	83 ec 08             	sub    esp,0x8
c001c36f:	29 c6                	sub    esi,eax
c001c371:	57                   	push   edi
c001c372:	01 f3                	add    ebx,esi
c001c374:	53                   	push   ebx
c001c375:	e8 46 45 fe ff       	call   c00008c0 <strcmp>
c001c37a:	83 c4 10             	add    esp,0x10
c001c37d:	85 c0                	test   eax,eax
c001c37f:	5b                   	pop    ebx
c001c380:	0f 94 c0             	sete   al
c001c383:	5e                   	pop    esi
c001c384:	0f b6 c0             	movzx  eax,al
c001c387:	5f                   	pop    edi
c001c388:	c3                   	ret    

c001c389 <sysCallOpen(regs*)>:
c001c389:	56                   	push   esi
c001c38a:	53                   	push   ebx
c001c38b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c391:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c398:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c39b:	85 c9                	test   ecx,ecx
c001c39d:	0f 84 b3 00 00 00    	je     c001c456 <sysCallOpen(regs*)+0xcd>
c001c3a3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3a6:	85 c0                	test   eax,eax
c001c3a8:	0f 84 a8 00 00 00    	je     c001c456 <sysCallOpen(regs*)+0xcd>
c001c3ae:	52                   	push   edx
c001c3af:	68 91 be 02 c0       	push   0xc002be91
c001c3b4:	50                   	push   eax
c001c3b5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3b9:	56                   	push   esi
c001c3ba:	e8 4d 6f ff ff       	call   c001330c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3bf:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3c2:	e8 cd 43 fe ff       	call   c0000794 <strlen>
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	48                   	dec    eax
c001c3cb:	74 1d                	je     c001c3ea <sysCallOpen(regs*)+0x61>
c001c3cd:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3d0:	eb 0f                	jmp    c001c3e1 <sysCallOpen(regs*)+0x58>
c001c3d2:	80 fa 3a             	cmp    dl,0x3a
c001c3d5:	74 0f                	je     c001c3e6 <sysCallOpen(regs*)+0x5d>
c001c3d7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3db:	48                   	dec    eax
c001c3dc:	74 0c                	je     c001c3ea <sysCallOpen(regs*)+0x61>
c001c3de:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3e1:	80 fa 2e             	cmp    dl,0x2e
c001c3e4:	75 ec                	jne    c001c3d2 <sysCallOpen(regs*)+0x49>
c001c3e6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3ea:	83 ec 08             	sub    esp,0x8
c001c3ed:	68 95 be 02 c0       	push   0xc002be95
c001c3f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3f5:	e8 47 ff ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	85 c0                	test   eax,eax
c001c3ff:	75 17                	jne    c001c418 <sysCallOpen(regs*)+0x8f>
c001c401:	83 ec 08             	sub    esp,0x8
c001c404:	68 b6 be 02 c0       	push   0xc002beb6
c001c409:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40c:	e8 30 ff ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	85 c0                	test   eax,eax
c001c416:	74 51                	je     c001c469 <sysCallOpen(regs*)+0xe0>
c001c418:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c41b:	83 ec 08             	sub    esp,0x8
c001c41e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c42b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c42e:	ff 30                	push   DWORD PTR [eax]
c001c430:	68 9a be 02 c0       	push   0xc002be9a
c001c435:	e8 24 6b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c43a:	c7 04 24 a9 be 02 c0 	mov    DWORD PTR [esp],0xc002bea9
c001c441:	e8 18 6b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	81 c4 04 01 00 00    	add    esp,0x104
c001c44f:	31 c0                	xor    eax,eax
c001c451:	31 d2                	xor    edx,edx
c001c453:	5b                   	pop    ebx
c001c454:	5e                   	pop    esi
c001c455:	c3                   	ret    
c001c456:	81 c4 04 01 00 00    	add    esp,0x104
c001c45c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c461:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c466:	5b                   	pop    ebx
c001c467:	5e                   	pop    esi
c001c468:	c3                   	ret    
c001c469:	83 ec 08             	sub    esp,0x8
c001c46c:	68 96 be 02 c0       	push   0xc002be96
c001c471:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c474:	e8 47 44 fe ff       	call   c00008c0 <strcmp>
c001c479:	83 c4 10             	add    esp,0x10
c001c47c:	85 c0                	test   eax,eax
c001c47e:	74 98                	je     c001c418 <sysCallOpen(regs*)+0x8f>
c001c480:	83 ec 08             	sub    esp,0x8
c001c483:	68 95 be 02 c0       	push   0xc002be95
c001c488:	56                   	push   esi
c001c489:	e8 b3 fe ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	85 c0                	test   eax,eax
c001c493:	75 83                	jne    c001c418 <sysCallOpen(regs*)+0x8f>
c001c495:	83 ec 08             	sub    esp,0x8
c001c498:	68 bb be 02 c0       	push   0xc002bebb
c001c49d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a0:	e8 9c fe ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c4a5:	83 c4 10             	add    esp,0x10
c001c4a8:	85 c0                	test   eax,eax
c001c4aa:	0f 85 d9 00 00 00    	jne    c001c589 <sysCallOpen(regs*)+0x200>
c001c4b0:	83 ec 08             	sub    esp,0x8
c001c4b3:	68 c0 be 02 c0       	push   0xc002bec0
c001c4b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4bb:	e8 81 fe ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	0f 85 be 00 00 00    	jne    c001c589 <sysCallOpen(regs*)+0x200>
c001c4cb:	83 ec 08             	sub    esp,0x8
c001c4ce:	68 bc be 02 c0       	push   0xc002bebc
c001c4d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d6:	e8 e5 43 fe ff       	call   c00008c0 <strcmp>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	85 c0                	test   eax,eax
c001c4e0:	0f 84 a3 00 00 00    	je     c001c589 <sysCallOpen(regs*)+0x200>
c001c4e6:	83 ec 08             	sub    esp,0x8
c001c4e9:	68 bb be 02 c0       	push   0xc002bebb
c001c4ee:	56                   	push   esi
c001c4ef:	e8 4d fe ff ff       	call   c001c341 <string_ends_with(char const*, char const*)>
c001c4f4:	83 c4 10             	add    esp,0x10
c001c4f7:	85 c0                	test   eax,eax
c001c4f9:	0f 85 8a 00 00 00    	jne    c001c589 <sysCallOpen(regs*)+0x200>
c001c4ff:	83 ec 0c             	sub    esp,0xc
c001c502:	68 14 01 00 00       	push   0x114
c001c507:	e8 37 33 ff ff       	call   c000f843 <malloc>
c001c50c:	83 c4 0c             	add    esp,0xc
c001c50f:	89 c6                	mov    esi,eax
c001c511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c516:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c519:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51c:	56                   	push   esi
c001c51d:	e8 94 6f ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001c522:	83 c4 10             	add    esp,0x10
c001c525:	85 f6                	test   esi,esi
c001c527:	0f 84 29 ff ff ff    	je     c001c456 <sysCallOpen(regs*)+0xcd>
c001c52d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c530:	0f b6 c2             	movzx  eax,dl
c001c533:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c536:	89 d0                	mov    eax,edx
c001c538:	83 e0 01             	and    eax,0x1
c001c53b:	f6 c2 02             	test   dl,0x2
c001c53e:	74 03                	je     c001c543 <sysCallOpen(regs*)+0x1ba>
c001c540:	83 c8 02             	or     eax,0x2
c001c543:	f6 c2 04             	test   dl,0x4
c001c546:	74 03                	je     c001c54b <sysCallOpen(regs*)+0x1c2>
c001c548:	83 c8 04             	or     eax,0x4
c001c54b:	f6 c2 08             	test   dl,0x8
c001c54e:	74 03                	je     c001c553 <sysCallOpen(regs*)+0x1ca>
c001c550:	83 c8 0a             	or     eax,0xa
c001c553:	83 e2 10             	and    edx,0x10
c001c556:	74 03                	je     c001c55b <sysCallOpen(regs*)+0x1d2>
c001c558:	83 c8 12             	or     eax,0x12
c001c55b:	83 ec 08             	sub    esp,0x8
c001c55e:	50                   	push   eax
c001c55f:	56                   	push   esi
c001c560:	e8 b5 6f ff ff       	call   c001351a <File::open(FileOpenMode)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	85 c0                	test   eax,eax
c001c56a:	0f 85 e6 fe ff ff    	jne    c001c456 <sysCallOpen(regs*)+0xcd>
c001c570:	83 ec 0c             	sub    esp,0xc
c001c573:	56                   	push   esi
c001c574:	e8 e1 51 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c579:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c57c:	89 02                	mov    DWORD PTR [edx],eax
c001c57e:	c1 f8 1f             	sar    eax,0x1f
c001c581:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c584:	e9 bd fe ff ff       	jmp    c001c446 <sysCallOpen(regs*)+0xbd>
c001c589:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c58c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c592:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c599:	e9 ab fe ff ff       	jmp    c001c449 <sysCallOpen(regs*)+0xc0>

c001c59e <Sys::loadSyscalls()>:
c001c59e:	c7 05 60 0f 03 c0 ab b6 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001b6ab
c001c5a8:	c7 05 64 0f 03 c0 94 b2 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001b294
c001c5b2:	c7 05 68 0f 03 c0 fe b3 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001b3fe
c001c5bc:	c7 05 6c 0f 03 c0 e1 b5 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b5e1
c001c5c6:	c7 05 70 0f 03 c0 96 b3 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001b396
c001c5d0:	c7 05 74 0f 03 c0 cb b2 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b2cb
c001c5da:	c7 05 78 0f 03 c0 ac b2 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001b2ac
c001c5e4:	c7 05 7c 0f 03 c0 53 b4 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001b453
c001c5ee:	c7 05 84 0f 03 c0 db bb 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001bbdb
c001c5f8:	c7 05 80 0f 03 c0 89 c3 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001c389
c001c602:	c7 05 88 0f 03 c0 63 bc 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001bc63
c001c60c:	c7 05 8c 0f 03 c0 ca b8 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b8ca
c001c616:	c7 05 90 0f 03 c0 e6 b6 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b6e6
c001c620:	c7 05 94 0f 03 c0 eb b6 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b6eb
c001c62a:	c7 05 98 0f 03 c0 3e bd 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001bd3e
c001c634:	c7 05 9c 0f 03 c0 d8 bc 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bcd8
c001c63e:	c7 05 a0 0f 03 c0 b2 b9 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b9b2
c001c648:	c7 05 a4 0f 03 c0 1b ba 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001ba1b
c001c652:	c7 05 a8 0f 03 c0 98 ba 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001ba98
c001c65c:	c7 05 ac 0f 03 c0 f0 b6 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b6f0
c001c666:	c7 05 b0 0f 03 c0 ae bd 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001bdae
c001c670:	c7 05 b4 0f 03 c0 c8 bd 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001bdc8
c001c67a:	c7 05 b8 0f 03 c0 c8 bd 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001bdc8
c001c684:	c7 05 bc 0f 03 c0 09 be 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001be09
c001c68e:	c7 05 c0 0f 03 c0 6d be 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001be6d
c001c698:	c7 05 c4 0f 03 c0 9c b8 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001b89c
c001c6a2:	c7 05 c8 0f 03 c0 d1 be 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001bed1
c001c6ac:	c7 05 cc 0f 03 c0 59 b8 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b859
c001c6b6:	c7 05 d0 0f 03 c0 1d bf 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001bf1d
c001c6c0:	c7 05 d4 0f 03 c0 58 b9 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001b958
c001c6ca:	c7 05 d8 0f 03 c0 a0 bf 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001bfa0
c001c6d4:	c7 05 dc 0f 03 c0 1b bb 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001bb1b
c001c6de:	c7 05 e0 0f 03 c0 c7 bf 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001bfc7
c001c6e8:	c7 05 e4 0f 03 c0 1f c0 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001c01f
c001c6f2:	c7 05 e8 0f 03 c0 57 c1 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001c157
c001c6fc:	c7 05 ec 0f 03 c0 fa b6 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b6fa
c001c706:	c7 05 f0 0f 03 c0 64 b7 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b764
c001c710:	c7 05 f4 0f 03 c0 aa b7 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b7aa
c001c71a:	c7 05 f8 0f 03 c0 76 c2 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001c276
c001c724:	c7 05 fc 0f 03 c0 e3 bd 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001bde3
c001c72e:	c7 05 00 10 03 c0 fb b7 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001b7fb
c001c738:	c7 05 04 10 03 c0 e8 c2 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001c2e8
c001c742:	c7 05 08 10 03 c0 2d c3 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001c32d
c001c74c:	c7 05 0c 10 03 c0 ee b2 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b2ee
c001c756:	c7 05 10 10 03 c0 6f b4 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b46f
c001c760:	c7 05 14 10 03 c0 97 b5 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b597
c001c76a:	c7 05 18 10 03 c0 5e b2 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001b25e
c001c774:	c7 05 1c 10 03 c0 49 b6 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001b649
c001c77e:	c7 05 20 10 03 c0 d7 b2 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b2d7
c001c788:	c3                   	ret    

c001c789 <Sys::systemCall(regs*, void*)>:
c001c789:	53                   	push   ebx
c001c78a:	83 ec 08             	sub    esp,0x8
c001c78d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c791:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c794:	83 f8 7f             	cmp    eax,0x7f
c001c797:	77 16                	ja     c001c7af <Sys::systemCall(regs*, void*)+0x26>
c001c799:	8b 14 85 60 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0a0]
c001c7a0:	85 d2                	test   edx,edx
c001c7a2:	74 0b                	je     c001c7af <Sys::systemCall(regs*, void*)+0x26>
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	53                   	push   ebx
c001c7a8:	ff d2                	call   edx
c001c7aa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7ad:	eb 0d                	jmp    c001c7bc <Sys::systemCall(regs*, void*)+0x33>
c001c7af:	52                   	push   edx
c001c7b0:	52                   	push   edx
c001c7b1:	50                   	push   eax
c001c7b2:	68 c5 be 02 c0       	push   0xc002bec5
c001c7b7:	e8 a2 67 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7c4:	31 d2                	xor    edx,edx
c001c7c6:	83 c4 08             	add    esp,0x8
c001c7c9:	5b                   	pop    ebx
c001c7ca:	c3                   	ret    

c001c7cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7cb:	55                   	push   ebp
c001c7cc:	57                   	push   edi
c001c7cd:	56                   	push   esi
c001c7ce:	53                   	push   ebx
c001c7cf:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7d5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7dc:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7e3:	85 c0                	test   eax,eax
c001c7e5:	0f 95 c1             	setne  cl
c001c7e8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7f0:	0f 94 c2             	sete   dl
c001c7f3:	84 d1                	test   cl,dl
c001c7f5:	74 23                	je     c001c81a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7f7:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7fd:	74 1b                	je     c001c81a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c805:	89 da                	mov    edx,ebx
c001c807:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c80d:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c813:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c81a:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c821:	05 ff 0f 00 00       	add    eax,0xfff
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c82d:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c833:	c1 e8 0c             	shr    eax,0xc
c001c836:	89 ef                	mov    edi,ebp
c001c838:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c83c:	c1 ef 0c             	shr    edi,0xc
c001c83f:	6a 01                	push   0x1
c001c841:	e8 5f 53 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001c846:	89 c6                	mov    esi,eax
c001c848:	58                   	pop    eax
c001c849:	5a                   	pop    edx
c001c84a:	57                   	push   edi
c001c84b:	68 4b bf 02 c0       	push   0xc002bf4b
c001c850:	e8 09 67 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c855:	59                   	pop    ecx
c001c856:	58                   	pop    eax
c001c857:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c85b:	68 5d bf 02 c0       	push   0xc002bf5d
c001c860:	e8 f9 66 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c86e:	0f 86 24 01 00 00    	jbe    c001c998 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c874:	c1 e7 0c             	shl    edi,0xc
c001c877:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c87a:	89 df                	mov    edi,ebx
c001c87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c880:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c887:	01 dd                	add    ebp,ebx
c001c889:	29 fd                	sub    ebp,edi
c001c88b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c88f:	0f 84 01 01 00 00    	je     c001c996 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c895:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c89b:	76 05                	jbe    c001c8a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c89d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8a2:	83 ec 0c             	sub    esp,0xc
c001c8a5:	31 d2                	xor    edx,edx
c001c8a7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8b4:	50                   	push   eax
c001c8b5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8b9:	50                   	push   eax
c001c8ba:	52                   	push   edx
c001c8bb:	55                   	push   ebp
c001c8bc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8c6:	83 c4 20             	add    esp,0x20
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	74 0a                	je     c001c8d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8cd:	53                   	push   ebx
c001c8ce:	53                   	push   ebx
c001c8cf:	50                   	push   eax
c001c8d0:	68 6f bf 02 c0       	push   0xc002bf6f
c001c8d5:	eb 0f                	jmp    c001c8e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8d7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8db:	74 20                	je     c001c8fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8dd:	51                   	push   ecx
c001c8de:	51                   	push   ecx
c001c8df:	6a 00                	push   0x0
c001c8e1:	68 9a bf 02 c0       	push   0xc002bf9a
c001c8e6:	e8 73 66 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001c8eb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8ee:	e8 22 57 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	31 c0                	xor    eax,eax
c001c8f8:	e9 55 01 00 00       	jmp    c001ca52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8fd:	e8 d8 14 00 00       	call   c001ddda <lockScheduler()>
c001c902:	e8 de 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c907:	6a 07                	push   0x7
c001c909:	89 c5                	mov    ebp,eax
c001c90b:	56                   	push   esi
c001c90c:	50                   	push   eax
c001c90d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c912:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c915:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c91b:	e8 5c 5a ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c920:	83 c4 0c             	add    esp,0xc
c001c923:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c92a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c930:	6a 00                	push   0x0
c001c932:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c937:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c93a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c940:	e8 a1 58 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c945:	58                   	pop    eax
c001c946:	5a                   	pop    edx
c001c947:	68 07 0c 00 00       	push   0xc07
c001c94c:	57                   	push   edi
c001c94d:	81 c7 00 10 00 00    	add    edi,0x1000
c001c953:	55                   	push   ebp
c001c954:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c95b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c961:	6a 00                	push   0x0
c001c963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c968:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c971:	e8 c0 5d ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c976:	83 c4 1c             	add    esp,0x1c
c001c979:	68 00 10 00 00       	push   0x1000
c001c97e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c982:	50                   	push   eax
c001c983:	56                   	push   esi
c001c984:	e8 bb 3d fe ff       	call   c0000744 <memcpy>
c001c989:	e8 4e 14 00 00       	call   c001dddc <unlockScheduler()>
c001c98e:	83 c4 10             	add    esp,0x10
c001c991:	e9 ea fe ff ff       	jmp    c001c880 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c996:	89 fb                	mov    ebx,edi
c001c998:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9a0:	0f 86 9e 00 00 00    	jbe    c001ca44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9a6:	e8 2f 14 00 00       	call   c001ddda <lockScheduler()>
c001c9ab:	51                   	push   ecx
c001c9ac:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b9:	6a 00                	push   0x0
c001c9bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9c3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c9:	e8 18 58 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ce:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9d2:	c1 e7 0c             	shl    edi,0xc
c001c9d5:	01 df                	add    edi,ebx
c001c9d7:	83 c4 10             	add    esp,0x10
c001c9da:	39 fb                	cmp    ebx,edi
c001c9dc:	74 61                	je     c001ca3f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9de:	e8 02 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c9e3:	6a 07                	push   0x7
c001c9e5:	89 c5                	mov    ebp,eax
c001c9e7:	56                   	push   esi
c001c9e8:	50                   	push   eax
c001c9e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f7:	e8 80 59 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9fc:	58                   	pop    eax
c001c9fd:	5a                   	pop    edx
c001c9fe:	68 07 0c 00 00       	push   0xc07
c001ca03:	53                   	push   ebx
c001ca04:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca0a:	55                   	push   ebp
c001ca0b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca12:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca18:	6a 00                	push   0x0
c001ca1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca22:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca28:	e8 09 5d ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca2d:	83 c4 1c             	add    esp,0x1c
c001ca30:	68 00 10 00 00       	push   0x1000
c001ca35:	6a 00                	push   0x0
c001ca37:	56                   	push   esi
c001ca38:	e8 3b 3d fe ff       	call   c0000778 <memset>
c001ca3d:	eb 98                	jmp    c001c9d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca3f:	e8 98 13 00 00       	call   c001dddc <unlockScheduler()>
c001ca44:	83 ec 0c             	sub    esp,0xc
c001ca47:	56                   	push   esi
c001ca48:	e8 c8 55 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca4d:	83 c4 10             	add    esp,0x10
c001ca50:	b0 01                	mov    al,0x1
c001ca52:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca58:	5b                   	pop    ebx
c001ca59:	5e                   	pop    esi
c001ca5a:	5f                   	pop    edi
c001ca5b:	5d                   	pop    ebp
c001ca5c:	c3                   	ret    

c001ca5d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca5d:	55                   	push   ebp
c001ca5e:	57                   	push   edi
c001ca5f:	56                   	push   esi
c001ca60:	53                   	push   ebx
c001ca61:	83 ec 48             	sub    esp,0x48
c001ca64:	68 14 01 00 00       	push   0x114
c001ca69:	e8 d5 2d ff ff       	call   c000f843 <malloc>
c001ca6e:	83 c4 0c             	add    esp,0xc
c001ca71:	89 c6                	mov    esi,eax
c001ca73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca77:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca7b:	50                   	push   eax
c001ca7c:	e8 35 6a ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001ca81:	58                   	pop    eax
c001ca82:	5a                   	pop    edx
c001ca83:	6a 01                	push   0x1
c001ca85:	56                   	push   esi
c001ca86:	e8 8f 6a ff ff       	call   c001351a <File::open(FileOpenMode)>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	85 c0                	test   eax,eax
c001ca90:	0f 85 47 01 00 00    	jne    c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca96:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca9e:	83 ec 0c             	sub    esp,0xc
c001caa1:	6a 34                	push   0x34
c001caa3:	e8 9b 2d ff ff       	call   c000f843 <malloc>
c001caa8:	89 c3                	mov    ebx,eax
c001caaa:	58                   	pop    eax
c001caab:	8b 06                	mov    eax,DWORD PTR [esi]
c001caad:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cab1:	57                   	push   edi
c001cab2:	53                   	push   ebx
c001cab3:	6a 00                	push   0x0
c001cab5:	6a 34                	push   0x34
c001cab7:	56                   	push   esi
c001cab8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cabb:	83 c4 20             	add    esp,0x20
c001cabe:	85 c0                	test   eax,eax
c001cac0:	0f 85 17 01 00 00    	jne    c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cacc:	0f 85 0b 01 00 00    	jne    c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cad5:	85 c0                	test   eax,eax
c001cad7:	0f 84 00 01 00 00    	je     c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadd:	31 d2                	xor    edx,edx
c001cadf:	55                   	push   ebp
c001cae0:	52                   	push   edx
c001cae1:	50                   	push   eax
c001cae2:	56                   	push   esi
c001cae3:	e8 f0 6a ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cae8:	83 c4 10             	add    esp,0x10
c001caeb:	85 c0                	test   eax,eax
c001caed:	0f 85 ea 00 00 00    	jne    c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf3:	83 ec 0c             	sub    esp,0xc
c001caf6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caf9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cafd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb01:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb05:	0f af c2             	imul   eax,edx
c001cb08:	50                   	push   eax
c001cb09:	e8 35 2d ff ff       	call   c000f843 <malloc>
c001cb0e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb14:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb1b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb1f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb23:	0f af c2             	imul   eax,edx
c001cb26:	99                   	cdq    
c001cb27:	52                   	push   edx
c001cb28:	50                   	push   eax
c001cb29:	56                   	push   esi
c001cb2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb2d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb30:	83 c4 20             	add    esp,0x20
c001cb33:	85 c0                	test   eax,eax
c001cb35:	0f 84 a2 00 00 00    	je     c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb3b:	31 d2                	xor    edx,edx
c001cb3d:	51                   	push   ecx
c001cb3e:	52                   	push   edx
c001cb3f:	50                   	push   eax
c001cb40:	56                   	push   esi
c001cb41:	e8 92 6a ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	85 c0                	test   eax,eax
c001cb4b:	0f 85 8c 00 00 00    	jne    c001cbdd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb51:	83 ec 0c             	sub    esp,0xc
c001cb54:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb58:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb5c:	31 ed                	xor    ebp,ebp
c001cb5e:	0f af c2             	imul   eax,edx
c001cb61:	50                   	push   eax
c001cb62:	e8 dc 2c ff ff       	call   c000f843 <malloc>
c001cb67:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb74:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb78:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb7c:	0f af c2             	imul   eax,edx
c001cb7f:	99                   	cdq    
c001cb80:	52                   	push   edx
c001cb81:	50                   	push   eax
c001cb82:	56                   	push   esi
c001cb83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb86:	83 c4 20             	add    esp,0x20
c001cb89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb91:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb95:	0f 86 80 00 00 00    	jbe    c001cc1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb9b:	0f b7 fd             	movzx  edi,bp
c001cb9e:	c1 e7 05             	shl    edi,0x5
c001cba1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cba5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cba8:	75 6b                	jne    c001cc15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbaa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbb1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbb8:	52                   	push   edx
c001cbb9:	31 d2                	xor    edx,edx
c001cbbb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbbe:	52                   	push   edx
c001cbbf:	50                   	push   eax
c001cbc0:	56                   	push   esi
c001cbc1:	e8 12 6a ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cbc6:	83 c4 10             	add    esp,0x10
c001cbc9:	85 c0                	test   eax,eax
c001cbcb:	74 17                	je     c001cbe4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbcd:	83 ec 0c             	sub    esp,0xc
c001cbd0:	68 c6 bf 02 c0       	push   0xc002bfc6
c001cbd5:	e8 84 63 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001cbda:	83 c4 10             	add    esp,0x10
c001cbdd:	31 c0                	xor    eax,eax
c001cbdf:	e9 87 00 00 00       	jmp    c001cc6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbea:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbed:	50                   	push   eax
c001cbee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf6:	56                   	push   esi
c001cbf7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbfb:	e8 cb fb ff ff       	call   c001c7cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc04:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc08:	83 c4 20             	add    esp,0x20
c001cc0b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc0f:	73 04                	jae    c001cc15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc15:	45                   	inc    ebp
c001cc16:	e9 76 ff ff ff       	jmp    c001cb91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc1b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc27:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc2d:	83 ec 0c             	sub    esp,0xc
c001cc30:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc36:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc3b:	05 00 10 00 00       	add    eax,0x1000
c001cc40:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc47:	e8 07 2c ff ff       	call   c000f853 <free>
c001cc4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc4f:	e8 ff 2b ff ff       	call   c000f853 <free>
c001cc54:	58                   	pop    eax
c001cc55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc59:	e8 f5 2b ff ff       	call   c000f853 <free>
c001cc5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc61:	e8 12 69 ff ff       	call   c0013578 <File::close()>
c001cc66:	83 c4 10             	add    esp,0x10
c001cc69:	b0 01                	mov    al,0x1
c001cc6b:	83 c4 3c             	add    esp,0x3c
c001cc6e:	5b                   	pop    ebx
c001cc6f:	5e                   	pop    esi
c001cc70:	5f                   	pop    edi
c001cc71:	5d                   	pop    ebp
c001cc72:	c3                   	ret    

c001cc73 <Thr::runtimeReferenceHelper()>:
c001cc73:	83 ec 18             	sub    esp,0x18
c001cc76:	68 ce bf 02 c0       	push   0xc002bfce
c001cc7b:	e8 de 62 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001cc80:	fa                   	cli    
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	eb fe                	jmp    c001cc84 <Thr::runtimeReferenceHelper()+0x11>

c001cc86 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc86:	57                   	push   edi
c001cc87:	56                   	push   esi
c001cc88:	53                   	push   ebx
c001cc89:	31 db                	xor    ebx,ebx
c001cc8b:	39 1d 00 19 03 c0    	cmp    DWORD PTR ds:0xc0031900,ebx
c001cc91:	7e 3c                	jle    c001cccf <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc93:	8b 34 9d 80 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce780]
c001cc9a:	31 ff                	xor    edi,edi
c001cc9c:	39 3c 9d 80 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce880],edi
c001cca3:	7e 27                	jle    c001cccc <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cca5:	50                   	push   eax
c001cca6:	50                   	push   eax
c001cca7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccab:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccad:	03 04 9d 00 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce800]
c001ccb4:	50                   	push   eax
c001ccb5:	e8 06 3c fe ff       	call   c00008c0 <strcmp>
c001ccba:	83 c4 10             	add    esp,0x10
c001ccbd:	85 c0                	test   eax,eax
c001ccbf:	75 05                	jne    c001ccc6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccc1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccc4:	eb 0b                	jmp    c001ccd1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccc6:	83 c6 10             	add    esi,0x10
c001ccc9:	47                   	inc    edi
c001ccca:	eb d0                	jmp    c001cc9c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cccc:	43                   	inc    ebx
c001cccd:	eb bc                	jmp    c001cc8b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cccf:	31 c0                	xor    eax,eax
c001ccd1:	5b                   	pop    ebx
c001ccd2:	5e                   	pop    esi
c001ccd3:	5f                   	pop    edi
c001ccd4:	c3                   	ret    

c001ccd5 <Thr::loadKernelSymbolTable(char const*)>:
c001ccd5:	55                   	push   ebp
c001ccd6:	57                   	push   edi
c001ccd7:	56                   	push   esi
c001ccd8:	53                   	push   ebx
c001ccd9:	83 ec 68             	sub    esp,0x68
c001ccdc:	8b 35 54 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031954
c001cce2:	68 14 01 00 00       	push   0x114
c001cce7:	e8 57 2b ff ff       	call   c000f843 <malloc>
c001ccec:	83 c4 0c             	add    esp,0xc
c001ccef:	89 c3                	mov    ebx,eax
c001ccf1:	56                   	push   esi
c001ccf2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccf6:	50                   	push   eax
c001ccf7:	e8 ba 67 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001ccfc:	5e                   	pop    esi
c001ccfd:	5f                   	pop    edi
c001ccfe:	6a 01                	push   0x1
c001cd00:	53                   	push   ebx
c001cd01:	e8 14 68 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001cd06:	83 c4 10             	add    esp,0x10
c001cd09:	85 c0                	test   eax,eax
c001cd0b:	74 0a                	je     c001cd17 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	68 f0 bf 02 c0       	push   0xc002bff0
c001cd15:	eb 34                	jmp    c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd17:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	6a 34                	push   0x34
c001cd24:	e8 1a 2b ff ff       	call   c000f843 <malloc>
c001cd29:	59                   	pop    ecx
c001cd2a:	89 c7                	mov    edi,eax
c001cd2c:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd32:	56                   	push   esi
c001cd33:	57                   	push   edi
c001cd34:	6a 00                	push   0x0
c001cd36:	6a 34                	push   0x34
c001cd38:	53                   	push   ebx
c001cd39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd3c:	83 c4 20             	add    esp,0x20
c001cd3f:	85 c0                	test   eax,eax
c001cd41:	74 17                	je     c001cd5a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd43:	83 ec 0c             	sub    esp,0xc
c001cd46:	68 07 c0 02 c0       	push   0xc002c007
c001cd4b:	e8 af d8 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001cd50:	83 c4 10             	add    esp,0x10
c001cd53:	31 c0                	xor    eax,eax
c001cd55:	e9 31 02 00 00       	jmp    c001cf8b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd5a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd60:	75 e1                	jne    c001cd43 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd62:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd65:	85 c0                	test   eax,eax
c001cd67:	74 da                	je     c001cd43 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd69:	52                   	push   edx
c001cd6a:	31 d2                	xor    edx,edx
c001cd6c:	52                   	push   edx
c001cd6d:	50                   	push   eax
c001cd6e:	53                   	push   ebx
c001cd6f:	e8 64 68 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	85 c0                	test   eax,eax
c001cd79:	75 c8                	jne    c001cd43 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd86:	31 ed                	xor    ebp,ebp
c001cd88:	0f af c2             	imul   eax,edx
c001cd8b:	50                   	push   eax
c001cd8c:	e8 b2 2a ff ff       	call   c000f843 <malloc>
c001cd91:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd97:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd9e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cda2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cda6:	0f af c2             	imul   eax,edx
c001cda9:	99                   	cdq    
c001cdaa:	52                   	push   edx
c001cdab:	50                   	push   eax
c001cdac:	53                   	push   ebx
c001cdad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdb0:	83 c4 20             	add    esp,0x20
c001cdb3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdbb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdcb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdd3:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdd7:	0f 86 aa 00 00 00    	jbe    c001ce87 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cddd:	0f b7 f5             	movzx  esi,bp
c001cde0:	6b f6 28             	imul   esi,esi,0x28
c001cde3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cde7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdee:	50                   	push   eax
c001cdef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdf3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdf7:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdf9:	6b c0 28             	imul   eax,eax,0x28
c001cdfc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce00:	89 d0                	mov    eax,edx
c001ce02:	31 d2                	xor    edx,edx
c001ce04:	52                   	push   edx
c001ce05:	50                   	push   eax
c001ce06:	53                   	push   ebx
c001ce07:	e8 cc 67 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001ce0c:	83 c4 0c             	add    esp,0xc
c001ce0f:	6a 20                	push   0x20
c001ce11:	6a 00                	push   0x0
c001ce13:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce17:	52                   	push   edx
c001ce18:	e8 5b 39 fe ff       	call   c0000778 <memset>
c001ce1d:	58                   	pop    eax
c001ce1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce20:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce24:	51                   	push   ecx
c001ce25:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce29:	52                   	push   edx
c001ce2a:	6a 00                	push   0x0
c001ce2c:	6a 1f                	push   0x1f
c001ce2e:	53                   	push   ebx
c001ce2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce32:	83 c4 18             	add    esp,0x18
c001ce35:	68 1e c0 02 c0       	push   0xc002c01e
c001ce3a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce3e:	52                   	push   edx
c001ce3f:	e8 7c 3a fe ff       	call   c00008c0 <strcmp>
c001ce44:	83 c4 10             	add    esp,0x10
c001ce47:	85 c0                	test   eax,eax
c001ce49:	75 0f                	jne    c001ce5a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce4b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce5a:	50                   	push   eax
c001ce5b:	50                   	push   eax
c001ce5c:	68 26 c0 02 c0       	push   0xc002c026
c001ce61:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce65:	50                   	push   eax
c001ce66:	e8 55 3a fe ff       	call   c00008c0 <strcmp>
c001ce6b:	83 c4 10             	add    esp,0x10
c001ce6e:	85 c0                	test   eax,eax
c001ce70:	75 0f                	jne    c001ce81 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce81:	45                   	inc    ebp
c001ce82:	e9 4c ff ff ff       	jmp    c001cdd3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce87:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce8c:	75 10                	jne    c001ce9e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce8e:	83 ec 0c             	sub    esp,0xc
c001ce91:	68 2e c0 02 c0       	push   0xc002c02e
c001ce96:	e8 64 d7 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cea3:	75 10                	jne    c001ceb5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cea5:	83 ec 0c             	sub    esp,0xc
c001cea8:	68 2e c0 02 c0       	push   0xc002c02e
c001cead:	e8 4d d7 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001ceb2:	83 c4 10             	add    esp,0x10
c001ceb5:	31 d2                	xor    edx,edx
c001ceb7:	50                   	push   eax
c001ceb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cebc:	52                   	push   edx
c001cebd:	50                   	push   eax
c001cebe:	53                   	push   ebx
c001cebf:	e8 14 67 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cec4:	5a                   	pop    edx
c001cec5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cec9:	e8 75 29 ff ff       	call   c000f843 <malloc>
c001cece:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ced2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced6:	31 c9                	xor    ecx,ecx
c001ced8:	5e                   	pop    esi
c001ced9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cedb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cedf:	55                   	push   ebp
c001cee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee4:	51                   	push   ecx
c001cee5:	52                   	push   edx
c001cee6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ceea:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ceee:	53                   	push   ebx
c001ceef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cef2:	83 c4 14             	add    esp,0x14
c001cef5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cef9:	e8 45 29 ff ff       	call   c000f843 <malloc>
c001cefe:	89 c6                	mov    esi,eax
c001cf00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf05:	56                   	push   esi
c001cf06:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf0e:	51                   	push   ecx
c001cf0f:	52                   	push   edx
c001cf10:	53                   	push   ebx
c001cf11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf18:	8b 15 00 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031900
c001cf1e:	83 c4 1c             	add    esp,0x1c
c001cf21:	c1 e8 04             	shr    eax,0x4
c001cf24:	89 04 95 80 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce880],eax
c001cf2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf2f:	31 d2                	xor    edx,edx
c001cf31:	52                   	push   edx
c001cf32:	50                   	push   eax
c001cf33:	53                   	push   ebx
c001cf34:	e8 9f 66 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001cf39:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf3b:	31 d2                	xor    edx,edx
c001cf3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf40:	56                   	push   esi
c001cf41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf45:	52                   	push   edx
c001cf46:	50                   	push   eax
c001cf47:	53                   	push   ebx
c001cf48:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf4b:	83 c4 14             	add    esp,0x14
c001cf4e:	53                   	push   ebx
c001cf4f:	e8 24 66 ff ff       	call   c0013578 <File::close()>
c001cf54:	5d                   	pop    ebp
c001cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf59:	e8 f5 28 ff ff       	call   c000f853 <free>
c001cf5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf61:	e8 ed 28 ff ff       	call   c000f853 <free>
c001cf66:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c001cf6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf6f:	8d 50 01             	lea    edx,[eax+0x1]
c001cf72:	89 0c 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],ecx
c001cf79:	89 34 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],esi
c001cf80:	89 15 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,edx
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	b0 01                	mov    al,0x1
c001cf8b:	83 c4 5c             	add    esp,0x5c
c001cf8e:	5b                   	pop    ebx
c001cf8f:	5e                   	pop    esi
c001cf90:	5f                   	pop    edi
c001cf91:	5d                   	pop    ebp
c001cf92:	c3                   	ret    

c001cf93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf93:	55                   	push   ebp
c001cf94:	57                   	push   edi
c001cf95:	56                   	push   esi
c001cf96:	53                   	push   ebx
c001cf97:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf9d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfa4:	8b 1d 54 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031954
c001cfaa:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfae:	68 14 01 00 00       	push   0x114
c001cfb3:	e8 8b 28 ff ff       	call   c000f843 <malloc>
c001cfb8:	83 c4 0c             	add    esp,0xc
c001cfbb:	89 c5                	mov    ebp,eax
c001cfbd:	53                   	push   ebx
c001cfbe:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfc5:	50                   	push   eax
c001cfc6:	e8 eb 64 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001cfcb:	5e                   	pop    esi
c001cfcc:	5f                   	pop    edi
c001cfcd:	6a 01                	push   0x1
c001cfcf:	55                   	push   ebp
c001cfd0:	e8 45 65 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	85 c0                	test   eax,eax
c001cfda:	0f 85 8d 06 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfe0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	6a 34                	push   0x34
c001cfed:	e8 51 28 ff ff       	call   c000f843 <malloc>
c001cff2:	5b                   	pop    ebx
c001cff3:	89 c7                	mov    edi,eax
c001cff5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cff9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cffc:	53                   	push   ebx
c001cffd:	57                   	push   edi
c001cffe:	6a 00                	push   0x0
c001d000:	6a 34                	push   0x34
c001d002:	55                   	push   ebp
c001d003:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d006:	83 c4 20             	add    esp,0x20
c001d009:	85 c0                	test   eax,eax
c001d00b:	0f 85 5c 06 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d011:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d017:	0f 85 50 06 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d01d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d020:	85 c0                	test   eax,eax
c001d022:	0f 84 45 06 00 00    	je     c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d028:	31 d2                	xor    edx,edx
c001d02a:	51                   	push   ecx
c001d02b:	52                   	push   edx
c001d02c:	50                   	push   eax
c001d02d:	55                   	push   ebp
c001d02e:	e8 a5 65 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d033:	83 c4 10             	add    esp,0x10
c001d036:	85 c0                	test   eax,eax
c001d038:	0f 85 2f 06 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03e:	83 ec 0c             	sub    esp,0xc
c001d041:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d044:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d048:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d04c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d050:	0f af c2             	imul   eax,edx
c001d053:	50                   	push   eax
c001d054:	e8 ea 27 ff ff       	call   c000f843 <malloc>
c001d059:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d05c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d067:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d06b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d06f:	0f af c2             	imul   eax,edx
c001d072:	99                   	cdq    
c001d073:	52                   	push   edx
c001d074:	50                   	push   eax
c001d075:	55                   	push   ebp
c001d076:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d079:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d07c:	83 c4 20             	add    esp,0x20
c001d07f:	85 c0                	test   eax,eax
c001d081:	0f 84 e6 05 00 00    	je     c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d087:	52                   	push   edx
c001d088:	31 d2                	xor    edx,edx
c001d08a:	52                   	push   edx
c001d08b:	50                   	push   eax
c001d08c:	55                   	push   ebp
c001d08d:	e8 46 65 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d092:	83 c4 10             	add    esp,0x10
c001d095:	85 c0                	test   eax,eax
c001d097:	0f 85 d0 05 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09d:	83 ec 0c             	sub    esp,0xc
c001d0a0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0a4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0a8:	31 f6                	xor    esi,esi
c001d0aa:	0f af c2             	imul   eax,edx
c001d0ad:	50                   	push   eax
c001d0ae:	e8 90 27 ff ff       	call   c000f843 <malloc>
c001d0b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0c1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0c5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0c9:	0f af c2             	imul   eax,edx
c001d0cc:	99                   	cdq    
c001d0cd:	52                   	push   edx
c001d0ce:	50                   	push   eax
c001d0cf:	55                   	push   ebp
c001d0d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d3:	83 c4 20             	add    esp,0x20
c001d0d6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0da:	0f 86 8a 00 00 00    	jbe    c001d16a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0e0:	0f b7 de             	movzx  ebx,si
c001d0e3:	c1 e3 05             	shl    ebx,0x5
c001d0e6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0ea:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0ed:	75 75                	jne    c001d164 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0f2:	31 d2                	xor    edx,edx
c001d0f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0ff:	50                   	push   eax
c001d100:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d103:	52                   	push   edx
c001d104:	50                   	push   eax
c001d105:	55                   	push   ebp
c001d106:	e8 cd 64 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d10b:	83 c4 10             	add    esp,0x10
c001d10e:	85 c0                	test   eax,eax
c001d110:	0f 85 57 05 00 00    	jne    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d116:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d11d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d120:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d124:	31 d2                	xor    edx,edx
c001d126:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d131:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d138:	50                   	push   eax
c001d139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d141:	52                   	push   edx
c001d142:	50                   	push   eax
c001d143:	55                   	push   ebp
c001d144:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d147:	83 c4 1c             	add    esp,0x1c
c001d14a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d14d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d150:	50                   	push   eax
c001d151:	6a 00                	push   0x0
c001d153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d157:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d15b:	50                   	push   eax
c001d15c:	e8 17 36 fe ff       	call   c0000778 <memset>
c001d161:	83 c4 10             	add    esp,0x10
c001d164:	46                   	inc    esi
c001d165:	e9 6c ff ff ff       	jmp    c001d0d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d16a:	53                   	push   ebx
c001d16b:	31 db                	xor    ebx,ebx
c001d16d:	68 00 01 00 00       	push   0x100
c001d172:	6a 00                	push   0x0
c001d174:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d178:	50                   	push   eax
c001d179:	e8 fa 35 fe ff       	call   c0000778 <memset>
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	68 00 01 00 00       	push   0x100
c001d186:	6a 00                	push   0x0
c001d188:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d18f:	50                   	push   eax
c001d190:	e8 e3 35 fe ff       	call   c0000778 <memset>
c001d195:	83 c4 10             	add    esp,0x10
c001d198:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1a0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1a8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1c0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1c4:	0f 86 30 01 00 00    	jbe    c001d2fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1ca:	0f b7 f3             	movzx  esi,bx
c001d1cd:	6b f6 28             	imul   esi,esi,0x28
c001d1d0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1db:	52                   	push   edx
c001d1dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1e4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1e6:	6b d2 28             	imul   edx,edx,0x28
c001d1e9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1ed:	31 d2                	xor    edx,edx
c001d1ef:	52                   	push   edx
c001d1f0:	50                   	push   eax
c001d1f1:	55                   	push   ebp
c001d1f2:	e8 e1 63 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d1f7:	83 c4 0c             	add    esp,0xc
c001d1fa:	6a 20                	push   0x20
c001d1fc:	6a 00                	push   0x0
c001d1fe:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d205:	51                   	push   ecx
c001d206:	e8 6d 35 fe ff       	call   c0000778 <memset>
c001d20b:	59                   	pop    ecx
c001d20c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d20f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d213:	52                   	push   edx
c001d214:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d21b:	51                   	push   ecx
c001d21c:	6a 00                	push   0x0
c001d21e:	6a 1f                	push   0x1f
c001d220:	55                   	push   ebp
c001d221:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d224:	83 c4 1c             	add    esp,0x1c
c001d227:	6a 09                	push   0x9
c001d229:	68 48 c0 02 c0       	push   0xc002c048
c001d22e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d235:	51                   	push   ecx
c001d236:	e8 05 34 fe ff       	call   c0000640 <memcmp>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	85 c0                	test   eax,eax
c001d240:	75 21                	jne    c001d263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d246:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d24a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d24e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d252:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d255:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d25c:	89 d0                	mov    eax,edx
c001d25e:	40                   	inc    eax
c001d25f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d263:	50                   	push   eax
c001d264:	6a 09                	push   0x9
c001d266:	68 52 c0 02 c0       	push   0xc002c052
c001d26b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d272:	50                   	push   eax
c001d273:	e8 c8 33 fe ff       	call   c0000640 <memcmp>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	85 c0                	test   eax,eax
c001d27d:	75 21                	jne    c001d2a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d27f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d287:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d28b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d28f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d292:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d299:	89 d0                	mov    eax,edx
c001d29b:	40                   	inc    eax
c001d29c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a0:	50                   	push   eax
c001d2a1:	50                   	push   eax
c001d2a2:	68 1e c0 02 c0       	push   0xc002c01e
c001d2a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ae:	50                   	push   eax
c001d2af:	e8 0c 36 fe ff       	call   c00008c0 <strcmp>
c001d2b4:	83 c4 10             	add    esp,0x10
c001d2b7:	85 c0                	test   eax,eax
c001d2b9:	75 0f                	jne    c001d2ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2ca:	50                   	push   eax
c001d2cb:	50                   	push   eax
c001d2cc:	68 26 c0 02 c0       	push   0xc002c026
c001d2d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d8:	50                   	push   eax
c001d2d9:	e8 e2 35 fe ff       	call   c00008c0 <strcmp>
c001d2de:	83 c4 10             	add    esp,0x10
c001d2e1:	85 c0                	test   eax,eax
c001d2e3:	75 0f                	jne    c001d2f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2f4:	43                   	inc    ebx
c001d2f5:	e9 c6 fe ff ff       	jmp    c001d1c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2fa:	31 d2                	xor    edx,edx
c001d2fc:	50                   	push   eax
c001d2fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d301:	52                   	push   edx
c001d302:	50                   	push   eax
c001d303:	55                   	push   ebp
c001d304:	e8 cf 62 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d309:	58                   	pop    eax
c001d30a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d30e:	e8 30 25 ff ff       	call   c000f843 <malloc>
c001d313:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d316:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d31a:	31 d2                	xor    edx,edx
c001d31c:	58                   	pop    eax
c001d31d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d321:	53                   	push   ebx
c001d322:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d326:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d32a:	52                   	push   edx
c001d32b:	50                   	push   eax
c001d32c:	55                   	push   ebp
c001d32d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d330:	83 c4 14             	add    esp,0x14
c001d333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d337:	e8 07 25 ff ff       	call   c000f843 <malloc>
c001d33c:	31 d2                	xor    edx,edx
c001d33e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d342:	83 c4 0c             	add    esp,0xc
c001d345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d349:	52                   	push   edx
c001d34a:	50                   	push   eax
c001d34b:	55                   	push   ebp
c001d34c:	e8 87 62 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d351:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d354:	31 d2                	xor    edx,edx
c001d356:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d359:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d35d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d361:	52                   	push   edx
c001d362:	50                   	push   eax
c001d363:	55                   	push   ebp
c001d364:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d367:	83 c4 20             	add    esp,0x20
c001d36a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d372:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d376:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d37a:	0f 84 f1 02 00 00    	je     c001d671 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d380:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d387:	31 d2                	xor    edx,edx
c001d389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d38d:	c1 e8 03             	shr    eax,0x3
c001d390:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d394:	51                   	push   ecx
c001d395:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d399:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d39d:	52                   	push   edx
c001d39e:	50                   	push   eax
c001d39f:	55                   	push   ebp
c001d3a0:	e8 33 62 ff ff       	call   c00135d8 <File::seek(unsigned long long)>
c001d3a5:	5b                   	pop    ebx
c001d3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3aa:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3b1:	e8 8d 24 ff ff       	call   c000f843 <malloc>
c001d3b6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3bd:	31 d2                	xor    edx,edx
c001d3bf:	5e                   	pop    esi
c001d3c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3c4:	50                   	push   eax
c001d3c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3cd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3d4:	52                   	push   edx
c001d3d5:	50                   	push   eax
c001d3d6:	55                   	push   ebp
c001d3d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3da:	83 c4 20             	add    esp,0x20
c001d3dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3e9:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3ed:	0f 8d 62 02 00 00    	jge    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3fb:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d400:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d403:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d40b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d40f:	89 d8                	mov    eax,ebx
c001d411:	c1 e8 08             	shr    eax,0x8
c001d414:	89 c6                	mov    esi,eax
c001d416:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d41a:	c1 e6 04             	shl    esi,0x4
c001d41d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d421:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d424:	85 d2                	test   edx,edx
c001d426:	0f 85 bf 00 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d433:	03 06                	add    eax,DWORD PTR [esi]
c001d435:	50                   	push   eax
c001d436:	e8 4b f8 ff ff       	call   c001cc86 <Thr::getAddressOfKernelSymbol(char const*)>
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	89 c2                	mov    edx,eax
c001d440:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d445:	85 c0                	test   eax,eax
c001d447:	0f 85 9e 00 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d44d:	83 ec 0c             	sub    esp,0xc
c001d450:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d454:	03 06                	add    eax,DWORD PTR [esi]
c001d456:	50                   	push   eax
c001d457:	e8 99 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d45c:	83 c4 10             	add    esp,0x10
c001d45f:	89 c2                	mov    edx,eax
c001d461:	85 c0                	test   eax,eax
c001d463:	0f 85 82 00 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d469:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d46d:	50                   	push   eax
c001d46e:	50                   	push   eax
c001d46f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d473:	03 06                	add    eax,DWORD PTR [esi]
c001d475:	50                   	push   eax
c001d476:	68 5c c0 02 c0       	push   0xc002c05c
c001d47b:	e8 de 5a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001d480:	58                   	pop    eax
c001d481:	5a                   	pop    edx
c001d482:	68 76 c0 02 c0       	push   0xc002c076
c001d487:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48e:	50                   	push   eax
c001d48f:	e8 a0 33 fe ff       	call   c0000834 <strcpy>
c001d494:	59                   	pop    ecx
c001d495:	58                   	pop    eax
c001d496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49a:	03 06                	add    eax,DWORD PTR [esi]
c001d49c:	50                   	push   eax
c001d49d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a4:	50                   	push   eax
c001d4a5:	e8 ca 34 fe ff       	call   c0000974 <strcat>
c001d4aa:	58                   	pop    eax
c001d4ab:	5a                   	pop    edx
c001d4ac:	68 0c c1 02 c0       	push   0xc002c10c
c001d4b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b8:	50                   	push   eax
c001d4b9:	e8 b6 34 fe ff       	call   c0000974 <strcat>
c001d4be:	83 c4 10             	add    esp,0x10
c001d4c1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4c6:	0f 84 43 01 00 00    	je     c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d6:	50                   	push   eax
c001d4d7:	e8 23 d1 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4e7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4eb:	80 fb 01             	cmp    bl,0x1
c001d4ee:	75 7d                	jne    c001d56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4f0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4f7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4fb:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4ff:	01 ce                	add    esi,ecx
c001d501:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d507:	0f 94 c0             	sete   al
c001d50a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d510:	0f 94 c3             	sete   bl
c001d513:	09 c3                	or     ebx,eax
c001d515:	8b 06                	mov    eax,DWORD PTR [esi]
c001d517:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d51c:	74 36                	je     c001d554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d51e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d521:	84 db                	test   bl,bl
c001d523:	75 0a                	jne    c001d52f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d525:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d529:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d52d:	76 37                	jbe    c001d566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d52f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d533:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d538:	0f 84 d1 00 00 00    	je     c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d53e:	83 ec 0c             	sub    esp,0xc
c001d541:	68 8d c0 02 c0       	push   0xc002c08d
c001d546:	e8 b4 d0 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d54b:	83 c4 10             	add    esp,0x10
c001d54e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d552:	eb 12                	jmp    c001d566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d554:	01 c1                	add    ecx,eax
c001d556:	84 db                	test   bl,bl
c001d558:	75 0c                	jne    c001d566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d55a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d55e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d562:	77 02                	ja     c001d566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d564:	01 d1                	add    ecx,edx
c001d566:	89 0e                	mov    DWORD PTR [esi],ecx
c001d568:	e9 df 00 00 00       	jmp    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d56d:	80 fb 02             	cmp    bl,0x2
c001d570:	75 71                	jne    c001d5e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d572:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d579:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d57d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d581:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d587:	74 15                	je     c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d589:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d58f:	74 0d                	je     c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d591:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d595:	83 e8 04             	sub    eax,0x4
c001d598:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d59c:	76 1f                	jbe    c001d5bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d59e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a7:	74 66                	je     c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5a9:	83 ec 0c             	sub    esp,0xc
c001d5ac:	68 a9 c0 02 c0       	push   0xc002c0a9
c001d5b1:	e8 49 d0 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5bd:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5bf:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5c4:	74 13                	je     c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5ca:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5d1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5d5:	01 c8                	add    eax,ecx
c001d5d7:	eb 04                	jmp    c001d5dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5d9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5dd:	01 c2                	add    edx,eax
c001d5df:	89 16                	mov    DWORD PTR [esi],edx
c001d5e1:	eb 69                	jmp    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5e3:	0f b6 db             	movzx  ebx,bl
c001d5e6:	50                   	push   eax
c001d5e7:	50                   	push   eax
c001d5e8:	53                   	push   ebx
c001d5e9:	68 c5 c0 02 c0       	push   0xc002c0c5
c001d5ee:	e8 6b 59 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5fb:	74 12                	je     c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5fd:	83 ec 0c             	sub    esp,0xc
c001d600:	68 d0 c0 02 c0       	push   0xc002c0d0
c001d605:	e8 f5 cf ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	eb 3d                	jmp    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d60f:	83 ec 0c             	sub    esp,0xc
c001d612:	55                   	push   ebp
c001d613:	e8 60 5f ff ff       	call   c0013578 <File::close()>
c001d618:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d61b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d61e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d621:	59                   	pop    ecx
c001d622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d626:	e8 28 22 ff ff       	call   c000f853 <free>
c001d62b:	5b                   	pop    ebx
c001d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d630:	e8 1e 22 ff ff       	call   c000f853 <free>
c001d635:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d638:	e8 16 22 ff ff       	call   c000f853 <free>
c001d63d:	5e                   	pop    esi
c001d63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d642:	e8 0c 22 ff ff       	call   c000f853 <free>
c001d647:	83 c4 10             	add    esp,0x10
c001d64a:	eb 21                	jmp    c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d64c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d650:	e9 90 fd ff ff       	jmp    c001d3e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d65c:	e8 f2 21 ff ff       	call   c000f853 <free>
c001d661:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	e9 05 fd ff ff       	jmp    c001d372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d66d:	31 c0                	xor    eax,eax
c001d66f:	eb 33                	jmp    c001d6a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d671:	83 ec 0c             	sub    esp,0xc
c001d674:	55                   	push   ebp
c001d675:	e8 fe 5e ff ff       	call   c0013578 <File::close()>
c001d67a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d67d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d680:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d683:	58                   	pop    eax
c001d684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d688:	e8 c6 21 ff ff       	call   c000f853 <free>
c001d68d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d690:	e8 be 21 ff ff       	call   c000f853 <free>
c001d695:	5a                   	pop    edx
c001d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d69a:	e8 b4 21 ff ff       	call   c000f853 <free>
c001d69f:	83 c4 10             	add    esp,0x10
c001d6a2:	b0 01                	mov    al,0x1
c001d6a4:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6aa:	5b                   	pop    ebx
c001d6ab:	5e                   	pop    esi
c001d6ac:	5f                   	pop    edi
c001d6ad:	5d                   	pop    ebp
c001d6ae:	c3                   	ret    

c001d6af <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6af:	56                   	push   esi
c001d6b0:	31 d2                	xor    edx,edx
c001d6b2:	53                   	push   ebx
c001d6b3:	8b 1d 60 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031160
c001d6b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6bd:	39 d3                	cmp    ebx,edx
c001d6bf:	7e 1b                	jle    c001d6dc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6c1:	8b 04 95 80 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec80]
c001d6c8:	39 c8                	cmp    eax,ecx
c001d6ca:	77 0d                	ja     c001d6d9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6cc:	8b 34 95 80 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee80]
c001d6d3:	01 c6                	add    esi,eax
c001d6d5:	39 ce                	cmp    esi,ecx
c001d6d7:	77 05                	ja     c001d6de <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6d9:	42                   	inc    edx
c001d6da:	eb e1                	jmp    c001d6bd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6dc:	31 c0                	xor    eax,eax
c001d6de:	5b                   	pop    ebx
c001d6df:	5e                   	pop    esi
c001d6e0:	c3                   	ret    

c001d6e1 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6e1:	53                   	push   ebx
c001d6e2:	31 c0                	xor    eax,eax
c001d6e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6e8:	8b 1d 60 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031160
c001d6ee:	39 c3                	cmp    ebx,eax
c001d6f0:	7e 22                	jle    c001d714 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6f2:	8b 14 85 80 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec80]
c001d6f9:	39 ca                	cmp    edx,ecx
c001d6fb:	77 14                	ja     c001d711 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6fd:	03 14 85 80 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee80]
c001d704:	39 ca                	cmp    edx,ecx
c001d706:	76 09                	jbe    c001d711 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d708:	8b 04 85 80 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea80]
c001d70f:	eb 05                	jmp    c001d716 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d711:	40                   	inc    eax
c001d712:	eb da                	jmp    c001d6ee <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d714:	31 c0                	xor    eax,eax
c001d716:	5b                   	pop    ebx
c001d717:	c3                   	ret    

c001d718 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d718:	53                   	push   ebx
c001d719:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d71d:	53                   	push   ebx
c001d71e:	e8 8c ff ff ff       	call   c001d6af <Thr::getDriverBaseFromAddress(unsigned long)>
c001d723:	5a                   	pop    edx
c001d724:	31 d2                	xor    edx,edx
c001d726:	85 c0                	test   eax,eax
c001d728:	74 04                	je     c001d72e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d72a:	89 da                	mov    edx,ebx
c001d72c:	29 c2                	sub    edx,eax
c001d72e:	89 d0                	mov    eax,edx
c001d730:	5b                   	pop    ebx
c001d731:	c3                   	ret    

c001d732 <Thr::loadDLL(char const*, bool)>:
c001d732:	55                   	push   ebp
c001d733:	57                   	push   edi
c001d734:	56                   	push   esi
c001d735:	53                   	push   ebx
c001d736:	81 ec 34 01 00 00    	sub    esp,0x134
c001d73c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d743:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d74a:	56                   	push   esi
c001d74b:	68 e8 c0 02 c0       	push   0xc002c0e8
c001d750:	e8 09 58 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001d755:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d75c:	e8 e2 20 ff ff       	call   c000f843 <malloc>
c001d761:	83 c4 0c             	add    esp,0xc
c001d764:	89 c3                	mov    ebx,eax
c001d766:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001d76c:	56                   	push   esi
c001d76d:	50                   	push   eax
c001d76e:	e8 43 5d ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	85 db                	test   ebx,ebx
c001d778:	75 3c                	jne    c001d7b6 <Thr::loadDLL(char const*, bool)+0x84>
c001d77a:	89 e8                	mov    eax,ebp
c001d77c:	84 c0                	test   al,al
c001d77e:	0f 84 d5 01 00 00    	je     c001d959 <Thr::loadDLL(char const*, bool)+0x227>
c001d784:	57                   	push   edi
c001d785:	57                   	push   edi
c001d786:	68 f9 c0 02 c0       	push   0xc002c0f9
c001d78b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d78f:	57                   	push   edi
c001d790:	e8 9f 30 fe ff       	call   c0000834 <strcpy>
c001d795:	58                   	pop    eax
c001d796:	5a                   	pop    edx
c001d797:	56                   	push   esi
c001d798:	57                   	push   edi
c001d799:	e8 d6 31 fe ff       	call   c0000974 <strcat>
c001d79e:	59                   	pop    ecx
c001d79f:	58                   	pop    eax
c001d7a0:	68 0c c1 02 c0       	push   0xc002c10c
c001d7a5:	57                   	push   edi
c001d7a6:	e8 c9 31 fe ff       	call   c0000974 <strcat>
c001d7ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ae:	e8 4c ce ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d7b3:	83 c4 10             	add    esp,0x10
c001d7b6:	51                   	push   ecx
c001d7b7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7bb:	50                   	push   eax
c001d7bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7c0:	50                   	push   eax
c001d7c1:	53                   	push   ebx
c001d7c2:	e8 ff 5f ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c001d7c7:	83 c4 10             	add    esp,0x10
c001d7ca:	85 db                	test   ebx,ebx
c001d7cc:	74 0c                	je     c001d7da <Thr::loadDLL(char const*, bool)+0xa8>
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7d3:	53                   	push   ebx
c001d7d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7df:	75 0a                	jne    c001d7eb <Thr::loadDLL(char const*, bool)+0xb9>
c001d7e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7e5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7e9:	75 3c                	jne    c001d827 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7eb:	89 e8                	mov    eax,ebp
c001d7ed:	84 c0                	test   al,al
c001d7ef:	0f 84 4c 01 00 00    	je     c001d941 <Thr::loadDLL(char const*, bool)+0x20f>
c001d7f5:	51                   	push   ecx
c001d7f6:	51                   	push   ecx
c001d7f7:	68 f9 c0 02 c0       	push   0xc002c0f9
c001d7fc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d800:	53                   	push   ebx
c001d801:	e8 2e 30 fe ff       	call   c0000834 <strcpy>
c001d806:	5f                   	pop    edi
c001d807:	58                   	pop    eax
c001d808:	56                   	push   esi
c001d809:	53                   	push   ebx
c001d80a:	e8 65 31 fe ff       	call   c0000974 <strcat>
c001d80f:	58                   	pop    eax
c001d810:	5a                   	pop    edx
c001d811:	68 0c c1 02 c0       	push   0xc002c10c
c001d816:	53                   	push   ebx
c001d817:	e8 58 31 fe ff       	call   c0000974 <strcat>
c001d81c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d81f:	e8 db cd ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d824:	83 c4 10             	add    esp,0x10
c001d827:	e8 14 46 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d82c:	51                   	push   ecx
c001d82d:	6a 03                	push   0x3
c001d82f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d833:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d837:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d83d:	83 d3 00             	adc    ebx,0x0
c001d840:	89 ca                	mov    edx,ecx
c001d842:	89 d1                	mov    ecx,edx
c001d844:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d848:	51                   	push   ecx
c001d849:	50                   	push   eax
c001d84a:	e8 2d 4c ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001d84f:	5f                   	pop    edi
c001d850:	89 c3                	mov    ebx,eax
c001d852:	58                   	pop    eax
c001d853:	53                   	push   ebx
c001d854:	68 0e c1 02 c0       	push   0xc002c10e
c001d859:	e8 00 57 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001d85e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d861:	e8 2e 2f fe ff       	call   c0000794 <strlen>
c001d866:	8b 3d 60 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031160
c001d86c:	40                   	inc    eax
c001d86d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d870:	e8 ce 1f ff ff       	call   c000f843 <malloc>
c001d875:	89 04 bd 80 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea80],eax
c001d87c:	58                   	pop    eax
c001d87d:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001d882:	5a                   	pop    edx
c001d883:	56                   	push   esi
c001d884:	ff 34 85 80 15 03 c0 	push   DWORD PTR [eax*4-0x3ffcea80]
c001d88b:	e8 a4 2f fe ff       	call   c0000834 <strcpy>
c001d890:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001d895:	8d 50 01             	lea    edx,[eax+0x1]
c001d898:	89 1c 85 80 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec80],ebx
c001d89f:	89 15 60 11 03 c0    	mov    DWORD PTR ds:0xc0031160,edx
c001d8a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8a9:	83 c4 0c             	add    esp,0xc
c001d8ac:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c001d8b3:	6a 01                	push   0x1
c001d8b5:	53                   	push   ebx
c001d8b6:	56                   	push   esi
c001d8b7:	e8 d7 f6 ff ff       	call   c001cf93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8bc:	83 c4 10             	add    esp,0x10
c001d8bf:	89 c7                	mov    edi,eax
c001d8c1:	84 c0                	test   al,al
c001d8c3:	0f 85 8c 00 00 00    	jne    c001d955 <Thr::loadDLL(char const*, bool)+0x223>
c001d8c9:	89 e8                	mov    eax,ebp
c001d8cb:	84 c0                	test   al,al
c001d8cd:	74 76                	je     c001d945 <Thr::loadDLL(char const*, bool)+0x213>
c001d8cf:	83 ec 0c             	sub    esp,0xc
c001d8d2:	68 1b c1 02 c0       	push   0xc002c11b
c001d8d7:	e8 23 cd ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d8dc:	83 c4 10             	add    esp,0x10
c001d8df:	eb 64                	jmp    c001d945 <Thr::loadDLL(char const*, bool)+0x213>
c001d8e1:	e8 5a 45 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d8e6:	89 f5                	mov    ebp,esi
c001d8e8:	c1 e5 0c             	shl    ebp,0xc
c001d8eb:	52                   	push   edx
c001d8ec:	01 dd                	add    ebp,ebx
c001d8ee:	52                   	push   edx
c001d8ef:	55                   	push   ebp
c001d8f0:	50                   	push   eax
c001d8f1:	e8 00 47 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001d8f6:	83 c4 10             	add    esp,0x10
c001d8f9:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8fc:	75 0c                	jne    c001d90a <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8fe:	83 ec 0c             	sub    esp,0xc
c001d901:	55                   	push   ebp
c001d902:	e8 54 25 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d907:	83 c4 10             	add    esp,0x10
c001d90a:	46                   	inc    esi
c001d90b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d90f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d913:	05 ff 0f 00 00       	add    eax,0xfff
c001d918:	83 d2 00             	adc    edx,0x0
c001d91b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d91f:	c1 ea 0c             	shr    edx,0xc
c001d922:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d926:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d92a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d92e:	ba 00 00 00 00       	mov    edx,0x0
c001d933:	89 d0                	mov    eax,edx
c001d935:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d939:	72 a6                	jb     c001d8e1 <Thr::loadDLL(char const*, bool)+0x1af>
c001d93b:	89 f8                	mov    eax,edi
c001d93d:	84 c0                	test   al,al
c001d93f:	75 18                	jne    c001d959 <Thr::loadDLL(char const*, bool)+0x227>
c001d941:	31 db                	xor    ebx,ebx
c001d943:	eb 14                	jmp    c001d959 <Thr::loadDLL(char const*, bool)+0x227>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	68 3a c1 02 c0       	push   0xc002c13a
c001d94d:	e8 ad cc ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d952:	83 c4 10             	add    esp,0x10
c001d955:	31 f6                	xor    esi,esi
c001d957:	eb b2                	jmp    c001d90b <Thr::loadDLL(char const*, bool)+0x1d9>
c001d959:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d95f:	89 d8                	mov    eax,ebx
c001d961:	5b                   	pop    ebx
c001d962:	5e                   	pop    esi
c001d963:	5f                   	pop    edi
c001d964:	5d                   	pop    ebp
c001d965:	c3                   	ret    

c001d966 <Thr::executeDLL(unsigned long, void*)>:
c001d966:	56                   	push   esi
c001d967:	53                   	push   ebx
c001d968:	52                   	push   edx
c001d969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d96d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d971:	85 db                	test   ebx,ebx
c001d973:	75 10                	jne    c001d985 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d975:	83 ec 0c             	sub    esp,0xc
c001d978:	68 56 c1 02 c0       	push   0xc002c156
c001d97d:	e8 7d cc ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	50                   	push   eax
c001d986:	50                   	push   eax
c001d987:	53                   	push   ebx
c001d988:	68 80 c1 02 c0       	push   0xc002c180
c001d98d:	e8 cc 55 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001d992:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d996:	89 d8                	mov    eax,ebx
c001d998:	83 c4 14             	add    esp,0x14
c001d99b:	5b                   	pop    ebx
c001d99c:	5e                   	pop    esi
c001d99d:	ff e0                	jmp    eax
c001d99f:	90                   	nop

c001d9a0 <changeTSS>:
c001d9a0:	83 ec 14             	sub    esp,0x14
c001d9a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9ab:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9b0:	c1 e2 15             	shl    edx,0x15
c001d9b3:	29 d0                	sub    eax,edx
c001d9b5:	50                   	push   eax
c001d9b6:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001d9bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9c1:	05 7c 11 00 00       	add    eax,0x117c
c001d9c6:	50                   	push   eax
c001d9c7:	e8 18 3b ff ff       	call   c00114e4 <TSS::setESP(unsigned long)>
c001d9cc:	83 c4 1c             	add    esp,0x1c
c001d9cf:	c3                   	ret    

c001d9d0 <Process::addArgs(char**)>:
c001d9d0:	57                   	push   edi
c001d9d1:	56                   	push   esi
c001d9d2:	53                   	push   ebx
c001d9d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9db:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9e5:	85 ff                	test   edi,edi
c001d9e7:	74 3d                	je     c001da26 <Process::addArgs(char**)+0x56>
c001d9e9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9eb:	85 c0                	test   eax,eax
c001d9ed:	74 37                	je     c001da26 <Process::addArgs(char**)+0x56>
c001d9ef:	31 db                	xor    ebx,ebx
c001d9f1:	83 ec 0c             	sub    esp,0xc
c001d9f4:	50                   	push   eax
c001d9f5:	e8 9a 2d fe ff       	call   c0000794 <strlen>
c001d9fa:	40                   	inc    eax
c001d9fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9fe:	e8 40 1e ff ff       	call   c000f843 <malloc>
c001da03:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da0a:	5a                   	pop    edx
c001da0b:	59                   	pop    ecx
c001da0c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da0f:	43                   	inc    ebx
c001da10:	50                   	push   eax
c001da11:	e8 1e 2e fe ff       	call   c0000834 <strcpy>
c001da16:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da1c:	83 c4 10             	add    esp,0x10
c001da1f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da22:	85 c0                	test   eax,eax
c001da24:	75 cb                	jne    c001d9f1 <Process::addArgs(char**)+0x21>
c001da26:	5b                   	pop    ebx
c001da27:	5e                   	pop    esi
c001da28:	5f                   	pop    edi
c001da29:	c3                   	ret    

c001da2a <Process::Process(char const*, Process*, char**)>:
c001da2a:	56                   	push   esi
c001da2b:	53                   	push   ebx
c001da2c:	83 ec 14             	sub    esp,0x14
c001da2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da33:	05 0c 02 00 00       	add    eax,0x20c
c001da38:	bb 07 00 00 00       	mov    ebx,0x7
c001da3d:	89 c6                	mov    esi,eax
c001da3f:	85 db                	test   ebx,ebx
c001da41:	78 12                	js     c001da55 <Process::Process(char const*, Process*, char**)+0x2b>
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	56                   	push   esi
c001da47:	e8 26 b2 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	83 c6 63             	add    esi,0x63
c001da52:	4b                   	dec    ebx
c001da53:	eb ea                	jmp    c001da3f <Process::Process(char const*, Process*, char**)+0x15>
c001da55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da59:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da67:	e8 e4 c9 ff ff       	call   c001a450 <Krnl::newProcessEnv(Process*)>
c001da6c:	83 c4 10             	add    esp,0x10
c001da6f:	89 c2                	mov    edx,eax
c001da71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da75:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da88:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c001da8d:	8d 50 01             	lea    edx,[eax+0x1]
c001da90:	89 15 50 d9 02 c0    	mov    DWORD PTR ds:0xc002d950,edx
c001da96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da9a:	89 02                	mov    DWORD PTR [edx],eax
c001da9c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daab:	e8 93 1d ff ff       	call   c000f843 <malloc>
c001dab0:	83 c4 10             	add    esp,0x10
c001dab3:	89 c3                	mov    ebx,eax
c001dab5:	83 ec 08             	sub    esp,0x8
c001dab8:	6a 00                	push   0x0
c001daba:	53                   	push   ebx
c001dabb:	e8 64 4d ff ff       	call   c0012824 <VAS::VAS(bool)>
c001dac0:	83 c4 10             	add    esp,0x10
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dadb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dae3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daf3:	85 c0                	test   eax,eax
c001daf5:	74 42                	je     c001db39 <Process::Process(char const*, Process*, char**)+0x10f>
c001daf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db01:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db1b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db25:	05 0c 01 00 00       	add    eax,0x10c
c001db2a:	83 ec 08             	sub    esp,0x8
c001db2d:	52                   	push   edx
c001db2e:	50                   	push   eax
c001db2f:	e8 00 2d fe ff       	call   c0000834 <strcpy>
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	eb 63                	jmp    c001db9c <Process::Process(char const*, Process*, char**)+0x172>
c001db39:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db41:	83 ec 0c             	sub    esp,0xc
c001db44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db48:	e8 f6 1c ff ff       	call   c000f843 <malloc>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	89 c3                	mov    ebx,eax
c001db52:	83 ec 08             	sub    esp,0x8
c001db55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db59:	53                   	push   ebx
c001db5a:	e8 83 36 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db66:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db70:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	50                   	push   eax
c001db7a:	e8 56 2a ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001db7f:	83 c4 10             	add    esp,0x10
c001db82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db86:	05 0c 01 00 00       	add    eax,0x10c
c001db8b:	83 ec 08             	sub    esp,0x8
c001db8e:	68 9f c1 02 c0       	push   0xc002c19f
c001db93:	50                   	push   eax
c001db94:	e8 9b 2c fe ff       	call   c0000834 <strcpy>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba0:	83 c0 0c             	add    eax,0xc
c001dba3:	83 ec 08             	sub    esp,0x8
c001dba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbaa:	50                   	push   eax
c001dbab:	e8 84 2c fe ff       	call   c0000834 <strcpy>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	83 ec 08             	sub    esp,0x8
c001dbb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbbe:	e8 0d fe ff ff       	call   c001d9d0 <Process::addArgs(char**)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	83 ec 08             	sub    esp,0x8
c001dbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd1:	e8 87 ee ff ff       	call   c001ca5d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbd6:	83 c4 10             	add    esp,0x10
c001dbd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbe1:	83 f0 01             	xor    eax,0x1
c001dbe4:	88 c2                	mov    dl,al
c001dbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbea:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbf5:	83 ec 08             	sub    esp,0x8
c001dbf8:	50                   	push   eax
c001dbf9:	68 9c c2 02 c0       	push   0xc002c29c
c001dbfe:	e8 5b 53 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001dc03:	83 c4 10             	add    esp,0x10
c001dc06:	90                   	nop
c001dc07:	83 c4 14             	add    esp,0x14
c001dc0a:	5b                   	pop    ebx
c001dc0b:	5e                   	pop    esi
c001dc0c:	c3                   	ret    
c001dc0d:	90                   	nop

c001dc0e <Process::Process(bool, char const*, Process*, char**)>:
c001dc0e:	56                   	push   esi
c001dc0f:	53                   	push   ebx
c001dc10:	83 ec 24             	sub    esp,0x24
c001dc13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1f:	05 0c 02 00 00       	add    eax,0x20c
c001dc24:	bb 07 00 00 00       	mov    ebx,0x7
c001dc29:	89 c6                	mov    esi,eax
c001dc2b:	85 db                	test   ebx,ebx
c001dc2d:	78 12                	js     c001dc41 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc2f:	83 ec 0c             	sub    esp,0xc
c001dc32:	56                   	push   esi
c001dc33:	e8 3a b0 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001dc38:	83 c4 10             	add    esp,0x10
c001dc3b:	83 c6 63             	add    esi,0x63
c001dc3e:	4b                   	dec    ebx
c001dc3f:	eb ea                	jmp    c001dc2b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc45:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc4c:	83 ec 0c             	sub    esp,0xc
c001dc4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc53:	e8 f8 c7 ff ff       	call   c001a450 <Krnl::newProcessEnv(Process*)>
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	89 c2                	mov    edx,eax
c001dc5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc61:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc74:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c001dc79:	8d 50 01             	lea    edx,[eax+0x1]
c001dc7c:	89 15 50 d9 02 c0    	mov    DWORD PTR ds:0xc002d950,edx
c001dc82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc86:	89 02                	mov    DWORD PTR [edx],eax
c001dc88:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc97:	e8 a7 1b ff ff       	call   c000f843 <malloc>
c001dc9c:	83 c4 10             	add    esp,0x10
c001dc9f:	89 c3                	mov    ebx,eax
c001dca1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dca6:	83 ec 08             	sub    esp,0x8
c001dca9:	50                   	push   eax
c001dcaa:	53                   	push   ebx
c001dcab:	e8 74 4b ff ff       	call   c0012824 <VAS::VAS(bool)>
c001dcb0:	83 c4 10             	add    esp,0x10
c001dcb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcd3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dce3:	85 c0                	test   eax,eax
c001dce5:	74 42                	je     c001dd29 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dceb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcf1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd0b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd15:	05 0c 01 00 00       	add    eax,0x10c
c001dd1a:	83 ec 08             	sub    esp,0x8
c001dd1d:	52                   	push   edx
c001dd1e:	50                   	push   eax
c001dd1f:	e8 10 2b fe ff       	call   c0000834 <strcpy>
c001dd24:	83 c4 10             	add    esp,0x10
c001dd27:	eb 63                	jmp    c001dd8c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd29:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd31:	83 ec 0c             	sub    esp,0xc
c001dd34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd38:	e8 06 1b ff ff       	call   c000f843 <malloc>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	89 c3                	mov    ebx,eax
c001dd42:	83 ec 08             	sub    esp,0x8
c001dd45:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd49:	53                   	push   ebx
c001dd4a:	e8 93 34 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001dd4f:	83 c4 10             	add    esp,0x10
c001dd52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd56:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd60:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd66:	83 ec 0c             	sub    esp,0xc
c001dd69:	50                   	push   eax
c001dd6a:	e8 66 28 ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd76:	05 0c 01 00 00       	add    eax,0x10c
c001dd7b:	83 ec 08             	sub    esp,0x8
c001dd7e:	68 9f c1 02 c0       	push   0xc002c19f
c001dd83:	50                   	push   eax
c001dd84:	e8 ab 2a fe ff       	call   c0000834 <strcpy>
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd90:	83 c0 0c             	add    eax,0xc
c001dd93:	83 ec 08             	sub    esp,0x8
c001dd96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd9a:	50                   	push   eax
c001dd9b:	e8 94 2a fe ff       	call   c0000834 <strcpy>
c001dda0:	83 c4 10             	add    esp,0x10
c001dda3:	83 ec 08             	sub    esp,0x8
c001dda6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddae:	e8 1d fc ff ff       	call   c001d9d0 <Process::addArgs(char**)>
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	90                   	nop
c001ddb7:	83 c4 24             	add    esp,0x24
c001ddba:	5b                   	pop    ebx
c001ddbb:	5e                   	pop    esi
c001ddbc:	c3                   	ret    

c001ddbd <disableIRQs()>:
c001ddbd:	fa                   	cli    
c001ddbe:	ff 05 2c 19 03 c0    	inc    DWORD PTR ds:0xc003192c
c001ddc4:	c3                   	ret    

c001ddc5 <getIRQNestingLevel()>:
c001ddc5:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001ddca:	c3                   	ret    

c001ddcb <enableIRQs()>:
c001ddcb:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001ddd0:	48                   	dec    eax
c001ddd1:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c001ddd6:	75 01                	jne    c001ddd9 <enableIRQs()+0xe>
c001ddd8:	fb                   	sti    
c001ddd9:	c3                   	ret    

c001ddda <lockScheduler()>:
c001ddda:	eb e1                	jmp    c001ddbd <disableIRQs()>

c001dddc <unlockScheduler()>:
c001dddc:	eb ed                	jmp    c001ddcb <enableIRQs()>

c001ddde <userModeEntryPoint(void*)>:
c001ddde:	83 ec 0c             	sub    esp,0xc
c001dde1:	e8 f6 ff ff ff       	call   c001dddc <unlockScheduler()>
c001dde6:	fb                   	sti    
c001dde7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddef:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddf9:	83 c4 0c             	add    esp,0xc
c001ddfc:	e9 29 25 fe ff       	jmp    c000032a <goToUsermode>

c001de01 <lockStuff()>:
c001de01:	e8 b7 ff ff ff       	call   c001ddbd <disableIRQs()>
c001de06:	ff 05 28 19 03 c0    	inc    DWORD PTR ds:0xc0031928
c001de0c:	c3                   	ret    

c001de0d <taskStartupFunction>:
c001de0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de12:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de15:	c3                   	ret    

c001de16 <updateTimeUsed()>:
c001de16:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001de1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de21:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de28:	74 50                	je     c001de7a <updateTimeUsed()+0x64>
c001de2a:	57                   	push   edi
c001de2b:	56                   	push   esi
c001de2c:	53                   	push   ebx
c001de2d:	0f 31                	rdtsc  
c001de2f:	89 c1                	mov    ecx,eax
c001de31:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c001de36:	2b 0d 58 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031958
c001de3c:	89 d3                	mov    ebx,edx
c001de3e:	89 0d 60 19 03 c0    	mov    DWORD PTR ds:0xc0031960,ecx
c001de44:	1b 1d 5c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003195c
c001de4a:	a3 58 19 03 c0       	mov    ds:0xc0031958,eax
c001de4f:	89 1d 64 19 03 c0    	mov    DWORD PTR ds:0xc0031964,ebx
c001de55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de5a:	89 15 6c 19 03 c0    	mov    DWORD PTR ds:0xc003196c,edx
c001de60:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de63:	89 15 5c 19 03 c0    	mov    DWORD PTR ds:0xc003195c,edx
c001de69:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de6c:	01 f1                	add    ecx,esi
c001de6e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de71:	11 fb                	adc    ebx,edi
c001de73:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de76:	5b                   	pop    ebx
c001de77:	5e                   	pop    esi
c001de78:	5f                   	pop    edi
c001de79:	c3                   	ret    
c001de7a:	c3                   	ret    

c001de7b <switchToThread(ThreadControlBlock*)>:
c001de7b:	53                   	push   ebx
c001de7c:	83 ec 08             	sub    esp,0x8
c001de7f:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001de84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de88:	85 c0                	test   eax,eax
c001de8a:	75 30                	jne    c001debc <switchToThread(ThreadControlBlock*)+0x41>
c001de8c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de8f:	3c ff                	cmp    al,0xff
c001de91:	74 25                	je     c001deb8 <switchToThread(ThreadControlBlock*)+0x3d>
c001de93:	0f b6 d0             	movzx  edx,al
c001de96:	b8 84 03 00 00       	mov    eax,0x384
c001de9b:	29 d0                	sub    eax,edx
c001de9d:	c1 e0 10             	shl    eax,0x10
c001dea0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dea3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dea6:	e8 6b ff ff ff       	call   c001de16 <updateTimeUsed()>
c001deab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001deaf:	83 c4 08             	add    esp,0x8
c001deb2:	5b                   	pop    ebx
c001deb3:	e9 aa 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001deb8:	31 c0                	xor    eax,eax
c001deba:	eb e7                	jmp    c001dea3 <switchToThread(ThreadControlBlock*)+0x28>
c001debc:	c7 05 24 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x1
c001dec6:	83 c4 08             	add    esp,0x8
c001dec9:	5b                   	pop    ebx
c001deca:	c3                   	ret    
c001decb:	90                   	nop

c001decc <Semaphore::Semaphore(int)>:
c001decc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ded4:	89 10                	mov    DWORD PTR [eax],edx
c001ded6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deda:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001deec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001def7:	90                   	nop
c001def8:	c3                   	ret    
c001def9:	90                   	nop

c001defa <Mutex::Mutex()>:
c001defa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defe:	6a 01                	push   0x1
c001df00:	50                   	push   eax
c001df01:	e8 c6 ff ff ff       	call   c001decc <Semaphore::Semaphore(int)>
c001df06:	83 c4 08             	add    esp,0x8
c001df09:	90                   	nop
c001df0a:	c3                   	ret    
c001df0b:	90                   	nop

c001df0c <Process::createThread(void (*)(void*), void*, int)>:
c001df0c:	55                   	push   ebp
c001df0d:	31 c9                	xor    ecx,ecx
c001df0f:	57                   	push   edi
c001df10:	56                   	push   esi
c001df11:	53                   	push   ebx
c001df12:	83 ec 1c             	sub    esp,0x1c
c001df15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df19:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df20:	89 f2                	mov    edx,esi
c001df22:	0f b7 c2             	movzx  eax,dx
c001df25:	83 e2 01             	and    edx,0x1
c001df28:	74 14                	je     c001df3e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df2a:	d1 f8                	sar    eax,1
c001df2c:	41                   	inc    ecx
c001df2d:	89 c2                	mov    edx,eax
c001df2f:	83 f9 10             	cmp    ecx,0x10
c001df32:	75 ee                	jne    c001df22 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df34:	83 c4 1c             	add    esp,0x1c
c001df37:	31 c0                	xor    eax,eax
c001df39:	5b                   	pop    ebx
c001df3a:	5e                   	pop    esi
c001df3b:	5f                   	pop    edi
c001df3c:	5d                   	pop    ebp
c001df3d:	c3                   	ret    
c001df3e:	83 ec 08             	sub    esp,0x8
c001df41:	b8 01 00 00 00       	mov    eax,0x1
c001df46:	d3 e0                	shl    eax,cl
c001df48:	09 c6                	or     esi,eax
c001df4a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df50:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df57:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df5a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df5d:	01 ce                	add    esi,ecx
c001df5f:	89 f0                	mov    eax,esi
c001df61:	c1 e0 05             	shl    eax,0x5
c001df64:	01 c6                	add    esi,eax
c001df66:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df69:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df6f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df79:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df7f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df85:	89 ca                	mov    edx,ecx
c001df87:	f7 da                	neg    edx
c001df89:	c1 e2 15             	shl    edx,0x15
c001df8c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df92:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df98:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df9c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfa6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfb0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfb6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfc0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfca:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfd1:	50                   	push   eax
c001dfd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfd6:	68 48 19 03 c0       	push   0xc0031948
c001dfdb:	e8 20 ab 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfe0:	83 c4 10             	add    esp,0x10
c001dfe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe7:	83 c4 1c             	add    esp,0x1c
c001dfea:	5b                   	pop    ebx
c001dfeb:	5e                   	pop    esi
c001dfec:	5f                   	pop    edi
c001dfed:	5d                   	pop    ebp
c001dfee:	c3                   	ret    
c001dfef:	90                   	nop

c001dff0 <Process::createUserThread()>:
c001dff0:	83 ec 0c             	sub    esp,0xc
c001dff3:	68 80 00 00 00       	push   0x80
c001dff8:	6a 00                	push   0x0
c001dffa:	68 de dd 01 c0       	push   0xc001ddde
c001dfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e003:	e8 04 ff ff ff       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c001e008:	83 c4 1c             	add    esp,0x1c
c001e00b:	c3                   	ret    

c001e00c <setupMultitasking(void (*)())>:
c001e00c:	56                   	push   esi
c001e00d:	53                   	push   ebx
c001e00e:	53                   	push   ebx
c001e00f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e013:	eb 10                	jmp    c001e025 <setupMultitasking(void (*)())+0x19>
c001e015:	83 ec 0c             	sub    esp,0xc
c001e018:	68 48 19 03 c0       	push   0xc0031948
c001e01d:	e8 30 aa 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	83 ec 0c             	sub    esp,0xc
c001e028:	68 48 19 03 c0       	push   0xc0031948
c001e02d:	e8 04 aa 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	84 c0                	test   al,al
c001e037:	74 dc                	je     c001e015 <setupMultitasking(void (*)())+0x9>
c001e039:	83 ec 0c             	sub    esp,0xc
c001e03c:	68 3f 07 00 00       	push   0x73f
c001e041:	e8 fd 17 ff ff       	call   c000f843 <malloc>
c001e046:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e04d:	89 c3                	mov    ebx,eax
c001e04f:	6a 00                	push   0x0
c001e051:	68 a3 c1 02 c0       	push   0xc002c1a3
c001e056:	6a 01                	push   0x1
c001e058:	50                   	push   eax
c001e059:	e8 b0 fb ff ff       	call   c001dc0e <Process::Process(bool, char const*, Process*, char**)>
c001e05e:	83 c4 18             	add    esp,0x18
c001e061:	89 1d 54 19 03 c0    	mov    DWORD PTR ds:0xc0031954,ebx
c001e067:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e06d:	68 c4 c2 02 c0       	push   0xc002c2c4
c001e072:	e8 e7 4e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e077:	58                   	pop    eax
c001e078:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e07e:	e8 d4 2c ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001e083:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e08b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e091:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e094:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e09e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0a4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0aa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0b4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0be:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0c8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0ce:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0d4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0de:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0e4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0ee:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0f4:	5a                   	pop    edx
c001e0f5:	59                   	pop    ecx
c001e0f6:	68 9f c1 02 c0       	push   0xc002c19f
c001e0fb:	50                   	push   eax
c001e0fc:	e8 33 27 fe ff       	call   c0000834 <strcpy>
c001e101:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e108:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e10c:	83 c4 14             	add    esp,0x14
c001e10f:	5b                   	pop    ebx
c001e110:	5e                   	pop    esi
c001e111:	e9 3e 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e116 <schedule()>:
c001e116:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e11b:	85 c0                	test   eax,eax
c001e11d:	74 0b                	je     c001e12a <schedule()+0x14>
c001e11f:	c7 05 24 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x1
c001e129:	c3                   	ret    
c001e12a:	53                   	push   ebx
c001e12b:	83 ec 14             	sub    esp,0x14
c001e12e:	68 48 19 03 c0       	push   0xc0031948
c001e133:	e8 fe a8 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e138:	83 c4 10             	add    esp,0x10
c001e13b:	84 c0                	test   al,al
c001e13d:	75 38                	jne    c001e177 <schedule()+0x61>
c001e13f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e144:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e147:	4a                   	dec    edx
c001e148:	74 32                	je     c001e17c <schedule()+0x66>
c001e14a:	83 ec 0c             	sub    esp,0xc
c001e14d:	68 48 19 03 c0       	push   0xc0031948
c001e152:	e8 d7 a8 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e157:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e15e:	89 c3                	mov    ebx,eax
c001e160:	e8 ed a8 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e165:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e16c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e16f:	e8 07 fd ff ff       	call   c001de7b <switchToThread(ThreadControlBlock*)>
c001e174:	83 c4 10             	add    esp,0x10
c001e177:	83 c4 08             	add    esp,0x8
c001e17a:	5b                   	pop    ebx
c001e17b:	c3                   	ret    
c001e17c:	83 ec 08             	sub    esp,0x8
c001e17f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e186:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e18c:	68 48 19 03 c0       	push   0xc0031948
c001e191:	e8 6a a9 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	eb af                	jmp    c001e14a <schedule()+0x34>

c001e19b <unlockStuff()>:
c001e19b:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e1a0:	48                   	dec    eax
c001e1a1:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001e1a6:	75 09                	jne    c001e1b1 <unlockStuff()+0x16>
c001e1a8:	a1 24 19 03 c0       	mov    eax,ds:0xc0031924
c001e1ad:	85 c0                	test   eax,eax
c001e1af:	75 05                	jne    c001e1b6 <unlockStuff()+0x1b>
c001e1b1:	e9 15 fc ff ff       	jmp    c001ddcb <enableIRQs()>
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	c7 05 24 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x0
c001e1c3:	e8 4e ff ff ff       	call   c001e116 <schedule()>
c001e1c8:	83 c4 0c             	add    esp,0xc
c001e1cb:	e9 fb fb ff ff       	jmp    c001ddcb <enableIRQs()>

c001e1d0 <Semaphore::tryAcquire()>:
c001e1d0:	83 ec 0c             	sub    esp,0xc
c001e1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d7:	e8 25 fc ff ff       	call   c001de01 <lockStuff()>
c001e1dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1df:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1e1:	7c 0b                	jl     c001e1ee <Semaphore::tryAcquire()+0x1e>
c001e1e3:	e8 b3 ff ff ff       	call   c001e19b <unlockStuff()>
c001e1e8:	31 c0                	xor    eax,eax
c001e1ea:	83 c4 0c             	add    esp,0xc
c001e1ed:	c3                   	ret    
c001e1ee:	42                   	inc    edx
c001e1ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1f2:	e8 a4 ff ff ff       	call   c001e19b <unlockStuff()>
c001e1f7:	b0 01                	mov    al,0x1
c001e1f9:	83 c4 0c             	add    esp,0xc
c001e1fc:	c3                   	ret    
c001e1fd:	90                   	nop

c001e1fe <Semaphore::assertLocked(char const*)>:
c001e1fe:	83 ec 0c             	sub    esp,0xc
c001e201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e205:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e209:	e8 f3 fb ff ff       	call   c001de01 <lockStuff()>
c001e20e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e210:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e213:	7c 05                	jl     c001e21a <Semaphore::assertLocked(char const*)+0x1c>
c001e215:	83 c4 0c             	add    esp,0xc
c001e218:	eb 81                	jmp    c001e19b <unlockStuff()>
c001e21a:	83 ec 0c             	sub    esp,0xc
c001e21d:	52                   	push   edx
c001e21e:	e8 dc c3 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001e223:	83 c4 10             	add    esp,0x10
c001e226:	83 c4 0c             	add    esp,0xc
c001e229:	e9 6d ff ff ff       	jmp    c001e19b <unlockStuff()>

c001e22e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e22e:	83 ec 0c             	sub    esp,0xc
c001e231:	e8 8f fb ff ff       	call   c001ddc5 <getIRQNestingLevel()>
c001e236:	83 ec 08             	sub    esp,0x8
c001e239:	50                   	push   eax
c001e23a:	68 f8 c2 02 c0       	push   0xc002c2f8
c001e23f:	e8 1a 4d ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e244:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e24d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e250:	e8 c1 fe ff ff       	call   c001e116 <schedule()>
c001e255:	e8 82 fb ff ff       	call   c001dddc <unlockScheduler()>
c001e25a:	e8 66 fb ff ff       	call   c001ddc5 <getIRQNestingLevel()>
c001e25f:	5a                   	pop    edx
c001e260:	59                   	pop    ecx
c001e261:	50                   	push   eax
c001e262:	68 2c c3 02 c0       	push   0xc002c32c
c001e267:	e8 f2 4c ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e26c:	83 c4 1c             	add    esp,0x1c
c001e26f:	c3                   	ret    

c001e270 <blockTask(TaskState)>:
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e277:	e8 5e fb ff ff       	call   c001ddda <lockScheduler()>
c001e27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e281:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e284:	e8 8d fe ff ff       	call   c001e116 <schedule()>
c001e289:	83 c4 0c             	add    esp,0xc
c001e28c:	e9 4b fb ff ff       	jmp    c001dddc <unlockScheduler()>

c001e291 <waitTask(int, int*, int)>:
c001e291:	83 ec 18             	sub    esp,0x18
c001e294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e299:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e29d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2ac:	6a 07                	push   0x7
c001e2ae:	e8 bd ff ff ff       	call   c001e270 <blockTask(TaskState)>
c001e2b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b8:	83 c4 10             	add    esp,0x10
c001e2bb:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2be:	85 d2                	test   edx,edx
c001e2c0:	74 0a                	je     c001e2cc <waitTask(int, int*, int)+0x3b>
c001e2c2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2c5:	89 02                	mov    DWORD PTR [edx],eax
c001e2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cc:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2cf:	83 c4 0c             	add    esp,0xc
c001e2d2:	c3                   	ret    

c001e2d3 <nanoSleepUntil(unsigned long long)>:
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2de:	3b 05 70 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea70
c001e2e4:	89 d1                	mov    ecx,edx
c001e2e6:	1b 0d 74 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea74
c001e2ec:	73 04                	jae    c001e2f2 <nanoSleepUntil(unsigned long long)+0x1f>
c001e2ee:	83 c4 0c             	add    esp,0xc
c001e2f1:	c3                   	ret    
c001e2f2:	e8 0a fb ff ff       	call   c001de01 <lockStuff()>
c001e2f7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2fd:	83 ec 08             	sub    esp,0x8
c001e300:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e303:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e306:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e30c:	68 3c 19 03 c0       	push   0xc003193c
c001e311:	e8 ea a7 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e316:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e31d:	e8 4e ff ff ff       	call   c001e270 <blockTask(TaskState)>
c001e322:	83 c4 1c             	add    esp,0x1c
c001e325:	e9 71 fe ff ff       	jmp    c001e19b <unlockStuff()>

c001e32a <nanoSleep(unsigned long long)>:
c001e32a:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c001e32f:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c001e335:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e339:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e33d:	eb 94                	jmp    c001e2d3 <nanoSleepUntil(unsigned long long)>

c001e33f <sleep(unsigned long long)>:
c001e33f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e347:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e34c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e350:	01 ca                	add    edx,ecx
c001e352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e356:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e35a:	eb ce                	jmp    c001e32a <nanoSleep(unsigned long long)>

c001e35c <Semaphore::acquire()>:
c001e35c:	83 ec 0c             	sub    esp,0xc
c001e35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e363:	e8 99 fa ff ff       	call   c001de01 <lockStuff()>
c001e368:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e36b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e36d:	7d 0c                	jge    c001e37b <Semaphore::acquire()+0x1f>
c001e36f:	42                   	inc    edx
c001e370:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e373:	83 c4 0c             	add    esp,0xc
c001e376:	e9 20 fe ff ff       	jmp    c001e19b <unlockStuff()>
c001e37b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e381:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e388:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e38b:	85 d2                	test   edx,edx
c001e38d:	74 2a                	je     c001e3b9 <Semaphore::acquire()+0x5d>
c001e38f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e392:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e398:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e39b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3a1:	83 ec 0c             	sub    esp,0xc
c001e3a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3a7:	6a 05                	push   0x5
c001e3a9:	e8 c2 fe ff ff       	call   c001e270 <blockTask(TaskState)>
c001e3ae:	83 c4 10             	add    esp,0x10
c001e3b1:	83 c4 0c             	add    esp,0xc
c001e3b4:	e9 e2 fd ff ff       	jmp    c001e19b <unlockStuff()>
c001e3b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3c2:	eb d7                	jmp    c001e39b <Semaphore::acquire()+0x3f>

c001e3c4 <taskReturned>:
c001e3c4:	83 ec 18             	sub    esp,0x18
c001e3c7:	68 60 c3 02 c0       	push   0xc002c360
c001e3cc:	e8 2e c2 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001e3d1:	83 c4 10             	add    esp,0x10
c001e3d4:	83 ec 0c             	sub    esp,0xc
c001e3d7:	6a 02                	push   0x2
c001e3d9:	e8 92 fe ff ff       	call   c001e270 <blockTask(TaskState)>
c001e3de:	e8 f7 f9 ff ff       	call   c001ddda <lockScheduler()>
c001e3e3:	e8 2e fd ff ff       	call   c001e116 <schedule()>
c001e3e8:	e8 ef f9 ff ff       	call   c001dddc <unlockScheduler()>
c001e3ed:	83 c4 10             	add    esp,0x10
c001e3f0:	eb e2                	jmp    c001e3d4 <taskReturned+0x10>

c001e3f2 <unblockTask(ThreadControlBlock*)>:
c001e3f2:	53                   	push   ebx
c001e3f3:	83 ec 08             	sub    esp,0x8
c001e3f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3fa:	e8 db f9 ff ff       	call   c001ddda <lockScheduler()>
c001e3ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e402:	85 c0                	test   eax,eax
c001e404:	74 5c                	je     c001e462 <unblockTask(ThreadControlBlock*)+0x70>
c001e406:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e409:	48                   	dec    eax
c001e40a:	74 31                	je     c001e43d <unblockTask(ThreadControlBlock*)+0x4b>
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	68 48 19 03 c0       	push   0xc0031948
c001e414:	e8 15 a6 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e419:	83 c4 10             	add    esp,0x10
c001e41c:	85 c0                	test   eax,eax
c001e41e:	75 17                	jne    c001e437 <unblockTask(ThreadControlBlock*)+0x45>
c001e420:	eb 65                	jmp    c001e487 <unblockTask(ThreadControlBlock*)+0x95>
c001e422:	83 ec 08             	sub    esp,0x8
c001e425:	50                   	push   eax
c001e426:	68 48 19 03 c0       	push   0xc0031948
c001e42b:	e8 d8 a8 00 00       	call   c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e430:	83 c4 10             	add    esp,0x10
c001e433:	85 c0                	test   eax,eax
c001e435:	74 50                	je     c001e487 <unblockTask(ThreadControlBlock*)+0x95>
c001e437:	39 c3                	cmp    ebx,eax
c001e439:	75 e7                	jne    c001e422 <unblockTask(ThreadControlBlock*)+0x30>
c001e43b:	eb 1c                	jmp    c001e459 <unblockTask(ThreadControlBlock*)+0x67>
c001e43d:	83 ec 0c             	sub    esp,0xc
c001e440:	68 50 c4 02 c0       	push   0xc002c450
c001e445:	e8 14 4b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e44a:	c7 04 24 dc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3dc
c001e451:	e8 08 4b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e456:	83 c4 10             	add    esp,0x10
c001e459:	83 c4 08             	add    esp,0x8
c001e45c:	5b                   	pop    ebx
c001e45d:	e9 7a f9 ff ff       	jmp    c001dddc <unlockScheduler()>
c001e462:	83 ec 0c             	sub    esp,0xc
c001e465:	68 94 c3 02 c0       	push   0xc002c394
c001e46a:	e8 ef 4a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e46f:	c7 04 24 dc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3dc
c001e476:	e8 e3 4a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e47b:	83 c4 10             	add    esp,0x10
c001e47e:	83 c4 08             	add    esp,0x8
c001e481:	5b                   	pop    ebx
c001e482:	e9 55 f9 ff ff       	jmp    c001dddc <unlockScheduler()>
c001e487:	83 ec 08             	sub    esp,0x8
c001e48a:	53                   	push   ebx
c001e48b:	68 48 19 03 c0       	push   0xc0031948
c001e490:	e8 6b a6 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e495:	83 c4 10             	add    esp,0x10
c001e498:	83 c4 08             	add    esp,0x8
c001e49b:	5b                   	pop    ebx
c001e49c:	e9 3b f9 ff ff       	jmp    c001dddc <unlockScheduler()>

c001e4a1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4a1:	55                   	push   ebp
c001e4a2:	57                   	push   edi
c001e4a3:	56                   	push   esi
c001e4a4:	53                   	push   ebx
c001e4a5:	83 ec 1c             	sub    esp,0x1c
c001e4a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4af:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4b5:	85 ff                	test   edi,edi
c001e4b7:	7e 20                	jle    c001e4d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4b9:	31 f6                	xor    esi,esi
c001e4bb:	83 ec 0c             	sub    esp,0xc
c001e4be:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4c5:	46                   	inc    esi
c001e4c6:	e8 88 13 ff ff       	call   c000f853 <free>
c001e4cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4ce:	83 c4 10             	add    esp,0x10
c001e4d1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4d7:	7f e2                	jg     c001e4bb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4d9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4e8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4ee:	d3 c0                	rol    eax,cl
c001e4f0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4f7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4fa:	89 f7                	mov    edi,esi
c001e4fc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e504:	0f 85 74 01 00 00    	jne    c001e67e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e50a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e510:	85 ed                	test   ebp,ebp
c001e512:	74 1b                	je     c001e52f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	55                   	push   ebp
c001e518:	e8 4f be ff ff       	call   c001a36c <EnvVarContainer::~EnvVarContainer()>
c001e51d:	59                   	pop    ecx
c001e51e:	5e                   	pop    esi
c001e51f:	6a 0c                	push   0xc
c001e521:	55                   	push   ebp
c001e522:	e8 57 49 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001e527:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e52a:	83 c4 10             	add    esp,0x10
c001e52d:	89 f7                	mov    edi,esi
c001e52f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e535:	85 c0                	test   eax,eax
c001e537:	0f 84 aa 00 00 00    	je     c001e5e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e53d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e540:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e544:	31 c9                	xor    ecx,ecx
c001e546:	eb 10                	jmp    c001e558 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e548:	41                   	inc    ecx
c001e549:	83 f9 10             	cmp    ecx,0x10
c001e54c:	0f 84 95 00 00 00    	je     c001e5e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e552:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e558:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e55f:	d3 fa                	sar    edx,cl
c001e561:	83 e2 01             	and    edx,0x1
c001e564:	74 e2                	je     c001e548 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e566:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e569:	01 ca                	add    edx,ecx
c001e56b:	89 d5                	mov    ebp,edx
c001e56d:	c1 e5 05             	shl    ebp,0x5
c001e570:	01 ea                	add    edx,ebp
c001e572:	01 d0                	add    eax,edx
c001e574:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e57a:	83 fd 07             	cmp    ebp,0x7
c001e57d:	75 c9                	jne    c001e548 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e57f:	05 40 02 00 00       	add    eax,0x240
c001e584:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e587:	83 fd ff             	cmp    ebp,0xffffffff
c001e58a:	0f 8c 08 01 00 00    	jl     c001e698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e590:	0f 84 b9 01 00 00    	je     c001e74f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e596:	85 ed                	test   ebp,ebp
c001e598:	0f 84 a0 01 00 00    	je     c001e73e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e59e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5a0:	75 a6                	jne    c001e548 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5a2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5ac:	01 d0                	add    eax,edx
c001e5ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5b2:	83 ec 0c             	sub    esp,0xc
c001e5b5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5be:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5c4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5cb:	50                   	push   eax
c001e5cc:	e8 21 fe ff ff       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c001e5d1:	83 c4 10             	add    esp,0x10
c001e5d4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5db:	89 f7                	mov    edi,esi
c001e5dd:	41                   	inc    ecx
c001e5de:	83 f9 10             	cmp    ecx,0x10
c001e5e1:	0f 85 6b ff ff ff    	jne    c001e552 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5e7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5ed:	85 c0                	test   eax,eax
c001e5ef:	74 5d                	je     c001e64e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5f1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5f7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5fd:	74 4f                	je     c001e64e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	68 48 19 03 c0       	push   0xc0031948
c001e607:	e8 22 a4 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e60c:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e613:	89 c7                	mov    edi,eax
c001e615:	e8 1c a4 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	84 c0                	test   al,al
c001e61f:	0f 84 e4 00 00 00    	je     c001e709 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e625:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e628:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e62e:	85 d2                	test   edx,edx
c001e630:	74 0f                	je     c001e641 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	8b 02                	mov    eax,DWORD PTR [edx]
c001e637:	52                   	push   edx
c001e638:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e63b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63e:	83 c4 10             	add    esp,0x10
c001e641:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e64b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e64e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e654:	85 db                	test   ebx,ebx
c001e656:	74 16                	je     c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e658:	83 ec 0c             	sub    esp,0xc
c001e65b:	53                   	push   ebx
c001e65c:	e8 af 3b ff ff       	call   c0012210 <VAS::~VAS()>
c001e661:	58                   	pop    eax
c001e662:	5a                   	pop    edx
c001e663:	6a 10                	push   0x10
c001e665:	53                   	push   ebx
c001e666:	e8 13 48 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c001e66b:	83 c4 10             	add    esp,0x10
c001e66e:	83 ec 0c             	sub    esp,0xc
c001e671:	68 aa c1 02 c0       	push   0xc002c1aa
c001e676:	e8 e3 48 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e67b:	83 c4 10             	add    esp,0x10
c001e67e:	83 ec 08             	sub    esp,0x8
c001e681:	68 3f 07 00 00       	push   0x73f
c001e686:	68 b8 c1 02 c0       	push   0xc002c1b8
c001e68b:	e8 ce 48 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e690:	83 c4 2c             	add    esp,0x2c
c001e693:	5b                   	pop    ebx
c001e694:	5e                   	pop    esi
c001e695:	5f                   	pop    edi
c001e696:	5d                   	pop    ebp
c001e697:	c3                   	ret    
c001e698:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	68 94 c4 02 c0       	push   0xc002c494
c001e6a4:	e8 56 bf ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001e6a9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6ac:	83 c4 10             	add    esp,0x10
c001e6af:	89 f7                	mov    edi,esi
c001e6b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b5:	e9 8e fe ff ff       	jmp    c001e548 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6ba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6c0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6c6:	75 1c                	jne    c001e6e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6c8:	83 ec 0c             	sub    esp,0xc
c001e6cb:	68 fc c4 02 c0       	push   0xc002c4fc
c001e6d0:	e8 89 48 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e6d5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6dc:	e8 8f fb ff ff       	call   c001e270 <blockTask(TaskState)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	83 ec 08             	sub    esp,0x8
c001e6e7:	56                   	push   esi
c001e6e8:	68 48 19 03 c0       	push   0xc0031948
c001e6ed:	e8 0e a4 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6f2:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e6f9:	e8 30 a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6fe:	83 c4 10             	add    esp,0x10
c001e701:	39 f8                	cmp    eax,edi
c001e703:	0f 84 1c ff ff ff    	je     c001e625 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e709:	83 ec 0c             	sub    esp,0xc
c001e70c:	68 48 19 03 c0       	push   0xc0031948
c001e711:	e8 18 a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e716:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e71d:	89 c6                	mov    esi,eax
c001e71f:	e8 2e a3 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	39 f3                	cmp    ebx,esi
c001e729:	74 b9                	je     c001e6e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e72b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e72e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e731:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e737:	75 ab                	jne    c001e6e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e739:	e9 7c ff ff ff       	jmp    c001e6ba <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e73e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	68 c8 c4 02 c0       	push   0xc002c4c8
c001e74a:	e9 55 ff ff ff       	jmp    c001e6a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e74f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e751:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e755:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e758:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e75b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e761:	01 d7                	add    edi,edx
c001e763:	89 f8                	mov    eax,edi
c001e765:	e9 44 fe ff ff       	jmp    c001e5ae <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e76a <cleanerTaskFunction(void*)>:
c001e76a:	53                   	push   ebx
c001e76b:	83 ec 08             	sub    esp,0x8
c001e76e:	e8 69 f6 ff ff       	call   c001dddc <unlockScheduler()>
c001e773:	e8 62 f6 ff ff       	call   c001ddda <lockScheduler()>
c001e778:	80 3d 0c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003190c,0x0
c001e77f:	0f 85 8e 00 00 00    	jne    c001e813 <cleanerTaskFunction(void*)+0xa9>
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	6a 02                	push   0x2
c001e78a:	e8 9f fa ff ff       	call   c001e22e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e78f:	83 c4 10             	add    esp,0x10
c001e792:	c6 05 0c 19 03 c0 00 	mov    BYTE PTR ds:0xc003190c,0x0
c001e799:	e8 63 f6 ff ff       	call   c001de01 <lockStuff()>
c001e79e:	e8 37 f6 ff ff       	call   c001ddda <lockScheduler()>
c001e7a3:	83 ec 0c             	sub    esp,0xc
c001e7a6:	68 30 19 03 c0       	push   0xc0031930
c001e7ab:	e8 86 a2 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7b0:	83 c4 10             	add    esp,0x10
c001e7b3:	84 c0                	test   al,al
c001e7b5:	75 40                	jne    c001e7f7 <cleanerTaskFunction(void*)+0x8d>
c001e7b7:	83 ec 0c             	sub    esp,0xc
c001e7ba:	68 30 19 03 c0       	push   0xc0031930
c001e7bf:	e8 6a a2 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7c4:	c7 04 24 30 19 03 c0 	mov    DWORD PTR [esp],0xc0031930
c001e7cb:	89 c3                	mov    ebx,eax
c001e7cd:	e8 80 a2 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7d2:	c7 04 24 ce c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ce
c001e7d9:	e8 80 47 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e7de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7e1:	e8 bb fc ff ff       	call   c001e4a1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7e6:	c7 04 24 e7 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1e7
c001e7ed:	e8 6c 47 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e7f2:	83 c4 10             	add    esp,0x10
c001e7f5:	eb ac                	jmp    c001e7a3 <cleanerTaskFunction(void*)+0x39>
c001e7f7:	e8 e0 f5 ff ff       	call   c001dddc <unlockScheduler()>
c001e7fc:	e8 9a f9 ff ff       	call   c001e19b <unlockStuff()>
c001e801:	e8 d4 f5 ff ff       	call   c001ddda <lockScheduler()>
c001e806:	80 3d 0c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003190c,0x0
c001e80d:	0f 84 72 ff ff ff    	je     c001e785 <cleanerTaskFunction(void*)+0x1b>
c001e813:	e8 c4 f5 ff ff       	call   c001dddc <unlockScheduler()>
c001e818:	e9 75 ff ff ff       	jmp    c001e792 <cleanerTaskFunction(void*)+0x28>

c001e81d <terminateTask(int)>:
c001e81d:	83 ec 14             	sub    esp,0x14
c001e820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e828:	83 c0 0c             	add    eax,0xc
c001e82b:	50                   	push   eax
c001e82c:	68 24 c5 02 c0       	push   0xc002c524
c001e831:	e8 28 47 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e836:	e8 c6 f5 ff ff       	call   c001de01 <lockStuff()>
c001e83b:	e8 9a f5 ff ff       	call   c001ddda <lockScheduler()>
c001e840:	c7 04 24 fa c1 02 c0 	mov    DWORD PTR [esp],0xc002c1fa
c001e847:	e8 12 47 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e84c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e855:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e858:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e85d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e860:	5a                   	pop    edx
c001e861:	59                   	pop    ecx
c001e862:	50                   	push   eax
c001e863:	68 30 19 03 c0       	push   0xc0031930
c001e868:	e8 93 a2 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e872:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e879:	c7 04 24 14 c2 02 c0 	mov    DWORD PTR [esp],0xc002c214
c001e880:	e8 d9 46 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001e88d:	85 c0                	test   eax,eax
c001e88f:	74 5a                	je     c001e8eb <terminateTask(int)+0xce>
c001e891:	83 ec 0c             	sub    esp,0xc
c001e894:	68 2e c2 02 c0       	push   0xc002c22e
c001e899:	e8 c0 46 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e89e:	58                   	pop    eax
c001e89f:	c6 05 0c 19 03 c0 01 	mov    BYTE PTR ds:0xc003190c,0x1
c001e8a6:	ff 35 08 19 03 c0    	push   DWORD PTR ds:0xc0031908
c001e8ac:	e8 41 fb ff ff       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c001e8b1:	c7 04 24 48 c2 02 c0 	mov    DWORD PTR [esp],0xc002c248
c001e8b8:	e8 a1 46 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	e8 17 f5 ff ff       	call   c001dddc <unlockScheduler()>
c001e8c5:	e8 d1 f8 ff ff       	call   c001e19b <unlockStuff()>
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	68 80 c2 02 c0       	push   0xc002c280
c001e8d2:	e8 87 46 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	e8 fb f4 ff ff       	call   c001ddda <lockScheduler()>
c001e8df:	e8 32 f8 ff ff       	call   c001e116 <schedule()>
c001e8e4:	e8 f3 f4 ff ff       	call   c001dddc <unlockScheduler()>
c001e8e9:	eb ef                	jmp    c001e8da <terminateTask(int)+0xbd>
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	68 62 c2 02 c0       	push   0xc002c262
c001e8f3:	e8 66 46 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001e8f8:	83 c4 10             	add    esp,0x10
c001e8fb:	eb c3                	jmp    c001e8c0 <terminateTask(int)+0xa3>

c001e8fd <Thr::terminateFromIRQ(int)>:
c001e8fd:	83 ec 18             	sub    esp,0x18
c001e900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e904:	e8 14 ff ff ff       	call   c001e81d <terminateTask(int)>
c001e909:	90                   	nop

c001e90a <Semaphore::release()>:
c001e90a:	83 ec 0c             	sub    esp,0xc
c001e90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e911:	e8 eb f4 ff ff       	call   c001de01 <lockStuff()>
c001e916:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e919:	85 d2                	test   edx,edx
c001e91b:	74 1a                	je     c001e937 <Semaphore::release()+0x2d>
c001e91d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e926:	52                   	push   edx
c001e927:	e8 c6 fa ff ff       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c001e92c:	83 c4 10             	add    esp,0x10
c001e92f:	83 c4 0c             	add    esp,0xc
c001e932:	e9 64 f8 ff ff       	jmp    c001e19b <unlockStuff()>
c001e937:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e93a:	83 c4 0c             	add    esp,0xc
c001e93d:	e9 59 f8 ff ff       	jmp    c001e19b <unlockStuff()>

c001e942 <__static_initialization_and_destruction_0(int, int)>:
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e94a:	0f 85 88 00 00 00    	jne    c001e9d8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e950:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e958:	75 7e                	jne    c001e9d8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e95a:	83 ec 0c             	sub    esp,0xc
c001e95d:	68 48 19 03 c0       	push   0xc0031948
c001e962:	e8 49 a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e967:	83 c4 10             	add    esp,0x10
c001e96a:	83 ec 04             	sub    esp,0x4
c001e96d:	68 dc d2 02 c0       	push   0xc002d2dc
c001e972:	68 48 19 03 c0       	push   0xc0031948
c001e977:	68 70 8c 02 c0       	push   0xc0028c70
c001e97c:	e8 77 44 ff ff       	call   c0012df8 <__cxa_atexit>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	68 3c 19 03 c0       	push   0xc003193c
c001e98c:	e8 1f a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e991:	83 c4 10             	add    esp,0x10
c001e994:	83 ec 04             	sub    esp,0x4
c001e997:	68 dc d2 02 c0       	push   0xc002d2dc
c001e99c:	68 3c 19 03 c0       	push   0xc003193c
c001e9a1:	68 70 8c 02 c0       	push   0xc0028c70
c001e9a6:	e8 4d 44 ff ff       	call   c0012df8 <__cxa_atexit>
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	83 ec 0c             	sub    esp,0xc
c001e9b1:	68 30 19 03 c0       	push   0xc0031930
c001e9b6:	e8 f5 a2 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	83 ec 04             	sub    esp,0x4
c001e9c1:	68 dc d2 02 c0       	push   0xc002d2dc
c001e9c6:	68 30 19 03 c0       	push   0xc0031930
c001e9cb:	68 70 8c 02 c0       	push   0xc0028c70
c001e9d0:	e8 23 44 ff ff       	call   c0012df8 <__cxa_atexit>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	90                   	nop
c001e9d9:	83 c4 0c             	add    esp,0xc
c001e9dc:	c3                   	ret    

c001e9dd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9dd:	83 ec 0c             	sub    esp,0xc
c001e9e0:	83 ec 08             	sub    esp,0x8
c001e9e3:	68 ff ff 00 00       	push   0xffff
c001e9e8:	6a 01                	push   0x1
c001e9ea:	e8 53 ff ff ff       	call   c001e942 <__static_initialization_and_destruction_0(int, int)>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	c3                   	ret    

c001e9f6 <Vm::inbv(unsigned short)>:
c001e9f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9fa:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9ff:	75 06                	jne    c001ea07 <Vm::inbv(unsigned short)+0x11>
c001ea01:	a0 8c 19 03 c0       	mov    al,ds:0xc003198c
c001ea06:	c3                   	ret    
c001ea07:	ec                   	in     al,dx
c001ea08:	c3                   	ret    

c001ea09 <Vm::outbv(unsigned short, unsigned char)>:
c001ea09:	53                   	push   ebx
c001ea0a:	83 ec 08             	sub    esp,0x8
c001ea0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea15:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea1a:	75 38                	jne    c001ea54 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea1c:	0f b6 c3             	movzx  eax,bl
c001ea1f:	51                   	push   ecx
c001ea20:	51                   	push   ecx
c001ea21:	50                   	push   eax
c001ea22:	68 43 c5 02 c0       	push   0xc002c543
c001ea27:	e8 32 45 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ea2c:	8b 15 8c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003198c
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	8d 42 01             	lea    eax,[edx+0x1]
c001ea38:	88 9a a0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce660],bl
c001ea3e:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c001ea43:	83 f8 20             	cmp    eax,0x20
c001ea46:	75 0f                	jne    c001ea57 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea48:	c7 05 8c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x1f
c001ea52:	eb 03                	jmp    c001ea57 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea54:	88 d8                	mov    al,bl
c001ea56:	ee                   	out    dx,al
c001ea57:	83 c4 08             	add    esp,0x8
c001ea5a:	5b                   	pop    ebx
c001ea5b:	c3                   	ret    

c001ea5c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea66:	c1 e0 04             	shl    eax,0x4
c001ea69:	01 d0                	add    eax,edx
c001ea6b:	c3                   	ret    

c001ea6c <Vm::getSegment(unsigned int)>:
c001ea6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea70:	c1 e8 10             	shr    eax,0x10
c001ea73:	c3                   	ret    

c001ea74 <Vm::getOffset(unsigned int)>:
c001ea74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea78:	c3                   	ret    

c001ea79 <Vm::mainloop2()>:
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	e8 59 f3 ff ff       	call   c001ddda <lockScheduler()>
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	c6 05 85 19 03 c0 01 	mov    BYTE PTR ds:0xc0031985,0x1
c001ea8b:	6a 02                	push   0x2
c001ea8d:	e8 9c f7 ff ff       	call   c001e22e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea97:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea9b:	52                   	push   edx
c001ea9c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eaa0:	52                   	push   edx
c001eaa1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaa5:	52                   	push   edx
c001eaa6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaaa:	50                   	push   eax
c001eaab:	e8 4a 18 fe ff       	call   c00002fa <goToVM86>
c001eab0:	83 c4 2c             	add    esp,0x2c
c001eab3:	c3                   	ret    

c001eab4 <Vm::mainVm8086Loop(void*)>:
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	e8 20 f3 ff ff       	call   c001dddc <unlockScheduler()>
c001eabc:	83 c4 0c             	add    esp,0xc
c001eabf:	eb b8                	jmp    c001ea79 <Vm::mainloop2()>

c001eac1 <Vm::mainloop3(unsigned long)>:
c001eac1:	53                   	push   ebx
c001eac2:	83 ec 08             	sub    esp,0x8
c001eac5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eac9:	e8 0c f3 ff ff       	call   c001ddda <lockScheduler()>
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	89 1d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ebx
c001ead7:	6a 02                	push   0x2
c001ead9:	c6 05 84 19 03 c0 01 	mov    BYTE PTR ds:0xc0031984,0x1
c001eae0:	e8 49 f7 ff ff       	call   c001e22e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eae5:	83 c4 18             	add    esp,0x18
c001eae8:	5b                   	pop    ebx
c001eae9:	eb 8e                	jmp    c001ea79 <Vm::mainloop2()>

c001eaeb <Vm::initialise8086()>:
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	68 80 00 00 00       	push   0x80
c001eaf3:	6a 00                	push   0x0
c001eaf5:	68 b4 ea 01 c0       	push   0xc001eab4
c001eafa:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001eb00:	e8 07 f4 ff ff       	call   c001df0c <Process::createThread(void (*)(void*), void*, int)>
c001eb05:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb0c:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c001eb11:	68 00 01 00 00       	push   0x100
c001eb16:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001eb1b:	6a 00                	push   0x0
c001eb1d:	6a 00                	push   0x0
c001eb1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb25:	e8 46 3b ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb2a:	83 c4 2c             	add    esp,0x2c
c001eb2d:	c3                   	ret    

c001eb2e <Vm::finish8086()>:
c001eb2e:	53                   	push   ebx
c001eb2f:	83 ec 08             	sub    esp,0x8
c001eb32:	e8 a3 f2 ff ff       	call   c001ddda <lockScheduler()>
c001eb37:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c001eb3e:	75 0c                	jne    c001eb4c <Vm::finish8086()+0x1e>
c001eb40:	e8 d1 f5 ff ff       	call   c001e116 <schedule()>
c001eb45:	e8 92 f2 ff ff       	call   c001dddc <unlockScheduler()>
c001eb4a:	eb e6                	jmp    c001eb32 <Vm::finish8086()+0x4>
c001eb4c:	83 ec 0c             	sub    esp,0xc
c001eb4f:	8b 1d 80 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031980
c001eb55:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001eb5b:	c6 05 84 19 03 c0 00 	mov    BYTE PTR ds:0xc0031984,0x0
c001eb62:	e8 8b f8 ff ff       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c001eb67:	e8 70 f2 ff ff       	call   c001dddc <unlockScheduler()>
c001eb6c:	89 d8                	mov    eax,ebx
c001eb6e:	83 c4 18             	add    esp,0x18
c001eb71:	5b                   	pop    ebx
c001eb72:	c3                   	ret    

c001eb73 <Vm::getOutput8086(unsigned char*)>:
c001eb73:	83 ec 10             	sub    esp,0x10
c001eb76:	ff 35 8c 19 03 c0    	push   DWORD PTR ds:0xc003198c
c001eb7c:	68 a0 19 03 c0       	push   0xc00319a0
c001eb81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb85:	e8 ba 1b fe ff       	call   c0000744 <memcpy>
c001eb8a:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c001eb8f:	c7 05 8c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x0
c001eb99:	83 c4 1c             	add    esp,0x1c
c001eb9c:	c3                   	ret    

c001eb9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb9d:	55                   	push   ebp
c001eb9e:	57                   	push   edi
c001eb9f:	56                   	push   esi
c001eba0:	53                   	push   ebx
c001eba1:	83 ec 2c             	sub    esp,0x2c
c001eba4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eba8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebac:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebb0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebb4:	e8 21 f2 ff ff       	call   c001ddda <lockScheduler()>
c001ebb9:	a0 85 19 03 c0       	mov    al,ds:0xc0031985
c001ebbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebc2:	84 c0                	test   al,al
c001ebc4:	75 0c                	jne    c001ebd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebc6:	e8 4b f5 ff ff       	call   c001e116 <schedule()>
c001ebcb:	e8 0c f2 ff ff       	call   c001dddc <unlockScheduler()>
c001ebd0:	eb e2                	jmp    c001ebb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebd2:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001ebd7:	c7 05 8c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x0
c001ebe1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebe5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebe9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebed:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebf1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebf5:	50                   	push   eax
c001ebf6:	6a 20                	push   0x20
c001ebf8:	6a 00                	push   0x0
c001ebfa:	68 a0 19 03 c0       	push   0xc00319a0
c001ebff:	e8 74 1b fe ff       	call   c0000778 <memset>
c001ec04:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec0b:	e8 33 0c ff ff       	call   c000f843 <malloc>
c001ec10:	83 c4 0c             	add    esp,0xc
c001ec13:	89 c7                	mov    edi,eax
c001ec15:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001ec1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec1f:	50                   	push   eax
c001ec20:	e8 91 48 ff ff       	call   c00134b6 <File::File(char const*, Process*)>
c001ec25:	83 c4 10             	add    esp,0x10
c001ec28:	85 ff                	test   edi,edi
c001ec2a:	75 0a                	jne    c001ec36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec2c:	83 ec 0c             	sub    esp,0xc
c001ec2f:	68 5f c5 02 c0       	push   0xc002c55f
c001ec34:	eb 27                	jmp    c001ec5d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec36:	50                   	push   eax
c001ec37:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec3b:	50                   	push   eax
c001ec3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec40:	50                   	push   eax
c001ec41:	57                   	push   edi
c001ec42:	e8 7f 4b ff ff       	call   c00137c6 <File::stat(unsigned long long*, bool*)>
c001ec47:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec4c:	83 c4 10             	add    esp,0x10
c001ec4f:	89 e8                	mov    eax,ebp
c001ec51:	84 c0                	test   al,al
c001ec53:	74 19                	je     c001ec6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec55:	83 ec 0c             	sub    esp,0xc
c001ec58:	68 73 c5 02 c0       	push   0xc002c573
c001ec5d:	e8 9d b9 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001ec62:	31 ed                	xor    ebp,ebp
c001ec64:	e8 73 f1 ff ff       	call   c001dddc <unlockScheduler()>
c001ec69:	83 c4 10             	add    esp,0x10
c001ec6c:	eb 75                	jmp    c001ece3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec6e:	50                   	push   eax
c001ec6f:	50                   	push   eax
c001ec70:	6a 01                	push   0x1
c001ec72:	57                   	push   edi
c001ec73:	e8 a2 48 ff ff       	call   c001351a <File::open(FileOpenMode)>
c001ec78:	83 c4 10             	add    esp,0x10
c001ec7b:	85 c0                	test   eax,eax
c001ec7d:	74 17                	je     c001ec96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec7f:	83 ec 0c             	sub    esp,0xc
c001ec82:	68 8c c5 02 c0       	push   0xc002c58c
c001ec87:	e8 73 b9 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001ec8c:	e8 4b f1 ff ff       	call   c001dddc <unlockScheduler()>
c001ec91:	83 c4 10             	add    esp,0x10
c001ec94:	eb 4d                	jmp    c001ece3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec96:	0f b7 f6             	movzx  esi,si
c001ec99:	50                   	push   eax
c001ec9a:	0f b7 db             	movzx  ebx,bx
c001ec9d:	50                   	push   eax
c001ec9e:	56                   	push   esi
c001ec9f:	53                   	push   ebx
c001eca0:	e8 b7 fd ff ff       	call   c001ea5c <Vm::realToLinear(unsigned short, unsigned short)>
c001eca5:	5a                   	pop    edx
c001eca6:	8b 17                	mov    edx,DWORD PTR [edi]
c001eca8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecac:	51                   	push   ecx
c001ecad:	50                   	push   eax
c001ecae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecb6:	57                   	push   edi
c001ecb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecba:	83 c4 14             	add    esp,0x14
c001ecbd:	57                   	push   edi
c001ecbe:	e8 b5 48 ff ff       	call   c0013578 <File::close()>
c001ecc3:	c6 05 85 19 03 c0 00 	mov    BYTE PTR ds:0xc0031985,0x0
c001ecca:	e8 0d f1 ff ff       	call   c001dddc <unlockScheduler()>
c001eccf:	59                   	pop    ecx
c001ecd0:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001ecd6:	e8 17 f7 ff ff       	call   c001e3f2 <unblockTask(ThreadControlBlock*)>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ece3:	83 c4 2c             	add    esp,0x2c
c001ece6:	89 e8                	mov    eax,ebp
c001ece8:	5b                   	pop    ebx
c001ece9:	5e                   	pop    esi
c001ecea:	5f                   	pop    edi
c001eceb:	5d                   	pop    ebp
c001ecec:	c3                   	ret    

c001eced <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eced:	57                   	push   edi
c001ecee:	56                   	push   esi
c001ecef:	53                   	push   ebx
c001ecf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecfc:	83 e8 06             	sub    eax,0x6
c001ecff:	0f b7 c0             	movzx  eax,ax
c001ed02:	50                   	push   eax
c001ed03:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed08:	50                   	push   eax
c001ed09:	e8 4e fd ff ff       	call   c001ea5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ed0e:	5a                   	pop    edx
c001ed0f:	5e                   	pop    esi
c001ed10:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed13:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed16:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed1c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed1f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed22:	83 c2 02             	add    edx,0x2
c001ed25:	66 89 10             	mov    WORD PTR [eax],dx
c001ed28:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed2b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed2f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed32:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed36:	89 d6                	mov    esi,edx
c001ed38:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed3e:	66 81 e6 ff fd       	and    si,0xfdff
c001ed43:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed47:	74 07                	je     c001ed50 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed49:	89 d6                	mov    esi,edx
c001ed4b:	66 81 ce 00 02       	or     si,0x200
c001ed50:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed59:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed5d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed65:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed68:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed70:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed73:	5b                   	pop    ebx
c001ed74:	5e                   	pop    esi
c001ed75:	5f                   	pop    edi
c001ed76:	c3                   	ret    

c001ed77 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed7c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed81:	c1 e0 04             	shl    eax,0x4
c001ed84:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed87:	c3                   	ret    

c001ed88 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed88:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed8d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed92:	c1 e0 04             	shl    eax,0x4
c001ed95:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed99:	c3                   	ret    

c001ed9a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed9a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda4:	c1 e0 04             	shl    eax,0x4
c001eda7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edaa:	c3                   	ret    

c001edab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb5:	c1 e0 04             	shl    eax,0x4
c001edb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edbc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edbf:	c3                   	ret    

c001edc0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edc0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edca:	c1 e0 04             	shl    eax,0x4
c001edcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edd5:	c3                   	ret    

c001edd6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edd6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eddb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ede0:	c1 e0 04             	shl    eax,0x4
c001ede3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edea:	c3                   	ret    

c001edeb <Vm::faultHandler(regs*)>:
c001edeb:	55                   	push   ebp
c001edec:	57                   	push   edi
c001eded:	56                   	push   esi
c001edee:	53                   	push   ebx
c001edef:	83 ec 1c             	sub    esp,0x1c
c001edf2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edf6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001edf9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001edfc:	0f b7 c1             	movzx  eax,cx
c001edff:	50                   	push   eax
c001ee00:	0f b7 c3             	movzx  eax,bx
c001ee03:	c1 e3 04             	shl    ebx,0x4
c001ee06:	50                   	push   eax
c001ee07:	e8 50 fc ff ff       	call   c001ea5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee0c:	5a                   	pop    edx
c001ee0d:	89 c5                	mov    ebp,eax
c001ee0f:	5e                   	pop    esi
c001ee10:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee14:	50                   	push   eax
c001ee15:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee19:	50                   	push   eax
c001ee1a:	e8 3d fc ff ff       	call   c001ea5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee1f:	01 cb                	add    ebx,ecx
c001ee21:	89 c6                	mov    esi,eax
c001ee23:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee27:	50                   	push   eax
c001ee28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee2c:	50                   	push   eax
c001ee2d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee31:	50                   	push   eax
c001ee32:	55                   	push   ebp
c001ee33:	53                   	push   ebx
c001ee34:	b3 06                	mov    bl,0x6
c001ee36:	68 a5 c5 02 c0       	push   0xc002c5a5
c001ee3b:	e8 1e 41 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ee40:	83 c4 20             	add    esp,0x20
c001ee43:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee48:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee4d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee51:	3c 9d                	cmp    al,0x9d
c001ee53:	0f 84 d7 02 00 00    	je     c001f130 <Vm::faultHandler(regs*)+0x345>
c001ee59:	0f 87 a3 00 00 00    	ja     c001ef02 <Vm::faultHandler(regs*)+0x117>
c001ee5f:	3c 66                	cmp    al,0x66
c001ee61:	0f 84 15 02 00 00    	je     c001f07c <Vm::faultHandler(regs*)+0x291>
c001ee67:	77 5f                	ja     c001eec8 <Vm::faultHandler(regs*)+0xdd>
c001ee69:	3c 36                	cmp    al,0x36
c001ee6b:	0f 84 f1 01 00 00    	je     c001f062 <Vm::faultHandler(regs*)+0x277>
c001ee71:	77 28                	ja     c001ee9b <Vm::faultHandler(regs*)+0xb0>
c001ee73:	3c 26                	cmp    al,0x26
c001ee75:	0f 84 99 01 00 00    	je     c001f014 <Vm::faultHandler(regs*)+0x229>
c001ee7b:	3c 2e                	cmp    al,0x2e
c001ee7d:	0f 85 3b 07 00 00    	jne    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001ee83:	83 ec 0c             	sub    esp,0xc
c001ee86:	31 db                	xor    ebx,ebx
c001ee88:	68 ba c5 02 c0       	push   0xc002c5ba
c001ee8d:	e8 cc 40 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ee92:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee95:	83 c4 10             	add    esp,0x10
c001ee98:	45                   	inc    ebp
c001ee99:	eb b2                	jmp    c001ee4d <Vm::faultHandler(regs*)+0x62>
c001ee9b:	3c 64                	cmp    al,0x64
c001ee9d:	0f 84 8b 01 00 00    	je     c001f02e <Vm::faultHandler(regs*)+0x243>
c001eea3:	0f 87 9f 01 00 00    	ja     c001f048 <Vm::faultHandler(regs*)+0x25d>
c001eea9:	3c 3e                	cmp    al,0x3e
c001eeab:	0f 85 0d 07 00 00    	jne    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	b3 01                	mov    bl,0x1
c001eeb6:	68 be c5 02 c0       	push   0xc002c5be
c001eebb:	e8 9e 40 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001eec0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	eb d0                	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001eec8:	3c 6d                	cmp    al,0x6d
c001eeca:	0f 84 af 03 00 00    	je     c001f27f <Vm::faultHandler(regs*)+0x494>
c001eed0:	77 15                	ja     c001eee7 <Vm::faultHandler(regs*)+0xfc>
c001eed2:	3c 67                	cmp    al,0x67
c001eed4:	0f 84 bf 01 00 00    	je     c001f099 <Vm::faultHandler(regs*)+0x2ae>
c001eeda:	3c 6c                	cmp    al,0x6c
c001eedc:	0f 84 3f 03 00 00    	je     c001f221 <Vm::faultHandler(regs*)+0x436>
c001eee2:	e9 d7 06 00 00       	jmp    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001eee7:	3c 6f                	cmp    al,0x6f
c001eee9:	0f 84 a4 04 00 00    	je     c001f393 <Vm::faultHandler(regs*)+0x5a8>
c001eeef:	0f 82 11 04 00 00    	jb     c001f306 <Vm::faultHandler(regs*)+0x51b>
c001eef5:	3c 9c                	cmp    al,0x9c
c001eef7:	0f 84 ba 01 00 00    	je     c001f0b7 <Vm::faultHandler(regs*)+0x2cc>
c001eefd:	e9 bc 06 00 00       	jmp    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001ef02:	3c ec                	cmp    al,0xec
c001ef04:	0f 84 24 06 00 00    	je     c001f52e <Vm::faultHandler(regs*)+0x743>
c001ef0a:	0f 87 93 00 00 00    	ja     c001efa3 <Vm::faultHandler(regs*)+0x1b8>
c001ef10:	3c e4                	cmp    al,0xe4
c001ef12:	0f 84 5c 05 00 00    	je     c001f474 <Vm::faultHandler(regs*)+0x689>
c001ef18:	77 6a                	ja     c001ef84 <Vm::faultHandler(regs*)+0x199>
c001ef1a:	3c cd                	cmp    al,0xcd
c001ef1c:	0f 84 7e 02 00 00    	je     c001f1a0 <Vm::faultHandler(regs*)+0x3b5>
c001ef22:	3c cf                	cmp    al,0xcf
c001ef24:	0f 85 94 06 00 00    	jne    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001ef2a:	83 ec 0c             	sub    esp,0xc
c001ef2d:	68 02 c6 02 c0       	push   0xc002c602
c001ef32:	e8 27 40 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ef37:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef3a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef3d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef41:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef44:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef48:	0d 00 02 02 00       	or     eax,0x20200
c001ef4d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef50:	56                   	push   esi
c001ef51:	53                   	push   ebx
c001ef52:	52                   	push   edx
c001ef53:	68 08 c6 02 c0       	push   0xc002c608
c001ef58:	e8 01 40 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001ef5d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef67:	66 c1 e8 09          	shr    ax,0x9
c001ef6b:	83 e0 01             	and    eax,0x1
c001ef6e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef71:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef74:	83 c0 06             	add    eax,0x6
c001ef77:	25 ff ff 00 00       	and    eax,0xffff
c001ef7c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef7f:	e9 95 02 00 00       	jmp    c001f219 <Vm::faultHandler(regs*)+0x42e>
c001ef84:	3c e6                	cmp    al,0xe6
c001ef86:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef8a:	0f 84 4e 05 00 00    	je     c001f4de <Vm::faultHandler(regs*)+0x6f3>
c001ef90:	0f 82 0a 05 00 00    	jb     c001f4a0 <Vm::faultHandler(regs*)+0x6b5>
c001ef96:	3c e7                	cmp    al,0xe7
c001ef98:	0f 84 69 05 00 00    	je     c001f507 <Vm::faultHandler(regs*)+0x71c>
c001ef9e:	e9 1b 06 00 00       	jmp    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001efa3:	3c ef                	cmp    al,0xef
c001efa5:	0f 84 e6 05 00 00    	je     c001f591 <Vm::faultHandler(regs*)+0x7a6>
c001efab:	77 37                	ja     c001efe4 <Vm::faultHandler(regs*)+0x1f9>
c001efad:	3c ed                	cmp    al,0xed
c001efaf:	0f 84 a3 05 00 00    	je     c001f558 <Vm::faultHandler(regs*)+0x76d>
c001efb5:	3c ee                	cmp    al,0xee
c001efb7:	0f 85 01 06 00 00    	jne    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001efbd:	52                   	push   edx
c001efbe:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efc1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efc4:	68 a3 c6 02 c0       	push   0xc002c6a3
c001efc9:	e8 90 3f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001efce:	59                   	pop    ecx
c001efcf:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efd3:	5b                   	pop    ebx
c001efd4:	50                   	push   eax
c001efd5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efd9:	50                   	push   eax
c001efda:	e8 2a fa ff ff       	call   c001ea09 <Vm::outbv(unsigned short, unsigned char)>
c001efdf:	e9 a5 05 00 00       	jmp    c001f589 <Vm::faultHandler(regs*)+0x79e>
c001efe4:	3c fa                	cmp    al,0xfa
c001efe6:	0f 84 f7 01 00 00    	je     c001f1e3 <Vm::faultHandler(regs*)+0x3f8>
c001efec:	3c fb                	cmp    al,0xfb
c001efee:	0f 84 0a 02 00 00    	je     c001f1fe <Vm::faultHandler(regs*)+0x413>
c001eff4:	3c f3                	cmp    al,0xf3
c001eff6:	0f 85 c2 05 00 00    	jne    c001f5be <Vm::faultHandler(regs*)+0x7d3>
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	68 db c5 02 c0       	push   0xc002c5db
c001f004:	e8 55 3f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f009:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f00c:	83 c4 10             	add    esp,0x10
c001f00f:	e9 84 fe ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f014:	83 ec 0c             	sub    esp,0xc
c001f017:	b3 02                	mov    bl,0x2
c001f019:	68 b6 c5 02 c0       	push   0xc002c5b6
c001f01e:	e8 3b 3f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f023:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f026:	83 c4 10             	add    esp,0x10
c001f029:	e9 6a fe ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	b3 03                	mov    bl,0x3
c001f033:	68 c2 c5 02 c0       	push   0xc002c5c2
c001f038:	e8 21 3f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f03d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f040:	83 c4 10             	add    esp,0x10
c001f043:	e9 50 fe ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f048:	83 ec 0c             	sub    esp,0xc
c001f04b:	b3 04                	mov    bl,0x4
c001f04d:	68 c6 c5 02 c0       	push   0xc002c5c6
c001f052:	e8 07 3f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f057:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f05a:	83 c4 10             	add    esp,0x10
c001f05d:	e9 36 fe ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	b3 05                	mov    bl,0x5
c001f067:	68 ca c5 02 c0       	push   0xc002c5ca
c001f06c:	e8 ed 3e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f071:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f074:	83 c4 10             	add    esp,0x10
c001f077:	e9 1c fe ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	68 ce c5 02 c0       	push   0xc002c5ce
c001f084:	e8 d5 3e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f094:	e9 ff fd ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f099:	50                   	push   eax
c001f09a:	50                   	push   eax
c001f09b:	6a 01                	push   0x1
c001f09d:	68 d3 c5 02 c0       	push   0xc002c5d3
c001f0a2:	e8 b7 3e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ad:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0b2:	e9 e1 fd ff ff       	jmp    c001ee98 <Vm::faultHandler(regs*)+0xad>
c001f0b7:	83 ec 0c             	sub    esp,0xc
c001f0ba:	68 e1 c5 02 c0       	push   0xc002c5e1
c001f0bf:	e8 9a 3e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f0c4:	83 c4 10             	add    esp,0x10
c001f0c7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0cf:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0d2:	74 2f                	je     c001f103 <Vm::faultHandler(regs*)+0x318>
c001f0d4:	83 ea 04             	sub    edx,0x4
c001f0d7:	25 ff 0d 00 00       	and    eax,0xdff
c001f0dc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0e2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0e5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ee:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0f2:	0f 84 bf 04 00 00    	je     c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f0f8:	80 cc 02             	or     ah,0x2
c001f0fb:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0fe:	e9 b4 04 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f103:	83 ea 02             	sub    edx,0x2
c001f106:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f10c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f10f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f113:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f119:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f11d:	74 05                	je     c001f124 <Vm::faultHandler(regs*)+0x339>
c001f11f:	80 cc 02             	or     ah,0x2
c001f122:	eb 03                	jmp    c001f127 <Vm::faultHandler(regs*)+0x33c>
c001f124:	80 e4 fd             	and    ah,0xfd
c001f127:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f12b:	e9 87 04 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	68 e8 c5 02 c0       	push   0xc002c5e8
c001f138:	e8 21 3e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f145:	74 28                	je     c001f16f <Vm::faultHandler(regs*)+0x384>
c001f147:	8b 06                	mov    eax,DWORD PTR [esi]
c001f149:	25 ff 0d 00 00       	and    eax,0xdff
c001f14e:	0d 00 02 02 00       	or     eax,0x20200
c001f153:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f156:	8b 06                	mov    eax,DWORD PTR [esi]
c001f158:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15e:	c1 e8 09             	shr    eax,0x9
c001f161:	83 e0 01             	and    eax,0x1
c001f164:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f167:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f16a:	83 c0 04             	add    eax,0x4
c001f16d:	eb 24                	jmp    c001f193 <Vm::faultHandler(regs*)+0x3a8>
c001f16f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f172:	0d 00 02 02 00       	or     eax,0x20200
c001f177:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f17a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f17d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f183:	66 c1 e8 09          	shr    ax,0x9
c001f187:	83 e0 01             	and    eax,0x1
c001f18a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f18d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f190:	83 c0 02             	add    eax,0x2
c001f193:	25 ff ff 00 00       	and    eax,0xffff
c001f198:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f19b:	e9 17 04 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f1a0:	53                   	push   ebx
c001f1a1:	53                   	push   ebx
c001f1a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a6:	50                   	push   eax
c001f1a7:	68 ee c5 02 c0       	push   0xc002c5ee
c001f1ac:	e8 ad 3d ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f1b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1b5:	83 c4 10             	add    esp,0x10
c001f1b8:	3c ee                	cmp    al,0xee
c001f1ba:	75 10                	jne    c001f1cc <Vm::faultHandler(regs*)+0x3e1>
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1c2:	e8 fa f8 ff ff       	call   c001eac1 <Vm::mainloop3(unsigned long)>
c001f1c7:	e9 c0 03 00 00       	jmp    c001f58c <Vm::faultHandler(regs*)+0x7a1>
c001f1cc:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1d0:	83 ec 0c             	sub    esp,0xc
c001f1d3:	53                   	push   ebx
c001f1d4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1d8:	53                   	push   ebx
c001f1d9:	55                   	push   ebp
c001f1da:	50                   	push   eax
c001f1db:	57                   	push   edi
c001f1dc:	e8 0c fb ff ff       	call   c001eced <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1e1:	eb 36                	jmp    c001f219 <Vm::faultHandler(regs*)+0x42e>
c001f1e3:	83 ec 0c             	sub    esp,0xc
c001f1e6:	68 f8 c5 02 c0       	push   0xc002c5f8
c001f1eb:	e8 6e 3d ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f1f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1f5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1f9:	e9 8b 03 00 00       	jmp    c001f589 <Vm::faultHandler(regs*)+0x79e>
c001f1fe:	83 ec 0c             	sub    esp,0xc
c001f201:	68 fd c5 02 c0       	push   0xc002c5fd
c001f206:	e8 53 3d ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f20b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f210:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f214:	e9 70 03 00 00       	jmp    c001f589 <Vm::faultHandler(regs*)+0x79e>
c001f219:	83 c4 20             	add    esp,0x20
c001f21c:	e9 99 03 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7cf>
c001f221:	83 ec 0c             	sub    esp,0xc
c001f224:	68 3b c6 02 c0       	push   0xc002c63b
c001f229:	e8 30 3d ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f22e:	83 c4 10             	add    esp,0x10
c001f231:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f234:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f239:	74 0d                	je     c001f248 <Vm::faultHandler(regs*)+0x45d>
c001f23b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f242:	0f 87 9e 01 00 00    	ja     c001f3e6 <Vm::faultHandler(regs*)+0x5fb>
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f24f:	0f b7 db             	movzx  ebx,bx
c001f252:	50                   	push   eax
c001f253:	e8 9e f7 ff ff       	call   c001e9f6 <Vm::inbv(unsigned short)>
c001f258:	83 c4 0c             	add    esp,0xc
c001f25b:	0f b6 c0             	movzx  eax,al
c001f25e:	50                   	push   eax
c001f25f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f263:	50                   	push   eax
c001f264:	53                   	push   ebx
c001f265:	e8 41 fb ff ff       	call   c001edab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f26a:	83 c4 10             	add    esp,0x10
c001f26d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f270:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f274:	74 03                	je     c001f279 <Vm::faultHandler(regs*)+0x48e>
c001f276:	48                   	dec    eax
c001f277:	eb 01                	jmp    c001f27a <Vm::faultHandler(regs*)+0x48f>
c001f279:	40                   	inc    eax
c001f27a:	0f b7 c0             	movzx  eax,ax
c001f27d:	eb 7f                	jmp    c001f2fe <Vm::faultHandler(regs*)+0x513>
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	68 6d c6 02 c0       	push   0xc002c66d
c001f287:	e8 d2 3c ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f28c:	83 c4 10             	add    esp,0x10
c001f28f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f292:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f297:	74 0d                	je     c001f2a6 <Vm::faultHandler(regs*)+0x4bb>
c001f299:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2a0:	0f 87 40 01 00 00    	ja     c001f3e6 <Vm::faultHandler(regs*)+0x5fb>
c001f2a6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2a9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2ad:	0f b7 db             	movzx  ebx,bx
c001f2b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2b5:	74 20                	je     c001f2d7 <Vm::faultHandler(regs*)+0x4ec>
c001f2b7:	ed                   	in     eax,dx
c001f2b8:	51                   	push   ecx
c001f2b9:	50                   	push   eax
c001f2ba:	56                   	push   esi
c001f2bb:	53                   	push   ebx
c001f2bc:	e8 15 fb ff ff       	call   c001edd6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2c1:	83 c4 10             	add    esp,0x10
c001f2c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2c7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2cb:	74 05                	je     c001f2d2 <Vm::faultHandler(regs*)+0x4e7>
c001f2cd:	83 e8 04             	sub    eax,0x4
c001f2d0:	eb 27                	jmp    c001f2f9 <Vm::faultHandler(regs*)+0x50e>
c001f2d2:	83 c0 04             	add    eax,0x4
c001f2d5:	eb 22                	jmp    c001f2f9 <Vm::faultHandler(regs*)+0x50e>
c001f2d7:	66 ed                	in     ax,dx
c001f2d9:	0f b7 c0             	movzx  eax,ax
c001f2dc:	52                   	push   edx
c001f2dd:	50                   	push   eax
c001f2de:	56                   	push   esi
c001f2df:	53                   	push   ebx
c001f2e0:	e8 db fa ff ff       	call   c001edc0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2eb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ef:	74 05                	je     c001f2f6 <Vm::faultHandler(regs*)+0x50b>
c001f2f1:	83 e8 02             	sub    eax,0x2
c001f2f4:	eb 03                	jmp    c001f2f9 <Vm::faultHandler(regs*)+0x50e>
c001f2f6:	83 c0 02             	add    eax,0x2
c001f2f9:	25 ff ff 00 00       	and    eax,0xffff
c001f2fe:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f301:	e9 b1 02 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f306:	83 ec 0c             	sub    esp,0xc
c001f309:	4b                   	dec    ebx
c001f30a:	68 73 c6 02 c0       	push   0xc002c673
c001f30f:	e8 4a 3c ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	80 fb 05             	cmp    bl,0x5
c001f31a:	77 0a                	ja     c001f326 <Vm::faultHandler(regs*)+0x53b>
c001f31c:	0f b6 db             	movzx  ebx,bl
c001f31f:	ff 24 9d e4 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd391c]
c001f326:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f32a:	eb 1b                	jmp    c001f347 <Vm::faultHandler(regs*)+0x55c>
c001f32c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f330:	eb 15                	jmp    c001f347 <Vm::faultHandler(regs*)+0x55c>
c001f332:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f336:	eb 0f                	jmp    c001f347 <Vm::faultHandler(regs*)+0x55c>
c001f338:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f33c:	eb 09                	jmp    c001f347 <Vm::faultHandler(regs*)+0x55c>
c001f33e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f341:	eb 04                	jmp    c001f347 <Vm::faultHandler(regs*)+0x55c>
c001f343:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f347:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f34c:	74 0d                	je     c001f35b <Vm::faultHandler(regs*)+0x570>
c001f34e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f355:	0f 87 8b 00 00 00    	ja     c001f3e6 <Vm::faultHandler(regs*)+0x5fb>
c001f35b:	53                   	push   ebx
c001f35c:	53                   	push   ebx
c001f35d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f361:	52                   	push   edx
c001f362:	50                   	push   eax
c001f363:	e8 0f fa ff ff       	call   c001ed77 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f368:	5e                   	pop    esi
c001f369:	0f b6 c0             	movzx  eax,al
c001f36c:	5d                   	pop    ebp
c001f36d:	50                   	push   eax
c001f36e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f372:	50                   	push   eax
c001f373:	e8 91 f6 ff ff       	call   c001ea09 <Vm::outbv(unsigned short, unsigned char)>
c001f378:	83 c4 10             	add    esp,0x10
c001f37b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f37e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f382:	74 03                	je     c001f387 <Vm::faultHandler(regs*)+0x59c>
c001f384:	48                   	dec    eax
c001f385:	eb 01                	jmp    c001f388 <Vm::faultHandler(regs*)+0x59d>
c001f387:	40                   	inc    eax
c001f388:	0f b7 c0             	movzx  eax,ax
c001f38b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f38e:	e9 24 02 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f393:	83 ec 0c             	sub    esp,0xc
c001f396:	4b                   	dec    ebx
c001f397:	68 73 c6 02 c0       	push   0xc002c673
c001f39c:	e8 bd 3b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	80 fb 05             	cmp    bl,0x5
c001f3a7:	77 0a                	ja     c001f3b3 <Vm::faultHandler(regs*)+0x5c8>
c001f3a9:	0f b6 db             	movzx  ebx,bl
c001f3ac:	ff 24 9d fc c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3904]
c001f3b3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3b7:	eb 1b                	jmp    c001f3d4 <Vm::faultHandler(regs*)+0x5e9>
c001f3b9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3bd:	eb 15                	jmp    c001f3d4 <Vm::faultHandler(regs*)+0x5e9>
c001f3bf:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3c3:	eb 0f                	jmp    c001f3d4 <Vm::faultHandler(regs*)+0x5e9>
c001f3c5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3c9:	eb 09                	jmp    c001f3d4 <Vm::faultHandler(regs*)+0x5e9>
c001f3cb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3ce:	eb 04                	jmp    c001f3d4 <Vm::faultHandler(regs*)+0x5e9>
c001f3d0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3d4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3dc:	74 39                	je     c001f417 <Vm::faultHandler(regs*)+0x62c>
c001f3de:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3e4:	76 31                	jbe    c001f417 <Vm::faultHandler(regs*)+0x62c>
c001f3e6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3ea:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3ee:	51                   	push   ecx
c001f3ef:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3f3:	51                   	push   ecx
c001f3f4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3f8:	51                   	push   ecx
c001f3f9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3fd:	51                   	push   ecx
c001f3fe:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f402:	52                   	push   edx
c001f403:	50                   	push   eax
c001f404:	50                   	push   eax
c001f405:	68 40 c6 02 c0       	push   0xc002c640
c001f40a:	e8 4f 3b ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f40f:	83 c4 20             	add    esp,0x20
c001f412:	e9 fb 01 00 00       	jmp    c001f612 <Vm::faultHandler(regs*)+0x827>
c001f417:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f41a:	0f b7 d3             	movzx  edx,bx
c001f41d:	81 e6 00 04 00 00    	and    esi,0x400
c001f423:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f426:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f42b:	74 1d                	je     c001f44a <Vm::faultHandler(regs*)+0x65f>
c001f42d:	51                   	push   ecx
c001f42e:	51                   	push   ecx
c001f42f:	52                   	push   edx
c001f430:	50                   	push   eax
c001f431:	e8 64 f9 ff ff       	call   c001ed9a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f436:	83 c4 10             	add    esp,0x10
c001f439:	89 ea                	mov    edx,ebp
c001f43b:	ef                   	out    dx,eax
c001f43c:	85 f6                	test   esi,esi
c001f43e:	74 05                	je     c001f445 <Vm::faultHandler(regs*)+0x65a>
c001f440:	83 eb 04             	sub    ebx,0x4
c001f443:	eb 21                	jmp    c001f466 <Vm::faultHandler(regs*)+0x67b>
c001f445:	83 c3 04             	add    ebx,0x4
c001f448:	eb 1c                	jmp    c001f466 <Vm::faultHandler(regs*)+0x67b>
c001f44a:	51                   	push   ecx
c001f44b:	51                   	push   ecx
c001f44c:	52                   	push   edx
c001f44d:	50                   	push   eax
c001f44e:	e8 35 f9 ff ff       	call   c001ed88 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f453:	83 c4 10             	add    esp,0x10
c001f456:	89 ea                	mov    edx,ebp
c001f458:	66 ef                	out    dx,ax
c001f45a:	85 f6                	test   esi,esi
c001f45c:	74 05                	je     c001f463 <Vm::faultHandler(regs*)+0x678>
c001f45e:	83 eb 02             	sub    ebx,0x2
c001f461:	eb 03                	jmp    c001f466 <Vm::faultHandler(regs*)+0x67b>
c001f463:	83 c3 02             	add    ebx,0x2
c001f466:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f46c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f46f:	e9 43 01 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f474:	53                   	push   ebx
c001f475:	53                   	push   ebx
c001f476:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f47a:	50                   	push   eax
c001f47b:	68 79 c6 02 c0       	push   0xc002c679
c001f480:	e8 d9 3a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f485:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f48c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f490:	89 04 24             	mov    DWORD PTR [esp],eax
c001f493:	e8 5e f5 ff ff       	call   c001e9f6 <Vm::inbv(unsigned short)>
c001f498:	0f b6 c0             	movzx  eax,al
c001f49b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f49e:	eb 5e                	jmp    c001f4fe <Vm::faultHandler(regs*)+0x713>
c001f4a0:	51                   	push   ecx
c001f4a1:	51                   	push   ecx
c001f4a2:	53                   	push   ebx
c001f4a3:	68 7f c6 02 c0       	push   0xc002c67f
c001f4a8:	e8 b1 3a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4b5:	74 07                	je     c001f4be <Vm::faultHandler(regs*)+0x6d3>
c001f4b7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4bb:	ed                   	in     eax,dx
c001f4bc:	eb 14                	jmp    c001f4d2 <Vm::faultHandler(regs*)+0x6e7>
c001f4be:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4c1:	66 31 db             	xor    bx,bx
c001f4c4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4c7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4cb:	66 ed                	in     ax,dx
c001f4cd:	0f b7 c0             	movzx  eax,ax
c001f4d0:	09 d8                	or     eax,ebx
c001f4d2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4d5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4d9:	e9 dc 00 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7cf>
c001f4de:	50                   	push   eax
c001f4df:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4e2:	53                   	push   ebx
c001f4e3:	68 85 c6 02 c0       	push   0xc002c685
c001f4e8:	e8 71 3a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f4ed:	58                   	pop    eax
c001f4ee:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4f2:	5a                   	pop    edx
c001f4f3:	50                   	push   eax
c001f4f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f8:	50                   	push   eax
c001f4f9:	e8 0b f5 ff ff       	call   c001ea09 <Vm::outbv(unsigned short, unsigned char)>
c001f4fe:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f502:	e9 85 00 00 00       	jmp    c001f58c <Vm::faultHandler(regs*)+0x7a1>
c001f507:	50                   	push   eax
c001f508:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f50b:	53                   	push   ebx
c001f50c:	68 8e c6 02 c0       	push   0xc002c68e
c001f511:	e8 48 3a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f51d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f522:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f525:	74 03                	je     c001f52a <Vm::faultHandler(regs*)+0x73f>
c001f527:	ef                   	out    dx,eax
c001f528:	eb ab                	jmp    c001f4d5 <Vm::faultHandler(regs*)+0x6ea>
c001f52a:	66 ef                	out    dx,ax
c001f52c:	eb a7                	jmp    c001f4d5 <Vm::faultHandler(regs*)+0x6ea>
c001f52e:	55                   	push   ebp
c001f52f:	55                   	push   ebp
c001f530:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f533:	68 97 c6 02 c0       	push   0xc002c697
c001f538:	e8 21 3a ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f53d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f544:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f548:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54b:	e8 a6 f4 ff ff       	call   c001e9f6 <Vm::inbv(unsigned short)>
c001f550:	0f b6 c0             	movzx  eax,al
c001f553:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f556:	eb 31                	jmp    c001f589 <Vm::faultHandler(regs*)+0x79e>
c001f558:	56                   	push   esi
c001f559:	56                   	push   esi
c001f55a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f55d:	68 9d c6 02 c0       	push   0xc002c69d
c001f562:	e8 f7 39 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f56d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f572:	74 03                	je     c001f577 <Vm::faultHandler(regs*)+0x78c>
c001f574:	ed                   	in     eax,dx
c001f575:	eb 0d                	jmp    c001f584 <Vm::faultHandler(regs*)+0x799>
c001f577:	66 ed                	in     ax,dx
c001f579:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f57c:	0f b7 c0             	movzx  eax,ax
c001f57f:	66 31 d2             	xor    dx,dx
c001f582:	09 d0                	or     eax,edx
c001f584:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f587:	eb 2e                	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f589:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f58c:	83 c4 10             	add    esp,0x10
c001f58f:	eb 29                	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7cf>
c001f591:	50                   	push   eax
c001f592:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f595:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f598:	68 ac c6 02 c0       	push   0xc002c6ac
c001f59d:	e8 bc 39 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f5a2:	83 c4 10             	add    esp,0x10
c001f5a5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5a8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5ad:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5b0:	74 03                	je     c001f5b5 <Vm::faultHandler(regs*)+0x7ca>
c001f5b2:	ef                   	out    dx,eax
c001f5b3:	eb 02                	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x7cc>
c001f5b5:	66 ef                	out    dx,ax
c001f5b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5ba:	b0 01                	mov    al,0x1
c001f5bc:	eb 56                	jmp    c001f614 <Vm::faultHandler(regs*)+0x829>
c001f5be:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5c2:	51                   	push   ecx
c001f5c3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5c7:	51                   	push   ecx
c001f5c8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5cc:	51                   	push   ecx
c001f5cd:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5d1:	51                   	push   ecx
c001f5d2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d6:	52                   	push   edx
c001f5d7:	50                   	push   eax
c001f5d8:	50                   	push   eax
c001f5d9:	68 b5 c6 02 c0       	push   0xc002c6b5
c001f5de:	e8 7b 39 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c001f5e3:	83 c4 20             	add    esp,0x20
c001f5e6:	83 ec 0c             	sub    esp,0xc
c001f5e9:	6a 60                	push   0x60
c001f5eb:	e8 06 f4 ff ff       	call   c001e9f6 <Vm::inbv(unsigned short)>
c001f5f0:	83 c4 10             	add    esp,0x10
c001f5f3:	3c 1c                	cmp    al,0x1c
c001f5f5:	74 04                	je     c001f5fb <Vm::faultHandler(regs*)+0x810>
c001f5f7:	3c 5a                	cmp    al,0x5a
c001f5f9:	75 eb                	jne    c001f5e6 <Vm::faultHandler(regs*)+0x7fb>
c001f5fb:	3c 1c                	cmp    al,0x1c
c001f5fd:	74 04                	je     c001f603 <Vm::faultHandler(regs*)+0x818>
c001f5ff:	3c 5a                	cmp    al,0x5a
c001f601:	75 0f                	jne    c001f612 <Vm::faultHandler(regs*)+0x827>
c001f603:	83 ec 0c             	sub    esp,0xc
c001f606:	6a 60                	push   0x60
c001f608:	e8 e9 f3 ff ff       	call   c001e9f6 <Vm::inbv(unsigned short)>
c001f60d:	83 c4 10             	add    esp,0x10
c001f610:	eb e9                	jmp    c001f5fb <Vm::faultHandler(regs*)+0x810>
c001f612:	31 c0                	xor    eax,eax
c001f614:	83 c4 1c             	add    esp,0x1c
c001f617:	5b                   	pop    ebx
c001f618:	5e                   	pop    esi
c001f619:	5f                   	pop    edi
c001f61a:	5d                   	pop    ebp
c001f61b:	c3                   	ret    

c001f61c <Vm::fpuInternalTo32(unsigned long long)>:
c001f61c:	57                   	push   edi
c001f61d:	56                   	push   esi
c001f61e:	53                   	push   ebx
c001f61f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f627:	89 d6                	mov    esi,edx
c001f629:	89 d7                	mov    edi,edx
c001f62b:	89 c1                	mov    ecx,eax
c001f62d:	c1 ef 14             	shr    edi,0x14
c001f630:	89 d3                	mov    ebx,edx
c001f632:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f638:	31 d2                	xor    edx,edx
c001f63a:	89 f8                	mov    eax,edi
c001f63c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f642:	bf ff 00 00 00       	mov    edi,0xff
c001f647:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f64c:	83 d2 ff             	adc    edx,0xffffffff
c001f64f:	39 c7                	cmp    edi,eax
c001f651:	bf 00 00 00 00       	mov    edi,0x0
c001f656:	19 d7                	sbb    edi,edx
c001f658:	72 15                	jb     c001f66f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f65a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f65e:	c1 e0 17             	shl    eax,0x17
c001f661:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f667:	09 f1                	or     ecx,esi
c001f669:	09 c1                	or     ecx,eax
c001f66b:	89 cf                	mov    edi,ecx
c001f66d:	eb 02                	jmp    c001f671 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f66f:	31 ff                	xor    edi,edi
c001f671:	89 f8                	mov    eax,edi
c001f673:	5b                   	pop    ebx
c001f674:	5e                   	pop    esi
c001f675:	5f                   	pop    edi
c001f676:	c3                   	ret    

c001f677 <Vm::fpuInternalTo64(unsigned long long)>:
c001f677:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f67b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f67f:	c3                   	ret    

c001f680 <Vm::fpu32ToInternal(unsigned int)>:
c001f680:	57                   	push   edi
c001f681:	31 ff                	xor    edi,edi
c001f683:	56                   	push   esi
c001f684:	53                   	push   ebx
c001f685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f689:	89 cb                	mov    ebx,ecx
c001f68b:	89 ce                	mov    esi,ecx
c001f68d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f693:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f699:	c1 e9 17             	shr    ecx,0x17
c001f69c:	89 f0                	mov    eax,esi
c001f69e:	0f b6 d1             	movzx  edx,cl
c001f6a1:	81 c2 80 03 00 00    	add    edx,0x380
c001f6a7:	89 d1                	mov    ecx,edx
c001f6a9:	89 fa                	mov    edx,edi
c001f6ab:	c1 e1 14             	shl    ecx,0x14
c001f6ae:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6b2:	c1 e0 1d             	shl    eax,0x1d
c001f6b5:	89 d7                	mov    edi,edx
c001f6b7:	89 c6                	mov    esi,eax
c001f6b9:	89 ca                	mov    edx,ecx
c001f6bb:	89 f0                	mov    eax,esi
c001f6bd:	09 fa                	or     edx,edi
c001f6bf:	09 da                	or     edx,ebx
c001f6c1:	5b                   	pop    ebx
c001f6c2:	5e                   	pop    esi
c001f6c3:	5f                   	pop    edi
c001f6c4:	c3                   	ret    

c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6cd:	c3                   	ret    

c001f6ce <Vm::fpuFloatToLong(unsigned long long)>:
c001f6ce:	57                   	push   edi
c001f6cf:	31 c0                	xor    eax,eax
c001f6d1:	56                   	push   esi
c001f6d2:	31 d2                	xor    edx,edx
c001f6d4:	53                   	push   ebx
c001f6d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6dd:	89 d9                	mov    ecx,ebx
c001f6df:	c1 e9 14             	shr    ecx,0x14
c001f6e2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6e8:	89 cf                	mov    edi,ecx
c001f6ea:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6f0:	78 33                	js     c001f725 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6f2:	89 d9                	mov    ecx,ebx
c001f6f4:	89 f0                	mov    eax,esi
c001f6f6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6fc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f702:	89 ca                	mov    edx,ecx
c001f704:	b9 34 00 00 00       	mov    ecx,0x34
c001f709:	29 f9                	sub    ecx,edi
c001f70b:	0f ad d0             	shrd   eax,edx,cl
c001f70e:	d3 fa                	sar    edx,cl
c001f710:	f6 c1 20             	test   cl,0x20
c001f713:	74 05                	je     c001f71a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f715:	89 d0                	mov    eax,edx
c001f717:	c1 fa 1f             	sar    edx,0x1f
c001f71a:	85 db                	test   ebx,ebx
c001f71c:	79 07                	jns    c001f725 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f71e:	f7 d8                	neg    eax
c001f720:	83 d2 00             	adc    edx,0x0
c001f723:	f7 da                	neg    edx
c001f725:	5b                   	pop    ebx
c001f726:	5e                   	pop    esi
c001f727:	5f                   	pop    edi
c001f728:	c3                   	ret    

c001f729 <Vm::fpuULongToFloat(unsigned long long)>:
c001f729:	57                   	push   edi
c001f72a:	31 c9                	xor    ecx,ecx
c001f72c:	56                   	push   esi
c001f72d:	53                   	push   ebx
c001f72e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f732:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f736:	0f ba e7 14          	bt     edi,0x14
c001f73a:	72 07                	jb     c001f743 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f73c:	01 f6                	add    esi,esi
c001f73e:	11 ff                	adc    edi,edi
c001f740:	41                   	inc    ecx
c001f741:	eb f3                	jmp    c001f736 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f743:	89 fa                	mov    edx,edi
c001f745:	89 f0                	mov    eax,esi
c001f747:	bb 33 04 00 00       	mov    ebx,0x433
c001f74c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f752:	29 cb                	sub    ebx,ecx
c001f754:	89 d9                	mov    ecx,ebx
c001f756:	5b                   	pop    ebx
c001f757:	c1 e1 14             	shl    ecx,0x14
c001f75a:	5e                   	pop    esi
c001f75b:	09 ca                	or     edx,ecx
c001f75d:	5f                   	pop    edi
c001f75e:	c3                   	ret    

c001f75f <Vm::fpuLongToFloat(long long)>:
c001f75f:	56                   	push   esi
c001f760:	31 c0                	xor    eax,eax
c001f762:	53                   	push   ebx
c001f763:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f76b:	39 c8                	cmp    eax,ecx
c001f76d:	19 d8                	sbb    eax,ebx
c001f76f:	7d 04                	jge    c001f775 <Vm::fpuLongToFloat(long long)+0x16>
c001f771:	31 f6                	xor    esi,esi
c001f773:	eb 0c                	jmp    c001f781 <Vm::fpuLongToFloat(long long)+0x22>
c001f775:	f7 d9                	neg    ecx
c001f777:	be 01 00 00 00       	mov    esi,0x1
c001f77c:	83 d3 00             	adc    ebx,0x0
c001f77f:	f7 db                	neg    ebx
c001f781:	31 c0                	xor    eax,eax
c001f783:	0f ba e3 14          	bt     ebx,0x14
c001f787:	72 07                	jb     c001f790 <Vm::fpuLongToFloat(long long)+0x31>
c001f789:	01 c9                	add    ecx,ecx
c001f78b:	11 db                	adc    ebx,ebx
c001f78d:	40                   	inc    eax
c001f78e:	eb f3                	jmp    c001f783 <Vm::fpuLongToFloat(long long)+0x24>
c001f790:	ba 33 04 00 00       	mov    edx,0x433
c001f795:	29 c2                	sub    edx,eax
c001f797:	89 c8                	mov    eax,ecx
c001f799:	c1 e2 14             	shl    edx,0x14
c001f79c:	89 d9                	mov    ecx,ebx
c001f79e:	89 f3                	mov    ebx,esi
c001f7a0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7a6:	09 ca                	or     edx,ecx
c001f7a8:	84 db                	test   bl,bl
c001f7aa:	74 06                	je     c001f7b2 <Vm::fpuLongToFloat(long long)+0x53>
c001f7ac:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7b2:	5b                   	pop    ebx
c001f7b3:	5e                   	pop    esi
c001f7b4:	c3                   	ret    

c001f7b5 <Vm::fpuGet0()>:
c001f7b5:	31 c0                	xor    eax,eax
c001f7b7:	31 d2                	xor    edx,edx
c001f7b9:	c3                   	ret    

c001f7ba <Vm::fpuGet1()>:
c001f7ba:	b8 01 00 00 00       	mov    eax,0x1
c001f7bf:	31 d2                	xor    edx,edx
c001f7c1:	c3                   	ret    

c001f7c2 <Vm::fpuGetPi()>:
c001f7c2:	b8 03 00 00 00       	mov    eax,0x3
c001f7c7:	31 d2                	xor    edx,edx
c001f7c9:	c3                   	ret    

c001f7ca <Vm::fpuGetLog2E()>:
c001f7ca:	83 ec 18             	sub    esp,0x18
c001f7cd:	68 14 c7 02 c0       	push   0xc002c714
c001f7d2:	e8 28 ae ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f7d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7dc:	31 d2                	xor    edx,edx
c001f7de:	83 c4 1c             	add    esp,0x1c
c001f7e1:	c3                   	ret    

c001f7e2 <Vm::fpuGetLogE2()>:
c001f7e2:	83 ec 18             	sub    esp,0x18
c001f7e5:	68 20 c7 02 c0       	push   0xc002c720
c001f7ea:	e8 10 ae ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f7ef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7f4:	31 d2                	xor    edx,edx
c001f7f6:	83 c4 1c             	add    esp,0x1c
c001f7f9:	c3                   	ret    

c001f7fa <Vm::fpuGetLog210()>:
c001f7fa:	83 ec 18             	sub    esp,0x18
c001f7fd:	68 2c c7 02 c0       	push   0xc002c72c
c001f802:	e8 f8 ad ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f80c:	31 d2                	xor    edx,edx
c001f80e:	83 c4 1c             	add    esp,0x1c
c001f811:	c3                   	ret    

c001f812 <Vm::fpuGetLog102()>:
c001f812:	83 ec 18             	sub    esp,0x18
c001f815:	68 39 c7 02 c0       	push   0xc002c739
c001f81a:	e8 e0 ad ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f81f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f824:	31 d2                	xor    edx,edx
c001f826:	83 c4 1c             	add    esp,0x1c
c001f829:	c3                   	ret    

c001f82a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f82a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f836:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f83a:	0f 92 c0             	setb   al
c001f83d:	c3                   	ret    

c001f83e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f83e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f84a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f84e:	09 c2                	or     edx,eax
c001f850:	0f 94 c0             	sete   al
c001f853:	c3                   	ret    

c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f854:	57                   	push   edi
c001f855:	56                   	push   esi
c001f856:	53                   	push   ebx
c001f857:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f85b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f85f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f863:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f867:	57                   	push   edi
c001f868:	56                   	push   esi
c001f869:	53                   	push   ebx
c001f86a:	51                   	push   ecx
c001f86b:	e8 ce ff ff ff       	call   c001f83e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f870:	83 c4 10             	add    esp,0x10
c001f873:	88 c2                	mov    dl,al
c001f875:	31 c0                	xor    eax,eax
c001f877:	84 d2                	test   dl,dl
c001f879:	75 0c                	jne    c001f887 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f87b:	57                   	push   edi
c001f87c:	56                   	push   esi
c001f87d:	53                   	push   ebx
c001f87e:	51                   	push   ecx
c001f87f:	e8 a6 ff ff ff       	call   c001f82a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f884:	83 c4 10             	add    esp,0x10
c001f887:	83 e0 01             	and    eax,0x1
c001f88a:	5b                   	pop    ebx
c001f88b:	88 c1                	mov    cl,al
c001f88d:	83 e2 01             	and    edx,0x1
c001f890:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f895:	c1 e2 06             	shl    edx,0x6
c001f898:	83 e0 ba             	and    eax,0xffffffba
c001f89b:	5e                   	pop    esi
c001f89c:	09 c8                	or     eax,ecx
c001f89e:	5f                   	pop    edi
c001f89f:	09 d0                	or     eax,edx
c001f8a1:	a2 c1 19 03 c0       	mov    ds:0xc00319c1,al
c001f8a6:	c3                   	ret    

c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8af:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8b3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8b7:	c3                   	ret    

c001f8b8 <Vm::fpuAbs(unsigned long long)>:
c001f8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8c0:	c3                   	ret    

c001f8c1 <Vm::fpuChs(unsigned long long)>:
c001f8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8c9:	f7 d8                	neg    eax
c001f8cb:	83 d2 00             	adc    edx,0x0
c001f8ce:	f7 da                	neg    edx
c001f8d0:	c3                   	ret    

c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8d1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8d5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8da:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8de:	eb c7                	jmp    c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8e0:	53                   	push   ebx
c001f8e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8f1:	0f af ca             	imul   ecx,edx
c001f8f4:	0f af d8             	imul   ebx,eax
c001f8f7:	f7 e2                	mul    edx
c001f8f9:	01 d9                	add    ecx,ebx
c001f8fb:	5b                   	pop    ebx
c001f8fc:	01 ca                	add    edx,ecx
c001f8fe:	c3                   	ret    

c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8ff:	83 ec 0c             	sub    esp,0xc
c001f902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f912:	e8 a5 70 00 00       	call   c00269bc <__udivdi3>
c001f917:	83 c4 1c             	add    esp,0x1c
c001f91a:	c3                   	ret    

c001f91b <Vm::fpuSquare(unsigned long long)>:
c001f91b:	50                   	push   eax
c001f91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f924:	52                   	push   edx
c001f925:	50                   	push   eax
c001f926:	52                   	push   edx
c001f927:	50                   	push   eax
c001f928:	e8 b3 ff ff ff       	call   c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f92d:	83 c4 14             	add    esp,0x14
c001f930:	c3                   	ret    

c001f931 <Vm::fpuGetReg(int)>:
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f939:	76 10                	jbe    c001f94b <Vm::fpuGetReg(int)+0x1a>
c001f93b:	83 ec 0c             	sub    esp,0xc
c001f93e:	68 46 c7 02 c0       	push   0xc002c746
c001f943:	e8 b7 ac ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f948:	83 c4 10             	add    esp,0x10
c001f94b:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f950:	b9 08 00 00 00       	mov    ecx,0x8
c001f955:	c0 e8 03             	shr    al,0x3
c001f958:	83 e0 07             	and    eax,0x7
c001f95b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f95f:	99                   	cdq    
c001f960:	f7 f9                	idiv   ecx
c001f962:	8b 04 d5 c4 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce63c]
c001f969:	8b 14 d5 c8 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce638]
c001f970:	83 c4 0c             	add    esp,0xc
c001f973:	c3                   	ret    

c001f974 <Vm::fpuSetReg(int, unsigned long long)>:
c001f974:	57                   	push   edi
c001f975:	56                   	push   esi
c001f976:	52                   	push   edx
c001f977:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f97b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f97f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f984:	76 10                	jbe    c001f996 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f986:	83 ec 0c             	sub    esp,0xc
c001f989:	68 59 c7 02 c0       	push   0xc002c759
c001f98e:	e8 6c ac ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c001f993:	83 c4 10             	add    esp,0x10
c001f996:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f99b:	b9 08 00 00 00       	mov    ecx,0x8
c001f9a0:	c0 e8 03             	shr    al,0x3
c001f9a3:	83 e0 07             	and    eax,0x7
c001f9a6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9aa:	99                   	cdq    
c001f9ab:	f7 f9                	idiv   ecx
c001f9ad:	89 34 d5 c4 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce63c],esi
c001f9b4:	89 3c d5 c8 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce638],edi
c001f9bb:	58                   	pop    eax
c001f9bc:	5e                   	pop    esi
c001f9bd:	5f                   	pop    edi
c001f9be:	c3                   	ret    

c001f9bf <Vm::fpuPush(unsigned long long)>:
c001f9bf:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f9c4:	c0 e8 03             	shr    al,0x3
c001f9c7:	83 e0 07             	and    eax,0x7
c001f9ca:	83 c0 07             	add    eax,0x7
c001f9cd:	88 c2                	mov    dl,al
c001f9cf:	83 e0 07             	and    eax,0x7
c001f9d2:	83 e2 07             	and    edx,0x7
c001f9d5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9dc:	8a 15 c1 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319c1
c001f9e2:	83 e2 c7             	and    edx,0xffffffc7
c001f9e5:	09 ca                	or     edx,ecx
c001f9e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9eb:	88 15 c1 19 03 c0    	mov    BYTE PTR ds:0xc00319c1,dl
c001f9f1:	89 0c c5 c8 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce638],ecx
c001f9f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9fc:	89 14 c5 c4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce63c],edx
c001fa03:	a1 04 1a 03 c0       	mov    eax,ds:0xc0031a04
c001fa08:	83 f8 08             	cmp    eax,0x8
c001fa0b:	75 08                	jne    c001fa15 <Vm::fpuPush(unsigned long long)+0x56>
c001fa0d:	80 0d c0 19 03 c0 40 	or     BYTE PTR ds:0xc00319c0,0x40
c001fa14:	c3                   	ret    
c001fa15:	40                   	inc    eax
c001fa16:	a3 04 1a 03 c0       	mov    ds:0xc0031a04,eax
c001fa1b:	c3                   	ret    

c001fa1c <Vm::fpuPop()>:
c001fa1c:	8a 0d c1 19 03 c0    	mov    cl,BYTE PTR ds:0xc00319c1
c001fa22:	53                   	push   ebx
c001fa23:	c0 e9 03             	shr    cl,0x3
c001fa26:	8a 1d c1 19 03 c0    	mov    bl,BYTE PTR ds:0xc00319c1
c001fa2c:	83 e1 07             	and    ecx,0x7
c001fa2f:	83 e3 c7             	and    ebx,0xffffffc7
c001fa32:	8b 04 cd c4 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce63c]
c001fa39:	8b 14 cd c8 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce638]
c001fa40:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa47:	83 e1 38             	and    ecx,0x38
c001fa4a:	09 d9                	or     ecx,ebx
c001fa4c:	88 0d c1 19 03 c0    	mov    BYTE PTR ds:0xc00319c1,cl
c001fa52:	8b 0d 04 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a04
c001fa58:	85 c9                	test   ecx,ecx
c001fa5a:	74 09                	je     c001fa65 <Vm::fpuPop()+0x49>
c001fa5c:	49                   	dec    ecx
c001fa5d:	89 0d 04 1a 03 c0    	mov    DWORD PTR ds:0xc0031a04,ecx
c001fa63:	eb 07                	jmp    c001fa6c <Vm::fpuPop()+0x50>
c001fa65:	80 0d c0 19 03 c0 40 	or     BYTE PTR ds:0xc00319c0,0x40
c001fa6c:	5b                   	pop    ebx
c001fa6d:	c3                   	ret    

c001fa6e <Vm::x87Handler(regs*)>:
c001fa6e:	55                   	push   ebp
c001fa6f:	57                   	push   edi
c001fa70:	56                   	push   esi
c001fa71:	53                   	push   ebx
c001fa72:	83 ec 1c             	sub    esp,0x1c
c001fa75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa79:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa7e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa81:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa89:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa8d:	50                   	push   eax
c001fa8e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa92:	50                   	push   eax
c001fa93:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa97:	50                   	push   eax
c001fa98:	53                   	push   ebx
c001fa99:	e8 28 a2 ff ff       	call   c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa9e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001faa1:	83 c4 10             	add    esp,0x10
c001faa4:	89 c6                	mov    esi,eax
c001faa6:	80 fa d9             	cmp    dl,0xd9
c001faa9:	0f 85 52 01 00 00    	jne    c001fc01 <Vm::x87Handler(regs*)+0x193>
c001faaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fab3:	8d 50 20             	lea    edx,[eax+0x20]
c001fab6:	80 fa 0e             	cmp    dl,0xe
c001fab9:	0f 87 86 00 00 00    	ja     c001fb45 <Vm::x87Handler(regs*)+0xd7>
c001fabf:	0f b6 d2             	movzx  edx,dl
c001fac2:	ff 24 95 6c c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3894]
c001fac9:	e8 e7 fc ff ff       	call   c001f7b5 <Vm::fpuGet0()>
c001face:	eb 05                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fad0:	e8 e5 fc ff ff       	call   c001f7ba <Vm::fpuGet1()>
c001fad5:	57                   	push   edi
c001fad6:	57                   	push   edi
c001fad7:	52                   	push   edx
c001fad8:	50                   	push   eax
c001fad9:	e8 e1 fe ff ff       	call   c001f9bf <Vm::fpuPush(unsigned long long)>
c001fade:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fae2:	83 c4 10             	add    esp,0x10
c001fae5:	b0 01                	mov    al,0x1
c001fae7:	e9 e3 09 00 00       	jmp    c00204cf <Vm::x87Handler(regs*)+0xa61>
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	6a 00                	push   0x0
c001faf1:	e8 3b fe ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001faf6:	59                   	pop    ecx
c001faf7:	5e                   	pop    esi
c001faf8:	52                   	push   edx
c001faf9:	50                   	push   eax
c001fafa:	e8 c2 fd ff ff       	call   c001f8c1 <Vm::fpuChs(unsigned long long)>
c001faff:	eb 13                	jmp    c001fb14 <Vm::x87Handler(regs*)+0xa6>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	6a 00                	push   0x0
c001fb06:	e8 26 fe ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fb0b:	5f                   	pop    edi
c001fb0c:	5d                   	pop    ebp
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	e8 a4 fd ff ff       	call   c001f8b8 <Vm::fpuAbs(unsigned long long)>
c001fb14:	83 c4 0c             	add    esp,0xc
c001fb17:	52                   	push   edx
c001fb18:	50                   	push   eax
c001fb19:	6a 00                	push   0x0
c001fb1b:	e8 54 fe ff ff       	call   c001f974 <Vm::fpuSetReg(int, unsigned long long)>
c001fb20:	eb bc                	jmp    c001fade <Vm::x87Handler(regs*)+0x70>
c001fb22:	e8 d3 fc ff ff       	call   c001f7fa <Vm::fpuGetLog210()>
c001fb27:	eb ac                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fb29:	e8 9c fc ff ff       	call   c001f7ca <Vm::fpuGetLog2E()>
c001fb2e:	eb a5                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fb30:	e8 8d fc ff ff       	call   c001f7c2 <Vm::fpuGetPi()>
c001fb35:	eb 9e                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fb37:	e8 d6 fc ff ff       	call   c001f812 <Vm::fpuGetLog102()>
c001fb3c:	eb 97                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fb3e:	e8 9f fc ff ff       	call   c001f7e2 <Vm::fpuGetLogE2()>
c001fb43:	eb 90                	jmp    c001fad5 <Vm::x87Handler(regs*)+0x67>
c001fb45:	8d 50 40             	lea    edx,[eax+0x40]
c001fb48:	80 fa 07             	cmp    dl,0x7
c001fb4b:	77 15                	ja     c001fb62 <Vm::x87Handler(regs*)+0xf4>
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	2d c0 00 00 00       	sub    eax,0xc0
c001fb55:	50                   	push   eax
c001fb56:	e8 d6 fd ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fb5b:	59                   	pop    ecx
c001fb5c:	5e                   	pop    esi
c001fb5d:	e9 75 ff ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0x69>
c001fb62:	8d 50 38             	lea    edx,[eax+0x38]
c001fb65:	80 fa 07             	cmp    dl,0x7
c001fb68:	77 3c                	ja     c001fba6 <Vm::x87Handler(regs*)+0x138>
c001fb6a:	83 ec 0c             	sub    esp,0xc
c001fb6d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb72:	50                   	push   eax
c001fb73:	e8 b9 fd ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fb78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7f:	89 c6                	mov    esi,eax
c001fb81:	89 d7                	mov    edi,edx
c001fb83:	e8 a9 fd ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fb88:	83 c4 0c             	add    esp,0xc
c001fb8b:	52                   	push   edx
c001fb8c:	50                   	push   eax
c001fb8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb91:	2d c8 00 00 00       	sub    eax,0xc8
c001fb96:	50                   	push   eax
c001fb97:	e8 d8 fd ff ff       	call   c001f974 <Vm::fpuSetReg(int, unsigned long long)>
c001fb9c:	83 c4 0c             	add    esp,0xc
c001fb9f:	57                   	push   edi
c001fba0:	56                   	push   esi
c001fba1:	e9 73 ff ff ff       	jmp    c001fb19 <Vm::x87Handler(regs*)+0xab>
c001fba6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbaa:	84 d2                	test   dl,dl
c001fbac:	75 0f                	jne    c001fbbd <Vm::x87Handler(regs*)+0x14f>
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	ff 36                	push   DWORD PTR [esi]
c001fbb3:	e8 c8 fa ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c001fbb8:	e9 bf 00 00 00       	jmp    c001fc7c <Vm::x87Handler(regs*)+0x20e>
c001fbbd:	80 fa 03             	cmp    dl,0x3
c001fbc0:	75 13                	jne    c001fbd5 <Vm::x87Handler(regs*)+0x167>
c001fbc2:	e8 55 fe ff ff       	call   c001fa1c <Vm::fpuPop()>
c001fbc7:	55                   	push   ebp
c001fbc8:	55                   	push   ebp
c001fbc9:	52                   	push   edx
c001fbca:	50                   	push   eax
c001fbcb:	e8 4c fa ff ff       	call   c001f61c <Vm::fpuInternalTo32(unsigned long long)>
c001fbd0:	e9 88 00 00 00       	jmp    c001fc5d <Vm::x87Handler(regs*)+0x1ef>
c001fbd5:	80 fa 05             	cmp    dl,0x5
c001fbd8:	75 0e                	jne    c001fbe8 <Vm::x87Handler(regs*)+0x17a>
c001fbda:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbdd:	66 a3 c2 19 03 c0    	mov    ds:0xc00319c2,ax
c001fbe3:	e9 df 00 00 00       	jmp    c001fcc7 <Vm::x87Handler(regs*)+0x259>
c001fbe8:	31 c0                	xor    eax,eax
c001fbea:	80 fa 07             	cmp    dl,0x7
c001fbed:	0f 85 dc 08 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c001fbf3:	66 a1 c2 19 03 c0    	mov    ax,ds:0xc00319c2
c001fbf9:	66 89 06             	mov    WORD PTR [esi],ax
c001fbfc:	e9 c6 00 00 00       	jmp    c001fcc7 <Vm::x87Handler(regs*)+0x259>
c001fc01:	80 fa d8             	cmp    dl,0xd8
c001fc04:	0f 84 c9 00 00 00    	je     c001fcd3 <Vm::x87Handler(regs*)+0x265>
c001fc0a:	80 fa dc             	cmp    dl,0xdc
c001fc0d:	0f 84 0d 02 00 00    	je     c001fe20 <Vm::x87Handler(regs*)+0x3b2>
c001fc13:	80 fa de             	cmp    dl,0xde
c001fc16:	0f 84 cd 02 00 00    	je     c001fee9 <Vm::x87Handler(regs*)+0x47b>
c001fc1c:	80 fa dd             	cmp    dl,0xdd
c001fc1f:	0f 84 5f 04 00 00    	je     c0020084 <Vm::x87Handler(regs*)+0x616>
c001fc25:	80 fa da             	cmp    dl,0xda
c001fc28:	0f 84 24 05 00 00    	je     c0020152 <Vm::x87Handler(regs*)+0x6e4>
c001fc2e:	80 fa df             	cmp    dl,0xdf
c001fc31:	0f 84 68 05 00 00    	je     c002019f <Vm::x87Handler(regs*)+0x731>
c001fc37:	31 c0                	xor    eax,eax
c001fc39:	80 fa db             	cmp    dl,0xdb
c001fc3c:	0f 85 8d 08 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c001fc42:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc46:	80 fa 03             	cmp    dl,0x3
c001fc49:	0f 85 70 06 00 00    	jne    c00202bf <Vm::x87Handler(regs*)+0x851>
c001fc4f:	e8 c8 fd ff ff       	call   c001fa1c <Vm::fpuPop()>
c001fc54:	55                   	push   ebp
c001fc55:	55                   	push   ebp
c001fc56:	52                   	push   edx
c001fc57:	50                   	push   eax
c001fc58:	e8 71 fa ff ff       	call   c001f6ce <Vm::fpuFloatToLong(unsigned long long)>
c001fc5d:	83 c4 10             	add    esp,0x10
c001fc60:	89 06                	mov    DWORD PTR [esi],eax
c001fc62:	eb 63                	jmp    c001fcc7 <Vm::x87Handler(regs*)+0x259>
c001fc64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc68:	84 d2                	test   dl,dl
c001fc6a:	0f 85 e6 05 00 00    	jne    c0020256 <Vm::x87Handler(regs*)+0x7e8>
c001fc70:	57                   	push   edi
c001fc71:	57                   	push   edi
c001fc72:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc75:	ff 36                	push   DWORD PTR [esi]
c001fc77:	e8 49 fa ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c001fc7c:	5e                   	pop    esi
c001fc7d:	5f                   	pop    edi
c001fc7e:	52                   	push   edx
c001fc7f:	50                   	push   eax
c001fc80:	e8 3a fd ff ff       	call   c001f9bf <Vm::fpuPush(unsigned long long)>
c001fc85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc89:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc8c:	e9 51 fe ff ff       	jmp    c001fae2 <Vm::x87Handler(regs*)+0x74>
c001fc91:	80 fa 03             	cmp    dl,0x3
c001fc94:	0f 85 d7 06 00 00    	jne    c0020371 <Vm::x87Handler(regs*)+0x903>
c001fc9a:	57                   	push   edi
c001fc9b:	57                   	push   edi
c001fc9c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc9f:	ff 36                	push   DWORD PTR [esi]
c001fca1:	e8 1f fa ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c001fca6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcad:	89 c6                	mov    esi,eax
c001fcaf:	89 d7                	mov    edi,edx
c001fcb1:	e8 7b fc ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fcb6:	57                   	push   edi
c001fcb7:	56                   	push   esi
c001fcb8:	52                   	push   edx
c001fcb9:	50                   	push   eax
c001fcba:	e8 95 fb ff ff       	call   c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcbf:	83 c4 20             	add    esp,0x20
c001fcc2:	e8 55 fd ff ff       	call   c001fa1c <Vm::fpuPop()>
c001fcc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fccb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcce:	e9 12 fe ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0x77>
c001fcd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcd7:	8d 50 40             	lea    edx,[eax+0x40]
c001fcda:	80 fa 07             	cmp    dl,0x7
c001fcdd:	77 29                	ja     c001fd08 <Vm::x87Handler(regs*)+0x29a>
c001fcdf:	83 ec 0c             	sub    esp,0xc
c001fce2:	2d c0 00 00 00       	sub    eax,0xc0
c001fce7:	50                   	push   eax
c001fce8:	e8 44 fc ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fced:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf4:	89 c6                	mov    esi,eax
c001fcf6:	89 d7                	mov    edi,edx
c001fcf8:	e8 34 fc ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fcfd:	57                   	push   edi
c001fcfe:	56                   	push   esi
c001fcff:	52                   	push   edx
c001fd00:	50                   	push   eax
c001fd01:	e8 a1 fb ff ff       	call   c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd06:	eb 2f                	jmp    c001fd37 <Vm::x87Handler(regs*)+0x2c9>
c001fd08:	8d 50 38             	lea    edx,[eax+0x38]
c001fd0b:	80 fa 07             	cmp    dl,0x7
c001fd0e:	77 2f                	ja     c001fd3f <Vm::x87Handler(regs*)+0x2d1>
c001fd10:	83 ec 0c             	sub    esp,0xc
c001fd13:	2d c8 00 00 00       	sub    eax,0xc8
c001fd18:	50                   	push   eax
c001fd19:	e8 13 fc ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fd1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd25:	89 c6                	mov    esi,eax
c001fd27:	89 d7                	mov    edi,edx
c001fd29:	e8 03 fc ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fd2e:	57                   	push   edi
c001fd2f:	56                   	push   esi
c001fd30:	52                   	push   edx
c001fd31:	50                   	push   eax
c001fd32:	e8 a9 fb ff ff       	call   c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd37:	83 c4 1c             	add    esp,0x1c
c001fd3a:	e9 d8 fd ff ff       	jmp    c001fb17 <Vm::x87Handler(regs*)+0xa9>
c001fd3f:	8d 50 30             	lea    edx,[eax+0x30]
c001fd42:	80 fa 07             	cmp    dl,0x7
c001fd45:	77 0d                	ja     c001fd54 <Vm::x87Handler(regs*)+0x2e6>
c001fd47:	83 ec 0c             	sub    esp,0xc
c001fd4a:	2d d0 00 00 00       	sub    eax,0xd0
c001fd4f:	e9 99 03 00 00       	jmp    c00200ed <Vm::x87Handler(regs*)+0x67f>
c001fd54:	8d 50 28             	lea    edx,[eax+0x28]
c001fd57:	80 fa 07             	cmp    dl,0x7
c001fd5a:	77 0d                	ja     c001fd69 <Vm::x87Handler(regs*)+0x2fb>
c001fd5c:	83 ec 0c             	sub    esp,0xc
c001fd5f:	2d d8 00 00 00       	sub    eax,0xd8
c001fd64:	e9 c0 03 00 00       	jmp    c0020129 <Vm::x87Handler(regs*)+0x6bb>
c001fd69:	8d 50 20             	lea    edx,[eax+0x20]
c001fd6c:	80 fa 07             	cmp    dl,0x7
c001fd6f:	77 1b                	ja     c001fd8c <Vm::x87Handler(regs*)+0x31e>
c001fd71:	83 ec 0c             	sub    esp,0xc
c001fd74:	2d e0 00 00 00       	sub    eax,0xe0
c001fd79:	50                   	push   eax
c001fd7a:	e8 b2 fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fd7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd86:	89 c6                	mov    esi,eax
c001fd88:	89 d7                	mov    edi,edx
c001fd8a:	eb 22                	jmp    c001fdae <Vm::x87Handler(regs*)+0x340>
c001fd8c:	8d 50 18             	lea    edx,[eax+0x18]
c001fd8f:	80 fa 07             	cmp    dl,0x7
c001fd92:	77 2d                	ja     c001fdc1 <Vm::x87Handler(regs*)+0x353>
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	6a 00                	push   0x0
c001fd99:	e8 93 fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fd9e:	89 c6                	mov    esi,eax
c001fda0:	89 d7                	mov    edi,edx
c001fda2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda6:	2d e8 00 00 00       	sub    eax,0xe8
c001fdab:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdae:	e8 7e fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fdb3:	57                   	push   edi
c001fdb4:	56                   	push   esi
c001fdb5:	52                   	push   edx
c001fdb6:	50                   	push   eax
c001fdb7:	e8 15 fb ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdbc:	e9 76 ff ff ff       	jmp    c001fd37 <Vm::x87Handler(regs*)+0x2c9>
c001fdc1:	8d 50 10             	lea    edx,[eax+0x10]
c001fdc4:	80 fa 07             	cmp    dl,0x7
c001fdc7:	77 1b                	ja     c001fde4 <Vm::x87Handler(regs*)+0x376>
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	2d f0 00 00 00       	sub    eax,0xf0
c001fdd1:	50                   	push   eax
c001fdd2:	e8 5a fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fdd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdde:	89 c6                	mov    esi,eax
c001fde0:	89 d7                	mov    edi,edx
c001fde2:	eb 22                	jmp    c001fe06 <Vm::x87Handler(regs*)+0x398>
c001fde4:	3c f7                	cmp    al,0xf7
c001fde6:	0f 86 d1 03 00 00    	jbe    c00201bd <Vm::x87Handler(regs*)+0x74f>
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	6a 00                	push   0x0
c001fdf1:	e8 3b fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fdf6:	89 c6                	mov    esi,eax
c001fdf8:	89 d7                	mov    edi,edx
c001fdfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfe:	2d f8 00 00 00       	sub    eax,0xf8
c001fe03:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe06:	e8 26 fb ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fe0b:	57                   	push   edi
c001fe0c:	56                   	push   esi
c001fe0d:	52                   	push   edx
c001fe0e:	50                   	push   eax
c001fe0f:	e8 eb fa ff ff       	call   c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe14:	83 c4 1c             	add    esp,0x1c
c001fe17:	52                   	push   edx
c001fe18:	50                   	push   eax
c001fe19:	6a 00                	push   0x0
c001fe1b:	e9 51 02 00 00       	jmp    c0020071 <Vm::x87Handler(regs*)+0x603>
c001fe20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe24:	8d 50 40             	lea    edx,[eax+0x40]
c001fe27:	80 fa 07             	cmp    dl,0x7
c001fe2a:	77 37                	ja     c001fe63 <Vm::x87Handler(regs*)+0x3f5>
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	2d c0 00 00 00       	sub    eax,0xc0
c001fe34:	50                   	push   eax
c001fe35:	e8 f7 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fe3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe41:	89 c6                	mov    esi,eax
c001fe43:	89 d7                	mov    edi,edx
c001fe45:	e8 e7 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fe4a:	57                   	push   edi
c001fe4b:	56                   	push   esi
c001fe4c:	52                   	push   edx
c001fe4d:	50                   	push   eax
c001fe4e:	e8 54 fa ff ff       	call   c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe53:	83 c4 1c             	add    esp,0x1c
c001fe56:	52                   	push   edx
c001fe57:	50                   	push   eax
c001fe58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe5c:	2d c0 00 00 00       	sub    eax,0xc0
c001fe61:	eb 3d                	jmp    c001fea0 <Vm::x87Handler(regs*)+0x432>
c001fe63:	8d 50 38             	lea    edx,[eax+0x38]
c001fe66:	80 fa 07             	cmp    dl,0x7
c001fe69:	77 3b                	ja     c001fea6 <Vm::x87Handler(regs*)+0x438>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	2d c8 00 00 00       	sub    eax,0xc8
c001fe73:	50                   	push   eax
c001fe74:	e8 b8 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fe79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe80:	89 c6                	mov    esi,eax
c001fe82:	89 d7                	mov    edi,edx
c001fe84:	e8 a8 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fe89:	57                   	push   edi
c001fe8a:	56                   	push   esi
c001fe8b:	52                   	push   edx
c001fe8c:	50                   	push   eax
c001fe8d:	e8 4e fa ff ff       	call   c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe92:	83 c4 1c             	add    esp,0x1c
c001fe95:	52                   	push   edx
c001fe96:	50                   	push   eax
c001fe97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9b:	2d c8 00 00 00       	sub    eax,0xc8
c001fea0:	50                   	push   eax
c001fea1:	e9 75 fc ff ff       	jmp    c001fb1b <Vm::x87Handler(regs*)+0xad>
c001fea6:	83 c0 18             	add    eax,0x18
c001fea9:	3c 07                	cmp    al,0x7
c001feab:	0f 87 3b 04 00 00    	ja     c00202ec <Vm::x87Handler(regs*)+0x87e>
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	6a 00                	push   0x0
c001feb6:	e8 76 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001febb:	89 c6                	mov    esi,eax
c001febd:	89 d7                	mov    edi,edx
c001febf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec3:	2d e8 00 00 00       	sub    eax,0xe8
c001fec8:	89 04 24             	mov    DWORD PTR [esp],eax
c001fecb:	e8 61 fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001fed0:	57                   	push   edi
c001fed1:	56                   	push   esi
c001fed2:	52                   	push   edx
c001fed3:	50                   	push   eax
c001fed4:	e8 f8 f9 ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed9:	83 c4 1c             	add    esp,0x1c
c001fedc:	52                   	push   edx
c001fedd:	50                   	push   eax
c001fede:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee2:	2d e8 00 00 00       	sub    eax,0xe8
c001fee7:	eb b7                	jmp    c001fea0 <Vm::x87Handler(regs*)+0x432>
c001fee9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feed:	8d 50 40             	lea    edx,[eax+0x40]
c001fef0:	80 fa 07             	cmp    dl,0x7
c001fef3:	77 3a                	ja     c001ff2f <Vm::x87Handler(regs*)+0x4c1>
c001fef5:	83 ec 0c             	sub    esp,0xc
c001fef8:	2d c0 00 00 00       	sub    eax,0xc0
c001fefd:	50                   	push   eax
c001fefe:	e8 2e fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff03:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff0a:	89 c6                	mov    esi,eax
c001ff0c:	89 d7                	mov    edi,edx
c001ff0e:	e8 1e fa ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff13:	57                   	push   edi
c001ff14:	56                   	push   esi
c001ff15:	52                   	push   edx
c001ff16:	50                   	push   eax
c001ff17:	e8 8b f9 ff ff       	call   c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff1c:	83 c4 1c             	add    esp,0x1c
c001ff1f:	52                   	push   edx
c001ff20:	50                   	push   eax
c001ff21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff25:	2d c0 00 00 00       	sub    eax,0xc0
c001ff2a:	e9 9e 01 00 00       	jmp    c00200cd <Vm::x87Handler(regs*)+0x65f>
c001ff2f:	8d 50 20             	lea    edx,[eax+0x20]
c001ff32:	80 fa 07             	cmp    dl,0x7
c001ff35:	77 3a                	ja     c001ff71 <Vm::x87Handler(regs*)+0x503>
c001ff37:	83 ec 0c             	sub    esp,0xc
c001ff3a:	2d e0 00 00 00       	sub    eax,0xe0
c001ff3f:	50                   	push   eax
c001ff40:	e8 ec f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff4c:	89 c6                	mov    esi,eax
c001ff4e:	89 d7                	mov    edi,edx
c001ff50:	e8 dc f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff55:	57                   	push   edi
c001ff56:	56                   	push   esi
c001ff57:	52                   	push   edx
c001ff58:	50                   	push   eax
c001ff59:	e8 73 f9 ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff5e:	83 c4 1c             	add    esp,0x1c
c001ff61:	52                   	push   edx
c001ff62:	50                   	push   eax
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	2d e0 00 00 00       	sub    eax,0xe0
c001ff6c:	e9 5c 01 00 00       	jmp    c00200cd <Vm::x87Handler(regs*)+0x65f>
c001ff71:	8d 50 18             	lea    edx,[eax+0x18]
c001ff74:	80 fa 07             	cmp    dl,0x7
c001ff77:	77 3b                	ja     c001ffb4 <Vm::x87Handler(regs*)+0x546>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	6a 00                	push   0x0
c001ff7e:	e8 ae f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff83:	89 c6                	mov    esi,eax
c001ff85:	89 d7                	mov    edi,edx
c001ff87:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff8b:	2d e8 00 00 00       	sub    eax,0xe8
c001ff90:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff93:	e8 99 f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ff98:	57                   	push   edi
c001ff99:	56                   	push   esi
c001ff9a:	52                   	push   edx
c001ff9b:	50                   	push   eax
c001ff9c:	e8 30 f9 ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa1:	83 c4 1c             	add    esp,0x1c
c001ffa4:	52                   	push   edx
c001ffa5:	50                   	push   eax
c001ffa6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffaa:	2d e8 00 00 00       	sub    eax,0xe8
c001ffaf:	e9 19 01 00 00       	jmp    c00200cd <Vm::x87Handler(regs*)+0x65f>
c001ffb4:	8d 50 38             	lea    edx,[eax+0x38]
c001ffb7:	80 fa 07             	cmp    dl,0x7
c001ffba:	77 37                	ja     c001fff3 <Vm::x87Handler(regs*)+0x585>
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	2d c8 00 00 00       	sub    eax,0xc8
c001ffc4:	50                   	push   eax
c001ffc5:	e8 67 f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ffca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd1:	89 c6                	mov    esi,eax
c001ffd3:	89 d7                	mov    edi,edx
c001ffd5:	e8 57 f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c001ffda:	57                   	push   edi
c001ffdb:	56                   	push   esi
c001ffdc:	52                   	push   edx
c001ffdd:	50                   	push   eax
c001ffde:	e8 fd f8 ff ff       	call   c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffe3:	83 c4 1c             	add    esp,0x1c
c001ffe6:	52                   	push   edx
c001ffe7:	50                   	push   eax
c001ffe8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffec:	2d c8 00 00 00       	sub    eax,0xc8
c001fff1:	eb 7d                	jmp    c0020070 <Vm::x87Handler(regs*)+0x602>
c001fff3:	3c f7                	cmp    al,0xf7
c001fff5:	76 38                	jbe    c002002f <Vm::x87Handler(regs*)+0x5c1>
c001fff7:	83 ec 0c             	sub    esp,0xc
c001fffa:	6a 00                	push   0x0
c001fffc:	e8 30 f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020001:	89 c6                	mov    esi,eax
c0020003:	89 d7                	mov    edi,edx
c0020005:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020009:	2d f8 00 00 00       	sub    eax,0xf8
c002000e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020011:	e8 1b f9 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020016:	57                   	push   edi
c0020017:	56                   	push   esi
c0020018:	52                   	push   edx
c0020019:	50                   	push   eax
c002001a:	e8 e0 f8 ff ff       	call   c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002001f:	83 c4 1c             	add    esp,0x1c
c0020022:	52                   	push   edx
c0020023:	50                   	push   eax
c0020024:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020028:	2d f8 00 00 00       	sub    eax,0xf8
c002002d:	eb 41                	jmp    c0020070 <Vm::x87Handler(regs*)+0x602>
c002002f:	8d 50 10             	lea    edx,[eax+0x10]
c0020032:	80 fa 07             	cmp    dl,0x7
c0020035:	0f 87 5a 01 00 00    	ja     c0020195 <Vm::x87Handler(regs*)+0x727>
c002003b:	83 ec 0c             	sub    esp,0xc
c002003e:	2d f0 00 00 00       	sub    eax,0xf0
c0020043:	50                   	push   eax
c0020044:	e8 e8 f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020049:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020050:	89 c6                	mov    esi,eax
c0020052:	89 d7                	mov    edi,edx
c0020054:	e8 d8 f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020059:	57                   	push   edi
c002005a:	56                   	push   esi
c002005b:	52                   	push   edx
c002005c:	50                   	push   eax
c002005d:	e8 9d f8 ff ff       	call   c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020062:	83 c4 1c             	add    esp,0x1c
c0020065:	52                   	push   edx
c0020066:	50                   	push   eax
c0020067:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006b:	2d f0 00 00 00       	sub    eax,0xf0
c0020070:	50                   	push   eax
c0020071:	e8 fe f8 ff ff       	call   c001f974 <Vm::fpuSetReg(int, unsigned long long)>
c0020076:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002007a:	e8 9d f9 ff ff       	call   c001fa1c <Vm::fpuPop()>
c002007f:	e9 5e fa ff ff       	jmp    c001fae2 <Vm::x87Handler(regs*)+0x74>
c0020084:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020088:	8d 50 30             	lea    edx,[eax+0x30]
c002008b:	80 fa 07             	cmp    dl,0x7
c002008e:	77 1d                	ja     c00200ad <Vm::x87Handler(regs*)+0x63f>
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	6a 00                	push   0x0
c0020095:	e8 97 f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c002009a:	83 c4 0c             	add    esp,0xc
c002009d:	52                   	push   edx
c002009e:	50                   	push   eax
c002009f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a3:	2d d0 00 00 00       	sub    eax,0xd0
c00200a8:	e9 f3 fd ff ff       	jmp    c001fea0 <Vm::x87Handler(regs*)+0x432>
c00200ad:	8d 50 28             	lea    edx,[eax+0x28]
c00200b0:	80 fa 07             	cmp    dl,0x7
c00200b3:	77 28                	ja     c00200dd <Vm::x87Handler(regs*)+0x66f>
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	6a 00                	push   0x0
c00200ba:	e8 72 f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00200bf:	83 c4 0c             	add    esp,0xc
c00200c2:	52                   	push   edx
c00200c3:	50                   	push   eax
c00200c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c8:	2d d8 00 00 00       	sub    eax,0xd8
c00200cd:	50                   	push   eax
c00200ce:	e8 a1 f8 ff ff       	call   c001f974 <Vm::fpuSetReg(int, unsigned long long)>
c00200d3:	e8 44 f9 ff ff       	call   c001fa1c <Vm::fpuPop()>
c00200d8:	e9 01 fa ff ff       	jmp    c001fade <Vm::x87Handler(regs*)+0x70>
c00200dd:	8d 50 20             	lea    edx,[eax+0x20]
c00200e0:	80 fa 07             	cmp    dl,0x7
c00200e3:	77 30                	ja     c0020115 <Vm::x87Handler(regs*)+0x6a7>
c00200e5:	83 ec 0c             	sub    esp,0xc
c00200e8:	2d e0 00 00 00       	sub    eax,0xe0
c00200ed:	50                   	push   eax
c00200ee:	e8 3e f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00200f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200fa:	89 c6                	mov    esi,eax
c00200fc:	89 d7                	mov    edi,edx
c00200fe:	e8 2e f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020103:	57                   	push   edi
c0020104:	56                   	push   esi
c0020105:	52                   	push   edx
c0020106:	50                   	push   eax
c0020107:	e8 48 f7 ff ff       	call   c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002010c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020110:	e9 54 02 00 00       	jmp    c0020369 <Vm::x87Handler(regs*)+0x8fb>
c0020115:	8d 50 18             	lea    edx,[eax+0x18]
c0020118:	80 fa 07             	cmp    dl,0x7
c002011b:	0f 87 43 fb ff ff    	ja     c001fc64 <Vm::x87Handler(regs*)+0x1f6>
c0020121:	83 ec 0c             	sub    esp,0xc
c0020124:	2d e8 00 00 00       	sub    eax,0xe8
c0020129:	50                   	push   eax
c002012a:	e8 02 f8 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c002012f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020136:	89 c6                	mov    esi,eax
c0020138:	89 d7                	mov    edi,edx
c002013a:	e8 f2 f7 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c002013f:	57                   	push   edi
c0020140:	56                   	push   esi
c0020141:	52                   	push   edx
c0020142:	50                   	push   eax
c0020143:	e8 0c f7 ff ff       	call   c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020148:	83 c4 20             	add    esp,0x20
c002014b:	e8 cc f8 ff ff       	call   c001fa1c <Vm::fpuPop()>
c0020150:	eb 62                	jmp    c00201b4 <Vm::x87Handler(regs*)+0x746>
c0020152:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020156:	0f 85 0f 01 00 00    	jne    c002026b <Vm::x87Handler(regs*)+0x7fd>
c002015c:	83 ec 0c             	sub    esp,0xc
c002015f:	6a 01                	push   0x1
c0020161:	e8 cb f7 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020166:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002016d:	89 c6                	mov    esi,eax
c002016f:	89 d7                	mov    edi,edx
c0020171:	e8 bb f7 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020176:	57                   	push   edi
c0020177:	56                   	push   esi
c0020178:	52                   	push   edx
c0020179:	50                   	push   eax
c002017a:	e8 d5 f6 ff ff       	call   c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002017f:	83 c4 20             	add    esp,0x20
c0020182:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020186:	e8 91 f8 ff ff       	call   c001fa1c <Vm::fpuPop()>
c002018b:	e8 8c f8 ff ff       	call   c001fa1c <Vm::fpuPop()>
c0020190:	e9 50 f9 ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0x77>
c0020195:	3c d9                	cmp    al,0xd9
c0020197:	0f 85 b5 02 00 00    	jne    c0020452 <Vm::x87Handler(regs*)+0x9e4>
c002019d:	eb bd                	jmp    c002015c <Vm::x87Handler(regs*)+0x6ee>
c002019f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201a3:	0f 85 ea 02 00 00    	jne    c0020493 <Vm::x87Handler(regs*)+0xa25>
c00201a9:	0f b7 05 c0 19 03 c0 	movzx  eax,WORD PTR ds:0xc00319c0
c00201b0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201b4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201b8:	e9 28 f9 ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0x77>
c00201bd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201c1:	84 d2                	test   dl,dl
c00201c3:	75 0f                	jne    c00201d4 <Vm::x87Handler(regs*)+0x766>
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	ff 36                	push   DWORD PTR [esi]
c00201ca:	e8 b1 f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c00201cf:	e9 2c 01 00 00       	jmp    c0020300 <Vm::x87Handler(regs*)+0x892>
c00201d4:	80 fa 01             	cmp    dl,0x1
c00201d7:	75 0f                	jne    c00201e8 <Vm::x87Handler(regs*)+0x77a>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	ff 36                	push   DWORD PTR [esi]
c00201de:	e8 9d f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c00201e3:	e9 81 02 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x9fb>
c00201e8:	80 fa 04             	cmp    dl,0x4
c00201eb:	75 0f                	jne    c00201fc <Vm::x87Handler(regs*)+0x78e>
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	ff 36                	push   DWORD PTR [esi]
c00201f2:	e8 89 f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c00201f7:	e9 86 01 00 00       	jmp    c0020382 <Vm::x87Handler(regs*)+0x914>
c00201fc:	80 fa 05             	cmp    dl,0x5
c00201ff:	75 1b                	jne    c002021c <Vm::x87Handler(regs*)+0x7ae>
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	6a 00                	push   0x0
c0020206:	e8 26 f7 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c002020b:	89 c7                	mov    edi,eax
c002020d:	89 d5                	mov    ebp,edx
c002020f:	58                   	pop    eax
c0020210:	ff 36                	push   DWORD PTR [esi]
c0020212:	e8 69 f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c0020217:	e9 a3 01 00 00       	jmp    c00203bf <Vm::x87Handler(regs*)+0x951>
c002021c:	80 fa 06             	cmp    dl,0x6
c002021f:	75 0f                	jne    c0020230 <Vm::x87Handler(regs*)+0x7c2>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	ff 36                	push   DWORD PTR [esi]
c0020226:	e8 55 f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c002022b:	e9 ae 01 00 00       	jmp    c00203de <Vm::x87Handler(regs*)+0x970>
c0020230:	31 c0                	xor    eax,eax
c0020232:	80 fa 07             	cmp    dl,0x7
c0020235:	0f 85 94 02 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	6a 00                	push   0x0
c0020240:	e8 ec f6 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020245:	89 c7                	mov    edi,eax
c0020247:	89 d5                	mov    ebp,edx
c0020249:	58                   	pop    eax
c002024a:	ff 36                	push   DWORD PTR [esi]
c002024c:	e8 2f f4 ff ff       	call   c001f680 <Vm::fpu32ToInternal(unsigned int)>
c0020251:	e9 cb 01 00 00       	jmp    c0020421 <Vm::x87Handler(regs*)+0x9b3>
c0020256:	80 fa 03             	cmp    dl,0x3
c0020259:	0f 85 d3 01 00 00    	jne    c0020432 <Vm::x87Handler(regs*)+0x9c4>
c002025f:	e8 b8 f7 ff ff       	call   c001fa1c <Vm::fpuPop()>
c0020264:	51                   	push   ecx
c0020265:	51                   	push   ecx
c0020266:	e9 de 01 00 00       	jmp    c0020449 <Vm::x87Handler(regs*)+0x9db>
c002026b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002026f:	80 fa 01             	cmp    dl,0x1
c0020272:	75 09                	jne    c002027d <Vm::x87Handler(regs*)+0x80f>
c0020274:	57                   	push   edi
c0020275:	57                   	push   edi
c0020276:	8b 06                	mov    eax,DWORD PTR [esi]
c0020278:	e9 e3 01 00 00       	jmp    c0020460 <Vm::x87Handler(regs*)+0x9f2>
c002027d:	80 fa 04             	cmp    dl,0x4
c0020280:	75 12                	jne    c0020294 <Vm::x87Handler(regs*)+0x826>
c0020282:	31 d2                	xor    edx,edx
c0020284:	51                   	push   ecx
c0020285:	51                   	push   ecx
c0020286:	8b 06                	mov    eax,DWORD PTR [esi]
c0020288:	52                   	push   edx
c0020289:	50                   	push   eax
c002028a:	e8 d0 f4 ff ff       	call   c001f75f <Vm::fpuLongToFloat(long long)>
c002028f:	e9 ee 00 00 00       	jmp    c0020382 <Vm::x87Handler(regs*)+0x914>
c0020294:	31 c0                	xor    eax,eax
c0020296:	80 fa 07             	cmp    dl,0x7
c0020299:	0f 85 30 02 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c002029f:	83 ec 0c             	sub    esp,0xc
c00202a2:	6a 00                	push   0x0
c00202a4:	e8 88 f6 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00202a9:	89 c7                	mov    edi,eax
c00202ab:	89 d5                	mov    ebp,edx
c00202ad:	58                   	pop    eax
c00202ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00202b0:	5a                   	pop    edx
c00202b1:	31 d2                	xor    edx,edx
c00202b3:	52                   	push   edx
c00202b4:	50                   	push   eax
c00202b5:	e8 a5 f4 ff ff       	call   c001f75f <Vm::fpuLongToFloat(long long)>
c00202ba:	e9 62 01 00 00       	jmp    c0020421 <Vm::x87Handler(regs*)+0x9b3>
c00202bf:	84 d2                	test   dl,dl
c00202c1:	75 0d                	jne    c00202d0 <Vm::x87Handler(regs*)+0x862>
c00202c3:	31 d2                	xor    edx,edx
c00202c5:	55                   	push   ebp
c00202c6:	55                   	push   ebp
c00202c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c9:	52                   	push   edx
c00202ca:	50                   	push   eax
c00202cb:	e9 d3 01 00 00       	jmp    c00204a3 <Vm::x87Handler(regs*)+0xa35>
c00202d0:	31 c0                	xor    eax,eax
c00202d2:	80 fa 02             	cmp    dl,0x2
c00202d5:	0f 85 f4 01 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c00202db:	83 ec 0c             	sub    esp,0xc
c00202de:	6a 00                	push   0x0
c00202e0:	e8 4c f6 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00202e5:	59                   	pop    ecx
c00202e6:	5f                   	pop    edi
c00202e7:	e9 6a f9 ff ff       	jmp    c001fc56 <Vm::x87Handler(regs*)+0x1e8>
c00202ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202f0:	84 d2                	test   dl,dl
c00202f2:	75 2a                	jne    c002031e <Vm::x87Handler(regs*)+0x8b0>
c00202f4:	50                   	push   eax
c00202f5:	50                   	push   eax
c00202f6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f9:	ff 36                	push   DWORD PTR [esi]
c00202fb:	e8 c5 f3 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020300:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020307:	89 c6                	mov    esi,eax
c0020309:	89 d7                	mov    edi,edx
c002030b:	e8 21 f6 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020310:	57                   	push   edi
c0020311:	56                   	push   esi
c0020312:	52                   	push   edx
c0020313:	50                   	push   eax
c0020314:	e8 8e f5 ff ff       	call   c001f8a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020319:	e9 64 01 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0xa14>
c002031e:	80 fa 01             	cmp    dl,0x1
c0020321:	75 11                	jne    c0020334 <Vm::x87Handler(regs*)+0x8c6>
c0020323:	50                   	push   eax
c0020324:	50                   	push   eax
c0020325:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020328:	ff 36                	push   DWORD PTR [esi]
c002032a:	e8 96 f3 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c002032f:	e9 35 01 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x9fb>
c0020334:	80 fa 02             	cmp    dl,0x2
c0020337:	0f 85 54 f9 ff ff    	jne    c001fc91 <Vm::x87Handler(regs*)+0x223>
c002033d:	55                   	push   ebp
c002033e:	55                   	push   ebp
c002033f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020342:	ff 36                	push   DWORD PTR [esi]
c0020344:	e8 7c f3 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020349:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020350:	89 c6                	mov    esi,eax
c0020352:	89 d7                	mov    edi,edx
c0020354:	e8 d8 f5 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020359:	57                   	push   edi
c002035a:	56                   	push   esi
c002035b:	52                   	push   edx
c002035c:	50                   	push   eax
c002035d:	e8 f2 f4 ff ff       	call   c001f854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020362:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020366:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020369:	83 c4 20             	add    esp,0x20
c002036c:	e9 74 f7 ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0x77>
c0020371:	80 fa 04             	cmp    dl,0x4
c0020374:	75 2a                	jne    c00203a0 <Vm::x87Handler(regs*)+0x932>
c0020376:	51                   	push   ecx
c0020377:	51                   	push   ecx
c0020378:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002037b:	ff 36                	push   DWORD PTR [esi]
c002037d:	e8 43 f3 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020382:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020389:	89 c6                	mov    esi,eax
c002038b:	89 d7                	mov    edi,edx
c002038d:	e8 9f f5 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020392:	57                   	push   edi
c0020393:	56                   	push   esi
c0020394:	52                   	push   edx
c0020395:	50                   	push   eax
c0020396:	e8 36 f5 ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002039b:	e9 e2 00 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0xa14>
c00203a0:	80 fa 05             	cmp    dl,0x5
c00203a3:	75 28                	jne    c00203cd <Vm::x87Handler(regs*)+0x95f>
c00203a5:	83 ec 0c             	sub    esp,0xc
c00203a8:	6a 00                	push   0x0
c00203aa:	e8 82 f5 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00203af:	89 c7                	mov    edi,eax
c00203b1:	89 d5                	mov    ebp,edx
c00203b3:	58                   	pop    eax
c00203b4:	5a                   	pop    edx
c00203b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b8:	ff 36                	push   DWORD PTR [esi]
c00203ba:	e8 06 f3 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	55                   	push   ebp
c00203c3:	57                   	push   edi
c00203c4:	52                   	push   edx
c00203c5:	50                   	push   eax
c00203c6:	e8 06 f5 ff ff       	call   c001f8d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203cb:	eb 60                	jmp    c002042d <Vm::x87Handler(regs*)+0x9bf>
c00203cd:	80 fa 06             	cmp    dl,0x6
c00203d0:	75 2a                	jne    c00203fc <Vm::x87Handler(regs*)+0x98e>
c00203d2:	51                   	push   ecx
c00203d3:	51                   	push   ecx
c00203d4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d7:	ff 36                	push   DWORD PTR [esi]
c00203d9:	e8 e7 f2 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c00203de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e5:	89 c6                	mov    esi,eax
c00203e7:	89 d7                	mov    edi,edx
c00203e9:	e8 43 f5 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c00203ee:	57                   	push   edi
c00203ef:	56                   	push   esi
c00203f0:	52                   	push   edx
c00203f1:	50                   	push   eax
c00203f2:	e8 08 f5 ff ff       	call   c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203f7:	e9 86 00 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0xa14>
c00203fc:	31 c0                	xor    eax,eax
c00203fe:	80 fa 07             	cmp    dl,0x7
c0020401:	0f 85 c8 00 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c0020407:	83 ec 0c             	sub    esp,0xc
c002040a:	6a 00                	push   0x0
c002040c:	e8 20 f5 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020411:	89 c7                	mov    edi,eax
c0020413:	89 d5                	mov    ebp,edx
c0020415:	58                   	pop    eax
c0020416:	5a                   	pop    edx
c0020417:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002041a:	ff 36                	push   DWORD PTR [esi]
c002041c:	e8 a4 f2 ff ff       	call   c001f6c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020421:	83 c4 10             	add    esp,0x10
c0020424:	55                   	push   ebp
c0020425:	57                   	push   edi
c0020426:	52                   	push   edx
c0020427:	50                   	push   eax
c0020428:	e8 d2 f4 ff ff       	call   c001f8ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002042d:	83 c4 0c             	add    esp,0xc
c0020430:	eb 53                	jmp    c0020485 <Vm::x87Handler(regs*)+0xa17>
c0020432:	31 c0                	xor    eax,eax
c0020434:	80 fa 02             	cmp    dl,0x2
c0020437:	0f 85 92 00 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	6a 00                	push   0x0
c0020442:	e8 ea f4 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020447:	59                   	pop    ecx
c0020448:	5f                   	pop    edi
c0020449:	52                   	push   edx
c002044a:	50                   	push   eax
c002044b:	e8 27 f2 ff ff       	call   c001f677 <Vm::fpuInternalTo64(unsigned long long)>
c0020450:	eb 70                	jmp    c00204c2 <Vm::x87Handler(regs*)+0xa54>
c0020452:	31 c0                	xor    eax,eax
c0020454:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020459:	75 74                	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c002045b:	50                   	push   eax
c002045c:	50                   	push   eax
c002045d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020460:	31 d2                	xor    edx,edx
c0020462:	52                   	push   edx
c0020463:	50                   	push   eax
c0020464:	e8 f6 f2 ff ff       	call   c001f75f <Vm::fpuLongToFloat(long long)>
c0020469:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020470:	89 c6                	mov    esi,eax
c0020472:	89 d7                	mov    edi,edx
c0020474:	e8 b8 f4 ff ff       	call   c001f931 <Vm::fpuGetReg(int)>
c0020479:	57                   	push   edi
c002047a:	56                   	push   esi
c002047b:	52                   	push   edx
c002047c:	50                   	push   eax
c002047d:	e8 5e f4 ff ff       	call   c001f8e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020482:	83 c4 1c             	add    esp,0x1c
c0020485:	52                   	push   edx
c0020486:	50                   	push   eax
c0020487:	6a 00                	push   0x0
c0020489:	e8 e6 f4 ff ff       	call   c001f974 <Vm::fpuSetReg(int, unsigned long long)>
c002048e:	e9 f2 f7 ff ff       	jmp    c001fc85 <Vm::x87Handler(regs*)+0x217>
c0020493:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020497:	80 fa 05             	cmp    dl,0x5
c002049a:	75 11                	jne    c00204ad <Vm::x87Handler(regs*)+0xa3f>
c002049c:	55                   	push   ebp
c002049d:	55                   	push   ebp
c002049e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204a1:	ff 36                	push   DWORD PTR [esi]
c00204a3:	e8 81 f2 ff ff       	call   c001f729 <Vm::fpuULongToFloat(unsigned long long)>
c00204a8:	e9 cf f7 ff ff       	jmp    c001fc7c <Vm::x87Handler(regs*)+0x20e>
c00204ad:	31 c0                	xor    eax,eax
c00204af:	80 fa 07             	cmp    dl,0x7
c00204b2:	75 1b                	jne    c00204cf <Vm::x87Handler(regs*)+0xa61>
c00204b4:	e8 63 f5 ff ff       	call   c001fa1c <Vm::fpuPop()>
c00204b9:	51                   	push   ecx
c00204ba:	51                   	push   ecx
c00204bb:	52                   	push   edx
c00204bc:	50                   	push   eax
c00204bd:	e8 0c f2 ff ff       	call   c001f6ce <Vm::fpuFloatToLong(unsigned long long)>
c00204c2:	83 c4 10             	add    esp,0x10
c00204c5:	89 06                	mov    DWORD PTR [esi],eax
c00204c7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204ca:	e9 f8 f7 ff ff       	jmp    c001fcc7 <Vm::x87Handler(regs*)+0x259>
c00204cf:	83 c4 1c             	add    esp,0x1c
c00204d2:	5b                   	pop    ebx
c00204d3:	5e                   	pop    esi
c00204d4:	5f                   	pop    edi
c00204d5:	5d                   	pop    ebp
c00204d6:	c3                   	ret    

c00204d7 <__static_initialization_and_destruction_0(int, int)>:
c00204d7:	83 ec 0c             	sub    esp,0xc
c00204da:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204df:	75 1a                	jne    c00204fb <__static_initialization_and_destruction_0(int, int)+0x24>
c00204e1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204e9:	75 10                	jne    c00204fb <__static_initialization_and_destruction_0(int, int)+0x24>
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	68 c0 19 03 c0       	push   0xc00319c0
c00204f3:	e8 18 88 00 00       	call   c0028d10 <Vm::_FPUState::_FPUState()>
c00204f8:	83 c4 10             	add    esp,0x10
c00204fb:	90                   	nop
c00204fc:	83 c4 0c             	add    esp,0xc
c00204ff:	c3                   	ret    

c0020500 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	83 ec 08             	sub    esp,0x8
c0020506:	68 ff ff 00 00       	push   0xffff
c002050b:	6a 01                	push   0x1
c002050d:	e8 c5 ff ff ff       	call   c00204d7 <__static_initialization_and_destruction_0(int, int)>
c0020512:	83 c4 10             	add    esp,0x10
c0020515:	83 c4 0c             	add    esp,0xc
c0020518:	c3                   	ret    
c0020519:	90                   	nop

c002051a <FAT::getName()>:
c002051a:	b8 a8 c7 02 c0       	mov    eax,0xc002c7a8
c002051f:	c3                   	ret    

c0020520 <FAT::tell(void*, unsigned long long*)>:
c0020520:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020525:	75 06                	jne    c002052d <FAT::tell(void*, unsigned long long*)+0xd>
c0020527:	b8 04 00 00 00       	mov    eax,0x4
c002052c:	c3                   	ret    
c002052d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020532:	75 06                	jne    c002053a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020534:	b8 04 00 00 00       	mov    eax,0x4
c0020539:	c3                   	ret    
c002053a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002053e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020541:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020548:	89 01                	mov    DWORD PTR [ecx],eax
c002054a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002054d:	b8 00 00 00 00       	mov    eax,0x0
c0020552:	c3                   	ret    
c0020553:	90                   	nop

c0020554 <FAT::stat(void*, unsigned long long*)>:
c0020554:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020559:	75 06                	jne    c0020561 <FAT::stat(void*, unsigned long long*)+0xd>
c002055b:	b8 04 00 00 00       	mov    eax,0x4
c0020560:	c3                   	ret    
c0020561:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020566:	75 06                	jne    c002056e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020568:	b8 04 00 00 00       	mov    eax,0x4
c002056d:	c3                   	ret    
c002056e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020572:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020575:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020578:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002057c:	89 01                	mov    DWORD PTR [ecx],eax
c002057e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020581:	b8 00 00 00 00       	mov    eax,0x0
c0020586:	c3                   	ret    
c0020587:	90                   	nop

c0020588 <FAT::~FAT()>:
c0020588:	83 ec 0c             	sub    esp,0xc
c002058b:	ba 2c c8 02 c0       	mov    edx,0xc002c82c
c0020590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020594:	89 10                	mov    DWORD PTR [eax],edx
c0020596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059a:	83 ec 0c             	sub    esp,0xc
c002059d:	50                   	push   eax
c002059e:	e8 e3 2c ff ff       	call   c0013286 <Filesystem::~Filesystem()>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	90                   	nop
c00205a7:	83 c4 0c             	add    esp,0xc
c00205aa:	c3                   	ret    
c00205ab:	90                   	nop

c00205ac <FAT::~FAT()>:
c00205ac:	83 ec 0c             	sub    esp,0xc
c00205af:	83 ec 0c             	sub    esp,0xc
c00205b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b6:	e8 cd ff ff ff       	call   c0020588 <FAT::~FAT()>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	83 ec 08             	sub    esp,0x8
c00205c1:	6a 08                	push   0x8
c00205c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c7:	e8 b2 28 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00205cc:	83 c4 10             	add    esp,0x10
c00205cf:	83 c4 0c             	add    esp,0xc
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205d4:	83 ec 1c             	sub    esp,0x1c
c00205d7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205de:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205e7:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00205ee:	83 f8 ff             	cmp    eax,0xffffffff
c00205f1:	75 34                	jne    c0020627 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205f7:	88 c2                	mov    dl,al
c00205f9:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00205fe:	01 d0                	add    eax,edx
c0020600:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020604:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c002060a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002060e:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020615:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002061a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002061e:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020625:	eb 17                	jmp    c002063e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020627:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002062b:	88 c2                	mov    dl,al
c002062d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020631:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c0020638:	01 d0                	add    eax,edx
c002063a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002063e:	83 ec 04             	sub    esp,0x4
c0020641:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020645:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020649:	8d 44 24 15          	lea    eax,[esp+0x15]
c002064d:	50                   	push   eax
c002064e:	e8 e5 66 fe ff       	call   c0006d38 <f_getlabel>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002065a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002065f:	75 07                	jne    c0020668 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020661:	b8 00 00 00 00       	mov    eax,0x0
c0020666:	eb 05                	jmp    c002066d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020668:	b8 01 00 00 00       	mov    eax,0x1
c002066d:	83 c4 1c             	add    esp,0x1c
c0020670:	c3                   	ret    
c0020671:	90                   	nop

c0020672 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020672:	57                   	push   edi
c0020673:	83 ec 58             	sub    esp,0x58
c0020676:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002067e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020682:	b9 0f 00 00 00       	mov    ecx,0xf
c0020687:	b8 00 00 00 00       	mov    eax,0x0
c002068c:	fc                   	cld    
c002068d:	89 d7                	mov    edi,edx
c002068f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020691:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020695:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c002069c:	83 f8 ff             	cmp    eax,0xffffffff
c002069f:	75 34                	jne    c00206d5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206a5:	88 c2                	mov    dl,al
c00206a7:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00206ac:	01 d0                	add    eax,edx
c00206ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206b2:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c00206b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206bc:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00206c3:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00206c8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206cc:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00206d3:	eb 17                	jmp    c00206ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206d5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206d9:	88 c2                	mov    dl,al
c00206db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206df:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00206e6:	01 d0                	add    eax,edx
c00206e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ec:	83 ec 08             	sub    esp,0x8
c00206ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206f7:	50                   	push   eax
c00206f8:	e8 77 02 fe ff       	call   c0000974 <strcat>
c00206fd:	83 c4 10             	add    esp,0x10
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020707:	50                   	push   eax
c0020708:	e8 19 68 fe ff       	call   c0006f26 <f_setlabel>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020714:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020719:	75 07                	jne    c0020722 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002071b:	b8 00 00 00 00       	mov    eax,0x0
c0020720:	eb 05                	jmp    c0020727 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020722:	b8 01 00 00 00       	mov    eax,0x1
c0020727:	83 c4 58             	add    esp,0x58
c002072a:	5f                   	pop    edi
c002072b:	c3                   	ret    

c002072c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002072c:	83 ec 2c             	sub    esp,0x2c
c002072f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020737:	83 ec 08             	sub    esp,0x8
c002073a:	68 cc c7 02 c0       	push   0xc002c7cc
c002073f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020743:	e8 78 01 fe ff       	call   c00008c0 <strcmp>
c0020748:	83 c4 10             	add    esp,0x10
c002074b:	85 c0                	test   eax,eax
c002074d:	0f 94 c0             	sete   al
c0020750:	84 c0                	test   al,al
c0020752:	74 0d                	je     c0020761 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020754:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002075c:	e9 a6 00 00 00       	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020761:	83 ec 08             	sub    esp,0x8
c0020764:	68 be c7 02 c0       	push   0xc002c7be
c0020769:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002076d:	e8 4e 01 fe ff       	call   c00008c0 <strcmp>
c0020772:	83 c4 10             	add    esp,0x10
c0020775:	85 c0                	test   eax,eax
c0020777:	0f 94 c0             	sete   al
c002077a:	84 c0                	test   al,al
c002077c:	74 0a                	je     c0020788 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002077e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020786:	eb 7f                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020788:	83 ec 08             	sub    esp,0x8
c002078b:	68 c4 c7 02 c0       	push   0xc002c7c4
c0020790:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020794:	e8 27 01 fe ff       	call   c00008c0 <strcmp>
c0020799:	83 c4 10             	add    esp,0x10
c002079c:	85 c0                	test   eax,eax
c002079e:	0f 94 c0             	sete   al
c00207a1:	84 c0                	test   al,al
c00207a3:	74 0a                	je     c00207af <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207ad:	eb 58                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207af:	83 ec 08             	sub    esp,0x8
c00207b2:	68 6c 94 02 c0       	push   0xc002946c
c00207b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207bb:	e8 00 01 fe ff       	call   c00008c0 <strcmp>
c00207c0:	83 c4 10             	add    esp,0x10
c00207c3:	85 c0                	test   eax,eax
c00207c5:	0f 94 c0             	sete   al
c00207c8:	84 c0                	test   al,al
c00207ca:	74 0a                	je     c00207d6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207cc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207d4:	eb 31                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207d6:	83 ec 08             	sub    esp,0x8
c00207d9:	68 ca c7 02 c0       	push   0xc002c7ca
c00207de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207e2:	e8 d9 00 fe ff       	call   c00008c0 <strcmp>
c00207e7:	83 c4 10             	add    esp,0x10
c00207ea:	85 c0                	test   eax,eax
c00207ec:	0f 94 c0             	sete   al
c00207ef:	84 c0                	test   al,al
c00207f1:	74 0a                	je     c00207fd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207f3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207fb:	eb 0a                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207fd:	b8 08 00 00 00       	mov    eax,0x8
c0020802:	e9 04 01 00 00       	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020807:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002080e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020813:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020817:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c002081e:	83 f8 ff             	cmp    eax,0xffffffff
c0020821:	75 34                	jne    c0020857 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020823:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020827:	88 c2                	mov    dl,al
c0020829:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002082e:	01 d0                	add    eax,edx
c0020830:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020834:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c002083a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002083e:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020845:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002084a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002084e:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020855:	eb 17                	jmp    c002086e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020857:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002085b:	88 c2                	mov    dl,al
c002085d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020861:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c0020868:	01 d0                	add    eax,edx
c002086a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002086e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020872:	88 04 24             	mov    BYTE PTR [esp],al
c0020875:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002087d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020885:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002088a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020892:	83 ec 0c             	sub    esp,0xc
c0020895:	68 00 20 00 00       	push   0x2000
c002089a:	e8 a4 ef fe ff       	call   c000f843 <malloc>
c002089f:	83 c4 10             	add    esp,0x10
c00208a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208a6:	68 00 20 00 00       	push   0x2000
c00208ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208b3:	50                   	push   eax
c00208b4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208b8:	50                   	push   eax
c00208b9:	e8 b3 6a fe ff       	call   c0007371 <f_mkfs>
c00208be:	83 c4 10             	add    esp,0x10
c00208c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208ca:	75 07                	jne    c00208d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208cc:	b8 00 00 00 00       	mov    eax,0x0
c00208d1:	eb 38                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208d3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208d8:	75 17                	jne    c00208f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	68 fc c7 02 c0       	push   0xc002c7fc
c00208e2:	e8 77 26 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	b8 09 00 00 00       	mov    eax,0x9
c00208ef:	eb 1a                	jmp    c002090b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f5:	83 ec 08             	sub    esp,0x8
c00208f8:	50                   	push   eax
c00208f9:	68 d0 c7 02 c0       	push   0xc002c7d0
c00208fe:	e8 5b 26 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0020903:	83 c4 10             	add    esp,0x10
c0020906:	b8 01 00 00 00       	mov    eax,0x1
c002090b:	83 c4 2c             	add    esp,0x2c
c002090e:	c3                   	ret    
c002090f:	90                   	nop

c0020910 <FAT::tryMount(LogicalDisk*, int)>:
c0020910:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020916:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002091b:	83 f8 14             	cmp    eax,0x14
c002091e:	75 17                	jne    c0020937 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020920:	83 ec 0c             	sub    esp,0xc
c0020923:	68 e2 c7 02 c0       	push   0xc002c7e2
c0020928:	e8 d2 9c ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c002092d:	83 c4 10             	add    esp,0x10
c0020930:	b0 00                	mov    al,0x0
c0020932:	e9 d7 01 00 00       	jmp    c0020b0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020937:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002093e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020944:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002094a:	3d 00 02 00 00       	cmp    eax,0x200
c002094f:	74 07                	je     c0020958 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020951:	b0 00                	mov    al,0x0
c0020953:	e9 b6 01 00 00       	jmp    c0020b0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020958:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020960:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020967:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c002096e:	83 f8 ff             	cmp    eax,0xffffffff
c0020971:	74 07                	je     c002097a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020973:	b0 01                	mov    al,0x1
c0020975:	e9 94 01 00 00       	jmp    c0020b0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002097a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020984:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002098c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020993:	88 c2                	mov    dl,al
c0020995:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002099a:	01 d0                	add    eax,edx
c002099c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209a3:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c00209a9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209b0:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00209b7:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00209bc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209c3:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00209ca:	83 ec 0c             	sub    esp,0xc
c00209cd:	68 54 02 00 00       	push   0x254
c00209d2:	e8 6c ee fe ff       	call   c000f843 <malloc>
c00209d7:	83 c4 10             	add    esp,0x10
c00209da:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209e1:	83 ec 04             	sub    esp,0x4
c00209e4:	6a 00                	push   0x0
c00209e6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209ed:	50                   	push   eax
c00209ee:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209f5:	e8 35 45 fe ff       	call   c0004f2f <f_mount>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a04:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a0c:	74 19                	je     c0020a27 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a0e:	83 ec 0c             	sub    esp,0xc
c0020a11:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a18:	e8 46 ee fe ff       	call   c000f863 <rfree>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	b0 00                	mov    al,0x0
c0020a22:	e9 e7 00 00 00       	jmp    c0020b0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a27:	83 ec 04             	sub    esp,0x4
c0020a2a:	68 00 01 00 00       	push   0x100
c0020a2f:	6a 00                	push   0x0
c0020a31:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a38:	50                   	push   eax
c0020a39:	e8 3a fd fd ff       	call   c0000778 <memset>
c0020a3e:	83 c4 10             	add    esp,0x10
c0020a41:	83 ec 08             	sub    esp,0x8
c0020a44:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a4b:	50                   	push   eax
c0020a4c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a53:	50                   	push   eax
c0020a54:	e8 1b ff fd ff       	call   c0000974 <strcat>
c0020a59:	83 c4 10             	add    esp,0x10
c0020a5c:	83 ec 08             	sub    esp,0x8
c0020a5f:	68 f0 c7 02 c0       	push   0xc002c7f0
c0020a64:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a6b:	50                   	push   eax
c0020a6c:	e8 03 ff fd ff       	call   c0000974 <strcat>
c0020a71:	83 c4 10             	add    esp,0x10
c0020a74:	83 ec 04             	sub    esp,0x4
c0020a77:	6a 01                	push   0x1
c0020a79:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a80:	50                   	push   eax
c0020a81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a85:	50                   	push   eax
c0020a86:	e8 06 45 fe ff       	call   c0004f91 <f_open>
c0020a8b:	83 c4 10             	add    esp,0x10
c0020a8e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a95:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a9c:	85 c0                	test   eax,eax
c0020a9e:	74 0a                	je     c0020aaa <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020aa0:	78 2d                	js     c0020acf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aa2:	83 e8 04             	sub    eax,0x4
c0020aa5:	83 f8 01             	cmp    eax,0x1
c0020aa8:	77 25                	ja     c0020acf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aaa:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020ab2:	83 ec 0c             	sub    esp,0xc
c0020ab5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ab9:	50                   	push   eax
c0020aba:	e8 24 50 fe ff       	call   c0005ae3 <f_close>
c0020abf:	83 c4 10             	add    esp,0x10
c0020ac2:	90                   	nop
c0020ac3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020acb:	74 3a                	je     c0020b07 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020acd:	eb 2d                	jmp    c0020afc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020acf:	83 ec 0c             	sub    esp,0xc
c0020ad2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad9:	e8 85 ed fe ff       	call   c000f863 <rfree>
c0020ade:	83 c4 10             	add    esp,0x10
c0020ae1:	83 ec 04             	sub    esp,0x4
c0020ae4:	6a 00                	push   0x0
c0020ae6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aed:	50                   	push   eax
c0020aee:	6a 00                	push   0x0
c0020af0:	e8 3a 44 fe ff       	call   c0004f2f <f_mount>
c0020af5:	83 c4 10             	add    esp,0x10
c0020af8:	b0 00                	mov    al,0x0
c0020afa:	eb 12                	jmp    c0020b0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020afc:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c0020b01:	40                   	inc    eax
c0020b02:	a3 20 1a 03 c0       	mov    ds:0xc0031a20,eax
c0020b07:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b0e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b14:	c3                   	ret    
c0020b15:	90                   	nop

c0020b16 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b16:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b1c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b24:	74 0a                	je     c0020b30 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b26:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b2e:	75 0a                	jne    c0020b3a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b30:	b8 04 00 00 00       	mov    eax,0x4
c0020b35:	e9 db 00 00 00       	jmp    c0020c15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b3a:	83 ec 08             	sub    esp,0x8
c0020b3d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b44:	50                   	push   eax
c0020b45:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b4c:	e8 9c 55 fe ff       	call   c00060ed <f_readdir>
c0020b51:	83 c4 10             	add    esp,0x10
c0020b54:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b5b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b61:	83 ec 0c             	sub    esp,0xc
c0020b64:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b6b:	83 c0 1a             	add    eax,0x1a
c0020b6e:	50                   	push   eax
c0020b6f:	e8 20 fc fd ff       	call   c0000794 <strlen>
c0020b74:	83 c4 10             	add    esp,0x10
c0020b77:	ba 00 00 00 00       	mov    edx,0x0
c0020b7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b84:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b8b:	0f b6 c0             	movzx  eax,al
c0020b8e:	83 e0 10             	and    eax,0x10
c0020b91:	74 07                	je     c0020b9a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b93:	b8 02 00 00 00       	mov    eax,0x2
c0020b98:	eb 05                	jmp    c0020b9f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b9a:	b8 01 00 00 00       	mov    eax,0x1
c0020b9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ba3:	83 ec 08             	sub    esp,0x8
c0020ba6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bad:	83 c0 1a             	add    eax,0x1a
c0020bb0:	50                   	push   eax
c0020bb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb5:	83 c0 10             	add    eax,0x10
c0020bb8:	50                   	push   eax
c0020bb9:	e8 76 fc fd ff       	call   c0000834 <strcpy>
c0020bbe:	83 c4 10             	add    esp,0x10
c0020bc1:	83 ec 04             	sub    esp,0x4
c0020bc4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bcb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bcf:	50                   	push   eax
c0020bd0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bd7:	e8 68 fb fd ff       	call   c0000744 <memcpy>
c0020bdc:	83 c4 10             	add    esp,0x10
c0020bdf:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020be6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bec:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bf3:	84 c0                	test   al,al
c0020bf5:	75 07                	jne    c0020bfe <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bf7:	b8 07 00 00 00       	mov    eax,0x7
c0020bfc:	eb 17                	jmp    c0020c15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bfe:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c05:	85 c0                	test   eax,eax
c0020c07:	75 07                	jne    c0020c10 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c09:	b8 00 00 00 00       	mov    eax,0x0
c0020c0e:	eb 05                	jmp    c0020c15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c10:	b8 01 00 00 00       	mov    eax,0x1
c0020c15:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c1b:	c3                   	ret    

c0020c1c <FAT::read(void*, unsigned long, void*, int*)>:
c0020c1c:	83 ec 1c             	sub    esp,0x1c
c0020c1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c24:	74 07                	je     c0020c2d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c2b:	75 07                	jne    c0020c34 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c2d:	b8 04 00 00 00       	mov    eax,0x4
c0020c32:	eb 3d                	jmp    c0020c71 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c38:	50                   	push   eax
c0020c39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c45:	e8 83 47 fe ff       	call   c00053cd <f_read>
c0020c4a:	83 c4 10             	add    esp,0x10
c0020c4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c55:	89 c2                	mov    edx,eax
c0020c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c5b:	89 10                	mov    DWORD PTR [eax],edx
c0020c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c61:	85 c0                	test   eax,eax
c0020c63:	75 07                	jne    c0020c6c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c65:	b8 00 00 00 00       	mov    eax,0x0
c0020c6a:	eb 05                	jmp    c0020c71 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c6c:	b8 01 00 00 00       	mov    eax,0x1
c0020c71:	83 c4 1c             	add    esp,0x1c
c0020c74:	c3                   	ret    
c0020c75:	90                   	nop

c0020c76 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c76:	83 ec 1c             	sub    esp,0x1c
c0020c79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7e:	74 07                	je     c0020c87 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c80:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c85:	75 07                	jne    c0020c8e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c87:	b8 04 00 00 00       	mov    eax,0x4
c0020c8c:	eb 3d                	jmp    c0020ccb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c92:	50                   	push   eax
c0020c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9f:	e8 a9 49 fe ff       	call   c000564d <f_write>
c0020ca4:	83 c4 10             	add    esp,0x10
c0020ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020caf:	89 c2                	mov    edx,eax
c0020cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cb5:	89 10                	mov    DWORD PTR [eax],edx
c0020cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cbb:	85 c0                	test   eax,eax
c0020cbd:	75 07                	jne    c0020cc6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cbf:	b8 00 00 00 00       	mov    eax,0x0
c0020cc4:	eb 05                	jmp    c0020ccb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cc6:	b8 01 00 00 00       	mov    eax,0x1
c0020ccb:	83 c4 1c             	add    esp,0x1c
c0020cce:	c3                   	ret    
c0020ccf:	90                   	nop

c0020cd0 <FAT::close(void*)>:
c0020cd0:	83 ec 1c             	sub    esp,0x1c
c0020cd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd8:	75 07                	jne    c0020ce1 <FAT::close(void*)+0x11>
c0020cda:	b8 04 00 00 00       	mov    eax,0x4
c0020cdf:	eb 36                	jmp    c0020d17 <FAT::close(void*)+0x47>
c0020ce1:	83 ec 0c             	sub    esp,0xc
c0020ce4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce8:	e8 f6 4d fe ff       	call   c0005ae3 <f_close>
c0020ced:	83 c4 10             	add    esp,0x10
c0020cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf4:	83 ec 0c             	sub    esp,0xc
c0020cf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cfb:	e8 53 eb fe ff       	call   c000f853 <free>
c0020d00:	83 c4 10             	add    esp,0x10
c0020d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d07:	85 c0                	test   eax,eax
c0020d09:	75 07                	jne    c0020d12 <FAT::close(void*)+0x42>
c0020d0b:	b8 00 00 00 00       	mov    eax,0x0
c0020d10:	eb 05                	jmp    c0020d17 <FAT::close(void*)+0x47>
c0020d12:	b8 01 00 00 00       	mov    eax,0x1
c0020d17:	83 c4 1c             	add    esp,0x1c
c0020d1a:	c3                   	ret    
c0020d1b:	90                   	nop

c0020d1c <FAT::closeDir(void*)>:
c0020d1c:	83 ec 1c             	sub    esp,0x1c
c0020d1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d24:	75 07                	jne    c0020d2d <FAT::closeDir(void*)+0x11>
c0020d26:	b8 04 00 00 00       	mov    eax,0x4
c0020d2b:	eb 36                	jmp    c0020d63 <FAT::closeDir(void*)+0x47>
c0020d2d:	83 ec 0c             	sub    esp,0xc
c0020d30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d34:	e8 92 53 fe ff       	call   c00060cb <f_closedir>
c0020d39:	83 c4 10             	add    esp,0x10
c0020d3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d40:	83 ec 0c             	sub    esp,0xc
c0020d43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d47:	e8 07 eb fe ff       	call   c000f853 <free>
c0020d4c:	83 c4 10             	add    esp,0x10
c0020d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d53:	85 c0                	test   eax,eax
c0020d55:	75 07                	jne    c0020d5e <FAT::closeDir(void*)+0x42>
c0020d57:	b8 00 00 00 00       	mov    eax,0x0
c0020d5c:	eb 05                	jmp    c0020d63 <FAT::closeDir(void*)+0x47>
c0020d5e:	b8 01 00 00 00       	mov    eax,0x1
c0020d63:	83 c4 1c             	add    esp,0x1c
c0020d66:	c3                   	ret    
c0020d67:	90                   	nop

c0020d68 <FAT::seek(void*, unsigned long long)>:
c0020d68:	83 ec 2c             	sub    esp,0x2c
c0020d6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d7b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d80:	75 07                	jne    c0020d89 <FAT::seek(void*, unsigned long long)+0x21>
c0020d82:	b8 04 00 00 00       	mov    eax,0x4
c0020d87:	eb 2f                	jmp    c0020db8 <FAT::seek(void*, unsigned long long)+0x50>
c0020d89:	83 ec 04             	sub    esp,0x4
c0020d8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d90:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d98:	e8 75 4d fe ff       	call   c0005b12 <f_lseek>
c0020d9d:	83 c4 10             	add    esp,0x10
c0020da0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020da8:	85 c0                	test   eax,eax
c0020daa:	75 07                	jne    c0020db3 <FAT::seek(void*, unsigned long long)+0x4b>
c0020dac:	b8 00 00 00 00       	mov    eax,0x0
c0020db1:	eb 05                	jmp    c0020db8 <FAT::seek(void*, unsigned long long)+0x50>
c0020db3:	b8 01 00 00 00       	mov    eax,0x1
c0020db8:	83 c4 2c             	add    esp,0x2c
c0020dbb:	c3                   	ret    

c0020dbc <fatWrapperReadDisk>:
c0020dbc:	83 ec 1c             	sub    esp,0x1c
c0020dbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ddb:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020de2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de6:	83 ec 0c             	sub    esp,0xc
c0020de9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ded:	52                   	push   edx
c0020dee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df6:	50                   	push   eax
c0020df7:	e8 72 59 ff ff       	call   c001676e <LogicalDisk::read(unsigned long long, int, void*)>
c0020dfc:	83 c4 20             	add    esp,0x20
c0020dff:	83 c4 1c             	add    esp,0x1c
c0020e02:	c3                   	ret    

c0020e03 <fatWrapperWriteDisk>:
c0020e03:	83 ec 1c             	sub    esp,0x1c
c0020e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e12:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e1d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e22:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020e29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e2d:	83 ec 0c             	sub    esp,0xc
c0020e30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e34:	52                   	push   edx
c0020e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3d:	50                   	push   eax
c0020e3e:	e8 97 59 ff ff       	call   c00167da <LogicalDisk::write(unsigned long long, int, void*)>
c0020e43:	83 c4 20             	add    esp,0x20
c0020e46:	83 c4 1c             	add    esp,0x1c
c0020e49:	c3                   	ret    

c0020e4a <fatWrapperIoctl>:
c0020e4a:	53                   	push   ebx
c0020e4b:	83 ec 28             	sub    esp,0x28
c0020e4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e56:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e5e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e63:	75 31                	jne    c0020e96 <fatWrapperIoctl+0x4c>
c0020e65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e72:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020e79:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e89:	66 89 02             	mov    WORD PTR [edx],ax
c0020e8c:	b8 00 00 00 00       	mov    eax,0x0
c0020e91:	e9 b2 00 00 00       	jmp    c0020f48 <fatWrapperIoctl+0xfe>
c0020e96:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e9b:	75 6a                	jne    c0020f07 <fatWrapperIoctl+0xbd>
c0020e9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ea1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ea5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eaa:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020eb1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eb7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ebd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ec3:	89 c8                	mov    eax,ecx
c0020ec5:	89 da                	mov    edx,ebx
c0020ec7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ecb:	c1 e0 0a             	shl    eax,0xa
c0020ece:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ed3:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0020eda:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ee0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ee6:	89 cb                	mov    ebx,ecx
c0020ee8:	c1 fb 1f             	sar    ebx,0x1f
c0020eeb:	53                   	push   ebx
c0020eec:	51                   	push   ecx
c0020eed:	52                   	push   edx
c0020eee:	50                   	push   eax
c0020eef:	e8 c8 5a 00 00       	call   c00269bc <__udivdi3>
c0020ef4:	83 c4 10             	add    esp,0x10
c0020ef7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020efb:	89 01                	mov    DWORD PTR [ecx],eax
c0020efd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f00:	b8 00 00 00 00       	mov    eax,0x0
c0020f05:	eb 41                	jmp    c0020f48 <fatWrapperIoctl+0xfe>
c0020f07:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f0c:	75 07                	jne    c0020f15 <fatWrapperIoctl+0xcb>
c0020f0e:	b8 00 00 00 00       	mov    eax,0x0
c0020f13:	eb 33                	jmp    c0020f48 <fatWrapperIoctl+0xfe>
c0020f15:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f1a:	75 19                	jne    c0020f35 <fatWrapperIoctl+0xeb>
c0020f1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f28:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f2e:	b8 00 00 00 00       	mov    eax,0x0
c0020f33:	eb 13                	jmp    c0020f48 <fatWrapperIoctl+0xfe>
c0020f35:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f3a:	75 07                	jne    c0020f43 <fatWrapperIoctl+0xf9>
c0020f3c:	b8 00 00 00 00       	mov    eax,0x0
c0020f41:	eb 05                	jmp    c0020f48 <fatWrapperIoctl+0xfe>
c0020f43:	b8 04 00 00 00       	mov    eax,0x4
c0020f48:	83 c4 28             	add    esp,0x28
c0020f4b:	5b                   	pop    ebx
c0020f4c:	c3                   	ret    
c0020f4d:	90                   	nop

c0020f4e <FAT::FAT()>:
c0020f4e:	83 ec 1c             	sub    esp,0x1c
c0020f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f55:	83 ec 0c             	sub    esp,0xc
c0020f58:	50                   	push   eax
c0020f59:	e8 04 23 ff ff       	call   c0013262 <Filesystem::Filesystem()>
c0020f5e:	83 c4 10             	add    esp,0x10
c0020f61:	ba 2c c8 02 c0       	mov    edx,0xc002c82c
c0020f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f6a:	89 10                	mov    DWORD PTR [eax],edx
c0020f6c:	c7 05 20 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a20,0x0
c0020f76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f7e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f83:	7f 15                	jg     c0020f9a <FAT::FAT()+0x4c>
c0020f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f89:	c7 04 85 40 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce5c0],0xffffffff
c0020f94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f98:	eb e4                	jmp    c0020f7e <FAT::FAT()+0x30>
c0020f9a:	90                   	nop
c0020f9b:	83 c4 1c             	add    esp,0x1c
c0020f9e:	c3                   	ret    
c0020f9f:	90                   	nop

c0020fa0 <FAT::fixFilepath(char*)>:
c0020fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa6:	3c 40                	cmp    al,0x40
c0020fa8:	7e 2c                	jle    c0020fd6 <FAT::fixFilepath(char*)+0x36>
c0020faa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fae:	8a 00                	mov    al,BYTE PTR [eax]
c0020fb0:	83 e8 41             	sub    eax,0x41
c0020fb3:	88 c2                	mov    dl,al
c0020fb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb9:	88 10                	mov    BYTE PTR [eax],dl
c0020fbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbf:	8a 00                	mov    al,BYTE PTR [eax]
c0020fc1:	0f be c0             	movsx  eax,al
c0020fc4:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c0020fcb:	83 c0 30             	add    eax,0x30
c0020fce:	88 c2                	mov    dl,al
c0020fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd4:	88 10                	mov    BYTE PTR [eax],dl
c0020fd6:	90                   	nop
c0020fd7:	c3                   	ret    

c0020fd8 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe6:	74 0a                	je     c0020ff2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fe8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ff0:	75 0a                	jne    c0020ffc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ff2:	b8 04 00 00 00       	mov    eax,0x4
c0020ff7:	e9 fd 00 00 00       	jmp    c00210f9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ffc:	83 ec 08             	sub    esp,0x8
c0020fff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021006:	8d 44 24 14          	lea    eax,[esp+0x14]
c002100a:	50                   	push   eax
c002100b:	e8 24 f8 fd ff       	call   c0000834 <strcpy>
c0021010:	83 c4 10             	add    esp,0x10
c0021013:	83 ec 08             	sub    esp,0x8
c0021016:	8d 44 24 10          	lea    eax,[esp+0x10]
c002101a:	50                   	push   eax
c002101b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021022:	e8 79 ff ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c0021027:	83 c4 10             	add    esp,0x10
c002102a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021032:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021039:	83 e0 01             	and    eax,0x1
c002103c:	74 08                	je     c0021046 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002103e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021046:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002104d:	83 e0 04             	and    eax,0x4
c0021050:	74 10                	je     c0021062 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021052:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002105a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021062:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021069:	83 e0 02             	and    eax,0x2
c002106c:	74 08                	je     c0021076 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002106e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021076:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107d:	83 e0 08             	and    eax,0x8
c0021080:	74 08                	je     c002108a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021082:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002108a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021091:	83 e0 10             	and    eax,0x10
c0021094:	74 08                	je     c002109e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021096:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002109e:	83 ec 0c             	sub    esp,0xc
c00210a1:	68 50 02 00 00       	push   0x250
c00210a6:	e8 98 e7 fe ff       	call   c000f843 <malloc>
c00210ab:	83 c4 10             	add    esp,0x10
c00210ae:	89 c2                	mov    edx,eax
c00210b0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b7:	89 10                	mov    DWORD PTR [eax],edx
c00210b9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ca:	83 ec 04             	sub    esp,0x4
c00210cd:	52                   	push   edx
c00210ce:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210d2:	52                   	push   edx
c00210d3:	50                   	push   eax
c00210d4:	e8 b8 3e fe ff       	call   c0004f91 <f_open>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210e3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210eb:	74 07                	je     c00210f4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210ed:	b8 01 00 00 00       	mov    eax,0x1
c00210f2:	eb 05                	jmp    c00210f9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210f4:	b8 00 00 00 00       	mov    eax,0x0
c00210f9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210ff:	c3                   	ret    

c0021100 <FAT::openDir(char const*, void**)>:
c0021100:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021106:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002110e:	74 0a                	je     c002111a <FAT::openDir(char const*, void**)+0x1a>
c0021110:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021118:	75 07                	jne    c0021121 <FAT::openDir(char const*, void**)+0x21>
c002111a:	b8 04 00 00 00       	mov    eax,0x4
c002111f:	eb 7d                	jmp    c002119e <FAT::openDir(char const*, void**)+0x9e>
c0021121:	83 ec 08             	sub    esp,0x8
c0021124:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002112b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002112f:	50                   	push   eax
c0021130:	e8 ff f6 fd ff       	call   c0000834 <strcpy>
c0021135:	83 c4 10             	add    esp,0x10
c0021138:	83 ec 08             	sub    esp,0x8
c002113b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002113f:	50                   	push   eax
c0021140:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021147:	e8 54 fe ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c002114c:	83 c4 10             	add    esp,0x10
c002114f:	83 ec 0c             	sub    esp,0xc
c0021152:	6a 4c                	push   0x4c
c0021154:	e8 ea e6 fe ff       	call   c000f843 <malloc>
c0021159:	83 c4 10             	add    esp,0x10
c002115c:	89 c2                	mov    edx,eax
c002115e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021165:	89 10                	mov    DWORD PTR [eax],edx
c0021167:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021170:	83 ec 08             	sub    esp,0x8
c0021173:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021177:	52                   	push   edx
c0021178:	50                   	push   eax
c0021179:	e8 4b 4e fe ff       	call   c0005fc9 <f_opendir>
c002117e:	83 c4 10             	add    esp,0x10
c0021181:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021188:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021190:	74 07                	je     c0021199 <FAT::openDir(char const*, void**)+0x99>
c0021192:	b8 01 00 00 00       	mov    eax,0x1
c0021197:	eb 05                	jmp    c002119e <FAT::openDir(char const*, void**)+0x9e>
c0021199:	b8 00 00 00 00       	mov    eax,0x0
c002119e:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a4:	c3                   	ret    
c00211a5:	90                   	nop

c00211a6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211a6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211ac:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211b4:	75 0a                	jne    c00211c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211b6:	b8 04 00 00 00       	mov    eax,0x4
c00211bb:	e9 c9 00 00 00       	jmp    c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211c8:	75 0a                	jne    c00211d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211ca:	b8 04 00 00 00       	mov    eax,0x4
c00211cf:	e9 b5 00 00 00       	jmp    c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211dc:	75 0a                	jne    c00211e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211de:	b8 04 00 00 00       	mov    eax,0x4
c00211e3:	e9 a1 00 00 00       	jmp    c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e8:	83 ec 08             	sub    esp,0x8
c00211eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211f2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211f9:	50                   	push   eax
c00211fa:	e8 35 f6 fd ff       	call   c0000834 <strcpy>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	83 ec 08             	sub    esp,0x8
c0021205:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002120c:	50                   	push   eax
c002120d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021214:	e8 87 fd ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c0021219:	83 c4 10             	add    esp,0x10
c002121c:	83 ec 08             	sub    esp,0x8
c002121f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021223:	50                   	push   eax
c0021224:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002122b:	50                   	push   eax
c002122c:	e8 57 4f fe ff       	call   c0006188 <f_stat>
c0021231:	83 c4 10             	add    esp,0x10
c0021234:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002123b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021242:	85 c0                	test   eax,eax
c0021244:	74 07                	je     c002124d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021246:	83 f8 04             	cmp    eax,0x4
c0021249:	74 32                	je     c002127d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002124b:	eb 37                	jmp    c0021284 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002124d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021251:	0f b6 c0             	movzx  eax,al
c0021254:	83 e0 10             	and    eax,0x10
c0021257:	0f 95 c2             	setne  dl
c002125a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021261:	88 10                	mov    BYTE PTR [eax],dl
c0021263:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021266:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002126a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021271:	89 01                	mov    DWORD PTR [ecx],eax
c0021273:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021276:	b8 00 00 00 00       	mov    eax,0x0
c002127b:	eb 0c                	jmp    c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127d:	b8 02 00 00 00       	mov    eax,0x2
c0021282:	eb 05                	jmp    c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021284:	b8 01 00 00 00       	mov    eax,0x1
c0021289:	81 c4 2c 02 00 00    	add    esp,0x22c
c002128f:	c3                   	ret    

c0021290 <FAT::unlink(char const*)>:
c0021290:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021296:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002129e:	75 07                	jne    c00212a7 <FAT::unlink(char const*)+0x17>
c00212a0:	b8 04 00 00 00       	mov    eax,0x4
c00212a5:	eb 5c                	jmp    c0021303 <FAT::unlink(char const*)+0x73>
c00212a7:	83 ec 08             	sub    esp,0x8
c00212aa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212b5:	50                   	push   eax
c00212b6:	e8 79 f5 fd ff       	call   c0000834 <strcpy>
c00212bb:	83 c4 10             	add    esp,0x10
c00212be:	83 ec 08             	sub    esp,0x8
c00212c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212c5:	50                   	push   eax
c00212c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212cd:	e8 ce fc ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	83 ec 0c             	sub    esp,0xc
c00212d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212dc:	50                   	push   eax
c00212dd:	e8 f8 51 fe ff       	call   c00064da <f_unlink>
c00212e2:	83 c4 10             	add    esp,0x10
c00212e5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212ec:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212f3:	85 c0                	test   eax,eax
c00212f5:	75 07                	jne    c00212fe <FAT::unlink(char const*)+0x6e>
c00212f7:	b8 00 00 00 00       	mov    eax,0x0
c00212fc:	eb 05                	jmp    c0021303 <FAT::unlink(char const*)+0x73>
c00212fe:	b8 01 00 00 00       	mov    eax,0x1
c0021303:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021309:	c3                   	ret    

c002130a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002130a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021310:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021317:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002131e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021322:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021326:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002132e:	75 0a                	jne    c002133a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021330:	b8 04 00 00 00       	mov    eax,0x4
c0021335:	e9 1c 01 00 00       	jmp    c0021456 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002133a:	83 ec 08             	sub    esp,0x8
c002133d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021344:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021348:	50                   	push   eax
c0021349:	e8 e6 f4 fd ff       	call   c0000834 <strcpy>
c002134e:	83 c4 10             	add    esp,0x10
c0021351:	83 ec 08             	sub    esp,0x8
c0021354:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021358:	50                   	push   eax
c0021359:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021360:	e8 3b fc ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c0021365:	83 c4 10             	add    esp,0x10
c0021368:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021370:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021378:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137d:	83 e0 01             	and    eax,0x1
c0021380:	74 08                	je     c002138a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021382:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002138a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002138f:	83 e0 02             	and    eax,0x2
c0021392:	74 08                	je     c002139c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021394:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002139c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213a1:	83 e0 04             	and    eax,0x4
c00213a4:	74 08                	je     c00213ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213a6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b3:	83 e0 08             	and    eax,0x8
c00213b6:	74 08                	je     c00213c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213b8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c5:	83 e0 01             	and    eax,0x1
c00213c8:	74 08                	je     c00213d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213d2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d7:	83 e0 02             	and    eax,0x2
c00213da:	74 08                	je     c00213e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213dc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e9:	83 e0 04             	and    eax,0x4
c00213ec:	74 08                	je     c00213f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ee:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213fb:	83 e0 08             	and    eax,0x8
c00213fe:	74 08                	je     c0021408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021400:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021408:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002140f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021416:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002141e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021426:	83 ec 04             	sub    esp,0x4
c0021429:	52                   	push   edx
c002142a:	50                   	push   eax
c002142b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002142f:	50                   	push   eax
c0021430:	e8 47 57 fe ff       	call   c0006b7c <f_chmod>
c0021435:	83 c4 10             	add    esp,0x10
c0021438:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002143f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021446:	85 c0                	test   eax,eax
c0021448:	75 07                	jne    c0021451 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002144a:	b8 00 00 00 00       	mov    eax,0x0
c002144f:	eb 05                	jmp    c0021456 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021451:	b8 01 00 00 00       	mov    eax,0x1
c0021456:	81 c4 2c 01 00 00    	add    esp,0x12c
c002145c:	c3                   	ret    
c002145d:	90                   	nop

c002145e <FAT::rename(char const*, char const*)>:
c002145e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021464:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002146c:	74 0a                	je     c0021478 <FAT::rename(char const*, char const*)+0x1a>
c002146e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021476:	75 0a                	jne    c0021482 <FAT::rename(char const*, char const*)+0x24>
c0021478:	b8 04 00 00 00       	mov    eax,0x4
c002147d:	e9 98 00 00 00       	jmp    c002151a <FAT::rename(char const*, char const*)+0xbc>
c0021482:	83 ec 08             	sub    esp,0x8
c0021485:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002148c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021493:	50                   	push   eax
c0021494:	e8 9b f3 fd ff       	call   c0000834 <strcpy>
c0021499:	83 c4 10             	add    esp,0x10
c002149c:	83 ec 08             	sub    esp,0x8
c002149f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214a6:	50                   	push   eax
c00214a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ae:	e8 ed fa ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c00214b3:	83 c4 10             	add    esp,0x10
c00214b6:	83 ec 08             	sub    esp,0x8
c00214b9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214c4:	50                   	push   eax
c00214c5:	e8 6a f3 fd ff       	call   c0000834 <strcpy>
c00214ca:	83 c4 10             	add    esp,0x10
c00214cd:	83 ec 08             	sub    esp,0x8
c00214d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d4:	50                   	push   eax
c00214d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214dc:	e8 bf fa ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	83 ec 08             	sub    esp,0x8
c00214e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214eb:	50                   	push   eax
c00214ec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214f3:	50                   	push   eax
c00214f4:	e8 90 53 fe ff       	call   c0006889 <f_rename>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021503:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002150a:	85 c0                	test   eax,eax
c002150c:	75 07                	jne    c0021515 <FAT::rename(char const*, char const*)+0xb7>
c002150e:	b8 00 00 00 00       	mov    eax,0x0
c0021513:	eb 05                	jmp    c002151a <FAT::rename(char const*, char const*)+0xbc>
c0021515:	b8 01 00 00 00       	mov    eax,0x1
c002151a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021520:	c3                   	ret    
c0021521:	90                   	nop

c0021522 <FAT::mkdir(char const*)>:
c0021522:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021528:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021530:	75 07                	jne    c0021539 <FAT::mkdir(char const*)+0x17>
c0021532:	b8 04 00 00 00       	mov    eax,0x4
c0021537:	eb 5c                	jmp    c0021595 <FAT::mkdir(char const*)+0x73>
c0021539:	83 ec 08             	sub    esp,0x8
c002153c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021543:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021547:	50                   	push   eax
c0021548:	e8 e7 f2 fd ff       	call   c0000834 <strcpy>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	83 ec 08             	sub    esp,0x8
c0021553:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021557:	50                   	push   eax
c0021558:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155f:	e8 3c fa ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c0021564:	83 c4 10             	add    esp,0x10
c0021567:	83 ec 0c             	sub    esp,0xc
c002156a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002156e:	50                   	push   eax
c002156f:	e8 e9 50 fe ff       	call   c000665d <f_mkdir>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002157e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021585:	85 c0                	test   eax,eax
c0021587:	75 07                	jne    c0021590 <FAT::mkdir(char const*)+0x6e>
c0021589:	b8 00 00 00 00       	mov    eax,0x0
c002158e:	eb 05                	jmp    c0021595 <FAT::mkdir(char const*)+0x73>
c0021590:	b8 01 00 00 00       	mov    eax,0x1
c0021595:	81 c4 1c 01 00 00    	add    esp,0x11c
c002159b:	c3                   	ret    

c002159c <FAT::exists(char const*)>:
c002159c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215a2:	83 ec 08             	sub    esp,0x8
c00215a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215b0:	50                   	push   eax
c00215b1:	e8 7e f2 fd ff       	call   c0000834 <strcpy>
c00215b6:	83 c4 10             	add    esp,0x10
c00215b9:	83 ec 08             	sub    esp,0x8
c00215bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215c0:	50                   	push   eax
c00215c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215c8:	e8 d3 f9 ff ff       	call   c0020fa0 <FAT::fixFilepath(char*)>
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	83 ec 08             	sub    esp,0x8
c00215d3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215da:	50                   	push   eax
c00215db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215df:	50                   	push   eax
c00215e0:	e8 a3 4b fe ff       	call   c0006188 <f_stat>
c00215e5:	83 c4 10             	add    esp,0x10
c00215e8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215ef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215f6:	85 c0                	test   eax,eax
c00215f8:	75 04                	jne    c00215fe <FAT::exists(char const*)+0x62>
c00215fa:	b0 01                	mov    al,0x1
c00215fc:	eb 02                	jmp    c0021600 <FAT::exists(char const*)+0x64>
c00215fe:	b0 00                	mov    al,0x0
c0021600:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021606:	c3                   	ret    
c0021607:	90                   	nop

c0021608 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021608:	b8 08 00 00 00       	mov    eax,0x8
c002160d:	c3                   	ret    

c002160e <ISO9660::seek(void*, unsigned long long)>:
c002160e:	53                   	push   ebx
c002160f:	b8 04 00 00 00       	mov    eax,0x4
c0021614:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021618:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002161c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021620:	85 d2                	test   edx,edx
c0021622:	74 17                	je     c002163b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021624:	89 c8                	mov    eax,ecx
c0021626:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021629:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002162c:	b8 01 00 00 00       	mov    eax,0x1
c0021631:	73 08                	jae    c002163b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021633:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021636:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021639:	31 c0                	xor    eax,eax
c002163b:	5b                   	pop    ebx
c002163c:	c3                   	ret    
c002163d:	90                   	nop

c002163e <ISO9660::tell(void*, unsigned long long*)>:
c002163e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021646:	85 d2                	test   edx,edx
c0021648:	74 12                	je     c002165c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002164a:	85 c0                	test   eax,eax
c002164c:	74 0e                	je     c002165c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002164e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021651:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021654:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021657:	89 10                	mov    DWORD PTR [eax],edx
c0021659:	31 c0                	xor    eax,eax
c002165b:	c3                   	ret    
c002165c:	b8 04 00 00 00       	mov    eax,0x4
c0021661:	c3                   	ret    

c0021662 <ISO9660::getName()>:
c0021662:	b8 88 c8 02 c0       	mov    eax,0xc002c888
c0021667:	c3                   	ret    

c0021668 <ISO9660::stat(void*, unsigned long long*)>:
c0021668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002166c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021670:	85 d2                	test   edx,edx
c0021672:	74 12                	je     c0021686 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021674:	85 c0                	test   eax,eax
c0021676:	74 0e                	je     c0021686 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021678:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002167b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002167e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021681:	89 10                	mov    DWORD PTR [eax],edx
c0021683:	31 c0                	xor    eax,eax
c0021685:	c3                   	ret    
c0021686:	b8 04 00 00 00       	mov    eax,0x4
c002168b:	c3                   	ret    

c002168c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002168c:	b8 01 00 00 00       	mov    eax,0x1
c0021691:	c3                   	ret    

c0021692 <ISO9660::unlink(char const*)>:
c0021692:	b8 01 00 00 00       	mov    eax,0x1
c0021697:	c3                   	ret    

c0021698 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021698:	b8 01 00 00 00       	mov    eax,0x1
c002169d:	c3                   	ret    

c002169e <ISO9660::rename(char const*, char const*)>:
c002169e:	b8 01 00 00 00       	mov    eax,0x1
c00216a3:	c3                   	ret    

c00216a4 <ISO9660::mkdir(char const*)>:
c00216a4:	b8 01 00 00 00       	mov    eax,0x1
c00216a9:	c3                   	ret    

c00216aa <ISO9660::close(void*)>:
c00216aa:	83 ec 0c             	sub    esp,0xc
c00216ad:	b8 04 00 00 00       	mov    eax,0x4
c00216b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b6:	85 d2                	test   edx,edx
c00216b8:	74 0e                	je     c00216c8 <ISO9660::close(void*)+0x1e>
c00216ba:	83 ec 0c             	sub    esp,0xc
c00216bd:	52                   	push   edx
c00216be:	e8 90 e1 fe ff       	call   c000f853 <free>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	31 c0                	xor    eax,eax
c00216c8:	83 c4 0c             	add    esp,0xc
c00216cb:	c3                   	ret    

c00216cc <ISO9660::closeDir(void*)>:
c00216cc:	83 ec 0c             	sub    esp,0xc
c00216cf:	b8 04 00 00 00       	mov    eax,0x4
c00216d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d8:	85 d2                	test   edx,edx
c00216da:	74 0e                	je     c00216ea <ISO9660::closeDir(void*)+0x1e>
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	52                   	push   edx
c00216e0:	e8 6e e1 fe ff       	call   c000f853 <free>
c00216e5:	83 c4 10             	add    esp,0x10
c00216e8:	31 c0                	xor    eax,eax
c00216ea:	83 c4 0c             	add    esp,0xc
c00216ed:	c3                   	ret    

c00216ee <ISO9660::~ISO9660()>:
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	ba ec c8 02 c0       	mov    edx,0xc002c8ec
c00216f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216fa:	89 10                	mov    DWORD PTR [eax],edx
c00216fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	50                   	push   eax
c0021704:	e8 7d 1b ff ff       	call   c0013286 <Filesystem::~Filesystem()>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	90                   	nop
c002170d:	83 c4 0c             	add    esp,0xc
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <ISO9660::~ISO9660()>:
c0021712:	83 ec 0c             	sub    esp,0xc
c0021715:	83 ec 0c             	sub    esp,0xc
c0021718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002171c:	e8 cd ff ff ff       	call   c00216ee <ISO9660::~ISO9660()>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	83 ec 08             	sub    esp,0x8
c0021727:	6a 08                	push   0x8
c0021729:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002172d:	e8 4c 17 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0021732:	83 c4 10             	add    esp,0x10
c0021735:	83 c4 0c             	add    esp,0xc
c0021738:	c3                   	ret    

c0021739 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021739:	55                   	push   ebp
c002173a:	31 c9                	xor    ecx,ecx
c002173c:	57                   	push   edi
c002173d:	56                   	push   esi
c002173e:	53                   	push   ebx
c002173f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021743:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021747:	89 eb                	mov    ebx,ebp
c0021749:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002174d:	39 ce                	cmp    esi,ecx
c002174f:	7e 17                	jle    c0021768 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021751:	31 d2                	xor    edx,edx
c0021753:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021757:	7d 13                	jge    c002176c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021759:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002175d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021760:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021763:	75 0d                	jne    c0021772 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021765:	42                   	inc    edx
c0021766:	eb eb                	jmp    c0021753 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021768:	31 c0                	xor    eax,eax
c002176a:	eb 0a                	jmp    c0021776 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002176c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021770:	eb 04                	jmp    c0021776 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021772:	41                   	inc    ecx
c0021773:	43                   	inc    ebx
c0021774:	eb d7                	jmp    c002174d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021776:	5b                   	pop    ebx
c0021777:	5e                   	pop    esi
c0021778:	5f                   	pop    edi
c0021779:	5d                   	pop    ebp
c002177a:	c3                   	ret    

c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002177b:	56                   	push   esi
c002177c:	53                   	push   ebx
c002177d:	52                   	push   edx
c002177e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021782:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021786:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002178a:	39 0d 20 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b20,ecx
c0021790:	75 08                	jne    c002179a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021792:	38 05 54 d9 02 c0    	cmp    BYTE PTR ds:0xc002d954,al
c0021798:	74 2b                	je     c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002179a:	83 ec 0c             	sub    esp,0xc
c002179d:	a2 54 d9 02 c0       	mov    ds:0xc002d954,al
c00217a2:	68 40 1b 03 c0       	push   0xc0031b40
c00217a7:	0f be c0             	movsx  eax,al
c00217aa:	6a 01                	push   0x1
c00217ac:	89 0d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ecx
c00217b2:	31 db                	xor    ebx,ebx
c00217b4:	53                   	push   ebx
c00217b5:	51                   	push   ecx
c00217b6:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c00217bd:	e8 ac 4f ff ff       	call   c001676e <LogicalDisk::read(unsigned long long, int, void*)>
c00217c2:	83 c4 20             	add    esp,0x20
c00217c5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217cd:	c7 44 24 14 40 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b40
c00217d5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217d9:	58                   	pop    eax
c00217da:	5b                   	pop    ebx
c00217db:	5e                   	pop    esi
c00217dc:	e9 63 ef fd ff       	jmp    c0000744 <memcpy>
c00217e1:	90                   	nop

c00217e2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217e2:	81 ec 10 08 00 00    	sub    esp,0x810
c00217e8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217ef:	83 c0 41             	add    eax,0x41
c00217f2:	0f be c0             	movsx  eax,al
c00217f5:	50                   	push   eax
c00217f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217fa:	50                   	push   eax
c00217fb:	6a 10                	push   0x10
c00217fd:	e8 79 ff ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021802:	83 c4 10             	add    esp,0x10
c0021805:	31 c0                	xor    eax,eax
c0021807:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002180c:	75 1d                	jne    c002182b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021813:	75 16                	jne    c002182b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021815:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002181a:	75 0f                	jne    c002182b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002181c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021821:	75 08                	jne    c002182b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021823:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021828:	0f 94 c0             	sete   al
c002182b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021831:	c3                   	ret    

c0021832 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021832:	55                   	push   ebp
c0021833:	57                   	push   edi
c0021834:	56                   	push   esi
c0021835:	53                   	push   ebx
c0021836:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002183c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021843:	85 ed                	test   ebp,ebp
c0021845:	0f 84 d6 01 00 00    	je     c0021a21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002184b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021853:	0f 84 c8 01 00 00    	je     c0021a21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021859:	b8 01 00 00 00       	mov    eax,0x1
c002185e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021862:	0f 85 be 01 00 00    	jne    c0021a26 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021868:	31 d2                	xor    edx,edx
c002186a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021871:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021874:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021877:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002187b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002187e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021881:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021885:	01 f0                	add    eax,esi
c0021887:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002188a:	11 fa                	adc    edx,edi
c002188c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021890:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021894:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021898:	19 d1                	sbb    ecx,edx
c002189a:	72 0a                	jb     c00218a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002189c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218a4:	eb 13                	jmp    c00218b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ae:	29 f0                	sub    eax,esi
c00218b0:	19 fa                	sbb    edx,edi
c00218b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00218b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218bc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218bf:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218c3:	51                   	push   ecx
c00218c4:	c1 e0 0b             	shl    eax,0xb
c00218c7:	01 c6                	add    esi,eax
c00218c9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218cd:	11 d7                	adc    edi,edx
c00218cf:	50                   	push   eax
c00218d0:	89 fa                	mov    edx,edi
c00218d2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218d6:	89 f0                	mov    eax,esi
c00218d8:	53                   	push   ebx
c00218d9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218dd:	50                   	push   eax
c00218de:	e8 98 fe ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218ea:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218ee:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218f4:	83 c4 10             	add    esp,0x10
c00218f7:	b8 00 08 00 00       	mov    eax,0x800
c00218fc:	29 d0                	sub    eax,edx
c00218fe:	39 c1                	cmp    ecx,eax
c0021900:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021904:	83 d9 00             	sbb    ecx,0x0
c0021907:	7d 1c                	jge    c0021925 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021909:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002190e:	75 12                	jne    c0021922 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021910:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021917:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002191d:	e9 fb 00 00 00       	jmp    c0021a1d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021922:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021925:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021928:	31 d2                	xor    edx,edx
c002192a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002192e:	39 c2                	cmp    edx,eax
c0021930:	7d 14                	jge    c0021946 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021932:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021939:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002193d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021940:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021943:	42                   	inc    edx
c0021944:	eb e8                	jmp    c002192e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021946:	89 c3                	mov    ebx,eax
c0021948:	85 c0                	test   eax,eax
c002194a:	79 02                	jns    c002194e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002194c:	31 db                	xor    ebx,ebx
c002194e:	99                   	cdq    
c002194f:	01 c3                	add    ebx,eax
c0021951:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021958:	01 c6                	add    esi,eax
c002195a:	11 d7                	adc    edi,edx
c002195c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021960:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021964:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021967:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002196b:	29 c6                	sub    esi,eax
c002196d:	19 d7                	sbb    edi,edx
c002196f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021972:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021976:	b8 ff 07 00 00       	mov    eax,0x7ff
c002197b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002197e:	b8 00 00 00 00       	mov    eax,0x0
c0021983:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021987:	7d 3e                	jge    c00219c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021989:	52                   	push   edx
c002198a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198e:	50                   	push   eax
c002198f:	53                   	push   ebx
c0021990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021994:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021998:	0f ac d0 0b          	shrd   eax,edx,0xb
c002199c:	50                   	push   eax
c002199d:	e8 d9 fd ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219aa:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219af:	81 c3 00 08 00 00    	add    ebx,0x800
c00219b5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219bd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219c2:	83 c4 10             	add    esp,0x10
c00219c5:	eb af                	jmp    c0021976 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219cb:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ce:	74 32                	je     c0021a02 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219d0:	50                   	push   eax
c00219d1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d5:	50                   	push   eax
c00219d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219da:	50                   	push   eax
c00219db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219e3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219e7:	56                   	push   esi
c00219e8:	e8 8e fd ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ed:	83 c4 0c             	add    esp,0xc
c00219f0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219f8:	50                   	push   eax
c00219f9:	53                   	push   ebx
c00219fa:	e8 45 ed fd ff       	call   c0000744 <memcpy>
c00219ff:	83 c4 10             	add    esp,0x10
c0021a02:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a11:	89 38                	mov    DWORD PTR [eax],edi
c0021a13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a17:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a1a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a1d:	31 c0                	xor    eax,eax
c0021a1f:	eb 05                	jmp    c0021a26 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a21:	b8 04 00 00 00       	mov    eax,0x4
c0021a26:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a2c:	5b                   	pop    ebx
c0021a2d:	5e                   	pop    esi
c0021a2e:	5f                   	pop    edi
c0021a2f:	5d                   	pop    ebp
c0021a30:	c3                   	ret    
c0021a31:	90                   	nop

c0021a32 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a32:	55                   	push   ebp
c0021a33:	57                   	push   edi
c0021a34:	56                   	push   esi
c0021a35:	53                   	push   ebx
c0021a36:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a3c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a43:	85 f6                	test   esi,esi
c0021a45:	0f 84 64 02 00 00    	je     c0021caf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a4b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a53:	0f 84 56 02 00 00    	je     c0021caf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a59:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a5c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a5f:	75 0a                	jne    c0021a6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a61:	b8 07 00 00 00       	mov    eax,0x7
c0021a66:	e9 49 02 00 00       	jmp    c0021cb4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a6b:	50                   	push   eax
c0021a6c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a70:	50                   	push   eax
c0021a71:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a78:	53                   	push   ebx
c0021a79:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a7b:	c1 e0 0b             	shl    eax,0xb
c0021a7e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a81:	c1 e8 0b             	shr    eax,0xb
c0021a84:	50                   	push   eax
c0021a85:	e8 f1 fc ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a8a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a8d:	83 c4 10             	add    esp,0x10
c0021a90:	89 c1                	mov    ecx,eax
c0021a92:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a95:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a9b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a9e:	84 db                	test   bl,bl
c0021aa0:	0f 85 90 00 00 00    	jne    c0021b36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aa6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021aac:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ab2:	29 c7                	sub    edi,eax
c0021ab4:	89 fb                	mov    ebx,edi
c0021ab6:	c1 fb 1f             	sar    ebx,0x1f
c0021ab9:	01 f8                	add    eax,edi
c0021abb:	11 da                	adc    edx,ebx
c0021abd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ac1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ac8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021acb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ace:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ad4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ad8:	89 d8                	mov    eax,ebx
c0021ada:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021add:	ba 00 00 00 00       	mov    edx,0x0
c0021ae2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ae6:	b8 00 00 00 00       	mov    eax,0x0
c0021aeb:	73 0b                	jae    c0021af8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021af0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021af4:	29 f8                	sub    eax,edi
c0021af6:	19 da                	sbb    edx,ebx
c0021af8:	89 d3                	mov    ebx,edx
c0021afa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021afd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b00:	09 c3                	or     ebx,eax
c0021b02:	0f 84 59 ff ff ff    	je     c0021a61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b08:	55                   	push   ebp
c0021b09:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b0d:	50                   	push   eax
c0021b0e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b15:	53                   	push   ebx
c0021b16:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b18:	c1 e0 0b             	shl    eax,0xb
c0021b1b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b1f:	c1 e8 0b             	shr    eax,0xb
c0021b22:	50                   	push   eax
c0021b23:	e8 53 fc ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b28:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b2b:	83 c4 10             	add    esp,0x10
c0021b2e:	25 ff 07 00 00       	and    eax,0x7ff
c0021b33:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b36:	57                   	push   edi
c0021b37:	6a 28                	push   0x28
c0021b39:	6a 00                	push   0x0
c0021b3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b3f:	50                   	push   eax
c0021b40:	e8 33 ec fd ff       	call   c0000778 <memset>
c0021b45:	31 d2                	xor    edx,edx
c0021b47:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b4a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b50:	89 f8                	mov    eax,edi
c0021b52:	83 c0 21             	add    eax,0x21
c0021b55:	83 d2 00             	adc    edx,0x0
c0021b58:	89 c7                	mov    edi,eax
c0021b5a:	89 d5                	mov    ebp,edx
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	31 c9                	xor    ecx,ecx
c0021b61:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b68:	83 f9 28             	cmp    ecx,0x28
c0021b6b:	88 04 24             	mov    BYTE PTR [esp],al
c0021b6e:	0f 94 c2             	sete   dl
c0021b71:	88 d0                	mov    al,dl
c0021b73:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b78:	39 fa                	cmp    edx,edi
c0021b7a:	ba 00 00 00 00       	mov    edx,0x0
c0021b7f:	19 ea                	sbb    edx,ebp
c0021b81:	0f 92 c2             	setb   dl
c0021b84:	09 c2                	or     edx,eax
c0021b86:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b8a:	0f 94 c0             	sete   al
c0021b8d:	08 d0                	or     al,dl
c0021b8f:	75 16                	jne    c0021ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b91:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b95:	74 10                	je     c0021ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b97:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b9a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b9e:	41                   	inc    ecx
c0021b9f:	83 c7 01             	add    edi,0x1
c0021ba2:	83 d5 00             	adc    ebp,0x0
c0021ba5:	eb ba                	jmp    c0021b61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021ba7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bae:	83 ec 0c             	sub    esp,0xc
c0021bb1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bb5:	57                   	push   edi
c0021bb6:	e8 d9 eb fd ff       	call   c0000794 <strlen>
c0021bbb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bc3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bc7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bd1:	5a                   	pop    edx
c0021bd2:	25 ff 07 00 00       	and    eax,0x7ff
c0021bd7:	01 c8                	add    eax,ecx
c0021bd9:	59                   	pop    ecx
c0021bda:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021be0:	83 e0 02             	and    eax,0x2
c0021be3:	3c 01                	cmp    al,0x1
c0021be5:	19 c0                	sbb    eax,eax
c0021be7:	83 c0 02             	add    eax,0x2
c0021bea:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bee:	57                   	push   edi
c0021bef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bf3:	50                   	push   eax
c0021bf4:	e8 3b ec fd ff       	call   c0000834 <strcpy>
c0021bf9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	84 c0                	test   al,al
c0021c02:	75 21                	jne    c0021c25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c04:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c0c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c14:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c1c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c23:	eb 28                	jmp    c0021c4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c25:	fe c8                	dec    al
c0021c27:	75 24                	jne    c0021c4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c29:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c31:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c39:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c41:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c48:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c4d:	0f b6 fb             	movzx  edi,bl
c0021c50:	31 db                	xor    ebx,ebx
c0021c52:	50                   	push   eax
c0021c53:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c5a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c5e:	50                   	push   eax
c0021c5f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c66:	e8 d9 ea fd ff       	call   c0000744 <memcpy>
c0021c6b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c72:	89 f9                	mov    ecx,edi
c0021c74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c7a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c7d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c80:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c83:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c86:	83 c4 10             	add    esp,0x10
c0021c89:	39 c7                	cmp    edi,eax
c0021c8b:	89 df                	mov    edi,ebx
c0021c8d:	19 d7                	sbb    edi,edx
c0021c8f:	72 10                	jb     c0021ca1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c91:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c98:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c9f:	eb 0a                	jmp    c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ca1:	29 c8                	sub    eax,ecx
c0021ca3:	19 da                	sbb    edx,ebx
c0021ca5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ca8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cab:	31 c0                	xor    eax,eax
c0021cad:	eb 05                	jmp    c0021cb4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021caf:	b8 04 00 00 00       	mov    eax,0x4
c0021cb4:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cba:	5b                   	pop    ebx
c0021cbb:	5e                   	pop    esi
c0021cbc:	5f                   	pop    edi
c0021cbd:	5d                   	pop    ebp
c0021cbe:	c3                   	ret    

c0021cbf <readRoot(unsigned int*, unsigned int*, char)>:
c0021cbf:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cc5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ccd:	50                   	push   eax
c0021cce:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cd2:	50                   	push   eax
c0021cd3:	6a 10                	push   0x10
c0021cd5:	e8 a1 fa ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cda:	83 c4 0c             	add    esp,0xc
c0021cdd:	6a 22                	push   0x22
c0021cdf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ce6:	50                   	push   eax
c0021ce7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ceb:	50                   	push   eax
c0021cec:	e8 53 ea fd ff       	call   c0000744 <memcpy>
c0021cf1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cfc:	89 10                	mov    DWORD PTR [eax],edx
c0021cfe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d09:	89 10                	mov    DWORD PTR [eax],edx
c0021d0b:	b0 01                	mov    al,0x1
c0021d0d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d13:	c3                   	ret    

c0021d14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d14:	55                   	push   ebp
c0021d15:	57                   	push   edi
c0021d16:	56                   	push   esi
c0021d17:	53                   	push   ebx
c0021d18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d1e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d25:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d30:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d34:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d3c:	75 03                	jne    c0021d41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d3e:	83 c3 02             	add    ebx,0x2
c0021d41:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d44:	75 03                	jne    c0021d49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d46:	43                   	inc    ebx
c0021d47:	eb f8                	jmp    c0021d41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d49:	51                   	push   ecx
c0021d4a:	68 00 01 00 00       	push   0x100
c0021d4f:	6a 00                	push   0x0
c0021d51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d55:	50                   	push   eax
c0021d56:	e8 1d ea fd ff       	call   c0000778 <memset>
c0021d5b:	83 c4 10             	add    esp,0x10
c0021d5e:	31 d2                	xor    edx,edx
c0021d60:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d63:	84 c0                	test   al,al
c0021d65:	74 21                	je     c0021d88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d67:	3c 2f                	cmp    al,0x2f
c0021d69:	75 0b                	jne    c0021d76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d6b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0021d74:	eb 14                	jmp    c0021d8a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d76:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d79:	80 f9 19             	cmp    cl,0x19
c0021d7c:	77 03                	ja     c0021d81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d7e:	83 e8 20             	sub    eax,0x20
c0021d81:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d85:	42                   	inc    edx
c0021d86:	eb d8                	jmp    c0021d60 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d88:	31 ed                	xor    ebp,ebp
c0021d8a:	83 ec 0c             	sub    esp,0xc
c0021d8d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d94:	e8 aa da fe ff       	call   c000f843 <malloc>
c0021d99:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021da0:	89 c6                	mov    esi,eax
c0021da2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021da8:	c1 ef 0b             	shr    edi,0xb
c0021dab:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021db2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021db6:	83 c4 10             	add    esp,0x10
c0021db9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dc2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dc9:	74 28                	je     c0021df3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dcb:	52                   	push   edx
c0021dcc:	57                   	push   edi
c0021dcd:	50                   	push   eax
c0021dce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dd2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dd9:	e8 9d f9 ff ff       	call   c002177b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021de2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021de9:	05 00 08 00 00       	add    eax,0x800
c0021dee:	83 c4 10             	add    esp,0x10
c0021df1:	eb cb                	jmp    c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021df3:	83 ec 0c             	sub    esp,0xc
c0021df6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dfa:	57                   	push   edi
c0021dfb:	e8 94 e9 fd ff       	call   c0000794 <strlen>
c0021e00:	50                   	push   eax
c0021e01:	57                   	push   edi
c0021e02:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e09:	56                   	push   esi
c0021e0a:	e8 2a f9 ff ff       	call   c0021739 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e0f:	83 c4 20             	add    esp,0x20
c0021e12:	85 c0                	test   eax,eax
c0021e14:	75 13                	jne    c0021e29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	56                   	push   esi
c0021e1a:	e8 34 da fe ff       	call   c000f853 <free>
c0021e1f:	83 c4 10             	add    esp,0x10
c0021e22:	31 c0                	xor    eax,eax
c0021e24:	e9 b3 00 00 00       	jmp    c0021edc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e29:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e2d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e31:	c1 e7 08             	shl    edi,0x8
c0021e34:	c1 e2 10             	shl    edx,0x10
c0021e37:	09 d7                	or     edi,edx
c0021e39:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e3d:	09 d7                	or     edi,edx
c0021e3f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e43:	c1 e2 18             	shl    edx,0x18
c0021e46:	09 d7                	or     edi,edx
c0021e48:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e4c:	89 d1                	mov    ecx,edx
c0021e4e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e52:	c1 e1 08             	shl    ecx,0x8
c0021e55:	c1 e2 10             	shl    edx,0x10
c0021e58:	09 ca                	or     edx,ecx
c0021e5a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e5e:	09 ca                	or     edx,ecx
c0021e60:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e64:	c1 e1 18             	shl    ecx,0x18
c0021e67:	09 ca                	or     edx,ecx
c0021e69:	89 e9                	mov    ecx,ebp
c0021e6b:	84 c9                	test   cl,cl
c0021e6d:	74 3c                	je     c0021eab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e6f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e73:	83 ec 0c             	sub    esp,0xc
c0021e76:	56                   	push   esi
c0021e77:	e8 d7 d9 fe ff       	call   c000f853 <free>
c0021e7c:	83 c4 0c             	add    esp,0xc
c0021e7f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e86:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e8b:	50                   	push   eax
c0021e8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e9e:	52                   	push   edx
c0021e9f:	57                   	push   edi
c0021ea0:	53                   	push   ebx
c0021ea1:	e8 6e fe ff ff       	call   c0021d14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ea6:	83 c4 20             	add    esp,0x20
c0021ea9:	eb 31                	jmp    c0021edc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021eab:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eae:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eb5:	d0 e8                	shr    al,1
c0021eb7:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eb9:	83 e0 01             	and    eax,0x1
c0021ebc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ec3:	83 ec 0c             	sub    esp,0xc
c0021ec6:	89 13                	mov    DWORD PTR [ebx],edx
c0021ec8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ecf:	89 03                	mov    DWORD PTR [ebx],eax
c0021ed1:	56                   	push   esi
c0021ed2:	e8 7c d9 fe ff       	call   c000f853 <free>
c0021ed7:	83 c4 10             	add    esp,0x10
c0021eda:	b0 01                	mov    al,0x1
c0021edc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ee2:	5b                   	pop    ebx
c0021ee3:	5e                   	pop    esi
c0021ee4:	5f                   	pop    edi
c0021ee5:	5d                   	pop    ebp
c0021ee6:	c3                   	ret    

c0021ee7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ee7:	55                   	push   ebp
c0021ee8:	57                   	push   edi
c0021ee9:	56                   	push   esi
c0021eea:	53                   	push   ebx
c0021eeb:	83 ec 20             	sub    esp,0x20
c0021eee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ef2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ef6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021efa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f02:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f0a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f0f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f15:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f1b:	57                   	push   edi
c0021f1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f20:	50                   	push   eax
c0021f21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f25:	50                   	push   eax
c0021f26:	e8 94 fd ff ff       	call   c0021cbf <readRoot(unsigned int*, unsigned int*, char)>
c0021f2b:	5a                   	pop    edx
c0021f2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f30:	e8 5f e8 fd ff       	call   c0000794 <strlen>
c0021f35:	83 c4 10             	add    esp,0x10
c0021f38:	83 f8 03             	cmp    eax,0x3
c0021f3b:	77 17                	ja     c0021f54 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f41:	89 03                	mov    DWORD PTR [ebx],eax
c0021f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f47:	89 06                	mov    DWORD PTR [esi],eax
c0021f49:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f50:	b0 01                	mov    al,0x1
c0021f52:	eb 19                	jmp    c0021f6d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f54:	50                   	push   eax
c0021f55:	55                   	push   ebp
c0021f56:	57                   	push   edi
c0021f57:	56                   	push   esi
c0021f58:	53                   	push   ebx
c0021f59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f65:	e8 aa fd ff ff       	call   c0021d14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f6a:	83 c4 20             	add    esp,0x20
c0021f6d:	83 c4 1c             	add    esp,0x1c
c0021f70:	5b                   	pop    ebx
c0021f71:	5e                   	pop    esi
c0021f72:	5f                   	pop    edi
c0021f73:	5d                   	pop    ebp
c0021f74:	c3                   	ret    
c0021f75:	90                   	nop

c0021f76 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f76:	57                   	push   edi
c0021f77:	56                   	push   esi
c0021f78:	53                   	push   ebx
c0021f79:	83 ec 10             	sub    esp,0x10
c0021f7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f84:	85 ff                	test   edi,edi
c0021f86:	0f 84 9d 00 00 00    	je     c0022029 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f8c:	85 f6                	test   esi,esi
c0021f8e:	0f 84 95 00 00 00    	je     c0022029 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f94:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f99:	74 17                	je     c0021fb2 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f9b:	83 ec 0c             	sub    esp,0xc
c0021f9e:	68 a3 c8 02 c0       	push   0xc002c8a3
c0021fa3:	e8 b6 0f ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0021fa8:	83 c4 10             	add    esp,0x10
c0021fab:	b8 03 00 00 00       	mov    eax,0x3
c0021fb0:	eb 7c                	jmp    c002202e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb2:	83 ec 0c             	sub    esp,0xc
c0021fb5:	6a 1c                	push   0x1c
c0021fb7:	e8 87 d8 fe ff       	call   c000f843 <malloc>
c0021fbc:	89 07                	mov    DWORD PTR [edi],eax
c0021fbe:	89 c3                	mov    ebx,eax
c0021fc0:	58                   	pop    eax
c0021fc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fc5:	50                   	push   eax
c0021fc6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc9:	50                   	push   eax
c0021fca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fce:	50                   	push   eax
c0021fcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fd3:	50                   	push   eax
c0021fd4:	56                   	push   esi
c0021fd5:	e8 0d ff ff ff       	call   c0021ee7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fda:	83 c4 20             	add    esp,0x20
c0021fdd:	84 c0                	test   al,al
c0021fdf:	74 07                	je     c0021fe8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fe1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe6:	74 0b                	je     c0021ff3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fe8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fec:	b8 01 00 00 00       	mov    eax,0x1
c0021ff1:	eb 3b                	jmp    c002202e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ffb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022008:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002200f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022016:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022019:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022020:	8a 06                	mov    al,BYTE PTR [esi]
c0022022:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022025:	31 c0                	xor    eax,eax
c0022027:	eb 05                	jmp    c002202e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022029:	b8 04 00 00 00       	mov    eax,0x4
c002202e:	83 c4 10             	add    esp,0x10
c0022031:	5b                   	pop    ebx
c0022032:	5e                   	pop    esi
c0022033:	5f                   	pop    edi
c0022034:	c3                   	ret    
c0022035:	90                   	nop

c0022036 <ISO9660::exists(char const*)>:
c0022036:	83 ec 28             	sub    esp,0x28
c0022039:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002203d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022041:	52                   	push   edx
c0022042:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022045:	52                   	push   edx
c0022046:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204a:	52                   	push   edx
c002204b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204f:	52                   	push   edx
c0022050:	50                   	push   eax
c0022051:	e8 91 fe ff ff       	call   c0021ee7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022056:	83 c4 3c             	add    esp,0x3c
c0022059:	c3                   	ret    

c002205a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002205a:	56                   	push   esi
c002205b:	53                   	push   ebx
c002205c:	83 ec 14             	sub    esp,0x14
c002205f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022063:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022067:	85 db                	test   ebx,ebx
c0022069:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002206d:	0f 94 c2             	sete   dl
c0022070:	85 f6                	test   esi,esi
c0022072:	0f 94 c0             	sete   al
c0022075:	08 c2                	or     dl,al
c0022077:	75 68                	jne    c00220e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022079:	85 c9                	test   ecx,ecx
c002207b:	74 64                	je     c00220e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002207d:	83 ec 0c             	sub    esp,0xc
c0022080:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022083:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022087:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002208d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022094:	50                   	push   eax
c0022095:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022098:	50                   	push   eax
c0022099:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002209d:	50                   	push   eax
c002209e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220a2:	50                   	push   eax
c00220a3:	51                   	push   ecx
c00220a4:	e8 3e fe ff ff       	call   c0021ee7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a9:	83 c4 20             	add    esp,0x20
c00220ac:	ba 01 00 00 00       	mov    edx,0x1
c00220b1:	84 c0                	test   al,al
c00220b3:	74 31                	je     c00220e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c0:	89 03                	mov    DWORD PTR [ebx],eax
c00220c2:	ba 00 00 00 00       	mov    edx,0x0
c00220c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220cb:	85 c0                	test   eax,eax
c00220cd:	0f 95 06             	setne  BYTE PTR [esi]
c00220d0:	74 14                	je     c00220e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220df:	eb 05                	jmp    c00220e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220e1:	ba 04 00 00 00       	mov    edx,0x4
c00220e6:	83 c4 14             	add    esp,0x14
c00220e9:	89 d0                	mov    eax,edx
c00220eb:	5b                   	pop    ebx
c00220ec:	5e                   	pop    esi
c00220ed:	c3                   	ret    

c00220ee <ISO9660::openDir(char const*, void**)>:
c00220ee:	57                   	push   edi
c00220ef:	56                   	push   esi
c00220f0:	53                   	push   ebx
c00220f1:	83 ec 10             	sub    esp,0x10
c00220f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220fc:	85 ff                	test   edi,edi
c00220fe:	0f 84 95 00 00 00    	je     c0022199 <ISO9660::openDir(char const*, void**)+0xab>
c0022104:	85 f6                	test   esi,esi
c0022106:	0f 84 8d 00 00 00    	je     c0022199 <ISO9660::openDir(char const*, void**)+0xab>
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	6a 1c                	push   0x1c
c0022111:	e8 2d d7 fe ff       	call   c000f843 <malloc>
c0022116:	89 07                	mov    DWORD PTR [edi],eax
c0022118:	89 c3                	mov    ebx,eax
c002211a:	59                   	pop    ecx
c002211b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002211f:	50                   	push   eax
c0022120:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022123:	50                   	push   eax
c0022124:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022128:	50                   	push   eax
c0022129:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002212d:	50                   	push   eax
c002212e:	56                   	push   esi
c002212f:	e8 b3 fd ff ff       	call   c0021ee7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022134:	83 c4 20             	add    esp,0x20
c0022137:	84 c0                	test   al,al
c0022139:	74 07                	je     c0022142 <ISO9660::openDir(char const*, void**)+0x54>
c002213b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022140:	75 21                	jne    c0022163 <ISO9660::openDir(char const*, void**)+0x75>
c0022142:	0f b6 c0             	movzx  eax,al
c0022145:	52                   	push   edx
c0022146:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002214a:	50                   	push   eax
c002214b:	68 c9 c8 02 c0       	push   0xc002c8c9
c0022150:	e8 09 0e ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0022155:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022159:	83 c4 10             	add    esp,0x10
c002215c:	b8 01 00 00 00       	mov    eax,0x1
c0022161:	eb 3b                	jmp    c002219e <ISO9660::openDir(char const*, void**)+0xb0>
c0022163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022167:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002216b:	89 03                	mov    DWORD PTR [ebx],eax
c002216d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022178:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002217f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022186:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022189:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022190:	8a 06                	mov    al,BYTE PTR [esi]
c0022192:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022195:	31 c0                	xor    eax,eax
c0022197:	eb 05                	jmp    c002219e <ISO9660::openDir(char const*, void**)+0xb0>
c0022199:	b8 04 00 00 00       	mov    eax,0x4
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	5b                   	pop    ebx
c00221a2:	5e                   	pop    esi
c00221a3:	5f                   	pop    edi
c00221a4:	c3                   	ret    
c00221a5:	90                   	nop

c00221a6 <ISO9660::ISO9660()>:
c00221a6:	83 ec 0c             	sub    esp,0xc
c00221a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ad:	83 ec 0c             	sub    esp,0xc
c00221b0:	50                   	push   eax
c00221b1:	e8 ac 10 ff ff       	call   c0013262 <Filesystem::Filesystem()>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	ba ec c8 02 c0       	mov    edx,0xc002c8ec
c00221be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c2:	89 10                	mov    DWORD PTR [eax],edx
c00221c4:	90                   	nop
c00221c5:	83 c4 0c             	add    esp,0xc
c00221c8:	c3                   	ret    
c00221c9:	90                   	nop

c00221ca <SoundChannel::~SoundChannel()>:
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	50                   	push   eax
c00221d8:	e8 76 d6 fe ff       	call   c000f853 <free>
c00221dd:	83 c4 10             	add    esp,0x10
c00221e0:	90                   	nop
c00221e1:	83 c4 0c             	add    esp,0xc
c00221e4:	c3                   	ret    
c00221e5:	90                   	nop

c00221e6 <SoundChannel::setSpeed(float)>:
c00221e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221f1:	c3                   	ret    

c00221f2 <SoundChannel::getSpeed()>:
c00221f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221f9:	c3                   	ret    

c00221fa <SoundChannel::setVolume(int)>:
c00221fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fe:	83 f8 64             	cmp    eax,0x64
c0022201:	7e 05                	jle    c0022208 <SoundChannel::setVolume(int)+0xe>
c0022203:	b8 64 00 00 00       	mov    eax,0x64
c0022208:	85 c0                	test   eax,eax
c002220a:	79 02                	jns    c002220e <SoundChannel::setVolume(int)+0x14>
c002220c:	31 c0                	xor    eax,eax
c002220e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022212:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022215:	c3                   	ret    

c0022216 <SoundChannel::getVolume()>:
c0022216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002221d:	c3                   	ret    

c002221e <SoundChannel::pause()>:
c002221e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022222:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022226:	c3                   	ret    
c0022227:	90                   	nop

c0022228 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022228:	83 ec 1c             	sub    esp,0x1c
c002222b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002222f:	e8 ea ff ff ff       	call   c002221e <SoundChannel::pause()>
c0022234:	83 c4 04             	add    esp,0x4
c0022237:	6a 50                	push   0x50
c0022239:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002223d:	e8 b8 ff ff ff       	call   c00221fa <SoundChannel::setVolume(int)>
c0022242:	83 c4 08             	add    esp,0x8
c0022245:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c002224a:	50                   	push   eax
c002224b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002224f:	e8 92 ff ff ff       	call   c00221e6 <SoundChannel::setSpeed(float)>
c0022254:	83 c4 08             	add    esp,0x8
c0022257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002225b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002225f:	89 10                	mov    DWORD PTR [eax],edx
c0022261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022269:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002226c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022270:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022274:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022277:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002227c:	75 23                	jne    c00222a1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002227e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022282:	8b 10                	mov    edx,DWORD PTR [eax]
c0022284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002228b:	0f af c2             	imul   eax,edx
c002228e:	85 c0                	test   eax,eax
c0022290:	79 03                	jns    c0022295 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022292:	83 c0 03             	add    eax,0x3
c0022295:	c1 f8 02             	sar    eax,0x2
c0022298:	05 a0 0f 00 00       	add    eax,0xfa0
c002229d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222a9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c9:	c1 e0 02             	shl    eax,0x2
c00222cc:	83 ec 0c             	sub    esp,0xc
c00222cf:	50                   	push   eax
c00222d0:	e8 6e d5 fe ff       	call   c000f843 <malloc>
c00222d5:	83 c4 10             	add    esp,0x10
c00222d8:	89 c2                	mov    edx,eax
c00222da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222e1:	83 ec 04             	sub    esp,0x4
c00222e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222e8:	50                   	push   eax
c00222e9:	6a 01                	push   0x1
c00222eb:	6a 04                	push   0x4
c00222ed:	e8 ad 68 fe ff       	call   c0008b9f <src_new>
c00222f2:	83 c4 10             	add    esp,0x10
c00222f5:	89 c2                	mov    edx,eax
c00222f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022302:	85 c0                	test   eax,eax
c0022304:	74 10                	je     c0022316 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022306:	83 ec 0c             	sub    esp,0xc
c0022309:	68 48 c9 02 c0       	push   0xc002c948
c002230e:	e8 ec 82 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0022313:	83 c4 10             	add    esp,0x10
c0022316:	a0 40 27 03 c0       	mov    al,ds:0xc0032740
c002231b:	83 f0 01             	xor    eax,0x1
c002231e:	84 c0                	test   al,al
c0022320:	74 57                	je     c0022379 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022322:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0022327:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002232b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022333:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002233b:	7f 35                	jg     c0022372 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002233d:	83 ec 0c             	sub    esp,0xc
c0022340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022344:	e8 9e 4f 00 00       	call   c00272e7 <__floatsisf>
c0022349:	83 c4 10             	add    esp,0x10
c002234c:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0022352:	83 ec 08             	sub    esp,0x8
c0022355:	52                   	push   edx
c0022356:	50                   	push   eax
c0022357:	e8 9d 4b 00 00       	call   c0026ef9 <__mulsf3>
c002235c:	83 c4 10             	add    esp,0x10
c002235f:	89 c2                	mov    edx,eax
c0022361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022365:	89 14 85 40 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdcc0],edx
c002236c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022370:	eb c1                	jmp    c0022333 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022372:	c6 05 40 27 03 c0 01 	mov    BYTE PTR ds:0xc0032740,0x1
c0022379:	90                   	nop
c002237a:	83 c4 1c             	add    esp,0x1c
c002237d:	c3                   	ret    

c002237e <SoundChannel::play()>:
c002237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022382:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022386:	c3                   	ret    
c0022387:	90                   	nop

c0022388 <SoundChannel::paused()>:
c0022388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002238f:	c3                   	ret    

c0022390 <SoundChannel::getSampleRate()>:
c0022390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022394:	8b 00                	mov    eax,DWORD PTR [eax]
c0022396:	c3                   	ret    
c0022397:	90                   	nop

c0022398 <SoundChannel::getBits()>:
c0022398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239f:	c3                   	ret    

c00223a0 <SoundChannel::getBufferUsed()>:
c00223a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223a7:	c3                   	ret    

c00223a8 <SoundChannel::getBufferSize()>:
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223af:	c3                   	ret    

c00223b0 <SoundChannel::unbuffer(float*, int, int)>:
c00223b0:	56                   	push   esi
c00223b1:	53                   	push   ebx
c00223b2:	83 ec 40             	sub    esp,0x40
c00223b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223db:	e8 07 4f 00 00       	call   c00272e7 <__floatsisf>
c00223e0:	5a                   	pop    edx
c00223e1:	89 c6                	mov    esi,eax
c00223e3:	ff 33                	push   DWORD PTR [ebx]
c00223e5:	e8 fd 4e 00 00       	call   c00272e7 <__floatsisf>
c00223ea:	59                   	pop    ecx
c00223eb:	5a                   	pop    edx
c00223ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223ef:	50                   	push   eax
c00223f0:	e8 04 4b 00 00       	call   c0026ef9 <__mulsf3>
c00223f5:	59                   	pop    ecx
c00223f6:	5a                   	pop    edx
c00223f7:	50                   	push   eax
c00223f8:	56                   	push   esi
c00223f9:	e8 be 4c 00 00       	call   c00270bc <__divsf3>
c00223fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0022401:	e8 b1 61 00 00       	call   c00285b7 <__extendsfdf2>
c0022406:	59                   	pop    ecx
c0022407:	5e                   	pop    esi
c0022408:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002240c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022410:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022418:	8d 44 24 14          	lea    eax,[esp+0x14]
c002241c:	50                   	push   eax
c002241d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022420:	e8 6f 63 fe ff       	call   c0008794 <src_process>
c0022425:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022429:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002242c:	83 c4 0c             	add    esp,0xc
c002242f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022432:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022435:	29 d0                	sub    eax,edx
c0022437:	c1 e0 02             	shl    eax,0x2
c002243a:	50                   	push   eax
c002243b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002243e:	50                   	push   eax
c002243f:	51                   	push   ecx
c0022440:	e8 37 e2 fd ff       	call   c000067c <memmove>
c0022445:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022449:	83 c4 44             	add    esp,0x44
c002244c:	5b                   	pop    ebx
c002244d:	5e                   	pop    esi
c002244e:	c3                   	ret    
c002244f:	90                   	nop

c0022450 <SoundChannel::buffer8(unsigned char*, int)>:
c0022450:	55                   	push   ebp
c0022451:	57                   	push   edi
c0022452:	56                   	push   esi
c0022453:	53                   	push   ebx
c0022454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022458:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002245c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002245f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022463:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022466:	74 7a                	je     c00224e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022468:	85 ff                	test   edi,edi
c002246a:	7e 76                	jle    c00224e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002246c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022470:	8d 70 01             	lea    esi,[eax+0x1]
c0022473:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022476:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022479:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c0022480:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022483:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022486:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022489:	74 5e                	je     c00224e9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002248b:	83 ff 01             	cmp    edi,0x1
c002248e:	74 4b                	je     c00224db <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022490:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022494:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022497:	8d 70 01             	lea    esi,[eax+0x1]
c002249a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002249d:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c00224a4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a7:	b8 02 00 00 00       	mov    eax,0x2
c00224ac:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224af:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224b2:	75 23                	jne    c00224d7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224b4:	eb 27                	jmp    c00224dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224b6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224bb:	8d 71 01             	lea    esi,[ecx+0x1]
c00224be:	40                   	inc    eax
c00224bf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224c5:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c00224cc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224cf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224d2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d5:	74 06                	je     c00224dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d7:	39 c7                	cmp    edi,eax
c00224d9:	75 db                	jne    c00224b6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224db:	89 f8                	mov    eax,edi
c00224dd:	5b                   	pop    ebx
c00224de:	5e                   	pop    esi
c00224df:	5f                   	pop    edi
c00224e0:	5d                   	pop    ebp
c00224e1:	c3                   	ret    
c00224e2:	5b                   	pop    ebx
c00224e3:	31 c0                	xor    eax,eax
c00224e5:	5e                   	pop    esi
c00224e6:	5f                   	pop    edi
c00224e7:	5d                   	pop    ebp
c00224e8:	c3                   	ret    
c00224e9:	b8 01 00 00 00       	mov    eax,0x1
c00224ee:	eb ed                	jmp    c00224dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224f0 <SoundDevice::SoundDevice(char const*)>:
c00224f0:	83 ec 1c             	sub    esp,0x1c
c00224f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f7:	83 ec 08             	sub    esp,0x8
c00224fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224fe:	50                   	push   eax
c00224ff:	e8 70 20 ff ff       	call   c0014574 <Device::Device(char const*)>
c0022504:	83 c4 10             	add    esp,0x10
c0022507:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c002250c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022510:	89 10                	mov    DWORD PTR [eax],edx
c0022512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022516:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022524:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002252e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022536:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002253b:	7f 19                	jg     c0022556 <SoundDevice::SoundDevice(char const*)+0x66>
c002253d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022545:	83 c2 54             	add    edx,0x54
c0022548:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022550:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022554:	eb e0                	jmp    c0022536 <SoundDevice::SoundDevice(char const*)+0x46>
c0022556:	90                   	nop
c0022557:	83 c4 1c             	add    esp,0x1c
c002255a:	c3                   	ret    
c002255b:	90                   	nop

c002255c <SoundDevice::~SoundDevice()>:
c002255c:	53                   	push   ebx
c002255d:	83 ec 18             	sub    esp,0x18
c0022560:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c0022565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022569:	89 10                	mov    DWORD PTR [eax],edx
c002256b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022573:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022578:	7f 46                	jg     c00225c0 <SoundDevice::~SoundDevice()+0x64>
c002257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022582:	83 c2 54             	add    edx,0x54
c0022585:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022589:	85 c0                	test   eax,eax
c002258b:	74 2d                	je     c00225ba <SoundDevice::~SoundDevice()+0x5e>
c002258d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022591:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022595:	83 c2 54             	add    edx,0x54
c0022598:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002259c:	85 db                	test   ebx,ebx
c002259e:	74 1a                	je     c00225ba <SoundDevice::~SoundDevice()+0x5e>
c00225a0:	83 ec 0c             	sub    esp,0xc
c00225a3:	53                   	push   ebx
c00225a4:	e8 21 fc ff ff       	call   c00221ca <SoundChannel::~SoundChannel()>
c00225a9:	83 c4 10             	add    esp,0x10
c00225ac:	83 ec 08             	sub    esp,0x8
c00225af:	6a 2c                	push   0x2c
c00225b1:	53                   	push   ebx
c00225b2:	e8 c7 08 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225be:	eb b3                	jmp    c0022573 <SoundDevice::~SoundDevice()+0x17>
c00225c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c4:	83 ec 0c             	sub    esp,0xc
c00225c7:	50                   	push   eax
c00225c8:	e8 89 1c ff ff       	call   c0014256 <Device::~Device()>
c00225cd:	83 c4 10             	add    esp,0x10
c00225d0:	90                   	nop
c00225d1:	83 c4 18             	add    esp,0x18
c00225d4:	5b                   	pop    ebx
c00225d5:	c3                   	ret    

c00225d6 <SoundDevice::~SoundDevice()>:
c00225d6:	83 ec 0c             	sub    esp,0xc
c00225d9:	83 ec 0c             	sub    esp,0xc
c00225dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e0:	e8 77 ff ff ff       	call   c002255c <SoundDevice::~SoundDevice()>
c00225e5:	83 c4 10             	add    esp,0x10
c00225e8:	83 ec 08             	sub    esp,0x8
c00225eb:	68 e4 01 00 00       	push   0x1e4
c00225f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f4:	e8 85 08 ff ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00225f9:	83 c4 10             	add    esp,0x10
c00225fc:	83 c4 0c             	add    esp,0xc
c00225ff:	c3                   	ret    

c0022600 <SoundDevice::getFreeChannelNum()>:
c0022600:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022604:	31 c0                	xor    eax,eax
c0022606:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002260e:	74 09                	je     c0022619 <SoundDevice::getFreeChannelNum()+0x19>
c0022610:	40                   	inc    eax
c0022611:	83 f8 20             	cmp    eax,0x20
c0022614:	75 f0                	jne    c0022606 <SoundDevice::getFreeChannelNum()+0x6>
c0022616:	83 c8 ff             	or     eax,0xffffffff
c0022619:	c3                   	ret    

c002261a <SoundDevice::addChannel(SoundChannel*)>:
c002261a:	56                   	push   esi
c002261b:	53                   	push   ebx
c002261c:	51                   	push   ecx
c002261d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022621:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022625:	53                   	push   ebx
c0022626:	e8 d5 ff ff ff       	call   c0022600 <SoundDevice::getFreeChannelNum()>
c002262b:	5a                   	pop    edx
c002262c:	83 f8 ff             	cmp    eax,0xffffffff
c002262f:	74 51                	je     c0022682 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022631:	85 f6                	test   esi,esi
c0022633:	74 4d                	je     c0022682 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022635:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002263c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022643:	75 30                	jne    c0022675 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022645:	83 ec 0c             	sub    esp,0xc
c0022648:	56                   	push   esi
c0022649:	e8 42 fd ff ff       	call   c0022390 <SoundChannel::getSampleRate()>
c002264e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022654:	89 34 24             	mov    DWORD PTR [esp],esi
c0022657:	e8 3c fd ff ff       	call   c0022398 <SoundChannel::getBits()>
c002265c:	83 c4 0c             	add    esp,0xc
c002265f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022665:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022667:	50                   	push   eax
c0022668:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002266e:	53                   	push   ebx
c002266f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022672:	83 c4 10             	add    esp,0x10
c0022675:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002267b:	b8 01 00 00 00       	mov    eax,0x1
c0022680:	eb 03                	jmp    c0022685 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022682:	83 c8 ff             	or     eax,0xffffffff
c0022685:	5a                   	pop    edx
c0022686:	5b                   	pop    ebx
c0022687:	5e                   	pop    esi
c0022688:	c3                   	ret    
c0022689:	90                   	nop

c002268a <SoundDevice::removeChannel(int)>:
c002268a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002268e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022692:	83 fa 1f             	cmp    edx,0x1f
c0022695:	77 23                	ja     c00226ba <SoundDevice::removeChannel(int)+0x30>
c0022697:	8d 14 90             	lea    edx,[eax+edx*4]
c002269a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226a1:	74 17                	je     c00226ba <SoundDevice::removeChannel(int)+0x30>
c00226a3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226ad:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226b3:	75 05                	jne    c00226ba <SoundDevice::removeChannel(int)+0x30>
c00226b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00226b7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226ba:	c3                   	ret    
c00226bb:	90                   	nop

c00226bc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226bc:	57                   	push   edi
c00226bd:	56                   	push   esi
c00226be:	53                   	push   ebx
c00226bf:	31 db                	xor    ebx,ebx
c00226c1:	83 ec 10             	sub    esp,0x10
c00226c4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226c8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226cc:	0f 8d cb 00 00 00    	jge    c002279d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226d2:	83 ec 0c             	sub    esp,0xc
c00226d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226dc:	e8 d6 5e 00 00       	call   c00285b7 <__extendsfdf2>
c00226e1:	83 c4 10             	add    esp,0x10
c00226e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ec:	68 00 00 f0 3f       	push   0x3ff00000
c00226f1:	6a 00                	push   0x0
c00226f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226fb:	e8 43 4e 00 00       	call   c0027543 <__adddf3>
c0022700:	83 c4 10             	add    esp,0x10
c0022703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022707:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002270b:	68 00 00 e0 3f       	push   0x3fe00000
c0022710:	6a 00                	push   0x0
c0022712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271a:	e8 a1 54 00 00       	call   c0027bc0 <__muldf3>
c002271f:	83 c4 10             	add    esp,0x10
c0022722:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022726:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002272a:	68 00 00 60 40       	push   0x40600000
c002272f:	6a 00                	push   0x0
c0022731:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022739:	e8 82 54 00 00       	call   c0027bc0 <__muldf3>
c002273e:	59                   	pop    ecx
c002273f:	5f                   	pop    edi
c0022740:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022744:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022750:	e8 3e 5d 00 00       	call   c0028493 <__truncdfsf2>
c0022755:	5a                   	pop    edx
c0022756:	89 c7                	mov    edi,eax
c0022758:	59                   	pop    ecx
c0022759:	68 00 00 fe 42       	push   0x42fe0000
c002275e:	50                   	push   eax
c002275f:	e8 d9 4d 00 00       	call   c002753d <__gesf2>
c0022764:	83 c4 10             	add    esp,0x10
c0022767:	85 c0                	test   eax,eax
c0022769:	78 06                	js     c0022771 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002276b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002276f:	eb 26                	jmp    c0022797 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022771:	50                   	push   eax
c0022772:	50                   	push   eax
c0022773:	6a 00                	push   0x0
c0022775:	57                   	push   edi
c0022776:	e8 c6 4d 00 00       	call   c0027541 <__lesf2>
c002277b:	83 c4 10             	add    esp,0x10
c002277e:	85 c0                	test   eax,eax
c0022780:	7f 06                	jg     c0022788 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022782:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022786:	eb 0f                	jmp    c0022797 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022788:	83 ec 0c             	sub    esp,0xc
c002278b:	57                   	push   edi
c002278c:	e8 bb 5e 00 00       	call   c002864c <lrintf>
c0022791:	83 c4 10             	add    esp,0x10
c0022794:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022797:	43                   	inc    ebx
c0022798:	e9 2b ff ff ff       	jmp    c00226c8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	5b                   	pop    ebx
c00227a1:	5e                   	pop    esi
c00227a2:	5f                   	pop    edi
c00227a3:	c3                   	ret    

c00227a4 <SoundDevice::getAudio(int, float*, float*)>:
c00227a4:	55                   	push   ebp
c00227a5:	57                   	push   edi
c00227a6:	56                   	push   esi
c00227a7:	53                   	push   ebx
c00227a8:	31 db                	xor    ebx,ebx
c00227aa:	83 ec 20             	sub    esp,0x20
c00227ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227b5:	c1 e0 02             	shl    eax,0x2
c00227b8:	50                   	push   eax
c00227b9:	6a 00                	push   0x0
c00227bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227bf:	e8 b4 df fd ff       	call   c0000778 <memset>
c00227c4:	83 c4 10             	add    esp,0x10
c00227c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227cb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227d2:	85 c0                	test   eax,eax
c00227d4:	0f 84 d7 00 00 00    	je     c00228b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227da:	83 ec 0c             	sub    esp,0xc
c00227dd:	50                   	push   eax
c00227de:	e8 a5 fb ff ff       	call   c0022388 <SoundChannel::paused()>
c00227e3:	83 c4 10             	add    esp,0x10
c00227e6:	84 c0                	test   al,al
c00227e8:	0f 85 c3 00 00 00    	jne    c00228b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ee:	83 ec 0c             	sub    esp,0xc
c00227f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f8:	e8 19 fa ff ff       	call   c0022216 <SoundChannel::getVolume()>
c00227fd:	83 c4 10             	add    esp,0x10
c0022800:	85 c0                	test   eax,eax
c0022802:	0f 84 a9 00 00 00    	je     c00228b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022808:	83 ec 0c             	sub    esp,0xc
c002280b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022812:	e8 ff f9 ff ff       	call   c0022216 <SoundChannel::getVolume()>
c0022817:	83 ec 0c             	sub    esp,0xc
c002281a:	50                   	push   eax
c002281b:	e8 c7 4a 00 00       	call   c00272e7 <__floatsisf>
c0022820:	59                   	pop    ecx
c0022821:	5d                   	pop    ebp
c0022822:	31 ed                	xor    ebp,ebp
c0022824:	68 00 00 c8 42       	push   0x42c80000
c0022829:	50                   	push   eax
c002282a:	e8 8d 48 00 00       	call   c00270bc <__divsf3>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022836:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002283a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022840:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022844:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002284b:	e8 60 fb ff ff       	call   c00223b0 <SoundChannel::unbuffer(float*, int, int)>
c0022850:	83 c4 20             	add    esp,0x20
c0022853:	89 c1                	mov    ecx,eax
c0022855:	39 cd                	cmp    ebp,ecx
c0022857:	7d 52                	jge    c00228ab <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022859:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002285d:	50                   	push   eax
c002285e:	50                   	push   eax
c002285f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022863:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022866:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002286a:	e8 8a 46 00 00       	call   c0026ef9 <__mulsf3>
c002286f:	5a                   	pop    edx
c0022870:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022874:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002287a:	e8 68 4a 00 00       	call   c00272e7 <__floatsisf>
c002287f:	59                   	pop    ecx
c0022880:	5a                   	pop    edx
c0022881:	50                   	push   eax
c0022882:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022886:	e8 31 48 00 00       	call   c00270bc <__divsf3>
c002288b:	59                   	pop    ecx
c002288c:	5a                   	pop    edx
c002288d:	50                   	push   eax
c002288e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022892:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022895:	e8 3c 43 00 00       	call   c0026bd6 <__addsf3>
c002289a:	83 c4 10             	add    esp,0x10
c002289d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228a5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228a8:	45                   	inc    ebp
c00228a9:	eb aa                	jmp    c0022855 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228ab:	39 cf                	cmp    edi,ecx
c00228ad:	7e 02                	jle    c00228b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228af:	89 cf                	mov    edi,ecx
c00228b1:	43                   	inc    ebx
c00228b2:	83 fb 20             	cmp    ebx,0x20
c00228b5:	0f 85 10 ff ff ff    	jne    c00227cb <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228bb:	83 c4 1c             	add    esp,0x1c
c00228be:	89 f8                	mov    eax,edi
c00228c0:	5b                   	pop    ebx
c00228c1:	5e                   	pop    esi
c00228c2:	5f                   	pop    edi
c00228c3:	5d                   	pop    ebp
c00228c4:	c3                   	ret    
c00228c5:	90                   	nop

c00228c6 <PCI::open(int, int, void*)>:
c00228c6:	83 ec 18             	sub    esp,0x18
c00228c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00228cf:	50                   	push   eax
c00228d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228d3:	31 c0                	xor    eax,eax
c00228d5:	83 c4 1c             	add    esp,0x1c
c00228d8:	c3                   	ret    
c00228d9:	90                   	nop

c00228da <PCI::close(int, int, void*)>:
c00228da:	31 c0                	xor    eax,eax
c00228dc:	c3                   	ret    
c00228dd:	90                   	nop

c00228de <PCI::PCI()>:
c00228de:	83 ec 0c             	sub    esp,0xc
c00228e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e5:	83 ec 08             	sub    esp,0x8
c00228e8:	68 a4 c9 02 c0       	push   0xc002c9a4
c00228ed:	50                   	push   eax
c00228ee:	e8 05 13 ff ff       	call   c0013bf8 <Bus::Bus(char const*)>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	ba 10 ca 02 c0       	mov    edx,0xc002ca10
c00228fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ff:	89 10                	mov    DWORD PTR [eax],edx
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002290b:	0f b6 d0             	movzx  edx,al
c002290e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022912:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022923:	0f b6 d0             	movzx  edx,al
c0022926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002292f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022933:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022939:	8d 50 01             	lea    edx,[eax+0x1]
c002293c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022940:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022946:	0f b6 d0             	movzx  edx,al
c0022949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022951:	83 c9 c0             	or     ecx,0xffffffc0
c0022954:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022958:	90                   	nop
c0022959:	83 c4 0c             	add    esp,0xc
c002295c:	c3                   	ret    
c002295d:	90                   	nop

c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002295e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022962:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022967:	89 ca                	mov    edx,ecx
c0022969:	c1 e0 10             	shl    eax,0x10
c002296c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022972:	09 d0                	or     eax,edx
c0022974:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022979:	c1 e2 08             	shl    edx,0x8
c002297c:	09 d0                	or     eax,edx
c002297e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022983:	c1 e2 0b             	shl    edx,0xb
c0022986:	09 d0                	or     eax,edx
c0022988:	ba f8 0c 00 00       	mov    edx,0xcf8
c002298d:	0d 00 00 00 80       	or     eax,0x80000000
c0022992:	ef                   	out    dx,eax
c0022993:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022998:	ed                   	in     eax,dx
c0022999:	83 e1 02             	and    ecx,0x2
c002299c:	0f b6 c9             	movzx  ecx,cl
c002299f:	c1 e1 03             	shl    ecx,0x3
c00229a2:	d3 e8                	shr    eax,cl
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229a6:	6a 00                	push   0x0
c00229a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ad:	50                   	push   eax
c00229ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b3:	50                   	push   eax
c00229b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b9:	50                   	push   eax
c00229ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229be:	e8 9b ff ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c3:	83 c4 14             	add    esp,0x14
c00229c6:	c3                   	ret    
c00229c7:	90                   	nop

c00229c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229c8:	6a 0e                	push   0xe
c00229ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cf:	50                   	push   eax
c00229d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d5:	50                   	push   eax
c00229d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229db:	50                   	push   eax
c00229dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e0:	e8 79 ff ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e5:	83 c4 14             	add    esp,0x14
c00229e8:	0f b6 c0             	movzx  eax,al
c00229eb:	c3                   	ret    

c00229ec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ec:	55                   	push   ebp
c00229ed:	57                   	push   edi
c00229ee:	56                   	push   esi
c00229ef:	53                   	push   ebx
c00229f0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229f5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229fa:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229ff:	6a 0a                	push   0xa
c0022a01:	56                   	push   esi
c0022a02:	55                   	push   ebp
c0022a03:	57                   	push   edi
c0022a04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a08:	e8 51 ff ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0d:	6a 0a                	push   0xa
c0022a0f:	89 c3                	mov    ebx,eax
c0022a11:	56                   	push   esi
c0022a12:	0f b6 db             	movzx  ebx,bl
c0022a15:	55                   	push   ebp
c0022a16:	57                   	push   edi
c0022a17:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a1b:	e8 3e ff ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a20:	83 c4 28             	add    esp,0x28
c0022a23:	25 00 ff 00 00       	and    eax,0xff00
c0022a28:	09 d8                	or     eax,ebx
c0022a2a:	5b                   	pop    ebx
c0022a2b:	5e                   	pop    esi
c0022a2c:	5f                   	pop    edi
c0022a2d:	5d                   	pop    ebp
c0022a2e:	c3                   	ret    
c0022a2f:	90                   	nop

c0022a30 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a30:	6a 08                	push   0x8
c0022a32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a37:	50                   	push   eax
c0022a38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3d:	50                   	push   eax
c0022a3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a43:	50                   	push   eax
c0022a44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a48:	e8 11 ff ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4d:	83 c4 14             	add    esp,0x14
c0022a50:	0f b6 c4             	movzx  eax,ah
c0022a53:	c3                   	ret    

c0022a54 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a54:	6a 08                	push   0x8
c0022a56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5b:	50                   	push   eax
c0022a5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a61:	50                   	push   eax
c0022a62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a67:	50                   	push   eax
c0022a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6c:	e8 ed fe ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a71:	83 c4 14             	add    esp,0x14
c0022a74:	c3                   	ret    
c0022a75:	90                   	nop

c0022a76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a76:	6a 3c                	push   0x3c
c0022a78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7d:	50                   	push   eax
c0022a7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a83:	50                   	push   eax
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	e8 cb fe ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a93:	83 c4 14             	add    esp,0x14
c0022a96:	c3                   	ret    
c0022a97:	90                   	nop

c0022a98 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a98:	6a 18                	push   0x18
c0022a9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9f:	50                   	push   eax
c0022aa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa5:	50                   	push   eax
c0022aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aab:	50                   	push   eax
c0022aac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab0:	e8 a9 fe ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab5:	83 c4 14             	add    esp,0x14
c0022ab8:	0f b6 c4             	movzx  eax,ah
c0022abb:	c3                   	ret    

c0022abc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022abc:	55                   	push   ebp
c0022abd:	57                   	push   edi
c0022abe:	56                   	push   esi
c0022abf:	53                   	push   ebx
c0022ac0:	50                   	push   eax
c0022ac1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ac5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022aca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022acf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ad4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022adb:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ade:	83 c3 10             	add    ebx,0x10
c0022ae1:	0f b6 c0             	movzx  eax,al
c0022ae4:	0f b6 db             	movzx  ebx,bl
c0022ae7:	50                   	push   eax
c0022ae8:	51                   	push   ecx
c0022ae9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aed:	57                   	push   edi
c0022aee:	55                   	push   ebp
c0022aef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022af3:	e8 66 fe ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af8:	53                   	push   ebx
c0022af9:	89 c6                	mov    esi,eax
c0022afb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022aff:	c1 e6 10             	shl    esi,0x10
c0022b02:	51                   	push   ecx
c0022b03:	57                   	push   edi
c0022b04:	55                   	push   ebp
c0022b05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b09:	e8 50 fe ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0e:	83 c4 2c             	add    esp,0x2c
c0022b11:	0f b7 c0             	movzx  eax,ax
c0022b14:	5b                   	pop    ebx
c0022b15:	09 f0                	or     eax,esi
c0022b17:	5e                   	pop    esi
c0022b18:	5f                   	pop    edi
c0022b19:	5d                   	pop    ebp
c0022b1a:	c3                   	ret    
c0022b1b:	90                   	nop

c0022b1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b1c:	53                   	push   ebx
c0022b1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b22:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b2b:	c1 e1 10             	shl    ecx,0x10
c0022b2e:	25 fc 00 00 00       	and    eax,0xfc
c0022b33:	09 c1                	or     ecx,eax
c0022b35:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3a:	c1 e0 08             	shl    eax,0x8
c0022b3d:	09 c1                	or     ecx,eax
c0022b3f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b44:	c1 e0 0b             	shl    eax,0xb
c0022b47:	09 c1                	or     ecx,eax
c0022b49:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b4f:	89 c8                	mov    eax,ecx
c0022b51:	ef                   	out    dx,eax
c0022b52:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b57:	ed                   	in     eax,dx
c0022b58:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b5d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b62:	74 0a                	je     c0022b6e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b64:	0f b7 d8             	movzx  ebx,ax
c0022b67:	89 d0                	mov    eax,edx
c0022b69:	c1 e0 10             	shl    eax,0x10
c0022b6c:	eb 05                	jmp    c0022b73 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b6e:	66 31 c0             	xor    ax,ax
c0022b71:	89 d3                	mov    ebx,edx
c0022b73:	09 c3                	or     ebx,eax
c0022b75:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b7a:	89 c8                	mov    eax,ecx
c0022b7c:	ef                   	out    dx,eax
c0022b7d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b82:	89 d8                	mov    eax,ebx
c0022b84:	ef                   	out    dx,eax
c0022b85:	5b                   	pop    ebx
c0022b86:	c3                   	ret    
c0022b87:	90                   	nop

c0022b88 <PCI::checkBus(unsigned char)>:
c0022b88:	56                   	push   esi
c0022b89:	53                   	push   ebx
c0022b8a:	31 db                	xor    ebx,ebx
c0022b8c:	51                   	push   ecx
c0022b8d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b92:	52                   	push   edx
c0022b93:	53                   	push   ebx
c0022b94:	43                   	inc    ebx
c0022b95:	56                   	push   esi
c0022b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b9a:	e8 2b 03 00 00       	call   c0022eca <PCI::checkDevice(unsigned char, unsigned char)>
c0022b9f:	83 c4 10             	add    esp,0x10
c0022ba2:	83 fb 20             	cmp    ebx,0x20
c0022ba5:	75 eb                	jne    c0022b92 <PCI::checkBus(unsigned char)+0xa>
c0022ba7:	58                   	pop    eax
c0022ba8:	5b                   	pop    ebx
c0022ba9:	5e                   	pop    esi
c0022baa:	c3                   	ret    
c0022bab:	90                   	nop

c0022bac <PCI::foundDevice(PCIDeviceInfo)>:
c0022bac:	55                   	push   ebp
c0022bad:	57                   	push   edi
c0022bae:	56                   	push   esi
c0022baf:	53                   	push   ebx
c0022bb0:	83 ec 1c             	sub    esp,0x1c
c0022bb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bb7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bbd:	0f 84 52 01 00 00    	je     c0022d15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bc3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bc7:	66 81 f9 06 04       	cmp    cx,0x406
c0022bcc:	75 2c                	jne    c0022bfa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bd3:	50                   	push   eax
c0022bd4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bd9:	50                   	push   eax
c0022bda:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bdf:	50                   	push   eax
c0022be0:	56                   	push   esi
c0022be1:	e8 b2 fe ff ff       	call   c0022a98 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022be6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bea:	0f b6 c0             	movzx  eax,al
c0022bed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bf1:	83 c4 2c             	add    esp,0x2c
c0022bf4:	5b                   	pop    ebx
c0022bf5:	5e                   	pop    esi
c0022bf6:	5f                   	pop    edi
c0022bf7:	5d                   	pop    ebp
c0022bf8:	eb 8e                	jmp    c0022b88 <PCI::checkBus(unsigned char)>
c0022bfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bfe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c10:	88 d3                	mov    bl,dl
c0022c12:	85 c0                	test   eax,eax
c0022c14:	74 33                	je     c0022c49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c19:	85 d2                	test   edx,edx
c0022c1b:	74 28                	je     c0022c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c23:	31 ef                	xor    edi,ebp
c0022c25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c2b:	75 18                	jne    c0022c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c37:	75 0c                	jne    c0022c45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c3f:	0f 84 d0 00 00 00    	je     c0022d15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c47:	eb c9                	jmp    c0022c12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c49:	66 81 f9 01 06       	cmp    cx,0x601
c0022c4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c52:	75 19                	jne    c0022c6d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c54:	83 ec 0c             	sub    esp,0xc
c0022c57:	68 64 01 00 00       	push   0x164
c0022c5c:	e8 e2 cb fe ff       	call   c000f843 <malloc>
c0022c61:	89 c5                	mov    ebp,eax
c0022c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c66:	e8 95 0f 00 00       	call   c0023c00 <SATABus::SATABus()>
c0022c6b:	eb 1e                	jmp    c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c6d:	66 81 f9 01 01       	cmp    cx,0x101
c0022c72:	75 60                	jne    c0022cd4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c74:	83 ec 0c             	sub    esp,0xc
c0022c77:	68 70 02 00 00       	push   0x270
c0022c7c:	e8 c2 cb fe ff       	call   c000f843 <malloc>
c0022c81:	89 c5                	mov    ebp,eax
c0022c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c86:	e8 03 03 00 00       	call   c0022f8e <IDE::IDE()>
c0022c8b:	58                   	pop    eax
c0022c8c:	5a                   	pop    edx
c0022c8d:	55                   	push   ebp
c0022c8e:	56                   	push   esi
c0022c8f:	e8 f0 16 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0022c94:	83 ec 1c             	sub    esp,0x1c
c0022c97:	b9 09 00 00 00       	mov    ecx,0x9
c0022c9c:	fc                   	cld    
c0022c9d:	89 e7                	mov    edi,esp
c0022c9f:	89 de                	mov    esi,ebx
c0022ca1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ca3:	55                   	push   ebp
c0022ca4:	e8 e5 15 ff ff       	call   c001428e <Device::preOpenPCI(PCIDeviceInfo)>
c0022ca9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cb0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cb8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cc0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ccb:	83 c4 4c             	add    esp,0x4c
c0022cce:	5b                   	pop    ebx
c0022ccf:	5e                   	pop    esi
c0022cd0:	5f                   	pop    edi
c0022cd1:	5d                   	pop    ebp
c0022cd2:	ff e0                	jmp    eax
c0022cd4:	83 ec 0c             	sub    esp,0xc
c0022cd7:	68 58 01 00 00       	push   0x158
c0022cdc:	e8 62 cb fe ff       	call   c000f843 <malloc>
c0022ce1:	89 c5                	mov    ebp,eax
c0022ce3:	58                   	pop    eax
c0022ce4:	5a                   	pop    edx
c0022ce5:	68 ac c9 02 c0       	push   0xc002c9ac
c0022cea:	55                   	push   ebp
c0022ceb:	e8 8a 19 ff ff       	call   c001467a <DriverlessDevice::DriverlessDevice(char const*)>
c0022cf0:	59                   	pop    ecx
c0022cf1:	5f                   	pop    edi
c0022cf2:	55                   	push   ebp
c0022cf3:	56                   	push   esi
c0022cf4:	e8 8b 16 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0022cf9:	b9 09 00 00 00       	mov    ecx,0x9
c0022cfe:	fc                   	cld    
c0022cff:	89 df                	mov    edi,ebx
c0022d01:	89 de                	mov    esi,ebx
c0022d03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d05:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d09:	83 c4 2c             	add    esp,0x2c
c0022d0c:	5b                   	pop    ebx
c0022d0d:	5e                   	pop    esi
c0022d0e:	5f                   	pop    edi
c0022d0f:	5d                   	pop    ebp
c0022d10:	e9 79 15 ff ff       	jmp    c001428e <Device::preOpenPCI(PCIDeviceInfo)>
c0022d15:	83 c4 1c             	add    esp,0x1c
c0022d18:	5b                   	pop    ebx
c0022d19:	5e                   	pop    esi
c0022d1a:	5f                   	pop    edi
c0022d1b:	5d                   	pop    ebp
c0022d1c:	c3                   	ret    
c0022d1d:	90                   	nop

c0022d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d1e:	55                   	push   ebp
c0022d1f:	57                   	push   edi
c0022d20:	56                   	push   esi
c0022d21:	53                   	push   ebx
c0022d22:	83 ec 5c             	sub    esp,0x5c
c0022d25:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d2d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d31:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d3a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d3e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d47:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d4c:	6a 0c                	push   0xc
c0022d4e:	55                   	push   ebp
c0022d4f:	53                   	push   ebx
c0022d50:	57                   	push   edi
c0022d51:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d58:	e8 01 fc ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5d:	55                   	push   ebp
c0022d5e:	53                   	push   ebx
c0022d5f:	57                   	push   edi
c0022d60:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d67:	e8 80 fc ff ff       	call   c00229ec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d6c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d71:	83 c4 24             	add    esp,0x24
c0022d74:	55                   	push   ebp
c0022d75:	53                   	push   ebx
c0022d76:	57                   	push   edi
c0022d77:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d7b:	e8 f6 fc ff ff       	call   c0022a76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d80:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d84:	6a 3c                	push   0x3c
c0022d86:	55                   	push   ebp
c0022d87:	53                   	push   ebx
c0022d88:	57                   	push   edi
c0022d89:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d90:	e8 c9 fb ff ff       	call   c002295e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d95:	0f b6 c4             	movzx  eax,ah
c0022d98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d9c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022da0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022da4:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0022da9:	83 c4 24             	add    esp,0x24
c0022dac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022db2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022db9:	74 6c                	je     c0022e27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dbb:	31 f6                	xor    esi,esi
c0022dbd:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c0022dc3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dc9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dcf:	7e 56                	jle    c0022e27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dd1:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dd4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ddb:	39 cb                	cmp    ebx,ecx
c0022ddd:	75 45                	jne    c0022e24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ddf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022de6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022dea:	75 38                	jne    c0022e24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dec:	83 ec 0c             	sub    esp,0xc
c0022def:	68 c6 c9 02 c0       	push   0xc002c9c6
c0022df4:	e8 65 01 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0022df9:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c0022dff:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e05:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e0d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e11:	52                   	push   edx
c0022e12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e16:	53                   	push   ebx
c0022e17:	68 eb c9 02 c0       	push   0xc002c9eb
c0022e1c:	e8 3d 01 ff ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0022e21:	83 c4 20             	add    esp,0x20
c0022e24:	46                   	inc    esi
c0022e25:	eb 96                	jmp    c0022dbd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e27:	31 d2                	xor    edx,edx
c0022e29:	83 ec 0c             	sub    esp,0xc
c0022e2c:	55                   	push   ebp
c0022e2d:	53                   	push   ebx
c0022e2e:	57                   	push   edi
c0022e2f:	52                   	push   edx
c0022e30:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e34:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e3b:	e8 7c fc ff ff       	call   c0022abc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e40:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e48:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e4c:	42                   	inc    edx
c0022e4d:	83 c4 20             	add    esp,0x20
c0022e50:	83 fa 06             	cmp    edx,0x6
c0022e53:	75 d4                	jne    c0022e29 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e55:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e59:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e5d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e61:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e65:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e69:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e6d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e72:	86 e0                	xchg   al,ah
c0022e74:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e79:	55                   	push   ebp
c0022e7a:	53                   	push   ebx
c0022e7b:	57                   	push   edi
c0022e7c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e80:	e8 ab fb ff ff       	call   c0022a30 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e85:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e89:	55                   	push   ebp
c0022e8a:	53                   	push   ebx
c0022e8b:	57                   	push   edi
c0022e8c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e93:	e8 0e fb ff ff       	call   c00229a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e98:	83 ec 0c             	sub    esp,0xc
c0022e9b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ea0:	b9 09 00 00 00       	mov    ecx,0x9
c0022ea5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ea9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ead:	fc                   	cld    
c0022eae:	89 e7                	mov    edi,esp
c0022eb0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eb2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eb9:	e8 ee fc ff ff       	call   c0022bac <PCI::foundDevice(PCIDeviceInfo)>
c0022ebe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ec4:	5b                   	pop    ebx
c0022ec5:	5e                   	pop    esi
c0022ec6:	5f                   	pop    edi
c0022ec7:	5d                   	pop    ebp
c0022ec8:	c3                   	ret    
c0022ec9:	90                   	nop

c0022eca <PCI::checkDevice(unsigned char, unsigned char)>:
c0022eca:	55                   	push   ebp
c0022ecb:	57                   	push   edi
c0022ecc:	56                   	push   esi
c0022ecd:	53                   	push   ebx
c0022ece:	83 ec 0c             	sub    esp,0xc
c0022ed1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ed5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022eda:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022edf:	6a 00                	push   0x0
c0022ee1:	56                   	push   esi
c0022ee2:	57                   	push   edi
c0022ee3:	55                   	push   ebp
c0022ee4:	e8 bd fa ff ff       	call   c00229a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee9:	6a 00                	push   0x0
c0022eeb:	56                   	push   esi
c0022eec:	57                   	push   edi
c0022eed:	55                   	push   ebp
c0022eee:	e8 2b fe ff ff       	call   c0022d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef3:	83 c4 20             	add    esp,0x20
c0022ef6:	6a 00                	push   0x0
c0022ef8:	56                   	push   esi
c0022ef9:	57                   	push   edi
c0022efa:	55                   	push   ebp
c0022efb:	e8 c8 fa ff ff       	call   c00229c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f00:	83 c4 10             	add    esp,0x10
c0022f03:	84 c0                	test   al,al
c0022f05:	79 27                	jns    c0022f2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f07:	bb 01 00 00 00       	mov    ebx,0x1
c0022f0c:	53                   	push   ebx
c0022f0d:	56                   	push   esi
c0022f0e:	57                   	push   edi
c0022f0f:	55                   	push   ebp
c0022f10:	e8 91 fa ff ff       	call   c00229a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f15:	83 c4 10             	add    esp,0x10
c0022f18:	66 40                	inc    ax
c0022f1a:	74 0c                	je     c0022f28 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f1c:	53                   	push   ebx
c0022f1d:	56                   	push   esi
c0022f1e:	57                   	push   edi
c0022f1f:	55                   	push   ebp
c0022f20:	e8 f9 fd ff ff       	call   c0022d1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f25:	83 c4 10             	add    esp,0x10
c0022f28:	43                   	inc    ebx
c0022f29:	83 fb 08             	cmp    ebx,0x8
c0022f2c:	75 de                	jne    c0022f0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f2e:	83 c4 0c             	add    esp,0xc
c0022f31:	5b                   	pop    ebx
c0022f32:	5e                   	pop    esi
c0022f33:	5f                   	pop    edi
c0022f34:	5d                   	pop    ebp
c0022f35:	c3                   	ret    

c0022f36 <PCI::detect()>:
c0022f36:	56                   	push   esi
c0022f37:	53                   	push   ebx
c0022f38:	53                   	push   ebx
c0022f39:	31 db                	xor    ebx,ebx
c0022f3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f3f:	6a 00                	push   0x0
c0022f41:	6a 00                	push   0x0
c0022f43:	6a 00                	push   0x0
c0022f45:	56                   	push   esi
c0022f46:	e8 7d fa ff ff       	call   c00229c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f4b:	83 c4 10             	add    esp,0x10
c0022f4e:	a8 80                	test   al,0x80
c0022f50:	75 21                	jne    c0022f73 <PCI::detect()+0x3d>
c0022f52:	51                   	push   ecx
c0022f53:	51                   	push   ecx
c0022f54:	6a 00                	push   0x0
c0022f56:	56                   	push   esi
c0022f57:	e8 2c fc ff ff       	call   c0022b88 <PCI::checkBus(unsigned char)>
c0022f5c:	83 c4 10             	add    esp,0x10
c0022f5f:	eb 24                	jmp    c0022f85 <PCI::detect()+0x4f>
c0022f61:	52                   	push   edx
c0022f62:	52                   	push   edx
c0022f63:	53                   	push   ebx
c0022f64:	43                   	inc    ebx
c0022f65:	56                   	push   esi
c0022f66:	e8 1d fc ff ff       	call   c0022b88 <PCI::checkBus(unsigned char)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	83 fb 08             	cmp    ebx,0x8
c0022f71:	74 12                	je     c0022f85 <PCI::detect()+0x4f>
c0022f73:	53                   	push   ebx
c0022f74:	6a 00                	push   0x0
c0022f76:	6a 00                	push   0x0
c0022f78:	56                   	push   esi
c0022f79:	e8 28 fa ff ff       	call   c00229a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7e:	83 c4 10             	add    esp,0x10
c0022f81:	66 40                	inc    ax
c0022f83:	74 dc                	je     c0022f61 <PCI::detect()+0x2b>
c0022f85:	58                   	pop    eax
c0022f86:	5b                   	pop    ebx
c0022f87:	5e                   	pop    esi
c0022f88:	c3                   	ret    
c0022f89:	90                   	nop

c0022f8a <IDE::close(int, int, void*)>:
c0022f8a:	83 c8 ff             	or     eax,0xffffffff
c0022f8d:	c3                   	ret    

c0022f8e <IDE::IDE()>:
c0022f8e:	83 ec 0c             	sub    esp,0xc
c0022f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f95:	83 ec 08             	sub    esp,0x8
c0022f98:	68 34 ca 02 c0       	push   0xc002ca34
c0022f9d:	50                   	push   eax
c0022f9e:	e8 6d 17 ff ff       	call   c0014710 <HardDiskController::HardDiskController(char const*)>
c0022fa3:	83 c4 10             	add    esp,0x10
c0022fa6:	ba 74 cc 02 c0       	mov    edx,0xc002cc74
c0022fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022faf:	89 10                	mov    DWORD PTR [eax],edx
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fbc:	90                   	nop
c0022fbd:	83 c4 0c             	add    esp,0xc
c0022fc0:	c3                   	ret    
c0022fc1:	90                   	nop

c0022fc2 <IDE::prepareInterrupt(unsigned char)>:
c0022fc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fcb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fd3:	c3                   	ret    

c0022fd4 <selectDrive(unsigned char, unsigned char)>:
c0022fd4:	c3                   	ret    
c0022fd5:	90                   	nop

c0022fd6 <IDE::getBase(unsigned char)>:
c0022fd6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fe7:	c3                   	ret    

c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fe8:	55                   	push   ebp
c0022fe9:	57                   	push   edi
c0022fea:	56                   	push   esi
c0022feb:	53                   	push   ebx
c0022fec:	83 ec 1c             	sub    esp,0x1c
c0022fef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023002:	80 f9 03             	cmp    cl,0x3
c0023005:	77 51                	ja     c0023058 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002300b:	0f b6 f2             	movzx  esi,dl
c002300e:	0f b6 db             	movzx  ebx,bl
c0023011:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023014:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023018:	83 ca 80             	or     edx,0xffffff80
c002301b:	0f b6 d2             	movzx  edx,dl
c002301e:	52                   	push   edx
c002301f:	6a 0c                	push   0xc
c0023021:	56                   	push   esi
c0023022:	57                   	push   edi
c0023023:	e8 c0 ff ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023028:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002302d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023031:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023035:	ee                   	out    dx,al
c0023036:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002303b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002303f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023043:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023047:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002304f:	83 c4 2c             	add    esp,0x2c
c0023052:	5b                   	pop    ebx
c0023053:	5e                   	pop    esi
c0023054:	5f                   	pop    edi
c0023055:	5d                   	pop    ebp
c0023056:	eb 90                	jmp    c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023058:	80 fb 07             	cmp    bl,0x7
c002305b:	77 12                	ja     c002306f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002305d:	0f b6 d2             	movzx  edx,dl
c0023060:	0f b6 db             	movzx  ebx,bl
c0023063:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002306b:	89 da                	mov    edx,ebx
c002306d:	eb 2f                	jmp    c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306f:	80 fb 0d             	cmp    bl,0xd
c0023072:	77 13                	ja     c0023087 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023074:	0f b6 d2             	movzx  edx,dl
c0023077:	0f b6 db             	movzx  ebx,bl
c002307a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023081:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023085:	eb 17                	jmp    c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023087:	80 fb 15             	cmp    bl,0x15
c002308a:	77 13                	ja     c002309f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002308c:	0f b6 d2             	movzx  edx,dl
c002308f:	0f b6 db             	movzx  ebx,bl
c0023092:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002309a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002309e:	ee                   	out    dx,al
c002309f:	83 c4 1c             	add    esp,0x1c
c00230a2:	5b                   	pop    ebx
c00230a3:	5e                   	pop    esi
c00230a4:	5f                   	pop    edi
c00230a5:	5d                   	pop    ebp
c00230a6:	c3                   	ret    
c00230a7:	90                   	nop

c00230a8 <IDE::read(unsigned char, unsigned char)>:
c00230a8:	55                   	push   ebp
c00230a9:	57                   	push   edi
c00230aa:	56                   	push   esi
c00230ab:	53                   	push   ebx
c00230ac:	83 ec 1c             	sub    esp,0x1c
c00230af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230be:	3c 03                	cmp    al,0x3
c00230c0:	77 43                	ja     c0023105 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230c2:	0f b6 f2             	movzx  esi,dl
c00230c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230c8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230cc:	83 c8 80             	or     eax,0xffffff80
c00230cf:	0f b6 c0             	movzx  eax,al
c00230d2:	50                   	push   eax
c00230d3:	6a 0c                	push   0xc
c00230d5:	56                   	push   esi
c00230d6:	57                   	push   edi
c00230d7:	e8 0c ff ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230dc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230e1:	0f b6 c3             	movzx  eax,bl
c00230e4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230e8:	ec                   	in     al,dx
c00230e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230ed:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230f2:	52                   	push   edx
c00230f3:	6a 0c                	push   0xc
c00230f5:	56                   	push   esi
c00230f6:	57                   	push   edi
c00230f7:	e8 ec fe ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fc:	83 c4 20             	add    esp,0x20
c00230ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023103:	eb 49                	jmp    c002314e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023105:	80 fb 07             	cmp    bl,0x7
c0023108:	77 12                	ja     c002311c <IDE::read(unsigned char, unsigned char)+0x74>
c002310a:	0f b6 d2             	movzx  edx,dl
c002310d:	0f b6 c3             	movzx  eax,bl
c0023110:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023118:	89 c2                	mov    edx,eax
c002311a:	eb 31                	jmp    c002314d <IDE::read(unsigned char, unsigned char)+0xa5>
c002311c:	80 fb 0d             	cmp    bl,0xd
c002311f:	77 13                	ja     c0023134 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023121:	0f b6 d2             	movzx  edx,dl
c0023124:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002312b:	0f b6 d3             	movzx  edx,bl
c002312e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023132:	eb 19                	jmp    c002314d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023134:	31 c0                	xor    eax,eax
c0023136:	80 fb 15             	cmp    bl,0x15
c0023139:	77 13                	ja     c002314e <IDE::read(unsigned char, unsigned char)+0xa6>
c002313b:	0f b6 d2             	movzx  edx,dl
c002313e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023146:	0f b6 d3             	movzx  edx,bl
c0023149:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002314d:	ec                   	in     al,dx
c002314e:	83 c4 1c             	add    esp,0x1c
c0023151:	5b                   	pop    ebx
c0023152:	5e                   	pop    esi
c0023153:	5f                   	pop    edi
c0023154:	5d                   	pop    ebp
c0023155:	c3                   	ret    

c0023156 <IDE::waitInterrupt(unsigned char)>:
c0023156:	55                   	push   ebp
c0023157:	57                   	push   edi
c0023158:	56                   	push   esi
c0023159:	53                   	push   ebx
c002315a:	31 db                	xor    ebx,ebx
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023163:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023168:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023170:	89 e8                	mov    eax,ebp
c0023172:	84 c0                	test   al,al
c0023174:	75 34                	jne    c00231aa <IDE::waitInterrupt(unsigned char)+0x54>
c0023176:	52                   	push   edx
c0023177:	6a 0c                	push   0xc
c0023179:	56                   	push   esi
c002317a:	57                   	push   edi
c002317b:	e8 28 ff ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023180:	83 c4 10             	add    esp,0x10
c0023183:	a8 01                	test   al,0x1
c0023185:	75 2b                	jne    c00231b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023187:	f6 c3 04             	test   bl,0x4
c002318a:	75 16                	jne    c00231a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318c:	83 fb 32             	cmp    ebx,0x32
c002318f:	7e 11                	jle    c00231a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023191:	50                   	push   eax
c0023192:	50                   	push   eax
c0023193:	6a 00                	push   0x0
c0023195:	68 80 96 98 00       	push   0x989680
c002319a:	e8 8b b1 ff ff       	call   c001e32a <nanoSleep(unsigned long long)>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	83 fb 3c             	cmp    ebx,0x3c
c00231a5:	74 0b                	je     c00231b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a7:	43                   	inc    ebx
c00231a8:	eb be                	jmp    c0023168 <IDE::waitInterrupt(unsigned char)+0x12>
c00231aa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231b2:	83 c4 0c             	add    esp,0xc
c00231b5:	89 e8                	mov    eax,ebp
c00231b7:	5b                   	pop    ebx
c00231b8:	5e                   	pop    esi
c00231b9:	5f                   	pop    edi
c00231ba:	5d                   	pop    ebp
c00231bb:	c3                   	ret    

c00231bc <ideChannel0IRQHandler(regs*, void*)>:
c00231bc:	83 ec 10             	sub    esp,0x10
c00231bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231ca:	6a 07                	push   0x7
c00231cc:	6a 00                	push   0x0
c00231ce:	50                   	push   eax
c00231cf:	e8 d4 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00231d4:	83 c4 1c             	add    esp,0x1c
c00231d7:	c3                   	ret    

c00231d8 <ideChannel1IRQHandler(regs*, void*)>:
c00231d8:	83 ec 10             	sub    esp,0x10
c00231db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231df:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231e6:	6a 07                	push   0x7
c00231e8:	6a 01                	push   0x1
c00231ea:	50                   	push   eax
c00231eb:	e8 b8 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00231f0:	83 c4 1c             	add    esp,0x1c
c00231f3:	c3                   	ret    

c00231f4 <IDE::enableIRQs(unsigned char, bool)>:
c00231f4:	57                   	push   edi
c00231f5:	56                   	push   esi
c00231f6:	be 04 00 00 00       	mov    esi,0x4
c00231fb:	53                   	push   ebx
c00231fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023205:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002320a:	0f 94 c0             	sete   al
c002320d:	d1 e0                	shl    eax,1
c002320f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023216:	0f b6 c0             	movzx  eax,al
c0023219:	50                   	push   eax
c002321a:	6a 0c                	push   0xc
c002321c:	57                   	push   edi
c002321d:	53                   	push   ebx
c002321e:	e8 c5 fd ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023223:	83 c4 10             	add    esp,0x10
c0023226:	50                   	push   eax
c0023227:	6a 0c                	push   0xc
c0023229:	57                   	push   edi
c002322a:	53                   	push   ebx
c002322b:	e8 78 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023230:	83 c4 10             	add    esp,0x10
c0023233:	4e                   	dec    esi
c0023234:	75 f0                	jne    c0023226 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023236:	5b                   	pop    ebx
c0023237:	5e                   	pop    esi
c0023238:	5f                   	pop    edi
c0023239:	c3                   	ret    

c002323a <IDE::open(int, int, void*)>:
c002323a:	55                   	push   ebp
c002323b:	57                   	push   edi
c002323c:	56                   	push   esi
c002323d:	53                   	push   ebx
c002323e:	83 ec 1c             	sub    esp,0x1c
c0023241:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023245:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002324e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023257:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002325e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023265:	0f 85 b0 02 00 00    	jne    c002351b <IDE::open(int, int, void*)+0x2e1>
c002326b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023271:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023275:	83 e0 7f             	and    eax,0x7f
c0023278:	3c 05                	cmp    al,0x5
c002327a:	74 04                	je     c0023280 <IDE::open(int, int, void*)+0x46>
c002327c:	3c 0f                	cmp    al,0xf
c002327e:	75 32                	jne    c00232b2 <IDE::open(int, int, void*)+0x78>
c0023280:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023286:	83 e0 fc             	and    eax,0xfffffffc
c0023289:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023290:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023296:	83 e0 fc             	and    eax,0xfffffffc
c0023299:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232a0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232a6:	83 e0 fc             	and    eax,0xfffffffc
c00232a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232b0:	eb 14                	jmp    c00232c6 <IDE::open(int, int, void*)+0x8c>
c00232b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232cd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232d8:	89 c6                	mov    esi,eax
c00232da:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232df:	c1 e6 10             	shl    esi,0x10
c00232e2:	89 e8                	mov    eax,ebp
c00232e4:	89 fa                	mov    edx,edi
c00232e6:	c1 e0 0b             	shl    eax,0xb
c00232e9:	09 f0                	or     eax,esi
c00232eb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232f2:	c1 e6 08             	shl    esi,0x8
c00232f5:	09 c6                	or     esi,eax
c00232f7:	89 f0                	mov    eax,esi
c00232f9:	0d 08 00 00 80       	or     eax,0x80000008
c00232fe:	ef                   	out    dx,eax
c00232ff:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023304:	89 ca                	mov    edx,ecx
c0023306:	ed                   	in     eax,dx
c0023307:	c1 e8 10             	shr    eax,0x10
c002330a:	3d ff ff 00 00       	cmp    eax,0xffff
c002330f:	0f 84 f5 00 00 00    	je     c002340a <IDE::open(int, int, void*)+0x1d0>
c0023315:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002331b:	89 fa                	mov    edx,edi
c002331d:	89 f0                	mov    eax,esi
c002331f:	ef                   	out    dx,eax
c0023320:	b0 fe                	mov    al,0xfe
c0023322:	89 ca                	mov    edx,ecx
c0023324:	ee                   	out    dx,al
c0023325:	89 f0                	mov    eax,esi
c0023327:	89 fa                	mov    edx,edi
c0023329:	ef                   	out    dx,eax
c002332a:	89 ca                	mov    edx,ecx
c002332c:	ed                   	in     eax,dx
c002332d:	3c fe                	cmp    al,0xfe
c002332f:	0f 85 a9 00 00 00    	jne    c00233de <IDE::open(int, int, void*)+0x1a4>
c0023335:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c002333b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023342:	74 33                	je     c0023377 <IDE::open(int, int, void*)+0x13d>
c0023344:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002334a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002334e:	40                   	inc    eax
c002334f:	83 ec 0c             	sub    esp,0xc
c0023352:	0f b6 c0             	movzx  eax,al
c0023355:	50                   	push   eax
c0023356:	55                   	push   ebp
c0023357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002335b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023361:	51                   	push   ecx
c0023362:	e8 f1 4e ff ff       	call   c0018258 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023367:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002336c:	83 c4 1c             	add    esp,0x1c
c002336f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023375:	eb 0a                	jmp    c0023381 <IDE::open(int, int, void*)+0x147>
c0023377:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023381:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023388:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002338f:	c1 e1 10             	shl    ecx,0x10
c0023392:	c1 e0 08             	shl    eax,0x8
c0023395:	bf f8 0c 00 00       	mov    edi,0xcf8
c002339a:	09 c1                	or     ecx,eax
c002339c:	89 fa                	mov    edx,edi
c002339e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233a5:	c1 e0 0b             	shl    eax,0xb
c00233a8:	09 c1                	or     ecx,eax
c00233aa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233b0:	89 c8                	mov    eax,ecx
c00233b2:	ef                   	out    dx,eax
c00233b3:	be fc 0c 00 00       	mov    esi,0xcfc
c00233b8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233be:	89 f2                	mov    edx,esi
c00233c0:	ee                   	out    dx,al
c00233c1:	89 c8                	mov    eax,ecx
c00233c3:	89 fa                	mov    edx,edi
c00233c5:	ef                   	out    dx,eax
c00233c6:	89 f2                	mov    edx,esi
c00233c8:	ed                   	in     eax,dx
c00233c9:	0f b6 c0             	movzx  eax,al
c00233cc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233d2:	74 46                	je     c002341a <IDE::open(int, int, void*)+0x1e0>
c00233d4:	83 ec 0c             	sub    esp,0xc
c00233d7:	68 4c ca 02 c0       	push   0xc002ca4c
c00233dc:	eb 34                	jmp    c0023412 <IDE::open(int, int, void*)+0x1d8>
c00233de:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233e7:	75 17                	jne    c0023400 <IDE::open(int, int, void*)+0x1c6>
c00233e9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ee:	74 07                	je     c00233f7 <IDE::open(int, int, void*)+0x1bd>
c00233f0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233f5:	75 09                	jne    c0023400 <IDE::open(int, int, void*)+0x1c6>
c00233f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fe:	eb 1a                	jmp    c002341a <IDE::open(int, int, void*)+0x1e0>
c0023400:	83 ec 0c             	sub    esp,0xc
c0023403:	68 54 ca 02 c0       	push   0xc002ca54
c0023408:	eb 08                	jmp    c0023412 <IDE::open(int, int, void*)+0x1d8>
c002340a:	83 ec 0c             	sub    esp,0xc
c002340d:	68 85 ca 02 c0       	push   0xc002ca85
c0023412:	e8 e8 71 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0023417:	83 c4 10             	add    esp,0x10
c002341a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023421:	79 1a                	jns    c002343d <IDE::open(int, int, void*)+0x203>
c0023423:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023429:	83 e0 fc             	and    eax,0xfffffffc
c002342c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023433:	83 c0 08             	add    eax,0x8
c0023436:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002343d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023443:	89 c2                	mov    edx,eax
c0023445:	83 e2 0f             	and    edx,0xf
c0023448:	66 83 fa 08          	cmp    dx,0x8
c002344c:	75 0a                	jne    c0023458 <IDE::open(int, int, void*)+0x21e>
c002344e:	83 e8 02             	sub    eax,0x2
c0023451:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023458:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002345e:	89 c2                	mov    edx,eax
c0023460:	83 e2 0f             	and    edx,0xf
c0023463:	66 83 fa 08          	cmp    dx,0x8
c0023467:	75 0a                	jne    c0023473 <IDE::open(int, int, void*)+0x239>
c0023469:	83 e8 02             	sub    eax,0x2
c002346c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023473:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002347a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023481:	89 d0                	mov    eax,edx
c0023483:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023486:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002348a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002348e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023491:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023496:	0f b6 c9             	movzx  ecx,cl
c0023499:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234a0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234ab:	8d 50 02             	lea    edx,[eax+0x2]
c00234ae:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b3:	0f b6 d2             	movzx  edx,dl
c00234b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234bc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234bf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234c7:	8d 48 03             	lea    ecx,[eax+0x3]
c00234ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234cf:	0f b6 c9             	movzx  ecx,cl
c00234d2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234df:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234e3:	8d 50 04             	lea    edx,[eax+0x4]
c00234e6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234f8:	66 85 f6             	test   si,si
c00234fb:	74 3e                	je     c002353b <IDE::open(int, int, void*)+0x301>
c00234fd:	0f b6 d2             	movzx  edx,dl
c0023500:	83 c0 05             	add    eax,0x5
c0023503:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023506:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002350a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002350e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023514:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023519:	eb 20                	jmp    c002353b <IDE::open(int, int, void*)+0x301>
c002351b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023525:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002352f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023536:	e9 02 ff ff ff       	jmp    c002343d <IDE::open(int, int, void*)+0x203>
c002353b:	52                   	push   edx
c002353c:	52                   	push   edx
c002353d:	6a 00                	push   0x0
c002353f:	53                   	push   ebx
c0023540:	e8 7d fa ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0023545:	59                   	pop    ecx
c0023546:	5e                   	pop    esi
c0023547:	6a 01                	push   0x1
c0023549:	53                   	push   ebx
c002354a:	e8 73 fa ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c002354f:	83 c4 0c             	add    esp,0xc
c0023552:	6a 00                	push   0x0
c0023554:	6a 00                	push   0x0
c0023556:	53                   	push   ebx
c0023557:	e8 98 fc ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c002355c:	83 c4 0c             	add    esp,0xc
c002355f:	6a 00                	push   0x0
c0023561:	6a 01                	push   0x1
c0023563:	53                   	push   ebx
c0023564:	e8 8b fc ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0023569:	83 c4 10             	add    esp,0x10
c002356c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023573:	74 40                	je     c00235b5 <IDE::open(int, int, void*)+0x37b>
c0023575:	83 ec 0c             	sub    esp,0xc
c0023578:	68 af ca 02 c0       	push   0xc002caaf
c002357d:	e8 dc f9 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023585:	6a 01                	push   0x1
c0023587:	68 bc 31 02 c0       	push   0xc00231bc
c002358c:	6a 0e                	push   0xe
c002358e:	53                   	push   ebx
c002358f:	e8 74 0d ff ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023594:	83 c4 14             	add    esp,0x14
c0023597:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002359d:	53                   	push   ebx
c002359e:	6a 01                	push   0x1
c00235a0:	68 d8 31 02 c0       	push   0xc00231d8
c00235a5:	6a 0f                	push   0xf
c00235a7:	53                   	push   ebx
c00235a8:	e8 5b 0d ff ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ad:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235b3:	eb 4a                	jmp    c00235ff <IDE::open(int, int, void*)+0x3c5>
c00235b5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235bf:	50                   	push   eax
c00235c0:	6a 0f                	push   0xf
c00235c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235c8:	68 cb ca 02 c0       	push   0xc002cacb
c00235cd:	e8 8c f9 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00235d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235d5:	6a 00                	push   0x0
c00235d7:	68 bc 31 02 c0       	push   0xc00231bc
c00235dc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e2:	53                   	push   ebx
c00235e3:	e8 20 0d ff ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e8:	83 c4 14             	add    esp,0x14
c00235eb:	53                   	push   ebx
c00235ec:	6a 00                	push   0x0
c00235ee:	68 d8 31 02 c0       	push   0xc00231d8
c00235f3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235f9:	53                   	push   ebx
c00235fa:	e8 09 0d ff ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023601:	83 c4 20             	add    esp,0x20
c0023604:	83 ec 0c             	sub    esp,0xc
c0023607:	53                   	push   ebx
c0023608:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002360b:	83 c4 0c             	add    esp,0xc
c002360e:	6a 07                	push   0x7
c0023610:	6a 00                	push   0x0
c0023612:	53                   	push   ebx
c0023613:	e8 90 fa ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023618:	83 c4 0c             	add    esp,0xc
c002361b:	6a 07                	push   0x7
c002361d:	6a 01                	push   0x1
c002361f:	53                   	push   ebx
c0023620:	e8 83 fa ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023625:	83 c4 0c             	add    esp,0xc
c0023628:	6a 01                	push   0x1
c002362a:	6a 00                	push   0x0
c002362c:	53                   	push   ebx
c002362d:	e8 c2 fb ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0023632:	83 c4 0c             	add    esp,0xc
c0023635:	6a 01                	push   0x1
c0023637:	6a 01                	push   0x1
c0023639:	53                   	push   ebx
c002363a:	e8 b5 fb ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c002363f:	83 c4 2c             	add    esp,0x2c
c0023642:	31 c0                	xor    eax,eax
c0023644:	5b                   	pop    ebx
c0023645:	5e                   	pop    esi
c0023646:	5f                   	pop    edi
c0023647:	5d                   	pop    ebp
c0023648:	c3                   	ret    
c0023649:	90                   	nop

c002364a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002364a:	55                   	push   ebp
c002364b:	57                   	push   edi
c002364c:	56                   	push   esi
c002364d:	53                   	push   ebx
c002364e:	83 ec 1c             	sub    esp,0x1c
c0023651:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023655:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023659:	8d 50 f8             	lea    edx,[eax-0x8]
c002365c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023660:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023664:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023668:	80 fa 03             	cmp    dl,0x3
c002366b:	77 5d                	ja     c00236ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002366d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023675:	0f b6 db             	movzx  ebx,bl
c0023678:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002367b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002367f:	83 ca 80             	or     edx,0xffffff80
c0023682:	0f b6 d2             	movzx  edx,dl
c0023685:	52                   	push   edx
c0023686:	6a 0c                	push   0xc
c0023688:	53                   	push   ebx
c0023689:	56                   	push   esi
c002368a:	e8 59 f9 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023698:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002369c:	0f b6 c0             	movzx  eax,al
c002369f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236be:	83 c4 2c             	add    esp,0x2c
c00236c1:	5b                   	pop    ebx
c00236c2:	5e                   	pop    esi
c00236c3:	5f                   	pop    edi
c00236c4:	5d                   	pop    ebp
c00236c5:	e9 1e f9 ff ff       	jmp    c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ca:	3c 07                	cmp    al,0x7
c00236cc:	77 10                	ja     c00236de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236ce:	0f b6 db             	movzx  ebx,bl
c00236d1:	0f b6 d0             	movzx  edx,al
c00236d4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236dc:	eb 2d                	jmp    c002370b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236de:	3c 0d                	cmp    al,0xd
c00236e0:	77 13                	ja     c00236f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236e2:	0f b6 db             	movzx  ebx,bl
c00236e5:	0f b6 c0             	movzx  eax,al
c00236e8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236ef:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236f3:	eb 16                	jmp    c002370b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f5:	3c 15                	cmp    al,0x15
c00236f7:	77 14                	ja     c002370d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236f9:	0f b6 db             	movzx  ebx,bl
c00236fc:	0f b6 c0             	movzx  eax,al
c00236ff:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023707:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002370b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002370d:	83 c4 1c             	add    esp,0x1c
c0023710:	5b                   	pop    ebx
c0023711:	5e                   	pop    esi
c0023712:	5f                   	pop    edi
c0023713:	5d                   	pop    ebp
c0023714:	c3                   	ret    
c0023715:	90                   	nop

c0023716 <IDE::detect()>:
c0023716:	55                   	push   ebp
c0023717:	57                   	push   edi
c0023718:	56                   	push   esi
c0023719:	53                   	push   ebx
c002371a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023720:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023727:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002372e:	0f 85 be 02 00 00    	jne    c00239f2 <IDE::detect()+0x2dc>
c0023734:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002373b:	31 f6                	xor    esi,esi
c002373d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023745:	31 ed                	xor    ebp,ebp
c0023747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002374b:	c1 e0 06             	shl    eax,0x6
c002374e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023756:	89 e8                	mov    eax,ebp
c0023758:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002375c:	c1 e0 04             	shl    eax,0x4
c002375f:	83 c8 a0             	or     eax,0xffffffa0
c0023762:	0f b6 c0             	movzx  eax,al
c0023765:	50                   	push   eax
c0023766:	6a 06                	push   0x6
c0023768:	56                   	push   esi
c0023769:	53                   	push   ebx
c002376a:	e8 79 f8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376f:	83 c4 0c             	add    esp,0xc
c0023772:	6a 0c                	push   0xc
c0023774:	56                   	push   esi
c0023775:	53                   	push   ebx
c0023776:	e8 2d f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002377b:	83 c4 0c             	add    esp,0xc
c002377e:	6a 0c                	push   0xc
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	e8 21 f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023787:	83 c4 0c             	add    esp,0xc
c002378a:	6a 0c                	push   0xc
c002378c:	56                   	push   esi
c002378d:	53                   	push   ebx
c002378e:	e8 15 f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023793:	83 c4 0c             	add    esp,0xc
c0023796:	6a 0c                	push   0xc
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	e8 09 f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002379f:	68 ec 00 00 00       	push   0xec
c00237a4:	6a 07                	push   0x7
c00237a6:	56                   	push   esi
c00237a7:	53                   	push   ebx
c00237a8:	e8 3b f8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ad:	83 c4 1c             	add    esp,0x1c
c00237b0:	6a 0c                	push   0xc
c00237b2:	56                   	push   esi
c00237b3:	53                   	push   ebx
c00237b4:	e8 ef f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237b9:	83 c4 0c             	add    esp,0xc
c00237bc:	6a 0c                	push   0xc
c00237be:	56                   	push   esi
c00237bf:	53                   	push   ebx
c00237c0:	e8 e3 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237c5:	83 c4 0c             	add    esp,0xc
c00237c8:	6a 0c                	push   0xc
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	e8 d7 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237d1:	83 c4 0c             	add    esp,0xc
c00237d4:	6a 0c                	push   0xc
c00237d6:	56                   	push   esi
c00237d7:	53                   	push   ebx
c00237d8:	e8 cb f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	6a 0c                	push   0xc
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 bf f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237e9:	83 c4 10             	add    esp,0x10
c00237ec:	84 c0                	test   al,al
c00237ee:	0f 84 8b 01 00 00    	je     c002397f <IDE::detect()+0x269>
c00237f4:	31 ff                	xor    edi,edi
c00237f6:	50                   	push   eax
c00237f7:	6a 0c                	push   0xc
c00237f9:	56                   	push   esi
c00237fa:	53                   	push   ebx
c00237fb:	e8 a8 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023800:	83 c4 10             	add    esp,0x10
c0023803:	a8 01                	test   al,0x1
c0023805:	0f 85 8e 01 00 00    	jne    c0023999 <IDE::detect()+0x283>
c002380b:	84 c0                	test   al,al
c002380d:	78 04                	js     c0023813 <IDE::detect()+0xfd>
c002380f:	a8 08                	test   al,0x8
c0023811:	75 27                	jne    c002383a <IDE::detect()+0x124>
c0023813:	47                   	inc    edi
c0023814:	81 ff 17 01 00 00    	cmp    edi,0x117
c002381a:	7e da                	jle    c00237f6 <IDE::detect()+0xe0>
c002381c:	50                   	push   eax
c002381d:	50                   	push   eax
c002381e:	6a 00                	push   0x0
c0023820:	68 40 4b 4c 00       	push   0x4c4b40
c0023825:	e8 00 ab ff ff       	call   c001e32a <nanoSleep(unsigned long long)>
c002382a:	83 c4 10             	add    esp,0x10
c002382d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023833:	75 c1                	jne    c00237f6 <IDE::detect()+0xe0>
c0023835:	e9 5f 01 00 00       	jmp    c0023999 <IDE::detect()+0x283>
c002383a:	31 c9                	xor    ecx,ecx
c002383c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023840:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023844:	83 ec 0c             	sub    esp,0xc
c0023847:	68 80 00 00 00       	push   0x80
c002384c:	57                   	push   edi
c002384d:	6a 00                	push   0x0
c002384f:	56                   	push   esi
c0023850:	53                   	push   ebx
c0023851:	e8 f4 fd ff ff       	call   c002364a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023856:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002385b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002385f:	89 d1                	mov    ecx,edx
c0023861:	c1 e0 06             	shl    eax,0x6
c0023864:	01 d8                	add    eax,ebx
c0023866:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002386d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023874:	89 f2                	mov    edx,esi
c0023876:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002387c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023880:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023886:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002388a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023891:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023899:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238a0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238a8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238ae:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238c3:	83 c4 20             	add    esp,0x20
c00238c6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238c9:	83 c0 02             	add    eax,0x2
c00238cc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238d2:	83 c7 02             	add    edi,0x2
c00238d5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238d8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238de:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238e2:	75 e2                	jne    c00238c6 <IDE::detect()+0x1b0>
c00238e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e8:	c1 e0 06             	shl    eax,0x6
c00238eb:	01 d8                	add    eax,ebx
c00238ed:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238f3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238fa:	66 c1 ea 09          	shr    dx,0x9
c00238fe:	83 e2 01             	and    edx,0x1
c0023901:	84 c9                	test   cl,cl
c0023903:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023909:	75 2f                	jne    c002393a <IDE::detect()+0x224>
c002390b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023911:	85 c0                	test   eax,eax
c0023913:	74 66                	je     c002397b <IDE::detect()+0x265>
c0023915:	50                   	push   eax
c0023916:	55                   	push   ebp
c0023917:	56                   	push   esi
c0023918:	68 e7 ca 02 c0       	push   0xc002cae7
c002391d:	e8 3c f6 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023922:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023929:	e8 15 bf fe ff       	call   c000f843 <malloc>
c002392e:	89 c7                	mov    edi,eax
c0023930:	89 04 24             	mov    DWORD PTR [esp],eax
c0023933:	e8 78 06 00 00       	call   c0023fb0 <ATA::ATA()>
c0023938:	eb 28                	jmp    c0023962 <IDE::detect()+0x24c>
c002393a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023940:	55                   	push   ebp
c0023941:	56                   	push   esi
c0023942:	68 16 cb 02 c0       	push   0xc002cb16
c0023947:	e8 12 f6 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c002394c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023953:	e8 eb be fe ff       	call   c000f843 <malloc>
c0023958:	89 c7                	mov    edi,eax
c002395a:	89 04 24             	mov    DWORD PTR [esp],eax
c002395d:	e8 8e 0c 00 00       	call   c00245f0 <ATAPI::ATAPI()>
c0023962:	5a                   	pop    edx
c0023963:	59                   	pop    ecx
c0023964:	57                   	push   edi
c0023965:	53                   	push   ebx
c0023966:	e8 19 0a ff ff       	call   c0014384 <Device::addChild(Device*)>
c002396b:	8b 07                	mov    eax,DWORD PTR [edi]
c002396d:	53                   	push   ebx
c002396e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023972:	6a 00                	push   0x0
c0023974:	57                   	push   edi
c0023975:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023978:	83 c4 20             	add    esp,0x20
c002397b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002397f:	4d                   	dec    ebp
c0023980:	74 0a                	je     c002398c <IDE::detect()+0x276>
c0023982:	bd 01 00 00 00       	mov    ebp,0x1
c0023987:	e9 bb fd ff ff       	jmp    c0023747 <IDE::detect()+0x31>
c002398c:	4e                   	dec    esi
c002398d:	74 63                	je     c00239f2 <IDE::detect()+0x2dc>
c002398f:	be 01 00 00 00       	mov    esi,0x1
c0023994:	e9 ac fd ff ff       	jmp    c0023745 <IDE::detect()+0x2f>
c0023999:	50                   	push   eax
c002399a:	6a 04                	push   0x4
c002399c:	56                   	push   esi
c002399d:	53                   	push   ebx
c002399e:	e8 05 f7 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00239a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239a7:	83 c4 0c             	add    esp,0xc
c00239aa:	6a 05                	push   0x5
c00239ac:	56                   	push   esi
c00239ad:	53                   	push   ebx
c00239ae:	e8 f5 f6 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00239b3:	83 c4 10             	add    esp,0x10
c00239b6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239ba:	80 fa 14             	cmp    dl,0x14
c00239bd:	75 04                	jne    c00239c3 <IDE::detect()+0x2ad>
c00239bf:	3c eb                	cmp    al,0xeb
c00239c1:	eb 07                	jmp    c00239ca <IDE::detect()+0x2b4>
c00239c3:	3c 96                	cmp    al,0x96
c00239c5:	75 b8                	jne    c002397f <IDE::detect()+0x269>
c00239c7:	80 fa 69             	cmp    dl,0x69
c00239ca:	75 b3                	jne    c002397f <IDE::detect()+0x269>
c00239cc:	68 a1 00 00 00       	push   0xa1
c00239d1:	6a 07                	push   0x7
c00239d3:	56                   	push   esi
c00239d4:	53                   	push   ebx
c00239d5:	e8 0e f6 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239da:	5f                   	pop    edi
c00239db:	58                   	pop    eax
c00239dc:	6a 00                	push   0x0
c00239de:	68 40 42 0f 00       	push   0xf4240
c00239e3:	e8 42 a9 ff ff       	call   c001e32a <nanoSleep(unsigned long long)>
c00239e8:	83 c4 10             	add    esp,0x10
c00239eb:	b1 01                	mov    cl,0x1
c00239ed:	e9 4a fe ff ff       	jmp    c002383c <IDE::detect()+0x126>
c00239f2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239f8:	5b                   	pop    ebx
c00239f9:	5e                   	pop    esi
c00239fa:	5f                   	pop    edi
c00239fb:	5d                   	pop    ebp
c00239fc:	c3                   	ret    
c00239fd:	90                   	nop

c00239fe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239fe:	55                   	push   ebp
c00239ff:	57                   	push   edi
c0023a00:	56                   	push   esi
c0023a01:	53                   	push   ebx
c0023a02:	83 ec 1c             	sub    esp,0x1c
c0023a05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a11:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a15:	88 c3                	mov    bl,al
c0023a17:	84 c0                	test   al,al
c0023a19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a1d:	0f 84 67 01 00 00    	je     c0023b8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a23:	83 ec 0c             	sub    esp,0xc
c0023a26:	68 47 cb 02 c0       	push   0xc002cb47
c0023a2b:	e8 2e f5 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023a30:	83 c4 10             	add    esp,0x10
c0023a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a37:	3c 01                	cmp    al,0x1
c0023a39:	75 17                	jne    c0023a52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a3b:	83 ec 0c             	sub    esp,0xc
c0023a3e:	b3 13                	mov    bl,0x13
c0023a40:	68 53 cb 02 c0       	push   0xc002cb53
c0023a45:	e8 14 f5 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023a4a:	83 c4 10             	add    esp,0x10
c0023a4d:	e9 25 01 00 00       	jmp    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a52:	3c 02                	cmp    al,0x2
c0023a54:	0f 85 ef 00 00 00    	jne    c0023b49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a5a:	d1 e6                	shl    esi,1
c0023a5c:	09 ee                	or     esi,ebp
c0023a5e:	52                   	push   edx
c0023a5f:	89 f0                	mov    eax,esi
c0023a61:	6a 01                	push   0x1
c0023a63:	0f b6 f0             	movzx  esi,al
c0023a66:	c1 e6 06             	shl    esi,0x6
c0023a69:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a71:	50                   	push   eax
c0023a72:	57                   	push   edi
c0023a73:	e8 30 f6 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023a78:	83 c4 10             	add    esp,0x10
c0023a7b:	89 c6                	mov    esi,eax
c0023a7d:	a8 01                	test   al,0x1
c0023a7f:	74 12                	je     c0023a93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a81:	83 ec 0c             	sub    esp,0xc
c0023a84:	b3 07                	mov    bl,0x7
c0023a86:	68 68 cb 02 c0       	push   0xc002cb68
c0023a8b:	e8 ce f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a99:	74 12                	je     c0023aad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a9b:	83 ec 0c             	sub    esp,0xc
c0023a9e:	b3 03                	mov    bl,0x3
c0023aa0:	68 86 cb 02 c0       	push   0xc002cb86
c0023aa5:	e8 b4 f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023aaa:	83 c4 10             	add    esp,0x10
c0023aad:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ab3:	74 12                	je     c0023ac7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ab5:	83 ec 0c             	sub    esp,0xc
c0023ab8:	b3 14                	mov    bl,0x14
c0023aba:	68 a6 cb 02 c0       	push   0xc002cba6
c0023abf:	e8 9a f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023ac4:	83 c4 10             	add    esp,0x10
c0023ac7:	f7 c6 08 00 00 00    	test   esi,0x8
c0023acd:	74 12                	je     c0023ae1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023acf:	83 ec 0c             	sub    esp,0xc
c0023ad2:	b3 03                	mov    bl,0x3
c0023ad4:	68 86 cb 02 c0       	push   0xc002cb86
c0023ad9:	e8 80 f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023ade:	83 c4 10             	add    esp,0x10
c0023ae1:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ae7:	74 12                	je     c0023afb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ae9:	83 ec 0c             	sub    esp,0xc
c0023aec:	b3 15                	mov    bl,0x15
c0023aee:	68 be cb 02 c0       	push   0xc002cbbe
c0023af3:	e8 66 f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023af8:	83 c4 10             	add    esp,0x10
c0023afb:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b01:	74 12                	je     c0023b15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b03:	83 ec 0c             	sub    esp,0xc
c0023b06:	b3 03                	mov    bl,0x3
c0023b08:	68 86 cb 02 c0       	push   0xc002cb86
c0023b0d:	e8 4c f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b12:	83 c4 10             	add    esp,0x10
c0023b15:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b1b:	74 12                	je     c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b1d:	83 ec 0c             	sub    esp,0xc
c0023b20:	b3 16                	mov    bl,0x16
c0023b22:	68 d8 cb 02 c0       	push   0xc002cbd8
c0023b27:	e8 32 f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b2c:	83 c4 10             	add    esp,0x10
c0023b2f:	89 f0                	mov    eax,esi
c0023b31:	84 c0                	test   al,al
c0023b33:	79 42                	jns    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b35:	83 ec 0c             	sub    esp,0xc
c0023b38:	b3 0d                	mov    bl,0xd
c0023b3a:	68 f9 cb 02 c0       	push   0xc002cbf9
c0023b3f:	e8 1a f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b44:	83 c4 10             	add    esp,0x10
c0023b47:	eb 2e                	jmp    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b49:	3c 03                	cmp    al,0x3
c0023b4b:	75 14                	jne    c0023b61 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	b3 17                	mov    bl,0x17
c0023b52:	68 0d cc 02 c0       	push   0xc002cc0d
c0023b57:	e8 02 f4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b5c:	83 c4 10             	add    esp,0x10
c0023b5f:	eb 16                	jmp    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b61:	3c 04                	cmp    al,0x4
c0023b63:	75 12                	jne    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b65:	83 ec 0c             	sub    esp,0xc
c0023b68:	b3 08                	mov    bl,0x8
c0023b6a:	68 23 cc 02 c0       	push   0xc002cc23
c0023b6f:	e8 ea f3 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b74:	83 c4 10             	add    esp,0x10
c0023b77:	50                   	push   eax
c0023b78:	50                   	push   eax
c0023b79:	0f b6 c3             	movzx  eax,bl
c0023b7c:	50                   	push   eax
c0023b7d:	68 3b cc 02 c0       	push   0xc002cc3b
c0023b82:	e8 d7 f3 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023b87:	83 c4 10             	add    esp,0x10
c0023b8a:	83 c4 1c             	add    esp,0x1c
c0023b8d:	88 d8                	mov    al,bl
c0023b8f:	5b                   	pop    ebx
c0023b90:	5e                   	pop    esi
c0023b91:	5f                   	pop    edi
c0023b92:	5d                   	pop    ebp
c0023b93:	c3                   	ret    

c0023b94 <IDE::polling(unsigned char, unsigned int)>:
c0023b94:	57                   	push   edi
c0023b95:	56                   	push   esi
c0023b96:	53                   	push   ebx
c0023b97:	bb 04 00 00 00       	mov    ebx,0x4
c0023b9c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ba0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ba5:	52                   	push   edx
c0023ba6:	6a 0c                	push   0xc
c0023ba8:	56                   	push   esi
c0023ba9:	57                   	push   edi
c0023baa:	e8 f9 f4 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023baf:	83 c4 10             	add    esp,0x10
c0023bb2:	4b                   	dec    ebx
c0023bb3:	75 f0                	jne    c0023ba5 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bb5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bba:	50                   	push   eax
c0023bbb:	6a 0c                	push   0xc
c0023bbd:	56                   	push   esi
c0023bbe:	57                   	push   edi
c0023bbf:	e8 e4 f4 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	a8 01                	test   al,0x1
c0023bc9:	74 12                	je     c0023bdd <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bcb:	83 ec 0c             	sub    esp,0xc
c0023bce:	68 55 cc 02 c0       	push   0xc002cc55
c0023bd3:	e8 86 f3 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023bd8:	83 c4 10             	add    esp,0x10
c0023bdb:	eb 17                	jmp    c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bdd:	a8 20                	test   al,0x20
c0023bdf:	75 0f                	jne    c0023bf0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023be1:	4b                   	dec    ebx
c0023be2:	74 10                	je     c0023bf4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023be4:	84 c0                	test   al,al
c0023be6:	78 d2                	js     c0023bba <IDE::polling(unsigned char, unsigned int)+0x26>
c0023be8:	a8 08                	test   al,0x8
c0023bea:	74 ce                	je     c0023bba <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bec:	31 c0                	xor    eax,eax
c0023bee:	eb 06                	jmp    c0023bf6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf0:	b0 01                	mov    al,0x1
c0023bf2:	eb 02                	jmp    c0023bf6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf4:	b0 02                	mov    al,0x2
c0023bf6:	5b                   	pop    ebx
c0023bf7:	5e                   	pop    esi
c0023bf8:	5f                   	pop    edi
c0023bf9:	c3                   	ret    

c0023bfa <SATABus::close(int, int, void*)>:
c0023bfa:	31 c0                	xor    eax,eax
c0023bfc:	c3                   	ret    
c0023bfd:	90                   	nop

c0023bfe <SATABus::detect()>:
c0023bfe:	c3                   	ret    
c0023bff:	90                   	nop

c0023c00 <SATABus::SATABus()>:
c0023c00:	83 ec 0c             	sub    esp,0xc
c0023c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c07:	83 ec 08             	sub    esp,0x8
c0023c0a:	68 98 cc 02 c0       	push   0xc002cc98
c0023c0f:	50                   	push   eax
c0023c10:	e8 fb 0a ff ff       	call   c0014710 <HardDiskController::HardDiskController(char const*)>
c0023c15:	83 c4 10             	add    esp,0x10
c0023c18:	ba 54 cd 02 c0       	mov    edx,0xc002cd54
c0023c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c21:	89 10                	mov    DWORD PTR [eax],edx
c0023c23:	83 ec 0c             	sub    esp,0xc
c0023c26:	6a 50                	push   0x50
c0023c28:	e8 fe c3 fe ff       	call   c001002b <Phys::allocateContiguousPages(int)>
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	89 c2                	mov    edx,eax
c0023c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c36:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c3c:	83 ec 0c             	sub    esp,0xc
c0023c3f:	6a 50                	push   0x50
c0023c41:	e8 5f df fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0023c46:	83 c4 10             	add    esp,0x10
c0023c49:	89 c2                	mov    edx,eax
c0023c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c55:	e8 e6 e1 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0023c5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c5e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c68:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c6e:	83 ec 0c             	sub    esp,0xc
c0023c71:	6a 03                	push   0x3
c0023c73:	6a 50                	push   0x50
c0023c75:	51                   	push   ecx
c0023c76:	52                   	push   edx
c0023c77:	50                   	push   eax
c0023c78:	e8 f3 e9 fe ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c7d:	83 c4 20             	add    esp,0x20
c0023c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c84:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c94:	83 ec 04             	sub    esp,0x4
c0023c97:	52                   	push   edx
c0023c98:	50                   	push   eax
c0023c99:	68 bc cc 02 c0       	push   0xc002ccbc
c0023c9e:	e8 bb f2 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023ca3:	83 c4 10             	add    esp,0x10
c0023ca6:	90                   	nop
c0023ca7:	83 c4 0c             	add    esp,0xc
c0023caa:	c3                   	ret    
c0023cab:	90                   	nop

c0023cac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cac:	83 ec 0c             	sub    esp,0xc
c0023caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cb3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cb6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cb9:	09 c2                	or     edx,eax
c0023cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cc7:	31 c0                	xor    eax,eax
c0023cc9:	c1 e9 08             	shr    ecx,0x8
c0023ccc:	83 e1 0f             	and    ecx,0xf
c0023ccf:	39 c8                	cmp    eax,ecx
c0023cd1:	74 0a                	je     c0023cdd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cd3:	f6 c2 01             	test   dl,0x1
c0023cd6:	74 18                	je     c0023cf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd8:	d1 ea                	shr    edx,1
c0023cda:	40                   	inc    eax
c0023cdb:	eb f2                	jmp    c0023ccf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cdd:	83 ec 0c             	sub    esp,0xc
c0023ce0:	68 e0 cc 02 c0       	push   0xc002cce0
c0023ce5:	e8 15 69 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0023cea:	83 c4 10             	add    esp,0x10
c0023ced:	83 c8 ff             	or     eax,0xffffffff
c0023cf0:	83 c4 0c             	add    esp,0xc
c0023cf3:	c3                   	ret    

c0023cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cf8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cfb:	89 c2                	mov    edx,eax
c0023cfd:	c1 ea 08             	shr    edx,0x8
c0023d00:	83 e2 0f             	and    edx,0xf
c0023d03:	fe ca                	dec    dl
c0023d05:	75 31                	jne    c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d07:	83 e0 0f             	and    eax,0xf
c0023d0a:	3c 03                	cmp    al,0x3
c0023d0c:	75 2a                	jne    c0023d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d0e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d11:	b8 02 00 00 00       	mov    eax,0x2
c0023d16:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d1c:	74 1c                	je     c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d1e:	b8 04 00 00 00       	mov    eax,0x4
c0023d23:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d29:	74 0f                	je     c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d2b:	31 c0                	xor    eax,eax
c0023d2d:	83 fa 03             	cmp    edx,0x3
c0023d30:	0f 94 c0             	sete   al
c0023d33:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d37:	c3                   	ret    
c0023d38:	31 c0                	xor    eax,eax
c0023d3a:	c3                   	ret    
c0023d3b:	90                   	nop

c0023d3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d43:	0f ba e2 0f          	bt     edx,0xf
c0023d47:	72 f7                	jb     c0023d40 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4c:	83 ca 10             	or     edx,0x10
c0023d4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d55:	83 ca 01             	or     edx,0x1
c0023d58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d5b:	c3                   	ret    

c0023d5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d63:	83 e2 fe             	and    edx,0xfffffffe
c0023d66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6c:	83 e2 ef             	and    edx,0xffffffef
c0023d6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d75:	0f ba e2 0e          	bt     edx,0xe
c0023d79:	72 f7                	jb     c0023d72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d7b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7e:	0f ba e2 0f          	bt     edx,0xf
c0023d82:	72 ee                	jb     c0023d72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d84:	c3                   	ret    
c0023d85:	90                   	nop

c0023d86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d86:	55                   	push   ebp
c0023d87:	57                   	push   edi
c0023d88:	56                   	push   esi
c0023d89:	53                   	push   ebx
c0023d8a:	83 ec 1c             	sub    esp,0x1c
c0023d8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d95:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d99:	53                   	push   ebx
c0023d9a:	89 fd                	mov    ebp,edi
c0023d9c:	56                   	push   esi
c0023d9d:	c1 e5 0a             	shl    ebp,0xa
c0023da0:	e8 b7 ff ff ff       	call   c0023d5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023da5:	83 ec 0c             	sub    esp,0xc
c0023da8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dae:	01 e8                	add    eax,ebp
c0023db0:	89 03                	mov    DWORD PTR [ebx],eax
c0023db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023db4:	68 00 04 00 00       	push   0x400
c0023db9:	6a 00                	push   0x0
c0023dbb:	50                   	push   eax
c0023dbc:	e8 b7 c9 fd ff       	call   c0000778 <memset>
c0023dc1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023dc7:	89 fa                	mov    edx,edi
c0023dc9:	01 e8                	add    eax,ebp
c0023dcb:	c1 e7 0d             	shl    edi,0xd
c0023dce:	89 03                	mov    DWORD PTR [ebx],eax
c0023dd0:	c1 e2 08             	shl    edx,0x8
c0023dd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dda:	81 c2 00 80 00 00    	add    edx,0x8000
c0023de0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023de4:	89 d0                	mov    eax,edx
c0023de6:	83 c4 1c             	add    esp,0x1c
c0023de9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023def:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023df2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023df5:	68 00 01 00 00       	push   0x100
c0023dfa:	6a 00                	push   0x0
c0023dfc:	50                   	push   eax
c0023dfd:	e8 76 c9 fd ff       	call   c0000778 <memset>
c0023e02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e06:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e0c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e16:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e19:	83 c4 10             	add    esp,0x10
c0023e1c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e23:	31 ff                	xor    edi,edi
c0023e25:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e2b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e35:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e3b:	83 c5 20             	add    ebp,0x20
c0023e3e:	01 f8                	add    eax,edi
c0023e40:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e43:	52                   	push   edx
c0023e44:	68 00 01 00 00       	push   0x100
c0023e49:	6a 00                	push   0x0
c0023e4b:	50                   	push   eax
c0023e4c:	e8 27 c9 fd ff       	call   c0000778 <memset>
c0023e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e55:	83 c4 10             	add    esp,0x10
c0023e58:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e5e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e65:	01 f8                	add    eax,edi
c0023e67:	81 c7 00 01 00 00    	add    edi,0x100
c0023e6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e70:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e76:	75 b3                	jne    c0023e2b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e78:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e7c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e80:	83 c4 1c             	add    esp,0x1c
c0023e83:	5b                   	pop    ebx
c0023e84:	5e                   	pop    esi
c0023e85:	5f                   	pop    edi
c0023e86:	5d                   	pop    ebp
c0023e87:	e9 b0 fe ff ff       	jmp    c0023d3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e8c:	55                   	push   ebp
c0023e8d:	57                   	push   edi
c0023e8e:	56                   	push   esi
c0023e8f:	53                   	push   ebx
c0023e90:	31 db                	xor    ebx,ebx
c0023e92:	83 ec 0c             	sub    esp,0xc
c0023e95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e9d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ea0:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ea6:	0f 84 aa 00 00 00    	je     c0023f56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023eac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eb0:	89 d8                	mov    eax,ebx
c0023eb2:	c1 e0 07             	shl    eax,0x7
c0023eb5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ebc:	55                   	push   ebp
c0023ebd:	56                   	push   esi
c0023ebe:	e8 31 fe ff ff       	call   c0023cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ec3:	5a                   	pop    edx
c0023ec4:	83 f8 01             	cmp    eax,0x1
c0023ec7:	59                   	pop    ecx
c0023ec8:	75 30                	jne    c0023efa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023eca:	50                   	push   eax
c0023ecb:	50                   	push   eax
c0023ecc:	53                   	push   ebx
c0023ecd:	68 05 cd 02 c0       	push   0xc002cd05
c0023ed2:	e8 87 f0 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023ed7:	83 c4 0c             	add    esp,0xc
c0023eda:	53                   	push   ebx
c0023edb:	55                   	push   ebp
c0023edc:	56                   	push   esi
c0023edd:	e8 a4 fe ff ff       	call   c0023d86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ee2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ee9:	e8 55 b9 fe ff       	call   c000f843 <malloc>
c0023eee:	89 c5                	mov    ebp,eax
c0023ef0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ef3:	e8 60 0d 00 00       	call   c0024c58 <SATA::SATA()>
c0023ef8:	eb 33                	jmp    c0023f2d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023efa:	83 f8 04             	cmp    eax,0x4
c0023efd:	75 47                	jne    c0023f46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023eff:	50                   	push   eax
c0023f00:	50                   	push   eax
c0023f01:	53                   	push   ebx
c0023f02:	68 1c cd 02 c0       	push   0xc002cd1c
c0023f07:	e8 52 f0 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023f0c:	83 c4 0c             	add    esp,0xc
c0023f0f:	53                   	push   ebx
c0023f10:	55                   	push   ebp
c0023f11:	56                   	push   esi
c0023f12:	e8 6f fe ff ff       	call   c0023d86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f17:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f1e:	e8 20 b9 fe ff       	call   c000f843 <malloc>
c0023f23:	89 c5                	mov    ebp,eax
c0023f25:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f28:	e8 d7 10 00 00       	call   c0025004 <SATAPI::SATAPI()>
c0023f2d:	5a                   	pop    edx
c0023f2e:	59                   	pop    ecx
c0023f2f:	55                   	push   ebp
c0023f30:	56                   	push   esi
c0023f31:	e8 4e 04 ff ff       	call   c0014384 <Device::addChild(Device*)>
c0023f36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f39:	56                   	push   esi
c0023f3a:	6a 00                	push   0x0
c0023f3c:	53                   	push   ebx
c0023f3d:	55                   	push   ebp
c0023f3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f41:	83 c4 20             	add    esp,0x20
c0023f44:	eb 10                	jmp    c0023f56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f46:	50                   	push   eax
c0023f47:	50                   	push   eax
c0023f48:	53                   	push   ebx
c0023f49:	68 35 cd 02 c0       	push   0xc002cd35
c0023f4e:	e8 0b f0 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0023f53:	83 c4 10             	add    esp,0x10
c0023f56:	d1 ef                	shr    edi,1
c0023f58:	43                   	inc    ebx
c0023f59:	83 fb 20             	cmp    ebx,0x20
c0023f5c:	0f 85 3e ff ff ff    	jne    c0023ea0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f62:	83 c4 0c             	add    esp,0xc
c0023f65:	5b                   	pop    ebx
c0023f66:	5e                   	pop    esi
c0023f67:	5f                   	pop    edi
c0023f68:	5d                   	pop    ebp
c0023f69:	c3                   	ret    

c0023f6a <SATABus::open(int, int, void*)>:
c0023f6a:	83 ec 14             	sub    esp,0x14
c0023f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f71:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f77:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f7d:	52                   	push   edx
c0023f7e:	50                   	push   eax
c0023f7f:	e8 08 ff ff ff       	call   c0023e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f84:	31 c0                	xor    eax,eax
c0023f86:	83 c4 1c             	add    esp,0x1c
c0023f89:	c3                   	ret    

c0023f8a <ATA::close(int, int, void*)>:
c0023f8a:	83 ec 0c             	sub    esp,0xc
c0023f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f97:	85 c0                	test   eax,eax
c0023f99:	74 0c                	je     c0023fa7 <ATA::close(int, int, void*)+0x1d>
c0023f9b:	83 ec 0c             	sub    esp,0xc
c0023f9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fa0:	50                   	push   eax
c0023fa1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fa4:	83 c4 10             	add    esp,0x10
c0023fa7:	31 c0                	xor    eax,eax
c0023fa9:	83 c4 0c             	add    esp,0xc
c0023fac:	c3                   	ret    
c0023fad:	90                   	nop

c0023fae <ATA::powerSaving(PowerSavingLevel)>:
c0023fae:	c3                   	ret    
c0023faf:	90                   	nop

c0023fb0 <ATA::ATA()>:
c0023fb0:	83 ec 0c             	sub    esp,0xc
c0023fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb7:	83 ec 04             	sub    esp,0x4
c0023fba:	68 00 02 00 00       	push   0x200
c0023fbf:	68 1d ce 02 c0       	push   0xc002ce1d
c0023fc4:	50                   	push   eax
c0023fc5:	e8 de 07 ff ff       	call   c00147a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fca:	83 c4 10             	add    esp,0x10
c0023fcd:	ba a0 cd 02 c0       	mov    edx,0xc002cda0
c0023fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd6:	89 10                	mov    DWORD PTR [eax],edx
c0023fd8:	90                   	nop
c0023fd9:	83 c4 0c             	add    esp,0xc
c0023fdc:	c3                   	ret    
c0023fdd:	90                   	nop

c0023fde <ATA::flush(bool)>:
c0023fde:	53                   	push   ebx
c0023fdf:	83 ec 08             	sub    esp,0x8
c0023fe2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023feb:	19 c0                	sbb    eax,eax
c0023fed:	83 e0 fd             	and    eax,0xfffffffd
c0023ff0:	05 ea 00 00 00       	add    eax,0xea
c0023ff5:	50                   	push   eax
c0023ff6:	6a 07                	push   0x7
c0023ff8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fff:	50                   	push   eax
c0024000:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024006:	e8 dd ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002400b:	83 c4 0c             	add    esp,0xc
c002400e:	6a 00                	push   0x0
c0024010:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024017:	50                   	push   eax
c0024018:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401e:	e8 71 fb ff ff       	call   c0023b94 <IDE::polling(unsigned char, unsigned int)>
c0024023:	83 c4 18             	add    esp,0x18
c0024026:	5b                   	pop    ebx
c0024027:	c3                   	ret    

c0024028 <ATA::readyForCommand()>:
c0024028:	56                   	push   esi
c0024029:	53                   	push   ebx
c002402a:	31 db                	xor    ebx,ebx
c002402c:	50                   	push   eax
c002402d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024031:	50                   	push   eax
c0024032:	6a 0c                	push   0xc
c0024034:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002403b:	50                   	push   eax
c002403c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024042:	e8 61 f0 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0024047:	83 c4 10             	add    esp,0x10
c002404a:	a8 88                	test   al,0x88
c002404c:	74 23                	je     c0024071 <ATA::readyForCommand()+0x49>
c002404e:	43                   	inc    ebx
c002404f:	83 fb 63             	cmp    ebx,0x63
c0024052:	7e dd                	jle    c0024031 <ATA::readyForCommand()+0x9>
c0024054:	51                   	push   ecx
c0024055:	51                   	push   ecx
c0024056:	6a 00                	push   0x0
c0024058:	68 40 42 0f 00       	push   0xf4240
c002405d:	e8 c8 a2 ff ff       	call   c001e32a <nanoSleep(unsigned long long)>
c0024062:	83 c4 10             	add    esp,0x10
c0024065:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002406b:	75 c4                	jne    c0024031 <ATA::readyForCommand()+0x9>
c002406d:	31 c0                	xor    eax,eax
c002406f:	eb 02                	jmp    c0024073 <ATA::readyForCommand()+0x4b>
c0024071:	b0 01                	mov    al,0x1
c0024073:	5a                   	pop    edx
c0024074:	5b                   	pop    ebx
c0024075:	5e                   	pop    esi
c0024076:	c3                   	ret    
c0024077:	90                   	nop

c0024078 <ATA::access(unsigned long long, int, void*, bool)>:
c0024078:	55                   	push   ebp
c0024079:	57                   	push   edi
c002407a:	56                   	push   esi
c002407b:	53                   	push   ebx
c002407c:	83 ec 2c             	sub    esp,0x2c
c002407f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024087:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002408b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002408f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024093:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024097:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002409b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240a5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240af:	c1 e0 06             	shl    eax,0x6
c00240b2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240ba:	74 5d                	je     c0024119 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240bc:	89 fa                	mov    edx,edi
c00240be:	89 f0                	mov    eax,esi
c00240c0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240c4:	c1 ea 1c             	shr    edx,0x1c
c00240c7:	89 d1                	mov    ecx,edx
c00240c9:	09 c1                	or     ecx,eax
c00240cb:	74 25                	je     c00240f2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240cd:	31 ed                	xor    ebp,ebp
c00240cf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240d6:	89 fa                	mov    edx,edi
c00240d8:	89 f0                	mov    eax,esi
c00240da:	0f ad d0             	shrd   eax,edx,cl
c00240dd:	d3 ea                	shr    edx,cl
c00240df:	f6 c1 20             	test   cl,0x20
c00240e2:	74 02                	je     c00240e6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240e4:	89 d0                	mov    eax,edx
c00240e6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240ea:	45                   	inc    ebp
c00240eb:	83 fd 06             	cmp    ebp,0x6
c00240ee:	75 df                	jne    c00240cf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240f0:	eb 76                	jmp    c0024168 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240f2:	89 f0                	mov    eax,esi
c00240f4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240f9:	89 fa                	mov    edx,edi
c00240fb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024102:	0f ac d0 10          	shrd   eax,edx,0x10
c0024106:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002410b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002410f:	c1 ee 18             	shr    esi,0x18
c0024112:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024117:	eb 56                	jmp    c002416f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024119:	6a 00                	push   0x0
c002411b:	6a 3f                	push   0x3f
c002411d:	57                   	push   edi
c002411e:	56                   	push   esi
c002411f:	e8 98 29 00 00       	call   c0026abc <__umoddi3>
c0024124:	83 c4 10             	add    esp,0x10
c0024127:	40                   	inc    eax
c0024128:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002412c:	6a 00                	push   0x0
c002412e:	68 f0 03 00 00       	push   0x3f0
c0024133:	57                   	push   edi
c0024134:	56                   	push   esi
c0024135:	e8 82 28 00 00       	call   c00269bc <__udivdi3>
c002413a:	83 c4 10             	add    esp,0x10
c002413d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024142:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024149:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002414e:	6a 00                	push   0x0
c0024150:	6a 3f                	push   0x3f
c0024152:	57                   	push   edi
c0024153:	56                   	push   esi
c0024154:	e8 63 28 00 00       	call   c00269bc <__udivdi3>
c0024159:	83 c4 10             	add    esp,0x10
c002415c:	89 c6                	mov    esi,eax
c002415e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024163:	83 e6 0f             	and    esi,0xf
c0024166:	eb 07                	jmp    c002416f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024168:	31 f6                	xor    esi,esi
c002416a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002416f:	bf 01 00 00 00       	mov    edi,0x1
c0024174:	50                   	push   eax
c0024175:	6a 00                	push   0x0
c0024177:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417e:	50                   	push   eax
c002417f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024183:	e8 6c f0 ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0024188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002418b:	e8 98 fe ff ff       	call   c0024028 <ATA::readyForCommand()>
c0024190:	83 c4 10             	add    esp,0x10
c0024193:	84 c0                	test   al,al
c0024195:	0f 84 5a 02 00 00    	je     c00243f5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002419b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241a7:	c1 e0 04             	shl    eax,0x4
c00241aa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241b1:	09 c6                	or     esi,eax
c00241b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241b8:	75 05                	jne    c00241bf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241ba:	83 ce a0             	or     esi,0xffffffa0
c00241bd:	eb 03                	jmp    c00241c2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241bf:	83 ce e0             	or     esi,0xffffffe0
c00241c2:	89 f0                	mov    eax,esi
c00241c4:	0f b6 f0             	movzx  esi,al
c00241c7:	56                   	push   esi
c00241c8:	6a 06                	push   0x6
c00241ca:	51                   	push   ecx
c00241cb:	52                   	push   edx
c00241cc:	e8 17 ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d1:	83 c4 10             	add    esp,0x10
c00241d4:	6a 00                	push   0x0
c00241d6:	6a 01                	push   0x1
c00241d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241df:	50                   	push   eax
c00241e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e6:	e8 fd ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241eb:	83 c4 10             	add    esp,0x10
c00241ee:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241f3:	75 6e                	jne    c0024263 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241f5:	6a 00                	push   0x0
c00241f7:	6a 08                	push   0x8
c00241f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024200:	50                   	push   eax
c0024201:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024207:	e8 dc ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024211:	50                   	push   eax
c0024212:	6a 09                	push   0x9
c0024214:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002421b:	50                   	push   eax
c002421c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024222:	e8 c1 ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024227:	83 c4 20             	add    esp,0x20
c002422a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002422f:	50                   	push   eax
c0024230:	6a 0a                	push   0xa
c0024232:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024239:	50                   	push   eax
c002423a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024240:	e8 a3 ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024245:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002424a:	50                   	push   eax
c002424b:	6a 0b                	push   0xb
c002424d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024254:	50                   	push   eax
c0024255:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002425b:	e8 88 ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024260:	83 c4 20             	add    esp,0x20
c0024263:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024268:	50                   	push   eax
c0024269:	6a 02                	push   0x2
c002426b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024272:	50                   	push   eax
c0024273:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024279:	e8 6a ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024283:	50                   	push   eax
c0024284:	6a 03                	push   0x3
c0024286:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428d:	50                   	push   eax
c002428e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024294:	e8 4f ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024299:	83 c4 20             	add    esp,0x20
c002429c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242a1:	50                   	push   eax
c00242a2:	6a 04                	push   0x4
c00242a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ab:	50                   	push   eax
c00242ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b2:	e8 31 ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242bc:	50                   	push   eax
c00242bd:	6a 05                	push   0x5
c00242bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c6:	50                   	push   eax
c00242c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cd:	e8 16 ed ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d2:	83 c4 20             	add    esp,0x20
c00242d5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242da:	0f 94 c0             	sete   al
c00242dd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242e2:	74 09                	je     c00242ed <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242e4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242eb:	eb 07                	jmp    c00242f4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242ed:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242f4:	0f b6 c0             	movzx  eax,al
c00242f7:	50                   	push   eax
c00242f8:	6a 07                	push   0x7
c00242fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024301:	50                   	push   eax
c0024302:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024308:	e8 db ec ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024311:	83 c4 10             	add    esp,0x10
c0024314:	85 f6                	test   esi,esi
c0024316:	0f 84 ba 00 00 00    	je     c00243d6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002431c:	50                   	push   eax
c002431d:	6a 01                	push   0x1
c002431f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024326:	50                   	push   eax
c0024327:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432d:	e8 62 f8 ff ff       	call   c0023b94 <IDE::polling(unsigned char, unsigned int)>
c0024332:	83 c4 10             	add    esp,0x10
c0024335:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002433b:	84 c0                	test   al,al
c002433d:	74 2c                	je     c002436b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002433f:	0f b6 f8             	movzx  edi,al
c0024342:	0f b6 d2             	movzx  edx,dl
c0024345:	57                   	push   edi
c0024346:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002434d:	50                   	push   eax
c002434e:	52                   	push   edx
c002434f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024355:	e8 a4 f6 ff ff       	call   c00239fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002435a:	c7 04 24 78 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd78
c0024361:	e8 f8 eb fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0024366:	e9 87 00 00 00       	jmp    c00243f2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002436b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024370:	74 33                	je     c00243a5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024372:	31 ed                	xor    ebp,ebp
c0024374:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024378:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002437c:	50                   	push   eax
c002437d:	50                   	push   eax
c002437e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024385:	50                   	push   eax
c0024386:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438c:	e8 45 ec ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c0024391:	89 c2                	mov    edx,eax
c0024393:	89 f8                	mov    eax,edi
c0024395:	66 ef                	out    dx,ax
c0024397:	45                   	inc    ebp
c0024398:	83 c4 10             	add    esp,0x10
c002439b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243a1:	75 d1                	jne    c0024374 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243a3:	eb 23                	jmp    c00243c8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243a5:	0f b6 d2             	movzx  edx,dl
c00243a8:	51                   	push   ecx
c00243a9:	51                   	push   ecx
c00243aa:	52                   	push   edx
c00243ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b1:	e8 20 ec ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c00243b6:	b9 00 01 00 00       	mov    ecx,0x100
c00243bb:	89 c2                	mov    edx,eax
c00243bd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243c1:	fc                   	cld    
c00243c2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243c5:	83 c4 10             	add    esp,0x10
c00243c8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243d0:	4e                   	dec    esi
c00243d1:	e9 3e ff ff ff       	jmp    c0024314 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243d6:	31 ff                	xor    edi,edi
c00243d8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243dd:	74 16                	je     c00243f5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243df:	50                   	push   eax
c00243e0:	50                   	push   eax
c00243e1:	31 c0                	xor    eax,eax
c00243e3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243e8:	0f 94 c0             	sete   al
c00243eb:	50                   	push   eax
c00243ec:	53                   	push   ebx
c00243ed:	e8 ec fb ff ff       	call   c0023fde <ATA::flush(bool)>
c00243f2:	83 c4 10             	add    esp,0x10
c00243f5:	83 c4 2c             	add    esp,0x2c
c00243f8:	89 f8                	mov    eax,edi
c00243fa:	5b                   	pop    ebx
c00243fb:	5e                   	pop    esi
c00243fc:	5f                   	pop    edi
c00243fd:	5d                   	pop    ebp
c00243fe:	c3                   	ret    
c00243ff:	90                   	nop

c0024400 <ATA::read(unsigned long long, int, void*)>:
c0024400:	57                   	push   edi
c0024401:	b8 04 00 00 00       	mov    eax,0x4
c0024406:	56                   	push   esi
c0024407:	53                   	push   ebx
c0024408:	83 ec 10             	sub    esp,0x10
c002440b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002440f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024413:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024416:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002441a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002441e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024424:	77 3b                	ja     c0024461 <ATA::read(unsigned long long, int, void*)+0x61>
c0024426:	b8 06 00 00 00       	mov    eax,0x6
c002442b:	85 d2                	test   edx,edx
c002442d:	74 32                	je     c0024461 <ATA::read(unsigned long long, int, void*)+0x61>
c002442f:	50                   	push   eax
c0024430:	50                   	push   eax
c0024431:	6a 00                	push   0x0
c0024433:	52                   	push   edx
c0024434:	53                   	push   ebx
c0024435:	57                   	push   edi
c0024436:	56                   	push   esi
c0024437:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002443b:	e8 38 fc ff ff       	call   c0024078 <ATA::access(unsigned long long, int, void*, bool)>
c0024440:	83 c4 20             	add    esp,0x20
c0024443:	85 c0                	test   eax,eax
c0024445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024449:	75 11                	jne    c002445c <ATA::read(unsigned long long, int, void*)+0x5c>
c002444b:	01 1d 48 27 03 c0    	add    DWORD PTR ds:0xc0032748,ebx
c0024451:	e8 a4 c5 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0024456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002445a:	eb 05                	jmp    c0024461 <ATA::read(unsigned long long, int, void*)+0x61>
c002445c:	b8 01 00 00 00       	mov    eax,0x1
c0024461:	83 c4 10             	add    esp,0x10
c0024464:	5b                   	pop    ebx
c0024465:	5e                   	pop    esi
c0024466:	5f                   	pop    edi
c0024467:	c3                   	ret    

c0024468 <ATA::write(unsigned long long, int, void*)>:
c0024468:	57                   	push   edi
c0024469:	b8 04 00 00 00       	mov    eax,0x4
c002446e:	56                   	push   esi
c002446f:	53                   	push   ebx
c0024470:	83 ec 10             	sub    esp,0x10
c0024473:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024477:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002447b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002447e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024482:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024486:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002448c:	77 3b                	ja     c00244c9 <ATA::write(unsigned long long, int, void*)+0x61>
c002448e:	b8 06 00 00 00       	mov    eax,0x6
c0024493:	85 d2                	test   edx,edx
c0024495:	74 32                	je     c00244c9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024497:	50                   	push   eax
c0024498:	50                   	push   eax
c0024499:	6a 01                	push   0x1
c002449b:	52                   	push   edx
c002449c:	53                   	push   ebx
c002449d:	57                   	push   edi
c002449e:	56                   	push   esi
c002449f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244a3:	e8 d0 fb ff ff       	call   c0024078 <ATA::access(unsigned long long, int, void*, bool)>
c00244a8:	83 c4 20             	add    esp,0x20
c00244ab:	85 c0                	test   eax,eax
c00244ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244b1:	75 11                	jne    c00244c4 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244b3:	01 1d 44 27 03 c0    	add    DWORD PTR ds:0xc0032744,ebx
c00244b9:	e8 3c c5 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c00244be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244c2:	eb 05                	jmp    c00244c9 <ATA::write(unsigned long long, int, void*)+0x61>
c00244c4:	b8 01 00 00 00       	mov    eax,0x1
c00244c9:	83 c4 10             	add    esp,0x10
c00244cc:	5b                   	pop    ebx
c00244cd:	5e                   	pop    esi
c00244ce:	5f                   	pop    edi
c00244cf:	c3                   	ret    

c00244d0 <ATA::detectCHS()>:
c00244d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244d4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244da:	c1 e0 06             	shl    eax,0x6
c00244dd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244e3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244ed:	c7 44 24 04 83 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd83
c00244f5:	e9 05 61 ff ff       	jmp    c001a5ff <Krnl::panic(char const*)>

c00244fa <ATA::open(int, int, void*)>:
c00244fa:	53                   	push   ebx
c00244fb:	83 ec 08             	sub    esp,0x8
c00244fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024502:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002450a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024510:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024516:	c1 e0 06             	shl    eax,0x6
c0024519:	01 d0                	add    eax,edx
c002451b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024522:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024528:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002452f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024539:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002453f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024546:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002454d:	75 0c                	jne    c002455b <ATA::open(int, int, void*)+0x61>
c002454f:	83 ec 0c             	sub    esp,0xc
c0024552:	53                   	push   ebx
c0024553:	e8 78 ff ff ff       	call   c00244d0 <ATA::detectCHS()>
c0024558:	83 c4 10             	add    esp,0x10
c002455b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024561:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024567:	c1 e0 06             	shl    eax,0x6
c002456a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024571:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002457b:	d1 e8                	shr    eax,1
c002457d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024583:	6a 04                	push   0x4
c0024585:	6a 0c                	push   0xc
c0024587:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458e:	50                   	push   eax
c002458f:	52                   	push   edx
c0024590:	e8 53 ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024595:	90                   	nop
c0024596:	90                   	nop
c0024597:	6a 00                	push   0x0
c0024599:	6a 0c                	push   0xc
c002459b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a2:	50                   	push   eax
c00245a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245a9:	e8 3a ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ae:	83 c4 14             	add    esp,0x14
c00245b1:	53                   	push   ebx
c00245b2:	e8 59 02 ff ff       	call   c0014810 <PhysicalDisk::startCache()>
c00245b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245ba:	e8 c7 23 ff ff       	call   c0016986 <createPartitionsForDisk(PhysicalDisk*)>
c00245bf:	31 c0                	xor    eax,eax
c00245c1:	83 c4 18             	add    esp,0x18
c00245c4:	5b                   	pop    ebx
c00245c5:	c3                   	ret    

c00245c6 <ATAPI::write(unsigned long long, int, void*)>:
c00245c6:	b8 03 00 00 00       	mov    eax,0x3
c00245cb:	c3                   	ret    

c00245cc <ATAPI::close(int, int, void*)>:
c00245cc:	83 ec 0c             	sub    esp,0xc
c00245cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245d9:	85 c0                	test   eax,eax
c00245db:	74 0c                	je     c00245e9 <ATAPI::close(int, int, void*)+0x1d>
c00245dd:	83 ec 0c             	sub    esp,0xc
c00245e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00245e2:	50                   	push   eax
c00245e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245e6:	83 c4 10             	add    esp,0x10
c00245e9:	31 c0                	xor    eax,eax
c00245eb:	83 c4 0c             	add    esp,0xc
c00245ee:	c3                   	ret    
c00245ef:	90                   	nop

c00245f0 <ATAPI::ATAPI()>:
c00245f0:	83 ec 0c             	sub    esp,0xc
c00245f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f7:	83 ec 04             	sub    esp,0x4
c00245fa:	68 00 08 00 00       	push   0x800
c00245ff:	68 bd ce 02 c0       	push   0xc002cebd
c0024604:	50                   	push   eax
c0024605:	e8 9e 01 ff ff       	call   c00147a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002460a:	83 c4 10             	add    esp,0x10
c002460d:	ba d8 cd 02 c0       	mov    edx,0xc002cdd8
c0024612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024616:	89 10                	mov    DWORD PTR [eax],edx
c0024618:	90                   	nop
c0024619:	83 c4 0c             	add    esp,0xc
c002461c:	c3                   	ret    
c002461d:	90                   	nop

c002461e <ATAPI::readyForCommand()>:
c002461e:	56                   	push   esi
c002461f:	53                   	push   ebx
c0024620:	31 db                	xor    ebx,ebx
c0024622:	50                   	push   eax
c0024623:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024627:	50                   	push   eax
c0024628:	6a 0c                	push   0xc
c002462a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024631:	50                   	push   eax
c0024632:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024638:	e8 6b ea ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002463d:	83 c4 10             	add    esp,0x10
c0024640:	a8 88                	test   al,0x88
c0024642:	74 23                	je     c0024667 <ATAPI::readyForCommand()+0x49>
c0024644:	43                   	inc    ebx
c0024645:	83 fb 63             	cmp    ebx,0x63
c0024648:	7e dd                	jle    c0024627 <ATAPI::readyForCommand()+0x9>
c002464a:	51                   	push   ecx
c002464b:	51                   	push   ecx
c002464c:	6a 00                	push   0x0
c002464e:	68 40 42 0f 00       	push   0xf4240
c0024653:	e8 d2 9c ff ff       	call   c001e32a <nanoSleep(unsigned long long)>
c0024658:	83 c4 10             	add    esp,0x10
c002465b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024661:	75 c4                	jne    c0024627 <ATAPI::readyForCommand()+0x9>
c0024663:	31 c0                	xor    eax,eax
c0024665:	eb 02                	jmp    c0024669 <ATAPI::readyForCommand()+0x4b>
c0024667:	b0 01                	mov    al,0x1
c0024669:	5a                   	pop    edx
c002466a:	5b                   	pop    ebx
c002466b:	5e                   	pop    esi
c002466c:	c3                   	ret    
c002466d:	90                   	nop

c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002466e:	55                   	push   ebp
c002466f:	57                   	push   edi
c0024670:	56                   	push   esi
c0024671:	53                   	push   ebx
c0024672:	83 ec 20             	sub    esp,0x20
c0024675:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024679:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002467d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024681:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024685:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024689:	6a 01                	push   0x1
c002468b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024692:	50                   	push   eax
c0024693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024699:	e8 56 eb ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c002469e:	5e                   	pop    esi
c002469f:	58                   	pop    eax
c00246a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a7:	50                   	push   eax
c00246a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ae:	e8 0f e9 ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c00246b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246b6:	e8 63 ff ff ff       	call   c002461e <ATAPI::readyForCommand()>
c00246bb:	83 c4 10             	add    esp,0x10
c00246be:	84 c0                	test   al,al
c00246c0:	75 0a                	jne    c00246cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246c2:	bb 01 00 00 00       	mov    ebx,0x1
c00246c7:	e9 57 02 00 00       	jmp    c0024923 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246cc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246d2:	c1 e0 04             	shl    eax,0x4
c00246d5:	0f b6 c0             	movzx  eax,al
c00246d8:	50                   	push   eax
c00246d9:	6a 06                	push   0x6
c00246db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e2:	50                   	push   eax
c00246e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e9:	e8 fa e8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ee:	6a 00                	push   0x0
c00246f0:	6a 01                	push   0x1
c00246f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f9:	50                   	push   eax
c00246fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024700:	e8 e3 e8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024705:	83 c4 20             	add    esp,0x20
c0024708:	0f b6 c3             	movzx  eax,bl
c002470b:	0f b6 df             	movzx  ebx,bh
c002470e:	50                   	push   eax
c002470f:	6a 04                	push   0x4
c0024711:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024718:	50                   	push   eax
c0024719:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471f:	e8 c4 e8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024724:	53                   	push   ebx
c0024725:	6a 05                	push   0x5
c0024727:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472e:	50                   	push   eax
c002472f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024735:	e8 ae e8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002473a:	83 c4 20             	add    esp,0x20
c002473d:	68 a0 00 00 00       	push   0xa0
c0024742:	6a 07                	push   0x7
c0024744:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474b:	50                   	push   eax
c002474c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024752:	e8 91 e8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024757:	83 c4 0c             	add    esp,0xc
c002475a:	6a 01                	push   0x1
c002475c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024763:	50                   	push   eax
c0024764:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476a:	e8 25 f4 ff ff       	call   c0023b94 <IDE::polling(unsigned char, unsigned int)>
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024778:	84 c0                	test   al,al
c002477a:	74 23                	je     c002479f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002477c:	0f b6 d8             	movzx  ebx,al
c002477f:	0f b6 d2             	movzx  edx,dl
c0024782:	53                   	push   ebx
c0024783:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002478a:	50                   	push   eax
c002478b:	52                   	push   edx
c002478c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024792:	e8 67 f2 ff ff       	call   c00239fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024797:	83 c4 10             	add    esp,0x10
c002479a:	e9 84 01 00 00       	jmp    c0024923 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002479f:	0f b6 d2             	movzx  edx,dl
c00247a2:	53                   	push   ebx
c00247a3:	53                   	push   ebx
c00247a4:	52                   	push   edx
c00247a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ab:	e8 26 e8 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c00247b0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247b4:	b9 06 00 00 00       	mov    ecx,0x6
c00247b9:	89 c2                	mov    edx,eax
c00247bb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247c2:	83 c4 10             	add    esp,0x10
c00247c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247d2:	85 db                	test   ebx,ebx
c00247d4:	0f 84 ec 00 00 00    	je     c00248c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247da:	51                   	push   ecx
c00247db:	51                   	push   ecx
c00247dc:	52                   	push   edx
c00247dd:	50                   	push   eax
c00247de:	e8 73 e9 ff ff       	call   c0023156 <IDE::waitInterrupt(unsigned char)>
c00247e3:	83 c4 10             	add    esp,0x10
c00247e6:	84 c0                	test   al,al
c00247e8:	0f 84 d4 fe ff ff    	je     c00246c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ee:	56                   	push   esi
c00247ef:	56                   	push   esi
c00247f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f7:	50                   	push   eax
c00247f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fe:	e8 bf e7 ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0024803:	83 c4 0c             	add    esp,0xc
c0024806:	6a 04                	push   0x4
c0024808:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480f:	50                   	push   eax
c0024810:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024816:	e8 8d e8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002481b:	83 c4 0c             	add    esp,0xc
c002481e:	89 c6                	mov    esi,eax
c0024820:	6a 05                	push   0x5
c0024822:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024829:	50                   	push   eax
c002482a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024830:	e8 73 e8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0024835:	89 f1                	mov    ecx,esi
c0024837:	0f b6 c0             	movzx  eax,al
c002483a:	0f b6 f1             	movzx  esi,cl
c002483d:	c1 e0 08             	shl    eax,0x8
c0024840:	09 c6                	or     esi,eax
c0024842:	d1 fe                	sar    esi,1
c0024844:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024848:	83 c4 10             	add    esp,0x10
c002484b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024850:	74 41                	je     c0024893 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024852:	31 c9                	xor    ecx,ecx
c0024854:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002485a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024861:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024865:	75 0a                	jne    c0024871 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024867:	01 c9                	add    ecx,ecx
c0024869:	01 cd                	add    ebp,ecx
c002486b:	4b                   	dec    ebx
c002486c:	e9 54 ff ff ff       	jmp    c00247c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024871:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024876:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002487a:	51                   	push   ecx
c002487b:	51                   	push   ecx
c002487c:	52                   	push   edx
c002487d:	50                   	push   eax
c002487e:	e8 53 e7 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c0024883:	89 c2                	mov    edx,eax
c0024885:	89 f0                	mov    eax,esi
c0024887:	66 ef                	out    dx,ax
c0024889:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002488d:	83 c4 10             	add    esp,0x10
c0024890:	41                   	inc    ecx
c0024891:	eb c1                	jmp    c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024893:	31 f6                	xor    esi,esi
c0024895:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002489b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248a2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248a6:	75 06                	jne    c00248ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248a8:	01 f6                	add    esi,esi
c00248aa:	01 f5                	add    ebp,esi
c00248ac:	eb bd                	jmp    c002486b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248ae:	51                   	push   ecx
c00248af:	51                   	push   ecx
c00248b0:	52                   	push   edx
c00248b1:	50                   	push   eax
c00248b2:	e8 1f e7 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c00248b7:	89 c2                	mov    edx,eax
c00248b9:	66 ed                	in     ax,dx
c00248bb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248c0:	83 c4 10             	add    esp,0x10
c00248c3:	46                   	inc    esi
c00248c4:	eb cf                	jmp    c0024895 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248c6:	51                   	push   ecx
c00248c7:	51                   	push   ecx
c00248c8:	52                   	push   edx
c00248c9:	50                   	push   eax
c00248ca:	e8 87 e8 ff ff       	call   c0023156 <IDE::waitInterrupt(unsigned char)>
c00248cf:	83 c4 10             	add    esp,0x10
c00248d2:	84 c0                	test   al,al
c00248d4:	0f 84 e8 fd ff ff    	je     c00246c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248da:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248df:	52                   	push   edx
c00248e0:	52                   	push   edx
c00248e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e8:	50                   	push   eax
c00248e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ef:	e8 ce e6 ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c00248f4:	83 c4 10             	add    esp,0x10
c00248f7:	50                   	push   eax
c00248f8:	50                   	push   eax
c00248f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024900:	50                   	push   eax
c0024901:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024907:	e8 ca e6 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c002490c:	8d 50 07             	lea    edx,[eax+0x7]
c002490f:	ec                   	in     al,dx
c0024910:	83 c4 10             	add    esp,0x10
c0024913:	a8 88                	test   al,0x88
c0024915:	74 0a                	je     c0024921 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024917:	4b                   	dec    ebx
c0024918:	75 dd                	jne    c00248f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002491a:	bb 02 00 00 00       	mov    ebx,0x2
c002491f:	eb 02                	jmp    c0024923 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024921:	31 db                	xor    ebx,ebx
c0024923:	83 c4 1c             	add    esp,0x1c
c0024926:	89 d8                	mov    eax,ebx
c0024928:	5b                   	pop    ebx
c0024929:	5e                   	pop    esi
c002492a:	5f                   	pop    edi
c002492b:	5d                   	pop    ebp
c002492c:	c3                   	ret    
c002492d:	90                   	nop

c002492e <ATAPI::diskRemoved()>:
c002492e:	83 ec 18             	sub    esp,0x18
c0024931:	68 c9 ce 02 c0       	push   0xc002cec9
c0024936:	e8 23 e6 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c002493b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002493f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024946:	83 c4 1c             	add    esp,0x1c
c0024949:	c3                   	ret    

c002494a <ATAPI::eject()>:
c002494a:	57                   	push   edi
c002494b:	b9 03 00 00 00       	mov    ecx,0x3
c0024950:	53                   	push   ebx
c0024951:	83 ec 14             	sub    esp,0x14
c0024954:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024958:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002495c:	fc                   	cld    
c002495d:	31 c0                	xor    eax,eax
c002495f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024961:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024966:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002496b:	50                   	push   eax
c002496c:	50                   	push   eax
c002496d:	6a 00                	push   0x0
c002496f:	6a 00                	push   0x0
c0024971:	6a 00                	push   0x0
c0024973:	6a 02                	push   0x2
c0024975:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024979:	50                   	push   eax
c002497a:	53                   	push   ebx
c002497b:	e8 ee fc ff ff       	call   c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024980:	83 c4 14             	add    esp,0x14
c0024983:	53                   	push   ebx
c0024984:	e8 a5 ff ff ff       	call   c002492e <ATAPI::diskRemoved()>
c0024989:	83 c4 24             	add    esp,0x24
c002498c:	31 c0                	xor    eax,eax
c002498e:	5b                   	pop    ebx
c002498f:	5f                   	pop    edi
c0024990:	c3                   	ret    
c0024991:	90                   	nop

c0024992 <ATAPI::diskInserted()>:
c0024992:	53                   	push   ebx
c0024993:	83 ec 14             	sub    esp,0x14
c0024996:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002499a:	68 e0 ce 02 c0       	push   0xc002cee0
c002499f:	e8 ba e5 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c00249a4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ae:	e8 5d fe fe ff       	call   c0014810 <PhysicalDisk::startCache()>
c00249b3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249b7:	83 c4 18             	add    esp,0x18
c00249ba:	5b                   	pop    ebx
c00249bb:	e9 c6 1f ff ff       	jmp    c0016986 <createPartitionsForDisk(PhysicalDisk*)>

c00249c0 <ATAPI::detectMedia()>:
c00249c0:	56                   	push   esi
c00249c1:	53                   	push   ebx
c00249c2:	83 ec 28             	sub    esp,0x28
c00249c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c9:	6a 0c                	push   0xc
c00249cb:	6a 00                	push   0x0
c00249cd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249d1:	56                   	push   esi
c00249d2:	e8 a1 bd fd ff       	call   c0000778 <memset>
c00249d7:	58                   	pop    eax
c00249d8:	5a                   	pop    edx
c00249d9:	6a 00                	push   0x0
c00249db:	6a 00                	push   0x0
c00249dd:	6a 00                	push   0x0
c00249df:	6a 00                	push   0x0
c00249e1:	56                   	push   esi
c00249e2:	53                   	push   ebx
c00249e3:	e8 86 fc ff ff       	call   c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249e8:	83 c4 1c             	add    esp,0x1c
c00249eb:	6a 0c                	push   0xc
c00249ed:	6a 00                	push   0x0
c00249ef:	56                   	push   esi
c00249f0:	e8 83 bd fd ff       	call   c0000778 <memset>
c00249f5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249fa:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249ff:	59                   	pop    ecx
c0024a00:	58                   	pop    eax
c0024a01:	6a 01                	push   0x1
c0024a03:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a07:	50                   	push   eax
c0024a08:	6a 00                	push   0x0
c0024a0a:	6a 12                	push   0x12
c0024a0c:	56                   	push   esi
c0024a0d:	53                   	push   ebx
c0024a0e:	e8 5b fc ff ff       	call   c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a13:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a17:	83 c4 20             	add    esp,0x20
c0024a1a:	83 e0 7f             	and    eax,0x7f
c0024a1d:	3c 70                	cmp    al,0x70
c0024a1f:	74 15                	je     c0024a36 <ATAPI::detectMedia()+0x76>
c0024a21:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a28:	75 0c                	jne    c0024a36 <ATAPI::detectMedia()+0x76>
c0024a2a:	83 ec 0c             	sub    esp,0xc
c0024a2d:	53                   	push   ebx
c0024a2e:	e8 5f ff ff ff       	call   c0024992 <ATAPI::diskInserted()>
c0024a33:	83 c4 10             	add    esp,0x10
c0024a36:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a3a:	83 e0 0f             	and    eax,0xf
c0024a3d:	3c 02                	cmp    al,0x2
c0024a3f:	75 1b                	jne    c0024a5c <ATAPI::detectMedia()+0x9c>
c0024a41:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a46:	75 2d                	jne    c0024a75 <ATAPI::detectMedia()+0xb5>
c0024a48:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4f:	74 24                	je     c0024a75 <ATAPI::detectMedia()+0xb5>
c0024a51:	83 ec 0c             	sub    esp,0xc
c0024a54:	53                   	push   ebx
c0024a55:	e8 d4 fe ff ff       	call   c002492e <ATAPI::diskRemoved()>
c0024a5a:	eb 16                	jmp    c0024a72 <ATAPI::detectMedia()+0xb2>
c0024a5c:	84 c0                	test   al,al
c0024a5e:	75 15                	jne    c0024a75 <ATAPI::detectMedia()+0xb5>
c0024a60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a67:	75 0c                	jne    c0024a75 <ATAPI::detectMedia()+0xb5>
c0024a69:	83 ec 0c             	sub    esp,0xc
c0024a6c:	53                   	push   ebx
c0024a6d:	e8 20 ff ff ff       	call   c0024992 <ATAPI::diskInserted()>
c0024a72:	83 c4 10             	add    esp,0x10
c0024a75:	83 c4 24             	add    esp,0x24
c0024a78:	5b                   	pop    ebx
c0024a79:	5e                   	pop    esi
c0024a7a:	c3                   	ret    
c0024a7b:	90                   	nop

c0024a7c <ATAPI::open(int, int, void*)>:
c0024a7c:	53                   	push   ebx
c0024a7d:	83 ec 08             	sub    esp,0x8
c0024a80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a8c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a92:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a98:	c1 e0 06             	shl    eax,0x6
c0024a9b:	01 d0                	add    eax,edx
c0024a9d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aa4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024aaa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ab1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024abb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ac1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ac8:	6a 04                	push   0x4
c0024aca:	6a 0c                	push   0xc
c0024acc:	51                   	push   ecx
c0024acd:	52                   	push   edx
c0024ace:	e8 15 e5 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad3:	90                   	nop
c0024ad4:	90                   	nop
c0024ad5:	6a 00                	push   0x0
c0024ad7:	6a 0c                	push   0xc
c0024ad9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae0:	50                   	push   eax
c0024ae1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae7:	e8 fc e4 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024af3:	83 c4 14             	add    esp,0x14
c0024af6:	53                   	push   ebx
c0024af7:	e8 c4 fe ff ff       	call   c00249c0 <ATAPI::detectMedia()>
c0024afc:	31 c0                	xor    eax,eax
c0024afe:	83 c4 18             	add    esp,0x18
c0024b01:	5b                   	pop    ebx
c0024b02:	c3                   	ret    
c0024b03:	90                   	nop

c0024b04 <ATAPI::read(unsigned long long, int, void*)>:
c0024b04:	55                   	push   ebp
c0024b05:	57                   	push   edi
c0024b06:	56                   	push   esi
c0024b07:	53                   	push   ebx
c0024b08:	83 ec 1c             	sub    esp,0x1c
c0024b0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b17:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b1e:	74 41                	je     c0024b61 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b24:	b9 03 00 00 00       	mov    ecx,0x3
c0024b29:	fc                   	cld    
c0024b2a:	31 c0                	xor    eax,eax
c0024b2c:	86 fb                	xchg   bl,bh
c0024b2e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b30:	c1 c3 10             	rol    ebx,0x10
c0024b33:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b38:	89 e8                	mov    eax,ebp
c0024b3a:	86 fb                	xchg   bl,bh
c0024b3c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b40:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b44:	50                   	push   eax
c0024b45:	50                   	push   eax
c0024b46:	55                   	push   ebp
c0024b47:	c1 e5 0b             	shl    ebp,0xb
c0024b4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b4e:	6a 00                	push   0x0
c0024b50:	55                   	push   ebp
c0024b51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b55:	50                   	push   eax
c0024b56:	56                   	push   esi
c0024b57:	e8 12 fb ff ff       	call   c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b5c:	83 c4 20             	add    esp,0x20
c0024b5f:	eb 1a                	jmp    c0024b7b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b61:	83 ec 0c             	sub    esp,0xc
c0024b64:	56                   	push   esi
c0024b65:	e8 56 fe ff ff       	call   c00249c0 <ATAPI::detectMedia()>
c0024b6a:	83 c4 10             	add    esp,0x10
c0024b6d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b74:	75 aa                	jne    c0024b20 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b76:	b8 02 00 00 00       	mov    eax,0x2
c0024b7b:	83 c4 1c             	add    esp,0x1c
c0024b7e:	5b                   	pop    ebx
c0024b7f:	5e                   	pop    esi
c0024b80:	5f                   	pop    edi
c0024b81:	5d                   	pop    ebp
c0024b82:	c3                   	ret    
c0024b83:	90                   	nop

c0024b84 <SATA::close(int, int, void*)>:
c0024b84:	83 ec 0c             	sub    esp,0xc
c0024b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b8b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b91:	85 c0                	test   eax,eax
c0024b93:	74 0c                	je     c0024ba1 <SATA::close(int, int, void*)+0x1d>
c0024b95:	83 ec 0c             	sub    esp,0xc
c0024b98:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b9a:	50                   	push   eax
c0024b9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b9e:	83 c4 10             	add    esp,0x10
c0024ba1:	31 c0                	xor    eax,eax
c0024ba3:	83 c4 0c             	add    esp,0xc
c0024ba6:	c3                   	ret    
c0024ba7:	90                   	nop

c0024ba8 <SATA::powerSaving(PowerSavingLevel)>:
c0024ba8:	c3                   	ret    
c0024ba9:	90                   	nop

c0024baa <SATA::open(int, int, void*)>:
c0024baa:	56                   	push   esi
c0024bab:	53                   	push   ebx
c0024bac:	50                   	push   eax
c0024bad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bb5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bbf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bc5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bd3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bdd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024be3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bea:	e8 f6 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024bef:	89 c6                	mov    esi,eax
c0024bf1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bf7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bfd:	e8 e3 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c02:	39 c6                	cmp    esi,eax
c0024c04:	74 10                	je     c0024c16 <SATA::open(int, int, void*)+0x6c>
c0024c06:	83 ec 0c             	sub    esp,0xc
c0024c09:	68 08 ce 02 c0       	push   0xc002ce08
c0024c0e:	e8 ec 59 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0024c13:	83 c4 10             	add    esp,0x10
c0024c16:	83 ec 0c             	sub    esp,0xc
c0024c19:	6a 02                	push   0x2
c0024c1b:	e8 85 cf fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0024c20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c26:	e8 15 d2 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0024c2b:	6a 03                	push   0x3
c0024c2d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c33:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c39:	50                   	push   eax
c0024c3a:	e8 3d d7 fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c3f:	83 c4 14             	add    esp,0x14
c0024c42:	53                   	push   ebx
c0024c43:	e8 c8 fb fe ff       	call   c0014810 <PhysicalDisk::startCache()>
c0024c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c4b:	e8 36 1d ff ff       	call   c0016986 <createPartitionsForDisk(PhysicalDisk*)>
c0024c50:	83 c4 14             	add    esp,0x14
c0024c53:	31 c0                	xor    eax,eax
c0024c55:	5b                   	pop    ebx
c0024c56:	5e                   	pop    esi
c0024c57:	c3                   	ret    

c0024c58 <SATA::SATA()>:
c0024c58:	83 ec 0c             	sub    esp,0xc
c0024c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5f:	83 ec 04             	sub    esp,0x4
c0024c62:	68 00 02 00 00       	push   0x200
c0024c67:	68 1c ce 02 c0       	push   0xc002ce1c
c0024c6c:	50                   	push   eax
c0024c6d:	e8 36 fb fe ff       	call   c00147a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c72:	83 c4 10             	add    esp,0x10
c0024c75:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0024c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7e:	89 10                	mov    DWORD PTR [eax],edx
c0024c80:	90                   	nop
c0024c81:	83 c4 0c             	add    esp,0xc
c0024c84:	c3                   	ret    
c0024c85:	90                   	nop

c0024c86 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c86:	55                   	push   ebp
c0024c87:	57                   	push   edi
c0024c88:	56                   	push   esi
c0024c89:	53                   	push   ebx
c0024c8a:	83 ec 2c             	sub    esp,0x2c
c0024c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c91:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c99:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ca1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ca6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024caa:	7e 10                	jle    c0024cbc <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cac:	83 ec 0c             	sub    esp,0xc
c0024caf:	68 2c ce 02 c0       	push   0xc002ce2c
c0024cb4:	e8 46 59 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0024cb9:	83 c4 10             	add    esp,0x10
c0024cbc:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cc2:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cd2:	89 f0                	mov    eax,esi
c0024cd4:	c1 e0 07             	shl    eax,0x7
c0024cd7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cdb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ce5:	53                   	push   ebx
c0024ce6:	8d 46 02             	lea    eax,[esi+0x2]
c0024ce9:	53                   	push   ebx
c0024cea:	c1 e0 07             	shl    eax,0x7
c0024ced:	bb 01 00 00 00       	mov    ebx,0x1
c0024cf2:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cf6:	50                   	push   eax
c0024cf7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cfd:	e8 aa ef ff ff       	call   c0023cac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d06:	83 c4 10             	add    esp,0x10
c0024d09:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d0e:	0f 84 ce 01 00 00    	je     c0024ee2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d18:	c1 e0 09             	shl    eax,0x9
c0024d1b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d24:	74 17                	je     c0024d3d <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d26:	51                   	push   ecx
c0024d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d2b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d2f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d35:	e8 0a ba fd ff       	call   c0000744 <memcpy>
c0024d3a:	83 c4 10             	add    esp,0x10
c0024d3d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d43:	8d 46 02             	lea    eax,[esi+0x2]
c0024d46:	c1 e0 07             	shl    eax,0x7
c0024d49:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d4f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d55:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d5f:	c1 e1 05             	shl    ecx,0x5
c0024d62:	01 c8                	add    eax,ecx
c0024d64:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d68:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d6a:	83 e1 01             	and    ecx,0x1
c0024d6d:	83 e3 bf             	and    ebx,0xffffffbf
c0024d70:	c1 e1 06             	shl    ecx,0x6
c0024d73:	09 d9                	or     ecx,ebx
c0024d75:	88 08                	mov    BYTE PTR [eax],cl
c0024d77:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d79:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d7f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d85:	89 08                	mov    DWORD PTR [eax],ecx
c0024d87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d8d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d93:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d99:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d9c:	52                   	push   edx
c0024d9d:	68 90 00 00 00       	push   0x90
c0024da2:	6a 00                	push   0x0
c0024da4:	53                   	push   ebx
c0024da5:	e8 ce b9 fd ff       	call   c0000778 <memset>
c0024daa:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024db0:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024db4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dba:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dc2:	83 c4 10             	add    esp,0x10
c0024dc5:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dc8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dce:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dd4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dd9:	09 c8                	or     eax,ecx
c0024ddb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024de1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024de4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024deb:	66 25 00 7f          	and    ax,0x7f00
c0024def:	66 0d 27 80          	or     ax,0x8027
c0024df3:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024df8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024dfb:	19 c0                	sbb    eax,eax
c0024dfd:	83 e0 f0             	and    eax,0xfffffff0
c0024e00:	83 c0 35             	add    eax,0x35
c0024e03:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e06:	89 f8                	mov    eax,edi
c0024e08:	c1 e8 10             	shr    eax,0x10
c0024e0b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e0e:	89 f8                	mov    eax,edi
c0024e10:	c1 e8 18             	shr    eax,0x18
c0024e13:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e16:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e1a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e21:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e28:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e2c:	89 f3                	mov    ebx,esi
c0024e2e:	31 c0                	xor    eax,eax
c0024e30:	c1 e3 07             	shl    ebx,0x7
c0024e33:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e37:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e3d:	80 e1 88             	and    cl,0x88
c0024e40:	74 0a                	je     c0024e4c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e42:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e47:	74 0a                	je     c0024e53 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e49:	40                   	inc    eax
c0024e4a:	eb eb                	jmp    c0024e37 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e4c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e51:	75 0a                	jne    c0024e5d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e53:	83 ec 0c             	sub    esp,0xc
c0024e56:	68 65 ce 02 c0       	push   0xc002ce65
c0024e5b:	eb 56                	jmp    c0024eb3 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e5d:	b8 01 00 00 00       	mov    eax,0x1
c0024e62:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e66:	c1 e6 07             	shl    esi,0x7
c0024e69:	d3 e0                	shl    eax,cl
c0024e6b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e6f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e75:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e7b:	85 c8                	test   eax,ecx
c0024e7d:	74 20                	je     c0024e9f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e7f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e85:	0f ba e1 1e          	bt     ecx,0x1e
c0024e89:	73 ea                	jae    c0024e75 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e8b:	83 ec 0c             	sub    esp,0xc
c0024e8e:	31 db                	xor    ebx,ebx
c0024e90:	68 73 ce 02 c0       	push   0xc002ce73
c0024e95:	e8 65 57 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0024e9a:	83 c4 10             	add    esp,0x10
c0024e9d:	eb 43                	jmp    c0024ee2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e9f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ea5:	0f ba e0 1e          	bt     eax,0x1e
c0024ea9:	73 17                	jae    c0024ec2 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024eab:	83 ec 0c             	sub    esp,0xc
c0024eae:	68 73 ce 02 c0       	push   0xc002ce73
c0024eb3:	e8 47 57 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0024eb8:	bb 01 00 00 00       	mov    ebx,0x1
c0024ebd:	83 c4 10             	add    esp,0x10
c0024ec0:	eb 20                	jmp    c0024ee2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec2:	31 db                	xor    ebx,ebx
c0024ec4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ec9:	75 17                	jne    c0024ee2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ecb:	50                   	push   eax
c0024ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ed0:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ed6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024eda:	e8 65 b8 fd ff       	call   c0000744 <memcpy>
c0024edf:	83 c4 10             	add    esp,0x10
c0024ee2:	83 c4 2c             	add    esp,0x2c
c0024ee5:	89 d8                	mov    eax,ebx
c0024ee7:	5b                   	pop    ebx
c0024ee8:	5e                   	pop    esi
c0024ee9:	5f                   	pop    edi
c0024eea:	5d                   	pop    ebp
c0024eeb:	c3                   	ret    

c0024eec <SATA::read(unsigned long long, int, void*)>:
c0024eec:	57                   	push   edi
c0024eed:	b8 04 00 00 00       	mov    eax,0x4
c0024ef2:	56                   	push   esi
c0024ef3:	53                   	push   ebx
c0024ef4:	83 ec 10             	sub    esp,0x10
c0024ef7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024efb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024eff:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f02:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f0a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f10:	77 3b                	ja     c0024f4d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f12:	b8 06 00 00 00       	mov    eax,0x6
c0024f17:	85 d2                	test   edx,edx
c0024f19:	74 32                	je     c0024f4d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f1b:	50                   	push   eax
c0024f1c:	50                   	push   eax
c0024f1d:	6a 00                	push   0x0
c0024f1f:	52                   	push   edx
c0024f20:	53                   	push   ebx
c0024f21:	57                   	push   edi
c0024f22:	56                   	push   esi
c0024f23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f27:	e8 5a fd ff ff       	call   c0024c86 <SATA::access(unsigned long long, int, void*, bool)>
c0024f2c:	83 c4 20             	add    esp,0x20
c0024f2f:	85 c0                	test   eax,eax
c0024f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f35:	75 11                	jne    c0024f48 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f37:	01 1d 48 27 03 c0    	add    DWORD PTR ds:0xc0032748,ebx
c0024f3d:	e8 b8 ba fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0024f42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f46:	eb 05                	jmp    c0024f4d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f48:	b8 01 00 00 00       	mov    eax,0x1
c0024f4d:	83 c4 10             	add    esp,0x10
c0024f50:	5b                   	pop    ebx
c0024f51:	5e                   	pop    esi
c0024f52:	5f                   	pop    edi
c0024f53:	c3                   	ret    

c0024f54 <SATA::write(unsigned long long, int, void*)>:
c0024f54:	55                   	push   ebp
c0024f55:	b8 04 00 00 00       	mov    eax,0x4
c0024f5a:	57                   	push   edi
c0024f5b:	56                   	push   esi
c0024f5c:	53                   	push   ebx
c0024f5d:	83 ec 1c             	sub    esp,0x1c
c0024f60:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f64:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f68:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f6f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f79:	77 56                	ja     c0024fd1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f7b:	b8 06 00 00 00       	mov    eax,0x6
c0024f80:	85 ff                	test   edi,edi
c0024f82:	74 4d                	je     c0024fd1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f84:	89 ee                	mov    esi,ebp
c0024f86:	c1 e6 09             	shl    esi,0x9
c0024f89:	01 fe                	add    esi,edi
c0024f8b:	89 c8                	mov    eax,ecx
c0024f8d:	89 da                	mov    edx,ebx
c0024f8f:	83 c0 01             	add    eax,0x1
c0024f92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f96:	83 d2 00             	adc    edx,0x0
c0024f99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f9d:	50                   	push   eax
c0024f9e:	50                   	push   eax
c0024f9f:	6a 01                	push   0x1
c0024fa1:	57                   	push   edi
c0024fa2:	81 c7 00 02 00 00    	add    edi,0x200
c0024fa8:	6a 01                	push   0x1
c0024faa:	53                   	push   ebx
c0024fab:	51                   	push   ecx
c0024fac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fb0:	e8 d1 fc ff ff       	call   c0024c86 <SATA::access(unsigned long long, int, void*, bool)>
c0024fb5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fbd:	83 c4 20             	add    esp,0x20
c0024fc0:	39 f7                	cmp    edi,esi
c0024fc2:	75 c7                	jne    c0024f8b <SATA::write(unsigned long long, int, void*)+0x37>
c0024fc4:	01 2d 44 27 03 c0    	add    DWORD PTR ds:0xc0032744,ebp
c0024fca:	e8 2b ba fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0024fcf:	31 c0                	xor    eax,eax
c0024fd1:	83 c4 1c             	add    esp,0x1c
c0024fd4:	5b                   	pop    ebx
c0024fd5:	5e                   	pop    esi
c0024fd6:	5f                   	pop    edi
c0024fd7:	5d                   	pop    ebp
c0024fd8:	c3                   	ret    
c0024fd9:	90                   	nop

c0024fda <SATAPI::write(unsigned long long, int, void*)>:
c0024fda:	b8 03 00 00 00       	mov    eax,0x3
c0024fdf:	c3                   	ret    

c0024fe0 <SATAPI::close(int, int, void*)>:
c0024fe0:	83 ec 0c             	sub    esp,0xc
c0024fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fed:	85 c0                	test   eax,eax
c0024fef:	74 0c                	je     c0024ffd <SATAPI::close(int, int, void*)+0x1d>
c0024ff1:	83 ec 0c             	sub    esp,0xc
c0024ff4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ff6:	50                   	push   eax
c0024ff7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ffa:	83 c4 10             	add    esp,0x10
c0024ffd:	31 c0                	xor    eax,eax
c0024fff:	83 c4 0c             	add    esp,0xc
c0025002:	c3                   	ret    
c0025003:	90                   	nop

c0025004 <SATAPI::SATAPI()>:
c0025004:	83 ec 0c             	sub    esp,0xc
c0025007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002500b:	83 ec 04             	sub    esp,0x4
c002500e:	68 00 08 00 00       	push   0x800
c0025013:	68 bc ce 02 c0       	push   0xc002cebc
c0025018:	50                   	push   eax
c0025019:	e8 8a f7 fe ff       	call   c00147a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002501e:	83 c4 10             	add    esp,0x10
c0025021:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0025026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502a:	89 10                	mov    DWORD PTR [eax],edx
c002502c:	90                   	nop
c002502d:	83 c4 0c             	add    esp,0xc
c0025030:	c3                   	ret    
c0025031:	90                   	nop

c0025032 <SATAPI::diskRemoved()>:
c0025032:	83 ec 18             	sub    esp,0x18
c0025035:	68 c8 ce 02 c0       	push   0xc002cec8
c002503a:	e8 1f df fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c002503f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025043:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002504a:	83 c4 1c             	add    esp,0x1c
c002504d:	c3                   	ret    

c002504e <SATAPI::diskInserted()>:
c002504e:	53                   	push   ebx
c002504f:	83 ec 14             	sub    esp,0x14
c0025052:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025056:	68 df ce 02 c0       	push   0xc002cedf
c002505b:	e8 fe de fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0025060:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025067:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002506a:	e8 a1 f7 fe ff       	call   c0014810 <PhysicalDisk::startCache()>
c002506f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025073:	83 c4 18             	add    esp,0x18
c0025076:	5b                   	pop    ebx
c0025077:	e9 0a 19 ff ff       	jmp    c0016986 <createPartitionsForDisk(PhysicalDisk*)>

c002507c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002507c:	55                   	push   ebp
c002507d:	57                   	push   edi
c002507e:	56                   	push   esi
c002507f:	53                   	push   ebx
c0025080:	83 ec 24             	sub    esp,0x24
c0025083:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025087:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002508b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025095:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025099:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002509f:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250a8:	c1 e3 07             	shl    ebx,0x7
c00250ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250af:	89 f8                	mov    eax,edi
c00250b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250b5:	c1 e0 07             	shl    eax,0x7
c00250b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250c0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250ca:	53                   	push   ebx
c00250cb:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250d1:	e8 d6 eb ff ff       	call   c0023cac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250da:	83 c4 10             	add    esp,0x10
c00250dd:	b8 01 00 00 00       	mov    eax,0x1
c00250e2:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250e7:	0f 84 8a 01 00 00    	je     c0025277 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250ed:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250f5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250fb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025101:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025105:	c1 e1 05             	shl    ecx,0x5
c0025108:	01 c8                	add    eax,ecx
c002510a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002510c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025112:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025118:	89 08                	mov    DWORD PTR [eax],ecx
c002511a:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025120:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025126:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002512c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002512f:	52                   	push   edx
c0025130:	68 90 00 00 00       	push   0x90
c0025135:	6a 00                	push   0x0
c0025137:	53                   	push   ebx
c0025138:	e8 3b b6 fd ff       	call   c0000778 <memset>
c002513d:	83 c4 0c             	add    esp,0xc
c0025140:	8d 43 40             	lea    eax,[ebx+0x40]
c0025143:	6a 0c                	push   0xc
c0025145:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025149:	50                   	push   eax
c002514a:	e8 f5 b5 fd ff       	call   c0000744 <memcpy>
c002514f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025155:	89 ea                	mov    edx,ebp
c0025157:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002515d:	c1 ea 18             	shr    edx,0x18
c0025160:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025164:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025167:	8d 48 ff             	lea    ecx,[eax-0x1]
c002516a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002516e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025174:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002517a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002517f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025183:	09 c8                	or     eax,ecx
c0025185:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025189:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002518f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025192:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025199:	66 25 00 7f          	and    ax,0x7f00
c002519d:	66 0d 27 80          	or     ax,0x8027
c00251a1:	66 89 03             	mov    WORD PTR [ebx],ax
c00251a4:	89 e8                	mov    eax,ebp
c00251a6:	c1 e8 10             	shr    eax,0x10
c00251a9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251ac:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251b0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251c9:	31 c0                	xor    eax,eax
c00251cb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251d1:	80 e1 88             	and    cl,0x88
c00251d4:	74 0a                	je     c00251e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251d6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251db:	74 0a                	je     c00251e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251dd:	40                   	inc    eax
c00251de:	eb eb                	jmp    c00251cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251e0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251e5:	75 0f                	jne    c00251f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251e7:	83 ec 0c             	sub    esp,0xc
c00251ea:	68 65 ce 02 c0       	push   0xc002ce65
c00251ef:	e8 0b 54 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00251f4:	eb 3a                	jmp    c0025230 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251f6:	b8 01 00 00 00       	mov    eax,0x1
c00251fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251ff:	c1 e7 07             	shl    edi,0x7
c0025202:	d3 e0                	shl    eax,cl
c0025204:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025207:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002520d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025213:	85 d0                	test   eax,edx
c0025215:	74 23                	je     c002523a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025217:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002521d:	0f ba e2 1e          	bt     edx,0x1e
c0025221:	73 ea                	jae    c002520d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025223:	83 ec 0c             	sub    esp,0xc
c0025226:	68 f7 ce 02 c0       	push   0xc002cef7
c002522b:	e8 2e dd fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0025230:	83 c4 10             	add    esp,0x10
c0025233:	b8 01 00 00 00       	mov    eax,0x1
c0025238:	eb 3d                	jmp    c0025277 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002523a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025240:	0f ba e0 1e          	bt     eax,0x1e
c0025244:	73 0a                	jae    c0025250 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025246:	83 ec 0c             	sub    esp,0xc
c0025249:	68 0a cf 02 c0       	push   0xc002cf0a
c002524e:	eb db                	jmp    c002522b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025250:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025255:	74 1e                	je     c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025257:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002525c:	74 17                	je     c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002525e:	50                   	push   eax
c002525f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025263:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025269:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002526d:	e8 d2 b4 fd ff       	call   c0000744 <memcpy>
c0025272:	83 c4 10             	add    esp,0x10
c0025275:	31 c0                	xor    eax,eax
c0025277:	83 c4 1c             	add    esp,0x1c
c002527a:	5b                   	pop    ebx
c002527b:	5e                   	pop    esi
c002527c:	5f                   	pop    edi
c002527d:	5d                   	pop    ebp
c002527e:	c3                   	ret    
c002527f:	90                   	nop

c0025280 <SATAPI::eject()>:
c0025280:	57                   	push   edi
c0025281:	b9 03 00 00 00       	mov    ecx,0x3
c0025286:	53                   	push   ebx
c0025287:	83 ec 14             	sub    esp,0x14
c002528a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002528e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025292:	fc                   	cld    
c0025293:	31 c0                	xor    eax,eax
c0025295:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025297:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002529c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252a1:	50                   	push   eax
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	6a 00                	push   0x0
c00252a8:	6a 00                	push   0x0
c00252aa:	6a 02                	push   0x2
c00252ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252b0:	50                   	push   eax
c00252b1:	53                   	push   ebx
c00252b2:	e8 c5 fd ff ff       	call   c002507c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b7:	83 c4 14             	add    esp,0x14
c00252ba:	53                   	push   ebx
c00252bb:	e8 72 fd ff ff       	call   c0025032 <SATAPI::diskRemoved()>
c00252c0:	83 c4 24             	add    esp,0x24
c00252c3:	31 c0                	xor    eax,eax
c00252c5:	5b                   	pop    ebx
c00252c6:	5f                   	pop    edi
c00252c7:	c3                   	ret    

c00252c8 <SATAPI::detectMedia()>:
c00252c8:	56                   	push   esi
c00252c9:	53                   	push   ebx
c00252ca:	83 ec 28             	sub    esp,0x28
c00252cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252d1:	6a 0c                	push   0xc
c00252d3:	6a 00                	push   0x0
c00252d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252d9:	56                   	push   esi
c00252da:	e8 99 b4 fd ff       	call   c0000778 <memset>
c00252df:	83 c4 0c             	add    esp,0xc
c00252e2:	6a 00                	push   0x0
c00252e4:	6a 00                	push   0x0
c00252e6:	6a 00                	push   0x0
c00252e8:	6a 00                	push   0x0
c00252ea:	6a 00                	push   0x0
c00252ec:	56                   	push   esi
c00252ed:	53                   	push   ebx
c00252ee:	e8 89 fd ff ff       	call   c002507c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252f3:	83 c4 1c             	add    esp,0x1c
c00252f6:	6a 0c                	push   0xc
c00252f8:	6a 00                	push   0x0
c00252fa:	56                   	push   esi
c00252fb:	e8 78 b4 fd ff       	call   c0000778 <memset>
c0025300:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025305:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002530a:	83 c4 0c             	add    esp,0xc
c002530d:	6a 01                	push   0x1
c002530f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025313:	50                   	push   eax
c0025314:	6a 00                	push   0x0
c0025316:	6a 00                	push   0x0
c0025318:	6a 12                	push   0x12
c002531a:	56                   	push   esi
c002531b:	53                   	push   ebx
c002531c:	e8 5b fd ff ff       	call   c002507c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025321:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025325:	83 c4 20             	add    esp,0x20
c0025328:	83 e0 7f             	and    eax,0x7f
c002532b:	3c 70                	cmp    al,0x70
c002532d:	74 15                	je     c0025344 <SATAPI::detectMedia()+0x7c>
c002532f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025336:	75 0c                	jne    c0025344 <SATAPI::detectMedia()+0x7c>
c0025338:	83 ec 0c             	sub    esp,0xc
c002533b:	53                   	push   ebx
c002533c:	e8 0d fd ff ff       	call   c002504e <SATAPI::diskInserted()>
c0025341:	83 c4 10             	add    esp,0x10
c0025344:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025348:	83 e0 0f             	and    eax,0xf
c002534b:	3c 02                	cmp    al,0x2
c002534d:	75 1b                	jne    c002536a <SATAPI::detectMedia()+0xa2>
c002534f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025354:	75 2d                	jne    c0025383 <SATAPI::detectMedia()+0xbb>
c0025356:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002535d:	74 24                	je     c0025383 <SATAPI::detectMedia()+0xbb>
c002535f:	83 ec 0c             	sub    esp,0xc
c0025362:	53                   	push   ebx
c0025363:	e8 ca fc ff ff       	call   c0025032 <SATAPI::diskRemoved()>
c0025368:	eb 16                	jmp    c0025380 <SATAPI::detectMedia()+0xb8>
c002536a:	84 c0                	test   al,al
c002536c:	75 15                	jne    c0025383 <SATAPI::detectMedia()+0xbb>
c002536e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025375:	75 0c                	jne    c0025383 <SATAPI::detectMedia()+0xbb>
c0025377:	83 ec 0c             	sub    esp,0xc
c002537a:	53                   	push   ebx
c002537b:	e8 ce fc ff ff       	call   c002504e <SATAPI::diskInserted()>
c0025380:	83 c4 10             	add    esp,0x10
c0025383:	83 c4 24             	add    esp,0x24
c0025386:	5b                   	pop    ebx
c0025387:	5e                   	pop    esi
c0025388:	c3                   	ret    
c0025389:	90                   	nop

c002538a <SATAPI::open(int, int, void*)>:
c002538a:	56                   	push   esi
c002538b:	53                   	push   ebx
c002538c:	50                   	push   eax
c002538d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025391:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025395:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002539f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253c3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253ca:	e8 16 ab fe ff       	call   c000fee5 <Phys::allocatePage()>
c00253cf:	89 c6                	mov    esi,eax
c00253d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253d7:	81 c6 00 10 00 00    	add    esi,0x1000
c00253dd:	e8 03 ab fe ff       	call   c000fee5 <Phys::allocatePage()>
c00253e2:	39 c6                	cmp    esi,eax
c00253e4:	74 10                	je     c00253f6 <SATAPI::open(int, int, void*)+0x6c>
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	68 1f cf 02 c0       	push   0xc002cf1f
c00253ee:	e8 0c 52 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00253f3:	83 c4 10             	add    esp,0x10
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	6a 02                	push   0x2
c00253fb:	e8 a5 c7 fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0025400:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025406:	e8 35 ca fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c002540b:	6a 03                	push   0x3
c002540d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025413:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025419:	50                   	push   eax
c002541a:	e8 5d cf fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c002541f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025426:	83 c4 14             	add    esp,0x14
c0025429:	53                   	push   ebx
c002542a:	e8 99 fe ff ff       	call   c00252c8 <SATAPI::detectMedia()>
c002542f:	83 c4 14             	add    esp,0x14
c0025432:	31 c0                	xor    eax,eax
c0025434:	5b                   	pop    ebx
c0025435:	5e                   	pop    esi
c0025436:	c3                   	ret    
c0025437:	90                   	nop

c0025438 <SATAPI::read(unsigned long long, int, void*)>:
c0025438:	55                   	push   ebp
c0025439:	57                   	push   edi
c002543a:	56                   	push   esi
c002543b:	53                   	push   ebx
c002543c:	83 ec 1c             	sub    esp,0x1c
c002543f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025443:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025447:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002544b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025452:	74 19                	je     c002546d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025454:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025459:	7e 2e                	jle    c0025489 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002545b:	83 ec 0c             	sub    esp,0xc
c002545e:	68 35 cf 02 c0       	push   0xc002cf35
c0025463:	e8 97 51 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0025468:	83 c4 10             	add    esp,0x10
c002546b:	eb 1c                	jmp    c0025489 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002546d:	83 ec 0c             	sub    esp,0xc
c0025470:	55                   	push   ebp
c0025471:	e8 52 fe ff ff       	call   c00252c8 <SATAPI::detectMedia()>
c0025476:	83 c4 10             	add    esp,0x10
c0025479:	b8 02 00 00 00       	mov    eax,0x2
c002547e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025485:	75 cd                	jne    c0025454 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025487:	eb 49                	jmp    c00254d2 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025489:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002548d:	b9 03 00 00 00       	mov    ecx,0x3
c0025492:	fc                   	cld    
c0025493:	31 c0                	xor    eax,eax
c0025495:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025497:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002549c:	89 d8                	mov    eax,ebx
c002549e:	86 e0                	xchg   al,ah
c00254a0:	c1 c0 10             	rol    eax,0x10
c00254a3:	86 e0                	xchg   al,ah
c00254a5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254a9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254b1:	50                   	push   eax
c00254b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254ba:	56                   	push   esi
c00254bb:	53                   	push   ebx
c00254bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254c0:	c1 e0 0b             	shl    eax,0xb
c00254c3:	50                   	push   eax
c00254c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254c8:	50                   	push   eax
c00254c9:	55                   	push   ebp
c00254ca:	e8 ad fb ff ff       	call   c002507c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254cf:	83 c4 20             	add    esp,0x20
c00254d2:	83 c4 1c             	add    esp,0x1c
c00254d5:	5b                   	pop    ebx
c00254d6:	5e                   	pop    esi
c00254d7:	5f                   	pop    edi
c00254d8:	5d                   	pop    ebp
c00254d9:	c3                   	ret    

c00254da <AVX::open(int, int, void*)>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	e8 46 11 00 00       	call   c0026628 <avxInit>
c00254e2:	b8 00 00 00 00       	mov    eax,0x0
c00254e7:	83 c4 0c             	add    esp,0xc
c00254ea:	c3                   	ret    
c00254eb:	90                   	nop

c00254ec <AVX::close(int, int, void*)>:
c00254ec:	83 ec 0c             	sub    esp,0xc
c00254ef:	e8 35 11 00 00       	call   c0026629 <avxClose>
c00254f4:	b8 00 00 00 00       	mov    eax,0x0
c00254f9:	83 c4 0c             	add    esp,0xc
c00254fc:	c3                   	ret    
c00254fd:	90                   	nop

c00254fe <AVX::available()>:
c00254fe:	83 ec 0c             	sub    esp,0xc
c0025501:	e8 1a 11 00 00       	call   c0026620 <avxDetect>
c0025506:	85 c0                	test   eax,eax
c0025508:	0f 95 c0             	setne  al
c002550b:	83 c4 0c             	add    esp,0xc
c002550e:	c3                   	ret    
c002550f:	90                   	nop

c0025510 <AVX::save(void*)>:
c0025510:	83 ec 0c             	sub    esp,0xc
c0025513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025517:	83 ec 0c             	sub    esp,0xc
c002551a:	50                   	push   eax
c002551b:	e8 06 11 00 00       	call   c0026626 <avxSave>
c0025520:	83 c4 10             	add    esp,0x10
c0025523:	90                   	nop
c0025524:	83 c4 0c             	add    esp,0xc
c0025527:	c3                   	ret    

c0025528 <AVX::load(void*)>:
c0025528:	83 ec 0c             	sub    esp,0xc
c002552b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552f:	83 ec 0c             	sub    esp,0xc
c0025532:	50                   	push   eax
c0025533:	e8 ef 10 00 00       	call   c0026627 <avxLoad>
c0025538:	83 c4 10             	add    esp,0x10
c002553b:	90                   	nop
c002553c:	83 c4 0c             	add    esp,0xc
c002553f:	c3                   	ret    

c0025540 <AVX::AVX()>:
c0025540:	83 ec 0c             	sub    esp,0xc
c0025543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025547:	83 ec 08             	sub    esp,0x8
c002554a:	68 98 cf 02 c0       	push   0xc002cf98
c002554f:	50                   	push   eax
c0025550:	e8 31 f3 fe ff       	call   c0014886 <FPU::FPU(char const*)>
c0025555:	83 c4 10             	add    esp,0x10
c0025558:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c002555d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025561:	89 10                	mov    DWORD PTR [eax],edx
c0025563:	90                   	nop
c0025564:	83 c4 0c             	add    esp,0xc
c0025567:	c3                   	ret    

c0025568 <MMX::available()>:
c0025568:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c002556d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025573:	83 e0 20             	and    eax,0x20
c0025576:	84 c0                	test   al,al
c0025578:	0f 95 c0             	setne  al
c002557b:	c3                   	ret    

c002557c <MMX::open(int, int, void*)>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	e8 28 11 00 00       	call   c00266ac <x87Init>
c0025584:	b8 00 00 00 00       	mov    eax,0x0
c0025589:	83 c4 0c             	add    esp,0xc
c002558c:	c3                   	ret    
c002558d:	90                   	nop

c002558e <MMX::close(int, int, void*)>:
c002558e:	83 ec 0c             	sub    esp,0xc
c0025591:	e8 30 11 00 00       	call   c00266c6 <x87Close>
c0025596:	b8 00 00 00 00       	mov    eax,0x0
c002559b:	83 c4 0c             	add    esp,0xc
c002559e:	c3                   	ret    
c002559f:	90                   	nop

c00255a0 <MMX::save(void*)>:
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a7:	83 ec 0c             	sub    esp,0xc
c00255aa:	50                   	push   eax
c00255ab:	e8 f1 10 00 00       	call   c00266a1 <x87Save>
c00255b0:	83 c4 10             	add    esp,0x10
c00255b3:	90                   	nop
c00255b4:	83 c4 0c             	add    esp,0xc
c00255b7:	c3                   	ret    

c00255b8 <MMX::load(void*)>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255bf:	83 ec 0c             	sub    esp,0xc
c00255c2:	50                   	push   eax
c00255c3:	e8 df 10 00 00       	call   c00266a7 <x87Load>
c00255c8:	83 c4 10             	add    esp,0x10
c00255cb:	90                   	nop
c00255cc:	83 c4 0c             	add    esp,0xc
c00255cf:	c3                   	ret    

c00255d0 <MMX::MMX()>:
c00255d0:	83 ec 0c             	sub    esp,0xc
c00255d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d7:	83 ec 08             	sub    esp,0x8
c00255da:	68 d8 cf 02 c0       	push   0xc002cfd8
c00255df:	50                   	push   eax
c00255e0:	e8 a1 f2 fe ff       	call   c0014886 <FPU::FPU(char const*)>
c00255e5:	83 c4 10             	add    esp,0x10
c00255e8:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c00255ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f1:	89 10                	mov    DWORD PTR [eax],edx
c00255f3:	90                   	nop
c00255f4:	83 c4 0c             	add    esp,0xc
c00255f7:	c3                   	ret    

c00255f8 <SSE::open(int, int, void*)>:
c00255f8:	83 ec 0c             	sub    esp,0xc
c00255fb:	e8 64 10 00 00       	call   c0026664 <sseInit>
c0025600:	b8 00 00 00 00       	mov    eax,0x0
c0025605:	83 c4 0c             	add    esp,0xc
c0025608:	c3                   	ret    
c0025609:	90                   	nop

c002560a <SSE::close(int, int, void*)>:
c002560a:	83 ec 0c             	sub    esp,0xc
c002560d:	e8 62 10 00 00       	call   c0026674 <sseClose>
c0025612:	b8 00 00 00 00       	mov    eax,0x0
c0025617:	83 c4 0c             	add    esp,0xc
c002561a:	c3                   	ret    
c002561b:	90                   	nop

c002561c <SSE::available()>:
c002561c:	83 ec 1c             	sub    esp,0x1c
c002561f:	e8 1c 10 00 00       	call   c0026640 <absolutelyNoChanceInHell>
c0025624:	85 c0                	test   eax,eax
c0025626:	0f 95 c0             	setne  al
c0025629:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002562d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025631:	83 c4 1c             	add    esp,0x1c
c0025634:	c3                   	ret    
c0025635:	90                   	nop

c0025636 <SSE::save(void*)>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	50                   	push   eax
c0025641:	e8 12 10 00 00       	call   c0026658 <sseSave>
c0025646:	83 c4 10             	add    esp,0x10
c0025649:	90                   	nop
c002564a:	83 c4 0c             	add    esp,0xc
c002564d:	c3                   	ret    

c002564e <SSE::load(void*)>:
c002564e:	83 ec 0c             	sub    esp,0xc
c0025651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025655:	83 ec 0c             	sub    esp,0xc
c0025658:	50                   	push   eax
c0025659:	e8 00 10 00 00       	call   c002665e <sseLoad>
c002565e:	83 c4 10             	add    esp,0x10
c0025661:	90                   	nop
c0025662:	83 c4 0c             	add    esp,0xc
c0025665:	c3                   	ret    

c0025666 <SSE::SSE()>:
c0025666:	83 ec 0c             	sub    esp,0xc
c0025669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566d:	83 ec 08             	sub    esp,0x8
c0025670:	68 18 d0 02 c0       	push   0xc002d018
c0025675:	50                   	push   eax
c0025676:	e8 0b f2 fe ff       	call   c0014886 <FPU::FPU(char const*)>
c002567b:	83 c4 10             	add    esp,0x10
c002567e:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c0025683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025687:	89 10                	mov    DWORD PTR [eax],edx
c0025689:	90                   	nop
c002568a:	83 c4 0c             	add    esp,0xc
c002568d:	c3                   	ret    

c002568e <x87::open(int, int, void*)>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	e8 16 10 00 00       	call   c00266ac <x87Init>
c0025696:	b8 00 00 00 00       	mov    eax,0x0
c002569b:	83 c4 0c             	add    esp,0xc
c002569e:	c3                   	ret    
c002569f:	90                   	nop

c00256a0 <x87::close(int, int, void*)>:
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	e8 1e 10 00 00       	call   c00266c6 <x87Close>
c00256a8:	b8 00 00 00 00       	mov    eax,0x0
c00256ad:	83 c4 0c             	add    esp,0xc
c00256b0:	c3                   	ret    
c00256b1:	90                   	nop

c00256b2 <x87::available()>:
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	e8 cc 0f 00 00       	call   c0026686 <x87Detect>
c00256ba:	85 c0                	test   eax,eax
c00256bc:	0f 95 c0             	setne  al
c00256bf:	83 c4 0c             	add    esp,0xc
c00256c2:	c3                   	ret    
c00256c3:	90                   	nop

c00256c4 <x87::save(void*)>:
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256cb:	83 ec 0c             	sub    esp,0xc
c00256ce:	50                   	push   eax
c00256cf:	e8 cd 0f 00 00       	call   c00266a1 <x87Save>
c00256d4:	83 c4 10             	add    esp,0x10
c00256d7:	90                   	nop
c00256d8:	83 c4 0c             	add    esp,0xc
c00256db:	c3                   	ret    

c00256dc <x87::load(void*)>:
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e3:	83 ec 0c             	sub    esp,0xc
c00256e6:	50                   	push   eax
c00256e7:	e8 bb 0f 00 00       	call   c00266a7 <x87Load>
c00256ec:	83 c4 10             	add    esp,0x10
c00256ef:	90                   	nop
c00256f0:	83 c4 0c             	add    esp,0xc
c00256f3:	c3                   	ret    

c00256f4 <x87::x87()>:
c00256f4:	83 ec 0c             	sub    esp,0xc
c00256f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256fb:	83 ec 08             	sub    esp,0x8
c00256fe:	68 58 d0 02 c0       	push   0xc002d058
c0025703:	50                   	push   eax
c0025704:	e8 7d f1 fe ff       	call   c0014886 <FPU::FPU(char const*)>
c0025709:	83 c4 10             	add    esp,0x10
c002570c:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0025711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025715:	89 10                	mov    DWORD PTR [eax],edx
c0025717:	90                   	nop
c0025718:	83 c4 0c             	add    esp,0xc
c002571b:	c3                   	ret    

c002571c <APIC::disable()>:
c002571c:	90                   	nop
c002571d:	c3                   	ret    

c002571e <APIC::close(int, int, void*)>:
c002571e:	55                   	push   ebp
c002571f:	89 e5                	mov    ebp,esp
c0025721:	83 ec 08             	sub    esp,0x8
c0025724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025727:	8b 00                	mov    eax,DWORD PTR [eax]
c0025729:	83 c0 3c             	add    eax,0x3c
c002572c:	8b 00                	mov    eax,DWORD PTR [eax]
c002572e:	83 ec 0c             	sub    esp,0xc
c0025731:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025734:	ff d0                	call   eax
c0025736:	83 c4 10             	add    esp,0x10
c0025739:	b8 00 00 00 00       	mov    eax,0x0
c002573e:	c9                   	leave  
c002573f:	c3                   	ret    

c0025740 <IOAPIC::close(int, int, void*)>:
c0025740:	b8 00 00 00 00       	mov    eax,0x0
c0025745:	c3                   	ret    

c0025746 <APIC::io_wait()>:
c0025746:	eb 00                	jmp    c0025748 <APIC::io_wait()+0x2>
c0025748:	eb 00                	jmp    c002574a <APIC::io_wait()+0x4>
c002574a:	90                   	nop
c002574b:	c3                   	ret    

c002574c <APIC::getBase()>:
c002574c:	55                   	push   ebp
c002574d:	89 e5                	mov    ebp,esp
c002574f:	83 ec 18             	sub    esp,0x18
c0025752:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0025757:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002575d:	83 e0 08             	and    eax,0x8
c0025760:	84 c0                	test   al,al
c0025762:	75 07                	jne    c002576b <APIC::getBase()+0x1f>
c0025764:	b8 00 00 00 00       	mov    eax,0x0
c0025769:	eb 21                	jmp    c002578c <APIC::getBase()+0x40>
c002576b:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0025770:	83 ec 08             	sub    esp,0x8
c0025773:	6a 1b                	push   0x1b
c0025775:	50                   	push   eax
c0025776:	e8 6d 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002577b:	83 c4 10             	add    esp,0x10
c002577e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025781:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025784:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025787:	25 00 f0 ff ff       	and    eax,0xfffff000
c002578c:	c9                   	leave  
c002578d:	c3                   	ret    

c002578e <APIC::eoi(unsigned char)>:
c002578e:	55                   	push   ebp
c002578f:	89 e5                	mov    ebp,esp
c0025791:	83 ec 28             	sub    esp,0x28
c0025794:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025797:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002579a:	83 ec 0c             	sub    esp,0xc
c002579d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a0:	e8 a7 ff ff ff       	call   c002574c <APIC::getBase()>
c00257a5:	83 c4 10             	add    esp,0x10
c00257a8:	05 b0 00 00 00       	add    eax,0xb0
c00257ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257b3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257b9:	90                   	nop
c00257ba:	c9                   	leave  
c00257bb:	c3                   	ret    

c00257bc <APIC::open(int, int, void*)>:
c00257bc:	55                   	push   ebp
c00257bd:	89 e5                	mov    ebp,esp
c00257bf:	57                   	push   edi
c00257c0:	56                   	push   esi
c00257c1:	53                   	push   ebx
c00257c2:	83 ec 2c             	sub    esp,0x2c
c00257c5:	83 ec 0c             	sub    esp,0xc
c00257c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257cb:	e8 7c ff ff ff       	call   c002574c <APIC::getBase()>
c00257d0:	83 c4 10             	add    esp,0x10
c00257d3:	89 c2                	mov    edx,eax
c00257d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257de:	0f b6 f8             	movzx  edi,al
c00257e1:	89 d0                	mov    eax,edx
c00257e3:	ba 00 00 00 00       	mov    edx,0x0
c00257e8:	89 c1                	mov    ecx,eax
c00257ea:	80 e5 ff             	and    ch,0xff
c00257ed:	89 cb                	mov    ebx,ecx
c00257ef:	0f b6 f2             	movzx  esi,dl
c00257f2:	89 d8                	mov    eax,ebx
c00257f4:	89 f2                	mov    edx,esi
c00257f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257f9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257fc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025800:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025804:	83 e0 00             	and    eax,0x0
c0025807:	09 d0                	or     eax,edx
c0025809:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025810:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025816:	8d 50 01             	lea    edx,[eax+0x1]
c0025819:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002581c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025822:	0f b6 d0             	movzx  edx,al
c0025825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025828:	83 c2 08             	add    edx,0x8
c002582b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002582f:	0f b6 c9             	movzx  ecx,cl
c0025832:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025838:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002583c:	83 ec 0c             	sub    esp,0xc
c002583f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025842:	e8 05 ff ff ff       	call   c002574c <APIC::getBase()>
c0025847:	83 c4 10             	add    esp,0x10
c002584a:	05 f0 00 00 00       	add    eax,0xf0
c002584f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025852:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025855:	8b 00                	mov    eax,DWORD PTR [eax]
c0025857:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002585a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025861:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025868:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002586b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002586e:	89 10                	mov    DWORD PTR [eax],edx
c0025870:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025877:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c002587c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002587f:	7d 7c                	jge    c00258fd <APIC::open(int, int, void*)+0x141>
c0025881:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025884:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c002588b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002588e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025891:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c0025898:	c1 e8 08             	shr    eax,0x8
c002589b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002589f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a2:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c00258a9:	c1 e8 18             	shr    eax,0x18
c00258ac:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258af:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258b3:	75 40                	jne    c00258f5 <APIC::open(int, int, void*)+0x139>
c00258b5:	83 ec 0c             	sub    esp,0xc
c00258b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258bb:	e8 8c fe ff ff       	call   c002574c <APIC::getBase()>
c00258c0:	83 c4 10             	add    esp,0x10
c00258c3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258c7:	75 07                	jne    c00258d0 <APIC::open(int, int, void*)+0x114>
c00258c9:	ba 60 03 00 00       	mov    edx,0x360
c00258ce:	eb 05                	jmp    c00258d5 <APIC::open(int, int, void*)+0x119>
c00258d0:	ba 50 03 00 00       	mov    edx,0x350
c00258d5:	01 d0                	add    eax,edx
c00258d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258da:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00258df:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258e2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258e9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258ed:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258f0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258f3:	89 10                	mov    DWORD PTR [eax],edx
c00258f5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258f8:	e9 7a ff ff ff       	jmp    c0025877 <APIC::open(int, int, void*)+0xbb>
c00258fd:	b8 00 00 00 00       	mov    eax,0x0
c0025902:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025905:	5b                   	pop    ebx
c0025906:	5e                   	pop    esi
c0025907:	5f                   	pop    edi
c0025908:	5d                   	pop    ebp
c0025909:	c3                   	ret    

c002590a <IOAPIC::IOAPIC()>:
c002590a:	83 ec 0c             	sub    esp,0xc
c002590d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025911:	83 ec 08             	sub    esp,0x8
c0025914:	68 98 d0 02 c0       	push   0xc002d098
c0025919:	50                   	push   eax
c002591a:	e8 55 ec fe ff       	call   c0014574 <Device::Device(char const*)>
c002591f:	83 c4 10             	add    esp,0x10
c0025922:	ba c0 d1 02 c0       	mov    edx,0xc002d1c0
c0025927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592b:	89 10                	mov    DWORD PTR [eax],edx
c002592d:	90                   	nop
c002592e:	83 c4 0c             	add    esp,0xc
c0025931:	c3                   	ret    

c0025932 <APIC::APIC()>:
c0025932:	53                   	push   ebx
c0025933:	83 ec 18             	sub    esp,0x18
c0025936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002593a:	83 ec 08             	sub    esp,0x8
c002593d:	68 a0 d0 02 c0       	push   0xc002d0a0
c0025942:	50                   	push   eax
c0025943:	e8 98 f3 fe ff       	call   c0014ce0 <InterruptController::InterruptController(char const*)>
c0025948:	83 c4 10             	add    esp,0x10
c002594b:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c0025950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025954:	89 10                	mov    DWORD PTR [eax],edx
c0025956:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c002595b:	83 f0 01             	xor    eax,0x1
c002595e:	84 c0                	test   al,al
c0025960:	0f 84 a1 00 00 00    	je     c0025a07 <APIC::APIC()+0xd5>
c0025966:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002596b:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0025970:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025974:	0f 83 86 00 00 00    	jae    c0025a00 <APIC::APIC()+0xce>
c002597a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025982:	83 ec 0c             	sub    esp,0xc
c0025985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025989:	e8 b5 9e fe ff       	call   c000f843 <malloc>
c002598e:	83 c4 10             	add    esp,0x10
c0025991:	89 c3                	mov    ebx,eax
c0025993:	83 ec 0c             	sub    esp,0xc
c0025996:	53                   	push   ebx
c0025997:	e8 6e ff ff ff       	call   c002590a <IOAPIC::IOAPIC()>
c002599c:	83 c4 10             	add    esp,0x10
c002599f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259a3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259ac:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c00259b3:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c00259b8:	40                   	inc    eax
c00259b9:	a3 60 27 03 c0       	mov    ds:0xc0032760,eax
c00259be:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00259c3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259c9:	83 ec 08             	sub    esp,0x8
c00259cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259d0:	50                   	push   eax
c00259d1:	e8 ae e9 fe ff       	call   c0014384 <Device::addChild(Device*)>
c00259d6:	83 c4 10             	add    esp,0x10
c00259d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00259df:	83 c0 08             	add    eax,0x8
c00259e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259e9:	6a 00                	push   0x0
c00259eb:	6a 00                	push   0x0
c00259ed:	52                   	push   edx
c00259ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259f2:	ff d0                	call   eax
c00259f4:	83 c4 10             	add    esp,0x10
c00259f7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259fb:	e9 6b ff ff ff       	jmp    c002596b <APIC::APIC()+0x39>
c0025a00:	c6 05 a0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327a0,0x1
c0025a07:	90                   	nop
c0025a08:	83 c4 18             	add    esp,0x18
c0025a0b:	5b                   	pop    ebx
c0025a0c:	c3                   	ret    
c0025a0d:	90                   	nop

c0025a0e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a0e:	55                   	push   ebp
c0025a0f:	89 e5                	mov    ebp,esp
c0025a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a1a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a1d:	72 1d                	jb     c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a22:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a31:	01 d0                	add    eax,edx
c0025a33:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a36:	73 04                	jae    c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a38:	b0 01                	mov    al,0x1
c0025a3a:	eb 02                	jmp    c0025a3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a3c:	b0 00                	mov    al,0x0
c0025a3e:	5d                   	pop    ebp
c0025a3f:	c3                   	ret    

c0025a40 <IOAPIC::read(int)>:
c0025a40:	55                   	push   ebp
c0025a41:	89 e5                	mov    ebp,esp
c0025a43:	83 ec 10             	sub    esp,0x10
c0025a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a55:	0f b6 d0             	movzx  edx,al
c0025a58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a5b:	89 10                	mov    DWORD PTR [eax],edx
c0025a5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a60:	83 c0 10             	add    eax,0x10
c0025a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a65:	c9                   	leave  
c0025a66:	c3                   	ret    
c0025a67:	90                   	nop

c0025a68 <IOAPIC::open(int, int, void*)>:
c0025a68:	55                   	push   ebp
c0025a69:	89 e5                	mov    ebp,esp
c0025a6b:	57                   	push   edi
c0025a6c:	56                   	push   esi
c0025a6d:	53                   	push   ebx
c0025a6e:	83 ec 0c             	sub    esp,0xc
c0025a71:	83 ec 0c             	sub    esp,0xc
c0025a74:	68 cb d0 02 c0       	push   0xc002d0cb
c0025a79:	e8 e0 d4 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0025a7e:	83 c4 10             	add    esp,0x10
c0025a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a96:	8b 14 85 c0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf240]
c0025a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aaf:	8b 14 85 40 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c0025ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ad1:	0f b6 f8             	movzx  edi,al
c0025ad4:	89 d0                	mov    eax,edx
c0025ad6:	ba 00 00 00 00       	mov    edx,0x0
c0025adb:	89 c1                	mov    ecx,eax
c0025add:	80 e5 ff             	and    ch,0xff
c0025ae0:	89 cb                	mov    ebx,ecx
c0025ae2:	0f b6 f2             	movzx  esi,dl
c0025ae5:	89 d8                	mov    eax,ebx
c0025ae7:	89 f2                	mov    edx,esi
c0025ae9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aec:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025af3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025af7:	83 e0 00             	and    eax,0x0
c0025afa:	09 d0                	or     eax,edx
c0025afc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b09:	8d 50 01             	lea    edx,[eax+0x1]
c0025b0c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b15:	0f b6 d0             	movzx  edx,al
c0025b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b1b:	83 c2 08             	add    edx,0x8
c0025b1e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b22:	0f b6 c9             	movzx  ecx,cl
c0025b25:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b2b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b2f:	83 ec 08             	sub    esp,0x8
c0025b32:	6a 01                	push   0x1
c0025b34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b37:	e8 04 ff ff ff       	call   c0025a40 <IOAPIC::read(int)>
c0025b3c:	83 c4 10             	add    esp,0x10
c0025b3f:	c1 f8 10             	sar    eax,0x10
c0025b42:	0f b6 c0             	movzx  eax,al
c0025b45:	8d 50 01             	lea    edx,[eax+0x1]
c0025b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b51:	b8 00 00 00 00       	mov    eax,0x0
c0025b56:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b59:	5b                   	pop    ebx
c0025b5a:	5e                   	pop    esi
c0025b5b:	5f                   	pop    edi
c0025b5c:	5d                   	pop    ebp
c0025b5d:	c3                   	ret    

c0025b5e <IOAPIC::write(int, int)>:
c0025b5e:	55                   	push   ebp
c0025b5f:	89 e5                	mov    ebp,esp
c0025b61:	83 ec 10             	sub    esp,0x10
c0025b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b6d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b73:	0f b6 d0             	movzx  edx,al
c0025b76:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b79:	89 10                	mov    DWORD PTR [eax],edx
c0025b7b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b7e:	8d 50 10             	lea    edx,[eax+0x10]
c0025b81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b84:	89 02                	mov    DWORD PTR [edx],eax
c0025b86:	90                   	nop
c0025b87:	c9                   	leave  
c0025b88:	c3                   	ret    
c0025b89:	90                   	nop

c0025b8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b8a:	55                   	push   ebp
c0025b8b:	89 e5                	mov    ebp,esp
c0025b8d:	53                   	push   ebx
c0025b8e:	83 ec 2c             	sub    esp,0x2c
c0025b91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b94:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b97:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b9a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b9d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ba0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ba3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ba6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ba9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bac:	88 d8                	mov    al,bl
c0025bae:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bb1:	88 c8                	mov    al,cl
c0025bb3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bb6:	88 d0                	mov    al,dl
c0025bb8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bbb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bbf:	83 c0 08             	add    eax,0x8
c0025bc2:	01 c0                	add    eax,eax
c0025bc4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bcb:	83 c0 08             	add    eax,0x8
c0025bce:	01 c0                	add    eax,eax
c0025bd0:	40                   	inc    eax
c0025bd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bd4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bd7:	50                   	push   eax
c0025bd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bdb:	e8 60 fe ff ff       	call   c0025a40 <IOAPIC::read(int)>
c0025be0:	83 c4 08             	add    esp,0x8
c0025be3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025be6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bed:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bf0:	c1 e0 18             	shl    eax,0x18
c0025bf3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bf6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bf9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bfc:	52                   	push   edx
c0025bfd:	50                   	push   eax
c0025bfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c01:	e8 58 ff ff ff       	call   c0025b5e <IOAPIC::write(int, int)>
c0025c06:	83 c4 0c             	add    esp,0xc
c0025c09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c0c:	50                   	push   eax
c0025c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c10:	e8 2b fe ff ff       	call   c0025a40 <IOAPIC::read(int)>
c0025c15:	83 c4 08             	add    esp,0x8
c0025c18:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c1b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c22:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c29:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c30:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c34:	74 09                	je     c0025c3f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c36:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c3d:	eb 07                	jmp    c0025c46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c3f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c46:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c4a:	74 09                	je     c0025c55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c4c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c53:	eb 07                	jmp    c0025c5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c55:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c5c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c63:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c67:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c6a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c70:	52                   	push   edx
c0025c71:	50                   	push   eax
c0025c72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c75:	e8 e4 fe ff ff       	call   c0025b5e <IOAPIC::write(int, int)>
c0025c7a:	83 c4 0c             	add    esp,0xc
c0025c7d:	90                   	nop
c0025c7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c81:	c9                   	leave  
c0025c82:	c3                   	ret    
c0025c83:	90                   	nop

c0025c84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c84:	55                   	push   ebp
c0025c85:	89 e5                	mov    ebp,esp
c0025c87:	57                   	push   edi
c0025c88:	56                   	push   esi
c0025c89:	53                   	push   ebx
c0025c8a:	83 ec 2c             	sub    esp,0x2c
c0025c8d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c90:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c93:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c97:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c9b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c9f:	74 5a                	je     c0025cfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ca1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ca5:	7f 44                	jg     c0025ceb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ca7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025caa:	05 20 d6 02 c0       	add    eax,0xc002d620
c0025caf:	8a 00                	mov    al,BYTE PTR [eax]
c0025cb1:	0f b6 c0             	movzx  eax,al
c0025cb4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cba:	66 8b 84 00 60 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2a0]
c0025cc2:	0f b7 c0             	movzx  eax,ax
c0025cc5:	83 e0 02             	and    eax,0x2
c0025cc8:	85 c0                	test   eax,eax
c0025cca:	74 04                	je     c0025cd0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025ccc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd3:	66 8b 84 00 60 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2a0]
c0025cdb:	0f b7 c0             	movzx  eax,ax
c0025cde:	83 e0 08             	and    eax,0x8
c0025ce1:	85 c0                	test   eax,eax
c0025ce3:	74 16                	je     c0025cfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ce9:	eb 10                	jmp    c0025cfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ceb:	83 ec 0c             	sub    esp,0xc
c0025cee:	68 dc d0 02 c0       	push   0xc002d0dc
c0025cf3:	e8 07 49 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0025cf8:	83 c4 10             	add    esp,0x10
c0025cfb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cff:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0025d04:	83 ec 08             	sub    esp,0x8
c0025d07:	50                   	push   eax
c0025d08:	68 14 d1 02 c0       	push   0xc002d114
c0025d0d:	e8 4c d2 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0025d12:	83 c4 10             	add    esp,0x10
c0025d15:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d1c:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0025d21:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d24:	7d 67                	jge    c0025d8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d29:	8b 04 85 80 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd880]
c0025d30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d33:	83 ec 08             	sub    esp,0x8
c0025d36:	52                   	push   edx
c0025d37:	50                   	push   eax
c0025d38:	e8 d1 fc ff ff       	call   c0025a0e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d3d:	83 c4 10             	add    esp,0x10
c0025d40:	84 c0                	test   al,al
c0025d42:	74 44                	je     c0025d88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d44:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d47:	8b 1c 85 80 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd880]
c0025d4e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d52:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d55:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d5c:	83 c0 20             	add    eax,0x20
c0025d5f:	0f b6 f0             	movzx  esi,al
c0025d62:	b8 00 00 00 00       	mov    eax,0x0
c0025d67:	99                   	cdq    
c0025d68:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d6b:	0f b6 c9             	movzx  ecx,cl
c0025d6e:	83 ec 04             	sub    esp,0x4
c0025d71:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d74:	57                   	push   edi
c0025d75:	56                   	push   esi
c0025d76:	52                   	push   edx
c0025d77:	50                   	push   eax
c0025d78:	51                   	push   ecx
c0025d79:	53                   	push   ebx
c0025d7a:	e8 0b fe ff ff       	call   c0025b8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d7f:	83 c4 20             	add    esp,0x20
c0025d82:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d86:	eb 05                	jmp    c0025d8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d88:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d8b:	eb 8f                	jmp    c0025d1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d8d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d90:	83 f0 01             	xor    eax,0x1
c0025d93:	84 c0                	test   al,al
c0025d95:	74 10                	je     c0025da7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d97:	83 ec 0c             	sub    esp,0xc
c0025d9a:	68 2b d1 02 c0       	push   0xc002d12b
c0025d9f:	e8 5b 48 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0025da4:	83 c4 10             	add    esp,0x10
c0025da7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025dab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025db2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025db6:	7f 65                	jg     c0025e1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dbe:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc8:	01 ca                	add    edx,ecx
c0025dca:	83 c2 54             	add    edx,0x54
c0025dcd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dd1:	85 c0                	test   eax,eax
c0025dd3:	75 43                	jne    c0025e18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ddb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de5:	01 ca                	add    edx,ecx
c0025de7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025dea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ded:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dfe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e01:	01 ca                	add    edx,ecx
c0025e03:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e09:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e0c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e13:	83 e8 20             	sub    eax,0x20
c0025e16:	eb 1a                	jmp    c0025e32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e18:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e1b:	eb 95                	jmp    c0025db2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e1d:	83 ec 0c             	sub    esp,0xc
c0025e20:	68 38 d1 02 c0       	push   0xc002d138
c0025e25:	e8 d5 47 ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0025e2a:	83 c4 10             	add    esp,0x10
c0025e2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e32:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e35:	5b                   	pop    ebx
c0025e36:	5e                   	pop    esi
c0025e37:	5f                   	pop    edi
c0025e38:	5d                   	pop    ebp
c0025e39:	c3                   	ret    

c0025e3a <PIC::disable()>:
c0025e3a:	55                   	push   ebp
c0025e3b:	89 e5                	mov    ebp,esp
c0025e3d:	83 ec 10             	sub    esp,0x10
c0025e40:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e46:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e4d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e51:	ee                   	out    dx,al
c0025e52:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e58:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e5c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e5f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e63:	ee                   	out    dx,al
c0025e64:	90                   	nop
c0025e65:	c9                   	leave  
c0025e66:	c3                   	ret    
c0025e67:	90                   	nop

c0025e68 <PIC::close(int, int, void*)>:
c0025e68:	55                   	push   ebp
c0025e69:	89 e5                	mov    ebp,esp
c0025e6b:	83 ec 08             	sub    esp,0x8
c0025e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e73:	83 c0 3c             	add    eax,0x3c
c0025e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7e:	ff d0                	call   eax
c0025e80:	83 c4 10             	add    esp,0x10
c0025e83:	b8 00 00 00 00       	mov    eax,0x0
c0025e88:	c9                   	leave  
c0025e89:	c3                   	ret    

c0025e8a <PIC::PIC()>:
c0025e8a:	83 ec 0c             	sub    esp,0xc
c0025e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e91:	83 ec 08             	sub    esp,0x8
c0025e94:	68 e4 d1 02 c0       	push   0xc002d1e4
c0025e99:	50                   	push   eax
c0025e9a:	e8 41 ee fe ff       	call   c0014ce0 <InterruptController::InterruptController(char const*)>
c0025e9f:	83 c4 10             	add    esp,0x10
c0025ea2:	ba 10 d2 02 c0       	mov    edx,0xc002d210
c0025ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eab:	89 10                	mov    DWORD PTR [eax],edx
c0025ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb7:	0f b6 d0             	movzx  edx,al
c0025eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebe:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecf:	0f b6 d0             	movzx  edx,al
c0025ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee5:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ef2:	0f b6 d0             	movzx  edx,al
c0025ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025efd:	83 e1 3f             	and    ecx,0x3f
c0025f00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0e:	0f b6 d0             	movzx  edx,al
c0025f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f15:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f26:	0f b6 d0             	movzx  edx,al
c0025f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0025f3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f43:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f49:	0f b6 d0             	movzx  edx,al
c0025f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f50:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f54:	83 e1 3f             	and    ecx,0x3f
c0025f57:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f5b:	90                   	nop
c0025f5c:	83 c4 0c             	add    esp,0xc
c0025f5f:	c3                   	ret    

c0025f60 <PIC::ioWait()>:
c0025f60:	eb 00                	jmp    c0025f62 <PIC::ioWait()+0x2>
c0025f62:	eb 00                	jmp    c0025f64 <PIC::ioWait()+0x4>
c0025f64:	90                   	nop
c0025f65:	c3                   	ret    

c0025f66 <PIC::getIRQReg(int)>:
c0025f66:	55                   	push   ebp
c0025f67:	89 e5                	mov    ebp,esp
c0025f69:	83 ec 10             	sub    esp,0x10
c0025f6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6f:	0f b6 c0             	movzx  eax,al
c0025f72:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f78:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f7b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f7e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f82:	ee                   	out    dx,al
c0025f83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f86:	0f b6 c0             	movzx  eax,al
c0025f89:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f8f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f92:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f95:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f99:	ee                   	out    dx,al
c0025f9a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fa0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fa4:	89 c2                	mov    edx,eax
c0025fa6:	ec                   	in     al,dx
c0025fa7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025faa:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fad:	0f b6 c0             	movzx  eax,al
c0025fb0:	c1 e0 08             	shl    eax,0x8
c0025fb3:	89 c1                	mov    ecx,eax
c0025fb5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fbb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fbf:	89 c2                	mov    edx,eax
c0025fc1:	ec                   	in     al,dx
c0025fc2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fc5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fc8:	0f b6 c0             	movzx  eax,al
c0025fcb:	09 c8                	or     eax,ecx
c0025fcd:	c9                   	leave  
c0025fce:	c3                   	ret    
c0025fcf:	90                   	nop

c0025fd0 <PIC::eoi(unsigned char)>:
c0025fd0:	55                   	push   ebp
c0025fd1:	89 e5                	mov    ebp,esp
c0025fd3:	83 ec 14             	sub    esp,0x14
c0025fd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fdc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fe0:	75 1e                	jne    c0026000 <PIC::eoi(unsigned char)+0x30>
c0025fe2:	6a 0b                	push   0xb
c0025fe4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe7:	e8 7a ff ff ff       	call   c0025f66 <PIC::getIRQReg(int)>
c0025fec:	83 c4 08             	add    esp,0x8
c0025fef:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ff3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ff7:	25 80 00 00 00       	and    eax,0x80
c0025ffc:	85 c0                	test   eax,eax
c0025ffe:	74 5f                	je     c002605f <PIC::eoi(unsigned char)+0x8f>
c0026000:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026004:	75 2d                	jne    c0026033 <PIC::eoi(unsigned char)+0x63>
c0026006:	6a 0b                	push   0xb
c0026008:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002600b:	e8 56 ff ff ff       	call   c0025f66 <PIC::getIRQReg(int)>
c0026010:	83 c4 08             	add    esp,0x8
c0026013:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026017:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002601a:	66 85 c0             	test   ax,ax
c002601d:	78 14                	js     c0026033 <PIC::eoi(unsigned char)+0x63>
c002601f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026025:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026029:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002602c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026030:	ee                   	out    dx,al
c0026031:	eb 2d                	jmp    c0026060 <PIC::eoi(unsigned char)+0x90>
c0026033:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026037:	76 12                	jbe    c002604b <PIC::eoi(unsigned char)+0x7b>
c0026039:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002603f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026043:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026046:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002604a:	ee                   	out    dx,al
c002604b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026051:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026055:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026058:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002605c:	ee                   	out    dx,al
c002605d:	eb 01                	jmp    c0026060 <PIC::eoi(unsigned char)+0x90>
c002605f:	90                   	nop
c0026060:	c9                   	leave  
c0026061:	c3                   	ret    

c0026062 <PIC::remap()>:
c0026062:	55                   	push   ebp
c0026063:	89 e5                	mov    ebp,esp
c0026065:	83 ec 48             	sub    esp,0x48
c0026068:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002606f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026076:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002607c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002607f:	89 c2                	mov    edx,eax
c0026081:	ec                   	in     al,dx
c0026082:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026085:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026088:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002608b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026091:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026094:	89 c2                	mov    edx,eax
c0026096:	ec                   	in     al,dx
c0026097:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002609a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002609d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260a0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260a6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260aa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260ad:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260b0:	ee                   	out    dx,al
c00260b1:	83 ec 0c             	sub    esp,0xc
c00260b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b7:	e8 a4 fe ff ff       	call   c0025f60 <PIC::ioWait()>
c00260bc:	83 c4 10             	add    esp,0x10
c00260bf:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260c5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260c9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260cc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260cf:	ee                   	out    dx,al
c00260d0:	83 ec 0c             	sub    esp,0xc
c00260d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d6:	e8 85 fe ff ff       	call   c0025f60 <PIC::ioWait()>
c00260db:	83 c4 10             	add    esp,0x10
c00260de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260e1:	0f b6 c0             	movzx  eax,al
c00260e4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260ea:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260ed:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260f0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260f3:	ee                   	out    dx,al
c00260f4:	83 ec 0c             	sub    esp,0xc
c00260f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fa:	e8 61 fe ff ff       	call   c0025f60 <PIC::ioWait()>
c00260ff:	83 c4 10             	add    esp,0x10
c0026102:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026105:	0f b6 c0             	movzx  eax,al
c0026108:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002610e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026111:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026114:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026117:	ee                   	out    dx,al
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611e:	e8 3d fe ff ff       	call   c0025f60 <PIC::ioWait()>
c0026123:	83 c4 10             	add    esp,0x10
c0026126:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002612c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026130:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026133:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026136:	ee                   	out    dx,al
c0026137:	83 ec 0c             	sub    esp,0xc
c002613a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613d:	e8 1e fe ff ff       	call   c0025f60 <PIC::ioWait()>
c0026142:	83 c4 10             	add    esp,0x10
c0026145:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002614b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002614f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026152:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026155:	ee                   	out    dx,al
c0026156:	83 ec 0c             	sub    esp,0xc
c0026159:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615c:	e8 ff fd ff ff       	call   c0025f60 <PIC::ioWait()>
c0026161:	83 c4 10             	add    esp,0x10
c0026164:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002616a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002616e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026171:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026174:	ee                   	out    dx,al
c0026175:	83 ec 0c             	sub    esp,0xc
c0026178:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617b:	e8 e0 fd ff ff       	call   c0025f60 <PIC::ioWait()>
c0026180:	83 c4 10             	add    esp,0x10
c0026183:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026189:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002618d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026190:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026193:	ee                   	out    dx,al
c0026194:	83 ec 0c             	sub    esp,0xc
c0026197:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619a:	e8 c1 fd ff ff       	call   c0025f60 <PIC::ioWait()>
c002619f:	83 c4 10             	add    esp,0x10
c00261a2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261a6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261ac:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261af:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261b2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261b5:	ee                   	out    dx,al
c00261b6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261ba:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261c0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261c3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261c9:	ee                   	out    dx,al
c00261ca:	90                   	nop
c00261cb:	c9                   	leave  
c00261cc:	c3                   	ret    
c00261cd:	90                   	nop

c00261ce <PIC::open(int, int, void*)>:
c00261ce:	55                   	push   ebp
c00261cf:	89 e5                	mov    ebp,esp
c00261d1:	83 ec 18             	sub    esp,0x18
c00261d4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261da:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261de:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261e1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261e5:	ee                   	out    dx,al
c00261e6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261ec:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261f0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261f3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261f7:	ee                   	out    dx,al
c00261f8:	83 ec 0c             	sub    esp,0xc
c00261fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fe:	e8 5f fe ff ff       	call   c0026062 <PIC::remap()>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	b8 00 00 00 00       	mov    eax,0x0
c002620b:	c9                   	leave  
c002620c:	c3                   	ret    
c002620d:	90                   	nop

c002620e <APICTimer::close(int, int, void*)>:
c002620e:	b8 00 00 00 00       	mov    eax,0x0
c0026213:	c3                   	ret    

c0026214 <apicTimerHandler(regs*, void*)>:
c0026214:	83 ec 0c             	sub    esp,0xc
c0026217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002621b:	8b 00                	mov    eax,DWORD PTR [eax]
c002621d:	99                   	cdq    
c002621e:	52                   	push   edx
c002621f:	50                   	push   eax
c0026220:	6a 00                	push   0x0
c0026222:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026227:	e8 90 07 00 00       	call   c00269bc <__udivdi3>
c002622c:	83 c4 10             	add    esp,0x10
c002622f:	83 ec 08             	sub    esp,0x8
c0026232:	52                   	push   edx
c0026233:	50                   	push   eax
c0026234:	e8 f2 0a ff ff       	call   c0016d2b <timerHandler(unsigned long long)>
c0026239:	83 c4 10             	add    esp,0x10
c002623c:	90                   	nop
c002623d:	83 c4 0c             	add    esp,0xc
c0026240:	c3                   	ret    
c0026241:	90                   	nop

c0026242 <APICTimer::write(int)>:
c0026242:	53                   	push   ebx
c0026243:	83 ec 28             	sub    esp,0x28
c0026246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002624a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002624e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026254:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0026259:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002625f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026265:	83 ec 0c             	sub    esp,0xc
c0026268:	50                   	push   eax
c0026269:	e8 de f4 ff ff       	call   c002574c <APIC::getBase()>
c002626e:	83 c4 10             	add    esp,0x10
c0026271:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026275:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c002627a:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c0026280:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026284:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026288:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628c:	05 e0 03 00 00       	add    eax,0x3e0
c0026291:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002629b:	05 80 03 00 00       	add    eax,0x380
c00262a0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262a6:	fb                   	sti    
c00262a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262af:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262b4:	83 d2 00             	adc    edx,0x0
c00262b7:	89 c1                	mov    ecx,eax
c00262b9:	89 d3                	mov    ebx,edx
c00262bb:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c00262c0:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c00262c6:	39 c8                	cmp    eax,ecx
c00262c8:	89 d0                	mov    eax,edx
c00262ca:	19 d8                	sbb    eax,ebx
c00262cc:	73 02                	jae    c00262d0 <APICTimer::write(int)+0x8e>
c00262ce:	eb d7                	jmp    c00262a7 <APICTimer::write(int)+0x65>
c00262d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d4:	05 20 03 00 00       	add    eax,0x320
c00262d9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e3:	05 90 03 00 00       	add    eax,0x390
c00262e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00262ea:	f7 d0                	not    eax
c00262ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262f8:	ba 00 00 00 00       	mov    edx,0x0
c00262fd:	f7 f3                	div    ebx
c00262ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026307:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002630d:	0d 00 00 02 00       	or     eax,0x20000
c0026312:	89 c2                	mov    edx,eax
c0026314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026318:	05 20 03 00 00       	add    eax,0x320
c002631d:	89 10                	mov    DWORD PTR [eax],edx
c002631f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026323:	05 e0 03 00 00       	add    eax,0x3e0
c0026328:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002632e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026332:	05 80 03 00 00       	add    eax,0x380
c0026337:	89 c2                	mov    edx,eax
c0026339:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002633d:	89 02                	mov    DWORD PTR [edx],eax
c002633f:	90                   	nop
c0026340:	83 c4 28             	add    esp,0x28
c0026343:	5b                   	pop    ebx
c0026344:	c3                   	ret    
c0026345:	90                   	nop

c0026346 <APICTimer::open(int, int, void*)>:
c0026346:	57                   	push   edi
c0026347:	56                   	push   esi
c0026348:	53                   	push   ebx
c0026349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634d:	8b 00                	mov    eax,DWORD PTR [eax]
c002634f:	83 c0 24             	add    eax,0x24
c0026352:	8b 00                	mov    eax,DWORD PTR [eax]
c0026354:	83 ec 08             	sub    esp,0x8
c0026357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002635b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002635f:	ff d0                	call   eax
c0026361:	83 c4 10             	add    esp,0x10
c0026364:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0026369:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002636f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026375:	83 ec 0c             	sub    esp,0xc
c0026378:	50                   	push   eax
c0026379:	e8 ce f3 ff ff       	call   c002574c <APIC::getBase()>
c002637e:	83 c4 10             	add    esp,0x10
c0026381:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026391:	0f b6 f8             	movzx  edi,al
c0026394:	89 d0                	mov    eax,edx
c0026396:	ba 00 00 00 00       	mov    edx,0x0
c002639b:	89 c1                	mov    ecx,eax
c002639d:	80 e5 ff             	and    ch,0xff
c00263a0:	89 cb                	mov    ebx,ecx
c00263a2:	0f b6 f2             	movzx  esi,dl
c00263a5:	89 d8                	mov    eax,ebx
c00263a7:	89 f2                	mov    edx,esi
c00263a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ad:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263b8:	83 e0 00             	and    eax,0x0
c00263bb:	09 d0                	or     eax,edx
c00263bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263cb:	8d 50 01             	lea    edx,[eax+0x1]
c00263ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263d2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263d8:	0f b6 d0             	movzx  edx,al
c00263db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263df:	83 c2 08             	add    edx,0x8
c00263e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263e6:	0f b6 c9             	movzx  ecx,cl
c00263e9:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263fb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026405:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026409:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002640f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026413:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026419:	83 ec 0c             	sub    esp,0xc
c002641c:	51                   	push   ecx
c002641d:	6a 01                	push   0x1
c002641f:	68 14 62 02 c0       	push   0xc0026214
c0026424:	52                   	push   edx
c0026425:	50                   	push   eax
c0026426:	e8 dd de fe ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002642b:	83 c4 20             	add    esp,0x20
c002642e:	89 c2                	mov    edx,eax
c0026430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026434:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002643a:	b8 00 00 00 00       	mov    eax,0x0
c002643f:	5b                   	pop    ebx
c0026440:	5e                   	pop    esi
c0026441:	5f                   	pop    edi
c0026442:	c3                   	ret    
c0026443:	90                   	nop

c0026444 <APICTimer::APICTimer()>:
c0026444:	83 ec 0c             	sub    esp,0xc
c0026447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644b:	83 ec 08             	sub    esp,0x8
c002644e:	68 50 d2 02 c0       	push   0xc002d250
c0026453:	50                   	push   eax
c0026454:	e8 43 08 ff ff       	call   c0016c9c <Timer::Timer(char const*)>
c0026459:	83 c4 10             	add    esp,0x10
c002645c:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c0026461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026465:	89 10                	mov    DWORD PTR [eax],edx
c0026467:	90                   	nop
c0026468:	83 c4 0c             	add    esp,0xc
c002646b:	c3                   	ret    

c002646c <PIT::write(int)>:
c002646c:	83 ec 10             	sub    esp,0x10
c002646f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026473:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026477:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002647d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026481:	a3 a4 27 03 c0       	mov    ds:0xc00327a4,eax
c0026486:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002648b:	99                   	cdq    
c002648c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026490:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026494:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002649b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264a9:	ee                   	out    dx,al
c00264aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ae:	0f b6 c0             	movzx  eax,al
c00264b1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264b8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264bc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264c0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264c5:	ee                   	out    dx,al
c00264c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ca:	c1 f8 08             	sar    eax,0x8
c00264cd:	0f b6 c0             	movzx  eax,al
c00264d0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264d7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264e4:	ee                   	out    dx,al
c00264e5:	90                   	nop
c00264e6:	83 c4 10             	add    esp,0x10
c00264e9:	c3                   	ret    

c00264ea <pitHandler(regs*, void*)>:
c00264ea:	83 ec 0c             	sub    esp,0xc
c00264ed:	a1 a4 27 03 c0       	mov    eax,ds:0xc00327a4
c00264f2:	99                   	cdq    
c00264f3:	52                   	push   edx
c00264f4:	50                   	push   eax
c00264f5:	6a 00                	push   0x0
c00264f7:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264fc:	e8 bb 04 00 00       	call   c00269bc <__udivdi3>
c0026501:	83 c4 10             	add    esp,0x10
c0026504:	83 ec 08             	sub    esp,0x8
c0026507:	52                   	push   edx
c0026508:	50                   	push   eax
c0026509:	e8 1d 08 ff ff       	call   c0016d2b <timerHandler(unsigned long long)>
c002650e:	83 c4 10             	add    esp,0x10
c0026511:	90                   	nop
c0026512:	83 c4 0c             	add    esp,0xc
c0026515:	c3                   	ret    

c0026516 <PIT::open(int, int, void*)>:
c0026516:	83 ec 0c             	sub    esp,0xc
c0026519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651d:	8b 00                	mov    eax,DWORD PTR [eax]
c002651f:	83 c0 24             	add    eax,0x24
c0026522:	8b 00                	mov    eax,DWORD PTR [eax]
c0026524:	83 ec 08             	sub    esp,0x8
c0026527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652f:	ff d0                	call   eax
c0026531:	83 c4 10             	add    esp,0x10
c0026534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026538:	83 ec 0c             	sub    esp,0xc
c002653b:	6a 00                	push   0x0
c002653d:	6a 01                	push   0x1
c002653f:	68 ea 64 02 c0       	push   0xc00264ea
c0026544:	6a 00                	push   0x0
c0026546:	50                   	push   eax
c0026547:	e8 bc dd fe ff       	call   c0014308 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002654c:	83 c4 20             	add    esp,0x20
c002654f:	89 c2                	mov    edx,eax
c0026551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026555:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002655b:	b8 00 00 00 00       	mov    eax,0x0
c0026560:	83 c4 0c             	add    esp,0xc
c0026563:	c3                   	ret    

c0026564 <PIT::close(int, int, void*)>:
c0026564:	83 ec 0c             	sub    esp,0xc
c0026567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026579:	6a 01                	push   0x1
c002657b:	68 ea 64 02 c0       	push   0xc00264ea
c0026580:	6a 00                	push   0x0
c0026582:	50                   	push   eax
c0026583:	e8 be dd fe ff       	call   c0014346 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026588:	83 c4 10             	add    esp,0x10
c002658b:	b8 00 00 00 00       	mov    eax,0x0
c0026590:	83 c4 0c             	add    esp,0xc
c0026593:	c3                   	ret    

c0026594 <PIT::PIT()>:
c0026594:	83 ec 0c             	sub    esp,0xc
c0026597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659b:	83 ec 08             	sub    esp,0x8
c002659e:	68 8c d2 02 c0       	push   0xc002d28c
c00265a3:	50                   	push   eax
c00265a4:	e8 f3 06 ff ff       	call   c0016c9c <Timer::Timer(char const*)>
c00265a9:	83 c4 10             	add    esp,0x10
c00265ac:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c00265b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b5:	89 10                	mov    DWORD PTR [eax],edx
c00265b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265c1:	0f b6 d0             	movzx  edx,al
c00265c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d9:	0f b6 d0             	movzx  edx,al
c00265dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265ef:	8d 50 01             	lea    edx,[eax+0x1]
c00265f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265f6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265fc:	0f b6 d0             	movzx  edx,al
c00265ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026603:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026607:	83 e1 3f             	and    ecx,0x3f
c002660a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002660e:	90                   	nop
c002660f:	83 c4 0c             	add    esp,0xc
c0026612:	c3                   	ret    
c0026613:	66 90                	xchg   ax,ax
c0026615:	66 90                	xchg   ax,ax
c0026617:	66 90                	xchg   ax,ax
c0026619:	66 90                	xchg   ax,ax
c002661b:	66 90                	xchg   ax,ax
c002661d:	66 90                	xchg   ax,ax
c002661f:	90                   	nop

c0026620 <avxDetect>:
c0026620:	b8 00 00 00 00       	mov    eax,0x0
c0026625:	c3                   	ret    

c0026626 <avxSave>:
c0026626:	c3                   	ret    

c0026627 <avxLoad>:
c0026627:	c3                   	ret    

c0026628 <avxInit>:
c0026628:	c3                   	ret    

c0026629 <avxClose>:
c0026629:	c3                   	ret    

c002662a <wouldSheSayYes>:
c002662a:	c3                   	ret    
c002662b:	49                   	dec    ecx
c002662c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026630:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026634:	75 20                	jne    c0026656 <sseDetect.noSSE+0x1>
c0026636:	4e                   	dec    esi
c0026637:	79 61                	jns    c002669a <x87Detect+0x14>
c0026639:	68 2e 2e 2e 00       	push   0x2e2e2e
c002663e:	66 90                	xchg   ax,ax

c0026640 <absolutelyNoChanceInHell>:
c0026640:	b8 01 00 00 00       	mov    eax,0x1
c0026645:	0f a2                	cpuid  
c0026647:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002664d:	74 06                	je     c0026655 <sseDetect.noSSE>
c002664f:	b8 01 00 00 00       	mov    eax,0x1
c0026654:	c3                   	ret    

c0026655 <sseDetect.noSSE>:
c0026655:	31 c0                	xor    eax,eax
c0026657:	c3                   	ret    

c0026658 <sseSave>:
c0026658:	0f ae 44 24 08       	fxsave [esp+0x8]
c002665d:	c3                   	ret    

c002665e <sseLoad>:
c002665e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026663:	c3                   	ret    

c0026664 <sseInit>:
c0026664:	e8 43 00 00 00       	call   c00266ac <x87Init>
c0026669:	0f 20 e0             	mov    eax,cr4
c002666c:	66 0d 00 06          	or     ax,0x600
c0026670:	0f 22 e0             	mov    cr4,eax
c0026673:	c3                   	ret    

c0026674 <sseClose>:
c0026674:	c3                   	ret    
c0026675:	66 90                	xchg   ax,ax
c0026677:	66 90                	xchg   ax,ax
c0026679:	66 90                	xchg   ax,ax
c002667b:	66 90                	xchg   ax,ax
c002667d:	66 90                	xchg   ax,ax
c002667f:	90                   	nop

c0026680 <value_37F>:
c0026680:	7f 03                	jg     c0026685 <value_37A+0x1>

c0026682 <value_37E>:
c0026682:	7e 03                	jle    c0026687 <x87Detect+0x1>

c0026684 <value_37A>:
c0026684:	7a 03                	jp     c0026689 <x87Detect+0x3>

c0026686 <x87Detect>:
c0026686:	b8 01 00 00 00       	mov    eax,0x1
c002668b:	0f a2                	cpuid  
c002668d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026693:	74 06                	je     c002669b <x87Detect.nox87>
c0026695:	b8 01 00 00 00       	mov    eax,0x1
c002669a:	c3                   	ret    

c002669b <x87Detect.nox87>:
c002669b:	b8 00 00 00 00       	mov    eax,0x0
c00266a0:	c3                   	ret    

c00266a1 <x87Save>:
c00266a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266a6:	c3                   	ret    

c00266a7 <x87Load>:
c00266a7:	dd 64 24 08          	frstor [esp+0x8]
c00266ab:	c3                   	ret    

c00266ac <x87Init>:
c00266ac:	9b db e3             	finit  
c00266af:	0f 20 c0             	mov    eax,cr0
c00266b2:	66 25 fb ff          	and    ax,0xfffb
c00266b6:	66 0d 22 00          	or     ax,0x22
c00266ba:	0f 22 c0             	mov    cr0,eax
c00266bd:	0f 06                	clts   
c00266bf:	d9 2d 84 66 02 c0    	fldcw  WORD PTR ds:0xc0026684
c00266c5:	c3                   	ret    

c00266c6 <x87Close>:
c00266c6:	c3                   	ret    
c00266c7:	90                   	nop

c00266c8 <__do_global_ctors_aux>:
c00266c8:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c00266cd:	83 f8 ff             	cmp    eax,0xffffffff
c00266d0:	74 1a                	je     c00266ec <__do_global_ctors_aux+0x24>
c00266d2:	55                   	push   ebp
c00266d3:	89 e5                	mov    ebp,esp
c00266d5:	53                   	push   ebx
c00266d6:	52                   	push   edx
c00266d7:	bb 0c 92 02 c0       	mov    ebx,0xc002920c
c00266dc:	ff d0                	call   eax
c00266de:	83 eb 04             	sub    ebx,0x4
c00266e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266e3:	83 f8 ff             	cmp    eax,0xffffffff
c00266e6:	75 f4                	jne    c00266dc <__do_global_ctors_aux+0x14>
c00266e8:	58                   	pop    eax
c00266e9:	5b                   	pop    ebx
c00266ea:	5d                   	pop    ebp
c00266eb:	c3                   	ret    
c00266ec:	c3                   	ret    
c00266ed:	66 90                	xchg   ax,ax
c00266ef:	90                   	nop

c00266f0 <__divdi3>:
c00266f0:	55                   	push   ebp
c00266f1:	57                   	push   edi
c00266f2:	56                   	push   esi
c00266f3:	53                   	push   ebx
c00266f4:	83 ec 1c             	sub    esp,0x1c
c00266f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026702:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026706:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002670a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002670e:	85 db                	test   ebx,ebx
c0026710:	0f 88 8e 00 00 00    	js     c00267a4 <__divdi3+0xb4>
c0026716:	89 dd                	mov    ebp,ebx
c0026718:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026720:	89 d3                	mov    ebx,edx
c0026722:	85 d2                	test   edx,edx
c0026724:	79 0d                	jns    c0026733 <__divdi3+0x43>
c0026726:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002672a:	f7 d8                	neg    eax
c002672c:	83 d2 00             	adc    edx,0x0
c002672f:	f7 da                	neg    edx
c0026731:	89 d3                	mov    ebx,edx
c0026733:	89 c7                	mov    edi,eax
c0026735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026738:	85 db                	test   ebx,ebx
c002673a:	75 48                	jne    c0026784 <__divdi3+0x94>
c002673c:	39 ef                	cmp    edi,ebp
c002673e:	76 24                	jbe    c0026764 <__divdi3+0x74>
c0026740:	89 ea                	mov    edx,ebp
c0026742:	f7 f7                	div    edi
c0026744:	89 c1                	mov    ecx,eax
c0026746:	31 f6                	xor    esi,esi
c0026748:	89 c8                	mov    eax,ecx
c002674a:	89 f2                	mov    edx,esi
c002674c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026750:	85 c9                	test   ecx,ecx
c0026752:	74 07                	je     c002675b <__divdi3+0x6b>
c0026754:	f7 d8                	neg    eax
c0026756:	83 d2 00             	adc    edx,0x0
c0026759:	f7 da                	neg    edx
c002675b:	83 c4 1c             	add    esp,0x1c
c002675e:	5b                   	pop    ebx
c002675f:	5e                   	pop    esi
c0026760:	5f                   	pop    edi
c0026761:	5d                   	pop    ebp
c0026762:	c3                   	ret    
c0026763:	90                   	nop
c0026764:	85 ff                	test   edi,edi
c0026766:	75 0b                	jne    c0026773 <__divdi3+0x83>
c0026768:	b8 01 00 00 00       	mov    eax,0x1
c002676d:	31 d2                	xor    edx,edx
c002676f:	f7 f3                	div    ebx
c0026771:	89 c7                	mov    edi,eax
c0026773:	31 d2                	xor    edx,edx
c0026775:	89 e8                	mov    eax,ebp
c0026777:	f7 f7                	div    edi
c0026779:	89 c6                	mov    esi,eax
c002677b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002677e:	f7 f7                	div    edi
c0026780:	89 c1                	mov    ecx,eax
c0026782:	eb c4                	jmp    c0026748 <__divdi3+0x58>
c0026784:	39 eb                	cmp    ebx,ebp
c0026786:	77 3c                	ja     c00267c4 <__divdi3+0xd4>
c0026788:	0f bd f3             	bsr    esi,ebx
c002678b:	83 f6 1f             	xor    esi,0x1f
c002678e:	75 40                	jne    c00267d0 <__divdi3+0xe0>
c0026790:	39 eb                	cmp    ebx,ebp
c0026792:	72 09                	jb     c002679d <__divdi3+0xad>
c0026794:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026797:	0f 87 97 00 00 00    	ja     c0026834 <__divdi3+0x144>
c002679d:	b9 01 00 00 00       	mov    ecx,0x1
c00267a2:	eb a4                	jmp    c0026748 <__divdi3+0x58>
c00267a4:	f7 d9                	neg    ecx
c00267a6:	83 d3 00             	adc    ebx,0x0
c00267a9:	f7 db                	neg    ebx
c00267ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267b2:	89 dd                	mov    ebp,ebx
c00267b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267bc:	e9 5f ff ff ff       	jmp    c0026720 <__divdi3+0x30>
c00267c1:	8d 76 00             	lea    esi,[esi+0x0]
c00267c4:	31 f6                	xor    esi,esi
c00267c6:	31 c9                	xor    ecx,ecx
c00267c8:	e9 7b ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c00267cd:	8d 76 00             	lea    esi,[esi+0x0]
c00267d0:	b8 20 00 00 00       	mov    eax,0x20
c00267d5:	29 f0                	sub    eax,esi
c00267d7:	89 f1                	mov    ecx,esi
c00267d9:	d3 e3                	shl    ebx,cl
c00267db:	89 fa                	mov    edx,edi
c00267dd:	88 c1                	mov    cl,al
c00267df:	d3 ea                	shr    edx,cl
c00267e1:	09 da                	or     edx,ebx
c00267e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267e7:	89 f1                	mov    ecx,esi
c00267e9:	d3 e7                	shl    edi,cl
c00267eb:	89 eb                	mov    ebx,ebp
c00267ed:	88 c1                	mov    cl,al
c00267ef:	d3 eb                	shr    ebx,cl
c00267f1:	89 f1                	mov    ecx,esi
c00267f3:	d3 e5                	shl    ebp,cl
c00267f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267f8:	88 c1                	mov    cl,al
c00267fa:	d3 ea                	shr    edx,cl
c00267fc:	09 d5                	or     ebp,edx
c00267fe:	89 e8                	mov    eax,ebp
c0026800:	89 da                	mov    edx,ebx
c0026802:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026806:	89 d3                	mov    ebx,edx
c0026808:	89 c5                	mov    ebp,eax
c002680a:	f7 e7                	mul    edi
c002680c:	39 d3                	cmp    ebx,edx
c002680e:	72 18                	jb     c0026828 <__divdi3+0x138>
c0026810:	74 0a                	je     c002681c <__divdi3+0x12c>
c0026812:	89 e9                	mov    ecx,ebp
c0026814:	31 f6                	xor    esi,esi
c0026816:	e9 2d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002681b:	90                   	nop
c002681c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002681f:	89 f1                	mov    ecx,esi
c0026821:	d3 e7                	shl    edi,cl
c0026823:	39 c7                	cmp    edi,eax
c0026825:	73 eb                	jae    c0026812 <__divdi3+0x122>
c0026827:	90                   	nop
c0026828:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002682b:	31 f6                	xor    esi,esi
c002682d:	e9 16 ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c0026832:	66 90                	xchg   ax,ax
c0026834:	31 c9                	xor    ecx,ecx
c0026836:	e9 0d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002683b:	90                   	nop

c002683c <__moddi3>:
c002683c:	55                   	push   ebp
c002683d:	57                   	push   edi
c002683e:	56                   	push   esi
c002683f:	53                   	push   ebx
c0026840:	83 ec 2c             	sub    esp,0x2c
c0026843:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026847:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002684b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002684f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026853:	85 db                	test   ebx,ebx
c0026855:	0f 88 85 00 00 00    	js     c00268e0 <__moddi3+0xa4>
c002685b:	89 de                	mov    esi,ebx
c002685d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026865:	89 d7                	mov    edi,edx
c0026867:	85 d2                	test   edx,edx
c0026869:	79 09                	jns    c0026874 <__moddi3+0x38>
c002686b:	f7 d8                	neg    eax
c002686d:	83 d2 00             	adc    edx,0x0
c0026870:	f7 da                	neg    edx
c0026872:	89 d7                	mov    edi,edx
c0026874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026878:	89 cd                	mov    ebp,ecx
c002687a:	85 ff                	test   edi,edi
c002687c:	75 52                	jne    c00268d0 <__moddi3+0x94>
c002687e:	89 c3                	mov    ebx,eax
c0026880:	39 f0                	cmp    eax,esi
c0026882:	76 24                	jbe    c00268a8 <__moddi3+0x6c>
c0026884:	89 c8                	mov    eax,ecx
c0026886:	89 f2                	mov    edx,esi
c0026888:	f7 f3                	div    ebx
c002688a:	89 d6                	mov    esi,edx
c002688c:	89 f0                	mov    eax,esi
c002688e:	31 d2                	xor    edx,edx
c0026890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026894:	85 c9                	test   ecx,ecx
c0026896:	74 07                	je     c002689f <__moddi3+0x63>
c0026898:	f7 d8                	neg    eax
c002689a:	83 d2 00             	adc    edx,0x0
c002689d:	f7 da                	neg    edx
c002689f:	83 c4 2c             	add    esp,0x2c
c00268a2:	5b                   	pop    ebx
c00268a3:	5e                   	pop    esi
c00268a4:	5f                   	pop    edi
c00268a5:	5d                   	pop    ebp
c00268a6:	c3                   	ret    
c00268a7:	90                   	nop
c00268a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268ac:	85 db                	test   ebx,ebx
c00268ae:	75 0d                	jne    c00268bd <__moddi3+0x81>
c00268b0:	b8 01 00 00 00       	mov    eax,0x1
c00268b5:	31 d2                	xor    edx,edx
c00268b7:	f7 f7                	div    edi
c00268b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268bd:	89 f0                	mov    eax,esi
c00268bf:	31 d2                	xor    edx,edx
c00268c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268c5:	f7 f7                	div    edi
c00268c7:	89 e8                	mov    eax,ebp
c00268c9:	f7 f7                	div    edi
c00268cb:	89 d6                	mov    esi,edx
c00268cd:	eb bd                	jmp    c002688c <__moddi3+0x50>
c00268cf:	90                   	nop
c00268d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268d4:	39 f7                	cmp    edi,esi
c00268d6:	76 20                	jbe    c00268f8 <__moddi3+0xbc>
c00268d8:	89 c8                	mov    eax,ecx
c00268da:	89 f2                	mov    edx,esi
c00268dc:	eb b2                	jmp    c0026890 <__moddi3+0x54>
c00268de:	66 90                	xchg   ax,ax
c00268e0:	f7 d9                	neg    ecx
c00268e2:	83 d3 00             	adc    ebx,0x0
c00268e5:	f7 db                	neg    ebx
c00268e7:	89 de                	mov    esi,ebx
c00268e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268f1:	e9 6f ff ff ff       	jmp    c0026865 <__moddi3+0x29>
c00268f6:	66 90                	xchg   ax,ax
c00268f8:	0f bd c7             	bsr    eax,edi
c00268fb:	83 f0 1f             	xor    eax,0x1f
c00268fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026902:	75 24                	jne    c0026928 <__moddi3+0xec>
c0026904:	39 f7                	cmp    edi,esi
c0026906:	72 06                	jb     c002690e <__moddi3+0xd2>
c0026908:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002690c:	77 0c                	ja     c002691a <__moddi3+0xde>
c002690e:	89 e9                	mov    ecx,ebp
c0026910:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026914:	19 fe                	sbb    esi,edi
c0026916:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002691a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002691e:	89 f2                	mov    edx,esi
c0026920:	e9 6b ff ff ff       	jmp    c0026890 <__moddi3+0x54>
c0026925:	8d 76 00             	lea    esi,[esi+0x0]
c0026928:	b8 20 00 00 00       	mov    eax,0x20
c002692d:	89 c2                	mov    edx,eax
c002692f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026933:	29 da                	sub    edx,ebx
c0026935:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026939:	88 d9                	mov    cl,bl
c002693b:	d3 e7                	shl    edi,cl
c002693d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026941:	88 d1                	mov    cl,dl
c0026943:	d3 e8                	shr    eax,cl
c0026945:	09 c7                	or     edi,eax
c0026947:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002694b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002694f:	89 d8                	mov    eax,ebx
c0026951:	88 d9                	mov    cl,bl
c0026953:	d3 e7                	shl    edi,cl
c0026955:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026959:	89 f3                	mov    ebx,esi
c002695b:	88 d1                	mov    cl,dl
c002695d:	d3 eb                	shr    ebx,cl
c002695f:	89 c7                	mov    edi,eax
c0026961:	88 c1                	mov    cl,al
c0026963:	d3 e6                	shl    esi,cl
c0026965:	89 e8                	mov    eax,ebp
c0026967:	88 d1                	mov    cl,dl
c0026969:	d3 e8                	shr    eax,cl
c002696b:	09 f0                	or     eax,esi
c002696d:	89 f9                	mov    ecx,edi
c002696f:	d3 e5                	shl    ebp,cl
c0026971:	89 da                	mov    edx,ebx
c0026973:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026977:	89 d3                	mov    ebx,edx
c0026979:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002697d:	89 c6                	mov    esi,eax
c002697f:	89 d1                	mov    ecx,edx
c0026981:	39 d3                	cmp    ebx,edx
c0026983:	72 27                	jb     c00269ac <__moddi3+0x170>
c0026985:	74 21                	je     c00269a8 <__moddi3+0x16c>
c0026987:	29 f5                	sub    ebp,esi
c0026989:	19 cb                	sbb    ebx,ecx
c002698b:	89 de                	mov    esi,ebx
c002698d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026991:	d3 e6                	shl    esi,cl
c0026993:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026997:	89 f9                	mov    ecx,edi
c0026999:	d3 ed                	shr    ebp,cl
c002699b:	09 ee                	or     esi,ebp
c002699d:	89 f0                	mov    eax,esi
c002699f:	d3 eb                	shr    ebx,cl
c00269a1:	89 da                	mov    edx,ebx
c00269a3:	e9 e8 fe ff ff       	jmp    c0026890 <__moddi3+0x54>
c00269a8:	39 c5                	cmp    ebp,eax
c00269aa:	73 db                	jae    c0026987 <__moddi3+0x14b>
c00269ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269b4:	89 d1                	mov    ecx,edx
c00269b6:	89 c6                	mov    esi,eax
c00269b8:	eb cd                	jmp    c0026987 <__moddi3+0x14b>
c00269ba:	66 90                	xchg   ax,ax

c00269bc <__udivdi3>:
c00269bc:	55                   	push   ebp
c00269bd:	57                   	push   edi
c00269be:	56                   	push   esi
c00269bf:	53                   	push   ebx
c00269c0:	83 ec 1c             	sub    esp,0x1c
c00269c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269d3:	85 d2                	test   edx,edx
c00269d5:	75 41                	jne    c0026a18 <__udivdi3+0x5c>
c00269d7:	39 f7                	cmp    edi,esi
c00269d9:	76 15                	jbe    c00269f0 <__udivdi3+0x34>
c00269db:	89 e8                	mov    eax,ebp
c00269dd:	89 f2                	mov    edx,esi
c00269df:	f7 f7                	div    edi
c00269e1:	31 db                	xor    ebx,ebx
c00269e3:	89 da                	mov    edx,ebx
c00269e5:	83 c4 1c             	add    esp,0x1c
c00269e8:	5b                   	pop    ebx
c00269e9:	5e                   	pop    esi
c00269ea:	5f                   	pop    edi
c00269eb:	5d                   	pop    ebp
c00269ec:	c3                   	ret    
c00269ed:	8d 76 00             	lea    esi,[esi+0x0]
c00269f0:	89 f9                	mov    ecx,edi
c00269f2:	85 ff                	test   edi,edi
c00269f4:	75 0b                	jne    c0026a01 <__udivdi3+0x45>
c00269f6:	b8 01 00 00 00       	mov    eax,0x1
c00269fb:	31 d2                	xor    edx,edx
c00269fd:	f7 f7                	div    edi
c00269ff:	89 c1                	mov    ecx,eax
c0026a01:	31 d2                	xor    edx,edx
c0026a03:	89 f0                	mov    eax,esi
c0026a05:	f7 f1                	div    ecx
c0026a07:	89 c3                	mov    ebx,eax
c0026a09:	89 e8                	mov    eax,ebp
c0026a0b:	f7 f1                	div    ecx
c0026a0d:	89 da                	mov    edx,ebx
c0026a0f:	83 c4 1c             	add    esp,0x1c
c0026a12:	5b                   	pop    ebx
c0026a13:	5e                   	pop    esi
c0026a14:	5f                   	pop    edi
c0026a15:	5d                   	pop    ebp
c0026a16:	c3                   	ret    
c0026a17:	90                   	nop
c0026a18:	39 f2                	cmp    edx,esi
c0026a1a:	77 1c                	ja     c0026a38 <__udivdi3+0x7c>
c0026a1c:	0f bd da             	bsr    ebx,edx
c0026a1f:	83 f3 1f             	xor    ebx,0x1f
c0026a22:	75 24                	jne    c0026a48 <__udivdi3+0x8c>
c0026a24:	39 f2                	cmp    edx,esi
c0026a26:	72 08                	jb     c0026a30 <__udivdi3+0x74>
c0026a28:	39 ef                	cmp    edi,ebp
c0026a2a:	0f 87 84 00 00 00    	ja     c0026ab4 <__udivdi3+0xf8>
c0026a30:	b8 01 00 00 00       	mov    eax,0x1
c0026a35:	eb ac                	jmp    c00269e3 <__udivdi3+0x27>
c0026a37:	90                   	nop
c0026a38:	31 db                	xor    ebx,ebx
c0026a3a:	31 c0                	xor    eax,eax
c0026a3c:	89 da                	mov    edx,ebx
c0026a3e:	83 c4 1c             	add    esp,0x1c
c0026a41:	5b                   	pop    ebx
c0026a42:	5e                   	pop    esi
c0026a43:	5f                   	pop    edi
c0026a44:	5d                   	pop    ebp
c0026a45:	c3                   	ret    
c0026a46:	66 90                	xchg   ax,ax
c0026a48:	b8 20 00 00 00       	mov    eax,0x20
c0026a4d:	29 d8                	sub    eax,ebx
c0026a4f:	88 d9                	mov    cl,bl
c0026a51:	d3 e2                	shl    edx,cl
c0026a53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a57:	89 fa                	mov    edx,edi
c0026a59:	88 c1                	mov    cl,al
c0026a5b:	d3 ea                	shr    edx,cl
c0026a5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a61:	09 d1                	or     ecx,edx
c0026a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a67:	88 d9                	mov    cl,bl
c0026a69:	d3 e7                	shl    edi,cl
c0026a6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a6f:	89 f7                	mov    edi,esi
c0026a71:	88 c1                	mov    cl,al
c0026a73:	d3 ef                	shr    edi,cl
c0026a75:	88 d9                	mov    cl,bl
c0026a77:	d3 e6                	shl    esi,cl
c0026a79:	89 ea                	mov    edx,ebp
c0026a7b:	88 c1                	mov    cl,al
c0026a7d:	d3 ea                	shr    edx,cl
c0026a7f:	09 d6                	or     esi,edx
c0026a81:	89 f0                	mov    eax,esi
c0026a83:	89 fa                	mov    edx,edi
c0026a85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a89:	89 d7                	mov    edi,edx
c0026a8b:	89 c6                	mov    esi,eax
c0026a8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a91:	39 d7                	cmp    edi,edx
c0026a93:	72 13                	jb     c0026aa8 <__udivdi3+0xec>
c0026a95:	74 09                	je     c0026aa0 <__udivdi3+0xe4>
c0026a97:	89 f0                	mov    eax,esi
c0026a99:	31 db                	xor    ebx,ebx
c0026a9b:	e9 43 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026aa0:	88 d9                	mov    cl,bl
c0026aa2:	d3 e5                	shl    ebp,cl
c0026aa4:	39 c5                	cmp    ebp,eax
c0026aa6:	73 ef                	jae    c0026a97 <__udivdi3+0xdb>
c0026aa8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026aab:	31 db                	xor    ebx,ebx
c0026aad:	e9 31 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026ab2:	66 90                	xchg   ax,ax
c0026ab4:	31 c0                	xor    eax,eax
c0026ab6:	e9 28 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026abb:	90                   	nop

c0026abc <__umoddi3>:
c0026abc:	55                   	push   ebp
c0026abd:	57                   	push   edi
c0026abe:	56                   	push   esi
c0026abf:	53                   	push   ebx
c0026ac0:	83 ec 1c             	sub    esp,0x1c
c0026ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026acb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026acf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ad3:	89 da                	mov    edx,ebx
c0026ad5:	85 c0                	test   eax,eax
c0026ad7:	75 37                	jne    c0026b10 <__umoddi3+0x54>
c0026ad9:	39 df                	cmp    edi,ebx
c0026adb:	76 13                	jbe    c0026af0 <__umoddi3+0x34>
c0026add:	89 f0                	mov    eax,esi
c0026adf:	f7 f7                	div    edi
c0026ae1:	89 d0                	mov    eax,edx
c0026ae3:	31 d2                	xor    edx,edx
c0026ae5:	83 c4 1c             	add    esp,0x1c
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5e                   	pop    esi
c0026aea:	5f                   	pop    edi
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    
c0026aed:	8d 76 00             	lea    esi,[esi+0x0]
c0026af0:	89 fd                	mov    ebp,edi
c0026af2:	85 ff                	test   edi,edi
c0026af4:	75 0b                	jne    c0026b01 <__umoddi3+0x45>
c0026af6:	b8 01 00 00 00       	mov    eax,0x1
c0026afb:	31 d2                	xor    edx,edx
c0026afd:	f7 f7                	div    edi
c0026aff:	89 c5                	mov    ebp,eax
c0026b01:	89 d8                	mov    eax,ebx
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	f7 f5                	div    ebp
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	f7 f5                	div    ebp
c0026b0b:	89 d0                	mov    eax,edx
c0026b0d:	eb d4                	jmp    c0026ae3 <__umoddi3+0x27>
c0026b0f:	90                   	nop
c0026b10:	89 f1                	mov    ecx,esi
c0026b12:	39 d8                	cmp    eax,ebx
c0026b14:	76 0a                	jbe    c0026b20 <__umoddi3+0x64>
c0026b16:	89 f0                	mov    eax,esi
c0026b18:	83 c4 1c             	add    esp,0x1c
c0026b1b:	5b                   	pop    ebx
c0026b1c:	5e                   	pop    esi
c0026b1d:	5f                   	pop    edi
c0026b1e:	5d                   	pop    ebp
c0026b1f:	c3                   	ret    
c0026b20:	0f bd e8             	bsr    ebp,eax
c0026b23:	83 f5 1f             	xor    ebp,0x1f
c0026b26:	75 1c                	jne    c0026b44 <__umoddi3+0x88>
c0026b28:	39 d8                	cmp    eax,ebx
c0026b2a:	72 04                	jb     c0026b30 <__umoddi3+0x74>
c0026b2c:	39 f7                	cmp    edi,esi
c0026b2e:	77 08                	ja     c0026b38 <__umoddi3+0x7c>
c0026b30:	89 da                	mov    edx,ebx
c0026b32:	29 fe                	sub    esi,edi
c0026b34:	19 c2                	sbb    edx,eax
c0026b36:	89 f1                	mov    ecx,esi
c0026b38:	89 c8                	mov    eax,ecx
c0026b3a:	83 c4 1c             	add    esp,0x1c
c0026b3d:	5b                   	pop    ebx
c0026b3e:	5e                   	pop    esi
c0026b3f:	5f                   	pop    edi
c0026b40:	5d                   	pop    ebp
c0026b41:	c3                   	ret    
c0026b42:	66 90                	xchg   ax,ax
c0026b44:	ba 20 00 00 00       	mov    edx,0x20
c0026b49:	29 ea                	sub    edx,ebp
c0026b4b:	89 e9                	mov    ecx,ebp
c0026b4d:	d3 e0                	shl    eax,cl
c0026b4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b53:	89 f8                	mov    eax,edi
c0026b55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b59:	88 d1                	mov    cl,dl
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b61:	09 c1                	or     ecx,eax
c0026b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b67:	89 e9                	mov    ecx,ebp
c0026b69:	d3 e7                	shl    edi,cl
c0026b6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b6f:	89 d8                	mov    eax,ebx
c0026b71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b75:	88 d1                	mov    cl,dl
c0026b77:	d3 e8                	shr    eax,cl
c0026b79:	89 c7                	mov    edi,eax
c0026b7b:	89 e9                	mov    ecx,ebp
c0026b7d:	d3 e3                	shl    ebx,cl
c0026b7f:	89 f0                	mov    eax,esi
c0026b81:	88 d1                	mov    cl,dl
c0026b83:	d3 e8                	shr    eax,cl
c0026b85:	09 d8                	or     eax,ebx
c0026b87:	89 e9                	mov    ecx,ebp
c0026b89:	d3 e6                	shl    esi,cl
c0026b8b:	89 f3                	mov    ebx,esi
c0026b8d:	89 fa                	mov    edx,edi
c0026b8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b93:	89 d1                	mov    ecx,edx
c0026b95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b99:	89 c6                	mov    esi,eax
c0026b9b:	89 d7                	mov    edi,edx
c0026b9d:	39 d1                	cmp    ecx,edx
c0026b9f:	72 27                	jb     c0026bc8 <__umoddi3+0x10c>
c0026ba1:	74 21                	je     c0026bc4 <__umoddi3+0x108>
c0026ba3:	89 ca                	mov    edx,ecx
c0026ba5:	29 f3                	sub    ebx,esi
c0026ba7:	19 fa                	sbb    edx,edi
c0026ba9:	89 d0                	mov    eax,edx
c0026bab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026baf:	d3 e0                	shl    eax,cl
c0026bb1:	89 e9                	mov    ecx,ebp
c0026bb3:	d3 eb                	shr    ebx,cl
c0026bb5:	09 d8                	or     eax,ebx
c0026bb7:	d3 ea                	shr    edx,cl
c0026bb9:	83 c4 1c             	add    esp,0x1c
c0026bbc:	5b                   	pop    ebx
c0026bbd:	5e                   	pop    esi
c0026bbe:	5f                   	pop    edi
c0026bbf:	5d                   	pop    ebp
c0026bc0:	c3                   	ret    
c0026bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bc4:	39 c3                	cmp    ebx,eax
c0026bc6:	73 db                	jae    c0026ba3 <__umoddi3+0xe7>
c0026bc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bcc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bd0:	89 d7                	mov    edi,edx
c0026bd2:	89 c6                	mov    esi,eax
c0026bd4:	eb cd                	jmp    c0026ba3 <__umoddi3+0xe7>

c0026bd6 <__addsf3>:
c0026bd6:	55                   	push   ebp
c0026bd7:	89 e5                	mov    ebp,esp
c0026bd9:	57                   	push   edi
c0026bda:	56                   	push   esi
c0026bdb:	53                   	push   ebx
c0026bdc:	83 ec 08             	sub    esp,0x8
c0026bdf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026be2:	89 fa                	mov    edx,edi
c0026be4:	89 f8                	mov    eax,edi
c0026be6:	c1 f8 17             	sar    eax,0x17
c0026be9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bec:	c1 e2 08             	shl    edx,0x8
c0026bef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bf5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bf8:	89 de                	mov    esi,ebx
c0026bfa:	c1 fe 17             	sar    esi,0x17
c0026bfd:	c1 e3 08             	shl    ebx,0x8
c0026c00:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c06:	31 f0                	xor    eax,esi
c0026c08:	0f 88 3b 01 00 00    	js     c0026d49 <__addsf3+0x173>
c0026c0e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c11:	29 f1                	sub    ecx,esi
c0026c13:	85 c9                	test   ecx,ecx
c0026c15:	7e 54                	jle    c0026c6b <__addsf3+0x95>
c0026c17:	89 f0                	mov    eax,esi
c0026c19:	84 c0                	test   al,al
c0026c1b:	75 10                	jne    c0026c2d <__addsf3+0x57>
c0026c1d:	85 db                	test   ebx,ebx
c0026c1f:	0f 84 aa 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c25:	49                   	dec    ecx
c0026c26:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c29:	74 38                	je     c0026c63 <__addsf3+0x8d>
c0026c2b:	eb 13                	jmp    c0026c40 <__addsf3+0x6a>
c0026c2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c30:	f7 d0                	not    eax
c0026c32:	84 c0                	test   al,al
c0026c34:	0f 84 95 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c3a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c40:	83 f9 1f             	cmp    ecx,0x1f
c0026c43:	0f 8f 86 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026c49:	89 de                	mov    esi,ebx
c0026c4b:	d3 ee                	shr    esi,cl
c0026c4d:	b8 20 00 00 00       	mov    eax,0x20
c0026c52:	29 c8                	sub    eax,ecx
c0026c54:	89 c1                	mov    ecx,eax
c0026c56:	d3 e3                	shl    ebx,cl
c0026c58:	31 c0                	xor    eax,eax
c0026c5a:	85 db                	test   ebx,ebx
c0026c5c:	0f 95 c0             	setne  al
c0026c5f:	09 f0                	or     eax,esi
c0026c61:	01 d0                	add    eax,edx
c0026c63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c66:	e9 b6 00 00 00       	jmp    c0026d21 <__addsf3+0x14b>
c0026c6b:	74 5c                	je     c0026cc9 <__addsf3+0xf3>
c0026c6d:	89 f1                	mov    ecx,esi
c0026c6f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c75:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c79:	75 14                	jne    c0026c8f <__addsf3+0xb9>
c0026c7b:	85 d2                	test   edx,edx
c0026c7d:	0f 84 4c 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c83:	49                   	dec    ecx
c0026c84:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c87:	0f 84 94 00 00 00    	je     c0026d21 <__addsf3+0x14b>
c0026c8d:	eb 12                	jmp    c0026ca1 <__addsf3+0xcb>
c0026c8f:	89 f0                	mov    eax,esi
c0026c91:	f7 d0                	not    eax
c0026c93:	84 c0                	test   al,al
c0026c95:	0f 84 34 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ca4:	83 f9 1f             	cmp    ecx,0x1f
c0026ca7:	0f 8f 22 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026cad:	89 d7                	mov    edi,edx
c0026caf:	d3 ef                	shr    edi,cl
c0026cb1:	b8 20 00 00 00       	mov    eax,0x20
c0026cb6:	29 c8                	sub    eax,ecx
c0026cb8:	89 c1                	mov    ecx,eax
c0026cba:	d3 e2                	shl    edx,cl
c0026cbc:	31 c0                	xor    eax,eax
c0026cbe:	85 d2                	test   edx,edx
c0026cc0:	0f 95 c0             	setne  al
c0026cc3:	09 f8                	or     eax,edi
c0026cc5:	01 d8                	add    eax,ebx
c0026cc7:	eb 58                	jmp    c0026d21 <__addsf3+0x14b>
c0026cc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ccc:	8d 70 01             	lea    esi,[eax+0x1]
c0026ccf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cd5:	75 32                	jne    c0026d09 <__addsf3+0x133>
c0026cd7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cdb:	75 1f                	jne    c0026cfc <__addsf3+0x126>
c0026cdd:	85 d2                	test   edx,edx
c0026cdf:	0f 84 e0 01 00 00    	je     c0026ec5 <__addsf3+0x2ef>
c0026ce5:	85 db                	test   ebx,ebx
c0026ce7:	0f 84 e2 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026ced:	89 d0                	mov    eax,edx
c0026cef:	01 d8                	add    eax,ebx
c0026cf1:	0f 89 a9 01 00 00    	jns    c0026ea0 <__addsf3+0x2ca>
c0026cf7:	e9 9d 01 00 00       	jmp    c0026e99 <__addsf3+0x2c3>
c0026cfc:	85 d2                	test   edx,edx
c0026cfe:	0f 85 cb 01 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026d04:	e9 bc 01 00 00       	jmp    c0026ec5 <__addsf3+0x2ef>
c0026d09:	31 c0                	xor    eax,eax
c0026d0b:	89 f1                	mov    ecx,esi
c0026d0d:	f7 d1                	not    ecx
c0026d0f:	84 c9                	test   cl,cl
c0026d11:	0f 84 90 01 00 00    	je     c0026ea7 <__addsf3+0x2d1>
c0026d17:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d1a:	d1 e8                	shr    eax,1
c0026d1c:	e9 86 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d21:	85 c0                	test   eax,eax
c0026d23:	0f 89 7e 01 00 00    	jns    c0026ea7 <__addsf3+0x2d1>
c0026d29:	46                   	inc    esi
c0026d2a:	89 f2                	mov    edx,esi
c0026d2c:	f7 d2                	not    edx
c0026d2e:	84 d2                	test   dl,dl
c0026d30:	0f 84 6f 01 00 00    	je     c0026ea5 <__addsf3+0x2cf>
c0026d36:	89 c2                	mov    edx,eax
c0026d38:	83 e2 01             	and    edx,0x1
c0026d3b:	d1 e8                	shr    eax,1
c0026d3d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d42:	09 d0                	or     eax,edx
c0026d44:	e9 5e 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d49:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d50:	89 f0                	mov    eax,esi
c0026d52:	0f b6 c0             	movzx  eax,al
c0026d55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d58:	29 c1                	sub    ecx,eax
c0026d5a:	85 c9                	test   ecx,ecx
c0026d5c:	7e 55                	jle    c0026db3 <__addsf3+0x1dd>
c0026d5e:	85 c0                	test   eax,eax
c0026d60:	75 11                	jne    c0026d73 <__addsf3+0x19d>
c0026d62:	85 db                	test   ebx,ebx
c0026d64:	0f 84 65 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d6a:	49                   	dec    ecx
c0026d6b:	75 19                	jne    c0026d86 <__addsf3+0x1b0>
c0026d6d:	89 d0                	mov    eax,edx
c0026d6f:	29 d8                	sub    eax,ebx
c0026d71:	eb 38                	jmp    c0026dab <__addsf3+0x1d5>
c0026d73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d76:	f7 d0                	not    eax
c0026d78:	84 c0                	test   al,al
c0026d7a:	0f 84 4f 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d86:	83 f9 1f             	cmp    ecx,0x1f
c0026d89:	0f 8f 40 01 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026d8f:	89 de                	mov    esi,ebx
c0026d91:	d3 ee                	shr    esi,cl
c0026d93:	b8 20 00 00 00       	mov    eax,0x20
c0026d98:	29 c8                	sub    eax,ecx
c0026d9a:	89 c1                	mov    ecx,eax
c0026d9c:	d3 e3                	shl    ebx,cl
c0026d9e:	31 c0                	xor    eax,eax
c0026da0:	85 db                	test   ebx,ebx
c0026da2:	0f 95 c0             	setne  al
c0026da5:	09 f0                	or     eax,esi
c0026da7:	29 c2                	sub    edx,eax
c0026da9:	89 d0                	mov    eax,edx
c0026dab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dae:	e9 af 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026db3:	74 5c                	je     c0026e11 <__addsf3+0x23b>
c0026db5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026db8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dbb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dbf:	75 14                	jne    c0026dd5 <__addsf3+0x1ff>
c0026dc1:	85 d2                	test   edx,edx
c0026dc3:	0f 84 06 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026dc9:	48                   	dec    eax
c0026dca:	75 1b                	jne    c0026de7 <__addsf3+0x211>
c0026dcc:	89 d8                	mov    eax,ebx
c0026dce:	29 d0                	sub    eax,edx
c0026dd0:	e9 8d 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026dd5:	89 f1                	mov    ecx,esi
c0026dd7:	f7 d1                	not    ecx
c0026dd9:	84 c9                	test   cl,cl
c0026ddb:	0f 84 ee 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026de1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dea:	83 f8 1f             	cmp    eax,0x1f
c0026ded:	0f 8f dc 00 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026df3:	89 d7                	mov    edi,edx
c0026df5:	88 c1                	mov    cl,al
c0026df7:	d3 ef                	shr    edi,cl
c0026df9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dfe:	29 c1                	sub    ecx,eax
c0026e00:	d3 e2                	shl    edx,cl
c0026e02:	31 c0                	xor    eax,eax
c0026e04:	85 d2                	test   edx,edx
c0026e06:	0f 95 c0             	setne  al
c0026e09:	09 f8                	or     eax,edi
c0026e0b:	29 c3                	sub    ebx,eax
c0026e0d:	89 d8                	mov    eax,ebx
c0026e0f:	eb 51                	jmp    c0026e62 <__addsf3+0x28c>
c0026e11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e14:	40                   	inc    eax
c0026e15:	a8 fe                	test   al,0xfe
c0026e17:	75 3d                	jne    c0026e56 <__addsf3+0x280>
c0026e19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e1d:	0f 85 a7 00 00 00    	jne    c0026eca <__addsf3+0x2f4>
c0026e23:	85 d2                	test   edx,edx
c0026e25:	75 12                	jne    c0026e39 <__addsf3+0x263>
c0026e27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2a:	85 db                	test   ebx,ebx
c0026e2c:	0f 85 9d 00 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026e32:	31 ff                	xor    edi,edi
c0026e34:	e9 96 00 00 00       	jmp    c0026ecf <__addsf3+0x2f9>
c0026e39:	85 db                	test   ebx,ebx
c0026e3b:	0f 84 8e 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026e41:	89 d0                	mov    eax,edx
c0026e43:	29 d8                	sub    eax,ebx
c0026e45:	79 06                	jns    c0026e4d <__addsf3+0x277>
c0026e47:	89 d8                	mov    eax,ebx
c0026e49:	29 d0                	sub    eax,edx
c0026e4b:	eb 5a                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e4d:	bf 00 00 00 00       	mov    edi,0x0
c0026e52:	74 7b                	je     c0026ecf <__addsf3+0x2f9>
c0026e54:	eb 4a                	jmp    c0026ea0 <__addsf3+0x2ca>
c0026e56:	89 d0                	mov    eax,edx
c0026e58:	29 d8                	sub    eax,ebx
c0026e5a:	79 12                	jns    c0026e6e <__addsf3+0x298>
c0026e5c:	89 d8                	mov    eax,ebx
c0026e5e:	29 d0                	sub    eax,edx
c0026e60:	eb 09                	jmp    c0026e6b <__addsf3+0x295>
c0026e62:	85 c0                	test   eax,eax
c0026e64:	79 41                	jns    c0026ea7 <__addsf3+0x2d1>
c0026e66:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e6b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e6e:	31 f6                	xor    esi,esi
c0026e70:	85 c0                	test   eax,eax
c0026e72:	74 33                	je     c0026ea7 <__addsf3+0x2d1>
c0026e74:	0f bd c8             	bsr    ecx,eax
c0026e77:	83 f1 1f             	xor    ecx,0x1f
c0026e7a:	d3 e0                	shl    eax,cl
c0026e7c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e80:	39 ca                	cmp    edx,ecx
c0026e82:	7f 10                	jg     c0026e94 <__addsf3+0x2be>
c0026e84:	29 d1                	sub    ecx,edx
c0026e86:	41                   	inc    ecx
c0026e87:	d3 e8                	shr    eax,cl
c0026e89:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e92:	eb 13                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e94:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e97:	29 ce                	sub    esi,ecx
c0026e99:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e9e:	eb 07                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ea3:	eb 02                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea5:	31 c0                	xor    eax,eax
c0026ea7:	89 c2                	mov    edx,eax
c0026ea9:	c1 ea 08             	shr    edx,0x8
c0026eac:	a8 7f                	test   al,0x7f
c0026eae:	0f 95 c1             	setne  cl
c0026eb1:	09 d1                	or     ecx,edx
c0026eb3:	83 e1 01             	and    ecx,0x1
c0026eb6:	c1 e8 07             	shr    eax,0x7
c0026eb9:	21 c8                	and    eax,ecx
c0026ebb:	c1 e6 17             	shl    esi,0x17
c0026ebe:	09 d6                	or     esi,edx
c0026ec0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ec3:	eb 0a                	jmp    c0026ecf <__addsf3+0x2f9>
c0026ec5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ec8:	eb 05                	jmp    c0026ecf <__addsf3+0x2f9>
c0026eca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ecf:	89 f8                	mov    eax,edi
c0026ed1:	5a                   	pop    edx
c0026ed2:	59                   	pop    ecx
c0026ed3:	5b                   	pop    ebx
c0026ed4:	5e                   	pop    esi
c0026ed5:	5f                   	pop    edi
c0026ed6:	5d                   	pop    ebp
c0026ed7:	c3                   	ret    

c0026ed8 <__subsf3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	89 e5                	mov    ebp,esp
c0026edb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ede:	05 00 00 00 80       	add    eax,0x80000000
c0026ee3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ee6:	5d                   	pop    ebp
c0026ee7:	e9 ea fc ff ff       	jmp    c0026bd6 <__addsf3>

c0026eec <__negsf2>:
c0026eec:	55                   	push   ebp
c0026eed:	89 e5                	mov    ebp,esp
c0026eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ef2:	05 00 00 00 80       	add    eax,0x80000000
c0026ef7:	5d                   	pop    ebp
c0026ef8:	c3                   	ret    

c0026ef9 <__mulsf3>:
c0026ef9:	55                   	push   ebp
c0026efa:	89 e5                	mov    ebp,esp
c0026efc:	57                   	push   edi
c0026efd:	56                   	push   esi
c0026efe:	53                   	push   ebx
c0026eff:	83 ec 1c             	sub    esp,0x1c
c0026f02:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f05:	89 f0                	mov    eax,esi
c0026f07:	89 f1                	mov    ecx,esi
c0026f09:	c1 f9 17             	sar    ecx,0x17
c0026f0c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f0f:	c1 e0 08             	shl    eax,0x8
c0026f12:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f17:	89 c1                	mov    ecx,eax
c0026f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f1f:	89 c7                	mov    edi,eax
c0026f21:	c1 ff 17             	sar    edi,0x17
c0026f24:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f28:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f2b:	89 f8                	mov    eax,edi
c0026f2d:	0f b6 c0             	movzx  eax,al
c0026f30:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f33:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f37:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f3a:	42                   	inc    edx
c0026f3b:	80 e2 fe             	and    dl,0xfe
c0026f3e:	75 7b                	jne    c0026fbb <__mulsf3+0xc2>
c0026f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f44:	74 54                	je     c0026f9a <__mulsf3+0xa1>
c0026f46:	85 c9                	test   ecx,ecx
c0026f48:	0f 85 64 01 00 00    	jne    c00270b2 <__mulsf3+0x1b9>
c0026f4e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f51:	80 e2 fe             	and    dl,0xfe
c0026f54:	75 1f                	jne    c0026f75 <__mulsf3+0x7c>
c0026f56:	85 c0                	test   eax,eax
c0026f58:	b8 00 00 00 00       	mov    eax,0x0
c0026f5d:	74 29                	je     c0026f88 <__mulsf3+0x8f>
c0026f5f:	53                   	push   ebx
c0026f60:	53                   	push   ebx
c0026f61:	50                   	push   eax
c0026f62:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f65:	e8 96 05 00 00       	call   c0027500 <__nesf2>
c0026f6a:	83 c4 10             	add    esp,0x10
c0026f6d:	85 c0                	test   eax,eax
c0026f6f:	0f 85 3a 01 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026f75:	85 ff                	test   edi,edi
c0026f77:	0f 89 35 01 00 00    	jns    c00270b2 <__mulsf3+0x1b9>
c0026f7d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f83:	e9 2a 01 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026f88:	51                   	push   ecx
c0026f89:	51                   	push   ecx
c0026f8a:	50                   	push   eax
c0026f8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f8e:	e8 6d 05 00 00       	call   c0027500 <__nesf2>
c0026f93:	83 c4 10             	add    esp,0x10
c0026f96:	85 c0                	test   eax,eax
c0026f98:	eb 15                	jmp    c0026faf <__mulsf3+0xb6>
c0026f9a:	85 c9                	test   ecx,ecx
c0026f9c:	74 0b                	je     c0026fa9 <__mulsf3+0xb0>
c0026f9e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fa1:	01 c9                	add    ecx,ecx
c0026fa3:	78 16                	js     c0026fbb <__mulsf3+0xc2>
c0026fa5:	89 d3                	mov    ebx,edx
c0026fa7:	eb f5                	jmp    c0026f9e <__mulsf3+0xa5>
c0026fa9:	89 f8                	mov    eax,edi
c0026fab:	f7 d0                	not    eax
c0026fad:	84 c0                	test   al,al
c0026faf:	75 c4                	jne    c0026f75 <__mulsf3+0x7c>
c0026fb1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fb6:	e9 f7 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026fbb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fbe:	c1 e6 08             	shl    esi,0x8
c0026fc1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fc7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fca:	80 e2 fe             	and    dl,0xfe
c0026fcd:	75 63                	jne    c0027032 <__mulsf3+0x139>
c0026fcf:	85 c0                	test   eax,eax
c0026fd1:	74 2f                	je     c0027002 <__mulsf3+0x109>
c0026fd3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fd7:	0f 89 d2 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0026fdd:	52                   	push   edx
c0026fde:	52                   	push   edx
c0026fdf:	6a 00                	push   0x0
c0026fe1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe4:	e8 dc 04 00 00       	call   c00274c5 <__eqsf2>
c0026fe9:	83 c4 10             	add    esp,0x10
c0026fec:	85 c0                	test   eax,eax
c0026fee:	0f 85 bb 00 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ff7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ffd:	e9 b0 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0027002:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027005:	50                   	push   eax
c0027006:	50                   	push   eax
c0027007:	6a 00                	push   0x0
c0027009:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002700c:	e8 b4 04 00 00       	call   c00274c5 <__eqsf2>
c0027011:	83 c4 10             	add    esp,0x10
c0027014:	85 c0                	test   eax,eax
c0027016:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027019:	75 0c                	jne    c0027027 <__mulsf3+0x12e>
c002701b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002701f:	0f 89 8a 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0027025:	eb cd                	jmp    c0026ff4 <__mulsf3+0xfb>
c0027027:	8d 43 ff             	lea    eax,[ebx-0x1]
c002702a:	01 f6                	add    esi,esi
c002702c:	78 04                	js     c0027032 <__mulsf3+0x139>
c002702e:	89 c3                	mov    ebx,eax
c0027030:	eb f5                	jmp    c0027027 <__mulsf3+0x12e>
c0027032:	89 c8                	mov    eax,ecx
c0027034:	0d 00 00 00 80       	or     eax,0x80000000
c0027039:	81 ce 00 00 00 80    	or     esi,0x80000000
c002703f:	f7 e6                	mul    esi
c0027041:	85 c0                	test   eax,eax
c0027043:	0f 95 c0             	setne  al
c0027046:	0f b6 c0             	movzx  eax,al
c0027049:	09 c2                	or     edx,eax
c002704b:	78 03                	js     c0027050 <__mulsf3+0x157>
c002704d:	01 d2                	add    edx,edx
c002704f:	4b                   	dec    ebx
c0027050:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027056:	7f 22                	jg     c002707a <__mulsf3+0x181>
c0027058:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002705e:	85 db                	test   ebx,ebx
c0027060:	7f 23                	jg     c0027085 <__mulsf3+0x18c>
c0027062:	83 fb e9             	cmp    ebx,0xffffffe9
c0027065:	7c 1a                	jl     c0027081 <__mulsf3+0x188>
c0027067:	81 ca 00 00 00 80    	or     edx,0x80000000
c002706d:	b9 01 00 00 00       	mov    ecx,0x1
c0027072:	29 d9                	sub    ecx,ebx
c0027074:	d3 ea                	shr    edx,cl
c0027076:	31 db                	xor    ebx,ebx
c0027078:	eb 0b                	jmp    c0027085 <__mulsf3+0x18c>
c002707a:	bb ff 00 00 00       	mov    ebx,0xff
c002707f:	eb 02                	jmp    c0027083 <__mulsf3+0x18a>
c0027081:	31 db                	xor    ebx,ebx
c0027083:	31 d2                	xor    edx,edx
c0027085:	89 d0                	mov    eax,edx
c0027087:	c1 e8 08             	shr    eax,0x8
c002708a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002708d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027093:	09 fb                	or     ebx,edi
c0027095:	c1 e3 17             	shl    ebx,0x17
c0027098:	09 c3                	or     ebx,eax
c002709a:	f6 c2 7f             	test   dl,0x7f
c002709d:	0f 95 c1             	setne  cl
c00270a0:	09 c8                	or     eax,ecx
c00270a2:	83 e0 01             	and    eax,0x1
c00270a5:	c1 ea 07             	shr    edx,0x7
c00270a8:	21 c2                	and    edx,eax
c00270aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270ad:	eb 03                	jmp    c00270b2 <__mulsf3+0x1b9>
c00270af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270b2:	89 f0                	mov    eax,esi
c00270b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270b7:	5b                   	pop    ebx
c00270b8:	5e                   	pop    esi
c00270b9:	5f                   	pop    edi
c00270ba:	5d                   	pop    ebp
c00270bb:	c3                   	ret    

c00270bc <__divsf3>:
c00270bc:	55                   	push   ebp
c00270bd:	89 e5                	mov    ebp,esp
c00270bf:	57                   	push   edi
c00270c0:	56                   	push   esi
c00270c1:	53                   	push   ebx
c00270c2:	83 ec 1c             	sub    esp,0x1c
c00270c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270c8:	89 d8                	mov    eax,ebx
c00270ca:	89 d9                	mov    ecx,ebx
c00270cc:	c1 f9 17             	sar    ecx,0x17
c00270cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270d2:	c1 e0 08             	shl    eax,0x8
c00270d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270da:	89 c1                	mov    ecx,eax
c00270dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270e2:	89 c7                	mov    edi,eax
c00270e4:	c1 ff 17             	sar    edi,0x17
c00270e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ee:	89 f8                	mov    eax,edi
c00270f0:	0f b6 c0             	movzx  eax,al
c00270f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270f6:	29 c6                	sub    esi,eax
c00270f8:	83 c6 7f             	add    esi,0x7f
c00270fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270fe:	42                   	inc    edx
c00270ff:	80 e2 fe             	and    dl,0xfe
c0027102:	0f 85 9c 00 00 00    	jne    c00271a4 <__divsf3+0xe8>
c0027108:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002710c:	74 33                	je     c0027141 <__divsf3+0x85>
c002710e:	85 c9                	test   ecx,ecx
c0027110:	0f 85 c7 01 00 00    	jne    c00272dd <__divsf3+0x221>
c0027116:	8d 57 01             	lea    edx,[edi+0x1]
c0027119:	80 e2 fe             	and    dl,0xfe
c002711c:	75 2f                	jne    c002714d <__divsf3+0x91>
c002711e:	85 c0                	test   eax,eax
c0027120:	74 2b                	je     c002714d <__divsf3+0x91>
c0027122:	51                   	push   ecx
c0027123:	51                   	push   ecx
c0027124:	6a 00                	push   0x0
c0027126:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027129:	e8 d2 03 00 00       	call   c0027500 <__nesf2>
c002712e:	83 c4 10             	add    esp,0x10
c0027131:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027134:	85 c0                	test   eax,eax
c0027136:	0f 85 a1 01 00 00    	jne    c00272dd <__divsf3+0x221>
c002713c:	e9 92 01 00 00       	jmp    c00272d3 <__divsf3+0x217>
c0027141:	85 c9                	test   ecx,ecx
c0027143:	75 1b                	jne    c0027160 <__divsf3+0xa4>
c0027145:	8d 57 01             	lea    edx,[edi+0x1]
c0027148:	80 e2 fe             	and    dl,0xfe
c002714b:	74 1e                	je     c002716b <__divsf3+0xaf>
c002714d:	85 ff                	test   edi,edi
c002714f:	0f 89 88 01 00 00    	jns    c00272dd <__divsf3+0x221>
c0027155:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002715b:	e9 7d 01 00 00       	jmp    c00272dd <__divsf3+0x221>
c0027160:	8d 56 ff             	lea    edx,[esi-0x1]
c0027163:	01 c9                	add    ecx,ecx
c0027165:	78 3d                	js     c00271a4 <__divsf3+0xe8>
c0027167:	89 d6                	mov    esi,edx
c0027169:	eb f5                	jmp    c0027160 <__divsf3+0xa4>
c002716b:	85 c0                	test   eax,eax
c002716d:	b8 00 00 00 00       	mov    eax,0x0
c0027172:	74 18                	je     c002718c <__divsf3+0xd0>
c0027174:	52                   	push   edx
c0027175:	52                   	push   edx
c0027176:	50                   	push   eax
c0027177:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002717a:	e8 81 03 00 00       	call   c0027500 <__nesf2>
c002717f:	83 c4 10             	add    esp,0x10
c0027182:	85 c0                	test   eax,eax
c0027184:	0f 85 50 01 00 00    	jne    c00272da <__divsf3+0x21e>
c002718a:	eb c1                	jmp    c002714d <__divsf3+0x91>
c002718c:	56                   	push   esi
c002718d:	56                   	push   esi
c002718e:	50                   	push   eax
c002718f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027192:	e8 69 03 00 00       	call   c0027500 <__nesf2>
c0027197:	83 c4 10             	add    esp,0x10
c002719a:	85 c0                	test   eax,eax
c002719c:	0f 84 31 01 00 00    	je     c00272d3 <__divsf3+0x217>
c00271a2:	eb a9                	jmp    c002714d <__divsf3+0x91>
c00271a4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271a7:	c1 e3 08             	shl    ebx,0x8
c00271aa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271b0:	8d 57 01             	lea    edx,[edi+0x1]
c00271b3:	80 e2 fe             	and    dl,0xfe
c00271b6:	75 71                	jne    c0027229 <__divsf3+0x16d>
c00271b8:	85 c0                	test   eax,eax
c00271ba:	ba 00 00 00 00       	mov    edx,0x0
c00271bf:	74 2f                	je     c00271f0 <__divsf3+0x134>
c00271c1:	51                   	push   ecx
c00271c2:	51                   	push   ecx
c00271c3:	52                   	push   edx
c00271c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c7:	e8 f9 02 00 00       	call   c00274c5 <__eqsf2>
c00271cc:	83 c4 10             	add    esp,0x10
c00271cf:	85 c0                	test   eax,eax
c00271d1:	0f 85 03 01 00 00    	jne    c00272da <__divsf3+0x21e>
c00271d7:	31 d2                	xor    edx,edx
c00271d9:	89 d3                	mov    ebx,edx
c00271db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271de:	31 f8                	xor    eax,edi
c00271e0:	0f 89 f7 00 00 00    	jns    c00272dd <__divsf3+0x221>
c00271e6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271eb:	e9 ed 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c00271f0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271f3:	50                   	push   eax
c00271f4:	50                   	push   eax
c00271f5:	52                   	push   edx
c00271f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f9:	e8 c7 02 00 00       	call   c00274c5 <__eqsf2>
c00271fe:	83 c4 10             	add    esp,0x10
c0027201:	85 c0                	test   eax,eax
c0027203:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027206:	75 16                	jne    c002721e <__divsf3+0x162>
c0027208:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002720b:	31 fb                	xor    ebx,edi
c002720d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027213:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027219:	e9 bf 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c002721e:	8d 46 01             	lea    eax,[esi+0x1]
c0027221:	01 db                	add    ebx,ebx
c0027223:	78 04                	js     c0027229 <__divsf3+0x16d>
c0027225:	89 c6                	mov    esi,eax
c0027227:	eb f5                	jmp    c002721e <__divsf3+0x162>
c0027229:	89 c8                	mov    eax,ecx
c002722b:	0d 00 00 00 80       	or     eax,0x80000000
c0027230:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027236:	31 d2                	xor    edx,edx
c0027238:	39 d8                	cmp    eax,ebx
c002723a:	72 07                	jb     c0027243 <__divsf3+0x187>
c002723c:	29 d8                	sub    eax,ebx
c002723e:	ba 01 00 00 00       	mov    edx,0x1
c0027243:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002724a:	01 d2                	add    edx,edx
c002724c:	89 c1                	mov    ecx,eax
c002724e:	01 c0                	add    eax,eax
c0027250:	85 c9                	test   ecx,ecx
c0027252:	78 04                	js     c0027258 <__divsf3+0x19c>
c0027254:	39 c3                	cmp    ebx,eax
c0027256:	77 05                	ja     c002725d <__divsf3+0x1a1>
c0027258:	29 d8                	sub    eax,ebx
c002725a:	83 ca 01             	or     edx,0x1
c002725d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027260:	75 e8                	jne    c002724a <__divsf3+0x18e>
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 95 c0             	setne  al
c0027267:	0f b6 c0             	movzx  eax,al
c002726a:	c1 e2 06             	shl    edx,0x6
c002726d:	09 c2                	or     edx,eax
c002726f:	78 03                	js     c0027274 <__divsf3+0x1b8>
c0027271:	01 d2                	add    edx,edx
c0027273:	4e                   	dec    esi
c0027274:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002727a:	7f 22                	jg     c002729e <__divsf3+0x1e2>
c002727c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027282:	85 f6                	test   esi,esi
c0027284:	7f 23                	jg     c00272a9 <__divsf3+0x1ed>
c0027286:	83 fe e9             	cmp    esi,0xffffffe9
c0027289:	7c 1a                	jl     c00272a5 <__divsf3+0x1e9>
c002728b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027291:	b9 01 00 00 00       	mov    ecx,0x1
c0027296:	29 f1                	sub    ecx,esi
c0027298:	d3 ea                	shr    edx,cl
c002729a:	31 f6                	xor    esi,esi
c002729c:	eb 0b                	jmp    c00272a9 <__divsf3+0x1ed>
c002729e:	be ff 00 00 00       	mov    esi,0xff
c00272a3:	eb 02                	jmp    c00272a7 <__divsf3+0x1eb>
c00272a5:	31 f6                	xor    esi,esi
c00272a7:	31 d2                	xor    edx,edx
c00272a9:	89 d0                	mov    eax,edx
c00272ab:	c1 e8 08             	shr    eax,0x8
c00272ae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272b1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272b7:	09 fe                	or     esi,edi
c00272b9:	c1 e6 17             	shl    esi,0x17
c00272bc:	09 c6                	or     esi,eax
c00272be:	f6 c2 7f             	test   dl,0x7f
c00272c1:	0f 95 c1             	setne  cl
c00272c4:	09 c8                	or     eax,ecx
c00272c6:	83 e0 01             	and    eax,0x1
c00272c9:	c1 ea 07             	shr    edx,0x7
c00272cc:	21 c2                	and    edx,eax
c00272ce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272d1:	eb 0a                	jmp    c00272dd <__divsf3+0x221>
c00272d3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272d8:	eb 03                	jmp    c00272dd <__divsf3+0x221>
c00272da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272dd:	89 d8                	mov    eax,ebx
c00272df:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272e2:	5b                   	pop    ebx
c00272e3:	5e                   	pop    esi
c00272e4:	5f                   	pop    edi
c00272e5:	5d                   	pop    ebp
c00272e6:	c3                   	ret    

c00272e7 <__floatsisf>:
c00272e7:	55                   	push   ebp
c00272e8:	89 e5                	mov    ebp,esp
c00272ea:	53                   	push   ebx
c00272eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ee:	85 d2                	test   edx,edx
c00272f0:	7e 2b                	jle    c002731d <__floatsisf+0x36>
c00272f2:	0f bd ca             	bsr    ecx,edx
c00272f5:	83 f1 1f             	xor    ecx,0x1f
c00272f8:	d3 e2                	shl    edx,cl
c00272fa:	89 d0                	mov    eax,edx
c00272fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027301:	89 c3                	mov    ebx,eax
c0027303:	c1 eb 08             	shr    ebx,0x8
c0027306:	80 e2 7f             	and    dl,0x7f
c0027309:	0f 95 c2             	setne  dl
c002730c:	09 da                	or     edx,ebx
c002730e:	83 e2 01             	and    edx,0x1
c0027311:	c1 e8 07             	shr    eax,0x7
c0027314:	21 c2                	and    edx,eax
c0027316:	b8 9e 00 00 00       	mov    eax,0x9e
c002731b:	eb 32                	jmp    c002734f <__floatsisf+0x68>
c002731d:	b8 00 00 00 00       	mov    eax,0x0
c0027322:	74 34                	je     c0027358 <__floatsisf+0x71>
c0027324:	f7 da                	neg    edx
c0027326:	0f bd ca             	bsr    ecx,edx
c0027329:	83 f1 1f             	xor    ecx,0x1f
c002732c:	d3 e2                	shl    edx,cl
c002732e:	89 d0                	mov    eax,edx
c0027330:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027335:	89 c3                	mov    ebx,eax
c0027337:	c1 eb 08             	shr    ebx,0x8
c002733a:	80 e2 7f             	and    dl,0x7f
c002733d:	0f 95 c2             	setne  dl
c0027340:	09 da                	or     edx,ebx
c0027342:	83 e2 01             	and    edx,0x1
c0027345:	c1 e8 07             	shr    eax,0x7
c0027348:	21 c2                	and    edx,eax
c002734a:	b8 9e 01 00 00       	mov    eax,0x19e
c002734f:	29 c8                	sub    eax,ecx
c0027351:	c1 e0 17             	shl    eax,0x17
c0027354:	09 d8                	or     eax,ebx
c0027356:	01 d0                	add    eax,edx
c0027358:	5b                   	pop    ebx
c0027359:	5d                   	pop    ebp
c002735a:	c3                   	ret    

c002735b <__floatunsisf>:
c002735b:	55                   	push   ebp
c002735c:	89 e5                	mov    ebp,esp
c002735e:	53                   	push   ebx
c002735f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027362:	31 c0                	xor    eax,eax
c0027364:	85 d2                	test   edx,edx
c0027366:	74 32                	je     c002739a <__floatunsisf+0x3f>
c0027368:	0f bd ca             	bsr    ecx,edx
c002736b:	83 f1 1f             	xor    ecx,0x1f
c002736e:	d3 e2                	shl    edx,cl
c0027370:	89 d0                	mov    eax,edx
c0027372:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027377:	89 c3                	mov    ebx,eax
c0027379:	c1 eb 08             	shr    ebx,0x8
c002737c:	80 e2 7f             	and    dl,0x7f
c002737f:	0f 95 c2             	setne  dl
c0027382:	09 da                	or     edx,ebx
c0027384:	83 e2 01             	and    edx,0x1
c0027387:	c1 e8 07             	shr    eax,0x7
c002738a:	21 c2                	and    edx,eax
c002738c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027391:	29 c8                	sub    eax,ecx
c0027393:	c1 e0 17             	shl    eax,0x17
c0027396:	09 d8                	or     eax,ebx
c0027398:	01 d0                	add    eax,edx
c002739a:	5b                   	pop    ebx
c002739b:	5d                   	pop    ebp
c002739c:	c3                   	ret    

c002739d <__fixsfsi>:
c002739d:	55                   	push   ebp
c002739e:	89 e5                	mov    ebp,esp
c00273a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a3:	89 d1                	mov    ecx,edx
c00273a5:	c1 e1 08             	shl    ecx,0x8
c00273a8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ae:	c1 fa 17             	sar    edx,0x17
c00273b1:	78 1c                	js     c00273cf <__fixsfsi+0x32>
c00273b3:	83 ea 7f             	sub    edx,0x7f
c00273b6:	31 c0                	xor    eax,eax
c00273b8:	83 fa 1e             	cmp    edx,0x1e
c00273bb:	77 40                	ja     c00273fd <__fixsfsi+0x60>
c00273bd:	89 c8                	mov    eax,ecx
c00273bf:	0d 00 00 00 80       	or     eax,0x80000000
c00273c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273c9:	29 d1                	sub    ecx,edx
c00273cb:	d3 e8                	shr    eax,cl
c00273cd:	eb 2e                	jmp    c00273fd <__fixsfsi+0x60>
c00273cf:	31 c0                	xor    eax,eax
c00273d1:	81 c2 81 00 00 00    	add    edx,0x81
c00273d7:	78 24                	js     c00273fd <__fixsfsi+0x60>
c00273d9:	83 fa 1e             	cmp    edx,0x1e
c00273dc:	7e 09                	jle    c00273e7 <__fixsfsi+0x4a>
c00273de:	83 fa 1f             	cmp    edx,0x1f
c00273e1:	75 18                	jne    c00273fb <__fixsfsi+0x5e>
c00273e3:	85 c9                	test   ecx,ecx
c00273e5:	75 14                	jne    c00273fb <__fixsfsi+0x5e>
c00273e7:	89 c8                	mov    eax,ecx
c00273e9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273f3:	29 d1                	sub    ecx,edx
c00273f5:	d3 e8                	shr    eax,cl
c00273f7:	f7 d8                	neg    eax
c00273f9:	eb 02                	jmp    c00273fd <__fixsfsi+0x60>
c00273fb:	31 c0                	xor    eax,eax
c00273fd:	5d                   	pop    ebp
c00273fe:	c3                   	ret    

c00273ff <__fixunssfsi>:
c00273ff:	55                   	push   ebp
c0027400:	89 e5                	mov    ebp,esp
c0027402:	53                   	push   ebx
c0027403:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027406:	89 d3                	mov    ebx,edx
c0027408:	c1 fb 17             	sar    ebx,0x17
c002740b:	83 eb 7f             	sub    ebx,0x7f
c002740e:	31 c0                	xor    eax,eax
c0027410:	83 fb 1f             	cmp    ebx,0x1f
c0027413:	77 18                	ja     c002742d <__fixunssfsi+0x2e>
c0027415:	89 d0                	mov    eax,edx
c0027417:	c1 e0 08             	shl    eax,0x8
c002741a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002741f:	0d 00 00 00 80       	or     eax,0x80000000
c0027424:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027429:	29 d9                	sub    ecx,ebx
c002742b:	d3 e8                	shr    eax,cl
c002742d:	5b                   	pop    ebx
c002742e:	5d                   	pop    ebp
c002742f:	c3                   	ret    

c0027430 <__cmpsf2>:
c0027430:	55                   	push   ebp
c0027431:	89 e5                	mov    ebp,esp
c0027433:	57                   	push   edi
c0027434:	56                   	push   esi
c0027435:	53                   	push   ebx
c0027436:	83 ec 24             	sub    esp,0x24
c0027439:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002743c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002743f:	e8 4f 10 00 00       	call   c0028493 <__truncdfsf2>
c0027444:	5a                   	pop    edx
c0027445:	59                   	pop    ecx
c0027446:	89 c3                	mov    ebx,eax
c0027448:	c1 e8 17             	shr    eax,0x17
c002744b:	0f b6 f0             	movzx  esi,al
c002744e:	89 d8                	mov    eax,ebx
c0027450:	c1 e8 1f             	shr    eax,0x1f
c0027453:	31 c6                	xor    esi,eax
c0027455:	c1 e3 08             	shl    ebx,0x8
c0027458:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002745b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002745e:	e8 30 10 00 00       	call   c0028493 <__truncdfsf2>
c0027463:	83 c4 10             	add    esp,0x10
c0027466:	89 c1                	mov    ecx,eax
c0027468:	c1 e9 17             	shr    ecx,0x17
c002746b:	0f b6 c9             	movzx  ecx,cl
c002746e:	89 c7                	mov    edi,eax
c0027470:	c1 ef 1f             	shr    edi,0x1f
c0027473:	89 ca                	mov    edx,ecx
c0027475:	31 fa                	xor    edx,edi
c0027477:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002747a:	c1 e0 08             	shl    eax,0x8
c002747d:	89 c2                	mov    edx,eax
c002747f:	89 d8                	mov    eax,ebx
c0027481:	09 d0                	or     eax,edx
c0027483:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027488:	09 f0                	or     eax,esi
c002748a:	75 08                	jne    c0027494 <__cmpsf2+0x64>
c002748c:	31 c0                	xor    eax,eax
c002748e:	39 f9                	cmp    ecx,edi
c0027490:	75 0c                	jne    c002749e <__cmpsf2+0x6e>
c0027492:	eb 29                	jmp    c00274bd <__cmpsf2+0x8d>
c0027494:	b8 01 00 00 00       	mov    eax,0x1
c0027499:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002749c:	7f 1f                	jg     c00274bd <__cmpsf2+0x8d>
c002749e:	83 c8 ff             	or     eax,0xffffffff
c00274a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274a4:	7c 17                	jl     c00274bd <__cmpsf2+0x8d>
c00274a6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274b2:	b8 01 00 00 00       	mov    eax,0x1
c00274b7:	39 d3                	cmp    ebx,edx
c00274b9:	77 02                	ja     c00274bd <__cmpsf2+0x8d>
c00274bb:	19 c0                	sbb    eax,eax
c00274bd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274c0:	5b                   	pop    ebx
c00274c1:	5e                   	pop    esi
c00274c2:	5f                   	pop    edi
c00274c3:	5d                   	pop    ebp
c00274c4:	c3                   	ret    

c00274c5 <__eqsf2>:
c00274c5:	55                   	push   ebp
c00274c6:	89 e5                	mov    ebp,esp
c00274c8:	83 ec 24             	sub    esp,0x24
c00274cb:	6a 01                	push   0x1
c00274cd:	83 ec 0c             	sub    esp,0xc
c00274d0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274d3:	e8 df 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274d8:	83 c4 10             	add    esp,0x10
c00274db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e1:	52                   	push   edx
c00274e2:	50                   	push   eax
c00274e3:	50                   	push   eax
c00274e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274e7:	e8 cb 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274ec:	59                   	pop    ecx
c00274ed:	59                   	pop    ecx
c00274ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274f1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f4:	52                   	push   edx
c00274f5:	50                   	push   eax
c00274f6:	e8 35 ff ff ff       	call   c0027430 <__cmpsf2>
c00274fb:	83 c4 20             	add    esp,0x20
c00274fe:	c9                   	leave  
c00274ff:	c3                   	ret    

c0027500 <__nesf2>:
c0027500:	eb c3                	jmp    c00274c5 <__eqsf2>

c0027502 <__gtsf2>:
c0027502:	55                   	push   ebp
c0027503:	89 e5                	mov    ebp,esp
c0027505:	83 ec 24             	sub    esp,0x24
c0027508:	6a ff                	push   0xffffffff
c002750a:	83 ec 0c             	sub    esp,0xc
c002750d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027510:	e8 a2 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027515:	83 c4 10             	add    esp,0x10
c0027518:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002751e:	52                   	push   edx
c002751f:	50                   	push   eax
c0027520:	50                   	push   eax
c0027521:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027524:	e8 8e 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027529:	59                   	pop    ecx
c002752a:	59                   	pop    ecx
c002752b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002752e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027531:	52                   	push   edx
c0027532:	50                   	push   eax
c0027533:	e8 f8 fe ff ff       	call   c0027430 <__cmpsf2>
c0027538:	83 c4 20             	add    esp,0x20
c002753b:	c9                   	leave  
c002753c:	c3                   	ret    

c002753d <__gesf2>:
c002753d:	eb c3                	jmp    c0027502 <__gtsf2>

c002753f <__ltsf2>:
c002753f:	eb 84                	jmp    c00274c5 <__eqsf2>

c0027541 <__lesf2>:
c0027541:	eb 82                	jmp    c00274c5 <__eqsf2>

c0027543 <__adddf3>:
c0027543:	55                   	push   ebp
c0027544:	89 e5                	mov    ebp,esp
c0027546:	57                   	push   edi
c0027547:	56                   	push   esi
c0027548:	53                   	push   ebx
c0027549:	83 ec 24             	sub    esp,0x24
c002754c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002754f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027552:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027555:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027558:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002755b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002755e:	89 c8                	mov    eax,ecx
c0027560:	89 ce                	mov    esi,ecx
c0027562:	c1 fe 14             	sar    esi,0x14
c0027565:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027568:	89 fb                	mov    ebx,edi
c002756a:	89 fa                	mov    edx,edi
c002756c:	c1 e2 0b             	shl    edx,0xb
c002756f:	c1 e0 0b             	shl    eax,0xb
c0027572:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027577:	c1 eb 15             	shr    ebx,0x15
c002757a:	09 d8                	or     eax,ebx
c002757c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002757f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027582:	c1 fe 14             	sar    esi,0x14
c0027585:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027588:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002758b:	89 f3                	mov    ebx,esi
c002758d:	c1 e3 0b             	shl    ebx,0xb
c0027590:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027593:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027596:	c1 e3 0b             	shl    ebx,0xb
c0027599:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002759f:	c1 ee 15             	shr    esi,0x15
c00275a2:	09 f3                	or     ebx,esi
c00275a4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275a7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275aa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275ad:	0f 88 5f 02 00 00    	js     c0027812 <__adddf3+0x2cf>
c00275b3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275b6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275b9:	85 db                	test   ebx,ebx
c00275bb:	0f 8e c7 00 00 00    	jle    c0027688 <__adddf3+0x145>
c00275c1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275c8:	75 1a                	jne    c00275e4 <__adddf3+0xa1>
c00275ca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275cd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275d0:	0f 84 b2 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275d6:	4b                   	dec    ebx
c00275d7:	75 23                	jne    c00275fc <__adddf3+0xb9>
c00275d9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275dc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275df:	e9 99 00 00 00       	jmp    c002767d <__adddf3+0x13a>
c00275e4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275e7:	f7 d6                	not    esi
c00275e9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275ef:	0f 84 93 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275f5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275fc:	83 fb 1f             	cmp    ebx,0x1f
c00275ff:	7e 42                	jle    c0027643 <__adddf3+0x100>
c0027601:	83 fb 3f             	cmp    ebx,0x3f
c0027604:	0f 8f 7e 05 00 00    	jg     c0027b88 <__adddf3+0x645>
c002760a:	83 e3 1f             	and    ebx,0x1f
c002760d:	89 d9                	mov    ecx,ebx
c002760f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027612:	d3 ef                	shr    edi,cl
c0027614:	31 db                	xor    ebx,ebx
c0027616:	85 c9                	test   ecx,ecx
c0027618:	74 15                	je     c002762f <__adddf3+0xec>
c002761a:	be 20 00 00 00       	mov    esi,0x20
c002761f:	29 ce                	sub    esi,ecx
c0027621:	89 f1                	mov    ecx,esi
c0027623:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027626:	d3 e6                	shl    esi,cl
c0027628:	31 db                	xor    ebx,ebx
c002762a:	85 f6                	test   esi,esi
c002762c:	0f 95 c3             	setne  bl
c002762f:	31 c9                	xor    ecx,ecx
c0027631:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027635:	0f 95 c1             	setne  cl
c0027638:	09 cf                	or     edi,ecx
c002763a:	09 fb                	or     ebx,edi
c002763c:	01 da                	add    edx,ebx
c002763e:	83 d0 00             	adc    eax,0x0
c0027641:	eb 3a                	jmp    c002767d <__adddf3+0x13a>
c0027643:	bf 20 00 00 00       	mov    edi,0x20
c0027648:	29 df                	sub    edi,ebx
c002764a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002764d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027650:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027653:	d3 e6                	shl    esi,cl
c0027655:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027658:	88 d9                	mov    cl,bl
c002765a:	d3 ef                	shr    edi,cl
c002765c:	09 fe                	or     esi,edi
c002765e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027661:	88 d9                	mov    cl,bl
c0027663:	d3 ef                	shr    edi,cl
c0027665:	89 fb                	mov    ebx,edi
c0027667:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002766a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002766d:	d3 e7                	shl    edi,cl
c002766f:	85 ff                	test   edi,edi
c0027671:	0f 95 c1             	setne  cl
c0027674:	0f b6 c9             	movzx  ecx,cl
c0027677:	09 ce                	or     esi,ecx
c0027679:	01 f2                	add    edx,esi
c002767b:	11 d8                	adc    eax,ebx
c002767d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027680:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027683:	e9 52 01 00 00       	jmp    c00277da <__adddf3+0x297>
c0027688:	0f 84 d5 00 00 00    	je     c0027763 <__adddf3+0x220>
c002768e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027691:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027694:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027697:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002769a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276a1:	75 20                	jne    c00276c3 <__adddf3+0x180>
c00276a3:	89 d6                	mov    esi,edx
c00276a5:	09 c6                	or     esi,eax
c00276a7:	0f 84 db 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276ad:	4b                   	dec    ebx
c00276ae:	75 29                	jne    c00276d9 <__adddf3+0x196>
c00276b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276b6:	01 d1                	add    ecx,edx
c00276b8:	11 c6                	adc    esi,eax
c00276ba:	89 f0                	mov    eax,esi
c00276bc:	89 ca                	mov    edx,ecx
c00276be:	e9 17 01 00 00       	jmp    c00277da <__adddf3+0x297>
c00276c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276c6:	f7 d6                	not    esi
c00276c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ce:	0f 84 b4 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276d4:	0d 00 00 00 80       	or     eax,0x80000000
c00276d9:	83 fb 1f             	cmp    ebx,0x1f
c00276dc:	7e 48                	jle    c0027726 <__adddf3+0x1e3>
c00276de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e4:	83 fb 3f             	cmp    ebx,0x3f
c00276e7:	0f 8f 9b 04 00 00    	jg     c0027b88 <__adddf3+0x645>
c00276ed:	83 e3 1f             	and    ebx,0x1f
c00276f0:	89 d9                	mov    ecx,ebx
c00276f2:	89 c7                	mov    edi,eax
c00276f4:	d3 ef                	shr    edi,cl
c00276f6:	31 db                	xor    ebx,ebx
c00276f8:	85 c9                	test   ecx,ecx
c00276fa:	74 12                	je     c002770e <__adddf3+0x1cb>
c00276fc:	be 20 00 00 00       	mov    esi,0x20
c0027701:	29 ce                	sub    esi,ecx
c0027703:	89 f1                	mov    ecx,esi
c0027705:	d3 e0                	shl    eax,cl
c0027707:	31 db                	xor    ebx,ebx
c0027709:	85 c0                	test   eax,eax
c002770b:	0f 95 c3             	setne  bl
c002770e:	31 c0                	xor    eax,eax
c0027710:	85 d2                	test   edx,edx
c0027712:	0f 95 c0             	setne  al
c0027715:	09 c7                	or     edi,eax
c0027717:	09 fb                	or     ebx,edi
c0027719:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002771c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002771f:	01 da                	add    edx,ebx
c0027721:	83 d6 00             	adc    esi,0x0
c0027724:	eb 39                	jmp    c002775f <__adddf3+0x21c>
c0027726:	be 20 00 00 00       	mov    esi,0x20
c002772b:	29 de                	sub    esi,ebx
c002772d:	89 c7                	mov    edi,eax
c002772f:	89 f1                	mov    ecx,esi
c0027731:	d3 e7                	shl    edi,cl
c0027733:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027736:	89 d7                	mov    edi,edx
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	89 f9                	mov    ecx,edi
c002773e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027741:	09 cf                	or     edi,ecx
c0027743:	88 d9                	mov    cl,bl
c0027745:	d3 e8                	shr    eax,cl
c0027747:	89 f1                	mov    ecx,esi
c0027749:	d3 e2                	shl    edx,cl
c002774b:	85 d2                	test   edx,edx
c002774d:	0f 95 c2             	setne  dl
c0027750:	0f b6 d2             	movzx  edx,dl
c0027753:	09 d7                	or     edi,edx
c0027755:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027758:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002775b:	01 fa                	add    edx,edi
c002775d:	11 c6                	adc    esi,eax
c002775f:	89 f0                	mov    eax,esi
c0027761:	eb 77                	jmp    c00277da <__adddf3+0x297>
c0027763:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027766:	46                   	inc    esi
c0027767:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002776a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027770:	75 41                	jne    c00277b3 <__adddf3+0x270>
c0027772:	89 d3                	mov    ebx,edx
c0027774:	09 c3                	or     ebx,eax
c0027776:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002777d:	75 27                	jne    c00277a6 <__adddf3+0x263>
c002777f:	85 db                	test   ebx,ebx
c0027781:	0f 84 fb 03 00 00    	je     c0027b82 <__adddf3+0x63f>
c0027787:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002778a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002778d:	0f 84 f5 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027793:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027796:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027799:	85 c0                	test   eax,eax
c002779b:	0f 89 91 03 00 00    	jns    c0027b32 <__adddf3+0x5ef>
c00277a1:	e9 85 03 00 00       	jmp    c0027b2b <__adddf3+0x5e8>
c00277a6:	85 db                	test   ebx,ebx
c00277a8:	0f 85 da 03 00 00    	jne    c0027b88 <__adddf3+0x645>
c00277ae:	e9 cf 03 00 00       	jmp    c0027b82 <__adddf3+0x63f>
c00277b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277bc:	f7 d1                	not    ecx
c00277be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277c4:	0f 84 70 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277ca:	d1 ea                	shr    edx,1
c00277cc:	89 c1                	mov    ecx,eax
c00277ce:	c1 e1 1f             	shl    ecx,0x1f
c00277d1:	09 ca                	or     edx,ecx
c00277d3:	d1 e8                	shr    eax,1
c00277d5:	e9 6f 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c00277da:	85 c0                	test   eax,eax
c00277dc:	0f 89 67 03 00 00    	jns    c0027b49 <__adddf3+0x606>
c00277e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277e8:	f7 d1                	not    ecx
c00277ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f0:	0f 84 44 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277f6:	89 d1                	mov    ecx,edx
c00277f8:	d1 e9                	shr    ecx,1
c00277fa:	83 e2 01             	and    edx,0x1
c00277fd:	09 ca                	or     edx,ecx
c00277ff:	89 c1                	mov    ecx,eax
c0027801:	c1 e1 1f             	shl    ecx,0x1f
c0027804:	09 ca                	or     edx,ecx
c0027806:	d1 e8                	shr    eax,1
c0027808:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002780d:	e9 37 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027812:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027815:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002781b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002781e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027821:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027827:	29 de                	sub    esi,ebx
c0027829:	85 f6                	test   esi,esi
c002782b:	0f 8e bd 00 00 00    	jle    c00278ee <__adddf3+0x3ab>
c0027831:	85 db                	test   ebx,ebx
c0027833:	75 17                	jne    c002784c <__adddf3+0x309>
c0027835:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027838:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002783b:	0f 84 47 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027841:	4e                   	dec    esi
c0027842:	75 20                	jne    c0027864 <__adddf3+0x321>
c0027844:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027847:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002784a:	eb 5b                	jmp    c00278a7 <__adddf3+0x364>
c002784c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002784f:	f7 d3                	not    ebx
c0027851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027857:	0f 84 2b 03 00 00    	je     c0027b88 <__adddf3+0x645>
c002785d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027864:	83 fe 1f             	cmp    esi,0x1f
c0027867:	7e 49                	jle    c00278b2 <__adddf3+0x36f>
c0027869:	83 fe 3f             	cmp    esi,0x3f
c002786c:	0f 8f 16 03 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027872:	83 e6 1f             	and    esi,0x1f
c0027875:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027878:	89 f1                	mov    ecx,esi
c002787a:	d3 ef                	shr    edi,cl
c002787c:	31 db                	xor    ebx,ebx
c002787e:	85 f6                	test   esi,esi
c0027880:	74 13                	je     c0027895 <__adddf3+0x352>
c0027882:	b9 20 00 00 00       	mov    ecx,0x20
c0027887:	29 f1                	sub    ecx,esi
c0027889:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002788c:	d3 e6                	shl    esi,cl
c002788e:	31 db                	xor    ebx,ebx
c0027890:	85 f6                	test   esi,esi
c0027892:	0f 95 c3             	setne  bl
c0027895:	31 c9                	xor    ecx,ecx
c0027897:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002789b:	0f 95 c1             	setne  cl
c002789e:	09 cf                	or     edi,ecx
c00278a0:	09 fb                	or     ebx,edi
c00278a2:	29 da                	sub    edx,ebx
c00278a4:	83 d8 00             	sbb    eax,0x0
c00278a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ad:	e9 aa 01 00 00       	jmp    c0027a5c <__adddf3+0x519>
c00278b2:	bf 20 00 00 00       	mov    edi,0x20
c00278b7:	29 f7                	sub    edi,esi
c00278b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278c2:	d3 e3                	shl    ebx,cl
c00278c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c7:	89 f1                	mov    ecx,esi
c00278c9:	d3 ef                	shr    edi,cl
c00278cb:	09 fb                	or     ebx,edi
c00278cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278d0:	89 f1                	mov    ecx,esi
c00278d2:	d3 ef                	shr    edi,cl
c00278d4:	89 fe                	mov    esi,edi
c00278d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278dc:	d3 e7                	shl    edi,cl
c00278de:	85 ff                	test   edi,edi
c00278e0:	0f 95 c1             	setne  cl
c00278e3:	0f b6 c9             	movzx  ecx,cl
c00278e6:	09 cb                	or     ebx,ecx
c00278e8:	29 da                	sub    edx,ebx
c00278ea:	19 f0                	sbb    eax,esi
c00278ec:	eb b9                	jmp    c00278a7 <__adddf3+0x364>
c00278ee:	0f 84 cd 00 00 00    	je     c00279c1 <__adddf3+0x47e>
c00278f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027901:	75 1b                	jne    c002791e <__adddf3+0x3db>
c0027903:	89 d6                	mov    esi,edx
c0027905:	09 c6                	or     esi,eax
c0027907:	0f 84 7b 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002790d:	4b                   	dec    ebx
c002790e:	75 24                	jne    c0027934 <__adddf3+0x3f1>
c0027910:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027913:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027916:	29 d1                	sub    ecx,edx
c0027918:	19 c6                	sbb    esi,eax
c002791a:	89 ca                	mov    edx,ecx
c002791c:	eb 61                	jmp    c002797f <__adddf3+0x43c>
c002791e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027921:	f7 d6                	not    esi
c0027923:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027929:	0f 84 59 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002792f:	0d 00 00 00 80       	or     eax,0x80000000
c0027934:	83 fb 1f             	cmp    ebx,0x1f
c0027937:	7e 4d                	jle    c0027986 <__adddf3+0x443>
c0027939:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002793c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002793f:	83 fb 3f             	cmp    ebx,0x3f
c0027942:	0f 8f 40 02 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027948:	83 e3 1f             	and    ebx,0x1f
c002794b:	89 d9                	mov    ecx,ebx
c002794d:	89 c7                	mov    edi,eax
c002794f:	d3 ef                	shr    edi,cl
c0027951:	31 db                	xor    ebx,ebx
c0027953:	85 c9                	test   ecx,ecx
c0027955:	74 12                	je     c0027969 <__adddf3+0x426>
c0027957:	be 20 00 00 00       	mov    esi,0x20
c002795c:	29 ce                	sub    esi,ecx
c002795e:	89 f1                	mov    ecx,esi
c0027960:	d3 e0                	shl    eax,cl
c0027962:	31 db                	xor    ebx,ebx
c0027964:	85 c0                	test   eax,eax
c0027966:	0f 95 c3             	setne  bl
c0027969:	31 c0                	xor    eax,eax
c002796b:	85 d2                	test   edx,edx
c002796d:	0f 95 c0             	setne  al
c0027970:	09 c7                	or     edi,eax
c0027972:	09 fb                	or     ebx,edi
c0027974:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027977:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002797a:	29 da                	sub    edx,ebx
c002797c:	83 de 00             	sbb    esi,0x0
c002797f:	89 f0                	mov    eax,esi
c0027981:	e9 d6 00 00 00       	jmp    c0027a5c <__adddf3+0x519>
c0027986:	be 20 00 00 00       	mov    esi,0x20
c002798b:	29 de                	sub    esi,ebx
c002798d:	89 c7                	mov    edi,eax
c002798f:	89 f1                	mov    ecx,esi
c0027991:	d3 e7                	shl    edi,cl
c0027993:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027996:	89 d7                	mov    edi,edx
c0027998:	88 d9                	mov    cl,bl
c002799a:	d3 ef                	shr    edi,cl
c002799c:	89 f9                	mov    ecx,edi
c002799e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a1:	09 cf                	or     edi,ecx
c00279a3:	88 d9                	mov    cl,bl
c00279a5:	d3 e8                	shr    eax,cl
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 e2                	shl    edx,cl
c00279ab:	85 d2                	test   edx,edx
c00279ad:	0f 95 c2             	setne  dl
c00279b0:	0f b6 d2             	movzx  edx,dl
c00279b3:	09 d7                	or     edi,edx
c00279b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279bb:	29 fa                	sub    edx,edi
c00279bd:	19 c6                	sbb    esi,eax
c00279bf:	eb be                	jmp    c002797f <__adddf3+0x43c>
c00279c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279cd:	75 6a                	jne    c0027a39 <__adddf3+0x4f6>
c00279cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d3:	75 58                	jne    c0027a2d <__adddf3+0x4ea>
c00279d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279db:	89 d6                	mov    esi,edx
c00279dd:	09 c6                	or     esi,eax
c00279df:	75 17                	jne    c00279f8 <__adddf3+0x4b5>
c00279e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279e7:	85 db                	test   ebx,ebx
c00279e9:	0f 85 99 01 00 00    	jne    c0027b88 <__adddf3+0x645>
c00279ef:	31 ff                	xor    edi,edi
c00279f1:	31 c9                	xor    ecx,ecx
c00279f3:	e9 90 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c00279f8:	85 db                	test   ebx,ebx
c00279fa:	0f 84 88 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a00:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a03:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a06:	85 c0                	test   eax,eax
c0027a08:	79 10                	jns    c0027a1a <__adddf3+0x4d7>
c0027a0a:	31 c9                	xor    ecx,ecx
c0027a0c:	f7 da                	neg    edx
c0027a0e:	0f 95 c1             	setne  cl
c0027a11:	01 c8                	add    eax,ecx
c0027a13:	f7 d8                	neg    eax
c0027a15:	e9 2f 01 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027a1a:	31 ff                	xor    edi,edi
c0027a1c:	31 c9                	xor    ecx,ecx
c0027a1e:	89 c3                	mov    ebx,eax
c0027a20:	09 d3                	or     ebx,edx
c0027a22:	0f 84 60 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a28:	e9 05 01 00 00       	jmp    c0027b32 <__adddf3+0x5ef>
c0027a2d:	31 ff                	xor    edi,edi
c0027a2f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a34:	e9 4f 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c0027a39:	89 c1                	mov    ecx,eax
c0027a3b:	89 d0                	mov    eax,edx
c0027a3d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a40:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a43:	89 ca                	mov    edx,ecx
c0027a45:	85 c9                	test   ecx,ecx
c0027a47:	79 2c                	jns    c0027a75 <__adddf3+0x532>
c0027a49:	31 c9                	xor    ecx,ecx
c0027a4b:	f7 d8                	neg    eax
c0027a4d:	0f 95 c1             	setne  cl
c0027a50:	01 ca                	add    edx,ecx
c0027a52:	f7 da                	neg    edx
c0027a54:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a57:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a5a:	eb 19                	jmp    c0027a75 <__adddf3+0x532>
c0027a5c:	85 c0                	test   eax,eax
c0027a5e:	0f 89 e5 00 00 00    	jns    c0027b49 <__adddf3+0x606>
c0027a64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a69:	89 c1                	mov    ecx,eax
c0027a6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a6e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a71:	89 d0                	mov    eax,edx
c0027a73:	89 ca                	mov    edx,ecx
c0027a75:	85 d2                	test   edx,edx
c0027a77:	74 59                	je     c0027ad2 <__adddf3+0x58f>
c0027a79:	0f bd da             	bsr    ebx,edx
c0027a7c:	83 f3 1f             	xor    ebx,0x1f
c0027a7f:	88 d9                	mov    cl,bl
c0027a81:	d3 e2                	shl    edx,cl
c0027a83:	bf 20 00 00 00       	mov    edi,0x20
c0027a88:	89 f9                	mov    ecx,edi
c0027a8a:	29 d9                	sub    ecx,ebx
c0027a8c:	89 c6                	mov    esi,eax
c0027a8e:	d3 ee                	shr    esi,cl
c0027a90:	09 d6                	or     esi,edx
c0027a92:	88 d9                	mov    cl,bl
c0027a94:	d3 e0                	shl    eax,cl
c0027a96:	89 c2                	mov    edx,eax
c0027a98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a9b:	25 ff 07 00 00       	and    eax,0x7ff
c0027aa0:	39 d8                	cmp    eax,ebx
c0027aa2:	7f 22                	jg     c0027ac6 <__adddf3+0x583>
c0027aa4:	29 c3                	sub    ebx,eax
c0027aa6:	43                   	inc    ebx
c0027aa7:	88 d9                	mov    cl,bl
c0027aa9:	d3 ea                	shr    edx,cl
c0027aab:	29 df                	sub    edi,ebx
c0027aad:	89 f9                	mov    ecx,edi
c0027aaf:	89 f0                	mov    eax,esi
c0027ab1:	d3 e0                	shl    eax,cl
c0027ab3:	09 c2                	or     edx,eax
c0027ab5:	89 f0                	mov    eax,esi
c0027ab7:	88 d9                	mov    cl,bl
c0027ab9:	d3 e8                	shr    eax,cl
c0027abb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027abe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ac4:	eb 6f                	jmp    c0027b35 <__adddf3+0x5f2>
c0027ac6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac9:	29 d8                	sub    eax,ebx
c0027acb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ace:	89 f0                	mov    eax,esi
c0027ad0:	eb 59                	jmp    c0027b2b <__adddf3+0x5e8>
c0027ad2:	85 c0                	test   eax,eax
c0027ad4:	74 6a                	je     c0027b40 <__adddf3+0x5fd>
c0027ad6:	0f bd c8             	bsr    ecx,eax
c0027ad9:	83 f1 1f             	xor    ecx,0x1f
c0027adc:	d3 e0                	shl    eax,cl
c0027ade:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ae7:	83 c1 20             	add    ecx,0x20
c0027aea:	39 cb                	cmp    ebx,ecx
c0027aec:	7f 35                	jg     c0027b23 <__adddf3+0x5e0>
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027af3:	83 fe 1f             	cmp    esi,0x1f
c0027af6:	7e 09                	jle    c0027b01 <__adddf3+0x5be>
c0027af8:	83 e9 1f             	sub    ecx,0x1f
c0027afb:	d3 e8                	shr    eax,cl
c0027afd:	89 c3                	mov    ebx,eax
c0027aff:	eb 11                	jmp    c0027b12 <__adddf3+0x5cf>
c0027b01:	b9 20 00 00 00       	mov    ecx,0x20
c0027b06:	29 f1                	sub    ecx,esi
c0027b08:	89 c3                	mov    ebx,eax
c0027b0a:	d3 e3                	shl    ebx,cl
c0027b0c:	89 f1                	mov    ecx,esi
c0027b0e:	d3 e8                	shr    eax,cl
c0027b10:	89 c2                	mov    edx,eax
c0027b12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b15:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b1d:	89 d0                	mov    eax,edx
c0027b1f:	89 da                	mov    edx,ebx
c0027b21:	eb 26                	jmp    c0027b49 <__adddf3+0x606>
c0027b23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b26:	29 cf                	sub    edi,ecx
c0027b28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b30:	eb 17                	jmp    c0027b49 <__adddf3+0x606>
c0027b32:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b35:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b38:	eb 0f                	jmp    c0027b49 <__adddf3+0x606>
c0027b3a:	31 d2                	xor    edx,edx
c0027b3c:	31 c0                	xor    eax,eax
c0027b3e:	eb 09                	jmp    c0027b49 <__adddf3+0x606>
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b4c:	c1 e1 14             	shl    ecx,0x14
c0027b4f:	89 c3                	mov    ebx,eax
c0027b51:	c1 eb 0b             	shr    ebx,0xb
c0027b54:	09 d9                	or     ecx,ebx
c0027b56:	89 d3                	mov    ebx,edx
c0027b58:	c1 eb 0b             	shr    ebx,0xb
c0027b5b:	c1 e0 15             	shl    eax,0x15
c0027b5e:	09 d8                	or     eax,ebx
c0027b60:	89 c7                	mov    edi,eax
c0027b62:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b68:	0f 95 c0             	setne  al
c0027b6b:	89 c6                	mov    esi,eax
c0027b6d:	09 f3                	or     ebx,esi
c0027b6f:	83 e3 01             	and    ebx,0x1
c0027b72:	c1 ea 0a             	shr    edx,0xa
c0027b75:	21 da                	and    edx,ebx
c0027b77:	89 f8                	mov    eax,edi
c0027b79:	01 d0                	add    eax,edx
c0027b7b:	83 d1 00             	adc    ecx,0x0
c0027b7e:	89 c7                	mov    edi,eax
c0027b80:	eb 06                	jmp    c0027b88 <__adddf3+0x645>
c0027b82:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b88:	89 f8                	mov    eax,edi
c0027b8a:	89 ca                	mov    edx,ecx
c0027b8c:	83 c4 24             	add    esp,0x24
c0027b8f:	5b                   	pop    ebx
c0027b90:	5e                   	pop    esi
c0027b91:	5f                   	pop    edi
c0027b92:	5d                   	pop    ebp
c0027b93:	c3                   	ret    

c0027b94 <__subdf3>:
c0027b94:	55                   	push   ebp
c0027b95:	89 e5                	mov    ebp,esp
c0027b97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b9d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ba3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ba6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ba9:	5d                   	pop    ebp
c0027baa:	e9 94 f9 ff ff       	jmp    c0027543 <__adddf3>

c0027baf <__negdf2>:
c0027baf:	55                   	push   ebp
c0027bb0:	89 e5                	mov    ebp,esp
c0027bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bbe:	5d                   	pop    ebp
c0027bbf:	c3                   	ret    

c0027bc0 <__muldf3>:
c0027bc0:	55                   	push   ebp
c0027bc1:	89 e5                	mov    ebp,esp
c0027bc3:	57                   	push   edi
c0027bc4:	56                   	push   esi
c0027bc5:	53                   	push   ebx
c0027bc6:	83 ec 24             	sub    esp,0x24
c0027bc9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bd8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bde:	89 c8                	mov    eax,ecx
c0027be0:	c1 f8 14             	sar    eax,0x14
c0027be3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027be6:	89 f8                	mov    eax,edi
c0027be8:	89 fb                	mov    ebx,edi
c0027bea:	c1 e3 0b             	shl    ebx,0xb
c0027bed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bf0:	c1 e1 0b             	shl    ecx,0xb
c0027bf3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bf9:	c1 e8 15             	shr    eax,0x15
c0027bfc:	09 c1                	or     ecx,eax
c0027bfe:	89 d6                	mov    esi,edx
c0027c00:	89 d0                	mov    eax,edx
c0027c02:	c1 f8 14             	sar    eax,0x14
c0027c05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c0b:	89 c3                	mov    ebx,eax
c0027c0d:	c1 e3 0b             	shl    ebx,0xb
c0027c10:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c13:	c1 e6 0b             	shl    esi,0xb
c0027c16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c1c:	c1 e8 15             	shr    eax,0x15
c0027c1f:	09 c6                	or     esi,eax
c0027c21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c24:	25 ff 07 00 00       	and    eax,0x7ff
c0027c29:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c2f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c3d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c47:	40                   	inc    eax
c0027c48:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c4d:	0f 85 8d 00 00 00    	jne    c0027ce0 <__muldf3+0x120>
c0027c53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c56:	09 c8                	or     eax,ecx
c0027c58:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c5c:	74 44                	je     c0027ca2 <__muldf3+0xe2>
c0027c5e:	85 c0                	test   eax,eax
c0027c60:	0f 85 31 02 00 00    	jne    c0027e97 <__muldf3+0x2d7>
c0027c66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c69:	40                   	inc    eax
c0027c6a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c6f:	75 13                	jne    c0027c84 <__muldf3+0xc4>
c0027c71:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c74:	09 f1                	or     ecx,esi
c0027c76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c7a:	74 22                	je     c0027c9e <__muldf3+0xde>
c0027c7c:	85 c9                	test   ecx,ecx
c0027c7e:	0f 85 0d 02 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027c84:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c88:	0f 89 09 02 00 00    	jns    c0027e97 <__muldf3+0x2d7>
c0027c8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c91:	05 00 00 00 80       	add    eax,0x80000000
c0027c96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c99:	e9 f9 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027c9e:	85 c9                	test   ecx,ecx
c0027ca0:	eb 2e                	jmp    c0027cd0 <__muldf3+0x110>
c0027ca2:	85 c0                	test   eax,eax
c0027ca4:	74 20                	je     c0027cc6 <__muldf3+0x106>
c0027ca6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ca9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027caf:	c1 ef 1f             	shr    edi,0x1f
c0027cb2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cb5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cb8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	09 f9                	or     ecx,edi
c0027cc0:	78 1e                	js     c0027ce0 <__muldf3+0x120>
c0027cc2:	89 c3                	mov    ebx,eax
c0027cc4:	eb e0                	jmp    c0027ca6 <__muldf3+0xe6>
c0027cc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cc9:	f7 d0                	not    eax
c0027ccb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cd0:	75 b2                	jne    c0027c84 <__muldf3+0xc4>
c0027cd2:	31 ff                	xor    edi,edi
c0027cd4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cdb:	e9 b7 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027ce0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce3:	40                   	inc    eax
c0027ce4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ce9:	75 57                	jne    c0027d42 <__muldf3+0x182>
c0027ceb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cee:	09 f0                	or     eax,esi
c0027cf0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cf4:	74 23                	je     c0027d19 <__muldf3+0x159>
c0027cf6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cfa:	0f 89 91 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d00:	85 c0                	test   eax,eax
c0027d02:	0f 85 89 01 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027d08:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d0b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d14:	e9 7e 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027d19:	85 c0                	test   eax,eax
c0027d1b:	75 0c                	jne    c0027d29 <__muldf3+0x169>
c0027d1d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d21:	0f 89 6a 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d27:	eb df                	jmp    c0027d08 <__muldf3+0x148>
c0027d29:	01 f6                	add    esi,esi
c0027d2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d2e:	c1 ea 1f             	shr    edx,0x1f
c0027d31:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d34:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d3a:	09 d6                	or     esi,edx
c0027d3c:	78 04                	js     c0027d42 <__muldf3+0x182>
c0027d3e:	89 c3                	mov    ebx,eax
c0027d40:	eb e7                	jmp    c0027d29 <__muldf3+0x169>
c0027d42:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d4e:	89 c8                	mov    eax,ecx
c0027d50:	f7 e6                	mul    esi
c0027d52:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d55:	89 c7                	mov    edi,eax
c0027d57:	89 c8                	mov    eax,ecx
c0027d59:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d5c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d5f:	89 c1                	mov    ecx,eax
c0027d61:	89 f0                	mov    eax,esi
c0027d63:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d66:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d69:	89 c6                	mov    esi,eax
c0027d6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d6e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d71:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d74:	31 c0                	xor    eax,eax
c0027d76:	01 f1                	add    ecx,esi
c0027d78:	0f 92 c0             	setb   al
c0027d7b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d7e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d81:	83 d6 00             	adc    esi,0x0
c0027d84:	01 c7                	add    edi,eax
c0027d86:	83 d6 00             	adc    esi,0x0
c0027d89:	01 ca                	add    edx,ecx
c0027d8b:	0f 92 c1             	setb   cl
c0027d8e:	0f b6 c9             	movzx  ecx,cl
c0027d91:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d94:	83 d6 00             	adc    esi,0x0
c0027d97:	01 cf                	add    edi,ecx
c0027d99:	83 d6 00             	adc    esi,0x0
c0027d9c:	31 c9                	xor    ecx,ecx
c0027d9e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027da1:	0f 95 c1             	setne  cl
c0027da4:	09 cf                	or     edi,ecx
c0027da6:	85 f6                	test   esi,esi
c0027da8:	78 0c                	js     c0027db6 <__muldf3+0x1f6>
c0027daa:	01 f6                	add    esi,esi
c0027dac:	89 f8                	mov    eax,edi
c0027dae:	c1 e8 1f             	shr    eax,0x1f
c0027db1:	09 c6                	or     esi,eax
c0027db3:	01 ff                	add    edi,edi
c0027db5:	4b                   	dec    ebx
c0027db6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dbc:	0f 8f 85 00 00 00    	jg     c0027e47 <__muldf3+0x287>
c0027dc2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027dc8:	85 db                	test   ebx,ebx
c0027dca:	0f 8f 84 00 00 00    	jg     c0027e54 <__muldf3+0x294>
c0027dd0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dd3:	7c 79                	jl     c0027e4e <__muldf3+0x28e>
c0027dd5:	ba 01 00 00 00       	mov    edx,0x1
c0027dda:	29 da                	sub    edx,ebx
c0027ddc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027de2:	83 fa 1f             	cmp    edx,0x1f
c0027de5:	7e 30                	jle    c0027e17 <__muldf3+0x257>
c0027de7:	83 fa 20             	cmp    edx,0x20
c0027dea:	75 0b                	jne    c0027df7 <__muldf3+0x237>
c0027dec:	31 c0                	xor    eax,eax
c0027dee:	85 ff                	test   edi,edi
c0027df0:	0f 95 c0             	setne  al
c0027df3:	89 c7                	mov    edi,eax
c0027df5:	eb 1a                	jmp    c0027e11 <__muldf3+0x251>
c0027df7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	d3 e0                	shl    eax,cl
c0027dfe:	09 f8                	or     eax,edi
c0027e00:	0f 95 c0             	setne  al
c0027e03:	0f b6 c0             	movzx  eax,al
c0027e06:	89 c7                	mov    edi,eax
c0027e08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e0d:	29 d9                	sub    ecx,ebx
c0027e0f:	d3 ee                	shr    esi,cl
c0027e11:	09 f7                	or     edi,esi
c0027e13:	31 db                	xor    ebx,ebx
c0027e15:	eb 3b                	jmp    c0027e52 <__muldf3+0x292>
c0027e17:	83 c3 1f             	add    ebx,0x1f
c0027e1a:	89 f0                	mov    eax,esi
c0027e1c:	88 d9                	mov    cl,bl
c0027e1e:	d3 e0                	shl    eax,cl
c0027e20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e23:	89 f8                	mov    eax,edi
c0027e25:	88 d1                	mov    cl,dl
c0027e27:	d3 e8                	shr    eax,cl
c0027e29:	89 c1                	mov    ecx,eax
c0027e2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e2e:	09 c8                	or     eax,ecx
c0027e30:	88 d9                	mov    cl,bl
c0027e32:	d3 e7                	shl    edi,cl
c0027e34:	31 db                	xor    ebx,ebx
c0027e36:	85 ff                	test   edi,edi
c0027e38:	0f 95 c3             	setne  bl
c0027e3b:	89 df                	mov    edi,ebx
c0027e3d:	09 c7                	or     edi,eax
c0027e3f:	88 d1                	mov    cl,dl
c0027e41:	d3 ee                	shr    esi,cl
c0027e43:	31 db                	xor    ebx,ebx
c0027e45:	eb 0d                	jmp    c0027e54 <__muldf3+0x294>
c0027e47:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e4c:	eb 02                	jmp    c0027e50 <__muldf3+0x290>
c0027e4e:	31 db                	xor    ebx,ebx
c0027e50:	31 ff                	xor    edi,edi
c0027e52:	31 f6                	xor    esi,esi
c0027e54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e57:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e5f:	09 c3                	or     ebx,eax
c0027e61:	c1 e3 14             	shl    ebx,0x14
c0027e64:	89 f0                	mov    eax,esi
c0027e66:	c1 e8 0b             	shr    eax,0xb
c0027e69:	09 c3                	or     ebx,eax
c0027e6b:	89 f8                	mov    eax,edi
c0027e6d:	c1 e8 0b             	shr    eax,0xb
c0027e70:	c1 e6 15             	shl    esi,0x15
c0027e73:	09 c6                	or     esi,eax
c0027e75:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e7b:	0f 95 c1             	setne  cl
c0027e7e:	09 c8                	or     eax,ecx
c0027e80:	83 e0 01             	and    eax,0x1
c0027e83:	c1 ef 0a             	shr    edi,0xa
c0027e86:	21 c7                	and    edi,eax
c0027e88:	01 f7                	add    edi,esi
c0027e8a:	83 d3 00             	adc    ebx,0x0
c0027e8d:	89 da                	mov    edx,ebx
c0027e8f:	eb 03                	jmp    c0027e94 <__muldf3+0x2d4>
c0027e91:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e94:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e97:	89 f8                	mov    eax,edi
c0027e99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e9c:	83 c4 24             	add    esp,0x24
c0027e9f:	5b                   	pop    ebx
c0027ea0:	5e                   	pop    esi
c0027ea1:	5f                   	pop    edi
c0027ea2:	5d                   	pop    ebp
c0027ea3:	c3                   	ret    

c0027ea4 <__divdf3>:
c0027ea4:	55                   	push   ebp
c0027ea5:	89 e5                	mov    ebp,esp
c0027ea7:	57                   	push   edi
c0027ea8:	56                   	push   esi
c0027ea9:	53                   	push   ebx
c0027eaa:	83 ec 2c             	sub    esp,0x2c
c0027ead:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027eb0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027eb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027eb6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027eb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ebc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ebf:	89 ce                	mov    esi,ecx
c0027ec1:	89 c8                	mov    eax,ecx
c0027ec3:	c1 f8 14             	sar    eax,0x14
c0027ec6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ec9:	89 f8                	mov    eax,edi
c0027ecb:	89 fb                	mov    ebx,edi
c0027ecd:	c1 e3 0b             	shl    ebx,0xb
c0027ed0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ed3:	c1 e6 0b             	shl    esi,0xb
c0027ed6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027edc:	c1 e8 15             	shr    eax,0x15
c0027edf:	09 c6                	or     esi,eax
c0027ee1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ee4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ee7:	89 c2                	mov    edx,eax
c0027ee9:	c1 fa 14             	sar    edx,0x14
c0027eec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ef2:	89 de                	mov    esi,ebx
c0027ef4:	c1 e6 0b             	shl    esi,0xb
c0027ef7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027efa:	c1 e0 0b             	shl    eax,0xb
c0027efd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f02:	c1 eb 15             	shr    ebx,0x15
c0027f05:	09 d8                	or     eax,ebx
c0027f07:	89 c2                	mov    edx,eax
c0027f09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f11:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f14:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f17:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f1d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f20:	29 d8                	sub    eax,ebx
c0027f22:	05 ff 03 00 00       	add    eax,0x3ff
c0027f27:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f2a:	46                   	inc    esi
c0027f2b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f31:	0f 85 a5 00 00 00    	jne    c0027fdc <__divdf3+0x138>
c0027f37:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f3a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f3d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f41:	74 2a                	je     c0027f6d <__divdf3+0xc9>
c0027f43:	85 f6                	test   esi,esi
c0027f45:	0f 85 cc 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f4e:	40                   	inc    eax
c0027f4f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f54:	75 26                	jne    c0027f7c <__divdf3+0xd8>
c0027f56:	85 db                	test   ebx,ebx
c0027f58:	74 22                	je     c0027f7c <__divdf3+0xd8>
c0027f5a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f5d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f63:	09 d0                	or     eax,edx
c0027f65:	0f 85 ac 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f6b:	eb 63                	jmp    c0027fd0 <__divdf3+0x12c>
c0027f6d:	85 f6                	test   esi,esi
c0027f6f:	75 22                	jne    c0027f93 <__divdf3+0xef>
c0027f71:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f74:	40                   	inc    eax
c0027f75:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f7a:	74 36                	je     c0027fb2 <__divdf3+0x10e>
c0027f7c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f80:	0f 89 91 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0027f86:	89 f8                	mov    eax,edi
c0027f88:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f8e:	e9 80 02 00 00       	jmp    c0028213 <__divdf3+0x36f>
c0027f93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f96:	01 f6                	add    esi,esi
c0027f98:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f9b:	c1 ef 1f             	shr    edi,0x1f
c0027f9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fa1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fa4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fa7:	09 f7                	or     edi,esi
c0027fa9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fac:	78 2e                	js     c0027fdc <__divdf3+0x138>
c0027fae:	89 c8                	mov    eax,ecx
c0027fb0:	eb e1                	jmp    c0027f93 <__divdf3+0xef>
c0027fb2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fb5:	09 d0                	or     eax,edx
c0027fb7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fbb:	74 0f                	je     c0027fcc <__divdf3+0x128>
c0027fbd:	85 c0                	test   eax,eax
c0027fbf:	74 bb                	je     c0027f7c <__divdf3+0xd8>
c0027fc1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fc4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fc7:	e9 4b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fcc:	85 c0                	test   eax,eax
c0027fce:	75 ac                	jne    c0027f7c <__divdf3+0xd8>
c0027fd0:	31 ff                	xor    edi,edi
c0027fd2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fd7:	e9 3b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fdc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fdf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fe2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fe8:	75 6b                	jne    c0028055 <__divdf3+0x1b1>
c0027fea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fed:	09 d6                	or     esi,edx
c0027fef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ff3:	74 28                	je     c002801d <__divdf3+0x179>
c0027ff5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ff8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ffb:	85 f6                	test   esi,esi
c0027ffd:	0f 85 14 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0028003:	31 ff                	xor    edi,edi
c0028005:	31 c9                	xor    ecx,ecx
c0028007:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002800d:	0f 89 04 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0028013:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028018:	e9 fa 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002801d:	85 f6                	test   esi,esi
c002801f:	75 1b                	jne    c002803c <__divdf3+0x198>
c0028021:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028024:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028027:	25 00 00 00 80       	and    eax,0x80000000
c002802c:	31 c9                	xor    ecx,ecx
c002802e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028033:	89 cf                	mov    edi,ecx
c0028035:	89 c1                	mov    ecx,eax
c0028037:	e9 db 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002803c:	01 d2                	add    edx,edx
c002803e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028041:	c1 eb 1f             	shr    ebx,0x1f
c0028044:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028047:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002804a:	8d 48 01             	lea    ecx,[eax+0x1]
c002804d:	09 da                	or     edx,ebx
c002804f:	78 04                	js     c0028055 <__divdf3+0x1b1>
c0028051:	89 c8                	mov    eax,ecx
c0028053:	eb e7                	jmp    c002803c <__divdf3+0x198>
c0028055:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028058:	81 ce 00 00 00 80    	or     esi,0x80000000
c002805e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028064:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028067:	39 d6                	cmp    esi,edx
c0028069:	77 0d                	ja     c0028078 <__divdf3+0x1d4>
c002806b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002806e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028071:	72 1b                	jb     c002808e <__divdf3+0x1ea>
c0028073:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028076:	75 16                	jne    c002808e <__divdf3+0x1ea>
c0028078:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002807b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002807e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028081:	83 de 00             	sbb    esi,0x0
c0028084:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028087:	ba 01 00 00 00       	mov    edx,0x1
c002808c:	eb 02                	jmp    c0028090 <__divdf3+0x1ec>
c002808e:	31 d2                	xor    edx,edx
c0028090:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028097:	31 ff                	xor    edi,edi
c0028099:	01 ff                	add    edi,edi
c002809b:	89 d1                	mov    ecx,edx
c002809d:	c1 e9 1f             	shr    ecx,0x1f
c00280a0:	09 cf                	or     edi,ecx
c00280a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280a8:	89 da                	mov    edx,ebx
c00280aa:	89 f3                	mov    ebx,esi
c00280ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00280af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280b2:	c1 e9 1f             	shr    ecx,0x1f
c00280b5:	09 ce                	or     esi,ecx
c00280b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ba:	01 c9                	add    ecx,ecx
c00280bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280c2:	85 db                	test   ebx,ebx
c00280c4:	78 29                	js     c00280ef <__divdf3+0x24b>
c00280c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280c9:	72 07                	jb     c00280d2 <__divdf3+0x22e>
c00280cb:	75 3c                	jne    c0028109 <__divdf3+0x265>
c00280cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280d0:	77 37                	ja     c0028109 <__divdf3+0x265>
c00280d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280d8:	31 d2                	xor    edx,edx
c00280da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280dd:	0f 97 c2             	seta   dl
c00280e0:	29 d6                	sub    esi,edx
c00280e2:	89 d9                	mov    ecx,ebx
c00280e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280ed:	eb 17                	jmp    c0028106 <__divdf3+0x262>
c00280ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280f8:	0f 97 c1             	seta   cl
c00280fb:	0f b6 c9             	movzx  ecx,cl
c00280fe:	29 ce                	sub    esi,ecx
c0028100:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028103:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028106:	83 ca 01             	or     edx,0x1
c0028109:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002810c:	75 8b                	jne    c0028099 <__divdf3+0x1f5>
c002810e:	c1 e7 09             	shl    edi,0x9
c0028111:	89 d1                	mov    ecx,edx
c0028113:	c1 e9 17             	shr    ecx,0x17
c0028116:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028119:	09 f3                	or     ebx,esi
c002811b:	0f 95 c3             	setne  bl
c002811e:	0f b6 db             	movzx  ebx,bl
c0028121:	c1 e2 09             	shl    edx,0x9
c0028124:	09 d3                	or     ebx,edx
c0028126:	89 ca                	mov    edx,ecx
c0028128:	09 fa                	or     edx,edi
c002812a:	78 0c                	js     c0028138 <__divdf3+0x294>
c002812c:	01 d2                	add    edx,edx
c002812e:	89 d9                	mov    ecx,ebx
c0028130:	c1 e9 1f             	shr    ecx,0x1f
c0028133:	09 ca                	or     edx,ecx
c0028135:	01 db                	add    ebx,ebx
c0028137:	48                   	dec    eax
c0028138:	3d fe 07 00 00       	cmp    eax,0x7fe
c002813d:	0f 8f 83 00 00 00    	jg     c00281c6 <__divdf3+0x322>
c0028143:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028149:	85 c0                	test   eax,eax
c002814b:	0f 8f 82 00 00 00    	jg     c00281d3 <__divdf3+0x32f>
c0028151:	83 f8 cc             	cmp    eax,0xffffffcc
c0028154:	7c 77                	jl     c00281cd <__divdf3+0x329>
c0028156:	be 01 00 00 00       	mov    esi,0x1
c002815b:	29 c6                	sub    esi,eax
c002815d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028163:	83 fe 1f             	cmp    esi,0x1f
c0028166:	7e 2f                	jle    c0028197 <__divdf3+0x2f3>
c0028168:	83 fe 20             	cmp    esi,0x20
c002816b:	75 0a                	jne    c0028177 <__divdf3+0x2d3>
c002816d:	85 db                	test   ebx,ebx
c002816f:	0f 95 c3             	setne  bl
c0028172:	0f b6 db             	movzx  ebx,bl
c0028175:	eb 1a                	jmp    c0028191 <__divdf3+0x2ed>
c0028177:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002817a:	89 d7                	mov    edi,edx
c002817c:	d3 e7                	shl    edi,cl
c002817e:	89 f9                	mov    ecx,edi
c0028180:	09 d9                	or     ecx,ebx
c0028182:	0f 95 c3             	setne  bl
c0028185:	0f b6 db             	movzx  ebx,bl
c0028188:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002818d:	29 c1                	sub    ecx,eax
c002818f:	d3 ea                	shr    edx,cl
c0028191:	09 d3                	or     ebx,edx
c0028193:	31 c0                	xor    eax,eax
c0028195:	eb 3a                	jmp    c00281d1 <__divdf3+0x32d>
c0028197:	83 c0 1f             	add    eax,0x1f
c002819a:	89 d7                	mov    edi,edx
c002819c:	88 c1                	mov    cl,al
c002819e:	d3 e7                	shl    edi,cl
c00281a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281a3:	89 df                	mov    edi,ebx
c00281a5:	89 f1                	mov    ecx,esi
c00281a7:	d3 ef                	shr    edi,cl
c00281a9:	89 f9                	mov    ecx,edi
c00281ab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ae:	09 cf                	or     edi,ecx
c00281b0:	88 c1                	mov    cl,al
c00281b2:	d3 e3                	shl    ebx,cl
c00281b4:	85 db                	test   ebx,ebx
c00281b6:	0f 95 c3             	setne  bl
c00281b9:	0f b6 db             	movzx  ebx,bl
c00281bc:	09 fb                	or     ebx,edi
c00281be:	89 f1                	mov    ecx,esi
c00281c0:	d3 ea                	shr    edx,cl
c00281c2:	31 c0                	xor    eax,eax
c00281c4:	eb 0d                	jmp    c00281d3 <__divdf3+0x32f>
c00281c6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281cb:	eb 02                	jmp    c00281cf <__divdf3+0x32b>
c00281cd:	31 c0                	xor    eax,eax
c00281cf:	31 db                	xor    ebx,ebx
c00281d1:	31 d2                	xor    edx,edx
c00281d3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281d6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281df:	09 c8                	or     eax,ecx
c00281e1:	c1 e0 14             	shl    eax,0x14
c00281e4:	89 d1                	mov    ecx,edx
c00281e6:	c1 e9 0b             	shr    ecx,0xb
c00281e9:	09 c8                	or     eax,ecx
c00281eb:	89 c6                	mov    esi,eax
c00281ed:	89 d9                	mov    ecx,ebx
c00281ef:	c1 e9 0b             	shr    ecx,0xb
c00281f2:	c1 e2 15             	shl    edx,0x15
c00281f5:	09 ca                	or     edx,ecx
c00281f7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281fd:	0f 95 c0             	setne  al
c0028200:	09 c1                	or     ecx,eax
c0028202:	83 e1 01             	and    ecx,0x1
c0028205:	c1 eb 0a             	shr    ebx,0xa
c0028208:	21 cb                	and    ebx,ecx
c002820a:	01 d3                	add    ebx,edx
c002820c:	89 d8                	mov    eax,ebx
c002820e:	83 d6 00             	adc    esi,0x0
c0028211:	89 f2                	mov    edx,esi
c0028213:	89 c7                	mov    edi,eax
c0028215:	89 d1                	mov    ecx,edx
c0028217:	89 f8                	mov    eax,edi
c0028219:	89 ca                	mov    edx,ecx
c002821b:	83 c4 2c             	add    esp,0x2c
c002821e:	5b                   	pop    ebx
c002821f:	5e                   	pop    esi
c0028220:	5f                   	pop    edi
c0028221:	5d                   	pop    ebp
c0028222:	c3                   	ret    

c0028223 <__floatsidf>:
c0028223:	55                   	push   ebp
c0028224:	89 e5                	mov    ebp,esp
c0028226:	56                   	push   esi
c0028227:	53                   	push   ebx
c0028228:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002822b:	85 db                	test   ebx,ebx
c002822d:	7e 15                	jle    c0028244 <__floatsidf+0x21>
c002822f:	0f bd cb             	bsr    ecx,ebx
c0028232:	83 f1 1f             	xor    ecx,0x1f
c0028235:	d3 e3                	shl    ebx,cl
c0028237:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002823d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028242:	eb 21                	jmp    c0028265 <__floatsidf+0x42>
c0028244:	b8 00 00 00 00       	mov    eax,0x0
c0028249:	ba 00 00 00 00       	mov    edx,0x0
c002824e:	74 2a                	je     c002827a <__floatsidf+0x57>
c0028250:	f7 db                	neg    ebx
c0028252:	0f bd cb             	bsr    ecx,ebx
c0028255:	83 f1 1f             	xor    ecx,0x1f
c0028258:	d3 e3                	shl    ebx,cl
c002825a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028260:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028265:	29 c8                	sub    eax,ecx
c0028267:	c1 e0 14             	shl    eax,0x14
c002826a:	89 c1                	mov    ecx,eax
c002826c:	89 de                	mov    esi,ebx
c002826e:	c1 ee 0b             	shr    esi,0xb
c0028271:	09 f1                	or     ecx,esi
c0028273:	89 ca                	mov    edx,ecx
c0028275:	c1 e3 15             	shl    ebx,0x15
c0028278:	89 d8                	mov    eax,ebx
c002827a:	5b                   	pop    ebx
c002827b:	5e                   	pop    esi
c002827c:	5d                   	pop    ebp
c002827d:	c3                   	ret    

c002827e <__floatunsidf>:
c002827e:	55                   	push   ebp
c002827f:	89 e5                	mov    ebp,esp
c0028281:	56                   	push   esi
c0028282:	53                   	push   ebx
c0028283:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028286:	85 db                	test   ebx,ebx
c0028288:	74 2a                	je     c00282b4 <__floatunsidf+0x36>
c002828a:	0f bd cb             	bsr    ecx,ebx
c002828d:	83 f1 1f             	xor    ecx,0x1f
c0028290:	d3 e3                	shl    ebx,cl
c0028292:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028298:	b8 1e 04 00 00       	mov    eax,0x41e
c002829d:	29 c8                	sub    eax,ecx
c002829f:	c1 e0 14             	shl    eax,0x14
c00282a2:	89 c1                	mov    ecx,eax
c00282a4:	89 de                	mov    esi,ebx
c00282a6:	c1 ee 0b             	shr    esi,0xb
c00282a9:	09 f1                	or     ecx,esi
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	c1 e3 15             	shl    ebx,0x15
c00282b0:	89 d8                	mov    eax,ebx
c00282b2:	eb 04                	jmp    c00282b8 <__floatunsidf+0x3a>
c00282b4:	31 c0                	xor    eax,eax
c00282b6:	31 d2                	xor    edx,edx
c00282b8:	5b                   	pop    ebx
c00282b9:	5e                   	pop    esi
c00282ba:	5d                   	pop    ebp
c00282bb:	c3                   	ret    

c00282bc <__fixdfsi>:
c00282bc:	55                   	push   ebp
c00282bd:	89 e5                	mov    ebp,esp
c00282bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282c2:	89 d1                	mov    ecx,edx
c00282c4:	c1 e1 0b             	shl    ecx,0xb
c00282c7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282d0:	c1 e8 15             	shr    eax,0x15
c00282d3:	09 c1                	or     ecx,eax
c00282d5:	c1 fa 14             	sar    edx,0x14
c00282d8:	78 1f                	js     c00282f9 <__fixdfsi+0x3d>
c00282da:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282e0:	31 c0                	xor    eax,eax
c00282e2:	83 fa 1e             	cmp    edx,0x1e
c00282e5:	77 40                	ja     c0028327 <__fixdfsi+0x6b>
c00282e7:	89 c8                	mov    eax,ecx
c00282e9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282f3:	29 d1                	sub    ecx,edx
c00282f5:	d3 e8                	shr    eax,cl
c00282f7:	eb 2e                	jmp    c0028327 <__fixdfsi+0x6b>
c00282f9:	31 c0                	xor    eax,eax
c00282fb:	81 c2 01 04 00 00    	add    edx,0x401
c0028301:	78 24                	js     c0028327 <__fixdfsi+0x6b>
c0028303:	83 fa 1e             	cmp    edx,0x1e
c0028306:	7e 09                	jle    c0028311 <__fixdfsi+0x55>
c0028308:	83 fa 1f             	cmp    edx,0x1f
c002830b:	75 18                	jne    c0028325 <__fixdfsi+0x69>
c002830d:	85 c9                	test   ecx,ecx
c002830f:	75 14                	jne    c0028325 <__fixdfsi+0x69>
c0028311:	89 c8                	mov    eax,ecx
c0028313:	0d 00 00 00 80       	or     eax,0x80000000
c0028318:	b9 1f 00 00 00       	mov    ecx,0x1f
c002831d:	29 d1                	sub    ecx,edx
c002831f:	d3 e8                	shr    eax,cl
c0028321:	f7 d8                	neg    eax
c0028323:	eb 02                	jmp    c0028327 <__fixdfsi+0x6b>
c0028325:	31 c0                	xor    eax,eax
c0028327:	5d                   	pop    ebp
c0028328:	c3                   	ret    

c0028329 <__fixunsdfsi>:
c0028329:	55                   	push   ebp
c002832a:	89 e5                	mov    ebp,esp
c002832c:	53                   	push   ebx
c002832d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028330:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028333:	89 d3                	mov    ebx,edx
c0028335:	c1 fb 14             	sar    ebx,0x14
c0028338:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002833e:	31 c0                	xor    eax,eax
c0028340:	83 fb 1f             	cmp    ebx,0x1f
c0028343:	77 1d                	ja     c0028362 <__fixunsdfsi+0x39>
c0028345:	89 d0                	mov    eax,edx
c0028347:	c1 e0 0b             	shl    eax,0xb
c002834a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002834f:	c1 e9 15             	shr    ecx,0x15
c0028352:	09 c8                	or     eax,ecx
c0028354:	0d 00 00 00 80       	or     eax,0x80000000
c0028359:	b9 1f 00 00 00       	mov    ecx,0x1f
c002835e:	29 d9                	sub    ecx,ebx
c0028360:	d3 e8                	shr    eax,cl
c0028362:	5b                   	pop    ebx
c0028363:	5d                   	pop    ebp
c0028364:	c3                   	ret    

c0028365 <__cmpdf2>:
c0028365:	55                   	push   ebp
c0028366:	89 e5                	mov    ebp,esp
c0028368:	57                   	push   edi
c0028369:	56                   	push   esi
c002836a:	53                   	push   ebx
c002836b:	83 ec 0c             	sub    esp,0xc
c002836e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028371:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028374:	89 ca                	mov    edx,ecx
c0028376:	c1 ea 14             	shr    edx,0x14
c0028379:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002837f:	89 cb                	mov    ebx,ecx
c0028381:	c1 fb 1f             	sar    ebx,0x1f
c0028384:	31 da                	xor    edx,ebx
c0028386:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028389:	89 df                	mov    edi,ebx
c002838b:	c1 e7 0b             	shl    edi,0xb
c002838e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028391:	c1 e1 0b             	shl    ecx,0xb
c0028394:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002839a:	c1 eb 15             	shr    ebx,0x15
c002839d:	09 d9                	or     ecx,ebx
c002839f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283a5:	89 ce                	mov    esi,ecx
c00283a7:	c1 ee 14             	shr    esi,0x14
c00283aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283b0:	89 cb                	mov    ebx,ecx
c00283b2:	c1 fb 1f             	sar    ebx,0x1f
c00283b5:	31 de                	xor    esi,ebx
c00283b7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ba:	89 df                	mov    edi,ebx
c00283bc:	c1 e7 0b             	shl    edi,0xb
c00283bf:	c1 e1 0b             	shl    ecx,0xb
c00283c2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283c8:	c1 eb 15             	shr    ebx,0x15
c00283cb:	09 d9                	or     ecx,ebx
c00283cd:	89 d3                	mov    ebx,edx
c00283cf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283d5:	43                   	inc    ebx
c00283d6:	83 fb 01             	cmp    ebx,0x1
c00283d9:	77 08                	ja     c00283e3 <__cmpdf2+0x7e>
c00283db:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283de:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283e1:	75 68                	jne    c002844b <__cmpdf2+0xe6>
c00283e3:	89 f3                	mov    ebx,esi
c00283e5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283eb:	43                   	inc    ebx
c00283ec:	83 fb 01             	cmp    ebx,0x1
c00283ef:	77 06                	ja     c00283f7 <__cmpdf2+0x92>
c00283f1:	89 fb                	mov    ebx,edi
c00283f3:	09 cb                	or     ebx,ecx
c00283f5:	75 54                	jne    c002844b <__cmpdf2+0xe6>
c00283f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283fa:	09 f8                	or     eax,edi
c00283fc:	09 c8                	or     eax,ecx
c00283fe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028401:	75 12                	jne    c0028415 <__cmpdf2+0xb0>
c0028403:	8d 42 01             	lea    eax,[edx+0x1]
c0028406:	83 f8 01             	cmp    eax,0x1
c0028409:	77 0a                	ja     c0028415 <__cmpdf2+0xb0>
c002840b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002840e:	31 c0                	xor    eax,eax
c0028410:	83 fb 01             	cmp    ebx,0x1
c0028413:	76 36                	jbe    c002844b <__cmpdf2+0xe6>
c0028415:	b8 01 00 00 00       	mov    eax,0x1
c002841a:	39 f2                	cmp    edx,esi
c002841c:	7f 2d                	jg     c002844b <__cmpdf2+0xe6>
c002841e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028423:	7c 26                	jl     c002844b <__cmpdf2+0xe6>
c0028425:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028428:	77 07                	ja     c0028431 <__cmpdf2+0xcc>
c002842a:	72 16                	jb     c0028442 <__cmpdf2+0xdd>
c002842c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002842f:	76 0a                	jbe    c002843b <__cmpdf2+0xd6>
c0028431:	89 d0                	mov    eax,edx
c0028433:	c1 f8 1f             	sar    eax,0x1f
c0028436:	83 c8 01             	or     eax,0x1
c0028439:	eb 10                	jmp    c002844b <__cmpdf2+0xe6>
c002843b:	b8 00 00 00 00       	mov    eax,0x0
c0028440:	73 09                	jae    c002844b <__cmpdf2+0xe6>
c0028442:	89 d0                	mov    eax,edx
c0028444:	c1 f8 1f             	sar    eax,0x1f
c0028447:	83 e0 02             	and    eax,0x2
c002844a:	48                   	dec    eax
c002844b:	83 c4 0c             	add    esp,0xc
c002844e:	5b                   	pop    ebx
c002844f:	5e                   	pop    esi
c0028450:	5f                   	pop    edi
c0028451:	5d                   	pop    ebp
c0028452:	c3                   	ret    

c0028453 <__eqdf2>:
c0028453:	55                   	push   ebp
c0028454:	89 e5                	mov    ebp,esp
c0028456:	50                   	push   eax
c0028457:	6a 01                	push   0x1
c0028459:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002845c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002845f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028465:	e8 fb fe ff ff       	call   c0028365 <__cmpdf2>
c002846a:	83 c4 18             	add    esp,0x18
c002846d:	c9                   	leave  
c002846e:	c3                   	ret    

c002846f <__nedf2>:
c002846f:	eb e2                	jmp    c0028453 <__eqdf2>

c0028471 <__gtdf2>:
c0028471:	55                   	push   ebp
c0028472:	89 e5                	mov    ebp,esp
c0028474:	50                   	push   eax
c0028475:	6a ff                	push   0xffffffff
c0028477:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002847a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002847d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028483:	e8 dd fe ff ff       	call   c0028365 <__cmpdf2>
c0028488:	83 c4 18             	add    esp,0x18
c002848b:	c9                   	leave  
c002848c:	c3                   	ret    

c002848d <__gedf2>:
c002848d:	eb e2                	jmp    c0028471 <__gtdf2>

c002848f <__ltdf2>:
c002848f:	eb c2                	jmp    c0028453 <__eqdf2>

c0028491 <__ledf2>:
c0028491:	eb c0                	jmp    c0028453 <__eqdf2>

c0028493 <__truncdfsf2>:
c0028493:	55                   	push   ebp
c0028494:	89 e5                	mov    ebp,esp
c0028496:	57                   	push   edi
c0028497:	56                   	push   esi
c0028498:	53                   	push   ebx
c0028499:	83 ec 0c             	sub    esp,0xc
c002849c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002849f:	89 d1                	mov    ecx,edx
c00284a1:	c1 f9 14             	sar    ecx,0x14
c00284a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284a7:	89 df                	mov    edi,ebx
c00284a9:	c1 e7 0b             	shl    edi,0xb
c00284ac:	89 d0                	mov    eax,edx
c00284ae:	c1 e0 0b             	shl    eax,0xb
c00284b1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284b6:	c1 eb 15             	shr    ebx,0x15
c00284b9:	09 d8                	or     eax,ebx
c00284bb:	89 cb                	mov    ebx,ecx
c00284bd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284c3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284c9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284cf:	0f 86 9e 00 00 00    	jbe    c0028573 <__truncdfsf2+0xe0>
c00284d5:	85 db                	test   ebx,ebx
c00284d7:	75 0a                	jne    c00284e3 <__truncdfsf2+0x50>
c00284d9:	c1 fa 17             	sar    edx,0x17
c00284dc:	30 d2                	xor    dl,dl
c00284de:	e9 84 00 00 00       	jmp    c0028567 <__truncdfsf2+0xd4>
c00284e3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284e9:	83 fe 83             	cmp    esi,0xffffff83
c00284ec:	7d 4b                	jge    c0028539 <__truncdfsf2+0xa6>
c00284ee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284f3:	29 f1                	sub    ecx,esi
c00284f5:	83 f9 1f             	cmp    ecx,0x1f
c00284f8:	7f 6b                	jg     c0028565 <__truncdfsf2+0xd2>
c00284fa:	0d 00 00 00 80       	or     eax,0x80000000
c00284ff:	89 c3                	mov    ebx,eax
c0028501:	d3 eb                	shr    ebx,cl
c0028503:	be 01 00 00 00       	mov    esi,0x1
c0028508:	d3 e6                	shl    esi,cl
c002850a:	4e                   	dec    esi
c002850b:	21 f0                	and    eax,esi
c002850d:	09 f8                	or     eax,edi
c002850f:	0f 95 c0             	setne  al
c0028512:	0f b6 c0             	movzx  eax,al
c0028515:	09 c3                	or     ebx,eax
c0028517:	89 d9                	mov    ecx,ebx
c0028519:	c1 e9 08             	shr    ecx,0x8
c002851c:	f6 c3 7f             	test   bl,0x7f
c002851f:	0f 95 c0             	setne  al
c0028522:	09 c8                	or     eax,ecx
c0028524:	83 e0 01             	and    eax,0x1
c0028527:	c1 eb 07             	shr    ebx,0x7
c002852a:	21 c3                	and    ebx,eax
c002852c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028532:	09 d1                	or     ecx,edx
c0028534:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028537:	eb 76                	jmp    c00285af <__truncdfsf2+0x11c>
c0028539:	83 c6 80             	add    esi,0xffffff80
c002853c:	7e 1d                	jle    c002855b <__truncdfsf2+0xc8>
c002853e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028544:	75 0b                	jne    c0028551 <__truncdfsf2+0xbe>
c0028546:	09 f8                	or     eax,edi
c0028548:	74 09                	je     c0028553 <__truncdfsf2+0xc0>
c002854a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002854f:	eb 02                	jmp    c0028553 <__truncdfsf2+0xc0>
c0028551:	31 c0                	xor    eax,eax
c0028553:	c1 fa 17             	sar    edx,0x17
c0028556:	80 ca ff             	or     dl,0xff
c0028559:	eb 0e                	jmp    c0028569 <__truncdfsf2+0xd6>
c002855b:	c1 fa 1f             	sar    edx,0x1f
c002855e:	c1 e2 08             	shl    edx,0x8
c0028561:	09 ca                	or     edx,ecx
c0028563:	eb 04                	jmp    c0028569 <__truncdfsf2+0xd6>
c0028565:	31 d2                	xor    edx,edx
c0028567:	31 c0                	xor    eax,eax
c0028569:	c1 e2 17             	shl    edx,0x17
c002856c:	c1 e8 08             	shr    eax,0x8
c002856f:	09 d0                	or     eax,edx
c0028571:	eb 3c                	jmp    c00285af <__truncdfsf2+0x11c>
c0028573:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028579:	89 ca                	mov    edx,ecx
c002857b:	c1 fa 0b             	sar    edx,0xb
c002857e:	c1 e2 08             	shl    edx,0x8
c0028581:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028584:	31 db                	xor    ebx,ebx
c0028586:	85 ff                	test   edi,edi
c0028588:	0f 95 c3             	setne  bl
c002858b:	09 d8                	or     eax,ebx
c002858d:	89 c3                	mov    ebx,eax
c002858f:	c1 eb 08             	shr    ebx,0x8
c0028592:	a8 7f                	test   al,0x7f
c0028594:	0f 95 c2             	setne  dl
c0028597:	89 d6                	mov    esi,edx
c0028599:	09 de                	or     esi,ebx
c002859b:	83 e6 01             	and    esi,0x1
c002859e:	c1 e8 07             	shr    eax,0x7
c00285a1:	21 f0                	and    eax,esi
c00285a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285a6:	09 ca                	or     edx,ecx
c00285a8:	c1 e2 17             	shl    edx,0x17
c00285ab:	09 da                	or     edx,ebx
c00285ad:	01 d0                	add    eax,edx
c00285af:	83 c4 0c             	add    esp,0xc
c00285b2:	5b                   	pop    ebx
c00285b3:	5e                   	pop    esi
c00285b4:	5f                   	pop    edi
c00285b5:	5d                   	pop    ebp
c00285b6:	c3                   	ret    

c00285b7 <__extendsfdf2>:
c00285b7:	55                   	push   ebp
c00285b8:	89 e5                	mov    ebp,esp
c00285ba:	57                   	push   edi
c00285bb:	56                   	push   esi
c00285bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285bf:	89 d1                	mov    ecx,edx
c00285c1:	c1 f9 17             	sar    ecx,0x17
c00285c4:	c1 e2 08             	shl    edx,0x8
c00285c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285cd:	89 c8                	mov    eax,ecx
c00285cf:	80 e4 f8             	and    ah,0xf8
c00285d2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285d5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285db:	75 27                	jne    c0028604 <__extendsfdf2+0x4d>
c00285dd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285e3:	75 18                	jne    c00285fd <__extendsfdf2+0x46>
c00285e5:	85 d2                	test   edx,edx
c00285e7:	74 20                	je     c0028609 <__extendsfdf2+0x52>
c00285e9:	41                   	inc    ecx
c00285ea:	01 d2                	add    edx,edx
c00285ec:	79 fb                	jns    c00285e9 <__extendsfdf2+0x32>
c00285ee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285f4:	29 c8                	sub    eax,ecx
c00285f6:	05 81 03 00 00       	add    eax,0x381
c00285fb:	eb 0c                	jmp    c0028609 <__extendsfdf2+0x52>
c00285fd:	05 00 07 00 00       	add    eax,0x700
c0028602:	eb 05                	jmp    c0028609 <__extendsfdf2+0x52>
c0028604:	05 80 03 00 00       	add    eax,0x380
c0028609:	c1 e0 14             	shl    eax,0x14
c002860c:	89 c1                	mov    ecx,eax
c002860e:	89 d0                	mov    eax,edx
c0028610:	c1 e8 0b             	shr    eax,0xb
c0028613:	09 c1                	or     ecx,eax
c0028615:	c1 e2 15             	shl    edx,0x15
c0028618:	89 d0                	mov    eax,edx
c002861a:	89 ca                	mov    edx,ecx
c002861c:	5e                   	pop    esi
c002861d:	5f                   	pop    edi
c002861e:	5d                   	pop    ebp
c002861f:	c3                   	ret    

c0028620 <fabs>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028627:	89 04 24             	mov    DWORD PTR [esp],eax
c002862a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002862e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028633:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028637:	dd 04 24             	fld    QWORD PTR [esp]
c002863a:	83 c4 0c             	add    esp,0xc
c002863d:	c3                   	ret    
c002863e:	66 90                	xchg   ax,ax

c0028640 <lrint>:
c0028640:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028644:	83 ec 04             	sub    esp,0x4
c0028647:	db 1c 24             	fistp  DWORD PTR [esp]
c002864a:	58                   	pop    eax
c002864b:	c3                   	ret    

c002864c <lrintf>:
c002864c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028650:	83 ec 04             	sub    esp,0x4
c0028653:	db 1c 24             	fistp  DWORD PTR [esp]
c0028656:	58                   	pop    eax
c0028657:	c3                   	ret    

Disassembly of section .init:

c0028658 <_init>:
c0028658:	55                   	push   ebp
c0028659:	89 e5                	mov    ebp,esp
c002865b:	e8 b8 7a fd ff       	call   c0000118 <frame_dummy>
c0028660:	e8 63 e0 ff ff       	call   c00266c8 <__do_global_ctors_aux>
c0028665:	5d                   	pop    ebp
c0028666:	c3                   	ret    

Disassembly of section .fini:

c0028667 <_fini>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	e8 39 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002866f:	5d                   	pop    ebp
c0028670:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028672 <Computer::~Computer()>:
c0028672:	83 ec 0c             	sub    esp,0xc
c0028675:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	89 10                	mov    DWORD PTR [eax],edx
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	83 ec 0c             	sub    esp,0xc
c0028687:	50                   	push   eax
c0028688:	e8 c9 bb fe ff       	call   c0014256 <Device::~Device()>
c002868d:	83 c4 10             	add    esp,0x10
c0028690:	90                   	nop
c0028691:	83 c4 0c             	add    esp,0xc
c0028694:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028696 <Computer::~Computer()>:
c0028696:	83 ec 0c             	sub    esp,0xc
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a0:	e8 cd ff ff ff       	call   c0028672 <Computer::~Computer()>
c00286a5:	83 c4 10             	add    esp,0x10
c00286a8:	83 ec 08             	sub    esp,0x8
c00286ab:	68 ec 01 00 00       	push   0x1ec
c00286b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b4:	e8 c5 a7 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00286b9:	83 c4 10             	add    esp,0x10
c00286bc:	83 c4 0c             	add    esp,0xc
c00286bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286c0 <idleCommon()>:
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	e8 12 57 ff ff       	call   c001ddda <lockScheduler()>
c00286c8:	e8 49 5a ff ff       	call   c001e116 <schedule()>
c00286cd:	83 c4 0c             	add    esp,0xc
c00286d0:	e9 07 57 ff ff       	jmp    c001dddc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286d6 <LinkedList<UnixFile>::~LinkedList()>:
c00286d6:	90                   	nop
c00286d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286d8 <LinkedList<UnixFile>::LinkedList()>:
c00286d8:	83 ec 0c             	sub    esp,0xc
c00286db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871b:	83 ec 0c             	sub    esp,0xc
c002871e:	68 66 a4 02 c0       	push   0xc002a466
c0028723:	e8 36 a8 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0028728:	83 c4 10             	add    esp,0x10
c002872b:	90                   	nop
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 80 a4 02 c0       	push   0xc002a480
c0028742:	e8 b8 1e ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 a2 a4 02 c0       	push   0xc002a4a2
c00287d3:	e8 27 1e ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 ac a4 02 c0       	push   0xc002a4ac
c00287e5:	e8 15 1e ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028804 <LinkedList<UnixFile>::getFirstElement()>:
c0028804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028808:	8b 00                	mov    eax,DWORD PTR [eax]
c002880a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002880c <LinkedList<UnixFile>::removeFirst()>:
c002880c:	83 ec 0c             	sub    esp,0xc
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 00                	mov    eax,DWORD PTR [eax]
c0028815:	85 c0                	test   eax,eax
c0028817:	75 12                	jne    c002882b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028819:	83 ec 0c             	sub    esp,0xc
c002881c:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028821:	e8 d9 1d ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028826:	83 c4 10             	add    esp,0x10
c0028829:	eb 7e                	jmp    c00288a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028835:	85 c0                	test   eax,eax
c0028837:	74 10                	je     c0028849 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 03 a5 02 c0       	push   0xc002a503
c0028841:	e8 b9 1d ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884d:	8b 00                	mov    eax,DWORD PTR [eax]
c002884f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028852:	85 c0                	test   eax,eax
c0028854:	75 33                	jne    c0028889 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028872:	83 f8 01             	cmp    eax,0x1
c0028875:	74 21                	je     c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028877:	83 ec 0c             	sub    esp,0xc
c002887a:	68 dc a4 02 c0       	push   0xc002a4dc
c002887f:	e8 7b 1d ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028884:	83 c4 10             	add    esp,0x10
c0028887:	eb 0f                	jmp    c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888d:	8b 00                	mov    eax,DWORD PTR [eax]
c002888f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 10                	mov    DWORD PTR [eax],edx
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002889f:	8d 50 ff             	lea    edx,[eax-0x1]
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288a9:	83 c4 0c             	add    esp,0xc
c00288ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288b6 <DriverlessDevice::~DriverlessDevice()>:
c00288b6:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c00288bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288bf:	89 10                	mov    DWORD PTR [eax],edx
c00288c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c5:	50                   	push   eax
c00288c6:	e8 8b b9 fe ff       	call   c0014256 <Device::~Device()>
c00288cb:	83 c4 04             	add    esp,0x4
c00288ce:	90                   	nop
c00288cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288d0 <DriverlessDevice::~DriverlessDevice()>:
c00288d0:	83 ec 0c             	sub    esp,0xc
c00288d3:	83 ec 0c             	sub    esp,0xc
c00288d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288da:	e8 d7 ff ff ff       	call   c00288b6 <DriverlessDevice::~DriverlessDevice()>
c00288df:	83 c4 10             	add    esp,0x10
c00288e2:	83 ec 08             	sub    esp,0x8
c00288e5:	68 58 01 00 00       	push   0x158
c00288ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ee:	e8 8b a5 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	83 c4 0c             	add    esp,0xc
c00288f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288fa <LinkedList<Device>::addElement(Device*)>:
c00288fa:	83 ec 0c             	sub    esp,0xc
c00288fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028902:	75 10                	jne    c0028914 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	68 80 a4 02 c0       	push   0xc002a480
c002890c:	e8 ee 1c ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028911:	83 c4 10             	add    esp,0x10
c0028914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028918:	8b 00                	mov    eax,DWORD PTR [eax]
c002891a:	85 c0                	test   eax,eax
c002891c:	74 3a                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c002891e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028925:	85 c0                	test   eax,eax
c0028927:	74 2f                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028934:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028942:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028956:	eb 68                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 00                	mov    eax,DWORD PTR [eax]
c002895e:	85 c0                	test   eax,eax
c0028960:	75 4e                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	85 c0                	test   eax,eax
c002896b:	75 43                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028975:	89 10                	mov    DWORD PTR [eax],edx
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002897f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002899a:	85 c0                	test   eax,eax
c002899c:	74 22                	je     c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002899e:	83 ec 0c             	sub    esp,0xc
c00289a1:	68 a2 a4 02 c0       	push   0xc002a4a2
c00289a6:	e8 54 1c ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	eb 10                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	68 ac a4 02 c0       	push   0xc002a4ac
c00289b8:	e8 42 1c ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c00289bd:	83 c4 10             	add    esp,0x10
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289d1:	90                   	nop
c00289d2:	83 c4 0c             	add    esp,0xc
c00289d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289d6 <LinkedList<Device>::LinkedList()>:
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a19:	83 ec 0c             	sub    esp,0xc
c0028a1c:	68 66 a4 02 c0       	push   0xc002a466
c0028a21:	e8 38 a5 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0028a26:	83 c4 10             	add    esp,0x10
c0028a29:	90                   	nop
c0028a2a:	83 c4 0c             	add    esp,0xc
c0028a2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3c:	85 c0                	test   eax,eax
c0028a3e:	75 0e                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a47:	85 c0                	test   eax,eax
c0028a49:	75 03                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a4b:	b0 01                	mov    al,0x1
c0028a4d:	c3                   	ret    
c0028a4e:	b0 00                	mov    al,0x0
c0028a50:	90                   	nop
c0028a51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a52:	83 ec 0c             	sub    esp,0xc
c0028a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5b:	85 c0                	test   eax,eax
c0028a5d:	75 15                	jne    c0028a74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a5f:	83 ec 0c             	sub    esp,0xc
c0028a62:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028a67:	e8 93 1b ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028a6c:	83 c4 10             	add    esp,0x10
c0028a6f:	e9 88 00 00 00       	jmp    c0028afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a7e:	85 c0                	test   eax,eax
c0028a80:	0f 95 c0             	setne  al
c0028a83:	84 c0                	test   al,al
c0028a85:	74 10                	je     c0028a97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a87:	83 ec 0c             	sub    esp,0xc
c0028a8a:	68 03 a5 02 c0       	push   0xc002a503
c0028a8f:	e8 6b 1b ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028a94:	83 c4 10             	add    esp,0x10
c0028a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aa0:	85 c0                	test   eax,eax
c0028aa2:	0f 94 c0             	sete   al
c0028aa5:	84 c0                	test   al,al
c0028aa7:	74 33                	je     c0028adc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ac5:	83 f8 01             	cmp    eax,0x1
c0028ac8:	74 21                	je     c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	68 dc a4 02 c0       	push   0xc002a4dc
c0028ad2:	e8 28 1b ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	eb 0f                	jmp    c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 10                	mov    DWORD PTR [eax],edx
c0028aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028af2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028afc:	83 c4 0c             	add    esp,0xc
c0028aff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b00:	83 ec 0c             	sub    esp,0xc
c0028b03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b08:	75 10                	jne    c0028b1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	68 80 a4 02 c0       	push   0xc002a480
c0028b12:	e8 e8 1a ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b20:	85 c0                	test   eax,eax
c0028b22:	74 34                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2b:	85 c0                	test   eax,eax
c0028b2d:	74 29                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b56:	eb 65                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	75 4b                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b69:	85 c0                	test   eax,eax
c0028b6b:	75 40                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 10                	mov    DWORD PTR [eax],edx
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b97:	85 c0                	test   eax,eax
c0028b99:	74 22                	je     c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9b:	83 ec 0c             	sub    esp,0xc
c0028b9e:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028ba3:	e8 57 1a ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028ba8:	83 c4 10             	add    esp,0x10
c0028bab:	eb 10                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bad:	83 ec 0c             	sub    esp,0xc
c0028bb0:	68 ac a4 02 c0       	push   0xc002a4ac
c0028bb5:	e8 45 1a ff ff       	call   c001a5ff <Krnl::panic(char const*)>
c0028bba:	83 c4 10             	add    esp,0x10
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bce:	90                   	nop
c0028bcf:	83 c4 0c             	add    esp,0xc
c0028bd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bd4 <ACPI::~ACPI()>:
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	89 10                	mov    DWORD PTR [eax],edx
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	50                   	push   eax
c0028bea:	e8 67 b6 fe ff       	call   c0014256 <Device::~Device()>
c0028bef:	83 c4 10             	add    esp,0x10
c0028bf2:	90                   	nop
c0028bf3:	83 c4 0c             	add    esp,0xc
c0028bf6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bf8 <ACPI::~ACPI()>:
c0028bf8:	83 ec 0c             	sub    esp,0xc
c0028bfb:	83 ec 0c             	sub    esp,0xc
c0028bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c02:	e8 cd ff ff ff       	call   c0028bd4 <ACPI::~ACPI()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	83 ec 08             	sub    esp,0x8
c0028c0d:	68 68 12 00 00       	push   0x1268
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 63 a2 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 c4 0c             	add    esp,0xc
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c22 <CPU::~CPU()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	ba 9c b9 02 c0       	mov    edx,0xc002b99c
c0028c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2e:	89 10                	mov    DWORD PTR [eax],edx
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	50                   	push   eax
c0028c38:	e8 19 b6 fe ff       	call   c0014256 <Device::~Device()>
c0028c3d:	83 c4 10             	add    esp,0x10
c0028c40:	90                   	nop
c0028c41:	83 c4 0c             	add    esp,0xc
c0028c44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c46 <CPU::~CPU()>:
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	83 ec 0c             	sub    esp,0xc
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 cd ff ff ff       	call   c0028c22 <CPU::~CPU()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 ec 08             	sub    esp,0x8
c0028c5b:	68 98 11 00 00       	push   0x1198
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 15 a2 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 c4 0c             	add    esp,0xc
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c70 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c70:	90                   	nop
c0028c71:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c72 <ThreadControlBlock::ThreadControlBlock()>:
c0028c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c76:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c81:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c97:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028caa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cae:	90                   	nop
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf3:	83 ec 0c             	sub    esp,0xc
c0028cf6:	68 66 a4 02 c0       	push   0xc002a466
c0028cfb:	e8 5e a2 fe ff       	call   c0012f5e <Dbg::kprintf(char const*, ...)>
c0028d00:	83 c4 10             	add    esp,0x10
c0028d03:	90                   	nop
c0028d04:	83 c4 0c             	add    esp,0xc
c0028d07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d0f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d10 <Vm::_FPUState::_FPUState()>:
c0028d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d14:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d1b:	90                   	nop
c0028d1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d1e <PCI::~PCI()>:
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	ba 10 ca 02 c0       	mov    edx,0xc002ca10
c0028d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2a:	89 10                	mov    DWORD PTR [eax],edx
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	50                   	push   eax
c0028d34:	e8 f5 ae fe ff       	call   c0013c2e <Bus::~Bus()>
c0028d39:	83 c4 10             	add    esp,0x10
c0028d3c:	90                   	nop
c0028d3d:	83 c4 0c             	add    esp,0xc
c0028d40:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d42 <PCI::~PCI()>:
c0028d42:	83 ec 0c             	sub    esp,0xc
c0028d45:	83 ec 0c             	sub    esp,0xc
c0028d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4c:	e8 cd ff ff ff       	call   c0028d1e <PCI::~PCI()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	83 ec 08             	sub    esp,0x8
c0028d57:	68 58 01 00 00       	push   0x158
c0028d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d60:	e8 19 a1 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	83 c4 0c             	add    esp,0xc
c0028d6b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d6c <IDE::~IDE()>:
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	ba 74 cc 02 c0       	mov    edx,0xc002cc74
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	89 10                	mov    DWORD PTR [eax],edx
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	50                   	push   eax
c0028d82:	e8 bf b9 fe ff       	call   c0014746 <HardDiskController::~HardDiskController()>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	90                   	nop
c0028d8b:	83 c4 0c             	add    esp,0xc
c0028d8e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d90 <IDE::~IDE()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	83 ec 0c             	sub    esp,0xc
c0028d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9a:	e8 cd ff ff ff       	call   c0028d6c <IDE::~IDE()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	83 ec 08             	sub    esp,0x8
c0028da5:	68 70 02 00 00       	push   0x270
c0028daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dae:	e8 cb a0 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	83 c4 0c             	add    esp,0xc
c0028db9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dba <SATABus::~SATABus()>:
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	ba 54 cd 02 c0       	mov    edx,0xc002cd54
c0028dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc6:	89 10                	mov    DWORD PTR [eax],edx
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	50                   	push   eax
c0028dd0:	e8 71 b9 fe ff       	call   c0014746 <HardDiskController::~HardDiskController()>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	90                   	nop
c0028dd9:	83 c4 0c             	add    esp,0xc
c0028ddc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dde <SATABus::~SATABus()>:
c0028dde:	83 ec 0c             	sub    esp,0xc
c0028de1:	83 ec 0c             	sub    esp,0xc
c0028de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de8:	e8 cd ff ff ff       	call   c0028dba <SATABus::~SATABus()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	83 ec 08             	sub    esp,0x8
c0028df3:	68 64 01 00 00       	push   0x164
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 7d a0 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e08 <ATA::~ATA()>:
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	ba a0 cd 02 c0       	mov    edx,0xc002cda0
c0028e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e14:	89 10                	mov    DWORD PTR [eax],edx
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	83 ec 0c             	sub    esp,0xc
c0028e1d:	50                   	push   eax
c0028e1e:	e8 15 ba fe ff       	call   c0014838 <PhysicalDisk::~PhysicalDisk()>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	90                   	nop
c0028e27:	83 c4 0c             	add    esp,0xc
c0028e2a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e2c <ATA::~ATA()>:
c0028e2c:	83 ec 0c             	sub    esp,0xc
c0028e2f:	83 ec 0c             	sub    esp,0xc
c0028e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e36:	e8 cd ff ff ff       	call   c0028e08 <ATA::~ATA()>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	83 ec 08             	sub    esp,0x8
c0028e41:	68 7c 01 00 00       	push   0x17c
c0028e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4a:	e8 2f a0 fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	83 c4 0c             	add    esp,0xc
c0028e55:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e56 <ATAPI::~ATAPI()>:
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	ba d8 cd 02 c0       	mov    edx,0xc002cdd8
c0028e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e62:	89 10                	mov    DWORD PTR [eax],edx
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	50                   	push   eax
c0028e6c:	e8 c7 b9 fe ff       	call   c0014838 <PhysicalDisk::~PhysicalDisk()>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	90                   	nop
c0028e75:	83 c4 0c             	add    esp,0xc
c0028e78:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e7a <ATAPI::~ATAPI()>:
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	83 ec 0c             	sub    esp,0xc
c0028e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e84:	e8 cd ff ff ff       	call   c0028e56 <ATAPI::~ATAPI()>
c0028e89:	83 c4 10             	add    esp,0x10
c0028e8c:	83 ec 08             	sub    esp,0x8
c0028e8f:	68 80 01 00 00       	push   0x180
c0028e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e98:	e8 e1 9f fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	83 c4 0c             	add    esp,0xc
c0028ea3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ea4 <SATA::~SATA()>:
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0028eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb0:	89 10                	mov    DWORD PTR [eax],edx
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	50                   	push   eax
c0028eba:	e8 79 b9 fe ff       	call   c0014838 <PhysicalDisk::~PhysicalDisk()>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	90                   	nop
c0028ec3:	83 c4 0c             	add    esp,0xc
c0028ec6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ec8 <SATA::~SATA()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed2:	e8 cd ff ff ff       	call   c0028ea4 <SATA::~SATA()>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	83 ec 08             	sub    esp,0x8
c0028edd:	68 7c 01 00 00       	push   0x17c
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 93 9f fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 c4 0c             	add    esp,0xc
c0028ef1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ef2 <SATAPI::~SATAPI()>:
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0028efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efe:	89 10                	mov    DWORD PTR [eax],edx
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	50                   	push   eax
c0028f08:	e8 2b b9 fe ff       	call   c0014838 <PhysicalDisk::~PhysicalDisk()>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	90                   	nop
c0028f11:	83 c4 0c             	add    esp,0xc
c0028f14:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f16 <SATAPI::~SATAPI()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	83 ec 0c             	sub    esp,0xc
c0028f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f20:	e8 cd ff ff ff       	call   c0028ef2 <SATAPI::~SATAPI()>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	83 ec 08             	sub    esp,0x8
c0028f2b:	68 80 01 00 00       	push   0x180
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 45 9f fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 c4 0c             	add    esp,0xc
c0028f3f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f40 <AVX::~AVX()>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c0028f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4c:	89 10                	mov    DWORD PTR [eax],edx
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	50                   	push   eax
c0028f56:	e8 61 b9 fe ff       	call   c00148bc <FPU::~FPU()>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	90                   	nop
c0028f5f:	83 c4 0c             	add    esp,0xc
c0028f62:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f64 <AVX::~AVX()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	83 ec 0c             	sub    esp,0xc
c0028f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6e:	e8 cd ff ff ff       	call   c0028f40 <AVX::~AVX()>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	83 ec 08             	sub    esp,0x8
c0028f79:	68 58 01 00 00       	push   0x158
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 f7 9e fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 c4 0c             	add    esp,0xc
c0028f8d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f8e <MMX::~MMX()>:
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	89 10                	mov    DWORD PTR [eax],edx
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	50                   	push   eax
c0028fa4:	e8 13 b9 fe ff       	call   c00148bc <FPU::~FPU()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	90                   	nop
c0028fad:	83 c4 0c             	add    esp,0xc
c0028fb0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fb2 <MMX::~MMX()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	83 ec 0c             	sub    esp,0xc
c0028fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbc:	e8 cd ff ff ff       	call   c0028f8e <MMX::~MMX()>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	83 ec 08             	sub    esp,0x8
c0028fc7:	68 58 01 00 00       	push   0x158
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 a9 9e fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 c4 0c             	add    esp,0xc
c0028fdb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fdc <SSE::~SSE()>:
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	89 10                	mov    DWORD PTR [eax],edx
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	83 ec 0c             	sub    esp,0xc
c0028ff1:	50                   	push   eax
c0028ff2:	e8 c5 b8 fe ff       	call   c00148bc <FPU::~FPU()>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029000 <SSE::~SSE()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	83 ec 0c             	sub    esp,0xc
c0029006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900a:	e8 cd ff ff ff       	call   c0028fdc <SSE::~SSE()>
c002900f:	83 c4 10             	add    esp,0x10
c0029012:	83 ec 08             	sub    esp,0x8
c0029015:	68 58 01 00 00       	push   0x158
c002901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901e:	e8 5b 9e fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	83 c4 0c             	add    esp,0xc
c0029029:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002902a <x87::~x87()>:
c002902a:	83 ec 0c             	sub    esp,0xc
c002902d:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0029032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029036:	89 10                	mov    DWORD PTR [eax],edx
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	83 ec 0c             	sub    esp,0xc
c002903f:	50                   	push   eax
c0029040:	e8 77 b8 fe ff       	call   c00148bc <FPU::~FPU()>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	90                   	nop
c0029049:	83 c4 0c             	add    esp,0xc
c002904c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002904e <x87::~x87()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	83 ec 0c             	sub    esp,0xc
c0029054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029058:	e8 cd ff ff ff       	call   c002902a <x87::~x87()>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	83 ec 08             	sub    esp,0x8
c0029063:	68 58 01 00 00       	push   0x158
c0029068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906c:	e8 0d 9e fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c0029071:	83 c4 10             	add    esp,0x10
c0029074:	83 c4 0c             	add    esp,0xc
c0029077:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029078 <IOAPIC::~IOAPIC()>:
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	ba c0 d1 02 c0       	mov    edx,0xc002d1c0
c0029080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029084:	89 10                	mov    DWORD PTR [eax],edx
c0029086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908a:	83 ec 0c             	sub    esp,0xc
c002908d:	50                   	push   eax
c002908e:	e8 c3 b1 fe ff       	call   c0014256 <Device::~Device()>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	90                   	nop
c0029097:	83 c4 0c             	add    esp,0xc
c002909a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002909c <IOAPIC::~IOAPIC()>:
c002909c:	83 ec 0c             	sub    esp,0xc
c002909f:	83 ec 0c             	sub    esp,0xc
c00290a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a6:	e8 cd ff ff ff       	call   c0029078 <IOAPIC::~IOAPIC()>
c00290ab:	83 c4 10             	add    esp,0x10
c00290ae:	83 ec 08             	sub    esp,0x8
c00290b1:	68 68 01 00 00       	push   0x168
c00290b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ba:	e8 bf 9d fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00290bf:	83 c4 10             	add    esp,0x10
c00290c2:	83 c4 0c             	add    esp,0xc
c00290c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290c6 <APIC::~APIC()>:
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	89 10                	mov    DWORD PTR [eax],edx
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	83 ec 0c             	sub    esp,0xc
c00290db:	50                   	push   eax
c00290dc:	e8 a5 bc fe ff       	call   c0014d86 <InterruptController::~InterruptController()>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	90                   	nop
c00290e5:	83 c4 0c             	add    esp,0xc
c00290e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290ea <APIC::~APIC()>:
c00290ea:	83 ec 0c             	sub    esp,0xc
c00290ed:	83 ec 0c             	sub    esp,0xc
c00290f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f4:	e8 cd ff ff ff       	call   c00290c6 <APIC::~APIC()>
c00290f9:	83 c4 10             	add    esp,0x10
c00290fc:	83 ec 08             	sub    esp,0x8
c00290ff:	68 58 21 00 00       	push   0x2158
c0029104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029108:	e8 71 9d fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	83 c4 0c             	add    esp,0xc
c0029113:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029114 <PIC::~PIC()>:
c0029114:	83 ec 0c             	sub    esp,0xc
c0029117:	ba 10 d2 02 c0       	mov    edx,0xc002d210
c002911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029120:	89 10                	mov    DWORD PTR [eax],edx
c0029122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	50                   	push   eax
c002912a:	e8 57 bc fe ff       	call   c0014d86 <InterruptController::~InterruptController()>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	90                   	nop
c0029133:	83 c4 0c             	add    esp,0xc
c0029136:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029138 <PIC::~PIC()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	83 ec 0c             	sub    esp,0xc
c002913e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029142:	e8 cd ff ff ff       	call   c0029114 <PIC::~PIC()>
c0029147:	83 c4 10             	add    esp,0x10
c002914a:	83 ec 08             	sub    esp,0x8
c002914d:	68 58 21 00 00       	push   0x2158
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 23 9d fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 c4 0c             	add    esp,0xc
c0029161:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029162 <APICTimer::~APICTimer()>:
c0029162:	83 ec 0c             	sub    esp,0xc
c0029165:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	89 10                	mov    DWORD PTR [eax],edx
c0029170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029174:	83 ec 0c             	sub    esp,0xc
c0029177:	50                   	push   eax
c0029178:	e8 55 db fe ff       	call   c0016cd2 <Timer::~Timer()>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	90                   	nop
c0029181:	83 c4 0c             	add    esp,0xc
c0029184:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029186 <APICTimer::~APICTimer()>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	83 ec 0c             	sub    esp,0xc
c002918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029190:	e8 cd ff ff ff       	call   c0029162 <APICTimer::~APICTimer()>
c0029195:	83 c4 10             	add    esp,0x10
c0029198:	83 ec 08             	sub    esp,0x8
c002919b:	68 60 01 00 00       	push   0x160
c00291a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a4:	e8 d5 9c fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 c4 0c             	add    esp,0xc
c00291af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291b0 <PIT::~PIT()>:
c00291b0:	83 ec 0c             	sub    esp,0xc
c00291b3:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c00291b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bc:	89 10                	mov    DWORD PTR [eax],edx
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	83 ec 0c             	sub    esp,0xc
c00291c5:	50                   	push   eax
c00291c6:	e8 07 db fe ff       	call   c0016cd2 <Timer::~Timer()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	90                   	nop
c00291cf:	83 c4 0c             	add    esp,0xc
c00291d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291d4 <PIT::~PIT()>:
c00291d4:	83 ec 0c             	sub    esp,0xc
c00291d7:	83 ec 0c             	sub    esp,0xc
c00291da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291de:	e8 cd ff ff ff       	call   c00291b0 <PIT::~PIT()>
c00291e3:	83 c4 10             	add    esp,0x10
c00291e6:	83 ec 08             	sub    esp,0x8
c00291e9:	68 5c 01 00 00       	push   0x15c
c00291ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f2:	e8 87 9c fe ff       	call   c0012e7e <operator delete(void*, unsigned long)>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	83 c4 0c             	add    esp,0xc
c00291fd:	c3                   	ret    
