
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf 7a 00 00       	call   c0007adf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 1f 02 c0       	mov    eax,0xc0021f88
c0000025:	3d 88 1f 02 c0       	cmp    eax,0xc0021f88
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 1f 02 c0       	push   0xc0021f88
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 1f 02 c0       	mov    eax,0xc0021f88
c0000051:	2d 88 1f 02 c0       	sub    eax,0xc0021f88
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 1f 02 c0       	push   0xc0021f88
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c ef 01 c0       	mov    ebx,0xc001ef3c
c0000097:	81 eb 38 ef 01 c0    	sub    ebx,0xc001ef38
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 ef 01 c0       	mov    esi,0xc001ef38
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 1f 02 c0       	push   0xc0021f88
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 88 1f 02 c0       	push   0xc0021f88
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cb 45 01 00       	call   c0014878 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 87 a4 00 00       	call   c000a74c <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a9 45 01 00       	call   c0014878 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b2 4a 01 00       	call   c0014da0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 09 51 01 00       	call   c0015400 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a1 03 01 00       	jmp    c0010720 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	83 ec 14             	sub    esp,0x14
c00003d3:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00003d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00003db:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00003df:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00003e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00003e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00003eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00003ef:	39 cd                	cmp    ebp,ecx
c00003f1:	0f 83 b9 00 00 00    	jae    c00004b0 <memmove+0xe0>
c00003f7:	85 d2                	test   edx,edx
c00003f9:	0f 84 90 00 00 00    	je     c000048f <memmove+0xbf>
c00003ff:	8d 59 04             	lea    ebx,[ecx+0x4]
c0000402:	39 dd                	cmp    ebp,ebx
c0000404:	0f 93 44 24 03       	setae  BYTE PTR [esp+0x3]
c0000409:	0f b6 44 24 03       	movzx  eax,BYTE PTR [esp+0x3]
c000040e:	8d 5d 04             	lea    ebx,[ebp+0x4]
c0000411:	39 d9                	cmp    ecx,ebx
c0000413:	0f 93 c3             	setae  bl
c0000416:	08 c3                	or     bl,al
c0000418:	88 d8                	mov    al,bl
c000041a:	8d 5a ff             	lea    ebx,[edx-0x1]
c000041d:	83 fb 06             	cmp    ebx,0x6
c0000420:	0f 97 c3             	seta   bl
c0000423:	84 d8                	test   al,bl
c0000425:	0f 84 a5 00 00 00    	je     c00004d0 <memmove+0x100>
c000042b:	89 eb                	mov    ebx,ebp
c000042d:	09 cb                	or     ebx,ecx
c000042f:	f6 c3 03             	test   bl,0x3
c0000432:	0f 85 98 00 00 00    	jne    c00004d0 <memmove+0x100>
c0000438:	89 d7                	mov    edi,edx
c000043a:	89 cb                	mov    ebx,ecx
c000043c:	83 e7 fc             	and    edi,0xfffffffc
c000043f:	89 ee                	mov    esi,ebp
c0000441:	01 cf                	add    edi,ecx
c0000443:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000449:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000450:	8b 03                	mov    eax,DWORD PTR [ebx]
c0000452:	83 c3 04             	add    ebx,0x4
c0000455:	83 c6 04             	add    esi,0x4
c0000458:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000045b:	39 fb                	cmp    ebx,edi
c000045d:	75 f1                	jne    c0000450 <memmove+0x80>
c000045f:	89 d3                	mov    ebx,edx
c0000461:	89 d7                	mov    edi,edx
c0000463:	83 e3 fc             	and    ebx,0xfffffffc
c0000466:	29 df                	sub    edi,ebx
c0000468:	01 d9                	add    ecx,ebx
c000046a:	8d 74 1d 00          	lea    esi,[ebp+ebx*1+0x0]
c000046e:	39 da                	cmp    edx,ebx
c0000470:	74 1d                	je     c000048f <memmove+0xbf>
c0000472:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000475:	83 ff 01             	cmp    edi,0x1
c0000478:	88 06                	mov    BYTE PTR [esi],al
c000047a:	74 13                	je     c000048f <memmove+0xbf>
c000047c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0000480:	83 ff 02             	cmp    edi,0x2
c0000483:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000486:	74 07                	je     c000048f <memmove+0xbf>
c0000488:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000048f:	89 e8                	mov    eax,ebp
c0000491:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0000495:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0000499:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000049d:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c00004a1:	83 c4 14             	add    esp,0x14
c00004a4:	c3                   	ret    
c00004a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 dd                	jbe    c000048f <memmove+0xbf>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 d9                	je     c000048f <memmove+0xbf>
c00004b6:	8d 59 ff             	lea    ebx,[ecx-0x1]
c00004b9:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004c0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00004c4:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c7:	4a                   	dec    edx
c00004c8:	75 f6                	jne    c00004c0 <memmove+0xf0>
c00004ca:	eb c3                	jmp    c000048f <memmove+0xbf>
c00004cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 eb                	mov    ebx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c00004e3:	43                   	inc    ebx
c00004e4:	41                   	inc    ecx
c00004e5:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c00004e8:	39 d3                	cmp    ebx,edx
c00004ea:	75 f4                	jne    c00004e0 <memmove+0x110>
c00004ec:	eb a1                	jmp    c000048f <memmove+0xbf>
c00004ee:	66 90                	xchg   ax,ax

c00004f0 <memset>:
c00004f0:	83 ec 0c             	sub    esp,0xc
c00004f3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00004f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00004fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000502:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000506:	85 d2                	test   edx,edx
c0000508:	74 1b                	je     c0000525 <memset+0x35>
c000050a:	83 fa 08             	cmp    edx,0x8
c000050d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000512:	89 f7                	mov    edi,esi
c0000514:	73 2a                	jae    c0000540 <memset+0x50>
c0000516:	83 e2 07             	and    edx,0x7
c0000519:	74 0a                	je     c0000525 <memset+0x35>
c000051b:	31 c0                	xor    eax,eax
c000051d:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000520:	40                   	inc    eax
c0000521:	39 d0                	cmp    eax,edx
c0000523:	72 f8                	jb     c000051d <memset+0x2d>
c0000525:	89 f0                	mov    eax,esi
c0000527:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000052a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000052e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000532:	83 c4 0c             	add    esp,0xc
c0000535:	c3                   	ret    
c0000536:	8d 76 00             	lea    esi,[esi+0x0]
c0000539:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000540:	0f b6 c3             	movzx  eax,bl
c0000543:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c0000549:	f7 c6 01 00 00 00    	test   esi,0x1
c000054f:	75 1d                	jne    c000056e <memset+0x7e>
c0000551:	f7 c7 02 00 00 00    	test   edi,0x2
c0000557:	75 1d                	jne    c0000576 <memset+0x86>
c0000559:	f7 c7 04 00 00 00    	test   edi,0x4
c000055f:	75 20                	jne    c0000581 <memset+0x91>
c0000561:	89 d1                	mov    ecx,edx
c0000563:	c1 e9 02             	shr    ecx,0x2
c0000566:	fc                   	cld    
c0000567:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000569:	83 e2 03             	and    edx,0x3
c000056c:	eb a8                	jmp    c0000516 <memset+0x26>
c000056e:	88 06                	mov    BYTE PTR [esi],al
c0000570:	8d 7e 01             	lea    edi,[esi+0x1]
c0000573:	4a                   	dec    edx
c0000574:	eb db                	jmp    c0000551 <memset+0x61>
c0000576:	66 89 07             	mov    WORD PTR [edi],ax
c0000579:	83 ea 02             	sub    edx,0x2
c000057c:	83 c7 02             	add    edi,0x2
c000057f:	eb d8                	jmp    c0000559 <memset+0x69>
c0000581:	89 07                	mov    DWORD PTR [edi],eax
c0000583:	83 ea 04             	sub    edx,0x4
c0000586:	83 c7 04             	add    edi,0x4
c0000589:	eb d6                	jmp    c0000561 <memset+0x71>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000590 <strlen>:
c0000590:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000594:	31 c0                	xor    eax,eax
c0000596:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000599:	74 15                	je     c00005b0 <strlen+0x20>
c000059b:	90                   	nop
c000059c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005a0:	40                   	inc    eax
c00005a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00005a5:	75 f9                	jne    c00005a0 <strlen+0x10>
c00005a7:	c3                   	ret    
c00005a8:	90                   	nop
c00005a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00005b0:	c3                   	ret    
c00005b1:	eb 0d                	jmp    c00005c0 <strpbrk>
c00005b3:	90                   	nop
c00005b4:	90                   	nop
c00005b5:	90                   	nop
c00005b6:	90                   	nop
c00005b7:	90                   	nop
c00005b8:	90                   	nop
c00005b9:	90                   	nop
c00005ba:	90                   	nop
c00005bb:	90                   	nop
c00005bc:	90                   	nop
c00005bd:	90                   	nop
c00005be:	90                   	nop
c00005bf:	90                   	nop

c00005c0 <strpbrk>:
c00005c0:	57                   	push   edi
c00005c1:	56                   	push   esi
c00005c2:	53                   	push   ebx
c00005c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005cb:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c00005ce:	84 db                	test   bl,bl
c00005d0:	74 32                	je     c0000604 <strpbrk+0x44>
c00005d2:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c00005d5:	84 c0                	test   al,al
c00005d7:	74 23                	je     c00005fc <strpbrk+0x3c>
c00005d9:	38 d8                	cmp    al,bl
c00005db:	74 29                	je     c0000606 <strpbrk+0x46>
c00005dd:	89 fa                	mov    edx,edi
c00005df:	90                   	nop
c00005e0:	eb 12                	jmp    c00005f4 <strpbrk+0x34>
c00005e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00005e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005f0:	38 d9                	cmp    cl,bl
c00005f2:	74 12                	je     c0000606 <strpbrk+0x46>
c00005f4:	42                   	inc    edx
c00005f5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00005f8:	84 c9                	test   cl,cl
c00005fa:	75 f4                	jne    c00005f0 <strpbrk+0x30>
c00005fc:	46                   	inc    esi
c00005fd:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000600:	84 db                	test   bl,bl
c0000602:	75 d1                	jne    c00005d5 <strpbrk+0x15>
c0000604:	31 f6                	xor    esi,esi
c0000606:	5b                   	pop    ebx
c0000607:	89 f0                	mov    eax,esi
c0000609:	5e                   	pop    esi
c000060a:	5f                   	pop    edi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000610 <strtok>:
c0000610:	56                   	push   esi
c0000611:	53                   	push   ebx
c0000612:	83 ec 08             	sub    esp,0x8
c0000615:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000619:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000061d:	85 db                	test   ebx,ebx
c000061f:	75 13                	jne    c0000634 <strtok+0x24>
c0000621:	eb 4d                	jmp    c0000670 <strtok+0x60>
c0000623:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000629:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000630:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000633:	43                   	inc    ebx
c0000634:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000063b:	e8 80 ff ff ff       	call   c00005c0 <strpbrk>
c0000640:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000645:	39 d8                	cmp    eax,ebx
c0000647:	74 e7                	je     c0000630 <strtok+0x20>
c0000649:	85 c0                	test   eax,eax
c000064b:	74 2d                	je     c000067a <strtok+0x6a>
c000064d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000650:	8d 50 01             	lea    edx,[eax+0x1]
c0000653:	89 d8                	mov    eax,ebx
c0000655:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000065b:	83 c4 08             	add    esp,0x8
c000065e:	5b                   	pop    ebx
c000065f:	5e                   	pop    esi
c0000660:	c3                   	ret    
c0000661:	eb 0d                	jmp    c0000670 <strtok+0x60>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000676:	85 db                	test   ebx,ebx
c0000678:	75 ba                	jne    c0000634 <strtok+0x24>
c000067a:	83 c4 08             	add    esp,0x8
c000067d:	31 c0                	xor    eax,eax
c000067f:	5b                   	pop    ebx
c0000680:	5e                   	pop    esi
c0000681:	c3                   	ret    
c0000682:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strcpy>:
c0000690:	53                   	push   ebx
c0000691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000699:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000069c:	89 c3                	mov    ebx,eax
c000069e:	84 d2                	test   dl,dl
c00006a0:	74 19                	je     c00006bb <strcpy+0x2b>
c00006a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	88 13                	mov    BYTE PTR [ebx],dl
c00006b2:	41                   	inc    ecx
c00006b3:	43                   	inc    ebx
c00006b4:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00006b7:	84 d2                	test   dl,dl
c00006b9:	75 f5                	jne    c00006b0 <strcpy+0x20>
c00006bb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006be:	5b                   	pop    ebx
c00006bf:	c3                   	ret    

c00006c0 <strncpy>:
c00006c0:	57                   	push   edi
c00006c1:	56                   	push   esi
c00006c2:	53                   	push   ebx
c00006c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006cf:	85 db                	test   ebx,ebx
c00006d1:	74 3f                	je     c0000712 <strncpy+0x52>
c00006d3:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00006d6:	8d 43 ff             	lea    eax,[ebx-0x1]
c00006d9:	8d 7a 01             	lea    edi,[edx+0x1]
c00006dc:	88 0a                	mov    BYTE PTR [edx],cl
c00006de:	84 c9                	test   cl,cl
c00006e0:	74 3e                	je     c0000720 <strncpy+0x60>
c00006e2:	85 c0                	test   eax,eax
c00006e4:	74 2c                	je     c0000712 <strncpy+0x52>
c00006e6:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c00006ea:	8d 43 fe             	lea    eax,[ebx-0x2]
c00006ed:	8d 7a 02             	lea    edi,[edx+0x2]
c00006f0:	8d 5e 02             	lea    ebx,[esi+0x2]
c00006f3:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c00006f6:	84 c9                	test   cl,cl
c00006f8:	75 14                	jne    c000070e <strncpy+0x4e>
c00006fa:	eb 24                	jmp    c0000720 <strncpy+0x60>
c00006fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000700:	43                   	inc    ebx
c0000701:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000705:	47                   	inc    edi
c0000706:	48                   	dec    eax
c0000707:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000070a:	84 c9                	test   cl,cl
c000070c:	74 12                	je     c0000720 <strncpy+0x60>
c000070e:	85 c0                	test   eax,eax
c0000710:	75 ee                	jne    c0000700 <strncpy+0x40>
c0000712:	5b                   	pop    ebx
c0000713:	89 d0                	mov    eax,edx
c0000715:	5e                   	pop    esi
c0000716:	5f                   	pop    edi
c0000717:	c3                   	ret    
c0000718:	90                   	nop
c0000719:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000720:	85 c0                	test   eax,eax
c0000722:	74 ee                	je     c0000712 <strncpy+0x52>
c0000724:	83 f8 08             	cmp    eax,0x8
c0000727:	89 c3                	mov    ebx,eax
c0000729:	73 35                	jae    c0000760 <strncpy+0xa0>
c000072b:	f6 c3 04             	test   bl,0x4
c000072e:	74 09                	je     c0000739 <strncpy+0x79>
c0000730:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000736:	83 c7 04             	add    edi,0x4
c0000739:	f6 c3 02             	test   bl,0x2
c000073c:	74 08                	je     c0000746 <strncpy+0x86>
c000073e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000743:	83 c7 02             	add    edi,0x2
c0000746:	f6 c3 01             	test   bl,0x1
c0000749:	74 c7                	je     c0000712 <strncpy+0x52>
c000074b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000074e:	89 d0                	mov    eax,edx
c0000750:	5b                   	pop    ebx
c0000751:	5e                   	pop    esi
c0000752:	5f                   	pop    edi
c0000753:	c3                   	ret    
c0000754:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000075a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000760:	f7 c7 01 00 00 00    	test   edi,0x1
c0000766:	75 1f                	jne    c0000787 <strncpy+0xc7>
c0000768:	f7 c7 02 00 00 00    	test   edi,0x2
c000076e:	75 2c                	jne    c000079c <strncpy+0xdc>
c0000770:	f7 c7 04 00 00 00    	test   edi,0x4
c0000776:	75 16                	jne    c000078e <strncpy+0xce>
c0000778:	89 d9                	mov    ecx,ebx
c000077a:	c1 e9 02             	shr    ecx,0x2
c000077d:	fc                   	cld    
c000077e:	31 c0                	xor    eax,eax
c0000780:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000782:	83 e3 03             	and    ebx,0x3
c0000785:	eb a4                	jmp    c000072b <strncpy+0x6b>
c0000787:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000078a:	4b                   	dec    ebx
c000078b:	47                   	inc    edi
c000078c:	eb da                	jmp    c0000768 <strncpy+0xa8>
c000078e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000794:	83 eb 04             	sub    ebx,0x4
c0000797:	83 c7 04             	add    edi,0x4
c000079a:	eb dc                	jmp    c0000778 <strncpy+0xb8>
c000079c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007a1:	83 eb 02             	sub    ebx,0x2
c00007a4:	83 c7 02             	add    edi,0x2
c00007a7:	eb c7                	jmp    c0000770 <strncpy+0xb0>
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00007b0 <strcmp>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ba:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00007bd:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007c0:	38 d1                	cmp    cl,dl
c00007c2:	75 1d                	jne    c00007e1 <strcmp+0x31>
c00007c4:	84 c9                	test   cl,cl
c00007c6:	74 28                	je     c00007f0 <strcmp+0x40>
c00007c8:	b8 01 00 00 00       	mov    eax,0x1
c00007cd:	eb 06                	jmp    c00007d5 <strcmp+0x25>
c00007cf:	90                   	nop
c00007d0:	40                   	inc    eax
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 1b                	je     c00007f0 <strcmp+0x40>
c00007d5:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c00007d9:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007dd:	38 ca                	cmp    dl,cl
c00007df:	74 ef                	je     c00007d0 <strcmp+0x20>
c00007e1:	5b                   	pop    ebx
c00007e2:	0f b6 c2             	movzx  eax,dl
c00007e5:	29 c8                	sub    eax,ecx
c00007e7:	5e                   	pop    esi
c00007e8:	c3                   	ret    
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	5b                   	pop    ebx
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	5e                   	pop    esi
c00007f4:	c3                   	ret    
c00007f5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00007f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000800 <strchr>:
c0000800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000804:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000807:	84 d2                	test   dl,dl
c0000809:	74 21                	je     c000082c <strchr+0x2c>
c000080b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0000810:	38 ca                	cmp    dl,cl
c0000812:	75 10                	jne    c0000824 <strchr+0x24>
c0000814:	eb 19                	jmp    c000082f <strchr+0x2f>
c0000816:	8d 76 00             	lea    esi,[esi+0x0]
c0000819:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 0a                	je     c000082e <strchr+0x2e>
c0000824:	40                   	inc    eax
c0000825:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000828:	84 d2                	test   dl,dl
c000082a:	75 f4                	jne    c0000820 <strchr+0x20>
c000082c:	31 c0                	xor    eax,eax
c000082e:	c3                   	ret    
c000082f:	90                   	nop
c0000830:	c3                   	ret    
c0000831:	eb 0d                	jmp    c0000840 <strncmp>
c0000833:	90                   	nop
c0000834:	90                   	nop
c0000835:	90                   	nop
c0000836:	90                   	nop
c0000837:	90                   	nop
c0000838:	90                   	nop
c0000839:	90                   	nop
c000083a:	90                   	nop
c000083b:	90                   	nop
c000083c:	90                   	nop
c000083d:	90                   	nop
c000083e:	90                   	nop
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 31                	je     c0000884 <strncmp+0x44>
c0000853:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c0000856:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000859:	38 d1                	cmp    cl,dl
c000085b:	75 33                	jne    c0000890 <strncmp+0x50>
c000085d:	8d 46 01             	lea    eax,[esi+0x1]
c0000860:	84 c9                	test   cl,cl
c0000862:	74 20                	je     c0000884 <strncmp+0x44>
c0000864:	01 fe                	add    esi,edi
c0000866:	eb 17                	jmp    c000087f <strncmp+0x3f>
c0000868:	90                   	nop
c0000869:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000870:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000873:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000876:	38 ca                	cmp    dl,cl
c0000878:	75 16                	jne    c0000890 <strncmp+0x50>
c000087a:	40                   	inc    eax
c000087b:	84 d2                	test   dl,dl
c000087d:	74 05                	je     c0000884 <strncmp+0x44>
c000087f:	43                   	inc    ebx
c0000880:	39 c6                	cmp    esi,eax
c0000882:	75 ec                	jne    c0000870 <strncmp+0x30>
c0000884:	5b                   	pop    ebx
c0000885:	31 c0                	xor    eax,eax
c0000887:	5e                   	pop    esi
c0000888:	5f                   	pop    edi
c0000889:	c3                   	ret    
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	5b                   	pop    ebx
c0000891:	0f b6 c2             	movzx  eax,dl
c0000894:	29 c8                	sub    eax,ecx
c0000896:	5e                   	pop    esi
c0000897:	5f                   	pop    edi
c0000898:	c3                   	ret    
c0000899:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00008a0 <strcat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008aa:	89 c3                	mov    ebx,eax
c00008ac:	eb 04                	jmp    c00008b2 <strcat+0x12>
c00008ae:	66 90                	xchg   ax,ax
c00008b0:	89 d3                	mov    ebx,edx
c00008b2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008b5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x10>
c00008bb:	31 d2                	xor    edx,edx
c00008bd:	8d 76 00             	lea    esi,[esi+0x0]
c00008c0:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c00008c4:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008c7:	42                   	inc    edx
c00008c8:	84 c9                	test   cl,cl
c00008ca:	75 f4                	jne    c00008c0 <strcat+0x20>
c00008cc:	5b                   	pop    ebx
c00008cd:	5e                   	pop    esi
c00008ce:	c3                   	ret    
c00008cf:	90                   	nop

c00008d0 <strncat>:
c00008d0:	56                   	push   esi
c00008d1:	53                   	push   ebx
c00008d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008de:	85 f6                	test   esi,esi
c00008e0:	74 2f                	je     c0000911 <strncat+0x41>
c00008e2:	89 c2                	mov    edx,eax
c00008e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008f0:	42                   	inc    edx
c00008f1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008f5:	75 f9                	jne    c00008f0 <strncat+0x20>
c00008f7:	01 ce                	add    esi,ecx
c00008f9:	eb 0a                	jmp    c0000905 <strncat+0x35>
c00008fb:	90                   	nop
c00008fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000900:	39 f1                	cmp    ecx,esi
c0000902:	74 1c                	je     c0000920 <strncat+0x50>
c0000904:	42                   	inc    edx
c0000905:	41                   	inc    ecx
c0000906:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000090a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000090d:	84 db                	test   bl,bl
c000090f:	75 ef                	jne    c0000900 <strncat+0x30>
c0000911:	5b                   	pop    ebx
c0000912:	5e                   	pop    esi
c0000913:	c3                   	ret    
c0000914:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000091a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000920:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000923:	5b                   	pop    ebx
c0000924:	5e                   	pop    esi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <strstr>:
c0000930:	57                   	push   edi
c0000931:	56                   	push   esi
c0000932:	53                   	push   ebx
c0000933:	83 ec 0c             	sub    esp,0xc
c0000936:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000093a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000093e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0000941:	e8 4a fc ff ff       	call   c0000590 <strlen>
c0000946:	85 c0                	test   eax,eax
c0000948:	89 c6                	mov    esi,eax
c000094a:	75 19                	jne    c0000965 <strstr+0x35>
c000094c:	eb 32                	jmp    c0000980 <strstr+0x50>
c000094e:	66 90                	xchg   ax,ax
c0000950:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0000954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000095b:	e8 20 fa ff ff       	call   c0000380 <memcmp>
c0000960:	85 c0                	test   eax,eax
c0000962:	74 1c                	je     c0000980 <strstr+0x50>
c0000964:	43                   	inc    ebx
c0000965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000968:	e8 23 fc ff ff       	call   c0000590 <strlen>
c000096d:	39 f0                	cmp    eax,esi
c000096f:	73 df                	jae    c0000950 <strstr+0x20>
c0000971:	83 c4 0c             	add    esp,0xc
c0000974:	31 c0                	xor    eax,eax
c0000976:	5b                   	pop    ebx
c0000977:	5e                   	pop    esi
c0000978:	5f                   	pop    edi
c0000979:	c3                   	ret    
c000097a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000980:	83 c4 0c             	add    esp,0xc
c0000983:	89 d8                	mov    eax,ebx
c0000985:	5b                   	pop    ebx
c0000986:	5e                   	pop    esi
c0000987:	5f                   	pop    edi
c0000988:	c3                   	ret    
c0000989:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000990 <toupper>:
c0000990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000994:	0f b6 d0             	movzx  edx,al
c0000997:	f6 82 40 ef 01 c0 02 	test   BYTE PTR [edx-0x3ffe10c0],0x2
c000099e:	74 03                	je     c00009a3 <toupper+0x13>
c00009a0:	83 e8 20             	sub    eax,0x20
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009b0 <tolower>:
c00009b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00009b4:	0f b6 d0             	movzx  edx,al
c00009b7:	f6 82 40 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10c0],0x1
c00009be:	74 03                	je     c00009c3 <tolower+0x13>
c00009c0:	83 c0 20             	add    eax,0x20
c00009c3:	c3                   	ret    
c00009c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009d0 <simple_strtoul>:
c00009d0:	55                   	push   ebp
c00009d1:	57                   	push   edi
c00009d2:	56                   	push   esi
c00009d3:	53                   	push   ebx
c00009d4:	83 ec 0c             	sub    esp,0xc
c00009d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00009df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00009e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00009e6:	89 c2                	mov    edx,eax
c00009e8:	0f b6 80 40 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe10c0]
c00009ef:	c0 e8 03             	shr    al,0x3
c00009f2:	24 01                	and    al,0x1
c00009f4:	74 1e                	je     c0000a14 <simple_strtoul+0x44>
c00009f6:	8d 76 00             	lea    esi,[esi+0x0]
c00009f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a04:	89 c2                	mov    edx,eax
c0000a06:	0f b6 80 40 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe10c0]
c0000a0d:	c0 e8 03             	shr    al,0x3
c0000a10:	24 01                	and    al,0x1
c0000a12:	75 ec                	jne    c0000a00 <simple_strtoul+0x30>
c0000a14:	80 fa 09             	cmp    dl,0x9
c0000a17:	74 e7                	je     c0000a00 <simple_strtoul+0x30>
c0000a19:	80 fa 2d             	cmp    dl,0x2d
c0000a1c:	0f 84 3e 01 00 00    	je     c0000b60 <simple_strtoul+0x190>
c0000a22:	31 c0                	xor    eax,eax
c0000a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000a28:	31 c0                	xor    eax,eax
c0000a2a:	80 fa 2b             	cmp    dl,0x2b
c0000a2d:	0f 94 c0             	sete   al
c0000a30:	01 c1                	add    ecx,eax
c0000a32:	85 ff                	test   edi,edi
c0000a34:	0f 85 c6 00 00 00    	jne    c0000b00 <simple_strtoul+0x130>
c0000a3a:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000a3d:	bf 0a 00 00 00       	mov    edi,0xa
c0000a42:	80 fb 30             	cmp    bl,0x30
c0000a45:	0f 84 70 01 00 00    	je     c0000bbb <simple_strtoul+0x1eb>
c0000a4b:	84 db                	test   bl,bl
c0000a4d:	0f 84 3d 01 00 00    	je     c0000b90 <simple_strtoul+0x1c0>
c0000a53:	31 c0                	xor    eax,eax
c0000a55:	31 ed                	xor    ebp,ebp
c0000a57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000a5b:	31 f6                	xor    esi,esi
c0000a5d:	eb 2e                	jmp    c0000a8d <simple_strtoul+0xbd>
c0000a5f:	90                   	nop
c0000a60:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000a63:	39 fb                	cmp    ebx,edi
c0000a65:	73 59                	jae    c0000ac0 <simple_strtoul+0xf0>
c0000a67:	89 d8                	mov    eax,ebx
c0000a69:	31 d2                	xor    edx,edx
c0000a6b:	f7 d0                	not    eax
c0000a6d:	f7 f7                	div    edi
c0000a6f:	39 f0                	cmp    eax,esi
c0000a71:	0f 82 d9 00 00 00    	jb     c0000b50 <simple_strtoul+0x180>
c0000a77:	0f af f7             	imul   esi,edi
c0000a7a:	01 de                	add    esi,ebx
c0000a7c:	bb 01 00 00 00       	mov    ebx,0x1
c0000a81:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000a85:	41                   	inc    ecx
c0000a86:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000a89:	84 db                	test   bl,bl
c0000a8b:	74 33                	je     c0000ac0 <simple_strtoul+0xf0>
c0000a8d:	0f b6 c3             	movzx  eax,bl
c0000a90:	f6 80 40 ef 01 c0 04 	test   BYTE PTR [eax-0x3ffe10c0],0x4
c0000a97:	75 c7                	jne    c0000a60 <simple_strtoul+0x90>
c0000a99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a9c:	e8 ef fe ff ff       	call   c0000990 <toupper>
c0000aa1:	0f b6 d0             	movzx  edx,al
c0000aa4:	f6 82 40 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10c0],0x1
c0000aab:	74 13                	je     c0000ac0 <simple_strtoul+0xf0>
c0000aad:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ab0:	39 fb                	cmp    ebx,edi
c0000ab2:	72 b3                	jb     c0000a67 <simple_strtoul+0x97>
c0000ab4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000aba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000ac0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000ac4:	85 d2                	test   edx,edx
c0000ac6:	74 12                	je     c0000ada <simple_strtoul+0x10a>
c0000ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000acc:	09 f0                	or     eax,esi
c0000ace:	0f 84 9c 00 00 00    	je     c0000b70 <simple_strtoul+0x1a0>
c0000ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ad8:	89 08                	mov    DWORD PTR [eax],ecx
c0000ada:	4d                   	dec    ebp
c0000adb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ae0:	0f 44 f0             	cmove  esi,eax
c0000ae3:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000ae8:	75 02                	jne    c0000aec <simple_strtoul+0x11c>
c0000aea:	f7 de                	neg    esi
c0000aec:	83 c4 0c             	add    esp,0xc
c0000aef:	89 f0                	mov    eax,esi
c0000af1:	5b                   	pop    ebx
c0000af2:	5e                   	pop    esi
c0000af3:	5f                   	pop    edi
c0000af4:	5d                   	pop    ebp
c0000af5:	c3                   	ret    
c0000af6:	8d 76 00             	lea    esi,[esi+0x0]
c0000af9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b00:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b03:	83 f8 22             	cmp    eax,0x22
c0000b06:	0f 87 84 00 00 00    	ja     c0000b90 <simple_strtoul+0x1c0>
c0000b0c:	83 ff 08             	cmp    edi,0x8
c0000b0f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b12:	0f 84 c6 00 00 00    	je     c0000bde <simple_strtoul+0x20e>
c0000b18:	83 ff 10             	cmp    edi,0x10
c0000b1b:	0f 85 2a ff ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000b21:	80 fb 30             	cmp    bl,0x30
c0000b24:	bf 10 00 00 00       	mov    edi,0x10
c0000b29:	0f 85 1c ff ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000b2f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b33:	89 04 24             	mov    DWORD PTR [esp],eax
c0000b36:	89 c3                	mov    ebx,eax
c0000b38:	e8 73 fe ff ff       	call   c00009b0 <tolower>
c0000b3d:	83 f8 78             	cmp    eax,0x78
c0000b40:	0f 84 c1 00 00 00    	je     c0000c07 <simple_strtoul+0x237>
c0000b46:	41                   	inc    ecx
c0000b47:	e9 ff fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	bd 01 00 00 00       	mov    ebp,0x1
c0000b55:	31 f6                	xor    esi,esi
c0000b57:	e9 29 ff ff ff       	jmp    c0000a85 <simple_strtoul+0xb5>
c0000b5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b60:	b8 01 00 00 00       	mov    eax,0x1
c0000b65:	41                   	inc    ecx
c0000b66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000b6a:	e9 c3 fe ff ff       	jmp    c0000a32 <simple_strtoul+0x62>
c0000b6f:	90                   	nop
c0000b70:	85 c9                	test   ecx,ecx
c0000b72:	74 39                	je     c0000bad <simple_strtoul+0x1dd>
c0000b74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b78:	31 f6                	xor    esi,esi
c0000b7a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b7e:	89 38                	mov    DWORD PTR [eax],edi
c0000b80:	e9 55 ff ff ff       	jmp    c0000ada <simple_strtoul+0x10a>
c0000b85:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b94:	85 c0                	test   eax,eax
c0000b96:	74 1c                	je     c0000bb4 <simple_strtoul+0x1e4>
c0000b98:	85 c9                	test   ecx,ecx
c0000b9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b9e:	74 5a                	je     c0000bfa <simple_strtoul+0x22a>
c0000ba0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	89 38                	mov    DWORD PTR [eax],edi
c0000ba8:	e9 36 ff ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000bad:	31 f6                	xor    esi,esi
c0000baf:	e9 20 ff ff ff       	jmp    c0000ad4 <simple_strtoul+0x104>
c0000bb4:	31 f6                	xor    esi,esi
c0000bb6:	e9 28 ff ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000bbb:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc2:	89 c3                	mov    ebx,eax
c0000bc4:	e8 e7 fd ff ff       	call   c00009b0 <tolower>
c0000bc9:	83 f8 78             	cmp    eax,0x78
c0000bcc:	74 20                	je     c0000bee <simple_strtoul+0x21e>
c0000bce:	41                   	inc    ecx
c0000bcf:	80 fb 30             	cmp    bl,0x30
c0000bd2:	74 13                	je     c0000be7 <simple_strtoul+0x217>
c0000bd4:	bf 08 00 00 00       	mov    edi,0x8
c0000bd9:	e9 6d fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>
c0000bde:	80 fb 30             	cmp    bl,0x30
c0000be1:	0f 85 64 fe ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000be7:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000beb:	41                   	inc    ecx
c0000bec:	eb e6                	jmp    c0000bd4 <simple_strtoul+0x204>
c0000bee:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000bf2:	83 c1 02             	add    ecx,0x2
c0000bf5:	e9 27 ff ff ff       	jmp    c0000b21 <simple_strtoul+0x151>
c0000bfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c00:	31 f6                	xor    esi,esi
c0000c02:	e9 dc fe ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000c07:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c0b:	83 c1 02             	add    ecx,0x2
c0000c0e:	e9 38 fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>

c0000c13 <largebin_index>:
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	c1 ea 08             	shr    edx,0x8
c0000c18:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c1e:	77 10                	ja     c0000c30 <largebin_index+0x1d>
c0000c20:	0f bd d2             	bsr    edx,edx
c0000c23:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c26:	d3 e8                	shr    eax,cl
c0000c28:	83 e0 03             	and    eax,0x3
c0000c2b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c2f:	c3                   	ret    
c0000c30:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c35:	c3                   	ret    

c0000c36 <malloc_init_state>:
c0000c36:	8d 50 34             	lea    edx,[eax+0x34]
c0000c39:	53                   	push   ebx
c0000c3a:	89 d1                	mov    ecx,edx
c0000c3c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c42:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c45:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c48:	83 c2 08             	add    edx,0x8
c0000c4b:	39 da                	cmp    edx,ebx
c0000c4d:	75 f3                	jne    c0000c42 <malloc_init_state+0xc>
c0000c4f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c59:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c5b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c65:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c6f:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c79:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c80:	83 e2 03             	and    edx,0x3
c0000c83:	5b                   	pop    ebx
c0000c84:	83 ca 48             	or     edx,0x48
c0000c87:	89 10                	mov    DWORD PTR [eax],edx
c0000c89:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c8c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c96:	c3                   	ret    

c0000c97 <malloc_consolidate>:
c0000c97:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 d8 00 00 00    	je     c0000d79 <malloc_consolidate+0xe2>
c0000ca1:	55                   	push   ebp
c0000ca2:	83 e2 fd             	and    edx,0xfffffffd
c0000ca5:	57                   	push   edi
c0000ca6:	89 c5                	mov    ebp,eax
c0000ca8:	56                   	push   esi
c0000ca9:	53                   	push   ebx
c0000caa:	8d 78 34             	lea    edi,[eax+0x34]
c0000cad:	83 ec 10             	sub    esp,0x10
c0000cb0:	89 10                	mov    DWORD PTR [eax],edx
c0000cb2:	c1 ea 03             	shr    edx,0x3
c0000cb5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cb9:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cbd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cc4:	85 d2                	test   edx,edx
c0000cc6:	0f 84 98 00 00 00    	je     c0000d64 <malloc_consolidate+0xcd>
c0000ccc:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cd3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cd6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cd9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cdd:	89 f9                	mov    ecx,edi
c0000cdf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ce2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ce5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ce8:	83 e3 fc             	and    ebx,0xfffffffc
c0000ceb:	83 e7 01             	and    edi,0x1
c0000cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf1:	75 14                	jne    c0000d07 <malloc_consolidate+0x70>
c0000cf3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cf5:	29 fa                	sub    edx,edi
c0000cf7:	01 f9                	add    ecx,edi
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	89 fb                	mov    ebx,edi
c0000cfe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d01:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d04:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d07:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d0a:	74 40                	je     c0000d4c <malloc_consolidate+0xb5>
c0000d0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d0f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d12:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d16:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d19:	83 e7 01             	and    edi,0x1
c0000d1c:	75 0e                	jne    c0000d2c <malloc_consolidate+0x95>
c0000d1e:	01 d9                	add    ecx,ebx
c0000d20:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d26:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d29:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d2c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d2f:	89 ce                	mov    esi,ecx
c0000d31:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d34:	83 ce 01             	or     esi,0x1
c0000d37:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d3a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d3d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d41:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d44:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d47:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d4a:	eb 0c                	jmp    c0000d58 <malloc_consolidate+0xc1>
c0000d4c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d4f:	83 c9 01             	or     ecx,0x1
c0000d52:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d55:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d5c:	85 d2                	test   edx,edx
c0000d5e:	0f 85 6f ff ff ff    	jne    c0000cd3 <malloc_consolidate+0x3c>
c0000d64:	83 c5 04             	add    ebp,0x4
c0000d67:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d6b:	0f 85 50 ff ff ff    	jne    c0000cc1 <malloc_consolidate+0x2a>
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	5b                   	pop    ebx
c0000d75:	5e                   	pop    esi
c0000d76:	5f                   	pop    edi
c0000d77:	5d                   	pop    ebp
c0000d78:	c3                   	ret    
c0000d79:	e9 b8 fe ff ff       	jmp    c0000c36 <malloc_init_state>

c0000d7e <dlfree>:
c0000d7e:	57                   	push   edi
c0000d7f:	56                   	push   esi
c0000d80:	53                   	push   ebx
c0000d81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d85:	85 db                	test   ebx,ebx
c0000d87:	0f 84 e2 00 00 00    	je     c0000e6f <dlfree+0xf1>
c0000d8d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d90:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d93:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d99:	89 f0                	mov    eax,esi
c0000d9b:	83 e0 fc             	and    eax,0xfffffffc
c0000d9e:	39 c1                	cmp    ecx,eax
c0000da0:	72 24                	jb     c0000dc6 <dlfree+0x48>
c0000da2:	c1 e8 03             	shr    eax,0x3
c0000da5:	83 c9 03             	or     ecx,0x3
c0000da8:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000dae:	83 e8 02             	sub    eax,0x2
c0000db1:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000db8:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dba:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc1:	e9 a9 00 00 00       	jmp    c0000e6f <dlfree+0xf1>
c0000dc6:	83 e6 02             	and    esi,0x2
c0000dc9:	0f 85 a0 00 00 00    	jne    c0000e6f <dlfree+0xf1>
c0000dcf:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dd2:	83 c9 01             	or     ecx,0x1
c0000dd5:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000ddb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000dde:	83 e1 fc             	and    ecx,0xfffffffc
c0000de1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000de5:	75 13                	jne    c0000dfa <dlfree+0x7c>
c0000de7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dea:	29 da                	sub    edx,ebx
c0000dec:	01 d8                	add    eax,ebx
c0000dee:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000df4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000df7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dfa:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e00:	74 40                	je     c0000e42 <dlfree+0xc4>
c0000e02:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e06:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e09:	f6 c3 01             	test   bl,0x1
c0000e0c:	75 0e                	jne    c0000e1c <dlfree+0x9e>
c0000e0e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e11:	01 c8                	add    eax,ecx
c0000e13:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e16:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e19:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e1c:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e22:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e29:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e2c:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e32:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e35:	89 c1                	mov    ecx,eax
c0000e37:	83 c9 01             	or     ecx,0x1
c0000e3a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e3d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e40:	eb 10                	jmp    c0000e52 <dlfree+0xd4>
c0000e42:	01 c8                	add    eax,ecx
c0000e44:	89 c1                	mov    ecx,eax
c0000e46:	83 c9 01             	or     ecx,0x1
c0000e49:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e4c:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e52:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e57:	76 16                	jbe    c0000e6f <dlfree+0xf1>
c0000e59:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e60:	74 0d                	je     c0000e6f <dlfree+0xf1>
c0000e62:	5b                   	pop    ebx
c0000e63:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e68:	5e                   	pop    esi
c0000e69:	5f                   	pop    edi
c0000e6a:	e9 28 fe ff ff       	jmp    c0000c97 <malloc_consolidate>
c0000e6f:	5b                   	pop    ebx
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	c3                   	ret    

c0000e73 <sYSMALLOc>:
c0000e73:	55                   	push   ebp
c0000e74:	57                   	push   edi
c0000e75:	56                   	push   esi
c0000e76:	53                   	push   ebx
c0000e77:	89 d3                	mov    ebx,edx
c0000e79:	83 ec 2c             	sub    esp,0x2c
c0000e7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e80:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e86:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e89:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e90:	74 1f                	je     c0000eb1 <sYSMALLOc+0x3e>
c0000e92:	89 d0                	mov    eax,edx
c0000e94:	e8 fe fd ff ff       	call   c0000c97 <malloc_consolidate>
c0000e99:	83 ec 0c             	sub    esp,0xc
c0000e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea0:	83 e8 07             	sub    eax,0x7
c0000ea3:	50                   	push   eax
c0000ea4:	e8 33 02 00 00       	call   c00010dc <dlmalloc>
c0000ea9:	83 c4 10             	add    esp,0x10
c0000eac:	e9 23 02 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c0000eb1:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000eb8:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ebe:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec1:	83 c0 10             	add    eax,0x10
c0000ec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ec8:	01 c2                	add    edx,eax
c0000eca:	83 e5 fc             	and    ebp,0xfffffffc
c0000ecd:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ed4:	74 02                	je     c0000ed8 <sYSMALLOc+0x65>
c0000ed6:	29 ea                	sub    edx,ebp
c0000ed8:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000ee2:	21 ca                	and    edx,ecx
c0000ee4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ee8:	7f 07                	jg     c0000ef1 <sYSMALLOc+0x7e>
c0000eea:	31 c0                	xor    eax,eax
c0000eec:	e9 e3 01 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c0000ef1:	83 ec 0c             	sub    esp,0xc
c0000ef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ef8:	e8 1f 6a 00 00       	call   c000791c <sbrk>
c0000efd:	83 c4 10             	add    esp,0x10
c0000f00:	83 f8 ff             	cmp    eax,0xffffffff
c0000f03:	89 c6                	mov    esi,eax
c0000f05:	74 e3                	je     c0000eea <sYSMALLOc+0x77>
c0000f07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f0b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f0e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f14:	39 c2                	cmp    edx,eax
c0000f16:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f1c:	75 11                	jne    c0000f2f <sYSMALLOc+0xbc>
c0000f1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f22:	01 e8                	add    eax,ebp
c0000f24:	83 c8 01             	or     eax,0x1
c0000f27:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f2a:	e9 93 00 00 00       	jmp    c0000fc2 <sYSMALLOc+0x14f>
c0000f2f:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f35:	a8 01                	test   al,0x1
c0000f37:	0f 84 73 01 00 00    	je     c00010b0 <sYSMALLOc+0x23d>
c0000f3d:	85 ed                	test   ebp,ebp
c0000f3f:	74 12                	je     c0000f53 <sYSMALLOc+0xe0>
c0000f41:	39 f2                	cmp    edx,esi
c0000f43:	76 0e                	jbe    c0000f53 <sYSMALLOc+0xe0>
c0000f45:	83 e0 fe             	and    eax,0xfffffffe
c0000f48:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f4e:	e9 5d 01 00 00       	jmp    c00010b0 <sYSMALLOc+0x23d>
c0000f53:	85 ed                	test   ebp,ebp
c0000f55:	74 0c                	je     c0000f63 <sYSMALLOc+0xf0>
c0000f57:	89 f0                	mov    eax,esi
c0000f59:	29 d0                	sub    eax,edx
c0000f5b:	01 c1                	add    ecx,eax
c0000f5d:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f63:	89 f2                	mov    edx,esi
c0000f65:	83 e2 07             	and    edx,0x7
c0000f68:	0f 84 b1 00 00 00    	je     c000101f <sYSMALLOc+0x1ac>
c0000f6e:	b8 08 00 00 00       	mov    eax,0x8
c0000f73:	29 d0                	sub    eax,edx
c0000f75:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f80:	01 e8                	add    eax,ebp
c0000f82:	83 ec 0c             	sub    esp,0xc
c0000f85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f88:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f8c:	01 f2                	add    edx,esi
c0000f8e:	29 d0                	sub    eax,edx
c0000f90:	01 d1                	add    ecx,edx
c0000f92:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f96:	01 c1                	add    ecx,eax
c0000f98:	51                   	push   ecx
c0000f99:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f9d:	e8 7a 69 00 00       	call   c000791c <sbrk>
c0000fa2:	83 c4 10             	add    esp,0x10
c0000fa5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0000fac:	75 7c                	jne    c000102a <sYSMALLOc+0x1b7>
c0000fae:	83 ec 0c             	sub    esp,0xc
c0000fb1:	6a 00                	push   0x0
c0000fb3:	e8 64 69 00 00       	call   c000791c <sbrk>
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	31 c9                	xor    ecx,ecx
c0000fbd:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc0:	75 7e                	jne    c0001040 <sYSMALLOc+0x1cd>
c0000fc2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fce:	73 06                	jae    c0000fd6 <sYSMALLOc+0x163>
c0000fd0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe2:	73 06                	jae    c0000fea <sYSMALLOc+0x177>
c0000fe4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff0:	83 e2 fc             	and    edx,0xfffffffc
c0000ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000ff7:	0f 87 ed fe ff ff    	ja     c0000eea <sYSMALLOc+0x77>
c0000ffd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001001:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001004:	29 fa                	sub    edx,edi
c0001006:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001009:	89 fb                	mov    ebx,edi
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 cb 01             	or     ebx,0x1
c0001011:	83 c0 08             	add    eax,0x8
c0001014:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001017:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101a:	e9 b5 00 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c000101f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0001023:	31 c0                	xor    eax,eax
c0001025:	e9 52 ff ff ff       	jmp    c0000f7c <sYSMALLOc+0x109>
c000102a:	39 c6                	cmp    esi,eax
c000102c:	76 12                	jbe    c0001040 <sYSMALLOc+0x1cd>
c000102e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001032:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001039:	01 f0                	add    eax,esi
c000103b:	e9 7b ff ff ff       	jmp    c0000fbb <sYSMALLOc+0x148>
c0001040:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001044:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001047:	29 f0                	sub    eax,esi
c0001049:	01 c8                	add    eax,ecx
c000104b:	83 c8 01             	or     eax,0x1
c000104e:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001051:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001057:	85 ed                	test   ebp,ebp
c0001059:	0f 84 63 ff ff ff    	je     c0000fc2 <sYSMALLOc+0x14f>
c000105f:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001062:	83 e0 f8             	and    eax,0xfffffff8
c0001065:	89 c2                	mov    edx,eax
c0001067:	83 ca 01             	or     edx,0x1
c000106a:	83 f8 0f             	cmp    eax,0xf
c000106d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001070:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001078:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001080:	0f 86 3c ff ff ff    	jbe    c0000fc2 <sYSMALLOc+0x14f>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	83 c7 08             	add    edi,0x8
c0001092:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000109c:	57                   	push   edi
c000109d:	e8 dc fc ff ff       	call   c0000d7e <dlfree>
c00010a2:	83 c4 10             	add    esp,0x10
c00010a5:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010ab:	e9 12 ff ff ff       	jmp    c0000fc2 <sYSMALLOc+0x14f>
c00010b0:	83 ec 0c             	sub    esp,0xc
c00010b3:	6a 00                	push   0x0
c00010b5:	e8 62 68 00 00       	call   c000791c <sbrk>
c00010ba:	89 c2                	mov    edx,eax
c00010bc:	29 f2                	sub    edx,esi
c00010be:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010c2:	83 c4 10             	add    esp,0x10
c00010c5:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010cb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010cf:	e9 e7 fe ff ff       	jmp    c0000fbb <sYSMALLOc+0x148>
c00010d4:	83 c4 2c             	add    esp,0x2c
c00010d7:	5b                   	pop    ebx
c00010d8:	5e                   	pop    esi
c00010d9:	5f                   	pop    edi
c00010da:	5d                   	pop    ebp
c00010db:	c3                   	ret    

c00010dc <dlmalloc>:
c00010dc:	55                   	push   ebp
c00010dd:	57                   	push   edi
c00010de:	56                   	push   esi
c00010df:	53                   	push   ebx
c00010e0:	83 ec 1c             	sub    esp,0x1c
c00010e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010e7:	83 f8 df             	cmp    eax,0xffffffdf
c00010ea:	0f 87 70 03 00 00    	ja     c0001460 <dlmalloc+0x384>
c00010f0:	83 c0 0b             	add    eax,0xb
c00010f3:	be 10 00 00 00       	mov    esi,0x10
c00010f8:	83 f8 0f             	cmp    eax,0xf
c00010fb:	76 05                	jbe    c0001102 <dlmalloc+0x26>
c00010fd:	83 e0 f8             	and    eax,0xfffffff8
c0001100:	89 c6                	mov    esi,eax
c0001102:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001108:	f7 c7 01 00 00 00    	test   edi,0x1
c000110e:	75 17                	jne    c0001127 <dlmalloc+0x4b>
c0001110:	85 ff                	test   edi,edi
c0001112:	0f 85 05 03 00 00    	jne    c000141d <dlmalloc+0x341>
c0001118:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000111d:	e8 75 fb ff ff       	call   c0000c97 <malloc_consolidate>
c0001122:	e9 f6 02 00 00       	jmp    c000141d <dlmalloc+0x341>
c0001127:	39 f7                	cmp    edi,esi
c0001129:	72 1f                	jb     c000114a <dlmalloc+0x6e>
c000112b:	89 f2                	mov    edx,esi
c000112d:	c1 ea 03             	shr    edx,0x3
c0001130:	83 ea 02             	sub    edx,0x2
c0001133:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c000113a:	85 c0                	test   eax,eax
c000113c:	74 0c                	je     c000114a <dlmalloc+0x6e>
c000113e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001141:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001148:	eb 30                	jmp    c000117a <dlmalloc+0x9e>
c000114a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001150:	89 f0                	mov    eax,esi
c0001152:	77 2e                	ja     c0001182 <dlmalloc+0xa6>
c0001154:	c1 e8 03             	shr    eax,0x3
c0001157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115b:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c0001162:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001165:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001168:	39 c3                	cmp    ebx,eax
c000116a:	74 2e                	je     c000119a <dlmalloc+0xbe>
c000116c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000116f:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001174:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001177:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000117a:	83 c0 08             	add    eax,0x8
c000117d:	e9 e0 02 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001182:	e8 8c fa ff ff       	call   c0000c13 <largebin_index>
c0001187:	83 e7 02             	and    edi,0x2
c000118a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000118e:	74 0a                	je     c000119a <dlmalloc+0xbe>
c0001190:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001195:	e8 fd fa ff ff       	call   c0000c97 <malloc_consolidate>
c000119a:	8d 46 10             	lea    eax,[esi+0x10]
c000119d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a1:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011a7:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011ad:	0f 84 13 01 00 00    	je     c00012c6 <dlmalloc+0x1ea>
c00011b3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011b6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011b9:	83 e7 fc             	and    edi,0xfffffffc
c00011bc:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c2:	77 4c                	ja     c0001210 <dlmalloc+0x134>
c00011c4:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011c9:	75 45                	jne    c0001210 <dlmalloc+0x134>
c00011cb:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d1:	75 3d                	jne    c0001210 <dlmalloc+0x134>
c00011d3:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011d7:	73 37                	jae    c0001210 <dlmalloc+0x134>
c00011d9:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011dc:	89 fa                	mov    edx,edi
c00011de:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011e3:	29 f2                	sub    edx,esi
c00011e5:	83 ce 01             	or     esi,0x1
c00011e8:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011ed:	89 d1                	mov    ecx,edx
c00011ef:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011f4:	83 c9 01             	or     ecx,0x1
c00011f7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011fe:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001205:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001208:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000120b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000120e:	eb 15                	jmp    c0001225 <dlmalloc+0x149>
c0001210:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c0001215:	39 fe                	cmp    esi,edi
c0001217:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000121e:	75 0d                	jne    c000122d <dlmalloc+0x151>
c0001220:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001225:	8d 43 08             	lea    eax,[ebx+0x8]
c0001228:	e9 35 02 00 00       	jmp    c0001462 <dlmalloc+0x386>
c000122d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001233:	89 f8                	mov    eax,edi
c0001235:	77 19                	ja     c0001250 <dlmalloc+0x174>
c0001237:	c1 e8 03             	shr    eax,0x3
c000123a:	8d 14 00             	lea    edx,[eax+eax*1]
c000123d:	83 c2 0d             	add    edx,0xd
c0001240:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001247:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000124e:	eb 46                	jmp    c0001296 <dlmalloc+0x1ba>
c0001250:	e8 be f9 ff ff       	call   c0000c13 <largebin_index>
c0001255:	8d 14 00             	lea    edx,[eax+eax*1]
c0001258:	83 c2 0d             	add    edx,0xd
c000125b:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001262:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001269:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000126c:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001270:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001274:	89 d5                	mov    ebp,edx
c0001276:	74 1e                	je     c0001296 <dlmalloc+0x1ba>
c0001278:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000127b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000127e:	77 12                	ja     c0001292 <dlmalloc+0x1b6>
c0001280:	83 cf 01             	or     edi,0x1
c0001283:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001286:	76 05                	jbe    c000128d <dlmalloc+0x1b1>
c0001288:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000128b:	eb f6                	jmp    c0001283 <dlmalloc+0x1a7>
c000128d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001290:	eb 04                	jmp    c0001296 <dlmalloc+0x1ba>
c0001292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001296:	89 c7                	mov    edi,eax
c0001298:	88 c1                	mov    cl,al
c000129a:	c1 ff 05             	sar    edi,0x5
c000129d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a1:	bf 01 00 00 00       	mov    edi,0x1
c00012a6:	d3 e7                	shl    edi,cl
c00012a8:	89 f8                	mov    eax,edi
c00012aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012ae:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012b5:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012bb:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012be:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c1:	e9 db fe ff ff       	jmp    c00011a1 <dlmalloc+0xc5>
c00012c6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012cc:	76 78                	jbe    c0001346 <dlmalloc+0x26a>
c00012ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012d2:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012dc:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012df:	39 ca                	cmp    edx,ecx
c00012e1:	74 63                	je     c0001346 <dlmalloc+0x26a>
c00012e3:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012e6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012e9:	83 e3 fc             	and    ebx,0xfffffffc
c00012ec:	39 de                	cmp    esi,ebx
c00012ee:	77 52                	ja     c0001342 <dlmalloc+0x266>
c00012f0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012f3:	89 df                	mov    edi,ebx
c00012f5:	01 d3                	add    ebx,edx
c00012f7:	29 f7                	sub    edi,esi
c00012f9:	83 ff 0f             	cmp    edi,0xf
c00012fc:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012ff:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001302:	8d 42 08             	lea    eax,[edx+0x8]
c0001305:	77 09                	ja     c0001310 <dlmalloc+0x234>
c0001307:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000130b:	e9 52 01 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001310:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c000131c:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c0001322:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001329:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001330:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001333:	89 fa                	mov    edx,edi
c0001335:	83 ca 01             	or     edx,0x1
c0001338:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000133b:	89 3b                	mov    DWORD PTR [ebx],edi
c000133d:	e9 20 01 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001342:	89 c2                	mov    edx,eax
c0001344:	eb 99                	jmp    c00012df <dlmalloc+0x203>
c0001346:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000134a:	b8 01 00 00 00       	mov    eax,0x1
c000134f:	41                   	inc    ecx
c0001350:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001357:	89 cb                	mov    ebx,ecx
c0001359:	c1 eb 05             	shr    ebx,0x5
c000135c:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001363:	d3 e0                	shl    eax,cl
c0001365:	39 f8                	cmp    eax,edi
c0001367:	77 04                	ja     c000136d <dlmalloc+0x291>
c0001369:	85 c0                	test   eax,eax
c000136b:	75 26                	jne    c0001393 <dlmalloc+0x2b7>
c000136d:	43                   	inc    ebx
c000136e:	83 fb 02             	cmp    ebx,0x2
c0001371:	0f 87 a6 00 00 00    	ja     c000141d <dlmalloc+0x341>
c0001377:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000137e:	85 ff                	test   edi,edi
c0001380:	74 eb                	je     c000136d <dlmalloc+0x291>
c0001382:	89 d8                	mov    eax,ebx
c0001384:	c1 e0 06             	shl    eax,0x6
c0001387:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000138e:	b8 01 00 00 00       	mov    eax,0x1
c0001393:	85 f8                	test   eax,edi
c0001395:	75 07                	jne    c000139e <dlmalloc+0x2c2>
c0001397:	83 c2 08             	add    edx,0x8
c000139a:	01 c0                	add    eax,eax
c000139c:	eb f5                	jmp    c0001393 <dlmalloc+0x2b7>
c000139e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a1:	39 ca                	cmp    edx,ecx
c00013a3:	75 14                	jne    c00013b9 <dlmalloc+0x2dd>
c00013a5:	89 c1                	mov    ecx,eax
c00013a7:	83 c2 08             	add    edx,0x8
c00013aa:	f7 d1                	not    ecx
c00013ac:	01 c0                	add    eax,eax
c00013ae:	21 cf                	and    edi,ecx
c00013b0:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013b7:	eb ac                	jmp    c0001365 <dlmalloc+0x289>
c00013b9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013bc:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013bf:	83 e0 fc             	and    eax,0xfffffffc
c00013c2:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013c5:	89 c3                	mov    ebx,eax
c00013c7:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013ca:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013cd:	29 f3                	sub    ebx,esi
c00013cf:	8d 41 08             	lea    eax,[ecx+0x8]
c00013d2:	83 fb 0f             	cmp    ebx,0xf
c00013d5:	77 09                	ja     c00013e0 <dlmalloc+0x304>
c00013d7:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013db:	e9 82 00 00 00       	jmp    c0001462 <dlmalloc+0x386>
c00013e0:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013e3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013e9:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013ef:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013f5:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013fc:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001403:	77 06                	ja     c000140b <dlmalloc+0x32f>
c0001405:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000140b:	83 ce 01             	or     esi,0x1
c000140e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001411:	89 d9                	mov    ecx,ebx
c0001413:	83 c9 01             	or     ecx,0x1
c0001416:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001419:	89 1a                	mov    DWORD PTR [edx],ebx
c000141b:	eb 45                	jmp    c0001462 <dlmalloc+0x386>
c000141d:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001422:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001425:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001428:	83 e2 fc             	and    edx,0xfffffffc
c000142b:	39 d1                	cmp    ecx,edx
c000142d:	77 1e                	ja     c000144d <dlmalloc+0x371>
c000142f:	89 f3                	mov    ebx,esi
c0001431:	29 f2                	sub    edx,esi
c0001433:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001436:	83 cb 01             	or     ebx,0x1
c0001439:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c000143f:	83 ca 01             	or     edx,0x1
c0001442:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001445:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001448:	e9 2d fd ff ff       	jmp    c000117a <dlmalloc+0x9e>
c000144d:	83 c4 1c             	add    esp,0x1c
c0001450:	89 f0                	mov    eax,esi
c0001452:	5b                   	pop    ebx
c0001453:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 13 fa ff ff       	jmp    c0000e73 <sYSMALLOc>
c0001460:	31 c0                	xor    eax,eax
c0001462:	83 c4 1c             	add    esp,0x1c
c0001465:	5b                   	pop    ebx
c0001466:	5e                   	pop    esi
c0001467:	5f                   	pop    edi
c0001468:	5d                   	pop    ebp
c0001469:	c3                   	ret    

c000146a <iALLOc>:
c000146a:	55                   	push   ebp
c000146b:	89 c5                	mov    ebp,eax
c000146d:	57                   	push   edi
c000146e:	56                   	push   esi
c000146f:	53                   	push   ebx
c0001470:	83 ec 2c             	sub    esp,0x2c
c0001473:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001477:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000147b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001482:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001486:	75 12                	jne    c000149a <iALLOc+0x30>
c0001488:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000148c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001491:	e8 01 f8 ff ff       	call   c0000c97 <malloc_consolidate>
c0001496:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000149a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000149f:	74 12                	je     c00014b3 <iALLOc+0x49>
c00014a1:	85 ed                	test   ebp,ebp
c00014a3:	0f 84 64 01 00 00    	je     c000160d <iALLOc+0x1a3>
c00014a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b1:	eb 33                	jmp    c00014e6 <iALLOc+0x7c>
c00014b3:	85 ed                	test   ebp,ebp
c00014b5:	75 14                	jne    c00014cb <iALLOc+0x61>
c00014b7:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014bf:	83 c4 2c             	add    esp,0x2c
c00014c2:	5b                   	pop    ebx
c00014c3:	5e                   	pop    esi
c00014c4:	5f                   	pop    edi
c00014c5:	5d                   	pop    ebp
c00014c6:	e9 11 fc ff ff       	jmp    c00010dc <dlmalloc>
c00014cb:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014da:	83 f8 0f             	cmp    eax,0xf
c00014dd:	76 07                	jbe    c00014e6 <iALLOc+0x7c>
c00014df:	83 e0 f8             	and    eax,0xfffffff8
c00014e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014e6:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014eb:	75 09                	jne    c00014f6 <iALLOc+0x8c>
c00014ed:	89 d0                	mov    eax,edx
c00014ef:	31 f6                	xor    esi,esi
c00014f1:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014f4:	eb 3b                	jmp    c0001531 <iALLOc+0xc7>
c00014f6:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001500:	83 c0 0b             	add    eax,0xb
c0001503:	83 f8 0f             	cmp    eax,0xf
c0001506:	76 07                	jbe    c000150f <iALLOc+0xa5>
c0001508:	83 e0 f8             	and    eax,0xfffffff8
c000150b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000150f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001513:	0f af f5             	imul   esi,ebp
c0001516:	eb 25                	jmp    c000153d <iALLOc+0xd3>
c0001518:	8b 18                	mov    ebx,DWORD PTR [eax]
c000151a:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000151d:	bb 10 00 00 00       	mov    ebx,0x10
c0001522:	83 f9 0f             	cmp    ecx,0xf
c0001525:	76 05                	jbe    c000152c <iALLOc+0xc2>
c0001527:	83 e1 f8             	and    ecx,0xfffffff8
c000152a:	89 cb                	mov    ebx,ecx
c000152c:	01 de                	add    esi,ebx
c000152e:	83 c0 04             	add    eax,0x4
c0001531:	39 c7                	cmp    edi,eax
c0001533:	75 e3                	jne    c0001518 <iALLOc+0xae>
c0001535:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000153d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001541:	83 ec 0c             	sub    esp,0xc
c0001544:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c000154a:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001558:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000155c:	50                   	push   eax
c000155d:	e8 7a fb ff ff       	call   c00010dc <dlmalloc>
c0001562:	83 c4 10             	add    esp,0x10
c0001565:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000156b:	85 c0                	test   eax,eax
c000156d:	0f 84 92 00 00 00    	je     c0001605 <iALLOc+0x19b>
c0001573:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001576:	8d 78 f8             	lea    edi,[eax-0x8]
c0001579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000157d:	83 e3 fc             	and    ebx,0xfffffffc
c0001580:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001585:	74 1e                	je     c00015a5 <iALLOc+0x13b>
c0001587:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000158b:	89 d9                	mov    ecx,ebx
c000158d:	52                   	push   edx
c000158e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001592:	83 e9 04             	sub    ecx,0x4
c0001595:	51                   	push   ecx
c0001596:	6a 00                	push   0x0
c0001598:	50                   	push   eax
c0001599:	e8 52 ef ff ff       	call   c00004f0 <memset>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015aa:	75 14                	jne    c00015c0 <iALLOc+0x156>
c00015ac:	8d 04 37             	lea    eax,[edi+esi*1]
c00015af:	29 f3                	sub    ebx,esi
c00015b1:	8d 48 08             	lea    ecx,[eax+0x8]
c00015b4:	83 cb 01             	or     ebx,0x1
c00015b7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ba:	89 f3                	mov    ebx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	31 c0                	xor    eax,eax
c00015c2:	4d                   	dec    ebp
c00015c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015c7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015ca:	39 c5                	cmp    ebp,eax
c00015cc:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015cf:	74 2c                	je     c00015fd <iALLOc+0x193>
c00015d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015d5:	85 c9                	test   ecx,ecx
c00015d7:	75 15                	jne    c00015ee <iALLOc+0x184>
c00015d9:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015dc:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015df:	b9 10 00 00 00       	mov    ecx,0x10
c00015e4:	83 fe 0f             	cmp    esi,0xf
c00015e7:	76 05                	jbe    c00015ee <iALLOc+0x184>
c00015e9:	83 e6 f8             	and    esi,0xfffffff8
c00015ec:	89 f1                	mov    ecx,esi
c00015ee:	89 ce                	mov    esi,ecx
c00015f0:	29 cb                	sub    ebx,ecx
c00015f2:	83 ce 01             	or     esi,0x1
c00015f5:	40                   	inc    eax
c00015f6:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015f9:	01 cf                	add    edi,ecx
c00015fb:	eb c6                	jmp    c00015c3 <iALLOc+0x159>
c00015fd:	83 cb 01             	or     ebx,0x1
c0001600:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001603:	eb 08                	jmp    c000160d <iALLOc+0x1a3>
c0001605:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000160d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001611:	83 c4 2c             	add    esp,0x2c
c0001614:	5b                   	pop    ebx
c0001615:	5e                   	pop    esi
c0001616:	5f                   	pop    edi
c0001617:	5d                   	pop    ebp
c0001618:	c3                   	ret    

c0001619 <dlrealloc>:
c0001619:	55                   	push   ebp
c000161a:	57                   	push   edi
c000161b:	56                   	push   esi
c000161c:	53                   	push   ebx
c000161d:	83 ec 1c             	sub    esp,0x1c
c0001620:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001628:	85 db                	test   ebx,ebx
c000162a:	75 10                	jne    c000163c <dlrealloc+0x23>
c000162c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001630:	83 c4 1c             	add    esp,0x1c
c0001633:	5b                   	pop    ebx
c0001634:	5e                   	pop    esi
c0001635:	5f                   	pop    edi
c0001636:	5d                   	pop    ebp
c0001637:	e9 a0 fa ff ff       	jmp    c00010dc <dlmalloc>
c000163c:	83 f8 df             	cmp    eax,0xffffffdf
c000163f:	76 07                	jbe    c0001648 <dlrealloc+0x2f>
c0001641:	31 db                	xor    ebx,ebx
c0001643:	e9 6b 01 00 00       	jmp    c00017b3 <dlrealloc+0x19a>
c0001648:	83 c0 0b             	add    eax,0xb
c000164b:	bd 10 00 00 00       	mov    ebp,0x10
c0001650:	83 f8 0f             	cmp    eax,0xf
c0001653:	76 05                	jbe    c000165a <dlrealloc+0x41>
c0001655:	83 e0 f8             	and    eax,0xfffffff8
c0001658:	89 c5                	mov    ebp,eax
c000165a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000165d:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001660:	89 ce                	mov    esi,ecx
c0001662:	83 e6 fc             	and    esi,0xfffffffc
c0001665:	f6 c1 02             	test   cl,0x2
c0001668:	75 d7                	jne    c0001641 <dlrealloc+0x28>
c000166a:	39 f5                	cmp    ebp,esi
c000166c:	0f 86 04 01 00 00    	jbe    c0001776 <dlrealloc+0x15d>
c0001672:	8d 14 37             	lea    edx,[edi+esi*1]
c0001675:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000167b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000167e:	75 33                	jne    c00016b3 <dlrealloc+0x9a>
c0001680:	83 e0 fc             	and    eax,0xfffffffc
c0001683:	01 f0                	add    eax,esi
c0001685:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001689:	8d 45 10             	lea    eax,[ebp+0x10]
c000168c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001690:	77 49                	ja     c00016db <dlrealloc+0xc2>
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 e1 01             	and    ecx,0x1
c0001699:	01 ef                	add    edi,ebp
c000169b:	09 e9                	or     ecx,ebp
c000169d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a0:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016a6:	29 e8                	sub    eax,ebp
c00016a8:	83 c8 01             	or     eax,0x1
c00016ab:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016ae:	e9 00 01 00 00       	jmp    c00017b3 <dlrealloc+0x19a>
c00016b3:	89 c1                	mov    ecx,eax
c00016b5:	83 e1 fe             	and    ecx,0xfffffffe
c00016b8:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016bd:	75 1c                	jne    c00016db <dlrealloc+0xc2>
c00016bf:	83 e0 fc             	and    eax,0xfffffffc
c00016c2:	01 f0                	add    eax,esi
c00016c4:	39 c5                	cmp    ebp,eax
c00016c6:	77 13                	ja     c00016db <dlrealloc+0xc2>
c00016c8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016cb:	89 c6                	mov    esi,eax
c00016cd:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016d3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016d6:	e9 9b 00 00 00       	jmp    c0001776 <dlrealloc+0x15d>
c00016db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016df:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016e2:	83 ec 0c             	sub    esp,0xc
c00016e5:	50                   	push   eax
c00016e6:	e8 f1 f9 ff ff       	call   c00010dc <dlmalloc>
c00016eb:	83 c4 10             	add    esp,0x10
c00016ee:	85 c0                	test   eax,eax
c00016f0:	0f 84 4b ff ff ff    	je     c0001641 <dlrealloc+0x28>
c00016f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016fa:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016fd:	39 ca                	cmp    edx,ecx
c00016ff:	75 0a                	jne    c000170b <dlrealloc+0xf2>
c0001701:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001704:	83 e0 fc             	and    eax,0xfffffffc
c0001707:	01 c6                	add    esi,eax
c0001709:	eb 6b                	jmp    c0001776 <dlrealloc+0x15d>
c000170b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000170e:	83 f9 27             	cmp    ecx,0x27
c0001711:	76 08                	jbe    c000171b <dlrealloc+0x102>
c0001713:	89 de                	mov    esi,ebx
c0001715:	89 c7                	mov    edi,eax
c0001717:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001719:	eb 43                	jmp    c000175e <dlrealloc+0x145>
c000171b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000171d:	83 f9 13             	cmp    ecx,0x13
c0001720:	89 10                	mov    DWORD PTR [eax],edx
c0001722:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001725:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001728:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000172b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000172e:	76 2e                	jbe    c000175e <dlrealloc+0x145>
c0001730:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001733:	83 f9 1b             	cmp    ecx,0x1b
c0001736:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001739:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000173c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000173f:	76 1d                	jbe    c000175e <dlrealloc+0x145>
c0001741:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001744:	83 f9 23             	cmp    ecx,0x23
c0001747:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000174a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000174d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001750:	76 0c                	jbe    c000175e <dlrealloc+0x145>
c0001752:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001755:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001758:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000175b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000175e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	53                   	push   ebx
c0001766:	e8 13 f6 ff ff       	call   c0000d7e <dlfree>
c000176b:	83 c4 10             	add    esp,0x10
c000176e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001772:	89 c3                	mov    ebx,eax
c0001774:	eb 3d                	jmp    c00017b3 <dlrealloc+0x19a>
c0001776:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001779:	8d 04 37             	lea    eax,[edi+esi*1]
c000177c:	89 f2                	mov    edx,esi
c000177e:	29 ea                	sub    edx,ebp
c0001780:	83 e1 01             	and    ecx,0x1
c0001783:	83 fa 0f             	cmp    edx,0xf
c0001786:	77 0b                	ja     c0001793 <dlrealloc+0x17a>
c0001788:	09 ce                	or     esi,ecx
c000178a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000178d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001791:	eb 20                	jmp    c00017b3 <dlrealloc+0x19a>
c0001793:	01 ef                	add    edi,ebp
c0001795:	83 ca 01             	or     edx,0x1
c0001798:	09 cd                	or     ebp,ecx
c000179a:	83 ec 0c             	sub    esp,0xc
c000179d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a0:	83 c7 08             	add    edi,0x8
c00017a3:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017a6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017aa:	57                   	push   edi
c00017ab:	e8 ce f5 ff ff       	call   c0000d7e <dlfree>
c00017b0:	83 c4 10             	add    esp,0x10
c00017b3:	83 c4 1c             	add    esp,0x1c
c00017b6:	89 d8                	mov    eax,ebx
c00017b8:	5b                   	pop    ebx
c00017b9:	5e                   	pop    esi
c00017ba:	5f                   	pop    edi
c00017bb:	5d                   	pop    ebp
c00017bc:	c3                   	ret    

c00017bd <dlmemalign>:
c00017bd:	55                   	push   ebp
c00017be:	57                   	push   edi
c00017bf:	56                   	push   esi
c00017c0:	53                   	push   ebx
c00017c1:	83 ec 0c             	sub    esp,0xc
c00017c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017cc:	83 fa 08             	cmp    edx,0x8
c00017cf:	77 10                	ja     c00017e1 <dlmemalign+0x24>
c00017d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017d5:	83 c4 0c             	add    esp,0xc
c00017d8:	5b                   	pop    ebx
c00017d9:	5e                   	pop    esi
c00017da:	5f                   	pop    edi
c00017db:	5d                   	pop    ebp
c00017dc:	e9 fb f8 ff ff       	jmp    c00010dc <dlmalloc>
c00017e1:	83 fa 0f             	cmp    edx,0xf
c00017e4:	bf 10 00 00 00       	mov    edi,0x10
c00017e9:	76 13                	jbe    c00017fe <dlmemalign+0x41>
c00017eb:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017ee:	85 d1                	test   ecx,edx
c00017f0:	75 04                	jne    c00017f6 <dlmemalign+0x39>
c00017f2:	89 d7                	mov    edi,edx
c00017f4:	eb 08                	jmp    c00017fe <dlmemalign+0x41>
c00017f6:	39 d7                	cmp    edi,edx
c00017f8:	73 04                	jae    c00017fe <dlmemalign+0x41>
c00017fa:	01 ff                	add    edi,edi
c00017fc:	eb f8                	jmp    c00017f6 <dlmemalign+0x39>
c00017fe:	83 f8 df             	cmp    eax,0xffffffdf
c0001801:	76 07                	jbe    c000180a <dlmemalign+0x4d>
c0001803:	31 c0                	xor    eax,eax
c0001805:	e9 ce 00 00 00       	jmp    c00018d8 <dlmemalign+0x11b>
c000180a:	83 c0 0b             	add    eax,0xb
c000180d:	bd 10 00 00 00       	mov    ebp,0x10
c0001812:	83 f8 0f             	cmp    eax,0xf
c0001815:	76 05                	jbe    c000181c <dlmemalign+0x5f>
c0001817:	83 e0 f8             	and    eax,0xfffffff8
c000181a:	89 c5                	mov    ebp,eax
c000181c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 b3 f8 ff ff       	call   c00010dc <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	89 c1                	mov    ecx,eax
c0001830:	74 d1                	je     c0001803 <dlmemalign+0x46>
c0001832:	8d 70 f8             	lea    esi,[eax-0x8]
c0001835:	31 d2                	xor    edx,edx
c0001837:	f7 f7                	div    edi
c0001839:	85 d2                	test   edx,edx
c000183b:	74 62                	je     c000189f <dlmemalign+0xe2>
c000183d:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001841:	89 f8                	mov    eax,edi
c0001843:	f7 d8                	neg    eax
c0001845:	21 c3                	and    ebx,eax
c0001847:	83 eb 08             	sub    ebx,0x8
c000184a:	89 d8                	mov    eax,ebx
c000184c:	29 f0                	sub    eax,esi
c000184e:	83 f8 0f             	cmp    eax,0xf
c0001851:	77 02                	ja     c0001855 <dlmemalign+0x98>
c0001853:	01 fb                	add    ebx,edi
c0001855:	89 d8                	mov    eax,ebx
c0001857:	29 f0                	sub    eax,esi
c0001859:	89 c6                	mov    esi,eax
c000185b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185e:	89 c2                	mov    edx,eax
c0001860:	83 e2 fc             	and    edx,0xfffffffc
c0001863:	29 f2                	sub    edx,esi
c0001865:	a8 02                	test   al,0x2
c0001867:	74 10                	je     c0001879 <dlmemalign+0xbc>
c0001869:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000186c:	83 ca 02             	or     edx,0x2
c000186f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001872:	8d 43 08             	lea    eax,[ebx+0x8]
c0001875:	89 33                	mov    DWORD PTR [ebx],esi
c0001877:	eb 5f                	jmp    c00018d8 <dlmemalign+0x11b>
c0001879:	89 d0                	mov    eax,edx
c000187b:	83 ec 0c             	sub    esp,0xc
c000187e:	83 c8 01             	or     eax,0x1
c0001881:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001884:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	83 e0 01             	and    eax,0x1
c000188f:	09 f0                	or     eax,esi
c0001891:	89 de                	mov    esi,ebx
c0001893:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001896:	51                   	push   ecx
c0001897:	e8 e2 f4 ff ff       	call   c0000d7e <dlfree>
c000189c:	83 c4 10             	add    esp,0x10
c000189f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018a2:	a8 02                	test   al,0x2
c00018a4:	75 2f                	jne    c00018d5 <dlmemalign+0x118>
c00018a6:	8d 55 10             	lea    edx,[ebp+0x10]
c00018a9:	83 e0 fc             	and    eax,0xfffffffc
c00018ac:	39 c2                	cmp    edx,eax
c00018ae:	73 25                	jae    c00018d5 <dlmemalign+0x118>
c00018b0:	29 e8                	sub    eax,ebp
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018b8:	83 c8 01             	or     eax,0x1
c00018bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018be:	83 c2 08             	add    edx,0x8
c00018c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018c4:	83 e0 01             	and    eax,0x1
c00018c7:	09 c5                	or     ebp,eax
c00018c9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018cc:	52                   	push   edx
c00018cd:	e8 ac f4 ff ff       	call   c0000d7e <dlfree>
c00018d2:	83 c4 10             	add    esp,0x10
c00018d5:	8d 46 08             	lea    eax,[esi+0x8]
c00018d8:	83 c4 0c             	add    esp,0xc
c00018db:	5b                   	pop    ebx
c00018dc:	5e                   	pop    esi
c00018dd:	5f                   	pop    edi
c00018de:	5d                   	pop    ebp
c00018df:	c3                   	ret    

c00018e0 <dlcalloc>:
c00018e0:	53                   	push   ebx
c00018e1:	83 ec 14             	sub    esp,0x14
c00018e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018e8:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ed:	50                   	push   eax
c00018ee:	e8 e9 f7 ff ff       	call   c00010dc <dlmalloc>
c00018f3:	83 c4 10             	add    esp,0x10
c00018f6:	85 c0                	test   eax,eax
c00018f8:	89 c3                	mov    ebx,eax
c00018fa:	74 77                	je     c0001973 <dlcalloc+0x93>
c00018fc:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018ff:	89 d0                	mov    eax,edx
c0001901:	83 e0 fc             	and    eax,0xfffffffc
c0001904:	f6 c2 02             	test   dl,0x2
c0001907:	75 5a                	jne    c0001963 <dlcalloc+0x83>
c0001909:	83 e8 04             	sub    eax,0x4
c000190c:	83 f8 27             	cmp    eax,0x27
c000190f:	76 03                	jbe    c0001914 <dlcalloc+0x34>
c0001911:	51                   	push   ecx
c0001912:	eb 53                	jmp    c0001967 <dlcalloc+0x87>
c0001914:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000191a:	83 f8 13             	cmp    eax,0x13
c000191d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001924:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000192b:	76 46                	jbe    c0001973 <dlcalloc+0x93>
c000192d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001934:	83 f8 1b             	cmp    eax,0x1b
c0001937:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000193e:	76 33                	jbe    c0001973 <dlcalloc+0x93>
c0001940:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001947:	83 f8 23             	cmp    eax,0x23
c000194a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001951:	76 20                	jbe    c0001973 <dlcalloc+0x93>
c0001953:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000195a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001961:	eb 10                	jmp    c0001973 <dlcalloc+0x93>
c0001963:	52                   	push   edx
c0001964:	83 e8 08             	sub    eax,0x8
c0001967:	50                   	push   eax
c0001968:	6a 00                	push   0x0
c000196a:	53                   	push   ebx
c000196b:	e8 80 eb ff ff       	call   c00004f0 <memset>
c0001970:	83 c4 10             	add    esp,0x10
c0001973:	83 c4 08             	add    esp,0x8
c0001976:	89 d8                	mov    eax,ebx
c0001978:	5b                   	pop    ebx
c0001979:	c3                   	ret    

c000197a <dlcfree>:
c000197a:	e9 ff f3 ff ff       	jmp    c0000d7e <dlfree>

c000197f <dlindependent_calloc>:
c000197f:	83 ec 28             	sub    esp,0x28
c0001982:	b9 03 00 00 00       	mov    ecx,0x3
c0001987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000198b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000198f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001997:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000199b:	e8 ca fa ff ff       	call   c000146a <iALLOc>
c00019a0:	83 c4 2c             	add    esp,0x2c
c00019a3:	c3                   	ret    

c00019a4 <dlindependent_comalloc>:
c00019a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019a8:	31 c9                	xor    ecx,ecx
c00019aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019b6:	e9 af fa ff ff       	jmp    c000146a <iALLOc>

c00019bb <dlvalloc>:
c00019bb:	83 ec 0c             	sub    esp,0xc
c00019be:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019c5:	75 0a                	jne    c00019d1 <dlvalloc+0x16>
c00019c7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019cc:	e8 c6 f2 ff ff       	call   c0000c97 <malloc_consolidate>
c00019d1:	50                   	push   eax
c00019d2:	50                   	push   eax
c00019d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019d7:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019dd:	e8 db fd ff ff       	call   c00017bd <dlmemalign>
c00019e2:	83 c4 1c             	add    esp,0x1c
c00019e5:	c3                   	ret    

c00019e6 <dlpvalloc>:
c00019e6:	83 ec 0c             	sub    esp,0xc
c00019e9:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f0:	75 0a                	jne    c00019fc <dlpvalloc+0x16>
c00019f2:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019f7:	e8 9b f2 ff ff       	call   c0000c97 <malloc_consolidate>
c00019fc:	52                   	push   edx
c00019fd:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a02:	52                   	push   edx
c0001a03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a07:	89 c1                	mov    ecx,eax
c0001a09:	f7 d9                	neg    ecx
c0001a0b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a0f:	21 ca                	and    edx,ecx
c0001a11:	52                   	push   edx
c0001a12:	50                   	push   eax
c0001a13:	e8 a5 fd ff ff       	call   c00017bd <dlmemalign>
c0001a18:	83 c4 1c             	add    esp,0x1c
c0001a1b:	c3                   	ret    

c0001a1c <dlmalloc_trim>:
c0001a1c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a21:	e8 71 f2 ff ff       	call   c0000c97 <malloc_consolidate>
c0001a26:	31 c0                	xor    eax,eax
c0001a28:	c3                   	ret    

c0001a29 <dlmalloc_usable_size>:
c0001a29:	53                   	push   ebx
c0001a2a:	31 c0                	xor    eax,eax
c0001a2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a30:	85 c9                	test   ecx,ecx
c0001a32:	74 24                	je     c0001a58 <dlmalloc_usable_size+0x2f>
c0001a34:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a37:	f6 c2 02             	test   dl,0x2
c0001a3a:	74 08                	je     c0001a44 <dlmalloc_usable_size+0x1b>
c0001a3c:	83 e2 fc             	and    edx,0xfffffffc
c0001a3f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a42:	eb 14                	jmp    c0001a58 <dlmalloc_usable_size+0x2f>
c0001a44:	89 d3                	mov    ebx,edx
c0001a46:	31 c0                	xor    eax,eax
c0001a48:	83 e3 fe             	and    ebx,0xfffffffe
c0001a4b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a50:	74 06                	je     c0001a58 <dlmalloc_usable_size+0x2f>
c0001a52:	83 e2 fc             	and    edx,0xfffffffc
c0001a55:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a58:	5b                   	pop    ebx
c0001a59:	c3                   	ret    

c0001a5a <dlmallinfo>:
c0001a5a:	55                   	push   ebp
c0001a5b:	57                   	push   edi
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	83 ec 08             	sub    esp,0x8
c0001a61:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a6c:	75 0a                	jne    c0001a78 <dlmallinfo+0x1e>
c0001a6e:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a73:	e8 1f f2 ff ff       	call   c0000c97 <malloc_consolidate>
c0001a78:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a7d:	31 ed                	xor    ebp,ebp
c0001a7f:	31 c9                	xor    ecx,ecx
c0001a81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a84:	83 e0 fc             	and    eax,0xfffffffc
c0001a87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a8b:	31 c0                	xor    eax,eax
c0001a8d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a94:	85 d2                	test   edx,edx
c0001a96:	74 0e                	je     c0001aa6 <dlmallinfo+0x4c>
c0001a98:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a9b:	45                   	inc    ebp
c0001a9c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a9f:	83 e6 fc             	and    esi,0xfffffffc
c0001aa2:	01 f1                	add    ecx,esi
c0001aa4:	eb ee                	jmp    c0001a94 <dlmallinfo+0x3a>
c0001aa6:	40                   	inc    eax
c0001aa7:	83 f8 0a             	cmp    eax,0xa
c0001aaa:	75 e1                	jne    c0001a8d <dlmallinfo+0x33>
c0001aac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ab7:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001aba:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001abf:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ac2:	39 f0                	cmp    eax,esi
c0001ac4:	74 10                	je     c0001ad6 <dlmallinfo+0x7c>
c0001ac6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ac9:	ff 04 24             	inc    DWORD PTR [esp]
c0001acc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001acf:	83 e7 fc             	and    edi,0xfffffffc
c0001ad2:	01 fa                	add    edx,edi
c0001ad4:	eb ec                	jmp    c0001ac2 <dlmallinfo+0x68>
c0001ad6:	83 c0 08             	add    eax,0x8
c0001ad9:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ade:	75 df                	jne    c0001abf <dlmallinfo+0x65>
c0001ae0:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001ae6:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ae9:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001aee:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001af4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001af7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001afa:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b00:	89 03                	mov    DWORD PTR [ebx],eax
c0001b02:	29 d0                	sub    eax,edx
c0001b04:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b0b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b0e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b11:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b17:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b1a:	89 d8                	mov    eax,ebx
c0001b1c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b1f:	83 c4 08             	add    esp,0x8
c0001b22:	5b                   	pop    ebx
c0001b23:	5e                   	pop    esi
c0001b24:	5f                   	pop    edi
c0001b25:	5d                   	pop    ebp
c0001b26:	c2 04 00             	ret    0x4

c0001b29 <dlmalloc_stats>:
c0001b29:	83 ec 30             	sub    esp,0x30
c0001b2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b30:	50                   	push   eax
c0001b31:	e8 24 ff ff ff       	call   c0001a5a <dlmallinfo>
c0001b36:	83 c4 30             	add    esp,0x30
c0001b39:	c3                   	ret    

c0001b3a <dlmallopt>:
c0001b3a:	56                   	push   esi
c0001b3b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b40:	53                   	push   ebx
c0001b41:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b49:	e8 49 f1 ff ff       	call   c0000c97 <malloc_consolidate>
c0001b4e:	8d 46 04             	lea    eax,[esi+0x4]
c0001b51:	83 f8 05             	cmp    eax,0x5
c0001b54:	77 67                	ja     c0001bbd <dlmallopt+0x83>
c0001b56:	ff 24 85 44 f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0fbc]
c0001b5d:	83 fb 50             	cmp    ebx,0x50
c0001b60:	77 5b                	ja     c0001bbd <dlmallopt+0x83>
c0001b62:	85 db                	test   ebx,ebx
c0001b64:	ba 08 00 00 00       	mov    edx,0x8
c0001b69:	74 12                	je     c0001b7d <dlmallopt+0x43>
c0001b6b:	83 c3 0b             	add    ebx,0xb
c0001b6e:	ba 10 00 00 00       	mov    edx,0x10
c0001b73:	83 fb 0f             	cmp    ebx,0xf
c0001b76:	76 05                	jbe    c0001b7d <dlmallopt+0x43>
c0001b78:	89 da                	mov    edx,ebx
c0001b7a:	83 e2 f8             	and    edx,0xfffffff8
c0001b7d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b82:	83 e0 03             	and    eax,0x3
c0001b85:	09 d0                	or     eax,edx
c0001b87:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b8c:	eb 31                	jmp    c0001bbf <dlmallopt+0x85>
c0001b8e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b94:	eb 06                	jmp    c0001b9c <dlmallopt+0x62>
c0001b96:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b9c:	be 01 00 00 00       	mov    esi,0x1
c0001ba1:	eb 1c                	jmp    c0001bbf <dlmallopt+0x85>
c0001ba3:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001ba9:	eb f1                	jmp    c0001b9c <dlmallopt+0x62>
c0001bab:	31 f6                	xor    esi,esi
c0001bad:	85 db                	test   ebx,ebx
c0001baf:	75 0e                	jne    c0001bbf <dlmallopt+0x85>
c0001bb1:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bbb:	eb df                	jmp    c0001b9c <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	5b                   	pop    ebx
c0001bc0:	89 f0                	mov    eax,esi
c0001bc2:	5e                   	pop    esi
c0001bc3:	c3                   	ret    

c0001bc4 <isblank>:
c0001bc4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bc9:	74 09                	je     c0001bd4 <isblank+0x10>
c0001bcb:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd0:	75 0a                	jne    c0001bdc <isblank+0x18>
c0001bd2:	66 90                	xchg   ax,ax
c0001bd4:	b8 01 00 00 00       	mov    eax,0x1
c0001bd9:	c3                   	ret    
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 00 00 00 00       	mov    eax,0x0
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax

c0001be4 <iscntrl>:
c0001be4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001be9:	7e 09                	jle    c0001bf4 <iscntrl+0x10>
c0001beb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf0:	75 0a                	jne    c0001bfc <iscntrl+0x18>
c0001bf2:	66 90                	xchg   ax,ax
c0001bf4:	b8 01 00 00 00       	mov    eax,0x1
c0001bf9:	c3                   	ret    
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 00 00 00 00       	mov    eax,0x0
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax

c0001c04 <isdigit>:
c0001c04:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c09:	7e 0d                	jle    c0001c18 <isdigit+0x14>
c0001c0b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c10:	7f 06                	jg     c0001c18 <isdigit+0x14>
c0001c12:	b8 01 00 00 00       	mov    eax,0x1
c0001c17:	c3                   	ret    
c0001c18:	b8 00 00 00 00       	mov    eax,0x0
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax

c0001c20 <islower>:
c0001c20:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c25:	7e 0d                	jle    c0001c34 <islower+0x14>
c0001c27:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c2c:	7f 06                	jg     c0001c34 <islower+0x14>
c0001c2e:	b8 01 00 00 00       	mov    eax,0x1
c0001c33:	c3                   	ret    
c0001c34:	b8 00 00 00 00       	mov    eax,0x0
c0001c39:	c3                   	ret    
c0001c3a:	66 90                	xchg   ax,ax

c0001c3c <isspace>:
c0001c3c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c41:	7c 19                	jl     c0001c5c <isspace+0x20>
c0001c43:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c48:	7e 0a                	jle    c0001c54 <isspace+0x18>
c0001c4a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c4f:	75 0b                	jne    c0001c5c <isspace+0x20>
c0001c51:	8d 76 00             	lea    esi,[esi+0x0]
c0001c54:	b8 01 00 00 00       	mov    eax,0x1
c0001c59:	c3                   	ret    
c0001c5a:	66 90                	xchg   ax,ax
c0001c5c:	b8 00 00 00 00       	mov    eax,0x0
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax

c0001c64 <isupper>:
c0001c64:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c69:	7e 0d                	jle    c0001c78 <isupper+0x14>
c0001c6b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c70:	7f 06                	jg     c0001c78 <isupper+0x14>
c0001c72:	b8 01 00 00 00       	mov    eax,0x1
c0001c77:	c3                   	ret    
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalpha>:
c0001c80:	83 ec 04             	sub    esp,0x4
c0001c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c8a:	e8 d5 ff ff ff       	call   c0001c64 <isupper>
c0001c8f:	85 c0                	test   eax,eax
c0001c91:	75 11                	jne    c0001ca4 <isalpha+0x24>
c0001c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001c97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c9a:	e8 81 ff ff ff       	call   c0001c20 <islower>
c0001c9f:	85 c0                	test   eax,eax
c0001ca1:	74 09                	je     c0001cac <isalpha+0x2c>
c0001ca3:	90                   	nop
c0001ca4:	b8 01 00 00 00       	mov    eax,0x1
c0001ca9:	eb 09                	jmp    c0001cb4 <isalpha+0x34>
c0001cab:	90                   	nop
c0001cac:	b8 00 00 00 00       	mov    eax,0x0
c0001cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0001cb4:	83 c4 04             	add    esp,0x4
c0001cb7:	c3                   	ret    

c0001cb8 <isalnum>:
c0001cb8:	83 ec 04             	sub    esp,0x4
c0001cbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001cbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cc2:	e8 b9 ff ff ff       	call   c0001c80 <isalpha>
c0001cc7:	85 c0                	test   eax,eax
c0001cc9:	75 11                	jne    c0001cdc <isalnum+0x24>
c0001ccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ccf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cd2:	e8 2d ff ff ff       	call   c0001c04 <isdigit>
c0001cd7:	85 c0                	test   eax,eax
c0001cd9:	74 09                	je     c0001ce4 <isalnum+0x2c>
c0001cdb:	90                   	nop
c0001cdc:	b8 01 00 00 00       	mov    eax,0x1
c0001ce1:	eb 09                	jmp    c0001cec <isalnum+0x34>
c0001ce3:	90                   	nop
c0001ce4:	b8 00 00 00 00       	mov    eax,0x0
c0001ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0001cec:	83 c4 04             	add    esp,0x4
c0001cef:	c3                   	ret    

c0001cf0 <ispunct>:
c0001cf0:	83 ec 04             	sub    esp,0x4
c0001cf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cfa:	e8 b9 ff ff ff       	call   c0001cb8 <isalnum>
c0001cff:	85 c0                	test   eax,eax
c0001d01:	75 29                	jne    c0001d2c <ispunct+0x3c>
c0001d03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0a:	e8 2d ff ff ff       	call   c0001c3c <isspace>
c0001d0f:	85 c0                	test   eax,eax
c0001d11:	75 19                	jne    c0001d2c <ispunct+0x3c>
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 c5 fe ff ff       	call   c0001be4 <iscntrl>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 09                	jne    c0001d2c <ispunct+0x3c>
c0001d23:	b8 01 00 00 00       	mov    eax,0x1
c0001d28:	eb 0a                	jmp    c0001d34 <ispunct+0x44>
c0001d2a:	66 90                	xchg   ax,ax
c0001d2c:	b8 00 00 00 00       	mov    eax,0x0
c0001d31:	8d 76 00             	lea    esi,[esi+0x0]
c0001d34:	83 c4 04             	add    esp,0x4
c0001d37:	c3                   	ret    

c0001d38 <isgraph>:
c0001d38:	83 ec 04             	sub    esp,0x4
c0001d3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d42:	e8 71 ff ff ff       	call   c0001cb8 <isalnum>
c0001d47:	85 c0                	test   eax,eax
c0001d49:	75 11                	jne    c0001d5c <isgraph+0x24>
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 99 ff ff ff       	call   c0001cf0 <ispunct>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	74 09                	je     c0001d64 <isgraph+0x2c>
c0001d5b:	90                   	nop
c0001d5c:	b8 01 00 00 00       	mov    eax,0x1
c0001d61:	eb 09                	jmp    c0001d6c <isgraph+0x34>
c0001d63:	90                   	nop
c0001d64:	b8 00 00 00 00       	mov    eax,0x0
c0001d69:	8d 76 00             	lea    esi,[esi+0x0]
c0001d6c:	83 c4 04             	add    esp,0x4
c0001d6f:	c3                   	ret    

c0001d70 <isprint>:
c0001d70:	83 ec 04             	sub    esp,0x4
c0001d73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d7a:	e8 b9 ff ff ff       	call   c0001d38 <isgraph>
c0001d7f:	85 c0                	test   eax,eax
c0001d81:	75 09                	jne    c0001d8c <isprint+0x1c>
c0001d83:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001d88:	75 0a                	jne    c0001d94 <isprint+0x24>
c0001d8a:	66 90                	xchg   ax,ax
c0001d8c:	b8 01 00 00 00       	mov    eax,0x1
c0001d91:	eb 09                	jmp    c0001d9c <isprint+0x2c>
c0001d93:	90                   	nop
c0001d94:	b8 00 00 00 00       	mov    eax,0x0
c0001d99:	8d 76 00             	lea    esi,[esi+0x0]
c0001d9c:	83 c4 04             	add    esp,0x4
c0001d9f:	c3                   	ret    

c0001da0 <isxdigit>:
c0001da0:	83 ec 04             	sub    esp,0x4
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 55 fe ff ff       	call   c0001c04 <isdigit>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 21                	jne    c0001dd4 <isxdigit+0x34>
c0001db3:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001db8:	7e 0a                	jle    c0001dc4 <isxdigit+0x24>
c0001dba:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001dbf:	7e 13                	jle    c0001dd4 <isxdigit+0x34>
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001dc9:	7e 11                	jle    c0001ddc <isxdigit+0x3c>
c0001dcb:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001dd0:	7f 0a                	jg     c0001ddc <isxdigit+0x3c>
c0001dd2:	66 90                	xchg   ax,ax
c0001dd4:	b8 01 00 00 00       	mov    eax,0x1
c0001dd9:	eb 09                	jmp    c0001de4 <isxdigit+0x44>
c0001ddb:	90                   	nop
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	8d 76 00             	lea    esi,[esi+0x0]
c0001de4:	83 c4 04             	add    esp,0x4
c0001de7:	c3                   	ret    

c0001de8 <disk_status>:
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	c3                   	ret    

c0001deb <disk_initialize>:
c0001deb:	31 c0                	xor    eax,eax
c0001ded:	c3                   	ret    

c0001dee <disk_read>:
c0001dee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001df3:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dff:	e9 c0 69 01 00       	jmp    c00187c4 <fatWrapperReadDisk>

c0001e04 <disk_write>:
c0001e04:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e09:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e15:	e9 f2 69 01 00       	jmp    c001880c <fatWrapperWriteDisk>

c0001e1a <disk_ioctl>:
c0001e1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001e1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001e23:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e28:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e34:	e9 1b 6a 01 00       	jmp    c0018854 <fatWrapperIoctl>

c0001e39 <ld_word>:
c0001e39:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e40:	c1 e2 08             	shl    edx,0x8
c0001e43:	09 d0                	or     eax,edx
c0001e45:	c3                   	ret    

c0001e46 <ld_dword>:
c0001e46:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e4a:	89 d1                	mov    ecx,edx
c0001e4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e53:	c1 e1 08             	shl    ecx,0x8
c0001e56:	09 ca                	or     edx,ecx
c0001e58:	c1 e2 08             	shl    edx,0x8
c0001e5b:	09 d0                	or     eax,edx
c0001e5d:	c3                   	ret    

c0001e5e <st_word>:
c0001e5e:	66 89 10             	mov    WORD PTR [eax],dx
c0001e61:	c3                   	ret    

c0001e62 <st_dword>:
c0001e62:	89 10                	mov    DWORD PTR [eax],edx
c0001e64:	c3                   	ret    

c0001e65 <mem_cpy>:
c0001e65:	85 c9                	test   ecx,ecx
c0001e67:	74 10                	je     c0001e79 <mem_cpy+0x14>
c0001e69:	57                   	push   edi
c0001e6a:	01 c1                	add    ecx,eax
c0001e6c:	56                   	push   esi
c0001e6d:	89 c7                	mov    edi,eax
c0001e6f:	89 d6                	mov    esi,edx
c0001e71:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e72:	39 f9                	cmp    ecx,edi
c0001e74:	75 fb                	jne    c0001e71 <mem_cpy+0xc>
c0001e76:	5e                   	pop    esi
c0001e77:	5f                   	pop    edi
c0001e78:	c3                   	ret    
c0001e79:	c3                   	ret    

c0001e7a <mem_set>:
c0001e7a:	01 c1                	add    ecx,eax
c0001e7c:	88 10                	mov    BYTE PTR [eax],dl
c0001e7e:	40                   	inc    eax
c0001e7f:	39 c8                	cmp    eax,ecx
c0001e81:	75 f9                	jne    c0001e7c <mem_set+0x2>
c0001e83:	c3                   	ret    

c0001e84 <mem_cmp>:
c0001e84:	57                   	push   edi
c0001e85:	56                   	push   esi
c0001e86:	89 c6                	mov    esi,eax
c0001e88:	53                   	push   ebx
c0001e89:	46                   	inc    esi
c0001e8a:	42                   	inc    edx
c0001e8b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e8f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e93:	29 fb                	sub    ebx,edi
c0001e95:	89 cf                	mov    edi,ecx
c0001e97:	29 f7                	sub    edi,esi
c0001e99:	01 c7                	add    edi,eax
c0001e9b:	74 04                	je     c0001ea1 <mem_cmp+0x1d>
c0001e9d:	85 db                	test   ebx,ebx
c0001e9f:	74 e8                	je     c0001e89 <mem_cmp+0x5>
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	5b                   	pop    ebx
c0001ea4:	5e                   	pop    esi
c0001ea5:	5f                   	pop    edi
c0001ea6:	c3                   	ret    

c0001ea7 <chk_chr>:
c0001ea7:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001eaa:	84 c9                	test   cl,cl
c0001eac:	74 07                	je     c0001eb5 <chk_chr+0xe>
c0001eae:	39 d1                	cmp    ecx,edx
c0001eb0:	74 03                	je     c0001eb5 <chk_chr+0xe>
c0001eb2:	40                   	inc    eax
c0001eb3:	eb f2                	jmp    c0001ea7 <chk_chr>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	c3                   	ret    

c0001eb8 <dbc_1st>:
c0001eb8:	31 c0                	xor    eax,eax
c0001eba:	c3                   	ret    

c0001ebb <dbc_2nd>:
c0001ebb:	31 c0                	xor    eax,eax
c0001ebd:	c3                   	ret    

c0001ebe <tchar2uni>:
c0001ebe:	57                   	push   edi
c0001ebf:	56                   	push   esi
c0001ec0:	89 c6                	mov    esi,eax
c0001ec2:	53                   	push   ebx
c0001ec3:	51                   	push   ecx
c0001ec4:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ec6:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001ec8:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001ecb:	84 d2                	test   dl,dl
c0001ecd:	78 0a                	js     c0001ed9 <tchar2uni+0x1b>
c0001ecf:	0f b6 c2             	movzx  eax,dl
c0001ed2:	89 cf                	mov    edi,ecx
c0001ed4:	e9 a3 00 00 00       	jmp    c0001f7c <tchar2uni+0xbe>
c0001ed9:	88 d0                	mov    al,dl
c0001edb:	24 e0                	and    al,0xe0
c0001edd:	3c c0                	cmp    al,0xc0
c0001edf:	75 0d                	jne    c0001eee <tchar2uni+0x30>
c0001ee1:	80 e2 1f             	and    dl,0x1f
c0001ee4:	0f b6 c2             	movzx  eax,dl
c0001ee7:	ba 01 00 00 00       	mov    edx,0x1
c0001eec:	eb 32                	jmp    c0001f20 <tchar2uni+0x62>
c0001eee:	88 d0                	mov    al,dl
c0001ef0:	24 f0                	and    al,0xf0
c0001ef2:	3c e0                	cmp    al,0xe0
c0001ef4:	75 0d                	jne    c0001f03 <tchar2uni+0x45>
c0001ef6:	80 e2 0f             	and    dl,0xf
c0001ef9:	0f b6 c2             	movzx  eax,dl
c0001efc:	ba 02 00 00 00       	mov    edx,0x2
c0001f01:	eb 1d                	jmp    c0001f20 <tchar2uni+0x62>
c0001f03:	88 d0                	mov    al,dl
c0001f05:	24 f8                	and    al,0xf8
c0001f07:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f0b:	83 c8 ff             	or     eax,0xffffffff
c0001f0e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001f13:	75 6e                	jne    c0001f83 <tchar2uni+0xc5>
c0001f15:	80 e2 07             	and    dl,0x7
c0001f18:	0f b6 c2             	movzx  eax,dl
c0001f1b:	ba 03 00 00 00       	mov    edx,0x3
c0001f20:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001f24:	41                   	inc    ecx
c0001f25:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001f28:	88 da                	mov    dl,bl
c0001f2a:	80 e2 c0             	and    dl,0xc0
c0001f2d:	80 fa 80             	cmp    dl,0x80
c0001f30:	75 4e                	jne    c0001f80 <tchar2uni+0xc2>
c0001f32:	c1 e0 06             	shl    eax,0x6
c0001f35:	80 e3 3f             	and    bl,0x3f
c0001f38:	0f b6 db             	movzx  ebx,bl
c0001f3b:	09 d8                	or     eax,ebx
c0001f3d:	39 f9                	cmp    ecx,edi
c0001f3f:	75 e3                	jne    c0001f24 <tchar2uni+0x66>
c0001f41:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001f47:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001f4d:	76 31                	jbe    c0001f80 <tchar2uni+0xc2>
c0001f4f:	8d 50 80             	lea    edx,[eax-0x80]
c0001f52:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001f58:	77 26                	ja     c0001f80 <tchar2uni+0xc2>
c0001f5a:	3d ff ff 00 00       	cmp    eax,0xffff
c0001f5f:	76 1b                	jbe    c0001f7c <tchar2uni+0xbe>
c0001f61:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001f67:	25 ff 03 00 00       	and    eax,0x3ff
c0001f6c:	c1 e1 06             	shl    ecx,0x6
c0001f6f:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c0001f7c:	89 3e                	mov    DWORD PTR [esi],edi
c0001f7e:	eb 03                	jmp    c0001f83 <tchar2uni+0xc5>
c0001f80:	83 c8 ff             	or     eax,0xffffffff
c0001f83:	5a                   	pop    edx
c0001f84:	5b                   	pop    ebx
c0001f85:	5e                   	pop    esi
c0001f86:	5f                   	pop    edi
c0001f87:	c3                   	ret    

c0001f88 <put_utf>:
c0001f88:	53                   	push   ebx
c0001f89:	89 d3                	mov    ebx,edx
c0001f8b:	31 d2                	xor    edx,edx
c0001f8d:	83 f8 7f             	cmp    eax,0x7f
c0001f90:	77 11                	ja     c0001fa3 <put_utf+0x1b>
c0001f92:	85 c9                	test   ecx,ecx
c0001f94:	0f 84 da 00 00 00    	je     c0002074 <put_utf+0xec>
c0001f9a:	88 03                	mov    BYTE PTR [ebx],al
c0001f9c:	b2 01                	mov    dl,0x1
c0001f9e:	e9 d1 00 00 00       	jmp    c0002074 <put_utf+0xec>
c0001fa3:	3d ff 07 00 00       	cmp    eax,0x7ff
c0001fa8:	77 21                	ja     c0001fcb <put_utf+0x43>
c0001faa:	83 f9 01             	cmp    ecx,0x1
c0001fad:	0f 86 c1 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fb3:	89 c2                	mov    edx,eax
c0001fb5:	24 3f                	and    al,0x3f
c0001fb7:	c1 ea 06             	shr    edx,0x6
c0001fba:	0c 80                	or     al,0x80
c0001fbc:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0001fbf:	80 ca c0             	or     dl,0xc0
c0001fc2:	88 13                	mov    BYTE PTR [ebx],dl
c0001fc4:	b2 02                	mov    dl,0x2
c0001fc6:	e9 a9 00 00 00       	jmp    c0002074 <put_utf+0xec>
c0001fcb:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fd0:	77 3e                	ja     c0002010 <put_utf+0x88>
c0001fd2:	83 f9 02             	cmp    ecx,0x2
c0001fd5:	0f 86 99 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fdb:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0001fe1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fe7:	0f 86 87 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fed:	89 c2                	mov    edx,eax
c0001fef:	c1 ea 0c             	shr    edx,0xc
c0001ff2:	80 ca e0             	or     dl,0xe0
c0001ff5:	88 13                	mov    BYTE PTR [ebx],dl
c0001ff7:	89 c2                	mov    edx,eax
c0001ff9:	24 3f                	and    al,0x3f
c0001ffb:	c1 ea 06             	shr    edx,0x6
c0001ffe:	0c 80                	or     al,0x80
c0002000:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002003:	80 e2 3f             	and    dl,0x3f
c0002006:	80 ca 80             	or     dl,0x80
c0002009:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000200c:	b2 03                	mov    dl,0x3
c000200e:	eb 64                	jmp    c0002074 <put_utf+0xec>
c0002010:	83 f9 03             	cmp    ecx,0x3
c0002013:	76 5f                	jbe    c0002074 <put_utf+0xec>
c0002015:	89 c2                	mov    edx,eax
c0002017:	0f b7 c0             	movzx  eax,ax
c000201a:	66 31 d2             	xor    dx,dx
c000201d:	2d 00 dc 00 00       	sub    eax,0xdc00
c0002022:	81 c2 00 00 00 28    	add    edx,0x28000000
c0002028:	c1 ea 06             	shr    edx,0x6
c000202b:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c0002031:	77 3f                	ja     c0002072 <put_utf+0xea>
c0002033:	3d ff 03 00 00       	cmp    eax,0x3ff
c0002038:	77 38                	ja     c0002072 <put_utf+0xea>
c000203a:	09 d0                	or     eax,edx
c000203c:	05 00 00 01 00       	add    eax,0x10000
c0002041:	89 c2                	mov    edx,eax
c0002043:	c1 ea 12             	shr    edx,0x12
c0002046:	80 ca f0             	or     dl,0xf0
c0002049:	88 13                	mov    BYTE PTR [ebx],dl
c000204b:	89 c2                	mov    edx,eax
c000204d:	c1 ea 0c             	shr    edx,0xc
c0002050:	80 e2 3f             	and    dl,0x3f
c0002053:	80 ca 80             	or     dl,0x80
c0002056:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c0002059:	89 c2                	mov    edx,eax
c000205b:	24 3f                	and    al,0x3f
c000205d:	c1 ea 06             	shr    edx,0x6
c0002060:	0c 80                	or     al,0x80
c0002062:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c0002065:	80 e2 3f             	and    dl,0x3f
c0002068:	80 ca 80             	or     dl,0x80
c000206b:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c000206e:	b2 04                	mov    dl,0x4
c0002070:	eb 02                	jmp    c0002074 <put_utf+0xec>
c0002072:	31 d2                	xor    edx,edx
c0002074:	5b                   	pop    ebx
c0002075:	88 d0                	mov    al,dl
c0002077:	c3                   	ret    

c0002078 <clst2sect>:
c0002078:	8d 4a fe             	lea    ecx,[edx-0x2]
c000207b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000207e:	83 ea 02             	sub    edx,0x2
c0002081:	39 ca                	cmp    edx,ecx
c0002083:	76 0d                	jbe    c0002092 <clst2sect+0x1a>
c0002085:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002089:	0f af d1             	imul   edx,ecx
c000208c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000208f:	89 d0                	mov    eax,edx
c0002091:	c3                   	ret    
c0002092:	31 c0                	xor    eax,eax
c0002094:	c3                   	ret    

c0002095 <pick_lfn>:
c0002095:	55                   	push   ebp
c0002096:	57                   	push   edi
c0002097:	89 d7                	mov    edi,edx
c0002099:	56                   	push   esi
c000209a:	53                   	push   ebx
c000209b:	89 c3                	mov    ebx,eax
c000209d:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020a0:	e8 94 fd ff ff       	call   c0001e39 <ld_word>
c00020a5:	66 85 c0             	test   ax,ax
c00020a8:	74 04                	je     c00020ae <pick_lfn+0x19>
c00020aa:	31 c0                	xor    eax,eax
c00020ac:	eb 65                	jmp    c0002113 <pick_lfn+0x7e>
c00020ae:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c00020b1:	be 01 00 00 00       	mov    esi,0x1
c00020b6:	31 ed                	xor    ebp,ebp
c00020b8:	83 e1 bf             	and    ecx,0xffffffbf
c00020bb:	49                   	dec    ecx
c00020bc:	6b c9 0d             	imul   ecx,ecx,0xd
c00020bf:	0f b6 85 a0 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0e60]
c00020c6:	01 f8                	add    eax,edi
c00020c8:	e8 6c fd ff ff       	call   c0001e39 <ld_word>
c00020cd:	85 f6                	test   esi,esi
c00020cf:	0f b7 d0             	movzx  edx,ax
c00020d2:	74 11                	je     c00020e5 <pick_lfn+0x50>
c00020d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020da:	77 ce                	ja     c00020aa <pick_lfn+0x15>
c00020dc:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c00020e0:	89 d6                	mov    esi,edx
c00020e2:	41                   	inc    ecx
c00020e3:	eb 08                	jmp    c00020ed <pick_lfn+0x58>
c00020e5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020eb:	75 bd                	jne    c00020aa <pick_lfn+0x15>
c00020ed:	45                   	inc    ebp
c00020ee:	83 fd 0d             	cmp    ebp,0xd
c00020f1:	75 cc                	jne    c00020bf <pick_lfn+0x2a>
c00020f3:	8a 07                	mov    al,BYTE PTR [edi]
c00020f5:	c0 e8 06             	shr    al,0x6
c00020f8:	24 01                	and    al,0x1
c00020fa:	74 12                	je     c000210e <pick_lfn+0x79>
c00020fc:	85 f6                	test   esi,esi
c00020fe:	74 0e                	je     c000210e <pick_lfn+0x79>
c0002100:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002106:	77 a2                	ja     c00020aa <pick_lfn+0x15>
c0002108:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000210e:	b8 01 00 00 00       	mov    eax,0x1
c0002113:	5b                   	pop    ebx
c0002114:	5e                   	pop    esi
c0002115:	5f                   	pop    edi
c0002116:	5d                   	pop    ebp
c0002117:	c3                   	ret    

c0002118 <put_lfn>:
c0002118:	55                   	push   ebp
c0002119:	31 ed                	xor    ebp,ebp
c000211b:	57                   	push   edi
c000211c:	89 d7                	mov    edi,edx
c000211e:	56                   	push   esi
c000211f:	31 f6                	xor    esi,esi
c0002121:	53                   	push   ebx
c0002122:	53                   	push   ebx
c0002123:	89 04 24             	mov    DWORD PTR [esp],eax
c0002126:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c000212a:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002130:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002133:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002136:	31 d2                	xor    edx,edx
c0002138:	e8 21 fd ff ff       	call   c0001e5e <st_word>
c000213d:	0f b6 d9             	movzx  ebx,cl
c0002140:	4b                   	dec    ebx
c0002141:	6b db 0d             	imul   ebx,ebx,0xd
c0002144:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000214a:	74 08                	je     c0002154 <put_lfn+0x3c>
c000214c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000214f:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002153:	43                   	inc    ebx
c0002154:	0f b6 85 a0 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0e60]
c000215b:	89 f2                	mov    edx,esi
c000215d:	01 f8                	add    eax,edi
c000215f:	e8 fa fc ff ff       	call   c0001e5e <st_word>
c0002164:	85 f6                	test   esi,esi
c0002166:	75 05                	jne    c000216d <put_lfn+0x55>
c0002168:	be ff ff 00 00       	mov    esi,0xffff
c000216d:	45                   	inc    ebp
c000216e:	83 fd 0d             	cmp    ebp,0xd
c0002171:	75 d1                	jne    c0002144 <put_lfn+0x2c>
c0002173:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002179:	74 0a                	je     c0002185 <put_lfn+0x6d>
c000217b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000217e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002183:	75 03                	jne    c0002188 <put_lfn+0x70>
c0002185:	80 c9 40             	or     cl,0x40
c0002188:	88 0f                	mov    BYTE PTR [edi],cl
c000218a:	58                   	pop    eax
c000218b:	5b                   	pop    ebx
c000218c:	5e                   	pop    esi
c000218d:	5f                   	pop    edi
c000218e:	5d                   	pop    ebp
c000218f:	c3                   	ret    

c0002190 <gen_numname>:
c0002190:	57                   	push   edi
c0002191:	89 cf                	mov    edi,ecx
c0002193:	56                   	push   esi
c0002194:	b9 0b 00 00 00       	mov    ecx,0xb
c0002199:	53                   	push   ebx
c000219a:	89 c6                	mov    esi,eax
c000219c:	83 ec 10             	sub    esp,0x10
c000219f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021a3:	e8 bd fc ff ff       	call   c0001e65 <mem_cpy>
c00021a8:	83 fb 05             	cmp    ebx,0x5
c00021ab:	76 2b                	jbe    c00021d8 <gen_numname+0x48>
c00021ad:	0f b7 07             	movzx  eax,WORD PTR [edi]
c00021b0:	85 c0                	test   eax,eax
c00021b2:	74 24                	je     c00021d8 <gen_numname+0x48>
c00021b4:	83 c7 02             	add    edi,0x2
c00021b7:	ba 10 00 00 00       	mov    edx,0x10
c00021bc:	89 c1                	mov    ecx,eax
c00021be:	01 db                	add    ebx,ebx
c00021c0:	d1 e8                	shr    eax,1
c00021c2:	83 e1 01             	and    ecx,0x1
c00021c5:	01 cb                	add    ebx,ecx
c00021c7:	0f ba e3 10          	bt     ebx,0x10
c00021cb:	73 06                	jae    c00021d3 <gen_numname+0x43>
c00021cd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021d3:	4a                   	dec    edx
c00021d4:	75 e6                	jne    c00021bc <gen_numname+0x2c>
c00021d6:	eb d5                	jmp    c00021ad <gen_numname+0x1d>
c00021d8:	bf 07 00 00 00       	mov    edi,0x7
c00021dd:	88 da                	mov    dl,bl
c00021df:	80 e2 0f             	and    dl,0xf
c00021e2:	88 d0                	mov    al,dl
c00021e4:	04 30                	add    al,0x30
c00021e6:	3c 39                	cmp    al,0x39
c00021e8:	76 04                	jbe    c00021ee <gen_numname+0x5e>
c00021ea:	88 d0                	mov    al,dl
c00021ec:	04 37                	add    al,0x37
c00021ee:	8d 4f ff             	lea    ecx,[edi-0x1]
c00021f1:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c00021f5:	89 d8                	mov    eax,ebx
c00021f7:	c1 e8 04             	shr    eax,0x4
c00021fa:	83 fb 0f             	cmp    ebx,0xf
c00021fd:	76 06                	jbe    c0002205 <gen_numname+0x75>
c00021ff:	89 cf                	mov    edi,ecx
c0002201:	89 c3                	mov    ebx,eax
c0002203:	eb d8                	jmp    c00021dd <gen_numname+0x4d>
c0002205:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000220a:	31 d2                	xor    edx,edx
c000220c:	83 ef 02             	sub    edi,0x2
c000220f:	8d 04 16             	lea    eax,[esi+edx*1]
c0002212:	39 ca                	cmp    edx,ecx
c0002214:	73 18                	jae    c000222e <gen_numname+0x9e>
c0002216:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002219:	3c 20                	cmp    al,0x20
c000221b:	74 11                	je     c000222e <gen_numname+0x9e>
c000221d:	e8 96 fc ff ff       	call   c0001eb8 <dbc_1st>
c0002222:	85 c0                	test   eax,eax
c0002224:	74 05                	je     c000222b <gen_numname+0x9b>
c0002226:	39 d7                	cmp    edi,edx
c0002228:	74 04                	je     c000222e <gen_numname+0x9e>
c000222a:	42                   	inc    edx
c000222b:	42                   	inc    edx
c000222c:	eb e1                	jmp    c000220f <gen_numname+0x7f>
c000222e:	83 f9 07             	cmp    ecx,0x7
c0002231:	b0 20                	mov    al,0x20
c0002233:	77 05                	ja     c000223a <gen_numname+0xaa>
c0002235:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002239:	41                   	inc    ecx
c000223a:	42                   	inc    edx
c000223b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000223f:	83 fa 07             	cmp    edx,0x7
c0002242:	76 ea                	jbe    c000222e <gen_numname+0x9e>
c0002244:	83 c4 10             	add    esp,0x10
c0002247:	5b                   	pop    ebx
c0002248:	5e                   	pop    esi
c0002249:	5f                   	pop    edi
c000224a:	c3                   	ret    

c000224b <sum_sfn>:
c000224b:	31 c9                	xor    ecx,ecx
c000224d:	31 d2                	xor    edx,edx
c000224f:	d0 ca                	ror    dl,1
c0002251:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002254:	41                   	inc    ecx
c0002255:	83 f9 0b             	cmp    ecx,0xb
c0002258:	75 f5                	jne    c000224f <sum_sfn+0x4>
c000225a:	88 d0                	mov    al,dl
c000225c:	c3                   	ret    

c000225d <get_ldnumber>:
c000225d:	57                   	push   edi
c000225e:	56                   	push   esi
c000225f:	83 ce ff             	or     esi,0xffffffff
c0002262:	53                   	push   ebx
c0002263:	8b 10                	mov    edx,DWORD PTR [eax]
c0002265:	85 d2                	test   edx,edx
c0002267:	74 33                	je     c000229c <get_ldnumber+0x3f>
c0002269:	89 c7                	mov    edi,eax
c000226b:	89 d1                	mov    ecx,edx
c000226d:	41                   	inc    ecx
c000226e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002271:	80 fb 1f             	cmp    bl,0x1f
c0002274:	76 05                	jbe    c000227b <get_ldnumber+0x1e>
c0002276:	80 fb 3a             	cmp    bl,0x3a
c0002279:	75 f2                	jne    c000226d <get_ldnumber+0x10>
c000227b:	31 f6                	xor    esi,esi
c000227d:	80 fb 3a             	cmp    bl,0x3a
c0002280:	75 1a                	jne    c000229c <get_ldnumber+0x3f>
c0002282:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002285:	83 ce ff             	or     esi,0xffffffff
c0002288:	88 d8                	mov    al,bl
c000228a:	2c 30                	sub    al,0x30
c000228c:	3c 09                	cmp    al,0x9
c000228e:	77 0c                	ja     c000229c <get_ldnumber+0x3f>
c0002290:	83 c2 02             	add    edx,0x2
c0002293:	39 d1                	cmp    ecx,edx
c0002295:	75 05                	jne    c000229c <get_ldnumber+0x3f>
c0002297:	89 0f                	mov    DWORD PTR [edi],ecx
c0002299:	8d 73 d0             	lea    esi,[ebx-0x30]
c000229c:	5b                   	pop    ebx
c000229d:	89 f0                	mov    eax,esi
c000229f:	5e                   	pop    esi
c00022a0:	5f                   	pop    edi
c00022a1:	c3                   	ret    

c00022a2 <validate>:
c00022a2:	56                   	push   esi
c00022a3:	85 c0                	test   eax,eax
c00022a5:	53                   	push   ebx
c00022a6:	89 d6                	mov    esi,edx
c00022a8:	51                   	push   ecx
c00022a9:	75 09                	jne    c00022b4 <validate+0x12>
c00022ab:	b8 09 00 00 00       	mov    eax,0x9
c00022b0:	31 d2                	xor    edx,edx
c00022b2:	eb 30                	jmp    c00022e4 <validate+0x42>
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00022b8:	85 c0                	test   eax,eax
c00022ba:	74 ef                	je     c00022ab <validate+0x9>
c00022bc:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022bf:	74 ea                	je     c00022ab <validate+0x9>
c00022c1:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00022c4:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c00022c8:	75 e1                	jne    c00022ab <validate+0x9>
c00022ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022ce:	83 ec 0c             	sub    esp,0xc
c00022d1:	50                   	push   eax
c00022d2:	e8 11 fb ff ff       	call   c0001de8 <disk_status>
c00022d7:	83 c4 10             	add    esp,0x10
c00022da:	24 01                	and    al,0x1
c00022dc:	84 c0                	test   al,al
c00022de:	75 cb                	jne    c00022ab <validate+0x9>
c00022e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00022e2:	31 c0                	xor    eax,eax
c00022e4:	89 16                	mov    DWORD PTR [esi],edx
c00022e6:	5a                   	pop    edx
c00022e7:	5b                   	pop    ebx
c00022e8:	5e                   	pop    esi
c00022e9:	c3                   	ret    

c00022ea <sync_window>:
c00022ea:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022ee:	74 58                	je     c0002348 <sync_window+0x5e>
c00022f0:	56                   	push   esi
c00022f1:	53                   	push   ebx
c00022f2:	89 c3                	mov    ebx,eax
c00022f4:	51                   	push   ecx
c00022f5:	6a 01                	push   0x1
c00022f7:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022fa:	8d 70 34             	lea    esi,[eax+0x34]
c00022fd:	56                   	push   esi
c00022fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002302:	50                   	push   eax
c0002303:	e8 fc fa ff ff       	call   c0001e04 <disk_write>
c0002308:	83 c4 10             	add    esp,0x10
c000230b:	ba 01 00 00 00       	mov    edx,0x1
c0002310:	85 c0                	test   eax,eax
c0002312:	75 2e                	jne    c0002342 <sync_window+0x58>
c0002314:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002318:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000231b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000231e:	89 c1                	mov    ecx,eax
c0002320:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	73 19                	jae    c0002340 <sync_window+0x56>
c0002327:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000232b:	75 13                	jne    c0002340 <sync_window+0x56>
c000232d:	6a 01                	push   0x1
c000232f:	01 d0                	add    eax,edx
c0002331:	50                   	push   eax
c0002332:	56                   	push   esi
c0002333:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002337:	50                   	push   eax
c0002338:	e8 c7 fa ff ff       	call   c0001e04 <disk_write>
c000233d:	83 c4 10             	add    esp,0x10
c0002340:	31 d2                	xor    edx,edx
c0002342:	89 d0                	mov    eax,edx
c0002344:	5a                   	pop    edx
c0002345:	5b                   	pop    ebx
c0002346:	5e                   	pop    esi
c0002347:	c3                   	ret    
c0002348:	31 d2                	xor    edx,edx
c000234a:	89 d0                	mov    eax,edx
c000234c:	c3                   	ret    

c000234d <move_window>:
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	53                   	push   ebx
c0002350:	31 db                	xor    ebx,ebx
c0002352:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002355:	74 38                	je     c000238f <move_window+0x42>
c0002357:	89 c6                	mov    esi,eax
c0002359:	89 d7                	mov    edi,edx
c000235b:	e8 8a ff ff ff       	call   c00022ea <sync_window>
c0002360:	85 c0                	test   eax,eax
c0002362:	89 c3                	mov    ebx,eax
c0002364:	75 29                	jne    c000238f <move_window+0x42>
c0002366:	6a 01                	push   0x1
c0002368:	57                   	push   edi
c0002369:	8d 46 34             	lea    eax,[esi+0x34]
c000236c:	50                   	push   eax
c000236d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002371:	50                   	push   eax
c0002372:	e8 77 fa ff ff       	call   c0001dee <disk_read>
c0002377:	83 c4 10             	add    esp,0x10
c000237a:	ba 01 00 00 00       	mov    edx,0x1
c000237f:	85 c0                	test   eax,eax
c0002381:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002386:	0f 45 f8             	cmovne edi,eax
c0002389:	0f 45 da             	cmovne ebx,edx
c000238c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000238f:	89 d8                	mov    eax,ebx
c0002391:	5b                   	pop    ebx
c0002392:	5e                   	pop    esi
c0002393:	5f                   	pop    edi
c0002394:	c3                   	ret    

c0002395 <check_fs>:
c0002395:	53                   	push   ebx
c0002396:	89 c3                	mov    ebx,eax
c0002398:	83 ec 08             	sub    esp,0x8
c000239b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000239f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023a6:	e8 a2 ff ff ff       	call   c000234d <move_window>
c00023ab:	ba 04 00 00 00       	mov    edx,0x4
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 6a                	jne    c000241e <check_fs+0x89>
c00023b4:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023ba:	e8 7a fa ff ff       	call   c0001e39 <ld_word>
c00023bf:	ba 03 00 00 00       	mov    edx,0x3
c00023c4:	66 3d 55 aa          	cmp    ax,0xaa55
c00023c8:	75 54                	jne    c000241e <check_fs+0x89>
c00023ca:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023cd:	88 c2                	mov    dl,al
c00023cf:	80 c2 18             	add    dl,0x18
c00023d2:	80 fa 01             	cmp    dl,0x1
c00023d5:	76 09                	jbe    c00023e0 <check_fs+0x4b>
c00023d7:	3c eb                	cmp    al,0xeb
c00023d9:	ba 02 00 00 00       	mov    edx,0x2
c00023de:	75 3e                	jne    c000241e <check_fs+0x89>
c00023e0:	ba 84 12 02 c0       	mov    edx,0xc0021284
c00023e5:	b9 03 00 00 00       	mov    ecx,0x3
c00023ea:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023ed:	e8 92 fa ff ff       	call   c0001e84 <mem_cmp>
c00023f2:	31 d2                	xor    edx,edx
c00023f4:	85 c0                	test   eax,eax
c00023f6:	74 26                	je     c000241e <check_fs+0x89>
c00023f8:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c00023fd:	b9 05 00 00 00       	mov    ecx,0x5
c0002402:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002408:	e8 77 fa ff ff       	call   c0001e84 <mem_cmp>
c000240d:	31 d2                	xor    edx,edx
c000240f:	85 c0                	test   eax,eax
c0002411:	74 0b                	je     c000241e <check_fs+0x89>
c0002413:	31 d2                	xor    edx,edx
c0002415:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002419:	0f 95 c2             	setne  dl
c000241c:	01 d2                	add    edx,edx
c000241e:	83 c4 08             	add    esp,0x8
c0002421:	89 d0                	mov    eax,edx
c0002423:	5b                   	pop    ebx
c0002424:	c3                   	ret    

c0002425 <find_volume>:
c0002425:	55                   	push   ebp
c0002426:	57                   	push   edi
c0002427:	89 c7                	mov    edi,eax
c0002429:	56                   	push   esi
c000242a:	89 d6                	mov    esi,edx
c000242c:	53                   	push   ebx
c000242d:	31 d2                	xor    edx,edx
c000242f:	83 ec 2c             	sub    esp,0x2c
c0002432:	e8 5e ff ff ff       	call   c0002395 <check_fs>
c0002437:	85 f6                	test   esi,esi
c0002439:	0f 94 c3             	sete   bl
c000243c:	83 f8 02             	cmp    eax,0x2
c000243f:	74 06                	je     c0002447 <find_volume+0x22>
c0002441:	77 5f                	ja     c00024a2 <find_volume+0x7d>
c0002443:	84 db                	test   bl,bl
c0002445:	75 5b                	jne    c00024a2 <find_volume+0x7d>
c0002447:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c000244d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002451:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c0002457:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000245b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245f:	89 e8                	mov    eax,ebp
c0002461:	83 c5 10             	add    ebp,0x10
c0002464:	e8 dd f9 ff ff       	call   c0001e46 <ld_dword>
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	83 c1 04             	add    ecx,0x4
c0002470:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002473:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002477:	75 e2                	jne    c000245b <find_volume+0x36>
c0002479:	83 fe 01             	cmp    esi,0x1
c000247c:	83 d6 ff             	adc    esi,0xffffffff
c000247f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002483:	b8 03 00 00 00       	mov    eax,0x3
c0002488:	85 d2                	test   edx,edx
c000248a:	74 07                	je     c0002493 <find_volume+0x6e>
c000248c:	89 f8                	mov    eax,edi
c000248e:	e8 02 ff ff ff       	call   c0002395 <check_fs>
c0002493:	83 f8 01             	cmp    eax,0x1
c0002496:	76 0a                	jbe    c00024a2 <find_volume+0x7d>
c0002498:	84 db                	test   bl,bl
c000249a:	74 06                	je     c00024a2 <find_volume+0x7d>
c000249c:	46                   	inc    esi
c000249d:	83 fe 03             	cmp    esi,0x3
c00024a0:	76 dd                	jbe    c000247f <find_volume+0x5a>
c00024a2:	83 c4 2c             	add    esp,0x2c
c00024a5:	5b                   	pop    ebx
c00024a6:	5e                   	pop    esi
c00024a7:	5f                   	pop    edi
c00024a8:	5d                   	pop    ebp
c00024a9:	c3                   	ret    

c00024aa <mount_volume>:
c00024aa:	55                   	push   ebp
c00024ab:	89 d5                	mov    ebp,edx
c00024ad:	57                   	push   edi
c00024ae:	bf 0b 00 00 00       	mov    edi,0xb
c00024b3:	56                   	push   esi
c00024b4:	53                   	push   ebx
c00024b5:	88 cb                	mov    bl,cl
c00024b7:	83 ec 2c             	sub    esp,0x2c
c00024ba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024c0:	e8 98 fd ff ff       	call   c000225d <get_ldnumber>
c00024c5:	85 c0                	test   eax,eax
c00024c7:	0f 88 d0 02 00 00    	js     c000279d <mount_volume+0x2f3>
c00024cd:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024d4:	89 c1                	mov    ecx,eax
c00024d6:	bf 0c 00 00 00       	mov    edi,0xc
c00024db:	85 f6                	test   esi,esi
c00024dd:	0f 84 ba 02 00 00    	je     c000279d <mount_volume+0x2f3>
c00024e3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024e6:	80 e3 fe             	and    bl,0xfe
c00024e9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024ec:	74 3d                	je     c000252b <mount_volume+0x81>
c00024ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024f2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024f6:	83 ec 0c             	sub    esp,0xc
c00024f9:	50                   	push   eax
c00024fa:	e8 e9 f8 ff ff       	call   c0001de8 <disk_status>
c00024ff:	83 c4 10             	add    esp,0x10
c0002502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002506:	88 c2                	mov    dl,al
c0002508:	24 01                	and    al,0x1
c000250a:	84 c0                	test   al,al
c000250c:	75 1d                	jne    c000252b <mount_volume+0x81>
c000250e:	31 ff                	xor    edi,edi
c0002510:	84 db                	test   bl,bl
c0002512:	0f 84 85 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002518:	80 e2 04             	and    dl,0x4
c000251b:	0f 84 7c 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002521:	bf 0a 00 00 00       	mov    edi,0xa
c0002526:	e9 72 02 00 00       	jmp    c000279d <mount_volume+0x2f3>
c000252b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000252e:	83 ec 0c             	sub    esp,0xc
c0002531:	0f b6 c9             	movzx  ecx,cl
c0002534:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002537:	bf 03 00 00 00       	mov    edi,0x3
c000253c:	51                   	push   ecx
c000253d:	e8 a9 f8 ff ff       	call   c0001deb <disk_initialize>
c0002542:	83 c4 10             	add    esp,0x10
c0002545:	88 c1                	mov    cl,al
c0002547:	80 e1 01             	and    cl,0x1
c000254a:	84 c9                	test   cl,cl
c000254c:	0f 85 4b 02 00 00    	jne    c000279d <mount_volume+0x2f3>
c0002552:	84 db                	test   bl,bl
c0002554:	74 04                	je     c000255a <mount_volume+0xb0>
c0002556:	24 04                	and    al,0x4
c0002558:	75 c7                	jne    c0002521 <mount_volume+0x77>
c000255a:	31 d2                	xor    edx,edx
c000255c:	89 f0                	mov    eax,esi
c000255e:	e8 c2 fe ff ff       	call   c0002425 <find_volume>
c0002563:	bf 01 00 00 00       	mov    edi,0x1
c0002568:	83 f8 04             	cmp    eax,0x4
c000256b:	0f 84 2c 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002571:	83 f8 01             	cmp    eax,0x1
c0002574:	76 0a                	jbe    c0002580 <mount_volume+0xd6>
c0002576:	bf 0d 00 00 00       	mov    edi,0xd
c000257b:	e9 1d 02 00 00       	jmp    c000279d <mount_volume+0x2f3>
c0002580:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002583:	e8 b1 f8 ff ff       	call   c0001e39 <ld_word>
c0002588:	66 3d 00 02          	cmp    ax,0x200
c000258c:	75 e8                	jne    c0002576 <mount_volume+0xcc>
c000258e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002591:	e8 a3 f8 ff ff       	call   c0001e39 <ld_word>
c0002596:	0f b7 e8             	movzx  ebp,ax
c0002599:	85 ed                	test   ebp,ebp
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0xfd>
c000259d:	8d 46 58             	lea    eax,[esi+0x58]
c00025a0:	e8 a1 f8 ff ff       	call   c0001e46 <ld_dword>
c00025a5:	89 c5                	mov    ebp,eax
c00025a7:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c00025aa:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025ad:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c00025b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b5:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c00025b8:	88 d8                	mov    al,bl
c00025ba:	fe c8                	dec    al
c00025bc:	3c 01                	cmp    al,0x1
c00025be:	77 b6                	ja     c0002576 <mount_volume+0xcc>
c00025c0:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c00025c4:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c00025c8:	66 85 d2             	test   dx,dx
c00025cb:	74 a9                	je     c0002576 <mount_volume+0xcc>
c00025cd:	0f b6 fa             	movzx  edi,dl
c00025d0:	8d 47 ff             	lea    eax,[edi-0x1]
c00025d3:	85 f8                	test   eax,edi
c00025d5:	75 9f                	jne    c0002576 <mount_volume+0xcc>
c00025d7:	8d 46 45             	lea    eax,[esi+0x45]
c00025da:	e8 5a f8 ff ff       	call   c0001e39 <ld_word>
c00025df:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025e3:	0f b7 d0             	movzx  edx,ax
c00025e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ea:	f6 c2 0f             	test   dl,0xf
c00025ed:	75 87                	jne    c0002576 <mount_volume+0xcc>
c00025ef:	8d 46 47             	lea    eax,[esi+0x47]
c00025f2:	e8 42 f8 ff ff       	call   c0001e39 <ld_word>
c00025f7:	0f b7 d0             	movzx  edx,ax
c00025fa:	85 d2                	test   edx,edx
c00025fc:	75 0a                	jne    c0002608 <mount_volume+0x15e>
c00025fe:	8d 46 54             	lea    eax,[esi+0x54]
c0002601:	e8 40 f8 ff ff       	call   c0001e46 <ld_dword>
c0002606:	89 c2                	mov    edx,eax
c0002608:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000260c:	8d 46 42             	lea    eax,[esi+0x42]
c000260f:	e8 25 f8 ff ff       	call   c0001e39 <ld_word>
c0002614:	0f b7 c0             	movzx  eax,ax
c0002617:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000261b:	85 c0                	test   eax,eax
c000261d:	0f 84 53 ff ff ff    	je     c0002576 <mount_volume+0xcc>
c0002623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002627:	0f af dd             	imul   ebx,ebp
c000262a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000262e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0002632:	c1 e9 04             	shr    ecx,0x4
c0002635:	01 d9                	add    ecx,ebx
c0002637:	01 c1                	add    ecx,eax
c0002639:	39 ca                	cmp    edx,ecx
c000263b:	0f 82 35 ff ff ff    	jb     c0002576 <mount_volume+0xcc>
c0002641:	89 d3                	mov    ebx,edx
c0002643:	31 d2                	xor    edx,edx
c0002645:	29 cb                	sub    ebx,ecx
c0002647:	89 d8                	mov    eax,ebx
c0002649:	f7 f7                	div    edi
c000264b:	39 fb                	cmp    ebx,edi
c000264d:	0f 82 23 ff ff ff    	jb     c0002576 <mount_volume+0xcc>
c0002653:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002658:	0f 87 18 ff ff ff    	ja     c0002576 <mount_volume+0xcc>
c000265e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002663:	0f 86 25 01 00 00    	jbe    c000278e <mount_volume+0x2e4>
c0002669:	bb 03 00 00 00       	mov    ebx,0x3
c000266e:	8d 78 02             	lea    edi,[eax+0x2]
c0002671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002675:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002679:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000267c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000267f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002683:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002687:	83 fb 03             	cmp    ebx,0x3
c000268a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000268d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002690:	75 27                	jne    c00026b9 <mount_volume+0x20f>
c0002692:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002695:	e8 9f f7 ff ff       	call   c0001e39 <ld_word>
c000269a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000269e:	0f b7 c0             	movzx  eax,ax
c00026a1:	09 c1                	or     ecx,eax
c00026a3:	0f 85 cd fe ff ff    	jne    c0002576 <mount_volume+0xcc>
c00026a9:	8d 46 60             	lea    eax,[esi+0x60]
c00026ac:	e8 95 f7 ff ff       	call   c0001e46 <ld_dword>
c00026b1:	c1 e7 02             	shl    edi,0x2
c00026b4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026b7:	eb 25                	jmp    c00026de <mount_volume+0x234>
c00026b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00026be:	0f 84 b2 fe ff ff    	je     c0002576 <mount_volume+0xcc>
c00026c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026c8:	8d 14 7f             	lea    edx,[edi+edi*2]
c00026cb:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00026ce:	83 e7 01             	and    edi,0x1
c00026d1:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026d4:	d1 ea                	shr    edx,1
c00026d6:	01 d7                	add    edi,edx
c00026d8:	83 fb 02             	cmp    ebx,0x2
c00026db:	0f 44 f9             	cmove  edi,ecx
c00026de:	81 c7 ff 01 00 00    	add    edi,0x1ff
c00026e4:	c1 ef 09             	shr    edi,0x9
c00026e7:	39 ef                	cmp    edi,ebp
c00026e9:	0f 87 87 fe ff ff    	ja     c0002576 <mount_volume+0xcc>
c00026ef:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026f6:	83 fb 03             	cmp    ebx,0x3
c00026f9:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002700:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002704:	75 6e                	jne    c0002774 <mount_volume+0x2ca>
c0002706:	8d 46 64             	lea    eax,[esi+0x64]
c0002709:	e8 2b f7 ff ff       	call   c0001e39 <ld_word>
c000270e:	66 48                	dec    ax
c0002710:	75 62                	jne    c0002774 <mount_volume+0x2ca>
c0002712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002716:	89 f0                	mov    eax,esi
c0002718:	42                   	inc    edx
c0002719:	e8 2f fc ff ff       	call   c000234d <move_window>
c000271e:	85 c0                	test   eax,eax
c0002720:	75 52                	jne    c0002774 <mount_volume+0x2ca>
c0002722:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002726:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000272c:	e8 08 f7 ff ff       	call   c0001e39 <ld_word>
c0002731:	66 3d 55 aa          	cmp    ax,0xaa55
c0002735:	75 3d                	jne    c0002774 <mount_volume+0x2ca>
c0002737:	8d 46 34             	lea    eax,[esi+0x34]
c000273a:	e8 07 f7 ff ff       	call   c0001e46 <ld_dword>
c000273f:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002744:	75 2e                	jne    c0002774 <mount_volume+0x2ca>
c0002746:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000274c:	e8 f5 f6 ff ff       	call   c0001e46 <ld_dword>
c0002751:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002756:	75 1c                	jne    c0002774 <mount_volume+0x2ca>
c0002758:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000275e:	e8 e3 f6 ff ff       	call   c0001e46 <ld_dword>
c0002763:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002766:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000276c:	e8 d5 f6 ff ff       	call   c0001e46 <ld_dword>
c0002771:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002774:	88 1e                	mov    BYTE PTR [esi],bl
c0002776:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000277c:	31 ff                	xor    edi,edi
c000277e:	40                   	inc    eax
c000277f:	0f b7 c0             	movzx  eax,ax
c0002782:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002788:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000278c:	eb 0f                	jmp    c000279d <mount_volume+0x2f3>
c000278e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002793:	19 db                	sbb    ebx,ebx
c0002795:	83 c3 02             	add    ebx,0x2
c0002798:	e9 d1 fe ff ff       	jmp    c000266e <mount_volume+0x1c4>
c000279d:	83 c4 2c             	add    esp,0x2c
c00027a0:	89 f8                	mov    eax,edi
c00027a2:	5b                   	pop    ebx
c00027a3:	5e                   	pop    esi
c00027a4:	5f                   	pop    edi
c00027a5:	5d                   	pop    ebp
c00027a6:	c3                   	ret    

c00027a7 <put_fat>:
c00027a7:	55                   	push   ebp
c00027a8:	bd 02 00 00 00       	mov    ebp,0x2
c00027ad:	57                   	push   edi
c00027ae:	56                   	push   esi
c00027af:	53                   	push   ebx
c00027b0:	83 ec 1c             	sub    esp,0x1c
c00027b3:	83 fa 01             	cmp    edx,0x1
c00027b6:	0f 86 35 01 00 00    	jbe    c00028f1 <put_fat+0x14a>
c00027bc:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027bf:	0f 86 2c 01 00 00    	jbe    c00028f1 <put_fat+0x14a>
c00027c5:	89 c7                	mov    edi,eax
c00027c7:	8a 00                	mov    al,BYTE PTR [eax]
c00027c9:	89 cb                	mov    ebx,ecx
c00027cb:	89 d6                	mov    esi,edx
c00027cd:	3c 02                	cmp    al,0x2
c00027cf:	0f 84 b0 00 00 00    	je     c0002885 <put_fat+0xde>
c00027d5:	3c 03                	cmp    al,0x3
c00027d7:	0f 84 d5 00 00 00    	je     c00028b2 <put_fat+0x10b>
c00027dd:	fe c8                	dec    al
c00027df:	0f 85 0c 01 00 00    	jne    c00028f1 <put_fat+0x14a>
c00027e5:	89 d1                	mov    ecx,edx
c00027e7:	89 f8                	mov    eax,edi
c00027e9:	d1 e9                	shr    ecx,1
c00027eb:	01 d1                	add    ecx,edx
c00027ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00027f1:	89 ca                	mov    edx,ecx
c00027f3:	c1 ea 09             	shr    edx,0x9
c00027f6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00027f9:	e8 4f fb ff ff       	call   c000234d <move_window>
c00027fe:	85 c0                	test   eax,eax
c0002800:	89 c5                	mov    ebp,eax
c0002802:	0f 85 e9 00 00 00    	jne    c00028f1 <put_fat+0x14a>
c0002808:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000280c:	8d 47 34             	lea    eax,[edi+0x34]
c000280f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002813:	8d 41 01             	lea    eax,[ecx+0x1]
c0002816:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000281c:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c0002820:	83 e6 01             	and    esi,0x1
c0002823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002827:	88 d8                	mov    al,bl
c0002829:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000282d:	74 0b                	je     c000283a <put_fat+0x93>
c000282f:	8a 01                	mov    al,BYTE PTR [ecx]
c0002831:	89 da                	mov    edx,ebx
c0002833:	c1 e2 04             	shl    edx,0x4
c0002836:	24 0f                	and    al,0xf
c0002838:	08 d0                	or     al,dl
c000283a:	88 01                	mov    BYTE PTR [ecx],al
c000283c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002840:	89 f8                	mov    eax,edi
c0002842:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002846:	c1 ea 09             	shr    edx,0x9
c0002849:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000284c:	e8 fc fa ff ff       	call   c000234d <move_window>
c0002851:	85 c0                	test   eax,eax
c0002853:	89 c5                	mov    ebp,eax
c0002855:	0f 85 96 00 00 00    	jne    c00028f1 <put_fat+0x14a>
c000285b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000285f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002865:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0002869:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000286e:	74 05                	je     c0002875 <put_fat+0xce>
c0002870:	c1 eb 04             	shr    ebx,0x4
c0002873:	eb 0c                	jmp    c0002881 <put_fat+0xda>
c0002875:	8a 06                	mov    al,BYTE PTR [esi]
c0002877:	c1 eb 08             	shr    ebx,0x8
c000287a:	80 e3 0f             	and    bl,0xf
c000287d:	24 f0                	and    al,0xf0
c000287f:	08 c3                	or     bl,al
c0002881:	88 1e                	mov    BYTE PTR [esi],bl
c0002883:	eb 27                	jmp    c00028ac <put_fat+0x105>
c0002885:	c1 ea 08             	shr    edx,0x8
c0002888:	89 f8                	mov    eax,edi
c000288a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000288d:	e8 bb fa ff ff       	call   c000234d <move_window>
c0002892:	85 c0                	test   eax,eax
c0002894:	89 c5                	mov    ebp,eax
c0002896:	75 59                	jne    c00028f1 <put_fat+0x14a>
c0002898:	01 f6                	add    esi,esi
c000289a:	0f b7 d3             	movzx  edx,bx
c000289d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00028a3:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00028a7:	e8 b2 f5 ff ff       	call   c0001e5e <st_word>
c00028ac:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028b0:	eb 3f                	jmp    c00028f1 <put_fat+0x14a>
c00028b2:	c1 ea 07             	shr    edx,0x7
c00028b5:	89 f8                	mov    eax,edi
c00028b7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028ba:	e8 8e fa ff ff       	call   c000234d <move_window>
c00028bf:	85 c0                	test   eax,eax
c00028c1:	89 c5                	mov    ebp,eax
c00028c3:	75 2c                	jne    c00028f1 <put_fat+0x14a>
c00028c5:	c1 e6 02             	shl    esi,0x2
c00028c8:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00028ce:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00028d4:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c00028d8:	89 f0                	mov    eax,esi
c00028da:	e8 67 f5 ff ff       	call   c0001e46 <ld_dword>
c00028df:	25 00 00 00 f0       	and    eax,0xf0000000
c00028e4:	09 d8                	or     eax,ebx
c00028e6:	89 c2                	mov    edx,eax
c00028e8:	89 f0                	mov    eax,esi
c00028ea:	e8 73 f5 ff ff       	call   c0001e62 <st_dword>
c00028ef:	eb bb                	jmp    c00028ac <put_fat+0x105>
c00028f1:	83 c4 1c             	add    esp,0x1c
c00028f4:	89 e8                	mov    eax,ebp
c00028f6:	5b                   	pop    ebx
c00028f7:	5e                   	pop    esi
c00028f8:	5f                   	pop    edi
c00028f9:	5d                   	pop    ebp
c00028fa:	c3                   	ret    

c00028fb <dir_clear>:
c00028fb:	55                   	push   ebp
c00028fc:	57                   	push   edi
c00028fd:	56                   	push   esi
c00028fe:	89 c6                	mov    esi,eax
c0002900:	53                   	push   ebx
c0002901:	83 ec 1c             	sub    esp,0x1c
c0002904:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002908:	e8 dd f9 ff ff       	call   c00022ea <sync_window>
c000290d:	85 c0                	test   eax,eax
c000290f:	0f 85 c1 00 00 00    	jne    c00029d6 <dir_clear+0xdb>
c0002915:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002919:	89 f0                	mov    eax,esi
c000291b:	e8 58 f7 ff ff       	call   c0002078 <clst2sect>
c0002920:	31 d2                	xor    edx,edx
c0002922:	b9 00 02 00 00       	mov    ecx,0x200
c0002927:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000292a:	89 c5                	mov    ebp,eax
c000292c:	8d 46 34             	lea    eax,[esi+0x34]
c000292f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002933:	e8 42 f5 ff ff       	call   c0001e7a <mem_set>
c0002938:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000293c:	b8 00 80 00 00       	mov    eax,0x8000
c0002941:	c1 e3 09             	shl    ebx,0x9
c0002944:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000294a:	0f 47 d8             	cmova  ebx,eax
c000294d:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002953:	76 16                	jbe    c000296b <dir_clear+0x70>
c0002955:	83 ec 0c             	sub    esp,0xc
c0002958:	53                   	push   ebx
c0002959:	e8 12 32 00 00       	call   c0005b70 <ff_memalloc>
c000295e:	83 c4 10             	add    esp,0x10
c0002961:	85 c0                	test   eax,eax
c0002963:	89 c7                	mov    edi,eax
c0002965:	75 76                	jne    c00029dd <dir_clear+0xe2>
c0002967:	d1 eb                	shr    ebx,1
c0002969:	eb e2                	jmp    c000294d <dir_clear+0x52>
c000296b:	31 db                	xor    ebx,ebx
c000296d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002971:	39 d8                	cmp    eax,ebx
c0002973:	76 53                	jbe    c00029c8 <dir_clear+0xcd>
c0002975:	6a 01                	push   0x1
c0002977:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000297a:	50                   	push   eax
c000297b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002983:	50                   	push   eax
c0002984:	e8 7b f4 ff ff       	call   c0001e04 <disk_write>
c0002989:	83 c4 10             	add    esp,0x10
c000298c:	85 c0                	test   eax,eax
c000298e:	75 38                	jne    c00029c8 <dir_clear+0xcd>
c0002990:	43                   	inc    ebx
c0002991:	eb da                	jmp    c000296d <dir_clear+0x72>
c0002993:	52                   	push   edx
c0002994:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002997:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000299b:	50                   	push   eax
c000299c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a0:	57                   	push   edi
c00029a1:	50                   	push   eax
c00029a2:	e8 5d f4 ff ff       	call   c0001e04 <disk_write>
c00029a7:	83 c4 10             	add    esp,0x10
c00029aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029ae:	85 c0                	test   eax,eax
c00029b0:	75 0a                	jne    c00029bc <dir_clear+0xc1>
c00029b2:	01 d3                	add    ebx,edx
c00029b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029b8:	39 d8                	cmp    eax,ebx
c00029ba:	77 d7                	ja     c0002993 <dir_clear+0x98>
c00029bc:	83 ec 0c             	sub    esp,0xc
c00029bf:	57                   	push   edi
c00029c0:	e8 bf 31 00 00       	call   c0005b84 <ff_memfree>
c00029c5:	83 c4 10             	add    esp,0x10
c00029c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029cc:	39 d8                	cmp    eax,ebx
c00029ce:	0f 95 c0             	setne  al
c00029d1:	0f b6 c0             	movzx  eax,al
c00029d4:	eb 19                	jmp    c00029ef <dir_clear+0xf4>
c00029d6:	b8 01 00 00 00       	mov    eax,0x1
c00029db:	eb 12                	jmp    c00029ef <dir_clear+0xf4>
c00029dd:	89 d9                	mov    ecx,ebx
c00029df:	31 d2                	xor    edx,edx
c00029e1:	e8 94 f4 ff ff       	call   c0001e7a <mem_set>
c00029e6:	89 da                	mov    edx,ebx
c00029e8:	31 db                	xor    ebx,ebx
c00029ea:	c1 ea 09             	shr    edx,0x9
c00029ed:	eb c5                	jmp    c00029b4 <dir_clear+0xb9>
c00029ef:	83 c4 1c             	add    esp,0x1c
c00029f2:	5b                   	pop    ebx
c00029f3:	5e                   	pop    esi
c00029f4:	5f                   	pop    edi
c00029f5:	5d                   	pop    ebp
c00029f6:	c3                   	ret    

c00029f7 <create_name>:
c00029f7:	55                   	push   ebp
c00029f8:	89 d1                	mov    ecx,edx
c00029fa:	57                   	push   edi
c00029fb:	89 c7                	mov    edi,eax
c00029fd:	56                   	push   esi
c00029fe:	31 f6                	xor    esi,esi
c0002a00:	53                   	push   ebx
c0002a01:	83 ec 3c             	sub    esp,0x3c
c0002a04:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a0a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a17:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a1b:	e8 9e f4 ff ff       	call   c0001ebe <tchar2uni>
c0002a20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a24:	83 f8 ff             	cmp    eax,0xffffffff
c0002a27:	75 0a                	jne    c0002a33 <create_name+0x3c>
c0002a29:	b8 06 00 00 00       	mov    eax,0x6
c0002a2e:	e9 8c 02 00 00       	jmp    c0002cbf <create_name+0x2c8>
c0002a33:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a38:	76 0e                	jbe    c0002a48 <create_name+0x51>
c0002a3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002a3e:	89 c2                	mov    edx,eax
c0002a40:	c1 ea 10             	shr    edx,0x10
c0002a43:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002a47:	46                   	inc    esi
c0002a48:	0f b7 e8             	movzx  ebp,ax
c0002a4b:	83 fd 1f             	cmp    ebp,0x1f
c0002a4e:	76 3a                	jbe    c0002a8a <create_name+0x93>
c0002a50:	83 fd 2f             	cmp    ebp,0x2f
c0002a53:	74 35                	je     c0002a8a <create_name+0x93>
c0002a55:	83 fd 5c             	cmp    ebp,0x5c
c0002a58:	74 3e                	je     c0002a98 <create_name+0xa1>
c0002a5a:	83 fd 7f             	cmp    ebp,0x7f
c0002a5d:	77 18                	ja     c0002a77 <create_name+0x80>
c0002a5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a63:	89 ea                	mov    edx,ebp
c0002a65:	b8 62 f0 01 c0       	mov    eax,0xc001f062
c0002a6a:	e8 38 f4 ff ff       	call   c0001ea7 <chk_chr>
c0002a6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a73:	85 c0                	test   eax,eax
c0002a75:	75 b2                	jne    c0002a29 <create_name+0x32>
c0002a77:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a7d:	77 aa                	ja     c0002a29 <create_name+0x32>
c0002a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002a83:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002a87:	46                   	inc    esi
c0002a88:	eb 89                	jmp    c0002a13 <create_name+0x1c>
c0002a8a:	83 fd 1f             	cmp    ebp,0x1f
c0002a8d:	b3 04                	mov    bl,0x4
c0002a8f:	76 19                	jbe    c0002aaa <create_name+0xb3>
c0002a91:	eb 05                	jmp    c0002a98 <create_name+0xa1>
c0002a93:	40                   	inc    eax
c0002a94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002a9e:	80 fa 2f             	cmp    dl,0x2f
c0002aa1:	74 f0                	je     c0002a93 <create_name+0x9c>
c0002aa3:	80 fa 5c             	cmp    dl,0x5c
c0002aa6:	74 eb                	je     c0002a93 <create_name+0x9c>
c0002aa8:	31 db                	xor    ebx,ebx
c0002aaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002aae:	89 01                	mov    DWORD PTR [ecx],eax
c0002ab0:	85 f6                	test   esi,esi
c0002ab2:	74 16                	je     c0002aca <create_name+0xd3>
c0002ab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ab8:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002abd:	83 f8 20             	cmp    eax,0x20
c0002ac0:	74 05                	je     c0002ac7 <create_name+0xd0>
c0002ac2:	83 f8 2e             	cmp    eax,0x2e
c0002ac5:	75 03                	jne    c0002aca <create_name+0xd3>
c0002ac7:	4e                   	dec    esi
c0002ac8:	eb e6                	jmp    c0002ab0 <create_name+0xb9>
c0002aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ace:	85 f6                	test   esi,esi
c0002ad0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002ad6:	0f 84 4d ff ff ff    	je     c0002a29 <create_name+0x32>
c0002adc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002ae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002ae8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002aec:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002af0:	42                   	inc    edx
c0002af1:	83 f8 20             	cmp    eax,0x20
c0002af4:	75 06                	jne    c0002afc <create_name+0x105>
c0002af6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002afa:	eb e8                	jmp    c0002ae4 <create_name+0xed>
c0002afc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b01:	75 05                	jne    c0002b08 <create_name+0x111>
c0002b03:	83 f8 2e             	cmp    eax,0x2e
c0002b06:	75 08                	jne    c0002b10 <create_name+0x119>
c0002b08:	80 cb 03             	or     bl,0x3
c0002b0b:	eb 03                	jmp    c0002b10 <create_name+0x119>
c0002b0d:	4e                   	dec    esi
c0002b0e:	74 0c                	je     c0002b1c <create_name+0x125>
c0002b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b14:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b1a:	75 f1                	jne    c0002b0d <create_name+0x116>
c0002b1c:	8d 47 20             	lea    eax,[edi+0x20]
c0002b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b24:	ba 20 00 00 00       	mov    edx,0x20
c0002b29:	31 ed                	xor    ebp,ebp
c0002b2b:	e8 4a f3 ff ff       	call   c0001e7a <mem_set>
c0002b30:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002b38:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002b41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b45:	40                   	inc    eax
c0002b46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b4e:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002b52:	85 c9                	test   ecx,ecx
c0002b54:	0f 84 15 01 00 00    	je     c0002c6f <create_name+0x278>
c0002b5a:	83 f9 20             	cmp    ecx,0x20
c0002b5d:	74 0b                	je     c0002b6a <create_name+0x173>
c0002b5f:	83 f9 2e             	cmp    ecx,0x2e
c0002b62:	75 13                	jne    c0002b77 <create_name+0x180>
c0002b64:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b68:	74 0d                	je     c0002b77 <create_name+0x180>
c0002b6a:	80 cb 03             	or     bl,0x3
c0002b6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002b71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b75:	eb c6                	jmp    c0002b3d <create_name+0x146>
c0002b77:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002b7b:	73 06                	jae    c0002b83 <create_name+0x18c>
c0002b7d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b81:	75 3a                	jne    c0002bbd <create_name+0x1c6>
c0002b83:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002b88:	75 08                	jne    c0002b92 <create_name+0x19b>
c0002b8a:	80 cb 03             	or     bl,0x3
c0002b8d:	e9 dd 00 00 00       	jmp    c0002c6f <create_name+0x278>
c0002b92:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b96:	74 0d                	je     c0002ba5 <create_name+0x1ae>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b9f:	0f 87 ca 00 00 00    	ja     c0002c6f <create_name+0x278>
c0002ba5:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002baa:	bd 08 00 00 00       	mov    ebp,0x8
c0002baf:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002bb3:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002bbb:	eb b0                	jmp    c0002b6d <create_name+0x176>
c0002bbd:	83 f9 7f             	cmp    ecx,0x7f
c0002bc0:	76 5d                	jbe    c0002c1f <create_name+0x228>
c0002bc2:	88 da                	mov    dl,bl
c0002bc4:	80 ca 02             	or     dl,0x2
c0002bc7:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002bcb:	50                   	push   eax
c0002bcc:	50                   	push   eax
c0002bcd:	68 b5 01 00 00       	push   0x1b5
c0002bd2:	51                   	push   ecx
c0002bd3:	e8 c0 2f 00 00       	call   c0005b98 <ff_uni2oem>
c0002bd8:	83 c4 10             	add    esp,0x10
c0002bdb:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002bdf:	0f b7 c8             	movzx  ecx,ax
c0002be2:	f6 c1 80             	test   cl,0x80
c0002be5:	74 0c                	je     c0002bf3 <create_name+0x1fc>
c0002be7:	83 e1 7f             	and    ecx,0x7f
c0002bea:	0f b6 89 20 f1 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe0ee0]
c0002bf1:	eb 26                	jmp    c0002c19 <create_name+0x222>
c0002bf3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002bf9:	76 1e                	jbe    c0002c19 <create_name+0x222>
c0002bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002bff:	48                   	dec    eax
c0002c00:	39 e8                	cmp    eax,ebp
c0002c02:	77 0c                	ja     c0002c10 <create_name+0x219>
c0002c04:	80 cb 03             	or     bl,0x3
c0002c07:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	e9 5d ff ff ff       	jmp    c0002b6d <create_name+0x176>
c0002c10:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002c14:	88 d3                	mov    bl,dl
c0002c16:	45                   	inc    ebp
c0002c17:	eb 4c                	jmp    c0002c65 <create_name+0x26e>
c0002c19:	85 c9                	test   ecx,ecx
c0002c1b:	88 d3                	mov    bl,dl
c0002c1d:	74 18                	je     c0002c37 <create_name+0x240>
c0002c1f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002c23:	89 ca                	mov    edx,ecx
c0002c25:	b8 6b f0 01 c0       	mov    eax,0xc001f06b
c0002c2a:	e8 78 f2 ff ff       	call   c0001ea7 <chk_chr>
c0002c2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002c33:	85 c0                	test   eax,eax
c0002c35:	74 0a                	je     c0002c41 <create_name+0x24a>
c0002c37:	80 cb 03             	or     bl,0x3
c0002c3a:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002c3f:	eb 24                	jmp    c0002c65 <create_name+0x26e>
c0002c41:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002c44:	66 83 f8 19          	cmp    ax,0x19
c0002c48:	77 07                	ja     c0002c51 <create_name+0x25a>
c0002c4a:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002c4f:	eb 14                	jmp    c0002c65 <create_name+0x26e>
c0002c51:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002c54:	66 83 f8 19          	cmp    ax,0x19
c0002c58:	77 0b                	ja     c0002c65 <create_name+0x26e>
c0002c5a:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002c5f:	83 e9 20             	sub    ecx,0x20
c0002c62:	0f b7 c9             	movzx  ecx,cx
c0002c65:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002c69:	45                   	inc    ebp
c0002c6a:	e9 fe fe ff ff       	jmp    c0002b6d <create_name+0x176>
c0002c6f:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002c73:	75 04                	jne    c0002c79 <create_name+0x282>
c0002c75:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002c79:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002c7e:	75 05                	jne    c0002c85 <create_name+0x28e>
c0002c80:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002c89:	24 0c                	and    al,0xc
c0002c8b:	3c 0c                	cmp    al,0xc
c0002c8d:	74 0a                	je     c0002c99 <create_name+0x2a2>
c0002c8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002c93:	24 03                	and    al,0x3
c0002c95:	3c 03                	cmp    al,0x3
c0002c97:	75 05                	jne    c0002c9e <create_name+0x2a7>
c0002c99:	80 cb 02             	or     bl,0x2
c0002c9c:	eb 1c                	jmp    c0002cba <create_name+0x2c3>
c0002c9e:	88 d8                	mov    al,bl
c0002ca0:	24 02                	and    al,0x2
c0002ca2:	75 16                	jne    c0002cba <create_name+0x2c3>
c0002ca4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002ca8:	24 01                	and    al,0x1
c0002caa:	74 03                	je     c0002caf <create_name+0x2b8>
c0002cac:	80 cb 10             	or     bl,0x10
c0002caf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002cb3:	24 04                	and    al,0x4
c0002cb5:	74 03                	je     c0002cba <create_name+0x2c3>
c0002cb7:	80 cb 08             	or     bl,0x8
c0002cba:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002cbd:	31 c0                	xor    eax,eax
c0002cbf:	83 c4 3c             	add    esp,0x3c
c0002cc2:	5b                   	pop    ebx
c0002cc3:	5e                   	pop    esi
c0002cc4:	5f                   	pop    edi
c0002cc5:	5d                   	pop    ebp
c0002cc6:	c3                   	ret    

c0002cc7 <cmp_lfn>:
c0002cc7:	55                   	push   ebp
c0002cc8:	57                   	push   edi
c0002cc9:	89 d7                	mov    edi,edx
c0002ccb:	56                   	push   esi
c0002ccc:	53                   	push   ebx
c0002ccd:	83 ec 1c             	sub    esp,0x1c
c0002cd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002cd4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cd7:	e8 5d f1 ff ff       	call   c0001e39 <ld_word>
c0002cdc:	66 85 c0             	test   ax,ax
c0002cdf:	74 07                	je     c0002ce8 <cmp_lfn+0x21>
c0002ce1:	31 c0                	xor    eax,eax
c0002ce3:	e9 a0 00 00 00       	jmp    c0002d88 <cmp_lfn+0xc1>
c0002ce8:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002ceb:	bd 01 00 00 00       	mov    ebp,0x1
c0002cf0:	31 c9                	xor    ecx,ecx
c0002cf2:	83 e3 3f             	and    ebx,0x3f
c0002cf5:	4b                   	dec    ebx
c0002cf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002cf9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cfd:	0f b6 81 a0 f1 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0e60]
c0002d04:	01 f8                	add    eax,edi
c0002d06:	e8 2e f1 ff ff       	call   c0001e39 <ld_word>
c0002d0b:	85 ed                	test   ebp,ebp
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	0f b7 f0             	movzx  esi,ax
c0002d14:	74 41                	je     c0002d57 <cmp_lfn+0x90>
c0002d16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d1a:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d20:	77 bf                	ja     c0002ce1 <cmp_lfn+0x1a>
c0002d22:	83 ec 0c             	sub    esp,0xc
c0002d25:	56                   	push   esi
c0002d26:	e8 81 2f 00 00       	call   c0005cac <ff_wtoupper>
c0002d2b:	89 c5                	mov    ebp,eax
c0002d2d:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d38:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d3f:	e8 68 2f 00 00       	call   c0005cac <ff_wtoupper>
c0002d44:	83 c4 10             	add    esp,0x10
c0002d47:	39 c5                	cmp    ebp,eax
c0002d49:	75 96                	jne    c0002ce1 <cmp_lfn+0x1a>
c0002d4b:	89 f5                	mov    ebp,esi
c0002d4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d55:	eb 08                	jmp    c0002d5f <cmp_lfn+0x98>
c0002d57:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d5d:	75 82                	jne    c0002ce1 <cmp_lfn+0x1a>
c0002d5f:	41                   	inc    ecx
c0002d60:	83 f9 0d             	cmp    ecx,0xd
c0002d63:	75 94                	jne    c0002cf9 <cmp_lfn+0x32>
c0002d65:	8a 07                	mov    al,BYTE PTR [edi]
c0002d67:	c0 e8 06             	shr    al,0x6
c0002d6a:	24 01                	and    al,0x1
c0002d6c:	74 15                	je     c0002d83 <cmp_lfn+0xbc>
c0002d6e:	85 ed                	test   ebp,ebp
c0002d70:	74 11                	je     c0002d83 <cmp_lfn+0xbc>
c0002d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d76:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d7b:	0f 94 c0             	sete   al
c0002d7e:	0f b6 c0             	movzx  eax,al
c0002d81:	eb 05                	jmp    c0002d88 <cmp_lfn+0xc1>
c0002d83:	b8 01 00 00 00       	mov    eax,0x1
c0002d88:	83 c4 1c             	add    esp,0x1c
c0002d8b:	5b                   	pop    ebx
c0002d8c:	5e                   	pop    esi
c0002d8d:	5f                   	pop    edi
c0002d8e:	5d                   	pop    ebp
c0002d8f:	c3                   	ret    

c0002d90 <sync_fs>:
c0002d90:	56                   	push   esi
c0002d91:	53                   	push   ebx
c0002d92:	53                   	push   ebx
c0002d93:	89 c3                	mov    ebx,eax
c0002d95:	e8 50 f5 ff ff       	call   c00022ea <sync_window>
c0002d9a:	85 c0                	test   eax,eax
c0002d9c:	0f 85 9a 00 00 00    	jne    c0002e3c <sync_fs+0xac>
c0002da2:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002da5:	75 7b                	jne    c0002e22 <sync_fs+0x92>
c0002da7:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dab:	75 75                	jne    c0002e22 <sync_fs+0x92>
c0002dad:	8d 73 34             	lea    esi,[ebx+0x34]
c0002db0:	b9 00 02 00 00       	mov    ecx,0x200
c0002db5:	31 d2                	xor    edx,edx
c0002db7:	89 f0                	mov    eax,esi
c0002db9:	e8 bc f0 ff ff       	call   c0001e7a <mem_set>
c0002dbe:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002dc4:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dc9:	e8 90 f0 ff ff       	call   c0001e5e <st_word>
c0002dce:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dd3:	89 f0                	mov    eax,esi
c0002dd5:	e8 88 f0 ff ff       	call   c0001e62 <st_dword>
c0002dda:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002de0:	ba 72 72 41 61       	mov    edx,0x61417272
c0002de5:	e8 78 f0 ff ff       	call   c0001e62 <st_dword>
c0002dea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ded:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002df3:	e8 6a f0 ff ff       	call   c0001e62 <st_dword>
c0002df8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002dfb:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e01:	e8 5c f0 ff ff       	call   c0001e62 <st_dword>
c0002e06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e09:	6a 01                	push   0x1
c0002e0b:	40                   	inc    eax
c0002e0c:	50                   	push   eax
c0002e0d:	56                   	push   esi
c0002e0e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e11:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e15:	50                   	push   eax
c0002e16:	e8 e9 ef ff ff       	call   c0001e04 <disk_write>
c0002e1b:	83 c4 10             	add    esp,0x10
c0002e1e:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e22:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e26:	51                   	push   ecx
c0002e27:	6a 00                	push   0x0
c0002e29:	6a 00                	push   0x0
c0002e2b:	50                   	push   eax
c0002e2c:	e8 e9 ef ff ff       	call   c0001e1a <disk_ioctl>
c0002e31:	83 c4 10             	add    esp,0x10
c0002e34:	85 c0                	test   eax,eax
c0002e36:	0f 95 c0             	setne  al
c0002e39:	0f b6 c0             	movzx  eax,al
c0002e3c:	5a                   	pop    edx
c0002e3d:	5b                   	pop    ebx
c0002e3e:	5e                   	pop    esi
c0002e3f:	c3                   	ret    

c0002e40 <create_partition>:
c0002e40:	55                   	push   ebp
c0002e41:	0f b6 c0             	movzx  eax,al
c0002e44:	57                   	push   edi
c0002e45:	56                   	push   esi
c0002e46:	53                   	push   ebx
c0002e47:	83 ec 40             	sub    esp,0x40
c0002e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4e:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002e56:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e5a:	50                   	push   eax
c0002e5b:	6a 01                	push   0x1
c0002e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002e61:	e8 b4 ef ff ff       	call   c0001e1a <disk_ioctl>
c0002e66:	83 c4 10             	add    esp,0x10
c0002e69:	85 c0                	test   eax,eax
c0002e6b:	0f 85 66 01 00 00    	jne    c0002fd7 <create_partition+0x197>
c0002e71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e75:	b9 05 00 00 00       	mov    ecx,0x5
c0002e7a:	b3 08                	mov    bl,0x8
c0002e7c:	31 d2                	xor    edx,edx
c0002e7e:	0f b6 f3             	movzx  esi,bl
c0002e81:	89 e8                	mov    eax,ebp
c0002e83:	f7 f6                	div    esi
c0002e85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e8a:	76 07                	jbe    c0002e93 <create_partition+0x53>
c0002e8c:	00 db                	add    bl,bl
c0002e8e:	49                   	dec    ecx
c0002e8f:	75 eb                	jne    c0002e7c <create_partition+0x3c>
c0002e91:	b3 ff                	mov    bl,0xff
c0002e93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e97:	b9 00 02 00 00       	mov    ecx,0x200
c0002e9c:	31 d2                	xor    edx,edx
c0002e9e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002ea3:	e8 d2 ef ff ff       	call   c0001e7a <mem_set>
c0002ea8:	b9 64 00 00 00       	mov    ecx,0x64
c0002ead:	89 e8                	mov    eax,ebp
c0002eaf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002eb7:	31 d2                	xor    edx,edx
c0002eb9:	f7 f1                	div    ecx
c0002ebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002ebf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ec3:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002ec9:	0f b6 c3             	movzx  eax,bl
c0002ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ed0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002ed5:	0f 96 c2             	setbe  dl
c0002ed8:	85 ff                	test   edi,edi
c0002eda:	0f 95 c0             	setne  al
c0002edd:	84 c2                	test   dl,al
c0002edf:	0f 84 c1 00 00 00    	je     c0002fa6 <create_partition+0x166>
c0002ee5:	39 ef                	cmp    edi,ebp
c0002ee7:	0f 83 b9 00 00 00    	jae    c0002fa6 <create_partition+0x166>
c0002eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ef1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002ef5:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002ef8:	83 f9 64             	cmp    ecx,0x64
c0002efb:	77 0b                	ja     c0002f08 <create_partition+0xc8>
c0002efd:	74 07                	je     c0002f06 <create_partition+0xc6>
c0002eff:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f04:	eb 02                	jmp    c0002f08 <create_partition+0xc8>
c0002f06:	89 e9                	mov    ecx,ebp
c0002f08:	89 fa                	mov    edx,edi
c0002f0a:	31 c0                	xor    eax,eax
c0002f0c:	01 ca                	add    edx,ecx
c0002f0e:	73 05                	jae    c0002f15 <create_partition+0xd5>
c0002f10:	b8 01 00 00 00       	mov    eax,0x1
c0002f15:	39 ea                	cmp    edx,ebp
c0002f17:	77 04                	ja     c0002f1d <create_partition+0xdd>
c0002f19:	85 c0                	test   eax,eax
c0002f1b:	74 06                	je     c0002f23 <create_partition+0xe3>
c0002f1d:	89 e9                	mov    ecx,ebp
c0002f1f:	29 f9                	sub    ecx,edi
c0002f21:	eb 04                	jmp    c0002f27 <create_partition+0xe7>
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	74 7f                	je     c0002fa6 <create_partition+0x166>
c0002f27:	89 fa                	mov    edx,edi
c0002f29:	89 f0                	mov    eax,esi
c0002f2b:	e8 32 ef ff ff       	call   c0001e62 <st_dword>
c0002f30:	8d 46 04             	lea    eax,[esi+0x4]
c0002f33:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002f38:	83 c6 10             	add    esi,0x10
c0002f3b:	89 ca                	mov    edx,ecx
c0002f3d:	e8 20 ef ff ff       	call   c0001e62 <st_dword>
c0002f42:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002f46:	31 d2                	xor    edx,edx
c0002f48:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f4c:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002f4f:	89 f8                	mov    eax,edi
c0002f51:	f7 f3                	div    ebx
c0002f53:	01 cf                	add    edi,ecx
c0002f55:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002f59:	31 d2                	xor    edx,edx
c0002f5b:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002f5f:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002f63:	fe c3                	inc    bl
c0002f65:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002f68:	89 c2                	mov    edx,eax
c0002f6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002f6d:	c1 ea 02             	shr    edx,0x2
c0002f70:	8d 47 ff             	lea    eax,[edi-0x1]
c0002f73:	80 e2 c0             	and    dl,0xc0
c0002f76:	08 da                	or     dl,bl
c0002f78:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002f7d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0002f80:	31 d2                	xor    edx,edx
c0002f82:	f7 f3                	div    ebx
c0002f84:	89 d1                	mov    ecx,edx
c0002f86:	31 d2                	xor    edx,edx
c0002f88:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002f8c:	fe c1                	inc    cl
c0002f8e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0002f91:	89 c3                	mov    ebx,eax
c0002f93:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0002f96:	c1 eb 02             	shr    ebx,0x2
c0002f99:	80 e3 c0             	and    bl,0xc0
c0002f9c:	08 d9                	or     cl,bl
c0002f9e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0002fa1:	e9 2a ff ff ff       	jmp    c0002ed0 <create_partition+0x90>
c0002fa6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002faa:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002faf:	05 fe 01 00 00       	add    eax,0x1fe
c0002fb4:	e8 a5 ee ff ff       	call   c0001e5e <st_word>
c0002fb9:	6a 01                	push   0x1
c0002fbb:	6a 00                	push   0x0
c0002fbd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002fc5:	e8 3a ee ff ff       	call   c0001e04 <disk_write>
c0002fca:	83 c4 10             	add    esp,0x10
c0002fcd:	85 c0                	test   eax,eax
c0002fcf:	0f 95 c0             	setne  al
c0002fd2:	0f b6 c0             	movzx  eax,al
c0002fd5:	eb 05                	jmp    c0002fdc <create_partition+0x19c>
c0002fd7:	b8 01 00 00 00       	mov    eax,0x1
c0002fdc:	83 c4 3c             	add    esp,0x3c
c0002fdf:	5b                   	pop    ebx
c0002fe0:	5e                   	pop    esi
c0002fe1:	5f                   	pop    edi
c0002fe2:	5d                   	pop    ebp
c0002fe3:	c3                   	ret    

c0002fe4 <get_fileinfo>:
c0002fe4:	55                   	push   ebp
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fed:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ff1:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ff5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002ff9:	0f 84 bc 01 00 00    	je     c00031bb <get_fileinfo+0x1d7>
c0002fff:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003003:	89 d3                	mov    ebx,edx
c0003005:	89 c6                	mov    esi,eax
c0003007:	74 6c                	je     c0003075 <get_fileinfo+0x91>
c0003009:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003011:	31 ed                	xor    ebp,ebp
c0003013:	31 ff                	xor    edi,edi
c0003015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003019:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000301d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003020:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003024:	85 c0                	test   eax,eax
c0003026:	74 3e                	je     c0003066 <get_fileinfo+0x82>
c0003028:	85 ed                	test   ebp,ebp
c000302a:	75 0d                	jne    c0003039 <get_fileinfo+0x55>
c000302c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0003032:	66 81 fa ff 07       	cmp    dx,0x7ff
c0003037:	76 22                	jbe    c000305b <get_fileinfo+0x77>
c0003039:	89 ea                	mov    edx,ebp
c000303b:	b9 ff 00 00 00       	mov    ecx,0xff
c0003040:	c1 e2 10             	shl    edx,0x10
c0003043:	29 f9                	sub    ecx,edi
c0003045:	09 d0                	or     eax,edx
c0003047:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000304b:	e8 38 ef ff ff       	call   c0001f88 <put_utf>
c0003050:	84 c0                	test   al,al
c0003052:	74 10                	je     c0003064 <get_fileinfo+0x80>
c0003054:	0f b6 c0             	movzx  eax,al
c0003057:	01 c7                	add    edi,eax
c0003059:	31 c0                	xor    eax,eax
c000305b:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003060:	89 c5                	mov    ebp,eax
c0003062:	eb b1                	jmp    c0003015 <get_fileinfo+0x31>
c0003064:	31 ff                	xor    edi,edi
c0003066:	85 ed                	test   ebp,ebp
c0003068:	b8 00 00 00 00       	mov    eax,0x0
c000306d:	0f 45 f8             	cmovne edi,eax
c0003070:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003075:	31 ff                	xor    edi,edi
c0003077:	31 c9                	xor    ecx,ecx
c0003079:	83 f9 0a             	cmp    ecx,0xa
c000307c:	0f 87 a1 00 00 00    	ja     c0003123 <get_fileinfo+0x13f>
c0003082:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003085:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003088:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000308c:	83 fa 20             	cmp    edx,0x20
c000308f:	0f 84 87 00 00 00    	je     c000311c <get_fileinfo+0x138>
c0003095:	83 fa 05             	cmp    edx,0x5
c0003098:	75 05                	jne    c000309f <get_fileinfo+0xbb>
c000309a:	ba e5 00 00 00       	mov    edx,0xe5
c000309f:	83 fd 09             	cmp    ebp,0x9
c00030a2:	75 0b                	jne    c00030af <get_fileinfo+0xcb>
c00030a4:	83 ff 0b             	cmp    edi,0xb
c00030a7:	77 06                	ja     c00030af <get_fileinfo+0xcb>
c00030a9:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030ae:	47                   	inc    edi
c00030af:	89 d0                	mov    eax,edx
c00030b1:	e8 02 ee ff ff       	call   c0001eb8 <dbc_1st>
c00030b6:	85 c0                	test   eax,eax
c00030b8:	74 2e                	je     c00030e8 <get_fileinfo+0x104>
c00030ba:	83 fd 08             	cmp    ebp,0x8
c00030bd:	74 29                	je     c00030e8 <get_fileinfo+0x104>
c00030bf:	83 fd 0b             	cmp    ebp,0xb
c00030c2:	74 24                	je     c00030e8 <get_fileinfo+0x104>
c00030c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030c7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030cb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00030cf:	e8 e7 ed ff ff       	call   c0001ebb <dbc_2nd>
c00030d4:	85 c0                	test   eax,eax
c00030d6:	74 10                	je     c00030e8 <get_fileinfo+0x104>
c00030d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00030dd:	c1 e2 08             	shl    edx,0x8
c00030e0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030e3:	09 d0                	or     eax,edx
c00030e5:	0f b7 d0             	movzx  edx,ax
c00030e8:	50                   	push   eax
c00030e9:	50                   	push   eax
c00030ea:	68 b5 01 00 00       	push   0x1b5
c00030ef:	52                   	push   edx
c00030f0:	e8 3f 2b 00 00       	call   c0005c34 <ff_oem2uni>
c00030f5:	83 c4 10             	add    esp,0x10
c00030f8:	0f b7 c0             	movzx  eax,ax
c00030fb:	85 c0                	test   eax,eax
c00030fd:	75 04                	jne    c0003103 <get_fileinfo+0x11f>
c00030ff:	31 ff                	xor    edi,edi
c0003101:	eb 20                	jmp    c0003123 <get_fileinfo+0x13f>
c0003103:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003107:	b9 0c 00 00 00       	mov    ecx,0xc
c000310c:	29 f9                	sub    ecx,edi
c000310e:	e8 75 ee ff ff       	call   c0001f88 <put_utf>
c0003113:	84 c0                	test   al,al
c0003115:	74 e8                	je     c00030ff <get_fileinfo+0x11b>
c0003117:	0f b6 c0             	movzx  eax,al
c000311a:	01 c7                	add    edi,eax
c000311c:	89 e9                	mov    ecx,ebp
c000311e:	e9 56 ff ff ff       	jmp    c0003079 <get_fileinfo+0x95>
c0003123:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003128:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000312c:	75 59                	jne    c0003187 <get_fileinfo+0x1a3>
c000312e:	85 ff                	test   edi,edi
c0003130:	75 0b                	jne    c000313d <get_fileinfo+0x159>
c0003132:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003136:	b9 01 00 00 00       	mov    ecx,0x1
c000313b:	eb 38                	jmp    c0003175 <get_fileinfo+0x191>
c000313d:	b2 08                	mov    dl,0x8
c000313f:	31 c9                	xor    ecx,ecx
c0003141:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c0003147:	84 c0                	test   al,al
c0003149:	74 2a                	je     c0003175 <get_fileinfo+0x191>
c000314b:	0f b7 c0             	movzx  eax,ax
c000314e:	83 f8 2e             	cmp    eax,0x2e
c0003151:	74 19                	je     c000316c <get_fileinfo+0x188>
c0003153:	8d 78 bf             	lea    edi,[eax-0x41]
c0003156:	66 83 ff 19          	cmp    di,0x19
c000315a:	77 12                	ja     c000316e <get_fileinfo+0x18a>
c000315c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000315f:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x18a>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	0f b7 c0             	movzx  eax,ax
c000316a:	eb 02                	jmp    c000316e <get_fileinfo+0x18a>
c000316c:	b2 10                	mov    dl,0x10
c000316e:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003172:	41                   	inc    ecx
c0003173:	eb cc                	jmp    c0003141 <get_fileinfo+0x15d>
c0003175:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1a3>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 ab ec ff ff       	call   c0001e46 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 91 ec ff ff       	call   c0001e39 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 82 ec ff ff       	call   c0001e39 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	88 c1                	mov    cl,al
c00031c6:	53                   	push   ebx
c00031c7:	89 d6                	mov    esi,edx
c00031c9:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031cc:	e8 68 ec ff ff       	call   c0001e39 <ld_word>
c00031d1:	80 f9 03             	cmp    cl,0x3
c00031d4:	0f b7 d8             	movzx  ebx,ax
c00031d7:	75 0d                	jne    c00031e6 <ld_clust.isra.0+0x23>
c00031d9:	8d 46 14             	lea    eax,[esi+0x14]
c00031dc:	e8 58 ec ff ff       	call   c0001e39 <ld_word>
c00031e1:	c1 e0 10             	shl    eax,0x10
c00031e4:	09 c3                	or     ebx,eax
c00031e6:	89 d8                	mov    eax,ebx
c00031e8:	5b                   	pop    ebx
c00031e9:	5e                   	pop    esi
c00031ea:	c3                   	ret    

c00031eb <st_clust.isra.1>:
c00031eb:	56                   	push   esi
c00031ec:	89 c6                	mov    esi,eax
c00031ee:	53                   	push   ebx
c00031ef:	89 d3                	mov    ebx,edx
c00031f1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f4:	0f b7 d1             	movzx  edx,cx
c00031f7:	e8 62 ec ff ff       	call   c0001e5e <st_word>
c00031fc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00031ff:	75 0f                	jne    c0003210 <st_clust.isra.1+0x25>
c0003201:	8d 43 14             	lea    eax,[ebx+0x14]
c0003204:	5b                   	pop    ebx
c0003205:	c1 e9 10             	shr    ecx,0x10
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5e                   	pop    esi
c000320b:	e9 4e ec ff ff       	jmp    c0001e5e <st_word>
c0003210:	5b                   	pop    ebx
c0003211:	5e                   	pop    esi
c0003212:	c3                   	ret    

c0003213 <get_fat.isra.2>:
c0003213:	83 fa 01             	cmp    edx,0x1
c0003216:	b9 01 00 00 00       	mov    ecx,0x1
c000321b:	0f 86 f1 00 00 00    	jbe    c0003312 <get_fat.isra.2+0xff>
c0003221:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003224:	0f 83 e8 00 00 00    	jae    c0003312 <get_fat.isra.2+0xff>
c000322a:	55                   	push   ebp
c000322b:	57                   	push   edi
c000322c:	89 c7                	mov    edi,eax
c000322e:	56                   	push   esi
c000322f:	89 d6                	mov    esi,edx
c0003231:	53                   	push   ebx
c0003232:	83 ec 0c             	sub    esp,0xc
c0003235:	8a 00                	mov    al,BYTE PTR [eax]
c0003237:	3c 02                	cmp    al,0x2
c0003239:	74 78                	je     c00032b3 <get_fat.isra.2+0xa0>
c000323b:	3c 03                	cmp    al,0x3
c000323d:	0f 84 97 00 00 00    	je     c00032da <get_fat.isra.2+0xc7>
c0003243:	fe c8                	dec    al
c0003245:	0f 85 bd 00 00 00    	jne    c0003308 <get_fat.isra.2+0xf5>
c000324b:	89 d3                	mov    ebx,edx
c000324d:	89 f8                	mov    eax,edi
c000324f:	d1 eb                	shr    ebx,1
c0003251:	01 d3                	add    ebx,edx
c0003253:	89 da                	mov    edx,ebx
c0003255:	c1 ea 09             	shr    edx,0x9
c0003258:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325b:	e8 ed f0 ff ff       	call   c000234d <move_window>
c0003260:	85 c0                	test   eax,eax
c0003262:	74 08                	je     c000326c <get_fat.isra.2+0x59>
c0003264:	83 c9 ff             	or     ecx,0xffffffff
c0003267:	e9 9c 00 00 00       	jmp    c0003308 <get_fat.isra.2+0xf5>
c000326c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000326f:	89 f8                	mov    eax,edi
c0003271:	89 ea                	mov    edx,ebp
c0003273:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003279:	c1 ea 09             	shr    edx,0x9
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003283:	e8 c5 f0 ff ff       	call   c000234d <move_window>
c0003288:	85 c0                	test   eax,eax
c000328a:	75 d8                	jne    c0003264 <get_fat.isra.2+0x51>
c000328c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003292:	0f b6 c3             	movzx  eax,bl
c0003295:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329a:	c1 e3 08             	shl    ebx,0x8
c000329d:	09 c3                	or     ebx,eax
c000329f:	89 d9                	mov    ecx,ebx
c00032a1:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032a7:	83 e6 01             	and    esi,0x1
c00032aa:	74 5c                	je     c0003308 <get_fat.isra.2+0xf5>
c00032ac:	89 d9                	mov    ecx,ebx
c00032ae:	c1 e9 04             	shr    ecx,0x4
c00032b1:	eb 55                	jmp    c0003308 <get_fat.isra.2+0xf5>
c00032b3:	c1 ea 08             	shr    edx,0x8
c00032b6:	89 f8                	mov    eax,edi
c00032b8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032bb:	e8 8d f0 ff ff       	call   c000234d <move_window>
c00032c0:	85 c0                	test   eax,eax
c00032c2:	75 a0                	jne    c0003264 <get_fat.isra.2+0x51>
c00032c4:	01 f6                	add    esi,esi
c00032c6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cc:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d0:	e8 64 eb ff ff       	call   c0001e39 <ld_word>
c00032d5:	0f b7 c8             	movzx  ecx,ax
c00032d8:	eb 2e                	jmp    c0003308 <get_fat.isra.2+0xf5>
c00032da:	c1 ea 07             	shr    edx,0x7
c00032dd:	89 f8                	mov    eax,edi
c00032df:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e2:	e8 66 f0 ff ff       	call   c000234d <move_window>
c00032e7:	85 c0                	test   eax,eax
c00032e9:	0f 85 75 ff ff ff    	jne    c0003264 <get_fat.isra.2+0x51>
c00032ef:	c1 e6 02             	shl    esi,0x2
c00032f2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032f8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032fc:	e8 45 eb ff ff       	call   c0001e46 <ld_dword>
c0003301:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003306:	89 c1                	mov    ecx,eax
c0003308:	83 c4 0c             	add    esp,0xc
c000330b:	89 c8                	mov    eax,ecx
c000330d:	5b                   	pop    ebx
c000330e:	5e                   	pop    esi
c000330f:	5f                   	pop    edi
c0003310:	5d                   	pop    ebp
c0003311:	c3                   	ret    
c0003312:	89 c8                	mov    eax,ecx
c0003314:	c3                   	ret    

c0003315 <dir_sdi>:
c0003315:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331b:	0f 87 b6 00 00 00    	ja     c00033d7 <dir_sdi+0xc2>
c0003321:	55                   	push   ebp
c0003322:	57                   	push   edi
c0003323:	56                   	push   esi
c0003324:	53                   	push   ebx
c0003325:	89 d3                	mov    ebx,edx
c0003327:	83 ec 1c             	sub    esp,0x1c
c000332a:	f6 c2 1f             	test   dl,0x1f
c000332d:	74 0a                	je     c0003339 <dir_sdi+0x24>
c000332f:	b8 02 00 00 00       	mov    eax,0x2
c0003334:	e9 96 00 00 00       	jmp    c00033cf <dir_sdi+0xba>
c0003339:	89 c6                	mov    esi,eax
c000333b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000333d:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003340:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003343:	85 ff                	test   edi,edi
c0003345:	75 21                	jne    c0003368 <dir_sdi+0x53>
c0003347:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000334b:	76 07                	jbe    c0003354 <dir_sdi+0x3f>
c000334d:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003350:	85 c0                	test   eax,eax
c0003352:	75 12                	jne    c0003366 <dir_sdi+0x51>
c0003354:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003358:	89 da                	mov    edx,ebx
c000335a:	c1 ea 05             	shr    edx,0x5
c000335d:	39 c2                	cmp    edx,eax
c000335f:	73 ce                	jae    c000332f <dir_sdi+0x1a>
c0003361:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003364:	eb 3c                	jmp    c00033a2 <dir_sdi+0x8d>
c0003366:	89 c7                	mov    edi,eax
c0003368:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000336c:	c1 e1 09             	shl    ecx,0x9
c000336f:	39 cb                	cmp    ebx,ecx
c0003371:	72 26                	jb     c0003399 <dir_sdi+0x84>
c0003373:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003377:	8b 06                	mov    eax,DWORD PTR [esi]
c0003379:	89 fa                	mov    edx,edi
c000337b:	e8 93 fe ff ff       	call   c0003213 <get_fat.isra.2>
c0003380:	83 f8 ff             	cmp    eax,0xffffffff
c0003383:	89 c7                	mov    edi,eax
c0003385:	74 43                	je     c00033ca <dir_sdi+0xb5>
c0003387:	83 f8 01             	cmp    eax,0x1
c000338a:	76 a3                	jbe    c000332f <dir_sdi+0x1a>
c000338c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000338f:	76 9e                	jbe    c000332f <dir_sdi+0x1a>
c0003391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003395:	29 cb                	sub    ebx,ecx
c0003397:	eb d6                	jmp    c000336f <dir_sdi+0x5a>
c0003399:	89 fa                	mov    edx,edi
c000339b:	89 e8                	mov    eax,ebp
c000339d:	e8 d6 ec ff ff       	call   c0002078 <clst2sect>
c00033a2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a5:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	85 d2                	test   edx,edx
c00033ad:	74 80                	je     c000332f <dir_sdi+0x1a>
c00033af:	89 d8                	mov    eax,ebx
c00033b1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033b7:	c1 e8 09             	shr    eax,0x9
c00033ba:	01 d0                	add    eax,edx
c00033bc:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033bf:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00033c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c6:	31 c0                	xor    eax,eax
c00033c8:	eb 05                	jmp    c00033cf <dir_sdi+0xba>
c00033ca:	b8 01 00 00 00       	mov    eax,0x1
c00033cf:	83 c4 1c             	add    esp,0x1c
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	5f                   	pop    edi
c00033d5:	5d                   	pop    ebp
c00033d6:	c3                   	ret    
c00033d7:	b8 02 00 00 00       	mov    eax,0x2
c00033dc:	c3                   	ret    

c00033dd <create_chain>:
c00033dd:	55                   	push   ebp
c00033de:	89 c5                	mov    ebp,eax
c00033e0:	57                   	push   edi
c00033e1:	89 d7                	mov    edi,edx
c00033e3:	56                   	push   esi
c00033e4:	53                   	push   ebx
c00033e5:	83 ec 1c             	sub    esp,0x1c
c00033e8:	85 d2                	test   edx,edx
c00033ea:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ec:	75 0e                	jne    c00033fc <create_chain+0x1f>
c00033ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00033f1:	85 c9                	test   ecx,ecx
c00033f3:	74 32                	je     c0003427 <create_chain+0x4a>
c00033f5:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00033f8:	77 32                	ja     c000342c <create_chain+0x4f>
c00033fa:	eb 2b                	jmp    c0003427 <create_chain+0x4a>
c00033fc:	89 d8                	mov    eax,ebx
c00033fe:	e8 10 fe ff ff       	call   c0003213 <get_fat.isra.2>
c0003403:	83 f8 01             	cmp    eax,0x1
c0003406:	77 0a                	ja     c0003412 <create_chain+0x35>
c0003408:	b8 01 00 00 00       	mov    eax,0x1
c000340d:	e9 f8 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003412:	83 f8 ff             	cmp    eax,0xffffffff
c0003415:	0f 84 ec 00 00 00    	je     c0003507 <create_chain+0x12a>
c000341b:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000341e:	89 f9                	mov    ecx,edi
c0003420:	76 0a                	jbe    c000342c <create_chain+0x4f>
c0003422:	e9 e3 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003427:	b9 01 00 00 00       	mov    ecx,0x1
c000342c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003430:	75 07                	jne    c0003439 <create_chain+0x5c>
c0003432:	31 c0                	xor    eax,eax
c0003434:	e9 d1 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003439:	39 f9                	cmp    ecx,edi
c000343b:	75 49                	jne    c0003486 <create_chain+0xa9>
c000343d:	8d 71 01             	lea    esi,[ecx+0x1]
c0003440:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003443:	77 05                	ja     c000344a <create_chain+0x6d>
c0003445:	be 02 00 00 00       	mov    esi,0x2
c000344a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000344e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003451:	89 f2                	mov    edx,esi
c0003453:	e8 bb fd ff ff       	call   c0003213 <get_fat.isra.2>
c0003458:	83 f8 01             	cmp    eax,0x1
c000345b:	0f 84 a9 00 00 00    	je     c000350a <create_chain+0x12d>
c0003461:	83 f8 ff             	cmp    eax,0xffffffff
c0003464:	0f 84 a0 00 00 00    	je     c000350a <create_chain+0x12d>
c000346a:	85 c0                	test   eax,eax
c000346c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003470:	74 10                	je     c0003482 <create_chain+0xa5>
c0003472:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003475:	83 f8 01             	cmp    eax,0x1
c0003478:	76 0c                	jbe    c0003486 <create_chain+0xa9>
c000347a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000347d:	0f 47 c8             	cmova  ecx,eax
c0003480:	eb 04                	jmp    c0003486 <create_chain+0xa9>
c0003482:	85 f6                	test   esi,esi
c0003484:	75 3b                	jne    c00034c1 <create_chain+0xe4>
c0003486:	89 ce                	mov    esi,ecx
c0003488:	46                   	inc    esi
c0003489:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000348c:	77 0a                	ja     c0003498 <create_chain+0xbb>
c000348e:	83 f9 01             	cmp    ecx,0x1
c0003491:	76 9f                	jbe    c0003432 <create_chain+0x55>
c0003493:	be 02 00 00 00       	mov    esi,0x2
c0003498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000349f:	89 f2                	mov    edx,esi
c00034a1:	e8 6d fd ff ff       	call   c0003213 <get_fat.isra.2>
c00034a6:	85 c0                	test   eax,eax
c00034a8:	74 17                	je     c00034c1 <create_chain+0xe4>
c00034aa:	83 f8 01             	cmp    eax,0x1
c00034ad:	74 5b                	je     c000350a <create_chain+0x12d>
c00034af:	83 f8 ff             	cmp    eax,0xffffffff
c00034b2:	74 56                	je     c000350a <create_chain+0x12d>
c00034b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b8:	39 ce                	cmp    esi,ecx
c00034ba:	75 cc                	jne    c0003488 <create_chain+0xab>
c00034bc:	e9 71 ff ff ff       	jmp    c0003432 <create_chain+0x55>
c00034c1:	83 c9 ff             	or     ecx,0xffffffff
c00034c4:	89 f2                	mov    edx,esi
c00034c6:	89 d8                	mov    eax,ebx
c00034c8:	e8 da f2 ff ff       	call   c00027a7 <put_fat>
c00034cd:	85 c0                	test   eax,eax
c00034cf:	75 0f                	jne    c00034e0 <create_chain+0x103>
c00034d1:	85 ff                	test   edi,edi
c00034d3:	74 0b                	je     c00034e0 <create_chain+0x103>
c00034d5:	89 f1                	mov    ecx,esi
c00034d7:	89 fa                	mov    edx,edi
c00034d9:	89 d8                	mov    eax,ebx
c00034db:	e8 c7 f2 ff ff       	call   c00027a7 <put_fat>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	75 1c                	jne    c0003500 <create_chain+0x123>
c00034e4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00034e7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00034ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00034ed:	8d 57 fe             	lea    edx,[edi-0x2]
c00034f0:	39 d0                	cmp    eax,edx
c00034f2:	77 04                	ja     c00034f8 <create_chain+0x11b>
c00034f4:	48                   	dec    eax
c00034f5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034f8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034fc:	89 f0                	mov    eax,esi
c00034fe:	eb 0a                	jmp    c000350a <create_chain+0x12d>
c0003500:	48                   	dec    eax
c0003501:	0f 85 01 ff ff ff    	jne    c0003408 <create_chain+0x2b>
c0003507:	83 c8 ff             	or     eax,0xffffffff
c000350a:	83 c4 1c             	add    esp,0x1c
c000350d:	5b                   	pop    ebx
c000350e:	5e                   	pop    esi
c000350f:	5f                   	pop    edi
c0003510:	5d                   	pop    ebp
c0003511:	c3                   	ret    

c0003512 <remove_chain>:
c0003512:	55                   	push   ebp
c0003513:	57                   	push   edi
c0003514:	56                   	push   esi
c0003515:	89 d6                	mov    esi,edx
c0003517:	53                   	push   ebx
c0003518:	83 ec 0c             	sub    esp,0xc
c000351b:	83 fa 01             	cmp    edx,0x1
c000351e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003520:	76 65                	jbe    c0003587 <remove_chain+0x75>
c0003522:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003525:	76 60                	jbe    c0003587 <remove_chain+0x75>
c0003527:	85 c9                	test   ecx,ecx
c0003529:	89 c5                	mov    ebp,eax
c000352b:	89 ca                	mov    edx,ecx
c000352d:	74 0e                	je     c000353d <remove_chain+0x2b>
c000352f:	83 c9 ff             	or     ecx,0xffffffff
c0003532:	89 d8                	mov    eax,ebx
c0003534:	e8 6e f2 ff ff       	call   c00027a7 <put_fat>
c0003539:	85 c0                	test   eax,eax
c000353b:	75 56                	jne    c0003593 <remove_chain+0x81>
c000353d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003540:	89 f2                	mov    edx,esi
c0003542:	e8 cc fc ff ff       	call   c0003213 <get_fat.isra.2>
c0003547:	85 c0                	test   eax,eax
c0003549:	89 c7                	mov    edi,eax
c000354b:	75 04                	jne    c0003551 <remove_chain+0x3f>
c000354d:	31 c0                	xor    eax,eax
c000354f:	eb 42                	jmp    c0003593 <remove_chain+0x81>
c0003551:	83 f8 01             	cmp    eax,0x1
c0003554:	74 31                	je     c0003587 <remove_chain+0x75>
c0003556:	83 f8 ff             	cmp    eax,0xffffffff
c0003559:	74 33                	je     c000358e <remove_chain+0x7c>
c000355b:	31 c9                	xor    ecx,ecx
c000355d:	89 f2                	mov    edx,esi
c000355f:	89 d8                	mov    eax,ebx
c0003561:	e8 41 f2 ff ff       	call   c00027a7 <put_fat>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 29                	jne    c0003593 <remove_chain+0x81>
c000356a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003570:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003573:	39 c8                	cmp    eax,ecx
c0003575:	73 08                	jae    c000357f <remove_chain+0x6d>
c0003577:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000357b:	40                   	inc    eax
c000357c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000357f:	39 fa                	cmp    edx,edi
c0003581:	89 fe                	mov    esi,edi
c0003583:	77 b8                	ja     c000353d <remove_chain+0x2b>
c0003585:	eb c6                	jmp    c000354d <remove_chain+0x3b>
c0003587:	b8 02 00 00 00       	mov    eax,0x2
c000358c:	eb 05                	jmp    c0003593 <remove_chain+0x81>
c000358e:	b8 01 00 00 00       	mov    eax,0x1
c0003593:	83 c4 0c             	add    esp,0xc
c0003596:	5b                   	pop    ebx
c0003597:	5e                   	pop    esi
c0003598:	5f                   	pop    edi
c0003599:	5d                   	pop    ebp
c000359a:	c3                   	ret    

c000359b <dir_next>:
c000359b:	55                   	push   ebp
c000359c:	57                   	push   edi
c000359d:	56                   	push   esi
c000359e:	53                   	push   ebx
c000359f:	83 ec 1c             	sub    esp,0x1c
c00035a2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035a5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035a7:	83 c7 20             	add    edi,0x20
c00035aa:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035b0:	76 07                	jbe    c00035b9 <dir_next+0x1e>
c00035b2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035b9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035bc:	b9 04 00 00 00       	mov    ecx,0x4
c00035c1:	85 f6                	test   esi,esi
c00035c3:	0f 84 cd 00 00 00    	je     c0003696 <dir_next+0xfb>
c00035c9:	89 c3                	mov    ebx,eax
c00035cb:	89 f8                	mov    eax,edi
c00035cd:	25 ff 01 00 00       	and    eax,0x1ff
c00035d2:	89 d1                	mov    ecx,edx
c00035d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035d8:	0f 85 a8 00 00 00    	jne    c0003686 <dir_next+0xeb>
c00035de:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035e1:	46                   	inc    esi
c00035e2:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035e5:	85 d2                	test   edx,edx
c00035e7:	75 22                	jne    c000360b <dir_next+0x70>
c00035e9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00035ed:	89 fa                	mov    edx,edi
c00035ef:	c1 ea 05             	shr    edx,0x5
c00035f2:	39 c2                	cmp    edx,eax
c00035f4:	0f 82 8c 00 00 00    	jb     c0003686 <dir_next+0xeb>
c00035fa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003601:	b9 04 00 00 00       	mov    ecx,0x4
c0003606:	e9 8b 00 00 00       	jmp    c0003696 <dir_next+0xfb>
c000360b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000360f:	89 fe                	mov    esi,edi
c0003611:	c1 ee 09             	shr    esi,0x9
c0003614:	48                   	dec    eax
c0003615:	85 f0                	test   eax,esi
c0003617:	75 6d                	jne    c0003686 <dir_next+0xeb>
c0003619:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 ef fb ff ff       	call   c0003213 <get_fat.isra.2>
c0003624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003628:	83 f8 01             	cmp    eax,0x1
c000362b:	89 c6                	mov    esi,eax
c000362d:	77 07                	ja     c0003636 <dir_next+0x9b>
c000362f:	b9 02 00 00 00       	mov    ecx,0x2
c0003634:	eb 60                	jmp    c0003696 <dir_next+0xfb>
c0003636:	83 f8 ff             	cmp    eax,0xffffffff
c0003639:	75 07                	jne    c0003642 <dir_next+0xa7>
c000363b:	b9 01 00 00 00       	mov    ecx,0x1
c0003640:	eb 54                	jmp    c0003696 <dir_next+0xfb>
c0003642:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003645:	77 30                	ja     c0003677 <dir_next+0xdc>
c0003647:	85 c9                	test   ecx,ecx
c0003649:	74 af                	je     c00035fa <dir_next+0x5f>
c000364b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000364e:	89 d8                	mov    eax,ebx
c0003650:	e8 88 fd ff ff       	call   c00033dd <create_chain>
c0003655:	b9 07 00 00 00       	mov    ecx,0x7
c000365a:	85 c0                	test   eax,eax
c000365c:	89 c6                	mov    esi,eax
c000365e:	74 36                	je     c0003696 <dir_next+0xfb>
c0003660:	83 f8 01             	cmp    eax,0x1
c0003663:	74 ca                	je     c000362f <dir_next+0x94>
c0003665:	83 f8 ff             	cmp    eax,0xffffffff
c0003668:	74 d1                	je     c000363b <dir_next+0xa0>
c000366a:	89 c2                	mov    edx,eax
c000366c:	89 e8                	mov    eax,ebp
c000366e:	e8 88 f2 ff ff       	call   c00028fb <dir_clear>
c0003673:	85 c0                	test   eax,eax
c0003675:	75 c4                	jne    c000363b <dir_next+0xa0>
c0003677:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000367a:	89 f2                	mov    edx,esi
c000367c:	89 e8                	mov    eax,ebp
c000367e:	e8 f5 e9 ff ff       	call   c0002078 <clst2sect>
c0003683:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003686:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368d:	31 c9                	xor    ecx,ecx
c000368f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003693:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003696:	83 c4 1c             	add    esp,0x1c
c0003699:	89 c8                	mov    eax,ecx
c000369b:	5b                   	pop    ebx
c000369c:	5e                   	pop    esi
c000369d:	5f                   	pop    edi
c000369e:	5d                   	pop    ebp
c000369f:	c3                   	ret    

c00036a0 <dir_alloc>:
c00036a0:	55                   	push   ebp
c00036a1:	89 c5                	mov    ebp,eax
c00036a3:	57                   	push   edi
c00036a4:	89 d7                	mov    edi,edx
c00036a6:	56                   	push   esi
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	53                   	push   ebx
c00036aa:	83 ec 0c             	sub    esp,0xc
c00036ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00036af:	e8 61 fc ff ff       	call   c0003315 <dir_sdi>
c00036b4:	85 c0                	test   eax,eax
c00036b6:	75 37                	jne    c00036ef <dir_alloc+0x4f>
c00036b8:	31 db                	xor    ebx,ebx
c00036ba:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036bd:	89 f0                	mov    eax,esi
c00036bf:	e8 89 ec ff ff       	call   c000234d <move_window>
c00036c4:	85 c0                	test   eax,eax
c00036c6:	75 27                	jne    c00036ef <dir_alloc+0x4f>
c00036c8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036cb:	8a 12                	mov    dl,BYTE PTR [edx]
c00036cd:	80 fa e5             	cmp    dl,0xe5
c00036d0:	74 04                	je     c00036d6 <dir_alloc+0x36>
c00036d2:	84 d2                	test   dl,dl
c00036d4:	75 07                	jne    c00036dd <dir_alloc+0x3d>
c00036d6:	43                   	inc    ebx
c00036d7:	39 fb                	cmp    ebx,edi
c00036d9:	75 04                	jne    c00036df <dir_alloc+0x3f>
c00036db:	eb 1c                	jmp    c00036f9 <dir_alloc+0x59>
c00036dd:	31 db                	xor    ebx,ebx
c00036df:	ba 01 00 00 00       	mov    edx,0x1
c00036e4:	89 e8                	mov    eax,ebp
c00036e6:	e8 b0 fe ff ff       	call   c000359b <dir_next>
c00036eb:	85 c0                	test   eax,eax
c00036ed:	74 cb                	je     c00036ba <dir_alloc+0x1a>
c00036ef:	83 f8 04             	cmp    eax,0x4
c00036f2:	75 05                	jne    c00036f9 <dir_alloc+0x59>
c00036f4:	b8 07 00 00 00       	mov    eax,0x7
c00036f9:	83 c4 0c             	add    esp,0xc
c00036fc:	5b                   	pop    ebx
c00036fd:	5e                   	pop    esi
c00036fe:	5f                   	pop    edi
c00036ff:	5d                   	pop    ebp
c0003700:	c3                   	ret    

c0003701 <dir_read>:
c0003701:	55                   	push   ebp
c0003702:	57                   	push   edi
c0003703:	56                   	push   esi
c0003704:	be 04 00 00 00       	mov    esi,0x4
c0003709:	53                   	push   ebx
c000370a:	89 c3                	mov    ebx,eax
c000370c:	83 ec 1c             	sub    esp,0x1c
c000370f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003713:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003715:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c000371a:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000371f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003722:	85 d2                	test   edx,edx
c0003724:	0f 84 d8 00 00 00    	je     c0003802 <dir_read+0x101>
c000372a:	89 e8                	mov    eax,ebp
c000372c:	e8 1c ec ff ff       	call   c000234d <move_window>
c0003731:	85 c0                	test   eax,eax
c0003733:	89 c6                	mov    esi,eax
c0003735:	0f 85 d2 00 00 00    	jne    c000380d <dir_read+0x10c>
c000373b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c000373e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003740:	84 c9                	test   cl,cl
c0003742:	0f 84 c0 00 00 00    	je     c0003808 <dir_read+0x107>
c0003748:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c000374b:	24 3f                	and    al,0x3f
c000374d:	80 f9 e5             	cmp    cl,0xe5
c0003750:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003753:	0f 84 8f 00 00 00    	je     c00037e8 <dir_read+0xe7>
c0003759:	80 f9 2e             	cmp    cl,0x2e
c000375c:	0f 84 86 00 00 00    	je     c00037e8 <dir_read+0xe7>
c0003762:	0f b6 d0             	movzx  edx,al
c0003765:	83 e2 df             	and    edx,0xffffffdf
c0003768:	83 fa 08             	cmp    edx,0x8
c000376b:	0f 94 c2             	sete   dl
c000376e:	0f b6 d2             	movzx  edx,dl
c0003771:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003775:	75 71                	jne    c00037e8 <dir_read+0xe7>
c0003777:	3c 0f                	cmp    al,0xf
c0003779:	75 4c                	jne    c00037c7 <dir_read+0xc6>
c000377b:	88 c8                	mov    al,cl
c000377d:	24 40                	and    al,0x40
c000377f:	74 12                	je     c0003793 <dir_read+0x92>
c0003781:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003784:	80 e1 bf             	and    cl,0xbf
c0003787:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000378b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000378e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003791:	eb 06                	jmp    c0003799 <dir_read+0x98>
c0003793:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003797:	75 4f                	jne    c00037e8 <dir_read+0xe7>
c0003799:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000379e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00037a2:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00037a5:	75 46                	jne    c00037ed <dir_read+0xec>
c00037a7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00037ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037ae:	89 fa                	mov    edx,edi
c00037b0:	e8 e0 e8 ff ff       	call   c0002095 <pick_lfn>
c00037b5:	85 c0                	test   eax,eax
c00037b7:	74 34                	je     c00037ed <dir_read+0xec>
c00037b9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00037bd:	88 c8                	mov    al,cl
c00037bf:	fe c8                	dec    al
c00037c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00037c5:	eb 26                	jmp    c00037ed <dir_read+0xec>
c00037c7:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00037cc:	75 11                	jne    c00037df <dir_read+0xde>
c00037ce:	89 f8                	mov    eax,edi
c00037d0:	e8 76 ea ff ff       	call   c000224b <sum_sfn>
c00037d5:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00037d9:	75 04                	jne    c00037df <dir_read+0xde>
c00037db:	31 f6                	xor    esi,esi
c00037dd:	eb 35                	jmp    c0003814 <dir_read+0x113>
c00037df:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037e6:	eb 2c                	jmp    c0003814 <dir_read+0x113>
c00037e8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037ed:	31 d2                	xor    edx,edx
c00037ef:	89 d8                	mov    eax,ebx
c00037f1:	e8 a5 fd ff ff       	call   c000359b <dir_next>
c00037f6:	85 c0                	test   eax,eax
c00037f8:	89 c6                	mov    esi,eax
c00037fa:	0f 84 1f ff ff ff    	je     c000371f <dir_read+0x1e>
c0003800:	eb 0b                	jmp    c000380d <dir_read+0x10c>
c0003802:	85 f6                	test   esi,esi
c0003804:	74 d5                	je     c00037db <dir_read+0xda>
c0003806:	eb 05                	jmp    c000380d <dir_read+0x10c>
c0003808:	be 04 00 00 00       	mov    esi,0x4
c000380d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003814:	83 c4 1c             	add    esp,0x1c
c0003817:	89 f0                	mov    eax,esi
c0003819:	5b                   	pop    ebx
c000381a:	5e                   	pop    esi
c000381b:	5f                   	pop    edi
c000381c:	5d                   	pop    ebp
c000381d:	c3                   	ret    

c000381e <dir_remove>:
c000381e:	57                   	push   edi
c000381f:	56                   	push   esi
c0003820:	53                   	push   ebx
c0003821:	89 c3                	mov    ebx,eax
c0003823:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003826:	8b 30                	mov    esi,DWORD PTR [eax]
c0003828:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000382b:	83 fa ff             	cmp    edx,0xffffffff
c000382e:	74 09                	je     c0003839 <dir_remove+0x1b>
c0003830:	e8 e0 fa ff ff       	call   c0003315 <dir_sdi>
c0003835:	85 c0                	test   eax,eax
c0003837:	75 34                	jne    c000386d <dir_remove+0x4f>
c0003839:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000383c:	89 f0                	mov    eax,esi
c000383e:	e8 0a eb ff ff       	call   c000234d <move_window>
c0003843:	85 c0                	test   eax,eax
c0003845:	75 1c                	jne    c0003863 <dir_remove+0x45>
c0003847:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000384a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000384d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003851:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003854:	73 17                	jae    c000386d <dir_remove+0x4f>
c0003856:	31 d2                	xor    edx,edx
c0003858:	89 d8                	mov    eax,ebx
c000385a:	e8 3c fd ff ff       	call   c000359b <dir_next>
c000385f:	85 c0                	test   eax,eax
c0003861:	74 d6                	je     c0003839 <dir_remove+0x1b>
c0003863:	83 f8 04             	cmp    eax,0x4
c0003866:	75 05                	jne    c000386d <dir_remove+0x4f>
c0003868:	b8 02 00 00 00       	mov    eax,0x2
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	c3                   	ret    

c0003871 <dir_find>:
c0003871:	55                   	push   ebp
c0003872:	31 d2                	xor    edx,edx
c0003874:	57                   	push   edi
c0003875:	56                   	push   esi
c0003876:	53                   	push   ebx
c0003877:	89 c3                	mov    ebx,eax
c0003879:	83 ec 1c             	sub    esp,0x1c
c000387c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000387e:	e8 92 fa ff ff       	call   c0003315 <dir_sdi>
c0003883:	85 c0                	test   eax,eax
c0003885:	89 c6                	mov    esi,eax
c0003887:	0f 85 03 01 00 00    	jne    c0003990 <dir_find+0x11f>
c000388d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003894:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003899:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 e8                	mov    eax,ebp
c00038a3:	e8 a5 ea ff ff       	call   c000234d <move_window>
c00038a8:	85 c0                	test   eax,eax
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	0f 85 de 00 00 00    	jne    c0003990 <dir_find+0x11f>
c00038b2:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00038b5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00038b7:	84 c9                	test   cl,cl
c00038b9:	0f 84 cc 00 00 00    	je     c000398b <dir_find+0x11a>
c00038bf:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00038c2:	88 c2                	mov    dl,al
c00038c4:	80 e2 3f             	and    dl,0x3f
c00038c7:	80 f9 e5             	cmp    cl,0xe5
c00038ca:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c00038cd:	0f 84 97 00 00 00    	je     c000396a <dir_find+0xf9>
c00038d3:	24 08                	and    al,0x8
c00038d5:	74 0b                	je     c00038e2 <dir_find+0x71>
c00038d7:	80 fa 0f             	cmp    dl,0xf
c00038da:	0f 85 8a 00 00 00    	jne    c000396a <dir_find+0xf9>
c00038e0:	eb 05                	jmp    c00038e7 <dir_find+0x76>
c00038e2:	80 fa 0f             	cmp    dl,0xf
c00038e5:	75 56                	jne    c000393d <dir_find+0xcc>
c00038e7:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00038eb:	0f 85 85 00 00 00    	jne    c0003976 <dir_find+0x105>
c00038f1:	88 c8                	mov    al,cl
c00038f3:	24 40                	and    al,0x40
c00038f5:	74 12                	je     c0003909 <dir_find+0x98>
c00038f7:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c00038fa:	80 e1 bf             	and    cl,0xbf
c00038fd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003901:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003904:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003907:	eb 06                	jmp    c000390f <dir_find+0x9e>
c0003909:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000390d:	75 62                	jne    c0003971 <dir_find+0x100>
c000390f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003914:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003918:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c000391b:	75 59                	jne    c0003976 <dir_find+0x105>
c000391d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0003921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003924:	89 fa                	mov    edx,edi
c0003926:	e8 9c f3 ff ff       	call   c0002cc7 <cmp_lfn>
c000392b:	85 c0                	test   eax,eax
c000392d:	74 47                	je     c0003976 <dir_find+0x105>
c000392f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003933:	88 c8                	mov    al,cl
c0003935:	fe c8                	dec    al
c0003937:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c000393b:	eb 39                	jmp    c0003976 <dir_find+0x105>
c000393d:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c0003942:	75 0d                	jne    c0003951 <dir_find+0xe0>
c0003944:	89 f8                	mov    eax,edi
c0003946:	e8 00 e9 ff ff       	call   c000224b <sum_sfn>
c000394b:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c000394f:	74 3f                	je     c0003990 <dir_find+0x11f>
c0003951:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003955:	75 13                	jne    c000396a <dir_find+0xf9>
c0003957:	8d 53 20             	lea    edx,[ebx+0x20]
c000395a:	b9 0b 00 00 00       	mov    ecx,0xb
c000395f:	89 f8                	mov    eax,edi
c0003961:	e8 1e e5 ff ff       	call   c0001e84 <mem_cmp>
c0003966:	85 c0                	test   eax,eax
c0003968:	74 26                	je     c0003990 <dir_find+0x11f>
c000396a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003971:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003976:	31 d2                	xor    edx,edx
c0003978:	89 d8                	mov    eax,ebx
c000397a:	e8 1c fc ff ff       	call   c000359b <dir_next>
c000397f:	85 c0                	test   eax,eax
c0003981:	89 c6                	mov    esi,eax
c0003983:	0f 84 15 ff ff ff    	je     c000389e <dir_find+0x2d>
c0003989:	eb 05                	jmp    c0003990 <dir_find+0x11f>
c000398b:	be 04 00 00 00       	mov    esi,0x4
c0003990:	83 c4 1c             	add    esp,0x1c
c0003993:	89 f0                	mov    eax,esi
c0003995:	5b                   	pop    ebx
c0003996:	5e                   	pop    esi
c0003997:	5f                   	pop    edi
c0003998:	5d                   	pop    ebp
c0003999:	c3                   	ret    

c000399a <follow_path>:
c000399a:	56                   	push   esi
c000399b:	53                   	push   ebx
c000399c:	89 c3                	mov    ebx,eax
c000399e:	83 ec 14             	sub    esp,0x14
c00039a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039a5:	8b 30                	mov    esi,DWORD PTR [eax]
c00039a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ab:	8a 10                	mov    dl,BYTE PTR [eax]
c00039ad:	80 fa 2f             	cmp    dl,0x2f
c00039b0:	75 07                	jne    c00039b9 <follow_path+0x1f>
c00039b2:	40                   	inc    eax
c00039b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039b7:	eb ee                	jmp    c00039a7 <follow_path+0xd>
c00039b9:	80 fa 5c             	cmp    dl,0x5c
c00039bc:	74 f4                	je     c00039b2 <follow_path+0x18>
c00039be:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00039c5:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00039c8:	77 3e                	ja     c0003a08 <follow_path+0x6e>
c00039ca:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00039ce:	31 d2                	xor    edx,edx
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	e8 3e f9 ff ff       	call   c0003315 <dir_sdi>
c00039d7:	eb 57                	jmp    c0003a30 <follow_path+0x96>
c00039d9:	89 d8                	mov    eax,ebx
c00039db:	e8 91 fe ff ff       	call   c0003871 <dir_find>
c00039e0:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00039e3:	85 c0                	test   eax,eax
c00039e5:	75 32                	jne    c0003a19 <follow_path+0x7f>
c00039e7:	80 e2 04             	and    dl,0x4
c00039ea:	75 44                	jne    c0003a30 <follow_path+0x96>
c00039ec:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00039f0:	74 39                	je     c0003a2b <follow_path+0x91>
c00039f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039f5:	25 ff 01 00 00       	and    eax,0x1ff
c00039fa:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00039fe:	8a 06                	mov    al,BYTE PTR [esi]
c0003a00:	e8 be f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a05:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a08:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a0c:	89 d8                	mov    eax,ebx
c0003a0e:	e8 e4 ef ff ff       	call   c00029f7 <create_name>
c0003a13:	85 c0                	test   eax,eax
c0003a15:	74 c2                	je     c00039d9 <follow_path+0x3f>
c0003a17:	eb 17                	jmp    c0003a30 <follow_path+0x96>
c0003a19:	83 f8 04             	cmp    eax,0x4
c0003a1c:	75 12                	jne    c0003a30 <follow_path+0x96>
c0003a1e:	80 e2 04             	and    dl,0x4
c0003a21:	ba 05 00 00 00       	mov    edx,0x5
c0003a26:	0f 44 c2             	cmove  eax,edx
c0003a29:	eb 05                	jmp    c0003a30 <follow_path+0x96>
c0003a2b:	b8 05 00 00 00       	mov    eax,0x5
c0003a30:	83 c4 14             	add    esp,0x14
c0003a33:	5b                   	pop    ebx
c0003a34:	5e                   	pop    esi
c0003a35:	c3                   	ret    

c0003a36 <dir_register>:
c0003a36:	55                   	push   ebp
c0003a37:	57                   	push   edi
c0003a38:	56                   	push   esi
c0003a39:	be 06 00 00 00       	mov    esi,0x6
c0003a3e:	53                   	push   ebx
c0003a3f:	83 ec 2c             	sub    esp,0x2c
c0003a42:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003a46:	0f 85 65 01 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003a4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a56:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a5d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a62:	74 06                	je     c0003a6a <dir_register+0x34>
c0003a64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003a68:	eb ef                	jmp    c0003a59 <dir_register+0x23>
c0003a6a:	89 c3                	mov    ebx,eax
c0003a6c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003a71:	8d 40 20             	lea    eax,[eax+0x20]
c0003a74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003a78:	89 c2                	mov    edx,eax
c0003a7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003a7e:	e8 e2 e3 ff ff       	call   c0001e65 <mem_cpy>
c0003a83:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003a88:	74 48                	je     c0003ad2 <dir_register+0x9c>
c0003a8a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003a8e:	bd 01 00 00 00       	mov    ebp,0x1
c0003a93:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003a96:	55                   	push   ebp
c0003a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003a9f:	e8 ec e6 ff ff       	call   c0002190 <gen_numname>
c0003aa4:	58                   	pop    eax
c0003aa5:	89 d8                	mov    eax,ebx
c0003aa7:	e8 c5 fd ff ff       	call   c0003871 <dir_find>
c0003aac:	85 c0                	test   eax,eax
c0003aae:	89 c6                	mov    esi,eax
c0003ab0:	75 10                	jne    c0003ac2 <dir_register+0x8c>
c0003ab2:	45                   	inc    ebp
c0003ab3:	83 fd 64             	cmp    ebp,0x64
c0003ab6:	75 db                	jne    c0003a93 <dir_register+0x5d>
c0003ab8:	be 07 00 00 00       	mov    esi,0x7
c0003abd:	e9 ef 00 00 00       	jmp    c0003bb1 <dir_register+0x17b>
c0003ac2:	83 f8 04             	cmp    eax,0x4
c0003ac5:	0f 85 e6 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003acb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003acf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003ad2:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003ad7:	bd 01 00 00 00       	mov    ebp,0x1
c0003adc:	74 13                	je     c0003af1 <dir_register+0xbb>
c0003ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae2:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ae7:	31 d2                	xor    edx,edx
c0003ae9:	83 c0 0c             	add    eax,0xc
c0003aec:	f7 f1                	div    ecx
c0003aee:	8d 68 01             	lea    ebp,[eax+0x1]
c0003af1:	89 ea                	mov    edx,ebp
c0003af3:	89 d8                	mov    eax,ebx
c0003af5:	e8 a6 fb ff ff       	call   c00036a0 <dir_alloc>
c0003afa:	85 c0                	test   eax,eax
c0003afc:	89 c6                	mov    esi,eax
c0003afe:	0f 85 ad 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003b04:	4d                   	dec    ebp
c0003b05:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b09:	74 67                	je     c0003b72 <dir_register+0x13c>
c0003b0b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b0e:	89 e8                	mov    eax,ebp
c0003b10:	c1 e0 05             	shl    eax,0x5
c0003b13:	29 c2                	sub    edx,eax
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 f9 f7 ff ff       	call   c0003315 <dir_sdi>
c0003b1c:	85 c0                	test   eax,eax
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	0f 85 8b 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b2a:	e8 1c e7 ff ff       	call   c000224b <sum_sfn>
c0003b2f:	0f b6 e8             	movzx  ebp,al
c0003b32:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	e8 11 e8 ff ff       	call   c000234d <move_window>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 6f                	jne    c0003bb1 <dir_register+0x17b>
c0003b42:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b47:	83 ec 0c             	sub    esp,0xc
c0003b4a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b4d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b50:	55                   	push   ebp
c0003b51:	e8 c2 e5 ff ff       	call   c0002118 <put_lfn>
c0003b56:	31 d2                	xor    edx,edx
c0003b58:	89 d8                	mov    eax,ebx
c0003b5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b5e:	e8 38 fa ff ff       	call   c000359b <dir_next>
c0003b63:	83 c4 10             	add    esp,0x10
c0003b66:	85 c0                	test   eax,eax
c0003b68:	89 c6                	mov    esi,eax
c0003b6a:	75 45                	jne    c0003bb1 <dir_register+0x17b>
c0003b6c:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003b70:	75 c0                	jne    c0003b32 <dir_register+0xfc>
c0003b72:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b75:	89 f8                	mov    eax,edi
c0003b77:	e8 d1 e7 ff ff       	call   c000234d <move_window>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	75 2f                	jne    c0003bb1 <dir_register+0x17b>
c0003b82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b85:	b9 20 00 00 00       	mov    ecx,0x20
c0003b8a:	31 d2                	xor    edx,edx
c0003b8c:	e8 e9 e2 ff ff       	call   c0001e7a <mem_set>
c0003b91:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b94:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003b9d:	e8 c3 e2 ff ff       	call   c0001e65 <mem_cpy>
c0003ba2:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ba5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ba8:	24 18                	and    al,0x18
c0003baa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bb1:	83 c4 2c             	add    esp,0x2c
c0003bb4:	89 f0                	mov    eax,esi
c0003bb6:	5b                   	pop    ebx
c0003bb7:	5e                   	pop    esi
c0003bb8:	5f                   	pop    edi
c0003bb9:	5d                   	pop    ebp
c0003bba:	c3                   	ret    

c0003bbb <f_mount>:
c0003bbb:	53                   	push   ebx
c0003bbc:	83 ec 18             	sub    esp,0x18
c0003bbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003bc3:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003bcf:	e8 89 e6 ff ff       	call   c000225d <get_ldnumber>
c0003bd4:	89 c2                	mov    edx,eax
c0003bd6:	b8 0b 00 00 00       	mov    eax,0xb
c0003bdb:	85 d2                	test   edx,edx
c0003bdd:	78 39                	js     c0003c18 <f_mount+0x5d>
c0003bdf:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003be6:	85 c0                	test   eax,eax
c0003be8:	74 03                	je     c0003bed <f_mount+0x32>
c0003bea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bf1:	85 c0                	test   eax,eax
c0003bf3:	74 03                	je     c0003bf8 <f_mount+0x3d>
c0003bf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bfc:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c03:	31 c0                	xor    eax,eax
c0003c05:	84 db                	test   bl,bl
c0003c07:	74 0f                	je     c0003c18 <f_mount+0x5d>
c0003c09:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c0d:	31 c9                	xor    ecx,ecx
c0003c0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c13:	e8 92 e8 ff ff       	call   c00024aa <mount_volume>
c0003c18:	83 c4 18             	add    esp,0x18
c0003c1b:	5b                   	pop    ebx
c0003c1c:	c3                   	ret    

c0003c1d <f_open>:
c0003c1d:	55                   	push   ebp
c0003c1e:	b8 09 00 00 00       	mov    eax,0x9
c0003c23:	57                   	push   edi
c0003c24:	56                   	push   esi
c0003c25:	53                   	push   ebx
c0003c26:	83 ec 5c             	sub    esp,0x5c
c0003c29:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003c2d:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003c31:	85 f6                	test   esi,esi
c0003c33:	0f 84 a6 02 00 00    	je     c0003edf <f_open+0x2c2>
c0003c39:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c3d:	88 d8                	mov    al,bl
c0003c3f:	24 3f                	and    al,0x3f
c0003c41:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003c45:	0f b6 c8             	movzx  ecx,al
c0003c48:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c4c:	e8 59 e8 ff ff       	call   c00024aa <mount_volume>
c0003c51:	85 c0                	test   eax,eax
c0003c53:	0f 85 80 02 00 00    	jne    c0003ed9 <f_open+0x2bc>
c0003c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c5d:	83 ec 0c             	sub    esp,0xc
c0003c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c64:	68 00 02 00 00       	push   0x200
c0003c69:	e8 02 1f 00 00       	call   c0005b70 <ff_memalloc>
c0003c6e:	83 c4 10             	add    esp,0x10
c0003c71:	89 c7                	mov    edi,eax
c0003c73:	b8 11 00 00 00       	mov    eax,0x11
c0003c78:	85 ff                	test   edi,edi
c0003c7a:	0f 84 5f 02 00 00    	je     c0003edf <f_open+0x2c2>
c0003c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c84:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003c88:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003c8b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c8f:	e8 06 fd ff ff       	call   c000399a <follow_path>
c0003c94:	85 c0                	test   eax,eax
c0003c96:	75 0d                	jne    c0003ca5 <f_open+0x88>
c0003c98:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003c9d:	ba 06 00 00 00       	mov    edx,0x6
c0003ca2:	0f 48 c2             	cmovs  eax,edx
c0003ca5:	f6 c3 1c             	test   bl,0x1c
c0003ca8:	0f 84 d2 00 00 00    	je     c0003d80 <f_open+0x163>
c0003cae:	85 c0                	test   eax,eax
c0003cb0:	74 21                	je     c0003cd3 <f_open+0xb6>
c0003cb2:	83 f8 04             	cmp    eax,0x4
c0003cb5:	0f 85 06 02 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003cbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cbf:	e8 72 fd ff ff       	call   c0003a36 <dir_register>
c0003cc4:	85 c0                	test   eax,eax
c0003cc6:	0f 85 f5 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003ccc:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003cd1:	eb 29                	jmp    c0003cfc <f_open+0xdf>
c0003cd3:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003cd8:	b8 07 00 00 00       	mov    eax,0x7
c0003cdd:	0f 85 de 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003ce3:	88 da                	mov    dl,bl
c0003ce5:	b8 08 00 00 00       	mov    eax,0x8
c0003cea:	80 e2 04             	and    dl,0x4
c0003ced:	0f 85 ce 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003cf3:	80 e3 08             	and    bl,0x8
c0003cf6:	0f 84 b3 00 00 00    	je     c0003daf <f_open+0x192>
c0003cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d00:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d04:	8a 00                	mov    al,BYTE PTR [eax]
c0003d06:	89 ea                	mov    edx,ebp
c0003d08:	e8 b6 f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d12:	89 c3                	mov    ebx,eax
c0003d14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d17:	e8 46 e1 ff ff       	call   c0001e62 <st_dword>
c0003d1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d20:	31 c9                	xor    ecx,ecx
c0003d22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d2e:	e8 b8 f4 ff ff       	call   c00031eb <st_clust.isra.1>
c0003d33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d37:	31 d2                	xor    edx,edx
c0003d39:	83 c0 1c             	add    eax,0x1c
c0003d3c:	e8 21 e1 ff ff       	call   c0001e62 <st_dword>
c0003d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d45:	85 db                	test   ebx,ebx
c0003d47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d4b:	74 62                	je     c0003daf <f_open+0x192>
c0003d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d51:	31 c9                	xor    ecx,ecx
c0003d53:	89 da                	mov    edx,ebx
c0003d55:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003d58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d5c:	e8 b1 f7 ff ff       	call   c0003512 <remove_chain>
c0003d61:	85 c0                	test   eax,eax
c0003d63:	0f 85 58 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d6d:	89 ea                	mov    edx,ebp
c0003d6f:	4b                   	dec    ebx
c0003d70:	e8 d8 e5 ff ff       	call   c000234d <move_window>
c0003d75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003d79:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003d7c:	85 c0                	test   eax,eax
c0003d7e:	eb 29                	jmp    c0003da9 <f_open+0x18c>
c0003d80:	85 c0                	test   eax,eax
c0003d82:	0f 85 39 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d88:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d8c:	b8 04 00 00 00       	mov    eax,0x4
c0003d91:	88 d1                	mov    cl,dl
c0003d93:	80 e1 10             	and    cl,0x10
c0003d96:	0f 85 25 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d9c:	80 e3 02             	and    bl,0x2
c0003d9f:	74 0e                	je     c0003daf <f_open+0x192>
c0003da1:	80 e2 01             	and    dl,0x1
c0003da4:	b8 07 00 00 00       	mov    eax,0x7
c0003da9:	0f 85 12 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003daf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003db3:	24 08                	and    al,0x8
c0003db5:	74 05                	je     c0003dbc <f_open+0x19f>
c0003db7:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003dbc:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003dc0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003dc4:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003dc7:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003dca:	89 da                	mov    edx,ebx
c0003dcc:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003dcf:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003dd2:	e8 ec f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003dd7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003dda:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003ddd:	e8 64 e0 ff ff       	call   c0001e46 <ld_dword>
c0003de2:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003de5:	31 d2                	xor    edx,edx
c0003de7:	89 2e                	mov    DWORD PTR [esi],ebp
c0003de9:	b9 00 02 00 00       	mov    ecx,0x200
c0003dee:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003df1:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003df5:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003df9:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e00:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e07:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e0f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003e12:	89 d8                	mov    eax,ebx
c0003e14:	e8 61 e0 ff ff       	call   c0001e7a <mem_set>
c0003e19:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e1d:	24 20                	and    al,0x20
c0003e1f:	75 07                	jne    c0003e28 <f_open+0x20b>
c0003e21:	31 c0                	xor    eax,eax
c0003e23:	e9 99 00 00 00       	jmp    c0003ec1 <f_open+0x2a4>
c0003e28:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003e2b:	85 ed                	test   ebp,ebp
c0003e2d:	74 f2                	je     c0003e21 <f_open+0x204>
c0003e2f:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003e32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e36:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003e39:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003e3d:	31 c0                	xor    eax,eax
c0003e3f:	c1 e1 09             	shl    ecx,0x9
c0003e42:	85 c0                	test   eax,eax
c0003e44:	75 2b                	jne    c0003e71 <f_open+0x254>
c0003e46:	39 cd                	cmp    ebp,ecx
c0003e48:	76 27                	jbe    c0003e71 <f_open+0x254>
c0003e4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e4e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003e50:	e8 be f3 ff ff       	call   c0003213 <get_fat.isra.2>
c0003e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e59:	89 c2                	mov    edx,eax
c0003e5b:	b8 02 00 00 00       	mov    eax,0x2
c0003e60:	83 fa 01             	cmp    edx,0x1
c0003e63:	76 08                	jbe    c0003e6d <f_open+0x250>
c0003e65:	31 c0                	xor    eax,eax
c0003e67:	83 fa ff             	cmp    edx,0xffffffff
c0003e6a:	0f 94 c0             	sete   al
c0003e6d:	29 cd                	sub    ebp,ecx
c0003e6f:	eb d1                	jmp    c0003e42 <f_open+0x225>
c0003e71:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003e74:	85 c0                	test   eax,eax
c0003e76:	75 49                	jne    c0003ec1 <f_open+0x2a4>
c0003e78:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003e7e:	74 a1                	je     c0003e21 <f_open+0x204>
c0003e80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e88:	89 c8                	mov    eax,ecx
c0003e8a:	e8 e9 e1 ff ff       	call   c0002078 <clst2sect>
c0003e8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e93:	89 c2                	mov    edx,eax
c0003e95:	b8 02 00 00 00       	mov    eax,0x2
c0003e9a:	85 d2                	test   edx,edx
c0003e9c:	74 23                	je     c0003ec1 <f_open+0x2a4>
c0003e9e:	c1 ed 09             	shr    ebp,0x9
c0003ea1:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ea5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003ea8:	6a 01                	push   0x1
c0003eaa:	50                   	push   eax
c0003eab:	53                   	push   ebx
c0003eac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb0:	50                   	push   eax
c0003eb1:	e8 38 df ff ff       	call   c0001dee <disk_read>
c0003eb6:	83 c4 10             	add    esp,0x10
c0003eb9:	85 c0                	test   eax,eax
c0003ebb:	0f 95 c0             	setne  al
c0003ebe:	0f b6 c0             	movzx  eax,al
c0003ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ec5:	83 ec 0c             	sub    esp,0xc
c0003ec8:	57                   	push   edi
c0003ec9:	e8 b6 1c 00 00       	call   c0005b84 <ff_memfree>
c0003ece:	83 c4 10             	add    esp,0x10
c0003ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ed5:	85 c0                	test   eax,eax
c0003ed7:	74 06                	je     c0003edf <f_open+0x2c2>
c0003ed9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003edf:	83 c4 5c             	add    esp,0x5c
c0003ee2:	5b                   	pop    ebx
c0003ee3:	5e                   	pop    esi
c0003ee4:	5f                   	pop    edi
c0003ee5:	5d                   	pop    ebp
c0003ee6:	c3                   	ret    

c0003ee7 <f_read>:
c0003ee7:	55                   	push   ebp
c0003ee8:	57                   	push   edi
c0003ee9:	56                   	push   esi
c0003eea:	53                   	push   ebx
c0003eeb:	83 ec 2c             	sub    esp,0x2c
c0003eee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ef2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ef6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003efa:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003efe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 97 e3 ff ff       	call   c00022a2 <validate>
c0003f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f0f:	85 c0                	test   eax,eax
c0003f11:	0f 85 a0 01 00 00    	jne    c00040b7 <f_read+0x1d0>
c0003f17:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	0f 85 90 01 00 00    	jne    c00040b7 <f_read+0x1d0>
c0003f27:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f2b:	0f 84 7e 01 00 00    	je     c00040af <f_read+0x1c8>
c0003f31:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f34:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f37:	39 f8                	cmp    eax,edi
c0003f39:	0f 46 f8             	cmovbe edi,eax
c0003f3c:	85 ff                	test   edi,edi
c0003f3e:	0f 84 73 01 00 00    	je     c00040b7 <f_read+0x1d0>
c0003f44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f47:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f4c:	0f 85 26 01 00 00    	jne    c0004078 <f_read+0x191>
c0003f52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f56:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003f5a:	89 c2                	mov    edx,eax
c0003f5c:	c1 ea 09             	shr    edx,0x9
c0003f5f:	4d                   	dec    ebp
c0003f60:	21 d5                	and    ebp,edx
c0003f62:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003f66:	75 42                	jne    c0003faa <f_read+0xc3>
c0003f68:	85 c0                	test   eax,eax
c0003f6a:	75 05                	jne    c0003f71 <f_read+0x8a>
c0003f6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f6f:	eb 0a                	jmp    c0003f7b <f_read+0x94>
c0003f71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f76:	e8 98 f2 ff ff       	call   c0003213 <get_fat.isra.2>
c0003f7b:	83 f8 01             	cmp    eax,0x1
c0003f7e:	77 11                	ja     c0003f91 <f_read+0xaa>
c0003f80:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f84:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0003f8c:	e9 26 01 00 00       	jmp    c00040b7 <f_read+0x1d0>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 11                	jne    c0003fa7 <f_read+0xc0>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0003fa2:	e9 10 01 00 00       	jmp    c00040b7 <f_read+0x1d0>
c0003fa7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb5:	89 c8                	mov    eax,ecx
c0003fb7:	e8 bc e0 ff ff       	call   c0002078 <clst2sect>
c0003fbc:	85 c0                	test   eax,eax
c0003fbe:	74 c0                	je     c0003f80 <f_read+0x99>
c0003fc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc4:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003fca:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	76 58                	jbe    c000402b <f_read+0x144>
c0003fd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fd7:	89 fe                	mov    esi,edi
c0003fd9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdd:	c1 ee 09             	shr    esi,0x9
c0003fe0:	01 f2                	add    edx,esi
c0003fe2:	39 c2                	cmp    edx,eax
c0003fe4:	76 06                	jbe    c0003fec <f_read+0x105>
c0003fe6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003fea:	89 c6                	mov    esi,eax
c0003fec:	56                   	push   esi
c0003fed:	55                   	push   ebp
c0003fee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff6:	50                   	push   eax
c0003ff7:	e8 f2 dd ff ff       	call   c0001dee <disk_read>
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	85 c0                	test   eax,eax
c0004001:	75 93                	jne    c0003f96 <f_read+0xaf>
c0004003:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004007:	79 1d                	jns    c0004026 <f_read+0x13f>
c0004009:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000400c:	29 e8                	sub    eax,ebp
c000400e:	39 f0                	cmp    eax,esi
c0004010:	73 14                	jae    c0004026 <f_read+0x13f>
c0004012:	c1 e0 09             	shl    eax,0x9
c0004015:	b9 00 02 00 00       	mov    ecx,0x200
c000401a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000401e:	8d 53 28             	lea    edx,[ebx+0x28]
c0004021:	e8 3f de ff ff       	call   c0001e65 <mem_cpy>
c0004026:	c1 e6 09             	shl    esi,0x9
c0004029:	eb 70                	jmp    c000409b <f_read+0x1b4>
c000402b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000402e:	39 e8                	cmp    eax,ebp
c0004030:	74 43                	je     c0004075 <f_read+0x18e>
c0004032:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004036:	8d 73 28             	lea    esi,[ebx+0x28]
c0004039:	79 1d                	jns    c0004058 <f_read+0x171>
c000403b:	6a 01                	push   0x1
c000403d:	50                   	push   eax
c000403e:	56                   	push   esi
c000403f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004043:	50                   	push   eax
c0004044:	e8 bb dd ff ff       	call   c0001e04 <disk_write>
c0004049:	83 c4 10             	add    esp,0x10
c000404c:	85 c0                	test   eax,eax
c000404e:	0f 85 42 ff ff ff    	jne    c0003f96 <f_read+0xaf>
c0004054:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004058:	6a 01                	push   0x1
c000405a:	55                   	push   ebp
c000405b:	56                   	push   esi
c000405c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004060:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004064:	50                   	push   eax
c0004065:	e8 84 dd ff ff       	call   c0001dee <disk_read>
c000406a:	83 c4 10             	add    esp,0x10
c000406d:	85 c0                	test   eax,eax
c000406f:	0f 85 21 ff ff ff    	jne    c0003f96 <f_read+0xaf>
c0004075:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004078:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000407b:	be 00 02 00 00       	mov    esi,0x200
c0004080:	25 ff 01 00 00       	and    eax,0x1ff
c0004085:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004089:	29 c6                	sub    esi,eax
c000408b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000408f:	39 f7                	cmp    edi,esi
c0004091:	0f 46 f7             	cmovbe esi,edi
c0004094:	89 f1                	mov    ecx,esi
c0004096:	e8 ca dd ff ff       	call   c0001e65 <mem_cpy>
c000409b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000409f:	29 f7                	sub    edi,esi
c00040a1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040a5:	01 30                	add    DWORD PTR [eax],esi
c00040a7:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00040aa:	e9 8d fe ff ff       	jmp    c0003f3c <f_read+0x55>
c00040af:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c00040b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040bb:	83 c4 2c             	add    esp,0x2c
c00040be:	5b                   	pop    ebx
c00040bf:	5e                   	pop    esi
c00040c0:	5f                   	pop    edi
c00040c1:	5d                   	pop    ebp
c00040c2:	c3                   	ret    

c00040c3 <f_write>:
c00040c3:	55                   	push   ebp
c00040c4:	57                   	push   edi
c00040c5:	56                   	push   esi
c00040c6:	53                   	push   ebx
c00040c7:	83 ec 2c             	sub    esp,0x2c
c00040ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040dc:	89 d8                	mov    eax,ebx
c00040de:	e8 bf e1 ff ff       	call   c00022a2 <validate>
c00040e3:	85 c0                	test   eax,eax
c00040e5:	89 c7                	mov    edi,eax
c00040e7:	0f 85 ff 01 00 00    	jne    c00042ec <f_write+0x229>
c00040ed:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c00040f1:	85 ff                	test   edi,edi
c00040f3:	0f 85 f3 01 00 00    	jne    c00042ec <f_write+0x229>
c00040f9:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00040fd:	0f 84 e4 01 00 00    	je     c00042e7 <f_write+0x224>
c0004103:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004106:	89 c1                	mov    ecx,eax
c0004108:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000410c:	0f 83 e8 00 00 00    	jae    c00041fa <f_write+0x137>
c0004112:	f7 d0                	not    eax
c0004114:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004118:	e9 dd 00 00 00       	jmp    c00041fa <f_write+0x137>
c000411d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004120:	a9 ff 01 00 00       	test   eax,0x1ff
c0004125:	0f 85 8c 01 00 00    	jne    c00042b7 <f_write+0x1f4>
c000412b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000412f:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004133:	89 c2                	mov    edx,eax
c0004135:	c1 ea 09             	shr    edx,0x9
c0004138:	4d                   	dec    ebp
c0004139:	21 d5                	and    ebp,edx
c000413b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000413f:	0f 84 c2 00 00 00    	je     c0004207 <f_write+0x144>
c0004145:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004149:	0f 88 19 01 00 00    	js     c0004268 <f_write+0x1a5>
c000414f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004153:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004156:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000415a:	89 c8                	mov    eax,ecx
c000415c:	e8 17 df ff ff       	call   c0002078 <clst2sect>
c0004161:	85 c0                	test   eax,eax
c0004163:	0f 84 c9 00 00 00    	je     c0004232 <f_write+0x16f>
c0004169:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000416d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004175:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000417c:	0f 86 0d 01 00 00    	jbe    c000428f <f_write+0x1cc>
c0004182:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000418a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000418e:	c1 ee 09             	shr    esi,0x9
c0004191:	01 f2                	add    edx,esi
c0004193:	39 c2                	cmp    edx,eax
c0004195:	76 06                	jbe    c000419d <f_write+0xda>
c0004197:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000419b:	89 c6                	mov    esi,eax
c000419d:	56                   	push   esi
c000419e:	55                   	push   ebp
c000419f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041a7:	50                   	push   eax
c00041a8:	e8 57 dc ff ff       	call   c0001e04 <disk_write>
c00041ad:	83 c4 10             	add    esp,0x10
c00041b0:	85 c0                	test   eax,eax
c00041b2:	0f 85 8d 00 00 00    	jne    c0004245 <f_write+0x182>
c00041b8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00041bb:	29 ea                	sub    edx,ebp
c00041bd:	39 f2                	cmp    edx,esi
c00041bf:	73 18                	jae    c00041d9 <f_write+0x116>
c00041c1:	c1 e2 09             	shl    edx,0x9
c00041c4:	b9 00 02 00 00       	mov    ecx,0x200
c00041c9:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00041cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00041d0:	e8 90 dc ff ff       	call   c0001e65 <mem_cpy>
c00041d5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041d9:	c1 e6 09             	shl    esi,0x9
c00041dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041e0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00041e4:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041e8:	01 30                	add    DWORD PTR [eax],esi
c00041ea:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00041ed:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00041f0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00041f3:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00041f7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00041fa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00041ff:	0f 85 18 ff ff ff    	jne    c000411d <f_write+0x5a>
c0004205:	eb 1d                	jmp    c0004224 <f_write+0x161>
c0004207:	85 c0                	test   eax,eax
c0004209:	75 0b                	jne    c0004216 <f_write+0x153>
c000420b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000420e:	31 d2                	xor    edx,edx
c0004210:	85 c0                	test   eax,eax
c0004212:	75 19                	jne    c000422d <f_write+0x16a>
c0004214:	eb 03                	jmp    c0004219 <f_write+0x156>
c0004216:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004219:	89 d8                	mov    eax,ebx
c000421b:	e8 bd f1 ff ff       	call   c00033dd <create_chain>
c0004220:	85 c0                	test   eax,eax
c0004222:	75 09                	jne    c000422d <f_write+0x16a>
c0004224:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004228:	e9 bf 00 00 00       	jmp    c00042ec <f_write+0x229>
c000422d:	83 f8 01             	cmp    eax,0x1
c0004230:	75 0e                	jne    c0004240 <f_write+0x17d>
c0004232:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004236:	bf 02 00 00 00       	mov    edi,0x2
c000423b:	e9 ac 00 00 00       	jmp    c00042ec <f_write+0x229>
c0004240:	83 f8 ff             	cmp    eax,0xffffffff
c0004243:	75 0e                	jne    c0004253 <f_write+0x190>
c0004245:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004249:	bf 01 00 00 00       	mov    edi,0x1
c000424e:	e9 99 00 00 00       	jmp    c00042ec <f_write+0x229>
c0004253:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004257:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000425a:	0f 85 e5 fe ff ff    	jne    c0004145 <f_write+0x82>
c0004260:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004263:	e9 dd fe ff ff       	jmp    c0004145 <f_write+0x82>
c0004268:	6a 01                	push   0x1
c000426a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004270:	50                   	push   eax
c0004271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004275:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004279:	50                   	push   eax
c000427a:	e8 85 db ff ff       	call   c0001e04 <disk_write>
c000427f:	83 c4 10             	add    esp,0x10
c0004282:	85 c0                	test   eax,eax
c0004284:	75 bf                	jne    c0004245 <f_write+0x182>
c0004286:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000428a:	e9 c0 fe ff ff       	jmp    c000414f <f_write+0x8c>
c000428f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004292:	74 20                	je     c00042b4 <f_write+0x1f1>
c0004294:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004297:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000429a:	76 18                	jbe    c00042b4 <f_write+0x1f1>
c000429c:	6a 01                	push   0x1
c000429e:	55                   	push   ebp
c000429f:	8d 43 28             	lea    eax,[ebx+0x28]
c00042a2:	50                   	push   eax
c00042a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a7:	50                   	push   eax
c00042a8:	e8 41 db ff ff       	call   c0001dee <disk_read>
c00042ad:	83 c4 10             	add    esp,0x10
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 91                	jne    c0004245 <f_write+0x182>
c00042b4:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ba:	be 00 02 00 00       	mov    esi,0x200
c00042bf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00042c3:	25 ff 01 00 00       	and    eax,0x1ff
c00042c8:	29 c6                	sub    esi,eax
c00042ca:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c00042ce:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00042d2:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c00042d7:	89 f1                	mov    ecx,esi
c00042d9:	e8 87 db ff ff       	call   c0001e65 <mem_cpy>
c00042de:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00042e2:	e9 f5 fe ff ff       	jmp    c00041dc <f_write+0x119>
c00042e7:	bf 07 00 00 00       	mov    edi,0x7
c00042ec:	83 c4 2c             	add    esp,0x2c
c00042ef:	89 f8                	mov    eax,edi
c00042f1:	5b                   	pop    ebx
c00042f2:	5e                   	pop    esi
c00042f3:	5f                   	pop    edi
c00042f4:	5d                   	pop    ebp
c00042f5:	c3                   	ret    

c00042f6 <f_sync>:
c00042f6:	56                   	push   esi
c00042f7:	53                   	push   ebx
c00042f8:	83 ec 14             	sub    esp,0x14
c00042fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00042ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004303:	89 d8                	mov    eax,ebx
c0004305:	e8 98 df ff ff       	call   c00022a2 <validate>
c000430a:	85 c0                	test   eax,eax
c000430c:	0f 85 95 00 00 00    	jne    c00043a7 <f_sync+0xb1>
c0004312:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004315:	88 d1                	mov    cl,dl
c0004317:	80 e1 40             	and    cl,0x40
c000431a:	0f 84 87 00 00 00    	je     c00043a7 <f_sync+0xb1>
c0004320:	84 d2                	test   dl,dl
c0004322:	79 29                	jns    c000434d <f_sync+0x57>
c0004324:	6a 01                	push   0x1
c0004326:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004329:	8d 43 28             	lea    eax,[ebx+0x28]
c000432c:	50                   	push   eax
c000432d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004331:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004335:	50                   	push   eax
c0004336:	e8 c9 da ff ff       	call   c0001e04 <disk_write>
c000433b:	83 c4 10             	add    esp,0x10
c000433e:	89 c2                	mov    edx,eax
c0004340:	b8 01 00 00 00       	mov    eax,0x1
c0004345:	85 d2                	test   edx,edx
c0004347:	75 5e                	jne    c00043a7 <f_sync+0xb1>
c0004349:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000434d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004354:	e8 f4 df ff ff       	call   c000234d <move_window>
c0004359:	85 c0                	test   eax,eax
c000435b:	75 4a                	jne    c00043a7 <f_sync+0xb1>
c000435d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004360:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004364:	89 f2                	mov    edx,esi
c0004366:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004369:	8b 03                	mov    eax,DWORD PTR [ebx]
c000436b:	e8 7b ee ff ff       	call   c00031eb <st_clust.isra.1>
c0004370:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004373:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004376:	e8 e7 da ff ff       	call   c0001e62 <st_dword>
c000437b:	8d 46 16             	lea    eax,[esi+0x16]
c000437e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004383:	e8 da da ff ff       	call   c0001e62 <st_dword>
c0004388:	8d 46 12             	lea    eax,[esi+0x12]
c000438b:	31 d2                	xor    edx,edx
c000438d:	e8 cc da ff ff       	call   c0001e5e <st_word>
c0004392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004396:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000439a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000439e:	e8 ed e9 ff ff       	call   c0002d90 <sync_fs>
c00043a3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00043a7:	83 c4 14             	add    esp,0x14
c00043aa:	5b                   	pop    ebx
c00043ab:	5e                   	pop    esi
c00043ac:	c3                   	ret    

c00043ad <f_close>:
c00043ad:	53                   	push   ebx
c00043ae:	83 ec 24             	sub    esp,0x24
c00043b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00043b5:	53                   	push   ebx
c00043b6:	e8 3b ff ff ff       	call   c00042f6 <f_sync>
c00043bb:	83 c4 10             	add    esp,0x10
c00043be:	85 c0                	test   eax,eax
c00043c0:	75 15                	jne    c00043d7 <f_close+0x2a>
c00043c2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043c6:	89 d8                	mov    eax,ebx
c00043c8:	e8 d5 de ff ff       	call   c00022a2 <validate>
c00043cd:	85 c0                	test   eax,eax
c00043cf:	75 06                	jne    c00043d7 <f_close+0x2a>
c00043d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043d7:	83 c4 18             	add    esp,0x18
c00043da:	5b                   	pop    ebx
c00043db:	c3                   	ret    

c00043dc <f_lseek>:
c00043dc:	55                   	push   ebp
c00043dd:	57                   	push   edi
c00043de:	56                   	push   esi
c00043df:	53                   	push   ebx
c00043e0:	83 ec 2c             	sub    esp,0x2c
c00043e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00043e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043eb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00043ef:	89 d8                	mov    eax,ebx
c00043f1:	e8 ac de ff ff       	call   c00022a2 <validate>
c00043f6:	85 c0                	test   eax,eax
c00043f8:	89 c5                	mov    ebp,eax
c00043fa:	0f 85 78 01 00 00    	jne    c0004578 <f_lseek+0x19c>
c0004400:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004404:	85 ed                	test   ebp,ebp
c0004406:	0f 85 6c 01 00 00    	jne    c0004578 <f_lseek+0x19c>
c000440c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000440f:	39 f0                	cmp    eax,esi
c0004411:	73 07                	jae    c000441a <f_lseek+0x3e>
c0004413:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004417:	0f 44 f0             	cmove  esi,eax
c000441a:	85 f6                	test   esi,esi
c000441c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000441f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004426:	75 07                	jne    c000442f <f_lseek+0x53>
c0004428:	31 f6                	xor    esi,esi
c000442a:	e9 e2 00 00 00       	jmp    c0004511 <f_lseek+0x135>
c000442f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004433:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004437:	c1 e7 09             	shl    edi,0x9
c000443a:	85 c9                	test   ecx,ecx
c000443c:	74 28                	je     c0004466 <f_lseek+0x8a>
c000443e:	31 d2                	xor    edx,edx
c0004440:	49                   	dec    ecx
c0004441:	8d 46 ff             	lea    eax,[esi-0x1]
c0004444:	f7 f7                	div    edi
c0004446:	31 d2                	xor    edx,edx
c0004448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000444c:	89 c8                	mov    eax,ecx
c000444e:	f7 f7                	div    edi
c0004450:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004454:	72 10                	jb     c0004466 <f_lseek+0x8a>
c0004456:	89 f8                	mov    eax,edi
c0004458:	f7 d8                	neg    eax
c000445a:	21 c1                	and    ecx,eax
c000445c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000445f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004462:	29 ce                	sub    esi,ecx
c0004464:	eb 3c                	jmp    c00044a2 <f_lseek+0xc6>
c0004466:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004469:	85 c0                	test   eax,eax
c000446b:	75 32                	jne    c000449f <f_lseek+0xc3>
c000446d:	31 d2                	xor    edx,edx
c000446f:	89 d8                	mov    eax,ebx
c0004471:	e8 67 ef ff ff       	call   c00033dd <create_chain>
c0004476:	83 f8 01             	cmp    eax,0x1
c0004479:	75 0e                	jne    c0004489 <f_lseek+0xad>
c000447b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000447f:	bd 02 00 00 00       	mov    ebp,0x2
c0004484:	e9 ef 00 00 00       	jmp    c0004578 <f_lseek+0x19c>
c0004489:	83 f8 ff             	cmp    eax,0xffffffff
c000448c:	75 0e                	jne    c000449c <f_lseek+0xc0>
c000448e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004492:	bd 01 00 00 00       	mov    ebp,0x1
c0004497:	e9 dc 00 00 00       	jmp    c0004578 <f_lseek+0x19c>
c000449c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	85 c0                	test   eax,eax
c00044a4:	74 82                	je     c0004428 <f_lseek+0x4c>
c00044a6:	39 fe                	cmp    esi,edi
c00044a8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044ab:	76 3d                	jbe    c00044ea <f_lseek+0x10e>
c00044ad:	01 fa                	add    edx,edi
c00044af:	29 fe                	sub    esi,edi
c00044b1:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044b5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00044b8:	89 c2                	mov    edx,eax
c00044ba:	74 0d                	je     c00044c9 <f_lseek+0xed>
c00044bc:	89 d8                	mov    eax,ebx
c00044be:	e8 1a ef ff ff       	call   c00033dd <create_chain>
c00044c3:	85 c0                	test   eax,eax
c00044c5:	75 09                	jne    c00044d0 <f_lseek+0xf4>
c00044c7:	eb 1f                	jmp    c00044e8 <f_lseek+0x10c>
c00044c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044cb:	e8 43 ed ff ff       	call   c0003213 <get_fat.isra.2>
c00044d0:	83 f8 ff             	cmp    eax,0xffffffff
c00044d3:	74 b9                	je     c000448e <f_lseek+0xb2>
c00044d5:	83 f8 01             	cmp    eax,0x1
c00044d8:	76 a1                	jbe    c000447b <f_lseek+0x9f>
c00044da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044de:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00044e1:	76 98                	jbe    c000447b <f_lseek+0x9f>
c00044e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044e6:	eb be                	jmp    c00044a6 <f_lseek+0xca>
c00044e8:	31 f6                	xor    esi,esi
c00044ea:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00044ed:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00044f3:	0f 84 2f ff ff ff    	je     c0004428 <f_lseek+0x4c>
c00044f9:	89 c2                	mov    edx,eax
c00044fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044ff:	e8 74 db ff ff       	call   c0002078 <clst2sect>
c0004504:	85 c0                	test   eax,eax
c0004506:	0f 84 6f ff ff ff    	je     c000447b <f_lseek+0x9f>
c000450c:	c1 ee 09             	shr    esi,0x9
c000450f:	01 c6                	add    esi,eax
c0004511:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004514:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004517:	76 07                	jbe    c0004520 <f_lseek+0x144>
c0004519:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000451d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004520:	a9 ff 01 00 00       	test   eax,0x1ff
c0004525:	74 51                	je     c0004578 <f_lseek+0x19c>
c0004527:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000452a:	39 f0                	cmp    eax,esi
c000452c:	74 4a                	je     c0004578 <f_lseek+0x19c>
c000452e:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004532:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004535:	79 21                	jns    c0004558 <f_lseek+0x17c>
c0004537:	6a 01                	push   0x1
c0004539:	50                   	push   eax
c000453a:	57                   	push   edi
c000453b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000453f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004543:	50                   	push   eax
c0004544:	e8 bb d8 ff ff       	call   c0001e04 <disk_write>
c0004549:	83 c4 10             	add    esp,0x10
c000454c:	85 c0                	test   eax,eax
c000454e:	0f 85 3a ff ff ff    	jne    c000448e <f_lseek+0xb2>
c0004554:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004558:	6a 01                	push   0x1
c000455a:	56                   	push   esi
c000455b:	57                   	push   edi
c000455c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004560:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004564:	50                   	push   eax
c0004565:	e8 84 d8 ff ff       	call   c0001dee <disk_read>
c000456a:	83 c4 10             	add    esp,0x10
c000456d:	85 c0                	test   eax,eax
c000456f:	0f 85 19 ff ff ff    	jne    c000448e <f_lseek+0xb2>
c0004575:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004578:	83 c4 2c             	add    esp,0x2c
c000457b:	89 e8                	mov    eax,ebp
c000457d:	5b                   	pop    ebx
c000457e:	5e                   	pop    esi
c000457f:	5f                   	pop    edi
c0004580:	5d                   	pop    ebp
c0004581:	c3                   	ret    

c0004582 <f_opendir>:
c0004582:	56                   	push   esi
c0004583:	b8 09 00 00 00       	mov    eax,0x9
c0004588:	53                   	push   ebx
c0004589:	83 ec 24             	sub    esp,0x24
c000458c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004590:	85 db                	test   ebx,ebx
c0004592:	0f 84 af 00 00 00    	je     c0004647 <f_opendir+0xc5>
c0004598:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000459c:	31 c9                	xor    ecx,ecx
c000459e:	8d 44 24 34          	lea    eax,[esp+0x34]
c00045a2:	e8 03 df ff ff       	call   c00024aa <mount_volume>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 85 92 00 00 00    	jne    c0004641 <f_opendir+0xbf>
c00045af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045b3:	83 ec 0c             	sub    esp,0xc
c00045b6:	89 03                	mov    DWORD PTR [ebx],eax
c00045b8:	68 00 02 00 00       	push   0x200
c00045bd:	e8 ae 15 00 00       	call   c0005b70 <ff_memalloc>
c00045c2:	83 c4 10             	add    esp,0x10
c00045c5:	89 c6                	mov    esi,eax
c00045c7:	b8 11 00 00 00       	mov    eax,0x11
c00045cc:	85 f6                	test   esi,esi
c00045ce:	74 77                	je     c0004647 <f_opendir+0xc5>
c00045d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00045d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045db:	89 d8                	mov    eax,ebx
c00045dd:	e8 b8 f3 ff ff       	call   c000399a <follow_path>
c00045e2:	85 c0                	test   eax,eax
c00045e4:	75 37                	jne    c000461d <f_opendir+0x9b>
c00045e6:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00045ea:	78 1c                	js     c0004608 <f_opendir+0x86>
c00045ec:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00045f0:	b8 05 00 00 00       	mov    eax,0x5
c00045f5:	74 26                	je     c000461d <f_opendir+0x9b>
c00045f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00045fe:	8a 00                	mov    al,BYTE PTR [eax]
c0004600:	e8 be eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004605:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000460c:	31 d2                	xor    edx,edx
c000460e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c0004612:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004616:	89 d8                	mov    eax,ebx
c0004618:	e8 f8 ec ff ff       	call   c0003315 <dir_sdi>
c000461d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004621:	83 ec 0c             	sub    esp,0xc
c0004624:	56                   	push   esi
c0004625:	e8 5a 15 00 00       	call   c0005b84 <ff_memfree>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004631:	83 f8 04             	cmp    eax,0x4
c0004634:	74 06                	je     c000463c <f_opendir+0xba>
c0004636:	85 c0                	test   eax,eax
c0004638:	74 0d                	je     c0004647 <f_opendir+0xc5>
c000463a:	eb 05                	jmp    c0004641 <f_opendir+0xbf>
c000463c:	b8 05 00 00 00       	mov    eax,0x5
c0004641:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004647:	83 c4 24             	add    esp,0x24
c000464a:	5b                   	pop    ebx
c000464b:	5e                   	pop    esi
c000464c:	c3                   	ret    

c000464d <f_closedir>:
c000464d:	53                   	push   ebx
c000464e:	83 ec 18             	sub    esp,0x18
c0004651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004655:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004659:	89 d8                	mov    eax,ebx
c000465b:	e8 42 dc ff ff       	call   c00022a2 <validate>
c0004660:	85 c0                	test   eax,eax
c0004662:	75 06                	jne    c000466a <f_closedir+0x1d>
c0004664:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000466a:	83 c4 18             	add    esp,0x18
c000466d:	5b                   	pop    ebx
c000466e:	c3                   	ret    

c000466f <f_readdir>:
c000466f:	57                   	push   edi
c0004670:	56                   	push   esi
c0004671:	53                   	push   ebx
c0004672:	83 ec 20             	sub    esp,0x20
c0004675:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004679:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000467d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004681:	89 d8                	mov    eax,ebx
c0004683:	e8 1a dc ff ff       	call   c00022a2 <validate>
c0004688:	85 c0                	test   eax,eax
c000468a:	75 6e                	jne    c00046fa <f_readdir+0x8b>
c000468c:	85 ff                	test   edi,edi
c000468e:	75 0b                	jne    c000469b <f_readdir+0x2c>
c0004690:	31 d2                	xor    edx,edx
c0004692:	89 d8                	mov    eax,ebx
c0004694:	e8 7c ec ff ff       	call   c0003315 <dir_sdi>
c0004699:	eb 5f                	jmp    c00046fa <f_readdir+0x8b>
c000469b:	83 ec 0c             	sub    esp,0xc
c000469e:	68 00 02 00 00       	push   0x200
c00046a3:	e8 c8 14 00 00       	call   c0005b70 <ff_memalloc>
c00046a8:	83 c4 10             	add    esp,0x10
c00046ab:	89 c6                	mov    esi,eax
c00046ad:	b8 11 00 00 00       	mov    eax,0x11
c00046b2:	85 f6                	test   esi,esi
c00046b4:	74 44                	je     c00046fa <f_readdir+0x8b>
c00046b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046ba:	31 d2                	xor    edx,edx
c00046bc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	e8 3b f0 ff ff       	call   c0003701 <dir_read>
c00046c6:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00046cb:	75 19                	jne    c00046e6 <f_readdir+0x77>
c00046cd:	89 fa                	mov    edx,edi
c00046cf:	89 d8                	mov    eax,ebx
c00046d1:	e8 0e e9 ff ff       	call   c0002fe4 <get_fileinfo>
c00046d6:	31 d2                	xor    edx,edx
c00046d8:	89 d8                	mov    eax,ebx
c00046da:	e8 bc ee ff ff       	call   c000359b <dir_next>
c00046df:	83 f8 04             	cmp    eax,0x4
c00046e2:	75 02                	jne    c00046e6 <f_readdir+0x77>
c00046e4:	31 c0                	xor    eax,eax
c00046e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ea:	83 ec 0c             	sub    esp,0xc
c00046ed:	56                   	push   esi
c00046ee:	e8 91 14 00 00       	call   c0005b84 <ff_memfree>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046fa:	83 c4 20             	add    esp,0x20
c00046fd:	5b                   	pop    ebx
c00046fe:	5e                   	pop    esi
c00046ff:	5f                   	pop    edi
c0004700:	c3                   	ret    

c0004701 <f_stat>:
c0004701:	57                   	push   edi
c0004702:	31 c9                	xor    ecx,ecx
c0004704:	56                   	push   esi
c0004705:	53                   	push   ebx
c0004706:	83 ec 30             	sub    esp,0x30
c0004709:	8d 44 24 40          	lea    eax,[esp+0x40]
c000470d:	89 e2                	mov    edx,esp
c000470f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004713:	e8 92 dd ff ff       	call   c00024aa <mount_volume>
c0004718:	85 c0                	test   eax,eax
c000471a:	89 c3                	mov    ebx,eax
c000471c:	75 59                	jne    c0004777 <f_stat+0x76>
c000471e:	83 ec 0c             	sub    esp,0xc
c0004721:	bb 11 00 00 00       	mov    ebx,0x11
c0004726:	68 00 02 00 00       	push   0x200
c000472b:	e8 40 14 00 00       	call   c0005b70 <ff_memalloc>
c0004730:	83 c4 10             	add    esp,0x10
c0004733:	85 c0                	test   eax,eax
c0004735:	89 c6                	mov    esi,eax
c0004737:	74 3e                	je     c0004777 <f_stat+0x76>
c0004739:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000473c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004740:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004743:	89 e0                	mov    eax,esp
c0004745:	e8 50 f2 ff ff       	call   c000399a <follow_path>
c000474a:	85 c0                	test   eax,eax
c000474c:	89 c3                	mov    ebx,eax
c000474e:	75 1b                	jne    c000476b <f_stat+0x6a>
c0004750:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004755:	78 0f                	js     c0004766 <f_stat+0x65>
c0004757:	85 ff                	test   edi,edi
c0004759:	74 10                	je     c000476b <f_stat+0x6a>
c000475b:	89 fa                	mov    edx,edi
c000475d:	89 e0                	mov    eax,esp
c000475f:	e8 80 e8 ff ff       	call   c0002fe4 <get_fileinfo>
c0004764:	eb 05                	jmp    c000476b <f_stat+0x6a>
c0004766:	bb 06 00 00 00       	mov    ebx,0x6
c000476b:	83 ec 0c             	sub    esp,0xc
c000476e:	56                   	push   esi
c000476f:	e8 10 14 00 00       	call   c0005b84 <ff_memfree>
c0004774:	83 c4 10             	add    esp,0x10
c0004777:	83 c4 30             	add    esp,0x30
c000477a:	89 d8                	mov    eax,ebx
c000477c:	5b                   	pop    ebx
c000477d:	5e                   	pop    esi
c000477e:	5f                   	pop    edi
c000477f:	c3                   	ret    

c0004780 <f_getfree>:
c0004780:	55                   	push   ebp
c0004781:	31 c9                	xor    ecx,ecx
c0004783:	57                   	push   edi
c0004784:	56                   	push   esi
c0004785:	53                   	push   ebx
c0004786:	83 ec 2c             	sub    esp,0x2c
c0004789:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000478d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004791:	e8 14 dd ff ff       	call   c00024aa <mount_volume>
c0004796:	85 c0                	test   eax,eax
c0004798:	89 c6                	mov    esi,eax
c000479a:	0f 85 da 00 00 00    	jne    c000487a <f_getfree+0xfa>
c00047a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00047a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00047a8:	89 18                	mov    DWORD PTR [eax],ebx
c00047aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00047ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047b0:	8d 57 fe             	lea    edx,[edi-0x2]
c00047b3:	39 d0                	cmp    eax,edx
c00047b5:	77 0b                	ja     c00047c2 <f_getfree+0x42>
c00047b7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00047bb:	89 01                	mov    DWORD PTR [ecx],eax
c00047bd:	e9 b8 00 00 00       	jmp    c000487a <f_getfree+0xfa>
c00047c2:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c00047c5:	75 29                	jne    c00047f0 <f_getfree+0x70>
c00047c7:	bf 02 00 00 00       	mov    edi,0x2
c00047cc:	31 ed                	xor    ebp,ebp
c00047ce:	89 fa                	mov    edx,edi
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	e8 3c ea ff ff       	call   c0003213 <get_fat.isra.2>
c00047d7:	83 f8 ff             	cmp    eax,0xffffffff
c00047da:	74 7d                	je     c0004859 <f_getfree+0xd9>
c00047dc:	83 f8 01             	cmp    eax,0x1
c00047df:	74 7f                	je     c0004860 <f_getfree+0xe0>
c00047e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047e5:	83 d5 00             	adc    ebp,0x0
c00047e8:	47                   	inc    edi
c00047e9:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c00047ec:	77 e0                	ja     c00047ce <f_getfree+0x4e>
c00047ee:	eb 79                	jmp    c0004869 <f_getfree+0xe9>
c00047f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00047f3:	31 ed                	xor    ebp,ebp
c00047f5:	31 db                	xor    ebx,ebx
c00047f7:	85 db                	test   ebx,ebx
c00047f9:	75 18                	jne    c0004813 <f_getfree+0x93>
c00047fb:	8d 42 01             	lea    eax,[edx+0x1]
c00047fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004802:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004806:	e8 42 db ff ff       	call   c000234d <move_window>
c000480b:	85 c0                	test   eax,eax
c000480d:	75 58                	jne    c0004867 <f_getfree+0xe7>
c000480f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004817:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000481b:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c000481e:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004822:	75 13                	jne    c0004837 <f_getfree+0xb7>
c0004824:	e8 10 d6 ff ff       	call   c0001e39 <ld_word>
c0004829:	0f b7 c0             	movzx  eax,ax
c000482c:	83 f8 01             	cmp    eax,0x1
c000482f:	83 d5 00             	adc    ebp,0x0
c0004832:	83 c3 02             	add    ebx,0x2
c0004835:	eb 13                	jmp    c000484a <f_getfree+0xca>
c0004837:	e8 0a d6 ff ff       	call   c0001e46 <ld_dword>
c000483c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004841:	83 f8 01             	cmp    eax,0x1
c0004844:	83 d5 00             	adc    ebp,0x0
c0004847:	83 c3 04             	add    ebx,0x4
c000484a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004850:	4f                   	dec    edi
c0004851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004855:	75 a0                	jne    c00047f7 <f_getfree+0x77>
c0004857:	eb 10                	jmp    c0004869 <f_getfree+0xe9>
c0004859:	be 01 00 00 00       	mov    esi,0x1
c000485e:	eb 09                	jmp    c0004869 <f_getfree+0xe9>
c0004860:	be 02 00 00 00       	mov    esi,0x2
c0004865:	eb 02                	jmp    c0004869 <f_getfree+0xe9>
c0004867:	89 c6                	mov    esi,eax
c0004869:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000486d:	89 28                	mov    DWORD PTR [eax],ebp
c000486f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004873:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004877:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000487a:	83 c4 2c             	add    esp,0x2c
c000487d:	89 f0                	mov    eax,esi
c000487f:	5b                   	pop    ebx
c0004880:	5e                   	pop    esi
c0004881:	5f                   	pop    edi
c0004882:	5d                   	pop    ebp
c0004883:	c3                   	ret    

c0004884 <f_truncate>:
c0004884:	56                   	push   esi
c0004885:	53                   	push   ebx
c0004886:	83 ec 14             	sub    esp,0x14
c0004889:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000488d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004891:	89 d8                	mov    eax,ebx
c0004893:	e8 0a da ff ff       	call   c00022a2 <validate>
c0004898:	85 c0                	test   eax,eax
c000489a:	89 c6                	mov    esi,eax
c000489c:	0f 85 be 00 00 00    	jne    c0004960 <f_truncate+0xdc>
c00048a2:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00048a6:	85 f6                	test   esi,esi
c00048a8:	0f 85 b2 00 00 00    	jne    c0004960 <f_truncate+0xdc>
c00048ae:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00048b2:	0f 84 a3 00 00 00    	je     c000495b <f_truncate+0xd7>
c00048b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048bb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048be:	0f 83 9c 00 00 00    	jae    c0004960 <f_truncate+0xdc>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	75 15                	jne    c00048dd <f_truncate+0x59>
c00048c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 3e ec ff ff       	call   c0003512 <remove_chain>
c00048d4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00048db:	eb 35                	jmp    c0004912 <f_truncate+0x8e>
c00048dd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00048e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00048e2:	e8 2c e9 ff ff       	call   c0003213 <get_fat.isra.2>
c00048e7:	89 c2                	mov    edx,eax
c00048e9:	b8 01 00 00 00       	mov    eax,0x1
c00048ee:	83 fa ff             	cmp    edx,0xffffffff
c00048f1:	74 1f                	je     c0004912 <f_truncate+0x8e>
c00048f3:	83 fa 01             	cmp    edx,0x1
c00048f6:	b8 02 00 00 00       	mov    eax,0x2
c00048fb:	74 15                	je     c0004912 <f_truncate+0x8e>
c00048fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004901:	31 c0                	xor    eax,eax
c0004903:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004906:	76 0a                	jbe    c0004912 <f_truncate+0x8e>
c0004908:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000490b:	89 d8                	mov    eax,ebx
c000490d:	e8 00 ec ff ff       	call   c0003512 <remove_chain>
c0004912:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004915:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004918:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000491b:	80 ca 40             	or     dl,0x40
c000491e:	85 c0                	test   eax,eax
c0004920:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004923:	75 2f                	jne    c0004954 <f_truncate+0xd0>
c0004925:	84 d2                	test   dl,dl
c0004927:	79 37                	jns    c0004960 <f_truncate+0xdc>
c0004929:	6a 01                	push   0x1
c000492b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000492e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004931:	50                   	push   eax
c0004932:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004936:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000493a:	50                   	push   eax
c000493b:	e8 c4 d4 ff ff       	call   c0001e04 <disk_write>
c0004940:	83 c4 10             	add    esp,0x10
c0004943:	85 c0                	test   eax,eax
c0004945:	75 08                	jne    c000494f <f_truncate+0xcb>
c0004947:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000494b:	31 f6                	xor    esi,esi
c000494d:	eb 11                	jmp    c0004960 <f_truncate+0xdc>
c000494f:	b8 01 00 00 00       	mov    eax,0x1
c0004954:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004957:	89 c6                	mov    esi,eax
c0004959:	eb 05                	jmp    c0004960 <f_truncate+0xdc>
c000495b:	be 07 00 00 00       	mov    esi,0x7
c0004960:	83 c4 14             	add    esp,0x14
c0004963:	89 f0                	mov    eax,esi
c0004965:	5b                   	pop    ebx
c0004966:	5e                   	pop    esi
c0004967:	c3                   	ret    

c0004968 <f_unlink>:
c0004968:	55                   	push   ebp
c0004969:	b9 02 00 00 00       	mov    ecx,0x2
c000496e:	57                   	push   edi
c000496f:	56                   	push   esi
c0004970:	53                   	push   ebx
c0004971:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004977:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000497b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004982:	e8 23 db ff ff       	call   c00024aa <mount_volume>
c0004987:	85 c0                	test   eax,eax
c0004989:	0f 85 ec 00 00 00    	jne    c0004a7b <f_unlink+0x113>
c000498f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004993:	83 ec 0c             	sub    esp,0xc
c0004996:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000499a:	68 00 02 00 00       	push   0x200
c000499f:	e8 cc 11 00 00       	call   c0005b70 <ff_memalloc>
c00049a4:	83 c4 10             	add    esp,0x10
c00049a7:	89 c6                	mov    esi,eax
c00049a9:	b8 11 00 00 00       	mov    eax,0x11
c00049ae:	85 f6                	test   esi,esi
c00049b0:	0f 84 c5 00 00 00    	je     c0004a7b <f_unlink+0x113>
c00049b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ba:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00049c1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049c8:	e8 cd ef ff ff       	call   c000399a <follow_path>
c00049cd:	85 c0                	test   eax,eax
c00049cf:	0f 85 92 00 00 00    	jne    c0004a67 <f_unlink+0xff>
c00049d5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00049da:	b8 06 00 00 00       	mov    eax,0x6
c00049df:	0f 88 82 00 00 00    	js     c0004a67 <f_unlink+0xff>
c00049e5:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c00049e9:	88 d8                	mov    al,bl
c00049eb:	24 01                	and    al,0x1
c00049ed:	74 07                	je     c00049f6 <f_unlink+0x8e>
c00049ef:	b8 07 00 00 00       	mov    eax,0x7
c00049f4:	eb 71                	jmp    c0004a67 <f_unlink+0xff>
c00049f6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00049fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00049fe:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a01:	e8 bd e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a06:	80 e3 10             	and    bl,0x10
c0004a09:	89 c7                	mov    edi,eax
c0004a0b:	75 20                	jne    c0004a2d <f_unlink+0xc5>
c0004a0d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a11:	e8 08 ee ff ff       	call   c000381e <dir_remove>
c0004a16:	85 c0                	test   eax,eax
c0004a18:	75 40                	jne    c0004a5a <f_unlink+0xf2>
c0004a1a:	85 ff                	test   edi,edi
c0004a1c:	74 3c                	je     c0004a5a <f_unlink+0xf2>
c0004a1e:	31 c9                	xor    ecx,ecx
c0004a20:	89 fa                	mov    edx,edi
c0004a22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a26:	e8 e7 ea ff ff       	call   c0003512 <remove_chain>
c0004a2b:	eb 2d                	jmp    c0004a5a <f_unlink+0xf2>
c0004a2d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004a31:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a35:	31 d2                	xor    edx,edx
c0004a37:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004a3b:	e8 d5 e8 ff ff       	call   c0003315 <dir_sdi>
c0004a40:	85 c0                	test   eax,eax
c0004a42:	75 23                	jne    c0004a67 <f_unlink+0xff>
c0004a44:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	e8 b2 ec ff ff       	call   c0003701 <dir_read>
c0004a4f:	85 c0                	test   eax,eax
c0004a51:	74 9c                	je     c00049ef <f_unlink+0x87>
c0004a53:	83 f8 04             	cmp    eax,0x4
c0004a56:	75 0f                	jne    c0004a67 <f_unlink+0xff>
c0004a58:	eb b3                	jmp    c0004a0d <f_unlink+0xa5>
c0004a5a:	85 c0                	test   eax,eax
c0004a5c:	75 09                	jne    c0004a67 <f_unlink+0xff>
c0004a5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a62:	e8 29 e3 ff ff       	call   c0002d90 <sync_fs>
c0004a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a6b:	83 ec 0c             	sub    esp,0xc
c0004a6e:	56                   	push   esi
c0004a6f:	e8 10 11 00 00       	call   c0005b84 <ff_memfree>
c0004a74:	83 c4 10             	add    esp,0x10
c0004a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a7b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004a81:	5b                   	pop    ebx
c0004a82:	5e                   	pop    esi
c0004a83:	5f                   	pop    edi
c0004a84:	5d                   	pop    ebp
c0004a85:	c3                   	ret    

c0004a86 <f_mkdir>:
c0004a86:	57                   	push   edi
c0004a87:	b9 02 00 00 00       	mov    ecx,0x2
c0004a8c:	56                   	push   esi
c0004a8d:	53                   	push   ebx
c0004a8e:	83 ec 50             	sub    esp,0x50
c0004a91:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a95:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004a99:	e8 0c da ff ff       	call   c00024aa <mount_volume>
c0004a9e:	85 c0                	test   eax,eax
c0004aa0:	89 c3                	mov    ebx,eax
c0004aa2:	0f 85 70 01 00 00    	jne    c0004c18 <f_mkdir+0x192>
c0004aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aac:	83 ec 0c             	sub    esp,0xc
c0004aaf:	bb 11 00 00 00       	mov    ebx,0x11
c0004ab4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ab8:	68 00 02 00 00       	push   0x200
c0004abd:	e8 ae 10 00 00       	call   c0005b70 <ff_memalloc>
c0004ac2:	83 c4 10             	add    esp,0x10
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	89 c7                	mov    edi,eax
c0004ac9:	0f 84 49 01 00 00    	je     c0004c18 <f_mkdir+0x192>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ad7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ada:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ade:	e8 b7 ee ff ff       	call   c000399a <follow_path>
c0004ae3:	85 c0                	test   eax,eax
c0004ae5:	89 c3                	mov    ebx,eax
c0004ae7:	74 3e                	je     c0004b27 <f_mkdir+0xa1>
c0004ae9:	83 f8 04             	cmp    eax,0x4
c0004aec:	75 3e                	jne    c0004b2c <f_mkdir+0xa6>
c0004aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af2:	31 d2                	xor    edx,edx
c0004af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004af8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004afc:	e8 dc e8 ff ff       	call   c00033dd <create_chain>
c0004b01:	85 c0                	test   eax,eax
c0004b03:	89 c6                	mov    esi,eax
c0004b05:	74 0c                	je     c0004b13 <f_mkdir+0x8d>
c0004b07:	83 f8 01             	cmp    eax,0x1
c0004b0a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b0f:	74 07                	je     c0004b18 <f_mkdir+0x92>
c0004b11:	eb 2a                	jmp    c0004b3d <f_mkdir+0xb7>
c0004b13:	bb 07 00 00 00       	mov    ebx,0x7
c0004b18:	31 c9                	xor    ecx,ecx
c0004b1a:	89 f2                	mov    edx,esi
c0004b1c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b20:	e8 ed e9 ff ff       	call   c0003512 <remove_chain>
c0004b25:	eb 05                	jmp    c0004b2c <f_mkdir+0xa6>
c0004b27:	bb 08 00 00 00       	mov    ebx,0x8
c0004b2c:	83 ec 0c             	sub    esp,0xc
c0004b2f:	57                   	push   edi
c0004b30:	e8 4f 10 00 00       	call   c0005b84 <ff_memfree>
c0004b35:	83 c4 10             	add    esp,0x10
c0004b38:	e9 db 00 00 00       	jmp    c0004c18 <f_mkdir+0x192>
c0004b3d:	83 f8 ff             	cmp    eax,0xffffffff
c0004b40:	bb 01 00 00 00       	mov    ebx,0x1
c0004b45:	74 d1                	je     c0004b18 <f_mkdir+0x92>
c0004b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4b:	89 f2                	mov    edx,esi
c0004b4d:	e8 a9 dd ff ff       	call   c00028fb <dir_clear>
c0004b52:	85 c0                	test   eax,eax
c0004b54:	89 c3                	mov    ebx,eax
c0004b56:	75 c0                	jne    c0004b18 <f_mkdir+0x92>
c0004b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b5c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004b61:	ba 20 00 00 00       	mov    edx,0x20
c0004b66:	83 c0 34             	add    eax,0x34
c0004b69:	e8 0c d3 ff ff       	call   c0001e7a <mem_set>
c0004b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b77:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004b7b:	83 c0 4a             	add    eax,0x4a
c0004b7e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004b82:	e8 db d2 ff ff       	call   c0001e62 <st_dword>
c0004b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8b:	89 f1                	mov    ecx,esi
c0004b8d:	8d 50 34             	lea    edx,[eax+0x34]
c0004b90:	e8 56 e6 ff ff       	call   c00031eb <st_clust.isra.1>
c0004b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b99:	b9 20 00 00 00       	mov    ecx,0x20
c0004b9e:	8d 50 34             	lea    edx,[eax+0x34]
c0004ba1:	83 c0 54             	add    eax,0x54
c0004ba4:	e8 bc d2 ff ff       	call   c0001e65 <mem_cpy>
c0004ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004bb1:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004bb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004bb8:	e8 2e e6 ff ff       	call   c00031eb <st_clust.isra.1>
c0004bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bc1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004bc5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bc9:	e8 68 ee ff ff       	call   c0003a36 <dir_register>
c0004bce:	85 c0                	test   eax,eax
c0004bd0:	89 c3                	mov    ebx,eax
c0004bd2:	0f 85 40 ff ff ff    	jne    c0004b18 <f_mkdir+0x92>
c0004bd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bdc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004be1:	83 c0 16             	add    eax,0x16
c0004be4:	e8 79 d2 ff ff       	call   c0001e62 <st_dword>
c0004be9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004bed:	89 f1                	mov    ecx,esi
c0004bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf3:	e8 f3 e5 ff ff       	call   c00031eb <st_clust.isra.1>
c0004bf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bfc:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c04:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c0c:	e8 7f e1 ff ff       	call   c0002d90 <sync_fs>
c0004c11:	89 c3                	mov    ebx,eax
c0004c13:	e9 14 ff ff ff       	jmp    c0004b2c <f_mkdir+0xa6>
c0004c18:	83 c4 50             	add    esp,0x50
c0004c1b:	89 d8                	mov    eax,ebx
c0004c1d:	5b                   	pop    ebx
c0004c1e:	5e                   	pop    esi
c0004c1f:	5f                   	pop    edi
c0004c20:	c3                   	ret    

c0004c21 <f_rename>:
c0004c21:	57                   	push   edi
c0004c22:	56                   	push   esi
c0004c23:	53                   	push   ebx
c0004c24:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004c2a:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004c31:	e8 27 d6 ff ff       	call   c000225d <get_ldnumber>
c0004c36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c3a:	b9 02 00 00 00       	mov    ecx,0x2
c0004c3f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004c46:	e8 5f d8 ff ff       	call   c00024aa <mount_volume>
c0004c4b:	85 c0                	test   eax,eax
c0004c4d:	0f 85 7c 01 00 00    	jne    c0004dcf <f_rename+0x1ae>
c0004c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c57:	83 ec 0c             	sub    esp,0xc
c0004c5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004c5e:	68 00 02 00 00       	push   0x200
c0004c63:	e8 08 0f 00 00       	call   c0005b70 <ff_memalloc>
c0004c68:	83 c4 10             	add    esp,0x10
c0004c6b:	89 c6                	mov    esi,eax
c0004c6d:	b8 11 00 00 00       	mov    eax,0x11
c0004c72:	85 f6                	test   esi,esi
c0004c74:	0f 84 55 01 00 00    	je     c0004dcf <f_rename+0x1ae>
c0004c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c7e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004c85:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004c88:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004c8c:	e8 09 ed ff ff       	call   c000399a <follow_path>
c0004c91:	85 c0                	test   eax,eax
c0004c93:	0f 85 22 01 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004c99:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004c9e:	b8 06 00 00 00       	mov    eax,0x6
c0004ca3:	0f 85 12 01 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004ca9:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004cad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cb1:	b9 20 00 00 00       	mov    ecx,0x20
c0004cb6:	e8 aa d1 ff ff       	call   c0001e65 <mem_cpy>
c0004cbb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004cbf:	b9 30 00 00 00       	mov    ecx,0x30
c0004cc4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004cc8:	e8 98 d1 ff ff       	call   c0001e65 <mem_cpy>
c0004ccd:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004cd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004cd8:	e8 bd ec ff ff       	call   c000399a <follow_path>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	75 20                	jne    c0004d01 <f_rename+0xe0>
c0004ce1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004ce5:	b8 08 00 00 00       	mov    eax,0x8
c0004cea:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004cee:	0f 85 c7 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004cf4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004cf8:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004cff:	eb 03                	jmp    c0004d04 <f_rename+0xe3>
c0004d01:	83 f8 04             	cmp    eax,0x4
c0004d04:	0f 85 b1 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004d0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d0e:	e8 23 ed ff ff       	call   c0003a36 <dir_register>
c0004d13:	85 c0                	test   eax,eax
c0004d15:	0f 85 a0 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004d1b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004d22:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004d26:	b9 13 00 00 00       	mov    ecx,0x13
c0004d2b:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004d2e:	e8 32 d1 ff ff       	call   c0001e65 <mem_cpy>
c0004d33:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004d37:	88 c2                	mov    dl,al
c0004d39:	80 e2 10             	and    dl,0x10
c0004d3c:	75 02                	jne    c0004d40 <f_rename+0x11f>
c0004d3e:	0c 20                	or     al,0x20
c0004d40:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004d43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d4b:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004d4f:	74 54                	je     c0004da5 <f_rename+0x184>
c0004d51:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004d55:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004d59:	74 4a                	je     c0004da5 <f_rename+0x184>
c0004d5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004d5f:	89 da                	mov    edx,ebx
c0004d61:	8a 07                	mov    al,BYTE PTR [edi]
c0004d63:	e8 5b e4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004d68:	89 c2                	mov    edx,eax
c0004d6a:	89 f8                	mov    eax,edi
c0004d6c:	e8 07 d3 ff ff       	call   c0002078 <clst2sect>
c0004d71:	89 c2                	mov    edx,eax
c0004d73:	b8 02 00 00 00       	mov    eax,0x2
c0004d78:	85 d2                	test   edx,edx
c0004d7a:	74 3f                	je     c0004dbb <f_rename+0x19a>
c0004d7c:	89 f8                	mov    eax,edi
c0004d7e:	e8 ca d5 ff ff       	call   c000234d <move_window>
c0004d83:	85 c0                	test   eax,eax
c0004d85:	75 34                	jne    c0004dbb <f_rename+0x19a>
c0004d87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004d8f:	75 14                	jne    c0004da5 <f_rename+0x184>
c0004d91:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004d95:	8d 50 54             	lea    edx,[eax+0x54]
c0004d98:	e8 4e e4 ff ff       	call   c00031eb <st_clust.isra.1>
c0004d9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da5:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004da9:	e8 70 ea ff ff       	call   c000381e <dir_remove>
c0004dae:	85 c0                	test   eax,eax
c0004db0:	75 09                	jne    c0004dbb <f_rename+0x19a>
c0004db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db6:	e8 d5 df ff ff       	call   c0002d90 <sync_fs>
c0004dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004dbf:	83 ec 0c             	sub    esp,0xc
c0004dc2:	56                   	push   esi
c0004dc3:	e8 bc 0d 00 00       	call   c0005b84 <ff_memfree>
c0004dc8:	83 c4 10             	add    esp,0x10
c0004dcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcf:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004dd5:	5b                   	pop    ebx
c0004dd6:	5e                   	pop    esi
c0004dd7:	5f                   	pop    edi
c0004dd8:	c3                   	ret    

c0004dd9 <f_chmod>:
c0004dd9:	56                   	push   esi
c0004dda:	b9 02 00 00 00       	mov    ecx,0x2
c0004ddf:	53                   	push   ebx
c0004de0:	83 ec 54             	sub    esp,0x54
c0004de3:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004de7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004deb:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004def:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004df3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004df7:	e8 ae d6 ff ff       	call   c00024aa <mount_volume>
c0004dfc:	85 c0                	test   eax,eax
c0004dfe:	0f 85 81 00 00 00    	jne    c0004e85 <f_chmod+0xac>
c0004e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e08:	83 ec 0c             	sub    esp,0xc
c0004e0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e0f:	68 00 02 00 00       	push   0x200
c0004e14:	e8 57 0d 00 00       	call   c0005b70 <ff_memalloc>
c0004e19:	83 c4 10             	add    esp,0x10
c0004e1c:	89 c6                	mov    esi,eax
c0004e1e:	b8 11 00 00 00       	mov    eax,0x11
c0004e23:	85 f6                	test   esi,esi
c0004e25:	74 5e                	je     c0004e85 <f_chmod+0xac>
c0004e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e32:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e36:	e8 5f eb ff ff       	call   c000399a <follow_path>
c0004e3b:	85 c0                	test   eax,eax
c0004e3d:	75 32                	jne    c0004e71 <f_chmod+0x98>
c0004e3f:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e44:	b8 06 00 00 00       	mov    eax,0x6
c0004e49:	75 26                	jne    c0004e71 <f_chmod+0x98>
c0004e4b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e4f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004e52:	30 c3                	xor    bl,al
c0004e54:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004e58:	80 e3 27             	and    bl,0x27
c0004e5b:	30 c3                	xor    bl,al
c0004e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e61:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004e64:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e6c:	e8 1f df ff ff       	call   c0002d90 <sync_fs>
c0004e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e75:	83 ec 0c             	sub    esp,0xc
c0004e78:	56                   	push   esi
c0004e79:	e8 06 0d 00 00       	call   c0005b84 <ff_memfree>
c0004e7e:	83 c4 10             	add    esp,0x10
c0004e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e85:	83 c4 54             	add    esp,0x54
c0004e88:	5b                   	pop    ebx
c0004e89:	5e                   	pop    esi
c0004e8a:	c3                   	ret    

c0004e8b <f_utime>:
c0004e8b:	56                   	push   esi
c0004e8c:	b9 02 00 00 00       	mov    ecx,0x2
c0004e91:	53                   	push   ebx
c0004e92:	83 ec 54             	sub    esp,0x54
c0004e95:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e99:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004e9d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ea1:	e8 04 d6 ff ff       	call   c00024aa <mount_volume>
c0004ea6:	85 c0                	test   eax,eax
c0004ea8:	0f 85 85 00 00 00    	jne    c0004f33 <f_utime+0xa8>
c0004eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eb2:	83 ec 0c             	sub    esp,0xc
c0004eb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eb9:	68 00 02 00 00       	push   0x200
c0004ebe:	e8 ad 0c 00 00       	call   c0005b70 <ff_memalloc>
c0004ec3:	83 c4 10             	add    esp,0x10
c0004ec6:	89 c3                	mov    ebx,eax
c0004ec8:	b8 11 00 00 00       	mov    eax,0x11
c0004ecd:	85 db                	test   ebx,ebx
c0004ecf:	74 62                	je     c0004f33 <f_utime+0xa8>
c0004ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ed9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004edc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee0:	e8 b5 ea ff ff       	call   c000399a <follow_path>
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	75 36                	jne    c0004f1f <f_utime+0x94>
c0004ee9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004eee:	b8 06 00 00 00       	mov    eax,0x6
c0004ef3:	75 2a                	jne    c0004f1f <f_utime+0x94>
c0004ef5:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004ef9:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004efd:	c1 e2 10             	shl    edx,0x10
c0004f00:	09 c2                	or     edx,eax
c0004f02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f06:	83 c0 16             	add    eax,0x16
c0004f09:	e8 54 cf ff ff       	call   c0001e62 <st_dword>
c0004f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f12:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1a:	e8 71 de ff ff       	call   c0002d90 <sync_fs>
c0004f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f23:	83 ec 0c             	sub    esp,0xc
c0004f26:	53                   	push   ebx
c0004f27:	e8 58 0c 00 00       	call   c0005b84 <ff_memfree>
c0004f2c:	83 c4 10             	add    esp,0x10
c0004f2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f33:	83 c4 54             	add    esp,0x54
c0004f36:	5b                   	pop    ebx
c0004f37:	5e                   	pop    esi
c0004f38:	c3                   	ret    

c0004f39 <f_getlabel>:
c0004f39:	55                   	push   ebp
c0004f3a:	31 c9                	xor    ecx,ecx
c0004f3c:	57                   	push   edi
c0004f3d:	56                   	push   esi
c0004f3e:	53                   	push   ebx
c0004f3f:	83 ec 5c             	sub    esp,0x5c
c0004f42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f46:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f4a:	e8 5b d5 ff ff       	call   c00024aa <mount_volume>
c0004f4f:	85 c0                	test   eax,eax
c0004f51:	89 c3                	mov    ebx,eax
c0004f53:	0f 85 de 00 00 00    	jne    c0005037 <f_getlabel+0xfe>
c0004f59:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004f5e:	0f 84 d3 00 00 00    	je     c0005037 <f_getlabel+0xfe>
c0004f64:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f70:	31 d2                	xor    edx,edx
c0004f72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004f76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f7a:	e8 96 e3 ff ff       	call   c0003315 <dir_sdi>
c0004f7f:	85 c0                	test   eax,eax
c0004f81:	89 c3                	mov    ebx,eax
c0004f83:	0f 85 a0 00 00 00    	jne    c0005029 <f_getlabel+0xf0>
c0004f89:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f8d:	ba 01 00 00 00       	mov    edx,0x1
c0004f92:	e8 6a e7 ff ff       	call   c0003701 <dir_read>
c0004f97:	85 c0                	test   eax,eax
c0004f99:	89 c3                	mov    ebx,eax
c0004f9b:	0f 85 88 00 00 00    	jne    c0005029 <f_getlabel+0xf0>
c0004fa1:	31 f6                	xor    esi,esi
c0004fa3:	31 c9                	xor    ecx,ecx
c0004fa5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004fa9:	8d 79 01             	lea    edi,[ecx+0x1]
c0004fac:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb5:	89 c2                	mov    edx,eax
c0004fb7:	e8 fc ce ff ff       	call   c0001eb8 <dbc_1st>
c0004fbc:	85 c0                	test   eax,eax
c0004fbe:	74 16                	je     c0004fd6 <f_getlabel+0x9d>
c0004fc0:	83 ff 0b             	cmp    edi,0xb
c0004fc3:	74 11                	je     c0004fd6 <f_getlabel+0x9d>
c0004fc5:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c0004fca:	c1 e2 08             	shl    edx,0x8
c0004fcd:	8d 79 02             	lea    edi,[ecx+0x2]
c0004fd0:	09 d0                	or     eax,edx
c0004fd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fd6:	50                   	push   eax
c0004fd7:	50                   	push   eax
c0004fd8:	68 b5 01 00 00       	push   0x1b5
c0004fdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004fe1:	e8 4e 0c 00 00       	call   c0005c34 <ff_oem2uni>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	0f b7 c0             	movzx  eax,ax
c0004fec:	85 c0                	test   eax,eax
c0004fee:	74 22                	je     c0005012 <f_getlabel+0xd9>
c0004ff0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004ff4:	b9 04 00 00 00       	mov    ecx,0x4
c0004ff9:	01 f2                	add    edx,esi
c0004ffb:	e8 88 cf ff ff       	call   c0001f88 <put_utf>
c0005000:	84 c0                	test   al,al
c0005002:	74 0e                	je     c0005012 <f_getlabel+0xd9>
c0005004:	0f b6 c0             	movzx  eax,al
c0005007:	01 c6                	add    esi,eax
c0005009:	83 ff 0b             	cmp    edi,0xb
c000500c:	74 06                	je     c0005014 <f_getlabel+0xdb>
c000500e:	89 f9                	mov    ecx,edi
c0005010:	eb 93                	jmp    c0004fa5 <f_getlabel+0x6c>
c0005012:	31 f6                	xor    esi,esi
c0005014:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c0005018:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c000501c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000501f:	74 16                	je     c0005037 <f_getlabel+0xfe>
c0005021:	4e                   	dec    esi
c0005022:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005025:	74 f1                	je     c0005018 <f_getlabel+0xdf>
c0005027:	eb 0e                	jmp    c0005037 <f_getlabel+0xfe>
c0005029:	83 fb 04             	cmp    ebx,0x4
c000502c:	75 09                	jne    c0005037 <f_getlabel+0xfe>
c000502e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005032:	31 db                	xor    ebx,ebx
c0005034:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005037:	85 db                	test   ebx,ebx
c0005039:	75 48                	jne    c0005083 <f_getlabel+0x14a>
c000503b:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005040:	74 41                	je     c0005083 <f_getlabel+0x14a>
c0005042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005046:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005049:	e8 ff d2 ff ff       	call   c000234d <move_window>
c000504e:	85 c0                	test   eax,eax
c0005050:	89 c3                	mov    ebx,eax
c0005052:	75 2f                	jne    c0005083 <f_getlabel+0x14a>
c0005054:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005058:	b8 43 00 00 00       	mov    eax,0x43
c000505d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000505f:	80 f9 03             	cmp    cl,0x3
c0005062:	74 10                	je     c0005074 <f_getlabel+0x13b>
c0005064:	80 f9 04             	cmp    cl,0x4
c0005067:	b8 64 00 00 00       	mov    eax,0x64
c000506c:	b9 27 00 00 00       	mov    ecx,0x27
c0005071:	0f 45 c1             	cmovne eax,ecx
c0005074:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005078:	e8 c9 cd ff ff       	call   c0001e46 <ld_dword>
c000507d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005081:	89 07                	mov    DWORD PTR [edi],eax
c0005083:	83 c4 5c             	add    esp,0x5c
c0005086:	89 d8                	mov    eax,ebx
c0005088:	5b                   	pop    ebx
c0005089:	5e                   	pop    esi
c000508a:	5f                   	pop    edi
c000508b:	5d                   	pop    ebp
c000508c:	c3                   	ret    

c000508d <f_setlabel>:
c000508d:	56                   	push   esi
c000508e:	b9 02 00 00 00       	mov    ecx,0x2
c0005093:	53                   	push   ebx
c0005094:	83 ec 64             	sub    esp,0x64
c0005097:	8d 54 24 14          	lea    edx,[esp+0x14]
c000509b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000509f:	e8 06 d4 ff ff       	call   c00024aa <mount_volume>
c00050a4:	85 c0                	test   eax,eax
c00050a6:	89 c6                	mov    esi,eax
c00050a8:	0f 85 67 01 00 00    	jne    c0005215 <f_setlabel+0x188>
c00050ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00050b3:	ba 20 00 00 00       	mov    edx,0x20
c00050b8:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00050bc:	31 db                	xor    ebx,ebx
c00050be:	e8 b7 cd ff ff       	call   c0001e7a <mem_set>
c00050c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00050c7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00050ca:	76 63                	jbe    c000512f <f_setlabel+0xa2>
c00050cc:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d0:	e8 e9 cd ff ff       	call   c0001ebe <tchar2uni>
c00050d5:	3d ff ff 00 00       	cmp    eax,0xffff
c00050da:	76 0a                	jbe    c00050e6 <f_setlabel+0x59>
c00050dc:	be 06 00 00 00       	mov    esi,0x6
c00050e1:	e9 2f 01 00 00       	jmp    c0005215 <f_setlabel+0x188>
c00050e6:	83 ec 0c             	sub    esp,0xc
c00050e9:	50                   	push   eax
c00050ea:	e8 bd 0b 00 00       	call   c0005cac <ff_wtoupper>
c00050ef:	5a                   	pop    edx
c00050f0:	59                   	pop    ecx
c00050f1:	68 b5 01 00 00       	push   0x1b5
c00050f6:	50                   	push   eax
c00050f7:	e8 9c 0a 00 00       	call   c0005b98 <ff_uni2oem>
c00050fc:	83 c4 10             	add    esp,0x10
c00050ff:	0f b7 c8             	movzx  ecx,ax
c0005102:	85 c9                	test   ecx,ecx
c0005104:	74 d6                	je     c00050dc <f_setlabel+0x4f>
c0005106:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000510a:	89 ca                	mov    edx,ecx
c000510c:	b8 f0 f0 01 c0       	mov    eax,0xc001f0f0
c0005111:	e8 91 cd ff ff       	call   c0001ea7 <chk_chr>
c0005116:	85 c0                	test   eax,eax
c0005118:	75 c2                	jne    c00050dc <f_setlabel+0x4f>
c000511a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000511e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0005124:	0f 87 c9 00 00 00    	ja     c00051f3 <f_setlabel+0x166>
c000512a:	e9 dc 00 00 00       	jmp    c000520b <f_setlabel+0x17e>
c000512f:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c0005134:	74 a6                	je     c00050dc <f_setlabel+0x4f>
c0005136:	85 db                	test   ebx,ebx
c0005138:	74 0e                	je     c0005148 <f_setlabel+0xbb>
c000513a:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c000513f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005142:	75 04                	jne    c0005148 <f_setlabel+0xbb>
c0005144:	89 c3                	mov    ebx,eax
c0005146:	eb ee                	jmp    c0005136 <f_setlabel+0xa9>
c0005148:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0005150:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005154:	31 d2                	xor    edx,edx
c0005156:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000515a:	8d 44 24 30          	lea    eax,[esp+0x30]
c000515e:	e8 b2 e1 ff ff       	call   c0003315 <dir_sdi>
c0005163:	85 c0                	test   eax,eax
c0005165:	89 c6                	mov    esi,eax
c0005167:	0f 85 a8 00 00 00    	jne    c0005215 <f_setlabel+0x188>
c000516d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005171:	ba 01 00 00 00       	mov    edx,0x1
c0005176:	e8 86 e5 ff ff       	call   c0003701 <dir_read>
c000517b:	85 c0                	test   eax,eax
c000517d:	75 18                	jne    c0005197 <f_setlabel+0x10a>
c000517f:	85 db                	test   ebx,ebx
c0005181:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005185:	74 0b                	je     c0005192 <f_setlabel+0x105>
c0005187:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000518b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005190:	eb 47                	jmp    c00051d9 <f_setlabel+0x14c>
c0005192:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005195:	eb 47                	jmp    c00051de <f_setlabel+0x151>
c0005197:	83 f8 04             	cmp    eax,0x4
c000519a:	75 53                	jne    c00051ef <f_setlabel+0x162>
c000519c:	85 db                	test   ebx,ebx
c000519e:	74 75                	je     c0005215 <f_setlabel+0x188>
c00051a0:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051a4:	ba 01 00 00 00       	mov    edx,0x1
c00051a9:	e8 f2 e4 ff ff       	call   c00036a0 <dir_alloc>
c00051ae:	85 c0                	test   eax,eax
c00051b0:	89 c6                	mov    esi,eax
c00051b2:	75 61                	jne    c0005215 <f_setlabel+0x188>
c00051b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b8:	b9 20 00 00 00       	mov    ecx,0x20
c00051bd:	31 d2                	xor    edx,edx
c00051bf:	e8 b6 cc ff ff       	call   c0001e7a <mem_set>
c00051c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00051cd:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c00051d1:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00051d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051d9:	e8 87 cc ff ff       	call   c0001e65 <mem_cpy>
c00051de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051ea:	e8 a1 db ff ff       	call   c0002d90 <sync_fs>
c00051ef:	89 c6                	mov    esi,eax
c00051f1:	eb 22                	jmp    c0005215 <f_setlabel+0x188>
c00051f3:	83 fb 09             	cmp    ebx,0x9
c00051f6:	0f 87 e0 fe ff ff    	ja     c00050dc <f_setlabel+0x4f>
c00051fc:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005200:	43                   	inc    ebx
c0005201:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005205:	43                   	inc    ebx
c0005206:	e9 b8 fe ff ff       	jmp    c00050c3 <f_setlabel+0x36>
c000520b:	83 fb 0a             	cmp    ebx,0xa
c000520e:	76 f1                	jbe    c0005201 <f_setlabel+0x174>
c0005210:	e9 c7 fe ff ff       	jmp    c00050dc <f_setlabel+0x4f>
c0005215:	83 c4 64             	add    esp,0x64
c0005218:	89 f0                	mov    eax,esi
c000521a:	5b                   	pop    ebx
c000521b:	5e                   	pop    esi
c000521c:	c3                   	ret    

c000521d <f_expand>:
c000521d:	55                   	push   ebp
c000521e:	57                   	push   edi
c000521f:	56                   	push   esi
c0005220:	53                   	push   ebx
c0005221:	83 ec 2c             	sub    esp,0x2c
c0005224:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0005228:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000522c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005230:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0005234:	89 d8                	mov    eax,ebx
c0005236:	e8 67 d0 ff ff       	call   c00022a2 <validate>
c000523b:	85 c0                	test   eax,eax
c000523d:	89 c6                	mov    esi,eax
c000523f:	0f 85 2c 01 00 00    	jne    c0005371 <f_expand+0x154>
c0005245:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005249:	85 f6                	test   esi,esi
c000524b:	0f 85 20 01 00 00    	jne    c0005371 <f_expand+0x154>
c0005251:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005256:	75 0a                	jne    c0005262 <f_expand+0x45>
c0005258:	be 07 00 00 00       	mov    esi,0x7
c000525d:	e9 0f 01 00 00       	jmp    c0005371 <f_expand+0x154>
c0005262:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005266:	75 f0                	jne    c0005258 <f_expand+0x3b>
c0005268:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000526c:	74 ea                	je     c0005258 <f_expand+0x3b>
c000526e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005272:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005276:	c1 e7 09             	shl    edi,0x9
c0005279:	8d 47 ff             	lea    eax,[edi-0x1]
c000527c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005280:	0f 95 c0             	setne  al
c0005283:	31 d2                	xor    edx,edx
c0005285:	0f b6 e8             	movzx  ebp,al
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	f7 f7                	div    edi
c000528e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005291:	01 e8                	add    eax,ebp
c0005293:	83 ff 01             	cmp    edi,0x1
c0005296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000529a:	76 05                	jbe    c00052a1 <f_expand+0x84>
c000529c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000529f:	77 05                	ja     c00052a6 <f_expand+0x89>
c00052a1:	bf 02 00 00 00       	mov    edi,0x2
c00052a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00052a9:	89 fd                	mov    ebp,edi
c00052ab:	31 c9                	xor    ecx,ecx
c00052ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00052b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00052b3:	89 ea                	mov    edx,ebp
c00052b5:	45                   	inc    ebp
c00052b6:	e8 58 df ff ff       	call   c0003213 <get_fat.isra.2>
c00052bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00052c3:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00052c6:	77 05                	ja     c00052cd <f_expand+0xb0>
c00052c8:	bd 02 00 00 00       	mov    ebp,0x2
c00052cd:	83 f8 01             	cmp    eax,0x1
c00052d0:	74 20                	je     c00052f2 <f_expand+0xd5>
c00052d2:	83 f8 ff             	cmp    eax,0xffffffff
c00052d5:	74 22                	je     c00052f9 <f_expand+0xdc>
c00052d7:	85 c0                	test   eax,eax
c00052d9:	75 09                	jne    c00052e4 <f_expand+0xc7>
c00052db:	41                   	inc    ecx
c00052dc:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00052e0:	75 07                	jne    c00052e9 <f_expand+0xcc>
c00052e2:	eb 1c                	jmp    c0005300 <f_expand+0xe3>
c00052e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00052e7:	31 c9                	xor    ecx,ecx
c00052e9:	39 fd                	cmp    ebp,edi
c00052eb:	75 c0                	jne    c00052ad <f_expand+0x90>
c00052ed:	e9 66 ff ff ff       	jmp    c0005258 <f_expand+0x3b>
c00052f2:	be 02 00 00 00       	mov    esi,0x2
c00052f7:	eb 78                	jmp    c0005371 <f_expand+0x154>
c00052f9:	be 01 00 00 00       	mov    esi,0x1
c00052fe:	eb 71                	jmp    c0005371 <f_expand+0x154>
c0005300:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005305:	74 2b                	je     c0005332 <f_expand+0x115>
c0005307:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000530a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000530e:	85 ed                	test   ebp,ebp
c0005310:	74 24                	je     c0005336 <f_expand+0x119>
c0005312:	83 c9 ff             	or     ecx,0xffffffff
c0005315:	83 fd 01             	cmp    ebp,0x1
c0005318:	74 03                	je     c000531d <f_expand+0x100>
c000531a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000531d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005321:	89 fa                	mov    edx,edi
c0005323:	e8 7f d4 ff ff       	call   c00027a7 <put_fat>
c0005328:	85 c0                	test   eax,eax
c000532a:	75 43                	jne    c000536f <f_expand+0x152>
c000532c:	89 f8                	mov    eax,edi
c000532e:	4d                   	dec    ebp
c000532f:	47                   	inc    edi
c0005330:	eb dc                	jmp    c000530e <f_expand+0xf1>
c0005332:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005335:	48                   	dec    eax
c0005336:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000533a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000533f:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005342:	74 2d                	je     c0005371 <f_expand+0x154>
c0005344:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005347:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000534b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005355:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005358:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000535b:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000535e:	39 c8                	cmp    eax,ecx
c0005360:	77 0f                	ja     c0005371 <f_expand+0x154>
c0005362:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005366:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c000536a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000536d:	eb 02                	jmp    c0005371 <f_expand+0x154>
c000536f:	89 c6                	mov    esi,eax
c0005371:	83 c4 2c             	add    esp,0x2c
c0005374:	89 f0                	mov    eax,esi
c0005376:	5b                   	pop    ebx
c0005377:	5e                   	pop    esi
c0005378:	5f                   	pop    edi
c0005379:	5d                   	pop    ebp
c000537a:	c3                   	ret    

c000537b <f_mkfs>:
c000537b:	55                   	push   ebp
c000537c:	57                   	push   edi
c000537d:	56                   	push   esi
c000537e:	53                   	push   ebx
c000537f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005384:	83 ec 4c             	sub    esp,0x4c
c0005387:	8d 44 24 60          	lea    eax,[esp+0x60]
c000538b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000538f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005393:	e8 c5 ce ff ff       	call   c000225d <get_ldnumber>
c0005398:	85 c0                	test   eax,eax
c000539a:	0f 88 c6 07 00 00    	js     c0005b66 <f_mkfs+0x7eb>
c00053a0:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c00053a7:	85 d2                	test   edx,edx
c00053a9:	74 03                	je     c00053ae <f_mkfs+0x33>
c00053ab:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00053ae:	85 f6                	test   esi,esi
c00053b0:	75 05                	jne    c00053b7 <f_mkfs+0x3c>
c00053b2:	be e0 f0 01 c0       	mov    esi,0xc001f0e0
c00053b7:	0f b6 c0             	movzx  eax,al
c00053ba:	83 ec 0c             	sub    esp,0xc
c00053bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00053c1:	bb 03 00 00 00       	mov    ebx,0x3
c00053c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053ca:	e8 1c ca ff ff       	call   c0001deb <disk_initialize>
c00053cf:	83 c4 10             	add    esp,0x10
c00053d2:	88 c2                	mov    dl,al
c00053d4:	80 e2 01             	and    dl,0x1
c00053d7:	84 d2                	test   dl,dl
c00053d9:	0f 85 87 07 00 00    	jne    c0005b66 <f_mkfs+0x7eb>
c00053df:	24 04                	and    al,0x4
c00053e1:	bb 0a 00 00 00       	mov    ebx,0xa
c00053e6:	0f 85 7a 07 00 00    	jne    c0005b66 <f_mkfs+0x7eb>
c00053ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00053ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00053f3:	85 c0                	test   eax,eax
c00053f5:	75 20                	jne    c0005417 <f_mkfs+0x9c>
c00053f7:	51                   	push   ecx
c00053f8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00053fc:	50                   	push   eax
c00053fd:	6a 03                	push   0x3
c00053ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005403:	e8 12 ca ff ff       	call   c0001e1a <disk_ioctl>
c0005408:	83 c4 10             	add    esp,0x10
c000540b:	85 c0                	test   eax,eax
c000540d:	74 08                	je     c0005417 <f_mkfs+0x9c>
c000540f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005417:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000541b:	8d 42 ff             	lea    eax,[edx-0x1]
c000541e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005423:	77 04                	ja     c0005429 <f_mkfs+0xae>
c0005425:	85 c2                	test   edx,eax
c0005427:	74 08                	je     c0005431 <f_mkfs+0xb6>
c0005429:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005431:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0005434:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005438:	fe c8                	dec    al
c000543a:	3c 01                	cmp    al,0x1
c000543c:	76 05                	jbe    c0005443 <f_mkfs+0xc8>
c000543e:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005443:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0005446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000544a:	48                   	dec    eax
c000544b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005450:	77 15                	ja     c0005467 <f_mkfs+0xec>
c0005452:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005457:	b8 00 02 00 00       	mov    eax,0x200
c000545c:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c0005461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005465:	eb 08                	jmp    c000546f <f_mkfs+0xf4>
c0005467:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c000546f:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005472:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005478:	77 0f                	ja     c0005489 <f_mkfs+0x10e>
c000547a:	8d 47 ff             	lea    eax,[edi-0x1]
c000547d:	85 f8                	test   eax,edi
c000547f:	b8 00 00 00 00       	mov    eax,0x0
c0005484:	0f 45 f8             	cmovne edi,eax
c0005487:	eb 02                	jmp    c000548b <f_mkfs+0x110>
c0005489:	31 ff                	xor    edi,edi
c000548b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005493:	77 0a                	ja     c000549f <f_mkfs+0x124>
c0005495:	bb 11 00 00 00       	mov    ebx,0x11
c000549a:	e9 c7 06 00 00       	jmp    c0005b66 <f_mkfs+0x7eb>
c000549f:	85 ed                	test   ebp,ebp
c00054a1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00054a3:	89 ee                	mov    esi,ebp
c00054a5:	75 1b                	jne    c00054c2 <f_mkfs+0x147>
c00054a7:	83 ec 0c             	sub    esp,0xc
c00054aa:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00054ae:	25 00 fe ff ff       	and    eax,0xfffffe00
c00054b3:	50                   	push   eax
c00054b4:	e8 b7 06 00 00       	call   c0005b70 <ff_memalloc>
c00054b9:	83 c4 10             	add    esp,0x10
c00054bc:	85 c0                	test   eax,eax
c00054be:	89 c6                	mov    esi,eax
c00054c0:	74 d3                	je     c0005495 <f_mkfs+0x11a>
c00054c2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00054ca:	52                   	push   edx
c00054cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c00054cf:	50                   	push   eax
c00054d0:	6a 01                	push   0x1
c00054d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d6:	e8 3f c9 ff ff       	call   c0001e1a <disk_ioctl>
c00054db:	83 c4 10             	add    esp,0x10
c00054de:	85 c0                	test   eax,eax
c00054e0:	0f 85 27 06 00 00    	jne    c0005b0d <f_mkfs+0x792>
c00054e6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00054ee:	88 d8                	mov    al,bl
c00054f0:	24 08                	and    al,0x8
c00054f2:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00054f6:	75 18                	jne    c0005510 <f_mkfs+0x195>
c00054f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00054fc:	83 f8 3f             	cmp    eax,0x3f
c00054ff:	76 0f                	jbe    c0005510 <f_mkfs+0x195>
c0005501:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005509:	83 e8 3f             	sub    eax,0x3f
c000550c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005510:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	83 f8 7f             	cmp    eax,0x7f
c000551b:	0f 86 61 02 00 00    	jbe    c0005782 <f_mkfs+0x407>
c0005521:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005527:	b9 80 00 00 00       	mov    ecx,0x80
c000552c:	77 05                	ja     c0005533 <f_mkfs+0x1b8>
c000552e:	c1 ef 09             	shr    edi,0x9
c0005531:	89 f9                	mov    ecx,edi
c0005533:	88 d8                	mov    al,bl
c0005535:	24 01                	and    al,0x1
c0005537:	80 e3 02             	and    bl,0x2
c000553a:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000553e:	74 0a                	je     c000554a <f_mkfs+0x1cf>
c0005540:	84 c0                	test   al,al
c0005542:	0f 84 58 01 00 00    	je     c00056a0 <f_mkfs+0x325>
c0005548:	eb 3b                	jmp    c0005585 <f_mkfs+0x20a>
c000554a:	84 c0                	test   al,al
c000554c:	bb 13 00 00 00       	mov    ebx,0x13
c0005551:	75 32                	jne    c0005585 <f_mkfs+0x20a>
c0005553:	e9 cc 05 00 00       	jmp    c0005b24 <f_mkfs+0x7a9>
c0005558:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000555d:	0f 85 18 02 00 00    	jne    c000577b <f_mkfs+0x400>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 86 ee 01 00 00    	jbe    c000575c <f_mkfs+0x3e1>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 c0 05 00 00    	jne    c0005b36 <f_mkfs+0x7bb>
c0005576:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000557a:	01 c9                	add    ecx,ecx
c000557c:	83 f9 40             	cmp    ecx,0x40
c000557f:	0f 87 c1 05 00 00    	ja     c0005b46 <f_mkfs+0x7cb>
c0005585:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005589:	85 c9                	test   ecx,ecx
c000558b:	75 1f                	jne    c00055ac <f_mkfs+0x231>
c000558d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005595:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005599:	b8 c0 f0 01 c0       	mov    eax,0xc001f0c0
c000559e:	c1 eb 0c             	shr    ebx,0xc
c00055a1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00055a4:	85 d2                	test   edx,edx
c00055a6:	0f 85 62 01 00 00    	jne    c000570e <f_mkfs+0x393>
c00055ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00055b0:	31 d2                	xor    edx,edx
c00055b2:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00055b6:	3d f5 0f 00 00       	cmp    eax,0xff5
c00055bb:	0f 86 65 01 00 00    	jbe    c0005726 <f_mkfs+0x3ab>
c00055c1:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00055c6:	83 c0 02             	add    eax,0x2
c00055c9:	01 c0                	add    eax,eax
c00055cb:	05 ff 01 00 00       	add    eax,0x1ff
c00055d0:	bf 01 00 00 00       	mov    edi,0x1
c00055d5:	c1 e8 09             	shr    eax,0x9
c00055d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00055dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00055e0:	c1 e0 05             	shl    eax,0x5
c00055e3:	c1 e8 09             	shr    eax,0x9
c00055e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00055ea:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00055ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00055f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00055f7:	01 f8                	add    eax,edi
c00055f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005601:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005606:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000560a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000560e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005616:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000561a:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c000561e:	f7 d8                	neg    eax
c0005620:	21 c3                	and    ebx,eax
c0005622:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005626:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000562b:	0f 85 08 01 00 00    	jne    c0005739 <f_mkfs+0x3be>
c0005631:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005635:	01 df                	add    edi,ebx
c0005637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000563b:	c1 e0 04             	shl    eax,0x4
c000563e:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005642:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005646:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000564a:	0f 82 32 01 00 00    	jb     c0005782 <f_mkfs+0x407>
c0005650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005654:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005658:	29 f8                	sub    eax,edi
c000565a:	89 c2                	mov    edx,eax
c000565c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005660:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005665:	29 c2                	sub    edx,eax
c0005667:	89 d0                	mov    eax,edx
c0005669:	31 d2                	xor    edx,edx
c000566b:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c000566f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005674:	89 c3                	mov    ebx,eax
c0005676:	0f 85 dc fe ff ff    	jne    c0005558 <f_mkfs+0x1dd>
c000567c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005681:	0f 87 0a 01 00 00    	ja     c0005791 <f_mkfs+0x416>
c0005687:	85 c9                	test   ecx,ecx
c0005689:	0f 85 f3 00 00 00    	jne    c0005782 <f_mkfs+0x407>
c000568f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005694:	0f 86 e8 00 00 00    	jbe    c0005782 <f_mkfs+0x407>
c000569a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000569e:	d1 e9                	shr    ecx,1
c00056a0:	85 c9                	test   ecx,ecx
c00056a2:	89 cb                	mov    ebx,ecx
c00056a4:	75 25                	jne    c00056cb <f_mkfs+0x350>
c00056a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00056aa:	b8 d0 f0 01 c0       	mov    eax,0xc001f0d0
c00056af:	b9 01 00 00 00       	mov    ecx,0x1
c00056b4:	c1 eb 11             	shr    ebx,0x11
c00056b7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00056ba:	85 d2                	test   edx,edx
c00056bc:	74 0b                	je     c00056c9 <f_mkfs+0x34e>
c00056be:	83 c0 02             	add    eax,0x2
c00056c1:	39 da                	cmp    edx,ebx
c00056c3:	77 04                	ja     c00056c9 <f_mkfs+0x34e>
c00056c5:	01 c9                	add    ecx,ecx
c00056c7:	eb ee                	jmp    c00056b7 <f_mkfs+0x33c>
c00056c9:	31 db                	xor    ebx,ebx
c00056cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cf:	31 d2                	xor    edx,edx
c00056d1:	f7 f1                	div    ecx
c00056d3:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00056da:	2d f6 ff 00 00       	sub    eax,0xfff6
c00056df:	c1 ea 09             	shr    edx,0x9
c00056e2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00056e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00056eb:	0f 87 91 00 00 00    	ja     c0005782 <f_mkfs+0x407>
c00056f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00056f5:	bf 20 00 00 00       	mov    edi,0x20
c00056fa:	89 d9                	mov    ecx,ebx
c00056fc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005704:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005709:	e9 dc fe ff ff       	jmp    c00055ea <f_mkfs+0x26f>
c000570e:	83 c0 02             	add    eax,0x2
c0005711:	39 da                	cmp    edx,ebx
c0005713:	0f 87 93 fe ff ff    	ja     c00055ac <f_mkfs+0x231>
c0005719:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000571d:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c0005721:	e9 7b fe ff ff       	jmp    c00055a1 <f_mkfs+0x226>
c0005726:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000572b:	8d 04 40             	lea    eax,[eax+eax*2]
c000572e:	40                   	inc    eax
c000572f:	d1 e8                	shr    eax,1
c0005731:	83 c0 03             	add    eax,0x3
c0005734:	e9 92 fe ff ff       	jmp    c00055cb <f_mkfs+0x250>
c0005739:	31 d2                	xor    edx,edx
c000573b:	89 d8                	mov    eax,ebx
c000573d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005741:	85 d2                	test   edx,edx
c0005743:	74 06                	je     c000574b <f_mkfs+0x3d0>
c0005745:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005749:	4b                   	dec    ebx
c000574a:	47                   	inc    edi
c000574b:	89 d8                	mov    eax,ebx
c000574d:	31 d2                	xor    edx,edx
c000574f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005753:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0005757:	e9 db fe ff ff       	jmp    c0005637 <f_mkfs+0x2bc>
c000575c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005761:	77 2e                	ja     c0005791 <f_mkfs+0x416>
c0005763:	85 c9                	test   ecx,ecx
c0005765:	75 1b                	jne    c0005782 <f_mkfs+0x407>
c0005767:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000576b:	01 c9                	add    ecx,ecx
c000576d:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005773:	0f 86 0c fe ff ff    	jbe    c0005585 <f_mkfs+0x20a>
c0005779:	eb 07                	jmp    c0005782 <f_mkfs+0x407>
c000577b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005780:	76 0a                	jbe    c000578c <f_mkfs+0x411>
c0005782:	bb 0e 00 00 00       	mov    ebx,0xe
c0005787:	e9 98 03 00 00       	jmp    c0005b24 <f_mkfs+0x7a9>
c000578c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005791:	31 d2                	xor    edx,edx
c0005793:	b9 00 02 00 00       	mov    ecx,0x200
c0005798:	89 f0                	mov    eax,esi
c000579a:	e8 db c6 ff ff       	call   c0001e7a <mem_set>
c000579f:	b9 0b 00 00 00       	mov    ecx,0xb
c00057a4:	ba 72 f0 01 c0       	mov    edx,0xc001f072
c00057a9:	89 f0                	mov    eax,esi
c00057ab:	e8 b5 c6 ff ff       	call   c0001e65 <mem_cpy>
c00057b0:	8d 46 0b             	lea    eax,[esi+0xb]
c00057b3:	ba 00 02 00 00       	mov    edx,0x200
c00057b8:	e8 a1 c6 ff ff       	call   c0001e5e <st_word>
c00057bd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00057c1:	0f b7 d7             	movzx  edx,di
c00057c4:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00057c7:	8d 46 0e             	lea    eax,[esi+0xe]
c00057ca:	e8 8f c6 ff ff       	call   c0001e5e <st_word>
c00057cf:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00057d3:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d8:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00057db:	b8 00 00 00 00       	mov    eax,0x0
c00057e0:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	8d 46 11             	lea    eax,[esi+0x11]
c00057ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00057f0:	e8 69 c6 ff ff       	call   c0001e5e <st_word>
c00057f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057f9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00057ff:	77 0a                	ja     c000580b <f_mkfs+0x490>
c0005801:	8d 46 13             	lea    eax,[esi+0x13]
c0005804:	e8 55 c6 ff ff       	call   c0001e5e <st_word>
c0005809:	eb 08                	jmp    c0005813 <f_mkfs+0x498>
c000580b:	8d 46 20             	lea    eax,[esi+0x20]
c000580e:	e8 4f c6 ff ff       	call   c0001e62 <st_dword>
c0005813:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005817:	8d 46 18             	lea    eax,[esi+0x18]
c000581a:	ba 3f 00 00 00       	mov    edx,0x3f
c000581f:	e8 3a c6 ff ff       	call   c0001e5e <st_word>
c0005824:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005827:	ba ff 00 00 00       	mov    edx,0xff
c000582c:	e8 2d c6 ff ff       	call   c0001e5e <st_word>
c0005831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005835:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005838:	e8 25 c6 ff ff       	call   c0001e62 <st_dword>
c000583d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005842:	75 57                	jne    c000589b <f_mkfs+0x520>
c0005844:	8d 46 43             	lea    eax,[esi+0x43]
c0005847:	ba 00 00 21 50       	mov    edx,0x50210000
c000584c:	e8 11 c6 ff ff       	call   c0001e62 <st_dword>
c0005851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005855:	8d 46 24             	lea    eax,[esi+0x24]
c0005858:	e8 05 c6 ff ff       	call   c0001e62 <st_dword>
c000585d:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005860:	ba 02 00 00 00       	mov    edx,0x2
c0005865:	e8 f8 c5 ff ff       	call   c0001e62 <st_dword>
c000586a:	8d 46 30             	lea    eax,[esi+0x30]
c000586d:	ba 01 00 00 00       	mov    edx,0x1
c0005872:	e8 e7 c5 ff ff       	call   c0001e5e <st_word>
c0005877:	8d 46 32             	lea    eax,[esi+0x32]
c000587a:	ba 06 00 00 00       	mov    edx,0x6
c000587f:	e8 da c5 ff ff       	call   c0001e5e <st_word>
c0005884:	8d 46 47             	lea    eax,[esi+0x47]
c0005887:	b9 13 00 00 00       	mov    ecx,0x13
c000588c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005890:	ba 7e f0 01 c0       	mov    edx,0xc001f07e
c0005895:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005899:	eb 2f                	jmp    c00058ca <f_mkfs+0x54f>
c000589b:	8d 46 27             	lea    eax,[esi+0x27]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 ba c5 ff ff       	call   c0001e62 <st_dword>
c00058a8:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00058ad:	8d 46 16             	lea    eax,[esi+0x16]
c00058b0:	e8 a9 c5 ff ff       	call   c0001e5e <st_word>
c00058b5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00058b8:	b9 13 00 00 00       	mov    ecx,0x13
c00058bd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00058c1:	ba 92 f0 01 c0       	mov    edx,0xc001f092
c00058c6:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00058ca:	e8 96 c5 ff ff       	call   c0001e65 <mem_cpy>
c00058cf:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c00058d5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00058da:	89 f8                	mov    eax,edi
c00058dc:	e8 7d c5 ff ff       	call   c0001e5e <st_word>
c00058e1:	6a 01                	push   0x1
c00058e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00058e7:	56                   	push   esi
c00058e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00058ec:	e8 13 c5 ff ff       	call   c0001e04 <disk_write>
c00058f1:	83 c4 10             	add    esp,0x10
c00058f4:	85 c0                	test   eax,eax
c00058f6:	0f 85 11 02 00 00    	jne    c0005b0d <f_mkfs+0x792>
c00058fc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005901:	0f 85 94 00 00 00    	jne    c000599b <f_mkfs+0x620>
c0005907:	6a 01                	push   0x1
c0005909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000590d:	83 c0 06             	add    eax,0x6
c0005910:	50                   	push   eax
c0005911:	56                   	push   esi
c0005912:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005916:	e8 e9 c4 ff ff       	call   c0001e04 <disk_write>
c000591b:	b9 00 02 00 00       	mov    ecx,0x200
c0005920:	31 d2                	xor    edx,edx
c0005922:	89 f0                	mov    eax,esi
c0005924:	e8 51 c5 ff ff       	call   c0001e7a <mem_set>
c0005929:	ba 52 52 61 41       	mov    edx,0x41615252
c000592e:	89 f0                	mov    eax,esi
c0005930:	e8 2d c5 ff ff       	call   c0001e62 <st_dword>
c0005935:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c000593b:	ba 72 72 41 61       	mov    edx,0x61417272
c0005940:	e8 1d c5 ff ff       	call   c0001e62 <st_dword>
c0005945:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005948:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000594e:	e8 0f c5 ff ff       	call   c0001e62 <st_dword>
c0005953:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005959:	ba 02 00 00 00       	mov    edx,0x2
c000595e:	e8 ff c4 ff ff       	call   c0001e62 <st_dword>
c0005963:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005968:	89 f8                	mov    eax,edi
c000596a:	e8 ef c4 ff ff       	call   c0001e5e <st_word>
c000596f:	6a 01                	push   0x1
c0005971:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005975:	83 c0 07             	add    eax,0x7
c0005978:	50                   	push   eax
c0005979:	56                   	push   esi
c000597a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000597e:	e8 81 c4 ff ff       	call   c0001e04 <disk_write>
c0005983:	83 c4 20             	add    esp,0x20
c0005986:	6a 01                	push   0x1
c0005988:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000598c:	40                   	inc    eax
c000598d:	50                   	push   eax
c000598e:	56                   	push   esi
c000598f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005993:	e8 6c c4 ff ff       	call   c0001e04 <disk_write>
c0005998:	83 c4 10             	add    esp,0x10
c000599b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000599f:	31 d2                	xor    edx,edx
c00059a1:	89 f0                	mov    eax,esi
c00059a3:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00059a7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00059ad:	e8 c8 c4 ff ff       	call   c0001e7a <mem_set>
c00059b2:	c1 ef 09             	shr    edi,0x9
c00059b5:	ba f8 ff ff 00       	mov    edx,0xfffff8
c00059ba:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00059bf:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c00059c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00059cc:	0f 44 c2             	cmove  eax,edx
c00059cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059d3:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059d8:	75 21                	jne    c00059fb <f_mkfs+0x680>
c00059da:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00059df:	89 f0                	mov    eax,esi
c00059e1:	e8 7c c4 ff ff       	call   c0001e62 <st_dword>
c00059e6:	8d 46 04             	lea    eax,[esi+0x4]
c00059e9:	83 ca ff             	or     edx,0xffffffff
c00059ec:	e8 71 c4 ff ff       	call   c0001e62 <st_dword>
c00059f1:	8d 46 08             	lea    eax,[esi+0x8]
c00059f4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00059f9:	eb 06                	jmp    c0005a01 <f_mkfs+0x686>
c00059fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00059ff:	89 f0                	mov    eax,esi
c0005a01:	e8 5c c4 ff ff       	call   c0001e62 <st_dword>
c0005a06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a0a:	39 fb                	cmp    ebx,edi
c0005a0c:	89 f8                	mov    eax,edi
c0005a0e:	0f 46 c3             	cmovbe eax,ebx
c0005a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a15:	50                   	push   eax
c0005a16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005a1a:	56                   	push   esi
c0005a1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a1f:	e8 e0 c3 ff ff       	call   c0001e04 <disk_write>
c0005a24:	83 c4 10             	add    esp,0x10
c0005a27:	85 c0                	test   eax,eax
c0005a29:	0f 85 de 00 00 00    	jne    c0005b0d <f_mkfs+0x792>
c0005a2f:	b9 00 02 00 00       	mov    ecx,0x200
c0005a34:	31 d2                	xor    edx,edx
c0005a36:	89 f0                	mov    eax,esi
c0005a38:	e8 3d c4 ff ff       	call   c0001e7a <mem_set>
c0005a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005a41:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005a45:	29 cb                	sub    ebx,ecx
c0005a47:	75 c1                	jne    c0005a0a <f_mkfs+0x68f>
c0005a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4d:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005a55:	40                   	inc    eax
c0005a56:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005a5a:	0f 87 73 ff ff ff    	ja     c00059d3 <f_mkfs+0x658>
c0005a60:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a69:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005a6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a72:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005a76:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005a7a:	0f 47 df             	cmova  ebx,edi
c0005a7d:	53                   	push   ebx
c0005a7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005a82:	56                   	push   esi
c0005a83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a87:	e8 78 c3 ff ff       	call   c0001e04 <disk_write>
c0005a8c:	83 c4 10             	add    esp,0x10
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 7a                	jne    c0005b0d <f_mkfs+0x792>
c0005a93:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005a97:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005a9b:	75 d5                	jne    c0005a72 <f_mkfs+0x6f7>
c0005a9d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005aa2:	b1 0c                	mov    cl,0xc
c0005aa4:	74 1c                	je     c0005ac2 <f_mkfs+0x747>
c0005aa6:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005aae:	b1 06                	mov    cl,0x6
c0005ab0:	77 10                	ja     c0005ac2 <f_mkfs+0x747>
c0005ab2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005ab7:	0f 94 c1             	sete   cl
c0005aba:	fe c9                	dec    cl
c0005abc:	80 e1 fd             	and    cl,0xfd
c0005abf:	80 c1 04             	add    cl,0x4
c0005ac2:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005ac7:	75 2d                	jne    c0005af6 <f_mkfs+0x77b>
c0005ac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005acd:	83 ec 0c             	sub    esp,0xc
c0005ad0:	0f b6 c9             	movzx  ecx,cl
c0005ad3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005adb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005adf:	56                   	push   esi
c0005ae0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae4:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005ae8:	e8 53 d3 ff ff       	call   c0002e40 <create_partition>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	85 c0                	test   eax,eax
c0005af2:	89 c3                	mov    ebx,eax
c0005af4:	75 2e                	jne    c0005b24 <f_mkfs+0x7a9>
c0005af6:	50                   	push   eax
c0005af7:	31 db                	xor    ebx,ebx
c0005af9:	6a 00                	push   0x0
c0005afb:	6a 00                	push   0x0
c0005afd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b01:	e8 14 c3 ff ff       	call   c0001e1a <disk_ioctl>
c0005b06:	83 c4 10             	add    esp,0x10
c0005b09:	85 c0                	test   eax,eax
c0005b0b:	74 17                	je     c0005b24 <f_mkfs+0x7a9>
c0005b0d:	85 ed                	test   ebp,ebp
c0005b0f:	75 0c                	jne    c0005b1d <f_mkfs+0x7a2>
c0005b11:	83 ec 0c             	sub    esp,0xc
c0005b14:	56                   	push   esi
c0005b15:	e8 6a 00 00 00       	call   c0005b84 <ff_memfree>
c0005b1a:	83 c4 10             	add    esp,0x10
c0005b1d:	bb 01 00 00 00       	mov    ebx,0x1
c0005b22:	eb 42                	jmp    c0005b66 <f_mkfs+0x7eb>
c0005b24:	85 ed                	test   ebp,ebp
c0005b26:	75 3e                	jne    c0005b66 <f_mkfs+0x7eb>
c0005b28:	83 ec 0c             	sub    esp,0xc
c0005b2b:	56                   	push   esi
c0005b2c:	e8 53 00 00 00       	call   c0005b84 <ff_memfree>
c0005b31:	83 c4 10             	add    esp,0x10
c0005b34:	eb 30                	jmp    c0005b66 <f_mkfs+0x7eb>
c0005b36:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005b3b:	0f 85 5f fb ff ff    	jne    c00056a0 <f_mkfs+0x325>
c0005b41:	e9 3c fc ff ff       	jmp    c0005782 <f_mkfs+0x407>
c0005b46:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005b4b:	0f 85 55 fb ff ff    	jne    c00056a6 <f_mkfs+0x32b>
c0005b51:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005b55:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b5b:	0f 86 4b fa ff ff    	jbe    c00055ac <f_mkfs+0x231>
c0005b61:	e9 1c fc ff ff       	jmp    c0005782 <f_mkfs+0x407>
c0005b66:	83 c4 4c             	add    esp,0x4c
c0005b69:	89 d8                	mov    eax,ebx
c0005b6b:	5b                   	pop    ebx
c0005b6c:	5e                   	pop    esi
c0005b6d:	5f                   	pop    edi
c0005b6e:	5d                   	pop    ebp
c0005b6f:	c3                   	ret    

c0005b70 <ff_memalloc>:
c0005b70:	83 ec 1c             	sub    esp,0x1c
c0005b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b77:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b7a:	e8 e7 1e 00 00       	call   c0007a66 <malloc>
c0005b7f:	83 c4 1c             	add    esp,0x1c
c0005b82:	c3                   	ret    
c0005b83:	90                   	nop

c0005b84 <ff_memfree>:
c0005b84:	83 ec 1c             	sub    esp,0x1c
c0005b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b8e:	e8 e6 1e 00 00       	call   c0007a79 <free>
c0005b93:	90                   	nop
c0005b94:	83 c4 1c             	add    esp,0x1c
c0005b97:	c3                   	ret    

c0005b98 <ff_uni2oem>:
c0005b98:	83 ec 14             	sub    esp,0x14
c0005b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b9f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ba3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005baa:	c7 44 24 0c c0 f4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f4c0
c0005bb2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005bb7:	77 0b                	ja     c0005bc4 <ff_uni2oem+0x2c>
c0005bb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bbd:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005bc2:	eb 64                	jmp    c0005c28 <ff_uni2oem+0x90>
c0005bc4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005bcc:	77 5a                	ja     c0005c28 <ff_uni2oem+0x90>
c0005bce:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005bd2:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005bd7:	75 4f                	jne    c0005c28 <ff_uni2oem+0x90>
c0005bd9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005be0:	eb 0e                	jmp    c0005bf0 <ff_uni2oem+0x58>
c0005be2:	66 90                	xchg   ax,ax
c0005be4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005be9:	40                   	inc    eax
c0005bea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005bef:	90                   	nop
c0005bf0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005bf5:	83 f8 7f             	cmp    eax,0x7f
c0005bf8:	77 1a                	ja     c0005c14 <ff_uni2oem+0x7c>
c0005bfa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005bff:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c06:	01 d0                	add    eax,edx
c0005c08:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c0b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c0f:	75 d3                	jne    c0005be4 <ff_uni2oem+0x4c>
c0005c11:	8d 76 00             	lea    esi,[esi+0x0]
c0005c14:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c19:	83 e8 80             	sub    eax,0xffffff80
c0005c1c:	0f b7 c0             	movzx  eax,ax
c0005c1f:	0f b6 c0             	movzx  eax,al
c0005c22:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c27:	90                   	nop
c0005c28:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c2d:	83 c4 14             	add    esp,0x14
c0005c30:	c3                   	ret    
c0005c31:	8d 76 00             	lea    esi,[esi+0x0]

c0005c34 <ff_oem2uni>:
c0005c34:	83 ec 18             	sub    esp,0x18
c0005c37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c3f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005c44:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c48:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005c4f:	c7 44 24 10 c0 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f4c0
c0005c57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c5c:	83 f8 7f             	cmp    eax,0x7f
c0005c5f:	77 0b                	ja     c0005c6c <ff_oem2uni+0x38>
c0005c61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005c6a:	eb 34                	jmp    c0005ca0 <ff_oem2uni+0x6c>
c0005c6c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c70:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c75:	75 29                	jne    c0005ca0 <ff_oem2uni+0x6c>
c0005c77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c7c:	3d ff 00 00 00       	cmp    eax,0xff
c0005c81:	77 1d                	ja     c0005ca0 <ff_oem2uni+0x6c>
c0005c83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c88:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005c8d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c94:	01 d0                	add    eax,edx
c0005c96:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c99:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005c9e:	66 90                	xchg   ax,ax
c0005ca0:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005ca5:	83 c4 18             	add    esp,0x18
c0005ca8:	c3                   	ret    
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]

c0005cac <ff_wtoupper>:
c0005cac:	83 ec 10             	sub    esp,0x10
c0005caf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005cb7:	0f 87 af 01 00 00    	ja     c0005e6c <ff_wtoupper+0x1c0>
c0005cbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005cc1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cc6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ccb:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005cd0:	77 0a                	ja     c0005cdc <ff_wtoupper+0x30>
c0005cd2:	b8 c0 f2 01 c0       	mov    eax,0xc001f2c0
c0005cd7:	eb 0b                	jmp    c0005ce4 <ff_wtoupper+0x38>
c0005cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cdc:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0005ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cec:	8d 50 02             	lea    edx,[eax+0x2]
c0005cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cf3:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005cf6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005cfb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 84 58 01 00 00    	je     c0005e60 <ff_wtoupper+0x1b4>
c0005d08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d12:	39 c2                	cmp    edx,eax
c0005d14:	0f 82 46 01 00 00    	jb     c0005e60 <ff_wtoupper+0x1b4>
c0005d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d1e:	8d 50 02             	lea    edx,[eax+0x2]
c0005d21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d25:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d28:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d32:	c1 e8 08             	shr    eax,0x8
c0005d35:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005d3a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d3f:	0f b6 c0             	movzx  eax,al
c0005d42:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d47:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d4c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005d51:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005d56:	01 ca                	add    edx,ecx
c0005d58:	39 d0                	cmp    eax,edx
c0005d5a:	0f 8d dc 00 00 00    	jge    c0005e3c <ff_wtoupper+0x190>
c0005d60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d65:	83 f8 08             	cmp    eax,0x8
c0005d68:	0f 87 ee 00 00 00    	ja     c0005e5c <ff_wtoupper+0x1b0>
c0005d6e:	8b 04 85 c0 f1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0e40]
c0005d75:	ff e0                	jmp    eax
c0005d77:	90                   	nop
c0005d78:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d7d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d82:	29 c2                	sub    edx,eax
c0005d84:	89 d0                	mov    eax,edx
c0005d86:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d8d:	01 d0                	add    eax,edx
c0005d8f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d92:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d97:	e9 9c 00 00 00       	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005d9c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005da5:	89 d1                	mov    ecx,edx
c0005da7:	29 c1                	sub    ecx,eax
c0005da9:	89 c8                	mov    eax,ecx
c0005dab:	0f b7 c0             	movzx  eax,ax
c0005dae:	83 e0 01             	and    eax,0x1
c0005db1:	0f b7 c0             	movzx  eax,ax
c0005db4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005db9:	89 d1                	mov    ecx,edx
c0005dbb:	29 c1                	sub    ecx,eax
c0005dbd:	89 c8                	mov    eax,ecx
c0005dbf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005dc4:	eb 72                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005dc6:	66 90                	xchg   ax,ax
c0005dc8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005dcd:	83 e8 10             	sub    eax,0x10
c0005dd0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005dd5:	eb 61                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005dd7:	90                   	nop
c0005dd8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddd:	83 e8 20             	sub    eax,0x20
c0005de0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005de5:	eb 51                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005de7:	90                   	nop
c0005de8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ded:	83 e8 30             	sub    eax,0x30
c0005df0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005df5:	eb 41                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005df7:	90                   	nop
c0005df8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005dfd:	83 e8 1a             	sub    eax,0x1a
c0005e00:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e05:	eb 31                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e07:	90                   	nop
c0005e08:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e0d:	83 c0 08             	add    eax,0x8
c0005e10:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e15:	eb 21                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e17:	90                   	nop
c0005e18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e1d:	83 e8 50             	sub    eax,0x50
c0005e20:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e25:	eb 11                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e27:	90                   	nop
c0005e28:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e2d:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005e32:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e37:	90                   	nop
c0005e38:	eb 22                	jmp    c0005e5c <ff_wtoupper+0x1b0>
c0005e3a:	66 90                	xchg   ax,ax
c0005e3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e41:	85 c0                	test   eax,eax
c0005e43:	0f 85 9f fe ff ff    	jne    c0005ce8 <ff_wtoupper+0x3c>
c0005e49:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e4e:	01 c0                	add    eax,eax
c0005e50:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005e54:	e9 8f fe ff ff       	jmp    c0005ce8 <ff_wtoupper+0x3c>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	90                   	nop
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e60:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005e69:	8d 76 00             	lea    esi,[esi+0x0]
c0005e6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e70:	83 c4 10             	add    esp,0x10
c0005e73:	c3                   	ret    

c0005e74 <utf2ucs>:
c0005e74:	56                   	push   esi
c0005e75:	31 c9                	xor    ecx,ecx
c0005e77:	53                   	push   ebx
c0005e78:	89 c6                	mov    esi,eax
c0005e7a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005e7e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	c1 f8 08             	sar    eax,0x8
c0005e87:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005e8a:	41                   	inc    ecx
c0005e8b:	85 db                	test   ebx,ebx
c0005e8d:	75 eb                	jne    c0005e7a <utf2ucs+0x6>
c0005e8f:	5b                   	pop    ebx
c0005e90:	5e                   	pop    esi
c0005e91:	c3                   	ret    

c0005e92 <ucs2utfn>:
c0005e92:	57                   	push   edi
c0005e93:	83 e1 fe             	and    ecx,0xfffffffe
c0005e96:	56                   	push   esi
c0005e97:	89 d6                	mov    esi,edx
c0005e99:	53                   	push   ebx
c0005e9a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005e9d:	39 f7                	cmp    edi,esi
c0005e9f:	74 5a                	je     c0005efb <ucs2utfn+0x69>
c0005ea1:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005ea4:	83 c6 02             	add    esi,0x2
c0005ea7:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005eab:	c1 e3 08             	shl    ebx,0x8
c0005eae:	09 d3                	or     ebx,edx
c0005eb0:	83 fb 3b             	cmp    ebx,0x3b
c0005eb3:	74 46                	je     c0005efb <ucs2utfn+0x69>
c0005eb5:	83 fb 7f             	cmp    ebx,0x7f
c0005eb8:	88 da                	mov    dl,bl
c0005eba:	7f 05                	jg     c0005ec1 <ucs2utfn+0x2f>
c0005ebc:	88 18                	mov    BYTE PTR [eax],bl
c0005ebe:	40                   	inc    eax
c0005ebf:	eb dc                	jmp    c0005e9d <ucs2utfn+0xb>
c0005ec1:	80 e2 3f             	and    dl,0x3f
c0005ec4:	89 d9                	mov    ecx,ebx
c0005ec6:	c1 f9 06             	sar    ecx,0x6
c0005ec9:	80 ca 80             	or     dl,0x80
c0005ecc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005ed2:	7f 0e                	jg     c0005ee2 <ucs2utfn+0x50>
c0005ed4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005ed7:	80 c9 c0             	or     cl,0xc0
c0005eda:	83 c0 02             	add    eax,0x2
c0005edd:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005ee0:	eb bb                	jmp    c0005e9d <ucs2utfn+0xb>
c0005ee2:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005ee5:	c1 fb 0c             	sar    ebx,0xc
c0005ee8:	80 e1 3f             	and    cl,0x3f
c0005eeb:	80 cb e0             	or     bl,0xe0
c0005eee:	80 c9 80             	or     cl,0x80
c0005ef1:	88 18                	mov    BYTE PTR [eax],bl
c0005ef3:	83 c0 03             	add    eax,0x3
c0005ef6:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005ef9:	eb a2                	jmp    c0005e9d <ucs2utfn+0xb>
c0005efb:	5b                   	pop    ebx
c0005efc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <isjoliet>:
c0005f02:	31 d2                	xor    edx,edx
c0005f04:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f07:	75 22                	jne    c0005f2b <isjoliet+0x29>
c0005f09:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f0d:	75 1c                	jne    c0005f2b <isjoliet+0x29>
c0005f0f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005f12:	ba 02 00 00 00       	mov    edx,0x2
c0005f17:	3c 43                	cmp    al,0x43
c0005f19:	74 10                	je     c0005f2b <isjoliet+0x29>
c0005f1b:	3c 45                	cmp    al,0x45
c0005f1d:	ba 03 00 00 00       	mov    edx,0x3
c0005f22:	74 07                	je     c0005f2b <isjoliet+0x29>
c0005f24:	31 d2                	xor    edx,edx
c0005f26:	3c 40                	cmp    al,0x40
c0005f28:	0f 94 c2             	sete   dl
c0005f2b:	89 d0                	mov    eax,edx
c0005f2d:	c3                   	ret    

c0005f2e <htohl_32>:
c0005f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005f30:	c3                   	ret    

c0005f31 <iso_733>:
c0005f31:	eb fb                	jmp    c0005f2e <htohl_32>

c0005f33 <bgrad_cache>:
c0005f33:	83 fa 0e             	cmp    edx,0xe
c0005f36:	77 16                	ja     c0005f4e <bgrad_cache+0x1b>
c0005f38:	53                   	push   ebx
c0005f39:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005f3c:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005f40:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005f43:	42                   	inc    edx
c0005f44:	83 fa 0f             	cmp    edx,0xf
c0005f47:	75 f3                	jne    c0005f3c <bgrad_cache+0x9>
c0005f49:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005f4c:	5b                   	pop    ebx
c0005f4d:	c3                   	ret    
c0005f4e:	c3                   	ret    

c0005f4f <ucscompare>:
c0005f4f:	55                   	push   ebp
c0005f50:	57                   	push   edi
c0005f51:	89 c7                	mov    edi,eax
c0005f53:	56                   	push   esi
c0005f54:	89 d6                	mov    esi,edx
c0005f56:	53                   	push   ebx
c0005f57:	31 d2                	xor    edx,edx
c0005f59:	83 ec 1c             	sub    esp,0x1c
c0005f5c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005f60:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005f65:	c1 e3 08             	shl    ebx,0x8
c0005f68:	09 c3                	or     ebx,eax
c0005f6a:	39 ca                	cmp    edx,ecx
c0005f6c:	7d 42                	jge    c0005fb0 <ucscompare+0x61>
c0005f6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f72:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005f76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005f7a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005f7f:	c1 e0 08             	shl    eax,0x8
c0005f82:	09 e8                	or     eax,ebp
c0005f84:	83 f8 3b             	cmp    eax,0x3b
c0005f87:	74 27                	je     c0005fb0 <ucscompare+0x61>
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	50                   	push   eax
c0005f8d:	e8 1e aa ff ff       	call   c00009b0 <tolower>
c0005f92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005f95:	89 c5                	mov    ebp,eax
c0005f97:	e8 14 aa ff ff       	call   c00009b0 <tolower>
c0005f9c:	83 c4 10             	add    esp,0x10
c0005f9f:	39 c5                	cmp    ebp,eax
c0005fa1:	75 21                	jne    c0005fc4 <ucscompare+0x75>
c0005fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fa7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005fab:	83 c2 02             	add    edx,0x2
c0005fae:	eb ac                	jmp    c0005f5c <ucscompare+0xd>
c0005fb0:	83 fb 2f             	cmp    ebx,0x2f
c0005fb3:	0f 95 c0             	setne  al
c0005fb6:	85 db                	test   ebx,ebx
c0005fb8:	0f 95 c2             	setne  dl
c0005fbb:	20 d0                	and    al,dl
c0005fbd:	0f b6 c0             	movzx  eax,al
c0005fc0:	f7 d8                	neg    eax
c0005fc2:	eb 03                	jmp    c0005fc7 <ucscompare+0x78>
c0005fc4:	83 c8 ff             	or     eax,0xffffffff
c0005fc7:	83 c4 1c             	add    esp,0x1c
c0005fca:	5b                   	pop    ebx
c0005fcb:	5e                   	pop    esi
c0005fcc:	5f                   	pop    edi
c0005fcd:	5d                   	pop    ebp
c0005fce:	c3                   	ret    

c0005fcf <fncompare>:
c0005fcf:	55                   	push   ebp
c0005fd0:	31 ed                	xor    ebp,ebp
c0005fd2:	57                   	push   edi
c0005fd3:	89 c7                	mov    edi,eax
c0005fd5:	56                   	push   esi
c0005fd6:	89 d6                	mov    esi,edx
c0005fd8:	53                   	push   ebx
c0005fd9:	89 cb                	mov    ebx,ecx
c0005fdb:	83 ec 1c             	sub    esp,0x1c
c0005fde:	39 f5                	cmp    ebp,esi
c0005fe0:	7d 3f                	jge    c0006021 <fncompare+0x52>
c0005fe2:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0005fe6:	3c 3b                	cmp    al,0x3b
c0005fe8:	74 37                	je     c0006021 <fncompare+0x52>
c0005fea:	3c 2e                	cmp    al,0x2e
c0005fec:	75 0e                	jne    c0005ffc <fncompare+0x2d>
c0005fee:	8d 4e ff             	lea    ecx,[esi-0x1]
c0005ff1:	39 e9                	cmp    ecx,ebp
c0005ff3:	74 2c                	je     c0006021 <fncompare+0x52>
c0005ff5:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c0005ffa:	74 25                	je     c0006021 <fncompare+0x52>
c0005ffc:	83 ec 0c             	sub    esp,0xc
c0005fff:	50                   	push   eax
c0006000:	e8 ab a9 ff ff       	call   c00009b0 <tolower>
c0006005:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006009:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000600d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006010:	e8 9b a9 ff ff       	call   c00009b0 <tolower>
c0006015:	83 c4 10             	add    esp,0x10
c0006018:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000601c:	75 1a                	jne    c0006038 <fncompare+0x69>
c000601e:	45                   	inc    ebp
c000601f:	eb bd                	jmp    c0005fde <fncompare+0xf>
c0006021:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c0006024:	80 fa 2f             	cmp    dl,0x2f
c0006027:	0f 95 c0             	setne  al
c000602a:	84 d2                	test   dl,dl
c000602c:	0f 95 c2             	setne  dl
c000602f:	20 d0                	and    al,dl
c0006031:	0f b6 c0             	movzx  eax,al
c0006034:	f7 d8                	neg    eax
c0006036:	eb 03                	jmp    c000603b <fncompare+0x6c>
c0006038:	83 c8 ff             	or     eax,0xffffffff
c000603b:	83 c4 1c             	add    esp,0x1c
c000603e:	5b                   	pop    ebx
c000603f:	5e                   	pop    esi
c0006040:	5f                   	pop    edi
c0006041:	5d                   	pop    ebp
c0006042:	c3                   	ret    

c0006043 <bclear_cache>:
c0006043:	83 ec 18             	sub    esp,0x18
c0006046:	68 c0 f5 01 c0       	push   0xc001f5c0
c000604b:	e8 88 30 01 00       	call   c00190d8 <iso_kprintf>
c0006050:	83 c4 10             	add    esp,0x10
c0006053:	31 c0                	xor    eax,eax
c0006055:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000605c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006062:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006069:	40                   	inc    eax
c000606a:	83 f8 10             	cmp    eax,0x10
c000606d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006073:	75 e0                	jne    c0006055 <bclear_cache+0x12>
c0006075:	83 c4 0c             	add    esp,0xc
c0006078:	c3                   	ret    

c0006079 <bclear>:
c0006079:	eb c8                	jmp    c0006043 <bclear_cache>

c000607b <iso_break_all>:
c000607b:	83 ec 18             	sub    esp,0x18
c000607e:	68 ce f5 01 c0       	push   0xc001f5ce
c0006083:	e8 50 30 01 00       	call   c00190d8 <iso_kprintf>
c0006088:	83 c4 10             	add    esp,0x10
c000608b:	31 c0                	xor    eax,eax
c000608d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006097:	05 94 00 00 00       	add    eax,0x94
c000609c:	3d 40 09 00 00       	cmp    eax,0x940
c00060a1:	75 ea                	jne    c000608d <iso_break_all+0x12>
c00060a3:	83 c4 0c             	add    esp,0xc
c00060a6:	c3                   	ret    

c00060a7 <isoReadDiscSector>:
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00060b1:	50                   	push   eax
c00060b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060be:	e8 ad 2f 01 00       	call   c0019070 <isoReadDiscSectorHelper>
c00060c3:	83 c4 1c             	add    esp,0x1c
c00060c6:	c3                   	ret    

c00060c7 <bread_cache>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 d7                	mov    edi,edx
c00060cb:	56                   	push   esi
c00060cc:	ba 0f 00 00 00       	mov    edx,0xf
c00060d1:	53                   	push   ebx
c00060d2:	89 c6                	mov    esi,eax
c00060d4:	83 ec 0c             	sub    esp,0xc
c00060d7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00060da:	39 38                	cmp    DWORD PTR [eax],edi
c00060dc:	74 3c                	je     c000611a <bread_cache+0x53>
c00060de:	4a                   	dec    edx
c00060df:	83 fa ff             	cmp    edx,0xffffffff
c00060e2:	75 f3                	jne    c00060d7 <bread_cache+0x10>
c00060e4:	31 db                	xor    ebx,ebx
c00060e6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060e9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ec:	74 08                	je     c00060f6 <bread_cache+0x2f>
c00060ee:	43                   	inc    ebx
c00060ef:	83 fb 10             	cmp    ebx,0x10
c00060f2:	75 f2                	jne    c00060e6 <bread_cache+0x1f>
c00060f4:	31 db                	xor    ebx,ebx
c00060f6:	50                   	push   eax
c00060f7:	6a 01                	push   0x1
c00060f9:	57                   	push   edi
c00060fa:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006100:	83 c0 04             	add    eax,0x4
c0006103:	50                   	push   eax
c0006104:	e8 9e ff ff ff       	call   c00060a7 <isoReadDiscSector>
c0006109:	83 c4 10             	add    esp,0x10
c000610c:	83 c9 ff             	or     ecx,0xffffffff
c000610f:	85 c0                	test   eax,eax
c0006111:	78 13                	js     c0006126 <bread_cache+0x5f>
c0006113:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006116:	89 da                	mov    edx,ebx
c0006118:	89 38                	mov    DWORD PTR [eax],edi
c000611a:	89 f0                	mov    eax,esi
c000611c:	e8 12 fe ff ff       	call   c0005f33 <bgrad_cache>
c0006121:	b9 0f 00 00 00       	mov    ecx,0xf
c0006126:	83 c4 0c             	add    esp,0xc
c0006129:	89 c8                	mov    eax,ecx
c000612b:	5b                   	pop    ebx
c000612c:	5e                   	pop    esi
c000612d:	5f                   	pop    edi
c000612e:	5d                   	pop    ebp
c000612f:	c3                   	ret    

c0006130 <biread>:
c0006130:	89 c2                	mov    edx,eax
c0006132:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006137:	eb 8e                	jmp    c00060c7 <bread_cache>

c0006139 <bdread>:
c0006139:	89 c2                	mov    edx,eax
c000613b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006140:	eb 85                	jmp    c00060c7 <bread_cache>

c0006142 <strnicmp>:
c0006142:	55                   	push   ebp
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	31 f6                	xor    esi,esi
c0006147:	53                   	push   ebx
c0006148:	83 ec 0c             	sub    esp,0xc
c000614b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000614f:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006153:	74 42                	je     c0006197 <strnicmp+0x55>
c0006155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006159:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000615d:	84 c0                	test   al,al
c000615f:	74 36                	je     c0006197 <strnicmp+0x55>
c0006161:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 2f                	je     c0006197 <strnicmp+0x55>
c0006168:	8d 6e 01             	lea    ebp,[esi+0x1]
c000616b:	38 d0                	cmp    al,dl
c000616d:	75 04                	jne    c0006173 <strnicmp+0x31>
c000616f:	89 ee                	mov    esi,ebp
c0006171:	eb dc                	jmp    c000614f <strnicmp+0xd>
c0006173:	83 ec 0c             	sub    esp,0xc
c0006176:	50                   	push   eax
c0006177:	e8 34 a8 ff ff       	call   c00009b0 <tolower>
c000617c:	89 c7                	mov    edi,eax
c000617e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006182:	89 ee                	mov    esi,ebp
c0006184:	89 04 24             	mov    DWORD PTR [esp],eax
c0006187:	e8 24 a8 ff ff       	call   c00009b0 <tolower>
c000618c:	83 c4 10             	add    esp,0x10
c000618f:	29 c7                	sub    edi,eax
c0006191:	89 f8                	mov    eax,edi
c0006193:	74 ba                	je     c000614f <strnicmp+0xd>
c0006195:	eb 02                	jmp    c0006199 <strnicmp+0x57>
c0006197:	31 c0                	xor    eax,eax
c0006199:	83 c4 0c             	add    esp,0xc
c000619c:	5b                   	pop    ebx
c000619d:	5e                   	pop    esi
c000619e:	5f                   	pop    edi
c000619f:	5d                   	pop    ebp
c00061a0:	c3                   	ret    

c00061a1 <find_object>:
c00061a1:	55                   	push   ebp
c00061a2:	89 c5                	mov    ebp,eax
c00061a4:	57                   	push   edi
c00061a5:	56                   	push   esi
c00061a6:	53                   	push   ebx
c00061a7:	89 d3                	mov    ebx,edx
c00061a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00061b3:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00061ba:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00061c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061c5:	74 0b                	je     c00061d2 <find_object+0x31>
c00061c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00061cb:	89 ea                	mov    edx,ebp
c00061cd:	e8 a2 fc ff ff       	call   c0005e74 <utf2ucs>
c00061d2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00061d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00061de:	7e 11                	jle    c00061f1 <find_object+0x50>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	e8 47 ff ff ff       	call   c0006130 <biread>
c00061e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	79 07                	jns    c00061f8 <find_object+0x57>
c00061f1:	31 db                	xor    ebx,ebx
c00061f3:	e9 4c 01 00 00       	jmp    c0006344 <find_object+0x1a3>
c00061f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006204:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006208:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000620f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006213:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006215:	84 c9                	test   cl,cl
c0006217:	75 0e                	jne    c0006227 <find_object+0x86>
c0006219:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000621d:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006225:	eb b2                	jmp    c00061d9 <find_object+0x38>
c0006227:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c000622d:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c0006231:	85 d2                	test   edx,edx
c0006233:	89 f8                	mov    eax,edi
c0006235:	74 33                	je     c000626a <find_object+0xc9>
c0006237:	8d 43 21             	lea    eax,[ebx+0x21]
c000623a:	89 f9                	mov    ecx,edi
c000623c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006240:	e8 0a fd ff ff       	call   c0005f4f <ucscompare>
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 84 c9 00 00 00    	je     c0006316 <find_object+0x175>
c000624d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006250:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006254:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000625c:	7f bb                	jg     c0006219 <find_object+0x78>
c000625e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006262:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0006266:	7f 98                	jg     c0006200 <find_object+0x5f>
c0006268:	eb af                	jmp    c0006219 <find_object+0x78>
c000626a:	0f b6 f1             	movzx  esi,cl
c000626d:	29 fe                	sub    esi,edi
c000626f:	24 01                	and    al,0x1
c0006271:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006275:	74 05                	je     c000627c <find_object+0xdb>
c0006277:	83 ee 21             	sub    esi,0x21
c000627a:	eb 5b                	jmp    c00062d7 <find_object+0x136>
c000627c:	47                   	inc    edi
c000627d:	83 ee 22             	sub    esi,0x22
c0006280:	eb 55                	jmp    c00062d7 <find_object+0x136>
c0006282:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006285:	fe c8                	dec    al
c0006287:	3c 01                	cmp    al,0x1
c0006289:	77 51                	ja     c00062dc <find_object+0x13b>
c000628b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000628f:	50                   	push   eax
c0006290:	6a 02                	push   0x2
c0006292:	68 dd f5 01 c0       	push   0xc001f5dd
c0006297:	57                   	push   edi
c0006298:	e8 a3 a5 ff ff       	call   c0000840 <strncmp>
c000629d:	83 c4 10             	add    esp,0x10
c00062a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a4:	85 c0                	test   eax,eax
c00062a6:	75 27                	jne    c00062cf <find_object+0x12e>
c00062a8:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c00062ac:	50                   	push   eax
c00062ad:	8d 47 05             	lea    eax,[edi+0x5]
c00062b0:	83 ea 05             	sub    edx,0x5
c00062b3:	52                   	push   edx
c00062b4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00062b8:	50                   	push   eax
c00062b9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062bd:	50                   	push   eax
c00062be:	e8 fd a3 ff ff       	call   c00006c0 <strncpy>
c00062c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00062c7:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c00062cc:	83 c4 10             	add    esp,0x10
c00062cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00062d3:	29 c6                	sub    esi,eax
c00062d5:	01 c7                	add    edi,eax
c00062d7:	83 fe 03             	cmp    esi,0x3
c00062da:	7f a6                	jg     c0006282 <find_object+0xe1>
c00062dc:	85 d2                	test   edx,edx
c00062de:	7e 40                	jle    c0006320 <find_object+0x17f>
c00062e0:	51                   	push   ecx
c00062e1:	51                   	push   ecx
c00062e2:	6a 2f                	push   0x2f
c00062e4:	55                   	push   ebp
c00062e5:	e8 16 a5 ff ff       	call   c0000800 <strchr>
c00062ea:	83 c4 10             	add    esp,0x10
c00062ed:	85 c0                	test   eax,eax
c00062ef:	74 04                	je     c00062f5 <find_object+0x154>
c00062f1:	29 e8                	sub    eax,ebp
c00062f3:	eb 0c                	jmp    c0006301 <find_object+0x160>
c00062f5:	83 ec 0c             	sub    esp,0xc
c00062f8:	55                   	push   ebp
c00062f9:	e8 92 a2 ff ff       	call   c0000590 <strlen>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	52                   	push   edx
c0006302:	50                   	push   eax
c0006303:	55                   	push   ebp
c0006304:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006308:	50                   	push   eax
c0006309:	e8 34 fe ff ff       	call   c0006142 <strnicmp>
c000630e:	83 c4 10             	add    esp,0x10
c0006311:	e9 2f ff ff ff       	jmp    c0006245 <find_object+0xa4>
c0006316:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000631a:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000631e:	eb 1e                	jmp    c000633e <find_object+0x19d>
c0006320:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006324:	8d 43 21             	lea    eax,[ebx+0x21]
c0006327:	89 e9                	mov    ecx,ebp
c0006329:	e8 a1 fc ff ff       	call   c0005fcf <fncompare>
c000632e:	85 c0                	test   eax,eax
c0006330:	0f 85 17 ff ff ff    	jne    c000624d <find_object+0xac>
c0006336:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000633a:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000633e:	0f 85 09 ff ff ff    	jne    c000624d <find_object+0xac>
c0006344:	81 c4 2c 01 00 00    	add    esp,0x12c
c000634a:	89 d8                	mov    eax,ebx
c000634c:	5b                   	pop    ebx
c000634d:	5e                   	pop    esi
c000634e:	5f                   	pop    edi
c000634f:	5d                   	pop    ebp
c0006350:	c3                   	ret    

c0006351 <find_object_path>:
c0006351:	55                   	push   ebp
c0006352:	57                   	push   edi
c0006353:	89 d7                	mov    edi,edx
c0006355:	56                   	push   esi
c0006356:	89 c6                	mov    esi,eax
c0006358:	53                   	push   ebx
c0006359:	89 cb                	mov    ebx,ecx
c000635b:	83 ec 0c             	sub    esp,0xc
c000635e:	50                   	push   eax
c000635f:	50                   	push   eax
c0006360:	6a 2f                	push   0x2f
c0006362:	56                   	push   esi
c0006363:	e8 98 a4 ff ff       	call   c0000800 <strchr>
c0006368:	83 c4 10             	add    esp,0x10
c000636b:	85 c0                	test   eax,eax
c000636d:	89 c5                	mov    ebp,eax
c000636f:	74 3a                	je     c00063ab <find_object_path+0x5a>
c0006371:	39 ee                	cmp    esi,ebp
c0006373:	74 31                	je     c00063a6 <find_object_path+0x55>
c0006375:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006378:	e8 b4 fb ff ff       	call   c0005f31 <iso_733>
c000637d:	89 c2                	mov    edx,eax
c000637f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006382:	e8 aa fb ff ff       	call   c0005f31 <iso_733>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	52                   	push   edx
c000638b:	89 c1                	mov    ecx,eax
c000638d:	ba 01 00 00 00       	mov    edx,0x1
c0006392:	89 f0                	mov    eax,esi
c0006394:	e8 08 fe ff ff       	call   c00061a1 <find_object>
c0006399:	83 c4 10             	add    esp,0x10
c000639c:	85 c0                	test   eax,eax
c000639e:	89 c3                	mov    ebx,eax
c00063a0:	75 04                	jne    c00063a6 <find_object_path+0x55>
c00063a2:	31 db                	xor    ebx,ebx
c00063a4:	eb 36                	jmp    c00063dc <find_object_path+0x8b>
c00063a6:	8d 75 01             	lea    esi,[ebp+0x1]
c00063a9:	eb b3                	jmp    c000635e <find_object_path+0xd>
c00063ab:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00063ae:	74 28                	je     c00063d8 <find_object_path+0x87>
c00063b0:	8d 43 0a             	lea    eax,[ebx+0xa]
c00063b3:	e8 79 fb ff ff       	call   c0005f31 <iso_733>
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	8d 43 02             	lea    eax,[ebx+0x2]
c00063bd:	e8 6f fb ff ff       	call   c0005f31 <iso_733>
c00063c2:	83 ec 0c             	sub    esp,0xc
c00063c5:	52                   	push   edx
c00063c6:	89 c1                	mov    ecx,eax
c00063c8:	89 fa                	mov    edx,edi
c00063ca:	89 f0                	mov    eax,esi
c00063cc:	e8 d0 fd ff ff       	call   c00061a1 <find_object>
c00063d1:	83 c4 10             	add    esp,0x10
c00063d4:	89 c3                	mov    ebx,eax
c00063d6:	eb 04                	jmp    c00063dc <find_object_path+0x8b>
c00063d8:	85 ff                	test   edi,edi
c00063da:	74 c6                	je     c00063a2 <find_object_path+0x51>
c00063dc:	83 c4 0c             	add    esp,0xc
c00063df:	89 d8                	mov    eax,ebx
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	5f                   	pop    edi
c00063e4:	5d                   	pop    ebp
c00063e5:	c3                   	ret    

c00063e6 <stricmp>:
c00063e6:	57                   	push   edi
c00063e7:	56                   	push   esi
c00063e8:	31 f6                	xor    esi,esi
c00063ea:	53                   	push   ebx
c00063eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063ef:	83 ec 0c             	sub    esp,0xc
c00063f2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00063f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fa:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00063fe:	46                   	inc    esi
c00063ff:	50                   	push   eax
c0006400:	e8 8b a5 ff ff       	call   c0000990 <toupper>
c0006405:	89 04 24             	mov    DWORD PTR [esp],eax
c0006408:	e8 a3 a5 ff ff       	call   c00009b0 <tolower>
c000640d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006410:	89 c3                	mov    ebx,eax
c0006412:	e8 79 a5 ff ff       	call   c0000990 <toupper>
c0006417:	89 04 24             	mov    DWORD PTR [esp],eax
c000641a:	e8 91 a5 ff ff       	call   c00009b0 <tolower>
c000641f:	83 c4 10             	add    esp,0x10
c0006422:	39 c3                	cmp    ebx,eax
c0006424:	75 04                	jne    c000642a <stricmp+0x44>
c0006426:	85 db                	test   ebx,ebx
c0006428:	75 c1                	jne    c00063eb <stricmp+0x5>
c000642a:	29 c3                	sub    ebx,eax
c000642c:	89 d8                	mov    eax,ebx
c000642e:	5b                   	pop    ebx
c000642f:	5e                   	pop    esi
c0006430:	5f                   	pop    edi
c0006431:	c3                   	ret    

c0006432 <iso_open>:
c0006432:	57                   	push   edi
c0006433:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006438:	56                   	push   esi
c0006439:	53                   	push   ebx
c000643a:	31 db                	xor    ebx,ebx
c000643c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006445:	0f 95 c3             	setne  bl
c0006448:	89 da                	mov    edx,ebx
c000644a:	e8 02 ff ff ff       	call   c0006351 <find_object_path>
c000644f:	83 ca ff             	or     edx,0xffffffff
c0006452:	85 c0                	test   eax,eax
c0006454:	74 5e                	je     c00064b4 <iso_open+0x82>
c0006456:	89 c1                	mov    ecx,eax
c0006458:	31 d2                	xor    edx,edx
c000645a:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006460:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006467:	75 42                	jne    c00064ab <iso_open+0x79>
c0006469:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006473:	8d 41 02             	lea    eax,[ecx+0x2]
c0006476:	e8 b6 fa ff ff       	call   c0005f31 <iso_733>
c000647b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006481:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000648b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006491:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006494:	e8 98 fa ff ff       	call   c0005f31 <iso_733>
c0006499:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c00064a3:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00064a9:	eb 09                	jmp    c00064b4 <iso_open+0x82>
c00064ab:	42                   	inc    edx
c00064ac:	83 fa 10             	cmp    edx,0x10
c00064af:	75 a9                	jne    c000645a <iso_open+0x28>
c00064b1:	83 ca ff             	or     edx,0xffffffff
c00064b4:	5b                   	pop    ebx
c00064b5:	89 d0                	mov    eax,edx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	c3                   	ret    

c00064ba <iso_close>:
c00064ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064be:	83 f8 0f             	cmp    eax,0xf
c00064c1:	7f 10                	jg     c00064d3 <iso_close+0x19>
c00064c3:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00064c9:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00064d3:	e9 6b fb ff ff       	jmp    c0006043 <bclear_cache>

c00064d8 <iso_read>:
c00064d8:	55                   	push   ebp
c00064d9:	57                   	push   edi
c00064da:	56                   	push   esi
c00064db:	53                   	push   ebx
c00064dc:	83 ec 1c             	sub    esp,0x1c
c00064df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00064e3:	83 fd 0f             	cmp    ebp,0xf
c00064e6:	7e 0a                	jle    c00064f2 <iso_read+0x1a>
c00064e8:	83 c8 ff             	or     eax,0xffffffff
c00064eb:	89 c2                	mov    edx,eax
c00064ed:	e9 f4 00 00 00       	jmp    c00065e6 <iso_read+0x10e>
c00064f2:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00064f8:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00064ff:	74 e7                	je     c00064e8 <iso_read+0x10>
c0006501:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006507:	85 d2                	test   edx,edx
c0006509:	75 dd                	jne    c00064e8 <iso_read+0x10>
c000650b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006510:	0f 84 cd 00 00 00    	je     c00065e3 <iso_read+0x10b>
c0006516:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000651c:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c0006522:	29 c3                	sub    ebx,eax
c0006524:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006528:	89 d9                	mov    ecx,ebx
c000652a:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000652f:	85 c9                	test   ecx,ecx
c0006531:	0f 84 ac 00 00 00    	je     c00065e3 <iso_read+0x10b>
c0006537:	89 c6                	mov    esi,eax
c0006539:	bb 00 08 00 00       	mov    ebx,0x800
c000653e:	c1 e8 0b             	shr    eax,0xb
c0006541:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006547:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000654d:	29 f3                	sub    ebx,esi
c000654f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006555:	75 3f                	jne    c0006596 <iso_read+0xbe>
c0006557:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000655d:	7e 37                	jle    c0006596 <iso_read+0xbe>
c000655f:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006565:	be 20 00 00 00       	mov    esi,0x20
c000656a:	7f 05                	jg     c0006571 <iso_read+0x99>
c000656c:	89 ce                	mov    esi,ecx
c000656e:	c1 fe 0b             	sar    esi,0xb
c0006571:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006575:	89 f3                	mov    ebx,esi
c0006577:	52                   	push   edx
c0006578:	56                   	push   esi
c0006579:	50                   	push   eax
c000657a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000657e:	c1 e3 0b             	shl    ebx,0xb
c0006581:	e8 21 fb ff ff       	call   c00060a7 <isoReadDiscSector>
c0006586:	83 c4 10             	add    esp,0x10
c0006589:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000658d:	85 c0                	test   eax,eax
c000658f:	7f 3d                	jg     c00065ce <iso_read+0xf6>
c0006591:	e9 52 ff ff ff       	jmp    c00064e8 <iso_read+0x10>
c0006596:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000659a:	39 d9                	cmp    ecx,ebx
c000659c:	0f 4e d9             	cmovle ebx,ecx
c000659f:	e8 95 fb ff ff       	call   c0006139 <bdread>
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 88 3c ff ff ff    	js     c00064e8 <iso_read+0x10>
c00065ac:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00065b3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00065bd:	25 ff 07 00 00       	and    eax,0x7ff
c00065c2:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00065c6:	89 d9                	mov    ecx,ebx
c00065c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00065ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00065ce:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00065d2:	01 da                	add    edx,ebx
c00065d4:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00065da:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00065de:	e9 28 ff ff ff       	jmp    c000650b <iso_read+0x33>
c00065e3:	89 d0                	mov    eax,edx
c00065e5:	99                   	cdq    
c00065e6:	83 c4 1c             	add    esp,0x1c
c00065e9:	5b                   	pop    ebx
c00065ea:	5e                   	pop    esi
c00065eb:	5f                   	pop    edi
c00065ec:	5d                   	pop    ebp
c00065ed:	c3                   	ret    

c00065ee <iso_seek>:
c00065ee:	55                   	push   ebp
c00065ef:	83 c8 ff             	or     eax,0xffffffff
c00065f2:	57                   	push   edi
c00065f3:	89 c2                	mov    edx,eax
c00065f5:	56                   	push   esi
c00065f6:	53                   	push   ebx
c00065f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00065fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00065ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006603:	83 fe 0f             	cmp    esi,0xf
c0006606:	7f 65                	jg     c000666d <iso_seek+0x7f>
c0006608:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000660e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c0006615:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c000661b:	74 50                	je     c000666d <iso_seek+0x7f>
c000661d:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006624:	75 47                	jne    c000666d <iso_seek+0x7f>
c0006626:	83 fb 01             	cmp    ebx,0x1
c0006629:	74 0e                	je     c0006639 <iso_seek+0x4b>
c000662b:	83 fb 02             	cmp    ebx,0x2
c000662e:	74 0e                	je     c000663e <iso_seek+0x50>
c0006630:	85 db                	test   ebx,ebx
c0006632:	75 39                	jne    c000666d <iso_seek+0x7f>
c0006634:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006637:	eb 0d                	jmp    c0006646 <iso_seek+0x58>
c0006639:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000663c:	eb 08                	jmp    c0006646 <iso_seek+0x58>
c000663e:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006641:	01 f8                	add    eax,edi
c0006643:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006646:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000664c:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c0006652:	05 40 45 02 c0       	add    eax,0xc0024540
c0006657:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000665a:	76 03                	jbe    c000665f <iso_seek+0x71>
c000665c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000665f:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006665:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c000666b:	31 d2                	xor    edx,edx
c000666d:	5b                   	pop    ebx
c000666e:	5e                   	pop    esi
c000666f:	5f                   	pop    edi
c0006670:	5d                   	pop    ebp
c0006671:	c3                   	ret    

c0006672 <iso_tell>:
c0006672:	53                   	push   ebx
c0006673:	83 c8 ff             	or     eax,0xffffffff
c0006676:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000667a:	89 c2                	mov    edx,eax
c000667c:	83 f9 0f             	cmp    ecx,0xf
c000667f:	7f 20                	jg     c00066a1 <iso_tell+0x2f>
c0006681:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006687:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000668e:	74 11                	je     c00066a1 <iso_tell+0x2f>
c0006690:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006697:	75 08                	jne    c00066a1 <iso_tell+0x2f>
c0006699:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000669f:	31 d2                	xor    edx,edx
c00066a1:	5b                   	pop    ebx
c00066a2:	c3                   	ret    

c00066a3 <iso_total>:
c00066a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066a7:	83 c8 ff             	or     eax,0xffffffff
c00066aa:	83 fa 0f             	cmp    edx,0xf
c00066ad:	7f 1e                	jg     c00066cd <iso_total+0x2a>
c00066af:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00066b5:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00066bc:	74 0f                	je     c00066cd <iso_total+0x2a>
c00066be:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00066c5:	75 06                	jne    c00066cd <iso_total+0x2a>
c00066c7:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00066cd:	c3                   	ret    

c00066ce <fn_postprocess>:
c00066ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066d2:	89 d0                	mov    eax,edx
c00066d4:	8a 08                	mov    cl,BYTE PTR [eax]
c00066d6:	84 c9                	test   cl,cl
c00066d8:	74 08                	je     c00066e2 <fn_postprocess+0x14>
c00066da:	80 f9 3b             	cmp    cl,0x3b
c00066dd:	74 03                	je     c00066e2 <fn_postprocess+0x14>
c00066df:	40                   	inc    eax
c00066e0:	eb f2                	jmp    c00066d4 <fn_postprocess+0x6>
c00066e2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00066e5:	39 d0                	cmp    eax,edx
c00066e7:	76 0a                	jbe    c00066f3 <fn_postprocess+0x25>
c00066e9:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00066ed:	75 04                	jne    c00066f3 <fn_postprocess+0x25>
c00066ef:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00066f3:	c3                   	ret    

c00066f4 <iso_readdir>:
c00066f4:	55                   	push   ebp
c00066f5:	57                   	push   edi
c00066f6:	56                   	push   esi
c00066f7:	53                   	push   ebx
c00066f8:	83 ec 1c             	sub    esp,0x1c
c00066fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00066ff:	83 fb 0f             	cmp    ebx,0xf
c0006702:	7f 28                	jg     c000672c <iso_readdir+0x38>
c0006704:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000670a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c0006711:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006717:	74 13                	je     c000672c <iso_readdir+0x38>
c0006719:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c000671d:	74 0d                	je     c000672c <iso_readdir+0x38>
c000671f:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006726:	0f 84 b1 00 00 00    	je     c00067dd <iso_readdir+0xe9>
c000672c:	83 ec 0c             	sub    esp,0xc
c000672f:	68 e0 f5 01 c0       	push   0xc001f5e0
c0006734:	e8 9f 29 01 00       	call   c00190d8 <iso_kprintf>
c0006739:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000673c:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006742:	e8 ad 29 01 00       	call   c00190f4 <iso_kprintfd>
c0006747:	c7 04 24 e5 f5 01 c0 	mov    DWORD PTR [esp],0xc001f5e5
c000674e:	e8 85 29 01 00       	call   c00190d8 <iso_kprintf>
c0006753:	58                   	pop    eax
c0006754:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c000675a:	e8 95 29 01 00       	call   c00190f4 <iso_kprintfd>
c000675f:	c7 04 24 eb f5 01 c0 	mov    DWORD PTR [esp],0xc001f5eb
c0006766:	e8 6d 29 01 00       	call   c00190d8 <iso_kprintf>
c000676b:	58                   	pop    eax
c000676c:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006772:	e8 7d 29 01 00       	call   c00190f4 <iso_kprintfd>
c0006777:	c7 04 24 f1 f5 01 c0 	mov    DWORD PTR [esp],0xc001f5f1
c000677e:	e8 55 29 01 00       	call   c00190d8 <iso_kprintf>
c0006783:	58                   	pop    eax
c0006784:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000678a:	e8 65 29 01 00       	call   c00190f4 <iso_kprintfd>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	eb 42                	jmp    c00067d6 <iso_readdir+0xe2>
c0006794:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006797:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000679e:	89 d1                	mov    ecx,edx
c00067a0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00067a6:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00067aa:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067ad:	75 35                	jne    c00067e4 <iso_readdir+0xf0>
c00067af:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00067b5:	81 c2 00 08 00 00    	add    edx,0x800
c00067bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00067be:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00067c1:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00067c4:	73 1e                	jae    c00067e4 <iso_readdir+0xf0>
c00067c6:	8b 07                	mov    eax,DWORD PTR [edi]
c00067c8:	c1 ea 0b             	shr    edx,0xb
c00067cb:	01 d0                	add    eax,edx
c00067cd:	e8 5e f9 ff ff       	call   c0006130 <biread>
c00067d2:	85 c0                	test   eax,eax
c00067d4:	79 be                	jns    c0006794 <iso_readdir+0xa0>
c00067d6:	31 c0                	xor    eax,eax
c00067d8:	e9 6d 01 00 00       	jmp    c000694a <iso_readdir+0x256>
c00067dd:	31 f6                	xor    esi,esi
c00067df:	83 c8 ff             	or     eax,0xffffffff
c00067e2:	eb da                	jmp    c00067be <iso_readdir+0xca>
c00067e4:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00067ea:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00067f0:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00067f6:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00067f9:	73 db                	jae    c00067d6 <iso_readdir+0xe2>
c00067fb:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00067ff:	75 34                	jne    c0006835 <iso_readdir+0x141>
c0006801:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006805:	75 2e                	jne    c0006835 <iso_readdir+0x141>
c0006807:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000680a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006811:	01 f9                	add    ecx,edi
c0006813:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006816:	89 c8                	mov    eax,ecx
c0006818:	25 ff 07 00 00       	and    eax,0x7ff
c000681d:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006822:	01 c8                	add    eax,ecx
c0006824:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006827:	25 ff 07 00 00       	and    eax,0x7ff
c000682c:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006830:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006833:	74 a1                	je     c00067d6 <iso_readdir+0xe2>
c0006835:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c000683b:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000683f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006846:	8d 56 21             	lea    edx,[esi+0x21]
c0006849:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000684f:	74 0c                	je     c000685d <iso_readdir+0x169>
c0006851:	89 e8                	mov    eax,ebp
c0006853:	e8 3a f6 ff ff       	call   c0005e92 <ucs2utfn>
c0006858:	e9 b4 00 00 00       	jmp    c0006911 <iso_readdir+0x21d>
c000685d:	50                   	push   eax
c000685e:	51                   	push   ecx
c000685f:	52                   	push   edx
c0006860:	55                   	push   ebp
c0006861:	e8 5a 9e ff ff       	call   c00006c0 <strncpy>
c0006866:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000686a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000686d:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006875:	e8 54 fe ff ff       	call   c00066ce <fn_postprocess>
c000687a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000687e:	83 c4 10             	add    esp,0x10
c0006881:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006884:	89 d1                	mov    ecx,edx
c0006886:	80 e1 01             	and    cl,0x1
c0006889:	29 d0                	sub    eax,edx
c000688b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000688f:	84 c9                	test   cl,cl
c0006891:	74 05                	je     c0006898 <iso_readdir+0x1a4>
c0006893:	83 e8 21             	sub    eax,0x21
c0006896:	eb 04                	jmp    c000689c <iso_readdir+0x1a8>
c0006898:	42                   	inc    edx
c0006899:	83 e8 22             	sub    eax,0x22
c000689c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00068a0:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00068a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00068aa:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00068af:	7e 60                	jle    c0006911 <iso_readdir+0x21d>
c00068b1:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00068b4:	fe c8                	dec    al
c00068b6:	3c 01                	cmp    al,0x1
c00068b8:	77 57                	ja     c0006911 <iso_readdir+0x21d>
c00068ba:	51                   	push   ecx
c00068bb:	6a 02                	push   0x2
c00068bd:	68 dd f5 01 c0       	push   0xc001f5dd
c00068c2:	52                   	push   edx
c00068c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00068c7:	e8 74 9f ff ff       	call   c0000840 <strncmp>
c00068cc:	83 c4 10             	add    esp,0x10
c00068cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068d3:	85 c0                	test   eax,eax
c00068d5:	75 2e                	jne    c0006905 <iso_readdir+0x211>
c00068d7:	50                   	push   eax
c00068d8:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00068dc:	83 e8 05             	sub    eax,0x5
c00068df:	50                   	push   eax
c00068e0:	8d 42 05             	lea    eax,[edx+0x5]
c00068e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00068e7:	50                   	push   eax
c00068e8:	55                   	push   ebp
c00068e9:	e8 d2 9d ff ff       	call   c00006c0 <strncpy>
c00068ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00068f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00068f6:	83 c4 10             	add    esp,0x10
c00068f9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00068fd:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006905:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006909:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000690d:	01 c2                	add    edx,eax
c000690f:	eb 99                	jmp    c00068aa <iso_readdir+0x1b6>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006918:	89 c2                	mov    edx,eax
c000691a:	75 0a                	jne    c0006926 <iso_readdir+0x232>
c000691c:	8d 46 0a             	lea    eax,[esi+0xa]
c000691f:	e8 0d f6 ff ff       	call   c0005f31 <iso_733>
c0006924:	31 d2                	xor    edx,edx
c0006926:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000692c:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006932:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006938:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c000693e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006941:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006944:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c000694a:	83 c4 1c             	add    esp,0x1c
c000694d:	5b                   	pop    ebx
c000694e:	5e                   	pop    esi
c000694f:	5f                   	pop    edi
c0006950:	5d                   	pop    ebp
c0006951:	c3                   	ret    

c0006952 <iso_reset>:
c0006952:	83 ec 18             	sub    esp,0x18
c0006955:	68 fa f5 01 c0       	push   0xc001f5fa
c000695a:	e8 79 27 01 00       	call   c00190d8 <iso_kprintf>
c000695f:	e8 17 f7 ff ff       	call   c000607b <iso_break_all>
c0006964:	e8 10 f7 ff ff       	call   c0006079 <bclear>
c0006969:	31 c0                	xor    eax,eax
c000696b:	83 c4 1c             	add    esp,0x1c
c000696e:	c3                   	ret    

c000696f <init_percd>:
c000696f:	57                   	push   edi
c0006970:	56                   	push   esi
c0006971:	53                   	push   ebx
c0006972:	bb 01 00 00 00       	mov    ebx,0x1
c0006977:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000697b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006980:	e8 cd ff ff ff       	call   c0006952 <iso_reset>
c0006985:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c000698f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006994:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006998:	e8 93 f7 ff ff       	call   c0006130 <biread>
c000699d:	85 c0                	test   eax,eax
c000699f:	89 c6                	mov    esi,eax
c00069a1:	0f 88 ba 00 00 00    	js     c0006a61 <init_percd+0xf2>
c00069a7:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00069ae:	52                   	push   edx
c00069af:	6a 06                	push   0x6
c00069b1:	68 05 f6 01 c0       	push   0xc001f605
c00069b6:	83 c0 04             	add    eax,0x4
c00069b9:	50                   	push   eax
c00069ba:	e8 c1 99 ff ff       	call   c0000380 <memcmp>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	85 c0                	test   eax,eax
c00069c4:	74 08                	je     c00069ce <init_percd+0x5f>
c00069c6:	43                   	inc    ebx
c00069c7:	83 fb 04             	cmp    ebx,0x4
c00069ca:	75 c3                	jne    c000698f <init_percd+0x20>
c00069cc:	eb 1a                	jmp    c00069e8 <init_percd+0x79>
c00069ce:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c00069d5:	83 c0 5c             	add    eax,0x5c
c00069d8:	e8 25 f5 ff ff       	call   c0005f02 <isjoliet>
c00069dd:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c00069e2:	85 c0                	test   eax,eax
c00069e4:	74 e0                	je     c00069c6 <init_percd+0x57>
c00069e6:	eb 3e                	jmp    c0006a26 <init_percd+0xb7>
c00069e8:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00069ef:	75 35                	jne    c0006a26 <init_percd+0xb7>
c00069f1:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c00069f6:	83 c0 10             	add    eax,0x10
c00069f9:	e8 32 f7 ff ff       	call   c0006130 <biread>
c00069fe:	85 c0                	test   eax,eax
c0006a00:	89 c6                	mov    esi,eax
c0006a02:	78 5f                	js     c0006a63 <init_percd+0xf4>
c0006a04:	50                   	push   eax
c0006a05:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a0c:	83 cb ff             	or     ebx,0xffffffff
c0006a0f:	6a 06                	push   0x6
c0006a11:	68 0c f6 01 c0       	push   0xc001f60c
c0006a16:	83 c0 04             	add    eax,0x4
c0006a19:	50                   	push   eax
c0006a1a:	e8 61 99 ff ff       	call   c0000380 <memcmp>
c0006a1f:	83 c4 10             	add    esp,0x10
c0006a22:	85 c0                	test   eax,eax
c0006a24:	75 3d                	jne    c0006a63 <init_percd+0xf4>
c0006a26:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006a2d:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006a32:	b9 22 00 00 00       	mov    ecx,0x22
c0006a37:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006a3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a3f:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006a44:	31 db                	xor    ebx,ebx
c0006a46:	e8 e6 f4 ff ff       	call   c0005f31 <iso_733>
c0006a4b:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006a50:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006a55:	e8 d7 f4 ff ff       	call   c0005f31 <iso_733>
c0006a5a:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006a5f:	eb 02                	jmp    c0006a63 <init_percd+0xf4>
c0006a61:	89 c3                	mov    ebx,eax
c0006a63:	89 d8                	mov    eax,ebx
c0006a65:	5b                   	pop    ebx
c0006a66:	5e                   	pop    esi
c0006a67:	5f                   	pop    edi
c0006a68:	c3                   	ret    

c0006a69 <iso_ioctl>:
c0006a69:	83 ec 18             	sub    esp,0x18
c0006a6c:	68 13 f6 01 c0       	push   0xc001f613
c0006a71:	e8 62 26 01 00       	call   c00190d8 <iso_kprintf>
c0006a76:	e8 d7 fe ff ff       	call   c0006952 <iso_reset>
c0006a7b:	31 c0                	xor    eax,eax
c0006a7d:	83 c4 1c             	add    esp,0x1c
c0006a80:	c3                   	ret    

c0006a81 <fs_iso9660_init>:
c0006a81:	53                   	push   ebx
c0006a82:	31 db                	xor    ebx,ebx
c0006a84:	83 ec 14             	sub    esp,0x14
c0006a87:	68 1e f6 01 c0       	push   0xc001f61e
c0006a8c:	e8 47 26 01 00       	call   c00190d8 <iso_kprintf>
c0006a91:	83 c4 0c             	add    esp,0xc
c0006a94:	68 40 09 00 00       	push   0x940
c0006a99:	6a 00                	push   0x0
c0006a9b:	68 40 45 02 c0       	push   0xc0024540
c0006aa0:	e8 4b 9a ff ff       	call   c00004f0 <memset>
c0006aa5:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006aaf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ab6:	e8 ab 0f 00 00       	call   c0007a66 <malloc>
c0006abb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ac2:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006ac7:	e8 9a 0f 00 00       	call   c0007a66 <malloc>
c0006acc:	83 c4 10             	add    esp,0x10
c0006acf:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006ad4:	83 ec 0c             	sub    esp,0xc
c0006ad7:	68 04 08 00 00       	push   0x804
c0006adc:	e8 85 0f 00 00       	call   c0007a66 <malloc>
c0006ae1:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006ae8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006aee:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006af5:	e8 6c 0f 00 00       	call   c0007a66 <malloc>
c0006afa:	83 c4 10             	add    esp,0x10
c0006afd:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b04:	43                   	inc    ebx
c0006b05:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b0b:	83 fb 10             	cmp    ebx,0x10
c0006b0e:	75 c4                	jne    c0006ad4 <fs_iso9660_init+0x53>
c0006b10:	83 c4 08             	add    esp,0x8
c0006b13:	31 c0                	xor    eax,eax
c0006b15:	5b                   	pop    ebx
c0006b16:	c3                   	ret    

c0006b17 <fs_iso9660_shutdown>:
c0006b17:	53                   	push   ebx
c0006b18:	31 db                	xor    ebx,ebx
c0006b1a:	83 ec 08             	sub    esp,0x8
c0006b1d:	83 ec 0c             	sub    esp,0xc
c0006b20:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006b27:	e8 4d 0f 00 00       	call   c0007a79 <free>
c0006b2c:	58                   	pop    eax
c0006b2d:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006b34:	43                   	inc    ebx
c0006b35:	e8 3f 0f 00 00       	call   c0007a79 <free>
c0006b3a:	83 c4 10             	add    esp,0x10
c0006b3d:	83 fb 10             	cmp    ebx,0x10
c0006b40:	75 db                	jne    c0006b1d <fs_iso9660_shutdown+0x6>
c0006b42:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006b47:	85 c0                	test   eax,eax
c0006b49:	74 0c                	je     c0006b57 <fs_iso9660_shutdown+0x40>
c0006b4b:	83 ec 0c             	sub    esp,0xc
c0006b4e:	50                   	push   eax
c0006b4f:	e8 25 0f 00 00       	call   c0007a79 <free>
c0006b54:	83 c4 10             	add    esp,0x10
c0006b57:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006b5c:	85 c0                	test   eax,eax
c0006b5e:	74 0c                	je     c0006b6c <fs_iso9660_shutdown+0x55>
c0006b60:	83 ec 0c             	sub    esp,0xc
c0006b63:	50                   	push   eax
c0006b64:	e8 10 0f 00 00       	call   c0007a79 <free>
c0006b69:	83 c4 10             	add    esp,0x10
c0006b6c:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006b76:	31 c0                	xor    eax,eax
c0006b78:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006b82:	83 c4 08             	add    esp,0x8
c0006b85:	5b                   	pop    ebx
c0006b86:	c3                   	ret    
c0006b87:	90                   	nop

c0006b88 <Computer::close(int, int, void*)>:
c0006b88:	83 ec 1c             	sub    esp,0x1c
c0006b8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006b8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006b97:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006b9b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006b9f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006ba3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006bac:	e8 7f 53 00 00       	call   c000bf30 <Device::closeAll()>
c0006bb1:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bb7:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006bbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006bc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0006bc2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006bc6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006bca:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006bce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006bd2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006bd6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bda:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006bdd:	83 c4 1c             	add    esp,0x1c
c0006be0:	ff e0                	jmp    eax

c0006be2 <Krnl::firstTask()>:
c0006be2:	53                   	push   ebx
c0006be3:	83 ec 28             	sub    esp,0x28
c0006be6:	fb                   	sti    
c0006be7:	c7 04 24 2f f6 01 c0 	mov    DWORD PTR [esp],0xc001f62f
c0006bee:	e8 ce 94 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006bf3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006bfa:	e8 67 0e 00 00       	call   c0007a66 <malloc>
c0006bff:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c05:	b9 01 00 00 00       	mov    ecx,0x1
c0006c0a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006c12:	ba 48 f6 01 c0       	mov    edx,0xc001f648
c0006c17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006c1b:	89 c3                	mov    ebx,eax
c0006c1d:	31 c0                	xor    eax,eax
c0006c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c26:	e8 b5 df 00 00       	call   c0014be0 <Process::Process(bool, char const*, Process*, char**)>
c0006c2b:	b8 ff 00 00 00       	mov    eax,0xff
c0006c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c34:	31 c0                	xor    eax,eax
c0006c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c3a:	b8 97 74 00 c0       	mov    eax,0xc0007497
c0006c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c42:	31 db                	xor    ebx,ebx
c0006c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006c48:	e8 ab e1 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c0006c4d:	b8 7a 00 00 00       	mov    eax,0x7a
c0006c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c56:	31 c0                	xor    eax,eax
c0006c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c5c:	b8 24 58 01 c0       	mov    eax,0xc0015824
c0006c61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006c65:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006c6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c6d:	e8 86 e1 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c0006c72:	b2 01                	mov    dl,0x1
c0006c74:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006c7a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006c7f:	e8 68 9c 00 00       	call   c00108ec <KeInitRand()>
c0006c84:	c7 04 24 44 f7 01 c0 	mov    DWORD PTR [esp],0xc001f744
c0006c8b:	e8 31 94 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006c90:	e8 4c ef 00 00       	call   c0015be1 <Vm::initialise8086()>
c0006c95:	e8 fd 40 00 00       	call   c000ad97 <Fs::initVFS()>
c0006c9a:	c7 04 24 55 f6 01 c0 	mov    DWORD PTR [esp],0xc001f655
c0006ca1:	e8 1b 94 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006ca6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006cab:	31 c9                	xor    ecx,ecx
c0006cad:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006cb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cb5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006cb9:	31 c9                	xor    ecx,ecx
c0006cbb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006cbf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006cc3:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006cc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ccb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006cce:	c7 04 24 44 f7 01 c0 	mov    DWORD PTR [esp],0xc001f744
c0006cd5:	e8 e7 93 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006cda:	e8 b9 98 00 00       	call   c0010598 <Krnl::loadSystemEnv()>
c0006cdf:	e8 16 9b 00 00       	call   c00107fa <Krnl::setupPowerManager()>
c0006ce4:	b8 6f f6 01 c0       	mov    eax,0xc001f66f
c0006ce9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf1:	c7 04 24 78 f6 01 c0 	mov    DWORD PTR [esp],0xc001f678
c0006cf8:	e8 c6 c1 00 00       	call   c0012ec3 <Reg::readIntWithDefault(char*, char*, int)>
c0006cfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d00:	e8 8f 4b 00 00       	call   c000b894 <User::loadClockSettings(int)>
c0006d05:	c7 04 24 68 f7 01 c0 	mov    DWORD PTR [esp],0xc001f768
c0006d0c:	e8 b0 93 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006d11:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d16:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d1f:	e8 0a 52 00 00       	call   c000bf2e <Device::loadDriversForAll()>
c0006d24:	c7 04 24 80 f6 01 c0 	mov    DWORD PTR [esp],0xc001f680
c0006d2b:	e8 91 93 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0006d30:	b8 01 00 00 00       	mov    eax,0x1
c0006d35:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006d3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d3f:	c7 04 24 91 f6 01 c0 	mov    DWORD PTR [esp],0xc001f691
c0006d46:	e8 82 d8 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c0006d4b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d52:	e8 b2 da 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c0006d57:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006d5e:	e8 c9 e4 00 00       	call   c001522c <blockTask(TaskState)>
c0006d63:	eb f2                	jmp    c0006d57 <Krnl::firstTask()+0x175>
c0006d65:	90                   	nop

c0006d66 <Computer::Computer()>:
c0006d66:	83 ec 1c             	sub    esp,0x1c
c0006d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d6d:	c7 44 24 04 ad f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f6ad
c0006d75:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d78:	e8 2d 52 00 00       	call   c000bfaa <Device::Device(char const*)>
c0006d7d:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0006d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d86:	89 10                	mov    DWORD PTR [eax],edx
c0006d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d8c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006d96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d9a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006da8:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006daf:	80 ca 04             	or     dl,0x4
c0006db2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dbc:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006dc3:	0f b6 d0             	movzx  edx,al
c0006dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dca:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dd5:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006ddc:	0f b6 d0             	movzx  edx,al
c0006ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006de3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dec:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006df3:	88 c1                	mov    cl,al
c0006df5:	fe c1                	inc    cl
c0006df7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006dfb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e01:	0f b6 d0             	movzx  edx,al
c0006e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e08:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e0d:	80 e1 3f             	and    cl,0x3f
c0006e10:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e14:	90                   	nop
c0006e15:	83 c4 1c             	add    esp,0x1c
c0006e18:	c3                   	ret    
c0006e19:	90                   	nop

c0006e1a <Computer::setBootMessage(char const*)>:
c0006e1a:	c3                   	ret    
c0006e1b:	90                   	nop

c0006e1c <Computer::detectFeatures()>:
c0006e1c:	55                   	push   ebp
c0006e1d:	57                   	push   edi
c0006e1e:	56                   	push   esi
c0006e1f:	53                   	push   ebx
c0006e20:	83 ec 3c             	sub    esp,0x3c
c0006e23:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006e27:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006e31:	e8 c3 93 ff ff       	call   c00001f9 <detectCPUID>
c0006e36:	85 c0                	test   eax,eax
c0006e38:	0f 95 c0             	setne  al
c0006e3b:	00 c0                	add    al,al
c0006e3d:	88 c2                	mov    dl,al
c0006e3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006e46:	24 fd                	and    al,0xfd
c0006e48:	08 d0                	or     al,dl
c0006e4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e50:	24 02                	and    al,0x2
c0006e52:	75 48                	jne    c0006e9c <Computer::detectFeatures()+0x80>
c0006e54:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006e5b:	74 07                	je     c0006e64 <Computer::detectFeatures()+0x48>
c0006e5d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006e64:	e8 6d 71 01 00       	call   c001dfd6 <x87Detect>
c0006e69:	24 01                	and    al,0x1
c0006e6b:	c0 e0 04             	shl    al,0x4
c0006e6e:	88 c2                	mov    dl,al
c0006e70:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006e77:	24 ef                	and    al,0xef
c0006e79:	08 d0                	or     al,dl
c0006e7b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e81:	88 c2                	mov    dl,al
c0006e83:	80 e2 10             	and    dl,0x10
c0006e86:	0f 85 34 01 00 00    	jne    c0006fc0 <Computer::detectFeatures()+0x1a4>
c0006e8c:	84 c0                	test   al,al
c0006e8e:	0f 88 4f 01 00 00    	js     c0006fe3 <Computer::detectFeatures()+0x1c7>
c0006e94:	83 c4 3c             	add    esp,0x3c
c0006e97:	5b                   	pop    ebx
c0006e98:	5e                   	pop    esi
c0006e99:	5f                   	pop    edi
c0006e9a:	5d                   	pop    ebp
c0006e9b:	c3                   	ret    
c0006e9c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006ea3:	e8 72 87 00 00       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c0006ea8:	24 01                	and    al,0x1
c0006eaa:	c0 e0 03             	shl    al,0x3
c0006ead:	88 c2                	mov    dl,al
c0006eaf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006eb6:	24 f7                	and    al,0xf7
c0006eb8:	08 d0                	or     al,dl
c0006eba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ec0:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006ec7:	e8 4e 87 00 00       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c0006ecc:	24 01                	and    al,0x1
c0006ece:	88 c2                	mov    dl,al
c0006ed0:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ed7:	24 fe                	and    al,0xfe
c0006ed9:	08 d0                	or     al,dl
c0006edb:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ee1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006ee8:	e8 2d 87 00 00       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c0006eed:	c0 e0 07             	shl    al,0x7
c0006ef0:	88 c2                	mov    dl,al
c0006ef2:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ef9:	24 7f                	and    al,0x7f
c0006efb:	08 d0                	or     al,dl
c0006efd:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f0a:	e8 0b 87 00 00       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c0006f0f:	24 01                	and    al,0x1
c0006f11:	c0 e0 05             	shl    al,0x5
c0006f14:	88 c2                	mov    dl,al
c0006f16:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f1d:	24 df                	and    al,0xdf
c0006f1f:	08 d0                	or     al,dl
c0006f21:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006f2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f31:	0f 84 d1 00 00 00    	je     c0007008 <Computer::detectFeatures()+0x1ec>
c0006f37:	24 fe                	and    al,0xfe
c0006f39:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	88 c2                	mov    dl,al
c0006f48:	80 e2 09             	and    dl,0x9
c0006f4b:	fe ca                	dec    dl
c0006f4d:	75 08                	jne    c0006f57 <Computer::detectFeatures()+0x13b>
c0006f4f:	24 fe                	and    al,0xfe
c0006f51:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f57:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006f5b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006f5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f63:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006f67:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006f6b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006f6f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0006f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0006f77:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c0006f7e:	e8 13 86 00 00       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f83:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006f87:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c0006f8f:	0f 86 bf fe ff ff    	jbe    c0006e54 <Computer::detectFeatures()+0x38>
c0006f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f99:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006f9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0006fa1:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0006fa5:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c0006fac:	e8 e5 85 00 00       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006fb1:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006fbb:	e9 94 fe ff ff       	jmp    c0006e54 <Computer::detectFeatures()+0x38>
c0006fc0:	e8 cb 6f 01 00       	call   c001df90 <absolutelyNoChanceInHell>
c0006fc5:	88 c2                	mov    dl,al
c0006fc7:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fce:	c0 e2 07             	shl    dl,0x7
c0006fd1:	24 7f                	and    al,0x7f
c0006fd3:	08 d0                	or     al,dl
c0006fd5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fdb:	84 c0                	test   al,al
c0006fdd:	0f 89 b1 fe ff ff    	jns    c0006e94 <Computer::detectFeatures()+0x78>
c0006fe3:	e8 18 6c 01 00       	call   c001dc00 <avxDetect>
c0006fe8:	24 01                	and    al,0x1
c0006fea:	c0 e0 05             	shl    al,0x5
c0006fed:	88 c2                	mov    dl,al
c0006fef:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ff6:	24 df                	and    al,0xdf
c0006ff8:	08 d0                	or     al,dl
c0006ffa:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007000:	83 c4 3c             	add    esp,0x3c
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	5f                   	pop    edi
c0007006:	5d                   	pop    ebp
c0007007:	c3                   	ret    
c0007008:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000700f:	e8 06 86 00 00       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c0007014:	24 01                	and    al,0x1
c0007016:	88 c2                	mov    dl,al
c0007018:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000701f:	24 fe                	and    al,0xfe
c0007021:	08 d0                	or     al,dl
c0007023:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007029:	e9 11 ff ff ff       	jmp    c0006f3f <Computer::detectFeatures()+0x123>

c000702e <Computer::displayFeatures()>:
c000702e:	c3                   	ret    
c000702f:	90                   	nop

c0007030 <Computer::rdmsr(unsigned int)>:
c0007030:	83 ec 1c             	sub    esp,0x1c
c0007033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007037:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000703e:	74 0a                	je     c000704a <Computer::rdmsr(unsigned int)+0x1a>
c0007040:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007044:	0f 32                	rdmsr  
c0007046:	83 c4 1c             	add    esp,0x1c
c0007049:	c3                   	ret    
c000704a:	c7 04 24 b6 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6b6
c0007051:	e8 df 96 00 00       	call   c0010735 <KePanic(char const*)>
c0007056:	eb e8                	jmp    c0007040 <Computer::rdmsr(unsigned int)+0x10>

c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007058:	83 ec 1c             	sub    esp,0x1c
c000705b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000705f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007063:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007067:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000706b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000706f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007076:	74 16                	je     c000708e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007078:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000707c:	89 f0                	mov    eax,esi
c000707e:	89 fa                	mov    edx,edi
c0007080:	0f 30                	wrmsr  
c0007082:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007086:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000708a:	83 c4 1c             	add    esp,0x1c
c000708d:	c3                   	ret    
c000708e:	c7 04 24 bc f6 01 c0 	mov    DWORD PTR [esp],0xc001f6bc
c0007095:	e8 9b 96 00 00       	call   c0010735 <KePanic(char const*)>
c000709a:	eb dc                	jmp    c0007078 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000709c <Computer::shutdown()>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	31 c9                	xor    ecx,ecx
c00070a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00070a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00070ab:	31 c9                	xor    ecx,ecx
c00070ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00070b1:	31 c9                	xor    ecx,ecx
c00070b3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00070b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070bd:	83 c4 1c             	add    esp,0x1c
c00070c0:	c3                   	ret    
c00070c1:	90                   	nop

c00070c2 <Computer::restart()>:
c00070c2:	83 ec 1c             	sub    esp,0x1c
c00070c5:	31 c9                	xor    ecx,ecx
c00070c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00070cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00070d1:	31 c9                	xor    ecx,ecx
c00070d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00070d7:	b9 01 00 00 00       	mov    ecx,0x1
c00070dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00070e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00070e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070e6:	83 c4 1c             	add    esp,0x1c
c00070e9:	c3                   	ret    

c00070ea <Computer::sleep()>:
c00070ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ee:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00070f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070f8:	e9 c3 7f 00 00       	jmp    c000f0c0 <ACPI::sleep()>
c00070fd:	90                   	nop

c00070fe <Computer::nmiEnabled()>:
c00070fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007102:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007109:	c3                   	ret    

c000710a <Computer::readCMOS(unsigned char)>:
c000710a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000710e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007113:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000711a:	19 c0                	sbb    eax,eax
c000711c:	24 80                	and    al,0x80
c000711e:	08 d0                	or     al,dl
c0007120:	e6 70                	out    0x70,al
c0007122:	e4 71                	in     al,0x71
c0007124:	c3                   	ret    
c0007125:	90                   	nop

c0007126 <Computer::enableNMI(bool)>:
c0007126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000712a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000712f:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007135:	b8 10 00 00 00       	mov    eax,0x10
c000713a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000713e:	eb ca                	jmp    c000710a <Computer::readCMOS(unsigned char)>

c0007140 <Computer::open(int, int, void*)>:
c0007140:	56                   	push   esi
c0007141:	53                   	push   ebx
c0007142:	83 ec 14             	sub    esp,0x14
c0007145:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c000714c:	c7 04 24 c2 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6c2
c0007153:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007157:	0f 94 05 c0 1a 02 c0 	sete   BYTE PTR ds:0xc0021ac0
c000715e:	e8 5e 8f 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0007163:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000716a:	e8 f7 08 00 00       	call   c0007a66 <malloc>
c000716f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007172:	89 c6                	mov    esi,eax
c0007174:	e8 eb 7a 00 00       	call   c000ec64 <ACPI::ACPI()>
c0007179:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000717f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007183:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007186:	e8 87 4c 00 00       	call   c000be12 <Device::addChild(Device*)>
c000718b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000718e:	e8 89 fc ff ff       	call   c0006e1c <Computer::detectFeatures()>
c0007193:	b8 01 00 00 00       	mov    eax,0x1
c0007198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000719f:	e8 82 ff ff ff       	call   c0007126 <Computer::enableNMI(bool)>
c00071a4:	c7 04 24 da f6 01 c0 	mov    DWORD PTR [esp],0xc001f6da
c00071ab:	e8 11 8f 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c00071b0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00071b7:	e8 aa 08 00 00       	call   c0007a66 <malloc>
c00071bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00071bf:	89 c6                	mov    esi,eax
c00071c1:	e8 0c 85 00 00       	call   c000f6d2 <CPU::CPU()>
c00071c6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00071cc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00071d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071d3:	e8 3a 4c 00 00       	call   c000be12 <Device::addChild(Device*)>
c00071d8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00071de:	31 db                	xor    ebx,ebx
c00071e0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00071e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00071e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00071ea:	31 c9                	xor    ecx,ecx
c00071ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071f0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00071f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00071fa:	c7 04 24 f4 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6f4
c0007201:	e8 bb 8e 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c0007206:	c7 04 24 e2 6b 00 c0 	mov    DWORD PTR [esp],0xc0006be2
c000720d:	e8 16 dd 00 00       	call   c0014f28 <setupMultitasking(void (*)())>
c0007212:	83 c4 14             	add    esp,0x14
c0007215:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000721a:	5b                   	pop    ebx
c000721b:	5e                   	pop    esi
c000721c:	c3                   	ret    
c000721d:	90                   	nop

c000721e <Computer::disableNMI()>:
c000721e:	83 ec 08             	sub    esp,0x8
c0007221:	31 c0                	xor    eax,eax
c0007223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000722b:	89 04 24             	mov    DWORD PTR [esp],eax
c000722e:	e8 f3 fe ff ff       	call   c0007126 <Computer::enableNMI(bool)>
c0007233:	83 c4 08             	add    esp,0x8
c0007236:	c3                   	ret    
c0007237:	90                   	nop

c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000723c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007241:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007248:	19 c0                	sbb    eax,eax
c000724a:	24 80                	and    al,0x80
c000724c:	08 d0                	or     al,dl
c000724e:	e6 70                	out    0x70,al
c0007250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007254:	e6 71                	out    0x71,al
c0007256:	c3                   	ret    
c0007257:	90                   	nop

c0007258 <Computer::handleNMI()>:
c0007258:	83 ec 2c             	sub    esp,0x2c
c000725b:	e4 92                	in     al,0x92
c000725d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0007261:	e4 61                	in     al,0x61
c0007263:	c7 04 24 0f f7 01 c0 	mov    DWORD PTR [esp],0xc001f70f
c000726a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000726e:	e8 73 37 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0007273:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007278:	24 10                	and    al,0x10
c000727a:	75 14                	jne    c0007290 <Computer::handleNMI()+0x38>
c000727c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007281:	24 40                	and    al,0x40
c0007283:	75 20                	jne    c00072a5 <Computer::handleNMI()+0x4d>
c0007285:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000728a:	78 2c                	js     c00072b8 <Computer::handleNMI()+0x60>
c000728c:	83 c4 2c             	add    esp,0x2c
c000728f:	c3                   	ret    
c0007290:	c7 04 24 20 f7 01 c0 	mov    DWORD PTR [esp],0xc001f720
c0007297:	e8 99 94 00 00       	call   c0010735 <KePanic(char const*)>
c000729c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00072a1:	24 40                	and    al,0x40
c00072a3:	74 e0                	je     c0007285 <Computer::handleNMI()+0x2d>
c00072a5:	c7 04 24 2d f7 01 c0 	mov    DWORD PTR [esp],0xc001f72d
c00072ac:	e8 84 94 00 00       	call   c0010735 <KePanic(char const*)>
c00072b1:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00072b6:	79 d4                	jns    c000728c <Computer::handleNMI()+0x34>
c00072b8:	b8 37 f7 01 c0       	mov    eax,0xc001f737
c00072bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00072c1:	83 c4 2c             	add    esp,0x2c
c00072c4:	e9 6c 94 00 00       	jmp    c0010735 <KePanic(char const*)>
c00072c9:	90                   	nop

c00072ca <GDTEntry::setBase(unsigned int)>:
c00072ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072d2:	89 c1                	mov    ecx,eax
c00072d4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072d8:	c1 e9 10             	shr    ecx,0x10
c00072db:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00072de:	c1 e8 18             	shr    eax,0x18
c00072e1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00072e4:	c3                   	ret    
c00072e5:	90                   	nop

c00072e6 <GDTEntry::setLimit(unsigned int)>:
c00072e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00072f1:	66 89 01             	mov    WORD PTR [ecx],ax
c00072f4:	c1 e8 10             	shr    eax,0x10
c00072f7:	24 0f                	and    al,0xf
c00072f9:	80 e2 f0             	and    dl,0xf0
c00072fc:	08 d0                	or     al,dl
c00072fe:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007301:	c3                   	ret    

c0007302 <GDT::GDT()>:
c0007302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007306:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000730c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007310:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007316:	90                   	nop
c0007317:	c3                   	ret    

c0007318 <GDT::addEntry(GDTEntry)>:
c0007318:	53                   	push   ebx
c0007319:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000731d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007321:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007325:	8b 02                	mov    eax,DWORD PTR [edx]
c0007327:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000732b:	8d 48 01             	lea    ecx,[eax+0x1]
c000732e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007332:	c1 e0 03             	shl    eax,0x3
c0007335:	89 0a                	mov    DWORD PTR [edx],ecx
c0007337:	5b                   	pop    ebx
c0007338:	c3                   	ret    
c0007339:	90                   	nop

c000733a <GDT::getNumberOfEntries()>:
c000733a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000733e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007340:	c3                   	ret    
c0007341:	90                   	nop

c0007342 <GDT::flush()>:
c0007342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007346:	8b 10                	mov    edx,DWORD PTR [eax]
c0007348:	83 c0 04             	add    eax,0x4
c000734b:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007350:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007357:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c000735e:	e9 f7 8f ff ff       	jmp    c000035a <loadGDT>
c0007363:	90                   	nop

c0007364 <GDT::setup()>:
c0007364:	57                   	push   edi
c0007365:	56                   	push   esi
c0007366:	53                   	push   ebx
c0007367:	83 ec 30             	sub    esp,0x30
c000736a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000736e:	6a 00                	push   0x0
c0007370:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007374:	56                   	push   esi
c0007375:	e8 50 ff ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c000737a:	6a 00                	push   0x0
c000737c:	56                   	push   esi
c000737d:	e8 64 ff ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c0007382:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000738a:	6a 00                	push   0x0
c000738c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007390:	56                   	push   esi
c0007391:	e8 34 ff ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0007396:	68 ff ff ff 00       	push   0xffffff
c000739b:	56                   	push   esi
c000739c:	e8 45 ff ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c00073a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073a9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00073ae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073b2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00073b7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00073bb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00073bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00073c3:	89 f8                	mov    eax,edi
c00073c5:	89 fa                	mov    edx,edi
c00073c7:	80 e4 f7             	and    ah,0xf7
c00073ca:	80 ce 60             	or     dh,0x60
c00073cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00073d1:	89 c7                	mov    edi,eax
c00073d3:	80 cc 60             	or     ah,0x60
c00073d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00073da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00073de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00073e2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00073e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00073ea:	83 c4 20             	add    esp,0x20
c00073ed:	6a 00                	push   0x0
c00073ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00073f3:	50                   	push   eax
c00073f4:	e8 d1 fe ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c00073f9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00073fd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007401:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007406:	6a 00                	push   0x0
c0007408:	8d 44 24 34          	lea    eax,[esp+0x34]
c000740c:	50                   	push   eax
c000740d:	e8 b8 fe ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0007412:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007417:	83 c4 0c             	add    esp,0xc
c000741a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007422:	53                   	push   ebx
c0007423:	e8 f0 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007428:	83 c4 0c             	add    esp,0xc
c000742b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000742f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007433:	53                   	push   ebx
c0007434:	e8 df fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007439:	83 c4 0c             	add    esp,0xc
c000743c:	57                   	push   edi
c000743d:	56                   	push   esi
c000743e:	53                   	push   ebx
c000743f:	e8 d4 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007444:	83 c4 0c             	add    esp,0xc
c0007447:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000744b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000744f:	53                   	push   ebx
c0007450:	e8 c3 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007455:	83 c4 0c             	add    esp,0xc
c0007458:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000745c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007460:	53                   	push   ebx
c0007461:	e8 b2 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007466:	83 c4 0c             	add    esp,0xc
c0007469:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000746d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007471:	53                   	push   ebx
c0007472:	e8 a1 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007477:	83 c4 0c             	add    esp,0xc
c000747a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000747e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007482:	53                   	push   ebx
c0007483:	e8 90 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007488:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000748b:	e8 b2 fe ff ff       	call   c0007342 <GDT::flush()>
c0007490:	83 c4 40             	add    esp,0x40
c0007493:	5b                   	pop    ebx
c0007494:	5e                   	pop    esi
c0007495:	5f                   	pop    edi
c0007496:	c3                   	ret    

c0007497 <idleFunction(void*)>:
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000749f:	48                   	dec    eax
c00074a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00074a5:	75 01                	jne    c00074a8 <idleFunction(void*)+0x11>
c00074a7:	fb                   	sti    
c00074a8:	e8 4e f5 00 00       	call   c00169fb <HalSystemIdle()>
c00074ad:	e8 d9 70 01 00       	call   c001e58b <idleCommon()>
c00074b2:	eb f4                	jmp    c00074a8 <idleFunction(void*)+0x11>

c00074b4 <IDTEntry::IDTEntry(bool)>:
c00074b4:	83 ec 04             	sub    esp,0x4
c00074b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074bb:	88 04 24             	mov    BYTE PTR [esp],al
c00074be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074c2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00074c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074d4:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00074d8:	80 e2 f0             	and    dl,0xf0
c00074db:	80 ca 0e             	or     dl,0xe
c00074de:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074e5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00074e9:	80 e2 ef             	and    dl,0xef
c00074ec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074ef:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00074f3:	74 07                	je     c00074fc <IDTEntry::IDTEntry(bool)+0x48>
c00074f5:	b2 03                	mov    dl,0x3
c00074f7:	eb 07                	jmp    c0007500 <IDTEntry::IDTEntry(bool)+0x4c>
c00074f9:	8d 76 00             	lea    esi,[esi+0x0]
c00074fc:	b2 00                	mov    dl,0x0
c00074fe:	66 90                	xchg   ax,ax
c0007500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007504:	80 e2 03             	and    dl,0x3
c0007507:	88 d1                	mov    cl,dl
c0007509:	c0 e1 05             	shl    cl,0x5
c000750c:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007510:	80 e2 9f             	and    dl,0x9f
c0007513:	08 ca                	or     dl,cl
c0007515:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751c:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007520:	80 ca 80             	or     dl,0x80
c0007523:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007526:	90                   	nop
c0007527:	83 c4 04             	add    esp,0x4
c000752a:	c3                   	ret    
c000752b:	90                   	nop

c000752c <IDTEntry::setOffset(unsigned int)>:
c000752c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007534:	66 89 02             	mov    WORD PTR [edx],ax
c0007537:	c1 e8 10             	shr    eax,0x10
c000753a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000753e:	c3                   	ret    
c000753f:	90                   	nop

c0007540 <IDT::IDT()>:
c0007540:	90                   	nop
c0007541:	c3                   	ret    

c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007546:	83 c0 30             	add    eax,0x30
c0007549:	c3                   	ret    

c000754a <IDT::addEntry(IDTEntry, int)>:
c000754a:	53                   	push   ebx
c000754b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000754f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000755b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000755e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007562:	5b                   	pop    ebx
c0007563:	c3                   	ret    

c0007564 <IDT::addEntry(int, void (*)(), bool)>:
c0007564:	53                   	push   ebx
c0007565:	83 ec 10             	sub    esp,0x10
c0007568:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000756d:	50                   	push   eax
c000756e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007572:	53                   	push   ebx
c0007573:	e8 3c ff ff ff       	call   c00074b4 <IDTEntry::IDTEntry(bool)>
c0007578:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000757c:	53                   	push   ebx
c000757d:	e8 aa ff ff ff       	call   c000752c <IDTEntry::setOffset(unsigned int)>
c0007582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007586:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000758a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000758e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007592:	e8 b3 ff ff ff       	call   c000754a <IDT::addEntry(IDTEntry, int)>
c0007597:	83 c4 30             	add    esp,0x30
c000759a:	5b                   	pop    ebx
c000759b:	c3                   	ret    

c000759c <IDT::flush()>:
c000759c:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c00075a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075a9:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c00075ae:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c00075b5:	c3                   	ret    

c00075b6 <IDT::setup()>:
c00075b6:	57                   	push   edi
c00075b7:	56                   	push   esi
c00075b8:	53                   	push   ebx
c00075b9:	83 ec 10             	sub    esp,0x10
c00075bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00075c0:	6a 00                	push   0x0
c00075c2:	68 90 dc 01 c0       	push   0xc001dc90
c00075c7:	6a 00                	push   0x0
c00075c9:	53                   	push   ebx
c00075ca:	e8 95 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075cf:	6a 00                	push   0x0
c00075d1:	68 a0 dc 01 c0       	push   0xc001dca0
c00075d6:	6a 01                	push   0x1
c00075d8:	53                   	push   ebx
c00075d9:	e8 86 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	83 c4 20             	add    esp,0x20
c00075e1:	6a 00                	push   0x0
c00075e3:	68 aa dc 01 c0       	push   0xc001dcaa
c00075e8:	6a 02                	push   0x2
c00075ea:	53                   	push   ebx
c00075eb:	e8 74 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075f0:	6a 00                	push   0x0
c00075f2:	68 b4 dc 01 c0       	push   0xc001dcb4
c00075f7:	6a 03                	push   0x3
c00075f9:	53                   	push   ebx
c00075fa:	e8 65 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	83 c4 20             	add    esp,0x20
c0007602:	6a 00                	push   0x0
c0007604:	68 be dc 01 c0       	push   0xc001dcbe
c0007609:	6a 04                	push   0x4
c000760b:	53                   	push   ebx
c000760c:	e8 53 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007611:	6a 00                	push   0x0
c0007613:	68 c8 dc 01 c0       	push   0xc001dcc8
c0007618:	6a 05                	push   0x5
c000761a:	53                   	push   ebx
c000761b:	e8 44 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	6a 00                	push   0x0
c0007625:	68 d2 dc 01 c0       	push   0xc001dcd2
c000762a:	6a 06                	push   0x6
c000762c:	53                   	push   ebx
c000762d:	e8 32 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007632:	6a 00                	push   0x0
c0007634:	68 dc dc 01 c0       	push   0xc001dcdc
c0007639:	6a 07                	push   0x7
c000763b:	53                   	push   ebx
c000763c:	e8 23 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	83 c4 20             	add    esp,0x20
c0007644:	6a 00                	push   0x0
c0007646:	68 e6 dc 01 c0       	push   0xc001dce6
c000764b:	6a 08                	push   0x8
c000764d:	53                   	push   ebx
c000764e:	e8 11 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 ee dc 01 c0       	push   0xc001dcee
c000765a:	6a 09                	push   0x9
c000765c:	53                   	push   ebx
c000765d:	e8 02 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 f8 dc 01 c0       	push   0xc001dcf8
c000766c:	6a 0a                	push   0xa
c000766e:	53                   	push   ebx
c000766f:	e8 f0 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 00 dd 01 c0       	push   0xc001dd00
c000767b:	6a 0b                	push   0xb
c000767d:	53                   	push   ebx
c000767e:	e8 e1 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 08 dd 01 c0       	push   0xc001dd08
c000768d:	6a 0c                	push   0xc
c000768f:	53                   	push   ebx
c0007690:	e8 cf fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 10 dd 01 c0       	push   0xc001dd10
c000769c:	6a 0d                	push   0xd
c000769e:	53                   	push   ebx
c000769f:	e8 c0 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 2a dd 01 c0       	push   0xc001dd2a
c00076ae:	6a 0e                	push   0xe
c00076b0:	53                   	push   ebx
c00076b1:	e8 ae fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 32 dd 01 c0       	push   0xc001dd32
c00076bd:	6a 0f                	push   0xf
c00076bf:	53                   	push   ebx
c00076c0:	e8 9f fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 3c dd 01 c0       	push   0xc001dd3c
c00076cf:	6a 10                	push   0x10
c00076d1:	53                   	push   ebx
c00076d2:	e8 8d fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 46 dd 01 c0       	push   0xc001dd46
c00076de:	6a 11                	push   0x11
c00076e0:	53                   	push   ebx
c00076e1:	e8 7e fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 50 dd 01 c0       	push   0xc001dd50
c00076f0:	6a 12                	push   0x12
c00076f2:	53                   	push   ebx
c00076f3:	e8 6c fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 01                	push   0x1
c00076fa:	68 ea dd 01 c0       	push   0xc001ddea
c00076ff:	6a 60                	push   0x60
c0007701:	53                   	push   ebx
c0007702:	e8 5d fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 f1 dd 01 c0       	push   0xc001ddf1
c0007711:	6a 20                	push   0x20
c0007713:	53                   	push   ebx
c0007714:	e8 4b fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 dc dd 01 c0       	push   0xc001dddc
c0007720:	6a 21                	push   0x21
c0007722:	53                   	push   ebx
c0007723:	e8 3c fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 e3 dd 01 c0       	push   0xc001dde3
c0007732:	6a 22                	push   0x22
c0007734:	53                   	push   ebx
c0007735:	e8 2a fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 5a dd 01 c0       	push   0xc001dd5a
c0007741:	6a 23                	push   0x23
c0007743:	53                   	push   ebx
c0007744:	e8 1b fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 64 dd 01 c0       	push   0xc001dd64
c0007753:	6a 24                	push   0x24
c0007755:	53                   	push   ebx
c0007756:	e8 09 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 6e dd 01 c0       	push   0xc001dd6e
c0007762:	6a 25                	push   0x25
c0007764:	53                   	push   ebx
c0007765:	e8 fa fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 78 dd 01 c0       	push   0xc001dd78
c0007774:	6a 26                	push   0x26
c0007776:	53                   	push   ebx
c0007777:	e8 e8 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 00                	push   0x0
c000777e:	68 82 dd 01 c0       	push   0xc001dd82
c0007783:	6a 27                	push   0x27
c0007785:	53                   	push   ebx
c0007786:	e8 d9 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 8c dd 01 c0       	push   0xc001dd8c
c0007795:	6a 28                	push   0x28
c0007797:	53                   	push   ebx
c0007798:	e8 c7 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 96 dd 01 c0       	push   0xc001dd96
c00077a4:	6a 29                	push   0x29
c00077a6:	53                   	push   ebx
c00077a7:	e8 b8 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 a0 dd 01 c0       	push   0xc001dda0
c00077b6:	6a 2a                	push   0x2a
c00077b8:	53                   	push   ebx
c00077b9:	e8 a6 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 aa dd 01 c0       	push   0xc001ddaa
c00077c5:	6a 2b                	push   0x2b
c00077c7:	53                   	push   ebx
c00077c8:	e8 97 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 b4 dd 01 c0       	push   0xc001ddb4
c00077d7:	6a 2c                	push   0x2c
c00077d9:	53                   	push   ebx
c00077da:	e8 85 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 be dd 01 c0       	push   0xc001ddbe
c00077e6:	6a 2d                	push   0x2d
c00077e8:	53                   	push   ebx
c00077e9:	e8 76 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 c8 dd 01 c0       	push   0xc001ddc8
c00077f8:	6a 2e                	push   0x2e
c00077fa:	53                   	push   ebx
c00077fb:	e8 64 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 d2 dd 01 c0       	push   0xc001ddd2
c0007807:	6a 2f                	push   0x2f
c0007809:	53                   	push   ebx
c000780a:	e8 55 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 2c df 01 c0       	push   0xc001df2c
c0007819:	6a 30                	push   0x30
c000781b:	53                   	push   ebx
c000781c:	e8 43 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 36 df 01 c0       	push   0xc001df36
c0007828:	6a 31                	push   0x31
c000782a:	53                   	push   ebx
c000782b:	e8 34 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 40 df 01 c0       	push   0xc001df40
c000783a:	6a 32                	push   0x32
c000783c:	53                   	push   ebx
c000783d:	e8 22 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 4a df 01 c0       	push   0xc001df4a
c0007849:	6a 33                	push   0x33
c000784b:	53                   	push   ebx
c000784c:	e8 13 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 54 df 01 c0       	push   0xc001df54
c000785b:	6a 34                	push   0x34
c000785d:	53                   	push   ebx
c000785e:	e8 01 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 5e df 01 c0       	push   0xc001df5e
c000786a:	6a 35                	push   0x35
c000786c:	53                   	push   ebx
c000786d:	e8 f2 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 68 df 01 c0       	push   0xc001df68
c000787c:	6a 36                	push   0x36
c000787e:	53                   	push   ebx
c000787f:	e8 e0 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 72 df 01 c0       	push   0xc001df72
c000788b:	6a 37                	push   0x37
c000788d:	53                   	push   ebx
c000788e:	e8 d1 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 1c             	add    esp,0x1c
c0007896:	6a 03                	push   0x3
c0007898:	6a 02                	push   0x2
c000789a:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00078a0:	e8 41 25 00 00       	call   c0009de6 <VAS::allocatePages(int, int)>
c00078a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00078ac:	89 c6                	mov    esi,eax
c00078ae:	e8 b3 01 00 00       	call   c0007a66 <malloc>
c00078b3:	81 c6 00 20 00 00    	add    esi,0x2000
c00078b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00078bc:	89 c7                	mov    edi,eax
c00078be:	e8 1d 16 00 00       	call   c0008ee0 <TSS::TSS()>
c00078c3:	83 c4 0c             	add    esp,0xc
c00078c6:	68 e6 dc 01 c0       	push   0xc001dce6
c00078cb:	56                   	push   esi
c00078cc:	57                   	push   edi
c00078cd:	e8 56 16 00 00       	call   c0008f28 <TSS::setup(unsigned long, unsigned long)>
c00078d2:	89 c6                	mov    esi,eax
c00078d4:	58                   	pop    eax
c00078d5:	5a                   	pop    edx
c00078d6:	6a 00                	push   0x0
c00078d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00078dc:	50                   	push   eax
c00078dd:	e8 d2 fb ff ff       	call   c00074b4 <IDTEntry::IDTEntry(bool)>
c00078e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00078eb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00078f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00078fc:	80 ce 05             	or     dh,0x5
c00078ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007903:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007906:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000790a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000790d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007910:	e8 87 fc ff ff       	call   c000759c <IDT::flush()>
c0007915:	83 c4 20             	add    esp,0x20
c0007918:	5b                   	pop    ebx
c0007919:	5e                   	pop    esi
c000791a:	5f                   	pop    edi
c000791b:	c3                   	ret    

c000791c <sbrk>:
c000791c:	55                   	push   ebp
c000791d:	57                   	push   edi
c000791e:	56                   	push   esi
c000791f:	53                   	push   ebx
c0007920:	83 ec 2c             	sub    esp,0x2c
c0007923:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007927:	85 c0                	test   eax,eax
c0007929:	74 6c                	je     c0007997 <sbrk+0x7b>
c000792b:	78 71                	js     c000799e <sbrk+0x82>
c000792d:	8b 15 ac 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021aac
c0007933:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007937:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000793d:	05 ff 0f 00 00       	add    eax,0xfff
c0007942:	0f 49 e8             	cmovns ebp,eax
c0007945:	c1 fd 0c             	sar    ebp,0xc
c0007948:	bb 00 00 00 00       	mov    ebx,0x0
c000794d:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c0007953:	8b 3d ac 1a 02 c0    	mov    edi,DWORD PTR ds:0xc0021aac
c0007959:	e8 1e 04 00 00       	call   c0007d7c <Phys::allocatePage()>
c000795e:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c0007966:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000796a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000796e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007971:	e8 3c 23 00 00       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007976:	81 05 ac 1a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021aac,0x1000
c0007980:	43                   	inc    ebx
c0007981:	39 dd                	cmp    ebp,ebx
c0007983:	75 c8                	jne    c000794d <sbrk+0x31>
c0007985:	0f 20 d8             	mov    eax,cr3
c0007988:	0f 22 d8             	mov    cr3,eax
c000798b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000798f:	83 c4 2c             	add    esp,0x2c
c0007992:	5b                   	pop    ebx
c0007993:	5e                   	pop    esi
c0007994:	5f                   	pop    edi
c0007995:	5d                   	pop    ebp
c0007996:	c3                   	ret    
c0007997:	a1 ac 1a 02 c0       	mov    eax,ds:0xc0021aac
c000799c:	eb f1                	jmp    c000798f <sbrk+0x73>
c000799e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00079a2:	c7 04 24 b4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7b4
c00079a9:	e8 38 30 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00079ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00079b3:	eb da                	jmp    c000798f <sbrk+0x73>

c00079b5 <mmap>:
c00079b5:	83 ec 1c             	sub    esp,0x1c
c00079b8:	c7 04 24 e4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e4
c00079bf:	e8 71 8d 00 00       	call   c0010735 <KePanic(char const*)>
c00079c4:	b8 00 00 00 00       	mov    eax,0x0
c00079c9:	83 c4 1c             	add    esp,0x1c
c00079cc:	c3                   	ret    

c00079cd <munmap>:
c00079cd:	83 ec 1c             	sub    esp,0x1c
c00079d0:	c7 04 24 e9 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e9
c00079d7:	e8 59 8d 00 00       	call   c0010735 <KePanic(char const*)>
c00079dc:	b8 00 00 00 00       	mov    eax,0x0
c00079e1:	83 c4 1c             	add    esp,0x1c
c00079e4:	c3                   	ret    

c00079e5 <liballoc_lock()>:
c00079e5:	fa                   	cli    
c00079e6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00079ec:	b8 00 00 00 00       	mov    eax,0x0
c00079f1:	c3                   	ret    

c00079f2 <liballoc_unlock()>:
c00079f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00079f7:	48                   	dec    eax
c00079f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00079fd:	75 01                	jne    c0007a00 <liballoc_unlock()+0xe>
c00079ff:	fb                   	sti    
c0007a00:	b8 00 00 00 00       	mov    eax,0x0
c0007a05:	c3                   	ret    

c0007a06 <liballoc_alloc(int)>:
c0007a06:	83 ec 1c             	sub    esp,0x1c
c0007a09:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a19:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a21:	e8 c0 23 00 00       	call   c0009de6 <VAS::allocatePages(int, int)>
c0007a26:	83 c4 1c             	add    esp,0x1c
c0007a29:	c3                   	ret    

c0007a2a <liballoc_free(void*, int)>:
c0007a2a:	83 ec 1c             	sub    esp,0x1c
c0007a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a35:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007a3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a3d:	e8 7c 1f 00 00       	call   c00099be <VAS::freeAllocatedPages(unsigned long)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <realloc>:
c0007a4b:	83 ec 1c             	sub    esp,0x1c
c0007a4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5d:	e8 b7 9b ff ff       	call   c0001619 <dlrealloc>
c0007a62:	83 c4 1c             	add    esp,0x1c
c0007a65:	c3                   	ret    

c0007a66 <malloc>:
c0007a66:	83 ec 1c             	sub    esp,0x1c
c0007a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a70:	e8 67 96 ff ff       	call   c00010dc <dlmalloc>
c0007a75:	83 c4 1c             	add    esp,0x1c
c0007a78:	c3                   	ret    

c0007a79 <free>:
c0007a79:	83 ec 1c             	sub    esp,0x1c
c0007a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a80:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a83:	e8 f6 92 ff ff       	call   c0000d7e <dlfree>
c0007a88:	83 c4 1c             	add    esp,0x1c
c0007a8b:	c3                   	ret    

c0007a8c <rfree>:
c0007a8c:	83 ec 1c             	sub    esp,0x1c
c0007a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a93:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a96:	e8 e3 92 ff ff       	call   c0000d7e <dlfree>
c0007a9b:	83 c4 1c             	add    esp,0x1c
c0007a9e:	c3                   	ret    

c0007a9f <calloc>:
c0007a9f:	83 ec 1c             	sub    esp,0x1c
c0007aa2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007aa6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007aaa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007aae:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007ab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ab6:	e8 ab ff ff ff       	call   c0007a66 <malloc>
c0007abb:	89 c6                	mov    esi,eax
c0007abd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ac1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007ac9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007acc:	e8 1f 8a ff ff       	call   c00004f0 <memset>
c0007ad1:	89 f0                	mov    eax,esi
c0007ad3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007ad7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007adb:	83 c4 1c             	add    esp,0x1c
c0007ade:	c3                   	ret    

c0007adf <KeEntryPoint>:
c0007adf:	56                   	push   esi
c0007ae0:	be f9 03 00 00       	mov    esi,0x3f9
c0007ae5:	53                   	push   ebx
c0007ae6:	89 f2                	mov    edx,esi
c0007ae8:	83 ec 34             	sub    esp,0x34
c0007aeb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007af0:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007af5:	31 c0                	xor    eax,eax
c0007af7:	ee                   	out    dx,al
c0007af8:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007afd:	b0 80                	mov    al,0x80
c0007aff:	89 da                	mov    edx,ebx
c0007b01:	ee                   	out    dx,al
c0007b02:	b1 03                	mov    cl,0x3
c0007b04:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b09:	88 c8                	mov    al,cl
c0007b0b:	ee                   	out    dx,al
c0007b0c:	31 c0                	xor    eax,eax
c0007b0e:	89 f2                	mov    edx,esi
c0007b10:	ee                   	out    dx,al
c0007b11:	88 c8                	mov    al,cl
c0007b13:	89 da                	mov    edx,ebx
c0007b15:	ee                   	out    dx,al
c0007b16:	b0 c7                	mov    al,0xc7
c0007b18:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b1d:	ee                   	out    dx,al
c0007b1e:	b0 0b                	mov    al,0xb
c0007b20:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b25:	ee                   	out    dx,al
c0007b26:	c7 04 24 f0 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7f0
c0007b2d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007b31:	e8 b0 2e 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0007b36:	e8 18 85 00 00       	call   c0010053 <KeDisplaySplashScreen()>
c0007b3b:	e8 cc f1 00 00       	call   c0016d0c <HalInitialiseCoprocessor()>
c0007b40:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b45:	05 ff 0f 00 00       	add    eax,0xfff
c0007b4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b52:	e8 83 03 00 00       	call   c0007eda <Phys::physicalMemorySetup(unsigned int)>
c0007b57:	e8 fc 1b 00 00       	call   c0009758 <Virt::virtualMemorySetup()>
c0007b5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b5f:	e8 ee 1e 00 00       	call   c0009a52 <VAS::VAS()>
c0007b64:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b6a:	e8 bb 69 01 00       	call   c001e52a <_init>
c0007b6f:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b76:	e8 eb fe ff ff       	call   c0007a66 <malloc>
c0007b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7e:	89 c6                	mov    esi,eax
c0007b80:	e8 e1 f1 ff ff       	call   c0006d66 <Computer::Computer()>
c0007b85:	31 d2                	xor    edx,edx
c0007b87:	31 c9                	xor    ecx,ecx
c0007b89:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007b8d:	31 c0                	xor    eax,eax
c0007b8f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007b93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b9a:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007ba0:	e8 9b f5 ff ff       	call   c0007140 <Computer::open(int, int, void*)>
c0007ba5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba8:	e8 9b 1f 00 00       	call   c0009b48 <VAS::~VAS()>
c0007bad:	83 c4 34             	add    esp,0x34
c0007bb0:	5b                   	pop    ebx
c0007bb1:	5e                   	pop    esi
c0007bb2:	c3                   	ret    
c0007bb3:	66 90                	xchg   ax,ax
c0007bb5:	66 90                	xchg   ax,ax
c0007bb7:	66 90                	xchg   ax,ax
c0007bb9:	66 90                	xchg   ax,ax
c0007bbb:	66 90                	xchg   ax,ax
c0007bbd:	66 90                	xchg   ax,ax
c0007bbf:	90                   	nop

c0007bc0 <Phys::allocateDMA(unsigned long)>:
c0007bc0:	55                   	push   ebp
c0007bc1:	31 ed                	xor    ebp,ebp
c0007bc3:	57                   	push   edi
c0007bc4:	56                   	push   esi
c0007bc5:	31 f6                	xor    esi,esi
c0007bc7:	53                   	push   ebx
c0007bc8:	31 db                	xor    ebx,ebx
c0007bca:	83 ec 2c             	sub    esp,0x2c
c0007bcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007bd1:	05 ff 0f 00 00       	add    eax,0xfff
c0007bd6:	c1 e8 0c             	shr    eax,0xc
c0007bd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bdd:	31 c0                	xor    eax,eax
c0007bdf:	eb 19                	jmp    c0007bfa <Phys::allocateDMA(unsigned long)+0x3a>
c0007be1:	8d 78 01             	lea    edi,[eax+0x1]
c0007be4:	85 c0                	test   eax,eax
c0007be6:	0f 44 eb             	cmove  ebp,ebx
c0007be9:	0f 44 f3             	cmove  esi,ebx
c0007bec:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007bf0:	74 2f                	je     c0007c21 <Phys::allocateDMA(unsigned long)+0x61>
c0007bf2:	89 f8                	mov    eax,edi
c0007bf4:	43                   	inc    ebx
c0007bf5:	83 fb 0f             	cmp    ebx,0xf
c0007bf8:	7f 11                	jg     c0007c0b <Phys::allocateDMA(unsigned long)+0x4b>
c0007bfa:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c01:	74 de                	je     c0007be1 <Phys::allocateDMA(unsigned long)+0x21>
c0007c03:	31 c0                	xor    eax,eax
c0007c05:	43                   	inc    ebx
c0007c06:	83 fb 0f             	cmp    ebx,0xf
c0007c09:	7e ef                	jle    c0007bfa <Phys::allocateDMA(unsigned long)+0x3a>
c0007c0b:	c7 04 24 08 f8 01 c0 	mov    DWORD PTR [esp],0xc001f808
c0007c12:	e8 1e 8b 00 00       	call   c0010735 <KePanic(char const*)>
c0007c17:	31 c0                	xor    eax,eax
c0007c19:	83 c4 2c             	add    esp,0x2c
c0007c1c:	5b                   	pop    ebx
c0007c1d:	5e                   	pop    esi
c0007c1e:	5f                   	pop    edi
c0007c1f:	5d                   	pop    ebp
c0007c20:	c3                   	ret    
c0007c21:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007c25:	89 f2                	mov    edx,esi
c0007c27:	c1 fa 04             	sar    edx,0x4
c0007c2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c2e:	01 f1                	add    ecx,esi
c0007c30:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c33:	49                   	dec    ecx
c0007c34:	0f 48 ca             	cmovs  ecx,edx
c0007c37:	c1 f9 04             	sar    ecx,0x4
c0007c3a:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007c3e:	74 06                	je     c0007c46 <Phys::allocateDMA(unsigned long)+0x86>
c0007c40:	89 eb                	mov    ebx,ebp
c0007c42:	31 c0                	xor    eax,eax
c0007c44:	eb bf                	jmp    c0007c05 <Phys::allocateDMA(unsigned long)+0x45>
c0007c46:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007c4a:	85 d2                	test   edx,edx
c0007c4c:	74 15                	je     c0007c63 <Phys::allocateDMA(unsigned long)+0xa3>
c0007c4e:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c54:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c5b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c5e:	42                   	inc    edx
c0007c5f:	39 d0                	cmp    eax,edx
c0007c61:	75 f8                	jne    c0007c5b <Phys::allocateDMA(unsigned long)+0x9b>
c0007c63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007c67:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007c71:	85 c0                	test   eax,eax
c0007c73:	74 13                	je     c0007c88 <Phys::allocateDMA(unsigned long)+0xc8>
c0007c75:	c7 04 24 08 f8 01 c0 	mov    DWORD PTR [esp],0xc001f808
c0007c7c:	e8 b4 8a 00 00       	call   c0010735 <KePanic(char const*)>
c0007c81:	89 f8                	mov    eax,edi
c0007c83:	e9 6c ff ff ff       	jmp    c0007bf4 <Phys::allocateDMA(unsigned long)+0x34>
c0007c88:	c1 e6 0c             	shl    esi,0xc
c0007c8b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007c91:	eb 86                	jmp    c0007c19 <Phys::allocateDMA(unsigned long)+0x59>

c0007c93 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c97:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ca1:	c1 ea 0c             	shr    edx,0xc
c0007ca4:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007caa:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007caf:	c1 e8 0c             	shr    eax,0xc
c0007cb2:	85 d2                	test   edx,edx
c0007cb4:	74 0f                	je     c0007cc5 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007cb6:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007cbb:	01 c2                	add    edx,eax
c0007cbd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cc0:	40                   	inc    eax
c0007cc1:	39 d0                	cmp    eax,edx
c0007cc3:	75 f8                	jne    c0007cbd <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007cc5:	c3                   	ret    

c0007cc6 <Phys::setPageState(unsigned long, bool)>:
c0007cc6:	53                   	push   ebx
c0007cc7:	8b 1d b0 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ab0
c0007ccd:	ba 01 00 00 00       	mov    edx,0x1
c0007cd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007cd6:	89 c8                	mov    eax,ecx
c0007cd8:	83 e1 07             	and    ecx,0x7
c0007cdb:	c1 e8 03             	shr    eax,0x3
c0007cde:	d3 e2                	shl    edx,cl
c0007ce0:	01 c3                	add    ebx,eax
c0007ce2:	f6 d2                	not    dl
c0007ce4:	20 13                	and    BYTE PTR [ebx],dl
c0007ce6:	8b 15 b0 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021ab0
c0007cec:	01 d0                	add    eax,edx
c0007cee:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007cf3:	d3 e2                	shl    edx,cl
c0007cf5:	08 10                	or     BYTE PTR [eax],dl
c0007cf7:	5b                   	pop    ebx
c0007cf8:	c3                   	ret    

c0007cf9 <Phys::getPageState(unsigned long)>:
c0007cf9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007cfd:	8b 15 b0 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021ab0
c0007d03:	89 c8                	mov    eax,ecx
c0007d05:	83 e1 07             	and    ecx,0x7
c0007d08:	c1 e8 03             	shr    eax,0x3
c0007d0b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d0f:	d3 f8                	sar    eax,cl
c0007d11:	24 01                	and    al,0x1
c0007d13:	c3                   	ret    

c0007d14 <Phys::freePage(unsigned long)>:
c0007d14:	53                   	push   ebx
c0007d15:	83 ec 18             	sub    esp,0x18
c0007d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d1c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d22:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d28:	76 3c                	jbe    c0007d66 <Phys::freePage(unsigned long)+0x52>
c0007d2a:	c1 e8 0c             	shr    eax,0xc
c0007d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d30:	89 c3                	mov    ebx,eax
c0007d32:	e8 c2 ff ff ff       	call   c0007cf9 <Phys::getPageState(unsigned long)>
c0007d37:	84 c0                	test   al,al
c0007d39:	74 19                	je     c0007d54 <Phys::freePage(unsigned long)+0x40>
c0007d3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d3e:	31 c0                	xor    eax,eax
c0007d40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d44:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007d4a:	e8 77 ff ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c0007d4f:	83 c4 18             	add    esp,0x18
c0007d52:	5b                   	pop    ebx
c0007d53:	c3                   	ret    
c0007d54:	ba ad f8 01 c0       	mov    edx,0xc001f8ad
c0007d59:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007d5d:	83 c4 18             	add    esp,0x18
c0007d60:	5b                   	pop    ebx
c0007d61:	e9 cf 89 00 00       	jmp    c0010735 <KePanic(char const*)>
c0007d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d69:	b9 00 10 00 00       	mov    ecx,0x1000
c0007d6e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007d72:	e8 1c ff ff ff       	call   c0007c93 <Phys::freeDMA(unsigned long, unsigned long)>
c0007d77:	83 c4 18             	add    esp,0x18
c0007d7a:	5b                   	pop    ebx
c0007d7b:	c3                   	ret    

c0007d7c <Phys::allocatePage()>:
c0007d7c:	56                   	push   esi
c0007d7d:	53                   	push   ebx
c0007d7e:	83 ec 24             	sub    esp,0x24
c0007d81:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007d87:	89 f3                	mov    ebx,esi
c0007d89:	eb 0a                	jmp    c0007d95 <Phys::allocatePage()+0x19>
c0007d8b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007d91:	39 de                	cmp    esi,ebx
c0007d93:	74 23                	je     c0007db8 <Phys::allocatePage()+0x3c>
c0007d95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d98:	e8 5c ff ff ff       	call   c0007cf9 <Phys::getPageState(unsigned long)>
c0007d9d:	84 c0                	test   al,al
c0007d9f:	74 56                	je     c0007df7 <Phys::allocatePage()+0x7b>
c0007da1:	43                   	inc    ebx
c0007da2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007da8:	75 e1                	jne    c0007d8b <Phys::allocatePage()+0xf>
c0007daa:	31 db                	xor    ebx,ebx
c0007dac:	31 c9                	xor    ecx,ecx
c0007dae:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007db4:	39 de                	cmp    esi,ebx
c0007db6:	75 dd                	jne    c0007d95 <Phys::allocatePage()+0x19>
c0007db8:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007dbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007dc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007dc7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007dcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dd0:	e8 8f 28 00 00       	call   c000a664 <VAS::scanForEviction()>
c0007dd5:	85 c0                	test   eax,eax
c0007dd7:	75 43                	jne    c0007e1c <Phys::allocatePage()+0xa0>
c0007dd9:	c7 04 24 30 f8 01 c0 	mov    DWORD PTR [esp],0xc001f830
c0007de0:	e8 50 89 00 00       	call   c0010735 <KePanic(char const*)>
c0007de5:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007deb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dee:	e8 06 ff ff ff       	call   c0007cf9 <Phys::getPageState(unsigned long)>
c0007df3:	84 c0                	test   al,al
c0007df5:	75 aa                	jne    c0007da1 <Phys::allocatePage()+0x25>
c0007df7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dfa:	be 01 00 00 00       	mov    esi,0x1
c0007dff:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007e03:	e8 be fe ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c0007e08:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e0d:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007e13:	c1 e0 0c             	shl    eax,0xc
c0007e16:	83 c4 24             	add    esp,0x24
c0007e19:	5b                   	pop    ebx
c0007e1a:	5e                   	pop    esi
c0007e1b:	c3                   	ret    
c0007e1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007e20:	ba 01 00 00 00       	mov    edx,0x1
c0007e25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e29:	89 c2                	mov    edx,eax
c0007e2b:	c1 ea 0c             	shr    edx,0xc
c0007e2e:	89 14 24             	mov    DWORD PTR [esp],edx
c0007e31:	e8 90 fe ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c0007e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007e3a:	eb da                	jmp    c0007e16 <Phys::allocatePage()+0x9a>

c0007e3c <Phys::allocateContiguousPages(int)>:
c0007e3c:	57                   	push   edi
c0007e3d:	56                   	push   esi
c0007e3e:	53                   	push   ebx
c0007e3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e43:	fa                   	cli    
c0007e44:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007e4a:	31 db                	xor    ebx,ebx
c0007e4c:	85 db                	test   ebx,ebx
c0007e4e:	75 11                	jne    c0007e61 <Phys::allocateContiguousPages(int)+0x25>
c0007e50:	e8 27 ff ff ff       	call   c0007d7c <Phys::allocatePage()>
c0007e55:	83 fe 01             	cmp    esi,0x1
c0007e58:	89 c7                	mov    edi,eax
c0007e5a:	74 21                	je     c0007e7d <Phys::allocateContiguousPages(int)+0x41>
c0007e5c:	bb 01 00 00 00       	mov    ebx,0x1
c0007e61:	e8 16 ff ff ff       	call   c0007d7c <Phys::allocatePage()>
c0007e66:	89 da                	mov    edx,ebx
c0007e68:	c1 e2 0c             	shl    edx,0xc
c0007e6b:	01 fa                	add    edx,edi
c0007e6d:	39 c2                	cmp    edx,eax
c0007e6f:	74 20                	je     c0007e91 <Phys::allocateContiguousPages(int)+0x55>
c0007e71:	83 fe 01             	cmp    esi,0x1
c0007e74:	bb 01 00 00 00       	mov    ebx,0x1
c0007e79:	89 c7                	mov    edi,eax
c0007e7b:	75 e4                	jne    c0007e61 <Phys::allocateContiguousPages(int)+0x25>
c0007e7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e82:	48                   	dec    eax
c0007e83:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e88:	75 01                	jne    c0007e8b <Phys::allocateContiguousPages(int)+0x4f>
c0007e8a:	fb                   	sti    
c0007e8b:	5b                   	pop    ebx
c0007e8c:	89 f8                	mov    eax,edi
c0007e8e:	5e                   	pop    esi
c0007e8f:	5f                   	pop    edi
c0007e90:	c3                   	ret    
c0007e91:	43                   	inc    ebx
c0007e92:	39 f3                	cmp    ebx,esi
c0007e94:	75 b6                	jne    c0007e4c <Phys::allocateContiguousPages(int)+0x10>
c0007e96:	eb e5                	jmp    c0007e7d <Phys::allocateContiguousPages(int)+0x41>

c0007e98 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007e98:	56                   	push   esi
c0007e99:	53                   	push   ebx
c0007e9a:	83 ec 08             	sub    esp,0x8
c0007e9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007ea1:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ea7:	73 06                	jae    c0007eaf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007ea9:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007eaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eb3:	c1 eb 0c             	shr    ebx,0xc
c0007eb6:	c1 e8 0c             	shr    eax,0xc
c0007eb9:	39 d8                	cmp    eax,ebx
c0007ebb:	73 17                	jae    c0007ed4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ec0:	8d 70 01             	lea    esi,[eax+0x1]
c0007ec3:	31 d2                	xor    edx,edx
c0007ec5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ec9:	e8 f8 fd ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c0007ece:	39 f3                	cmp    ebx,esi
c0007ed0:	89 f0                	mov    eax,esi
c0007ed2:	75 e9                	jne    c0007ebd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007ed4:	83 c4 08             	add    esp,0x8
c0007ed7:	5b                   	pop    ebx
c0007ed8:	5e                   	pop    esi
c0007ed9:	c3                   	ret    

c0007eda <Phys::physicalMemorySetup(unsigned int)>:
c0007eda:	55                   	push   ebp
c0007edb:	b8 10 00 00 00       	mov    eax,0x10
c0007ee0:	57                   	push   edi
c0007ee1:	56                   	push   esi
c0007ee2:	53                   	push   ebx
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	83 ec 4c             	sub    esp,0x4c
c0007ee8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007eec:	31 c0                	xor    eax,eax
c0007eee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007ef2:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007ef9:	e8 f2 85 ff ff       	call   c00004f0 <memset>
c0007efe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f02:	c7 04 24 c3 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8c3
c0007f09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f0e:	05 00 10 00 00       	add    eax,0x1000
c0007f13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f17:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f1b:	e8 c6 2a 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0007f20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f23:	b8 01 00 00 00       	mov    eax,0x1
c0007f28:	43                   	inc    ebx
c0007f29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f2d:	e8 94 fd ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c0007f32:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f38:	75 e6                	jne    c0007f20 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007f3a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f41:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f45:	85 c0                	test   eax,eax
c0007f47:	0f 84 37 01 00 00    	je     c0008084 <Phys::physicalMemorySetup(unsigned int)+0x1aa>
c0007f4d:	31 c0                	xor    eax,eax
c0007f4f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007f58:	eb 68                	jmp    c0007fc2 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007f5a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007f5e:	89 c1                	mov    ecx,eax
c0007f60:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007f64:	0f 83 bf 00 00 00    	jae    c0008029 <Phys::physicalMemorySetup(unsigned int)+0x14f>
c0007f6a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007f6e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007f73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007f77:	39 f2                	cmp    edx,esi
c0007f79:	19 f8                	sbb    eax,edi
c0007f7b:	73 07                	jae    c0007f84 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007f7d:	be 00 00 0a 00       	mov    esi,0xa0000
c0007f82:	31 ff                	xor    edi,edi
c0007f84:	89 f2                	mov    edx,esi
c0007f86:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007f8b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007f91:	89 f9                	mov    ecx,edi
c0007f93:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007f97:	83 d1 ff             	adc    ecx,0xffffffff
c0007f9a:	39 d0                	cmp    eax,edx
c0007f9c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0007fa0:	b8 00 00 00 00       	mov    eax,0x0
c0007fa5:	19 c8                	sbb    eax,ecx
c0007fa7:	0f 82 9d 01 00 00    	jb     c000814a <Phys::physicalMemorySetup(unsigned int)+0x270>
c0007fad:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0007fb1:	83 c3 18             	add    ebx,0x18
c0007fb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fb8:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0007fbc:	0f 84 ce 00 00 00    	je     c0008090 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c0007fc2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fcd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007fd1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fd8:	01 f0                	add    eax,esi
c0007fda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007fe2:	11 fa                	adc    edx,edi
c0007fe4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0007fe8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007fec:	c7 04 24 60 f8 01 c0 	mov    DWORD PTR [esp],0xc001f860
c0007ff3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ff7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ffb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fff:	e8 e2 29 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0008004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008008:	09 f8                	or     eax,edi
c000800a:	0f 85 80 00 00 00    	jne    c0008090 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c0008010:	83 fd 01             	cmp    ebp,0x1
c0008013:	75 11                	jne    c0008026 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c0008015:	ba 00 00 08 00       	mov    edx,0x80000
c000801a:	89 c1                	mov    ecx,eax
c000801c:	39 f2                	cmp    edx,esi
c000801e:	19 f9                	sbb    ecx,edi
c0008020:	0f 83 34 ff ff ff    	jae    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x80>
c0008026:	4d                   	dec    ebp
c0008027:	75 84                	jne    c0007fad <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008029:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000802d:	31 d2                	xor    edx,edx
c000802f:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c0008033:	89 c8                	mov    eax,ecx
c0008035:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008039:	19 d1                	sbb    ecx,edx
c000803b:	0f 82 6c ff ff ff    	jb     c0007fad <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008041:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0008046:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c000804a:	b9 00 00 00 00       	mov    ecx,0x0
c000804f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008053:	0f 83 54 ff ff ff    	jae    c0007fad <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008059:	39 c6                	cmp    esi,eax
c000805b:	19 d7                	sbb    edi,edx
c000805d:	0f 83 f4 00 00 00    	jae    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0008063:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008067:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000806b:	29 c7                	sub    edi,eax
c000806d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008071:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008075:	19 d5                	sbb    ebp,edx
c0008077:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000807b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807f:	e9 d3 00 00 00       	jmp    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0008084:	c7 04 24 db f8 01 c0 	mov    DWORD PTR [esp],0xc001f8db
c000808b:	e8 a5 86 00 00       	call   c0010735 <KePanic(char const*)>
c0008090:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008097:	31 db                	xor    ebx,ebx
c0008099:	31 f6                	xor    esi,esi
c000809b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000809f:	bb 60 00 00 00       	mov    ebx,0x60
c00080a4:	e8 1d fc ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c00080a9:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080ad:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00080b4:	e8 0d fc ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c00080b9:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c00080c0:	31 c9                	xor    ecx,ecx
c00080c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080c5:	43                   	inc    ebx
c00080c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00080ca:	e8 f7 fb ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c00080cf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00080d5:	75 e9                	jne    c00080c0 <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c00080d7:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080dc:	bb 40 01 00 00       	mov    ebx,0x140
c00080e1:	83 c0 20             	add    eax,0x20
c00080e4:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080e9:	eb 22                	jmp    c000810d <Phys::physicalMemorySetup(unsigned int)+0x233>
c00080eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080ee:	31 d2                	xor    edx,edx
c00080f0:	43                   	inc    ebx
c00080f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080f5:	e8 cc fb ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c00080fa:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080ff:	40                   	inc    eax
c0008100:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008106:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000810b:	74 07                	je     c0008114 <Phys::physicalMemorySetup(unsigned int)+0x23a>
c000810d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008112:	7e d7                	jle    c00080eb <Phys::physicalMemorySetup(unsigned int)+0x211>
c0008114:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008119:	3d ff 07 00 00       	cmp    eax,0x7ff
c000811e:	7f 22                	jg     c0008142 <Phys::physicalMemorySetup(unsigned int)+0x268>
c0008120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008123:	31 c0                	xor    eax,eax
c0008125:	43                   	inc    ebx
c0008126:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000812a:	e8 97 fb ff ff       	call   c0007cc6 <Phys::setPageState(unsigned long, bool)>
c000812f:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008134:	40                   	inc    eax
c0008135:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000813b:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008140:	75 d7                	jne    c0008119 <Phys::physicalMemorySetup(unsigned int)+0x23f>
c0008142:	83 c4 4c             	add    esp,0x4c
c0008145:	5b                   	pop    ebx
c0008146:	5e                   	pop    esi
c0008147:	5f                   	pop    edi
c0008148:	5d                   	pop    ebp
c0008149:	c3                   	ret    
c000814a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000814e:	b8 00 00 08 00       	mov    eax,0x80000
c0008153:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008157:	c7 04 24 84 f8 01 c0 	mov    DWORD PTR [esp],0xc001f884
c000815e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008162:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008166:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000816a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000816e:	e8 73 28 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0008173:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008177:	89 34 24             	mov    DWORD PTR [esp],esi
c000817a:	e8 19 fd ff ff       	call   c0007e98 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000817f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008183:	c7 04 24 e9 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8e9
c000818a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000818e:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c0008194:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008198:	01 e8                	add    eax,ebp
c000819a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000819e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00081a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00081a9:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ae:	e8 33 28 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00081b3:	e9 f5 fd ff ff       	jmp    c0007fad <Phys::physicalMemorySetup(unsigned int)+0xd3>

c00081b8 <Pipe::isAtty()>:
c00081b8:	31 c0                	xor    eax,eax
c00081ba:	c3                   	ret    
c00081bb:	90                   	nop

c00081bc <Pipe::~Pipe()>:
c00081bc:	83 ec 1c             	sub    esp,0x1c
c00081bf:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c00081c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081c8:	89 10                	mov    DWORD PTR [eax],edx
c00081ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00081d1:	e8 56 11 00 00       	call   c000932c <UnixFile::~UnixFile()>
c00081d6:	90                   	nop
c00081d7:	83 c4 1c             	add    esp,0x1c
c00081da:	c3                   	ret    
c00081db:	90                   	nop

c00081dc <Pipe::~Pipe()>:
c00081dc:	83 ec 1c             	sub    esp,0x1c
c00081df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00081e6:	e8 d1 ff ff ff       	call   c00081bc <Pipe::~Pipe()>
c00081eb:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c00081f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00081fa:	e8 cd 26 00 00       	call   c000a8cc <operator delete(void*, unsigned long)>
c00081ff:	83 c4 1c             	add    esp,0x1c
c0008202:	c3                   	ret    
c0008203:	90                   	nop

c0008204 <Pipe::write(unsigned long long, void*, int*)>:
c0008204:	55                   	push   ebp
c0008205:	57                   	push   edi
c0008206:	56                   	push   esi
c0008207:	53                   	push   ebx
c0008208:	83 ec 1c             	sub    esp,0x1c
c000820b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000820f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008213:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008217:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000821a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000821e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008221:	89 04 24             	mov    DWORD PTR [esp],eax
c0008224:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008228:	89 d8                	mov    eax,ebx
c000822a:	89 d6                	mov    esi,edx
c000822c:	89 d7                	mov    edi,edx
c000822e:	c1 ff 1f             	sar    edi,0x1f
c0008231:	03 34 24             	add    esi,DWORD PTR [esp]
c0008234:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008238:	c1 f8 1f             	sar    eax,0x1f
c000823b:	39 f3                	cmp    ebx,esi
c000823d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008245:	19 f8                	sbb    eax,edi
c0008247:	b8 01 00 00 00       	mov    eax,0x1
c000824c:	72 72                	jb     c00082c0 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000824e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008251:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008255:	01 d0                	add    eax,edx
c0008257:	99                   	cdq    
c0008258:	f7 fb                	idiv   ebx
c000825a:	89 d8                	mov    eax,ebx
c000825c:	29 d0                	sub    eax,edx
c000825e:	89 d6                	mov    esi,edx
c0008260:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008263:	89 c3                	mov    ebx,eax
c0008265:	c1 fb 1f             	sar    ebx,0x1f
c0008268:	39 c2                	cmp    edx,eax
c000826a:	19 df                	sbb    edi,ebx
c000826c:	bb 00 00 00 00       	mov    ebx,0x0
c0008271:	72 04                	jb     c0008277 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008273:	89 d3                	mov    ebx,edx
c0008275:	29 c3                	sub    ebx,eax
c0008277:	89 d0                	mov    eax,edx
c0008279:	29 d8                	sub    eax,ebx
c000827b:	74 0d                	je     c000828a <Pipe::write(unsigned long long, void*, int*)+0x86>
c000827d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008280:	89 c1                	mov    ecx,eax
c0008282:	01 f7                	add    edi,esi
c0008284:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008288:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000828a:	85 db                	test   ebx,ebx
c000828c:	74 0d                	je     c000829b <Pipe::write(unsigned long long, void*, int*)+0x97>
c000828e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008292:	89 d9                	mov    ecx,ebx
c0008294:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008297:	89 c6                	mov    esi,eax
c0008299:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000829b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000829e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082a3:	75 10                	jne    c00082b5 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c00082a5:	83 ec 0c             	sub    esp,0xc
c00082a8:	68 05 f9 01 c0       	push   0xc001f905
c00082ad:	e8 83 84 00 00       	call   c0010735 <KePanic(char const*)>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00082bc:	89 08                	mov    DWORD PTR [eax],ecx
c00082be:	31 c0                	xor    eax,eax
c00082c0:	83 c4 1c             	add    esp,0x1c
c00082c3:	5b                   	pop    ebx
c00082c4:	5e                   	pop    esi
c00082c5:	5f                   	pop    edi
c00082c6:	5d                   	pop    ebp
c00082c7:	c3                   	ret    

c00082c8 <Pipe::read(unsigned long long, void*, int*)>:
c00082c8:	55                   	push   ebp
c00082c9:	57                   	push   edi
c00082ca:	56                   	push   esi
c00082cb:	53                   	push   ebx
c00082cc:	83 ec 1c             	sub    esp,0x1c
c00082cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00082d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00082d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00082db:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00082de:	89 c8                	mov    eax,ecx
c00082e0:	99                   	cdq    
c00082e1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00082e5:	74 24                	je     c000830b <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082e7:	39 f9                	cmp    ecx,edi
c00082e9:	89 d1                	mov    ecx,edx
c00082eb:	19 f1                	sbb    ecx,esi
c00082ed:	73 1c                	jae    c000830b <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082ef:	fa                   	cli    
c00082f0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00082f6:	e8 55 cd 00 00       	call   c0015050 <schedule()>
c00082fb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008300:	48                   	dec    eax
c0008301:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008306:	75 d3                	jne    c00082db <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008308:	fb                   	sti    
c0008309:	eb d0                	jmp    c00082db <Pipe::read(unsigned long long, void*, int*)+0x13>
c000830b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000830f:	39 f8                	cmp    eax,edi
c0008311:	89 d1                	mov    ecx,edx
c0008313:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008317:	19 f1                	sbb    ecx,esi
c0008319:	73 08                	jae    c0008323 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000831b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000831f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008323:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008326:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008329:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000832d:	29 f7                	sub    edi,esi
c000832f:	89 f8                	mov    eax,edi
c0008331:	99                   	cdq    
c0008332:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0008336:	89 d0                	mov    eax,edx
c0008338:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000833c:	19 c2                	sbb    edx,eax
c000833e:	89 f8                	mov    eax,edi
c0008340:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0008345:	89 ea                	mov    edx,ebp
c0008347:	29 c2                	sub    edx,eax
c0008349:	85 c0                	test   eax,eax
c000834b:	74 0b                	je     c0008358 <Pipe::read(unsigned long long, void*, int*)+0x90>
c000834d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008350:	89 c1                	mov    ecx,eax
c0008352:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008356:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008358:	85 d2                	test   edx,edx
c000835a:	74 0d                	je     c0008369 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c000835c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008360:	89 d1                	mov    ecx,edx
c0008362:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008365:	89 c7                	mov    edi,eax
c0008367:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008369:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000836c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000836f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008372:	99                   	cdq    
c0008373:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008377:	89 f7                	mov    edi,esi
c0008379:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000837d:	c1 ff 1f             	sar    edi,0x1f
c0008380:	57                   	push   edi
c0008381:	56                   	push   esi
c0008382:	52                   	push   edx
c0008383:	50                   	push   eax
c0008384:	e8 87 60 01 00       	call   c001e410 <__umoddi3>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008391:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008394:	75 10                	jne    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008396:	83 ec 0c             	sub    esp,0xc
c0008399:	68 22 f9 01 c0       	push   0xc001f922
c000839e:	e8 92 83 00 00       	call   c0010735 <KePanic(char const*)>
c00083a3:	83 c4 10             	add    esp,0x10
c00083a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00083aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083ae:	89 10                	mov    DWORD PTR [eax],edx
c00083b0:	83 c4 1c             	add    esp,0x1c
c00083b3:	31 c0                	xor    eax,eax
c00083b5:	5b                   	pop    ebx
c00083b6:	5e                   	pop    esi
c00083b7:	5f                   	pop    edi
c00083b8:	5d                   	pop    ebp
c00083b9:	c3                   	ret    

c00083ba <Pipe::Pipe(int)>:
c00083ba:	83 ec 1c             	sub    esp,0x1c
c00083bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00083c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00083cc:	e8 95 0d 00 00       	call   c0009166 <UnixFile::UnixFile(int)>
c00083d1:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c00083d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083da:	89 10                	mov    DWORD PTR [eax],edx
c00083dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083eb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00083f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083f6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00083fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008401:	89 04 24             	mov    DWORD PTR [esp],eax
c0008404:	e8 5d f6 ff ff       	call   c0007a66 <malloc>
c0008409:	89 c2                	mov    edx,eax
c000840b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000840f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008416:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000841a:	90                   	nop
c000841b:	83 c4 1c             	add    esp,0x1c
c000841e:	c3                   	ret    
c000841f:	90                   	nop

c0008420 <VgaText::isAtty()>:
c0008420:	b0 01                	mov    al,0x1
c0008422:	c3                   	ret    
c0008423:	90                   	nop

c0008424 <VgaText::~VgaText()>:
c0008424:	83 ec 1c             	sub    esp,0x1c
c0008427:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c000842c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008436:	89 04 24             	mov    DWORD PTR [esp],eax
c0008439:	e8 ee 0e 00 00       	call   c000932c <UnixFile::~UnixFile()>
c000843e:	90                   	nop
c000843f:	83 c4 1c             	add    esp,0x1c
c0008442:	c3                   	ret    
c0008443:	90                   	nop

c0008444 <VgaText::~VgaText()>:
c0008444:	83 ec 1c             	sub    esp,0x1c
c0008447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844b:	89 04 24             	mov    DWORD PTR [esp],eax
c000844e:	e8 d1 ff ff ff       	call   c0008424 <VgaText::~VgaText()>
c0008453:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c000845b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000845f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008462:	e8 65 24 00 00       	call   c000a8cc <operator delete(void*, unsigned long)>
c0008467:	83 c4 1c             	add    esp,0x1c
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <VgaText::read(unsigned long long, void*, int*)>:
c000846c:	83 ec 10             	sub    esp,0x10
c000846f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008473:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847b:	e8 b9 47 00 00       	call   c000cc39 <readKeyboard(VgaText*, char*, unsigned long)>
c0008480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008484:	89 02                	mov    DWORD PTR [edx],eax
c0008486:	31 c0                	xor    eax,eax
c0008488:	83 c4 1c             	add    esp,0x1c
c000848b:	c3                   	ret    

c000848c <setTerminalScrollLock(bool)>:
c000848c:	c3                   	ret    

c000848d <doTerminalCycle()>:
c000848d:	c3                   	ret    

c000848e <addToTerminalCycle(VgaText*)>:
c000848e:	c3                   	ret    

c000848f <scrollTerminalScrollLock(int)>:
c000848f:	c3                   	ret    

c0008490 <VgaText::updateTitle()>:
c0008490:	c3                   	ret    
c0008491:	90                   	nop

c0008492 <VgaText::load()>:
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::updateCursor()>:
c0008494:	83 ec 14             	sub    esp,0x14
c0008497:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000849b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084a1:	e8 36 f7 00 00       	call   c0017bdc <HalConsoleCursorUpdate(int, int)>
c00084a6:	83 c4 1c             	add    esp,0x1c
c00084a9:	c3                   	ret    

c00084aa <VgaText::doANSI_SGR(int)>:
c00084aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084b2:	85 d2                	test   edx,edx
c00084b4:	75 0b                	jne    c00084c1 <VgaText::doANSI_SGR(int)+0x17>
c00084b6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00084b9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084bc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00084bf:	eb 59                	jmp    c000851a <VgaText::doANSI_SGR(int)+0x70>
c00084c1:	83 fa 07             	cmp    edx,0x7
c00084c4:	75 0b                	jne    c00084d1 <VgaText::doANSI_SGR(int)+0x27>
c00084c6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00084c9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00084cc:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00084cf:	eb 49                	jmp    c000851a <VgaText::doANSI_SGR(int)+0x70>
c00084d1:	83 fa 1b             	cmp    edx,0x1b
c00084d4:	74 e0                	je     c00084b6 <VgaText::doANSI_SGR(int)+0xc>
c00084d6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00084d9:	83 f9 07             	cmp    ecx,0x7
c00084dc:	77 09                	ja     c00084e7 <VgaText::doANSI_SGR(int)+0x3d>
c00084de:	8b 14 8d e0 1a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde520]
c00084e5:	eb 20                	jmp    c0008507 <VgaText::doANSI_SGR(int)+0x5d>
c00084e7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00084ea:	83 f9 07             	cmp    ecx,0x7
c00084ed:	77 09                	ja     c00084f8 <VgaText::doANSI_SGR(int)+0x4e>
c00084ef:	8b 14 8d e0 1a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde520]
c00084f6:	eb 22                	jmp    c000851a <VgaText::doANSI_SGR(int)+0x70>
c00084f8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00084fb:	83 f9 07             	cmp    ecx,0x7
c00084fe:	77 0b                	ja     c000850b <VgaText::doANSI_SGR(int)+0x61>
c0008500:	8b 14 95 98 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde668]
c0008507:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000850a:	c3                   	ret    
c000850b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000850e:	83 f9 07             	cmp    ecx,0x7
c0008511:	77 0a                	ja     c000851d <VgaText::doANSI_SGR(int)+0x73>
c0008513:	8b 14 95 70 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde690]
c000851a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000851d:	c3                   	ret    

c000851e <VgaText::setDefaultBgColour(VgaColour)>:
c000851e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008526:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008529:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000852c:	c3                   	ret    
c000852d:	90                   	nop

c000852e <VgaText::setDefaultFgColour(VgaColour)>:
c000852e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008536:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008539:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000853c:	c3                   	ret    
c000853d:	90                   	nop

c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000853e:	53                   	push   ebx
c000853f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008543:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008547:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000854b:	51                   	push   ecx
c000854c:	e8 cd ff ff ff       	call   c000851e <VgaText::setDefaultBgColour(VgaColour)>
c0008551:	58                   	pop    eax
c0008552:	5a                   	pop    edx
c0008553:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008557:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000855b:	5b                   	pop    ebx
c000855c:	eb d0                	jmp    c000852e <VgaText::setDefaultFgColour(VgaColour)>

c000855e <VgaText::setTitleTextColour(VgaColour)>:
c000855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008566:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008569:	c3                   	ret    

c000856a <VgaText::setTitleColour(VgaColour)>:
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008572:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008575:	c3                   	ret    

c0008576 <VgaText::setTitle(char*)>:
c0008576:	c3                   	ret    
c0008577:	90                   	nop

c0008578 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008578:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000857c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008581:	24 0f                	and    al,0xf
c0008583:	c1 e2 04             	shl    edx,0x4
c0008586:	08 d0                	or     al,dl
c0008588:	c3                   	ret    
c0008589:	90                   	nop

c000858a <VgaText::scrollScreen()>:
c000858a:	55                   	push   ebp
c000858b:	57                   	push   edi
c000858c:	56                   	push   esi
c000858d:	be 01 00 00 00       	mov    esi,0x1
c0008592:	53                   	push   ebx
c0008593:	83 ec 0c             	sub    esp,0xc
c0008596:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000859a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000859d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00085a3:	31 ff                	xor    edi,edi
c00085a5:	01 e9                	add    ecx,ebp
c00085a7:	8a 01                	mov    al,BYTE PTR [ecx]
c00085a9:	83 fe 18             	cmp    esi,0x18
c00085ac:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00085b2:	75 20                	jne    c00085d4 <VgaText::scrollScreen()+0x4a>
c00085b4:	f7 c7 01 00 00 00    	test   edi,0x1
c00085ba:	74 15                	je     c00085d1 <VgaText::scrollScreen()+0x47>
c00085bc:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085c0:	50                   	push   eax
c00085c1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085c5:	50                   	push   eax
c00085c6:	e8 ad ff ff ff       	call   c0008578 <VgaText::combineColours(unsigned char, unsigned char)>
c00085cb:	5a                   	pop    edx
c00085cc:	5a                   	pop    edx
c00085cd:	88 01                	mov    BYTE PTR [ecx],al
c00085cf:	eb 03                	jmp    c00085d4 <VgaText::scrollScreen()+0x4a>
c00085d1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00085d4:	47                   	inc    edi
c00085d5:	41                   	inc    ecx
c00085d6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00085dc:	75 c9                	jne    c00085a7 <VgaText::scrollScreen()+0x1d>
c00085de:	46                   	inc    esi
c00085df:	83 fe 19             	cmp    esi,0x19
c00085e2:	75 b9                	jne    c000859d <VgaText::scrollScreen()+0x13>
c00085e4:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c00085ea:	75 1f                	jne    c000860b <VgaText::scrollScreen()+0x81>
c00085ec:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00085f0:	74 05                	je     c00085f7 <VgaText::scrollScreen()+0x6d>
c00085f2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00085f5:	eb 14                	jmp    c000860b <VgaText::scrollScreen()+0x81>
c00085f7:	50                   	push   eax
c00085f8:	50                   	push   eax
c00085f9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085fd:	50                   	push   eax
c00085fe:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008602:	50                   	push   eax
c0008603:	e8 60 f4 00 00       	call   c0017a68 <HalConsoleScroll(int, int)>
c0008608:	83 c4 10             	add    esp,0x10
c000860b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000860f:	83 c4 0c             	add    esp,0xc
c0008612:	5b                   	pop    ebx
c0008613:	5e                   	pop    esi
c0008614:	5f                   	pop    edi
c0008615:	5d                   	pop    ebp
c0008616:	e9 79 fe ff ff       	jmp    c0008494 <VgaText::updateCursor()>
c000861b:	90                   	nop

c000861c <VgaText::combineCharAndColour(char, unsigned char)>:
c000861c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008621:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008626:	c1 e0 08             	shl    eax,0x8
c0008629:	09 d0                	or     eax,edx
c000862b:	c3                   	ret    

c000862c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000862c:	55                   	push   ebp
c000862d:	57                   	push   edi
c000862e:	56                   	push   esi
c000862f:	53                   	push   ebx
c0008630:	83 ec 1c             	sub    esp,0x1c
c0008633:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008637:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000863b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000863f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008647:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000864b:	0f b6 c3             	movzx  eax,bl
c000864e:	50                   	push   eax
c000864f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008654:	50                   	push   eax
c0008655:	e8 1e ff ff ff       	call   c0008578 <VgaText::combineColours(unsigned char, unsigned char)>
c000865a:	5a                   	pop    edx
c000865b:	59                   	pop    ecx
c000865c:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008661:	0f b6 c0             	movzx  eax,al
c0008664:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008668:	50                   	push   eax
c0008669:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000866d:	e8 aa ff ff ff       	call   c000861c <VgaText::combineCharAndColour(char, unsigned char)>
c0008672:	5a                   	pop    edx
c0008673:	6b d7 50             	imul   edx,edi,0x50
c0008676:	59                   	pop    ecx
c0008677:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000867a:	01 f2                	add    edx,esi
c000867c:	0f b7 d2             	movzx  edx,dx
c000867f:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008683:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008689:	75 28                	jne    c00086b3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000868b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000868f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008693:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008697:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000869b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000869f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00086a7:	83 c4 1c             	add    esp,0x1c
c00086aa:	5b                   	pop    ebx
c00086ab:	5e                   	pop    esi
c00086ac:	5f                   	pop    edi
c00086ad:	5d                   	pop    ebp
c00086ae:	e9 bd f4 00 00       	jmp    c0017b70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00086b3:	83 c4 1c             	add    esp,0x1c
c00086b6:	5b                   	pop    ebx
c00086b7:	5e                   	pop    esi
c00086b8:	5f                   	pop    edi
c00086b9:	5d                   	pop    ebp
c00086ba:	c3                   	ret    
c00086bb:	90                   	nop

c00086bc <VgaText::getCursorX()>:
c00086bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00086c3:	c3                   	ret    

c00086c4 <VgaText::getCursorY()>:
c00086c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086c8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00086cb:	c3                   	ret    

c00086cc <VgaText::setCursor(int, int)>:
c00086cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086d4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00086d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00086db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00086de:	e9 b1 fd ff ff       	jmp    c0008494 <VgaText::updateCursor()>

c00086e3 <setActiveTerminal(VgaText*)>:
c00086e3:	53                   	push   ebx
c00086e4:	83 ec 08             	sub    esp,0x8
c00086e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086eb:	85 db                	test   ebx,ebx
c00086ed:	75 11                	jne    c0008700 <setActiveTerminal(VgaText*)+0x1d>
c00086ef:	c7 44 24 10 5c f9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f95c
c00086f7:	83 c4 08             	add    esp,0x8
c00086fa:	5b                   	pop    ebx
c00086fb:	e9 35 80 00 00       	jmp    c0010735 <KePanic(char const*)>
c0008700:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008705:	85 c0                	test   eax,eax
c0008707:	74 0c                	je     c0008715 <setActiveTerminal(VgaText*)+0x32>
c0008709:	83 ec 0c             	sub    esp,0xc
c000870c:	50                   	push   eax
c000870d:	e8 82 fd ff ff       	call   c0008494 <VgaText::updateCursor()>
c0008712:	83 c4 10             	add    esp,0x10
c0008715:	50                   	push   eax
c0008716:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008719:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000871f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008722:	53                   	push   ebx
c0008723:	e8 a4 ff ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c0008728:	83 c4 18             	add    esp,0x18
c000872b:	5b                   	pop    ebx
c000872c:	c3                   	ret    
c000872d:	90                   	nop

c000872e <VgaText::clearScreen()>:
c000872e:	57                   	push   edi
c000872f:	56                   	push   esi
c0008730:	31 f6                	xor    esi,esi
c0008732:	53                   	push   ebx
c0008733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008737:	52                   	push   edx
c0008738:	6a 00                	push   0x0
c000873a:	6a 00                	push   0x0
c000873c:	53                   	push   ebx
c000873d:	e8 8a ff ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000874c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000874f:	7e 20                	jle    c0008771 <VgaText::clearScreen()+0x43>
c0008751:	31 ff                	xor    edi,edi
c0008753:	50                   	push   eax
c0008754:	50                   	push   eax
c0008755:	56                   	push   esi
c0008756:	57                   	push   edi
c0008757:	47                   	inc    edi
c0008758:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000875b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000875e:	6a 20                	push   0x20
c0008760:	53                   	push   ebx
c0008761:	e8 c6 fe ff ff       	call   c000862c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008766:	83 c4 20             	add    esp,0x20
c0008769:	83 ff 50             	cmp    edi,0x50
c000876c:	75 e5                	jne    c0008753 <VgaText::clearScreen()+0x25>
c000876e:	46                   	inc    esi
c000876f:	eb db                	jmp    c000874c <VgaText::clearScreen()+0x1e>
c0008771:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008778:	5b                   	pop    ebx
c0008779:	5e                   	pop    esi
c000877a:	5f                   	pop    edi
c000877b:	c3                   	ret    

c000877c <VgaText::setCursorX(int)>:
c000877c:	83 ec 10             	sub    esp,0x10
c000877f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008783:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000878a:	50                   	push   eax
c000878b:	e8 3c ff ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c0008790:	83 c4 1c             	add    esp,0x1c
c0008793:	c3                   	ret    

c0008794 <VgaText::setCursorY(int)>:
c0008794:	83 ec 10             	sub    esp,0x10
c0008797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000879b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000879f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00087a2:	50                   	push   eax
c00087a3:	e8 24 ff ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c00087a8:	83 c4 1c             	add    esp,0x1c
c00087ab:	c3                   	ret    

c00087ac <VgaText::incrementCursor(bool)>:
c00087ac:	53                   	push   ebx
c00087ad:	83 ec 18             	sub    esp,0x18
c00087b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b4:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c00087b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00087bb:	40                   	inc    eax
c00087bc:	83 f8 50             	cmp    eax,0x50
c00087bf:	74 05                	je     c00087c6 <VgaText::incrementCursor(bool)+0x1a>
c00087c1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00087c4:	eb 2c                	jmp    c00087f2 <VgaText::incrementCursor(bool)+0x46>
c00087c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00087d0:	8d 48 01             	lea    ecx,[eax+0x1]
c00087d3:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00087d6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00087d9:	75 17                	jne    c00087f2 <VgaText::incrementCursor(bool)+0x46>
c00087db:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00087df:	83 ec 0c             	sub    esp,0xc
c00087e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00087e5:	53                   	push   ebx
c00087e6:	e8 9f fd ff ff       	call   c000858a <VgaText::scrollScreen()>
c00087eb:	83 c4 10             	add    esp,0x10
c00087ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00087f2:	84 d2                	test   dl,dl
c00087f4:	74 0d                	je     c0008803 <VgaText::incrementCursor(bool)+0x57>
c00087f6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00087fa:	83 c4 18             	add    esp,0x18
c00087fd:	5b                   	pop    ebx
c00087fe:	e9 91 fc ff ff       	jmp    c0008494 <VgaText::updateCursor()>
c0008803:	83 c4 18             	add    esp,0x18
c0008806:	5b                   	pop    ebx
c0008807:	c3                   	ret    

c0008808 <VgaText::decrementCursor(bool)>:
c0008808:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000880c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0008810:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008813:	85 c0                	test   eax,eax
c0008815:	74 04                	je     c000881b <VgaText::decrementCursor(bool)+0x13>
c0008817:	48                   	dec    eax
c0008818:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000881b:	84 c9                	test   cl,cl
c000881d:	74 09                	je     c0008828 <VgaText::decrementCursor(bool)+0x20>
c000881f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008823:	e9 6c fc ff ff       	jmp    c0008494 <VgaText::updateCursor()>
c0008828:	c3                   	ret    
c0008829:	90                   	nop

c000882a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000882a:	53                   	push   ebx
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008833:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000883b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000883f:	3c 07                	cmp    al,0x7
c0008841:	75 21                	jne    c0008864 <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c0008843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000884b:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008853:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000885b:	83 c4 08             	add    esp,0x8
c000885e:	5b                   	pop    ebx
c000885f:	e9 d4 2f 00 00       	jmp    c000b838 <Krnl::beep(int, int, bool)>
c0008864:	3c 0d                	cmp    al,0xd
c0008866:	75 09                	jne    c0008871 <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c0008868:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886f:	eb 2c                	jmp    c000889d <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c0008871:	3c 0a                	cmp    al,0xa
c0008873:	75 31                	jne    c00088a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c0008875:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000887c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000887f:	8d 50 01             	lea    edx,[eax+0x1]
c0008882:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008885:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008888:	75 0f                	jne    c0008899 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c000888a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000888d:	83 ec 0c             	sub    esp,0xc
c0008890:	53                   	push   ebx
c0008891:	e8 f4 fc ff ff       	call   c000858a <VgaText::scrollScreen()>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000889d:	83 c4 08             	add    esp,0x8
c00088a0:	5b                   	pop    ebx
c00088a1:	e9 ee fb ff ff       	jmp    c0008494 <VgaText::updateCursor()>
c00088a6:	3c 08                	cmp    al,0x8
c00088a8:	75 25                	jne    c00088cf <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c00088aa:	50                   	push   eax
c00088ab:	50                   	push   eax
c00088ac:	6a 01                	push   0x1
c00088ae:	53                   	push   ebx
c00088af:	e8 54 ff ff ff       	call   c0008808 <VgaText::decrementCursor(bool)>
c00088b4:	5a                   	pop    edx
c00088b5:	59                   	pop    ecx
c00088b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088c2:	6a 20                	push   0x20
c00088c4:	53                   	push   ebx
c00088c5:	e8 62 fd ff ff       	call   c000862c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088ca:	83 c4 28             	add    esp,0x28
c00088cd:	5b                   	pop    ebx
c00088ce:	c3                   	ret    
c00088cf:	83 ec 08             	sub    esp,0x8
c00088d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088d8:	51                   	push   ecx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	53                   	push   ebx
c00088dc:	e8 4b fd ff ff       	call   c000862c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088e1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00088e5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00088ed:	83 c4 28             	add    esp,0x28
c00088f0:	5b                   	pop    ebx
c00088f1:	e9 b6 fe ff ff       	jmp    c00087ac <VgaText::incrementCursor(bool)>

c00088f6 <VgaText::putchar(char)>:
c00088f6:	56                   	push   esi
c00088f7:	53                   	push   ebx
c00088f8:	83 ec 14             	sub    esp,0x14
c00088fb:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c0008900:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008904:	3c 5b                	cmp    al,0x5b
c0008906:	75 18                	jne    c0008920 <VgaText::putchar(char)+0x2a>
c0008908:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000890c:	74 1f                	je     c000892d <VgaText::putchar(char)+0x37>
c000890e:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008914:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000891b:	e9 bc 00 00 00       	jmp    c00089dc <VgaText::putchar(char)+0xe6>
c0008920:	3c 1b                	cmp    al,0x1b
c0008922:	75 09                	jne    c000892d <VgaText::putchar(char)+0x37>
c0008924:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008928:	e9 af 00 00 00       	jmp    c00089dc <VgaText::putchar(char)+0xe6>
c000892d:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c0008930:	84 d2                	test   dl,dl
c0008932:	0f 84 94 00 00 00    	je     c00089cc <VgaText::putchar(char)+0xd6>
c0008938:	88 c1                	mov    cl,al
c000893a:	80 e9 40             	sub    cl,0x40
c000893d:	80 f9 3e             	cmp    cl,0x3e
c0008940:	77 76                	ja     c00089b8 <VgaText::putchar(char)+0xc2>
c0008942:	3c 6d                	cmp    al,0x6d
c0008944:	75 47                	jne    c000898d <VgaText::putchar(char)+0x97>
c0008946:	31 f6                	xor    esi,esi
c0008948:	31 c9                	xor    ecx,ecx
c000894a:	31 c0                	xor    eax,eax
c000894c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000894f:	7e 2d                	jle    c000897e <VgaText::putchar(char)+0x88>
c0008951:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c0008956:	80 f9 3b             	cmp    cl,0x3b
c0008959:	75 17                	jne    c0008972 <VgaText::putchar(char)+0x7c>
c000895b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000895f:	50                   	push   eax
c0008960:	53                   	push   ebx
c0008961:	e8 44 fb ff ff       	call   c00084aa <VgaText::doANSI_SGR(int)>
c0008966:	59                   	pop    ecx
c0008967:	31 c9                	xor    ecx,ecx
c0008969:	58                   	pop    eax
c000896a:	31 c0                	xor    eax,eax
c000896c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008970:	eb 09                	jmp    c000897b <VgaText::putchar(char)+0x85>
c0008972:	6b c0 0a             	imul   eax,eax,0xa
c0008975:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008979:	88 d1                	mov    cl,dl
c000897b:	46                   	inc    esi
c000897c:	eb ce                	jmp    c000894c <VgaText::putchar(char)+0x56>
c000897e:	84 c9                	test   cl,cl
c0008980:	74 2e                	je     c00089b0 <VgaText::putchar(char)+0xba>
c0008982:	50                   	push   eax
c0008983:	53                   	push   ebx
c0008984:	e8 21 fb ff ff       	call   c00084aa <VgaText::doANSI_SGR(int)>
c0008989:	58                   	pop    eax
c000898a:	5a                   	pop    edx
c000898b:	eb 23                	jmp    c00089b0 <VgaText::putchar(char)+0xba>
c000898d:	3c 4a                	cmp    al,0x4a
c000898f:	75 1f                	jne    c00089b0 <VgaText::putchar(char)+0xba>
c0008991:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008995:	75 19                	jne    c00089b0 <VgaText::putchar(char)+0xba>
c0008997:	83 ec 0c             	sub    esp,0xc
c000899a:	53                   	push   ebx
c000899b:	e8 8e fd ff ff       	call   c000872e <VgaText::clearScreen()>
c00089a0:	83 c4 0c             	add    esp,0xc
c00089a3:	6a 00                	push   0x0
c00089a5:	6a 00                	push   0x0
c00089a7:	53                   	push   ebx
c00089a8:	e8 1f fd ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00089b6:	eb 24                	jmp    c00089dc <VgaText::putchar(char)+0xe6>
c00089b8:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00089bb:	83 fa 0e             	cmp    edx,0xe
c00089be:	7f 1c                	jg     c00089dc <VgaText::putchar(char)+0xe6>
c00089c0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00089c3:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00089c6:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00089ca:	eb 10                	jmp    c00089dc <VgaText::putchar(char)+0xe6>
c00089cc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089cf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089d2:	50                   	push   eax
c00089d3:	53                   	push   ebx
c00089d4:	e8 51 fe ff ff       	call   c000882a <VgaText::putchar(char, VgaColour, VgaColour)>
c00089d9:	83 c4 10             	add    esp,0x10
c00089dc:	83 c4 14             	add    esp,0x14
c00089df:	5b                   	pop    ebx
c00089e0:	5e                   	pop    esi
c00089e1:	c3                   	ret    

c00089e2 <VgaText::putx(unsigned int)>:
c00089e2:	57                   	push   edi
c00089e3:	b9 11 00 00 00       	mov    ecx,0x11
c00089e8:	56                   	push   esi
c00089e9:	be 6a f9 01 c0       	mov    esi,0xc001f96a
c00089ee:	53                   	push   ebx
c00089ef:	83 ec 20             	sub    esp,0x20
c00089f2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00089f6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00089fa:	fc                   	cld    
c00089fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00089fd:	be 08 00 00 00       	mov    esi,0x8
c0008a02:	50                   	push   eax
c0008a03:	50                   	push   eax
c0008a04:	89 d8                	mov    eax,ebx
c0008a06:	c1 e8 1c             	shr    eax,0x1c
c0008a09:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a0e:	c1 e3 04             	shl    ebx,0x4
c0008a11:	50                   	push   eax
c0008a12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a16:	e8 db fe ff ff       	call   c00088f6 <VgaText::putchar(char)>
c0008a1b:	83 c4 10             	add    esp,0x10
c0008a1e:	4e                   	dec    esi
c0008a1f:	75 e1                	jne    c0008a02 <VgaText::putx(unsigned int)+0x20>
c0008a21:	83 c4 20             	add    esp,0x20
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	5f                   	pop    edi
c0008a27:	c3                   	ret    

c0008a28 <VgaText::puts(char const*)>:
c0008a28:	53                   	push   ebx
c0008a29:	83 ec 08             	sub    esp,0x8
c0008a2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a30:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a33:	84 c0                	test   al,al
c0008a35:	74 12                	je     c0008a49 <VgaText::puts(char const*)+0x21>
c0008a37:	51                   	push   ecx
c0008a38:	43                   	inc    ebx
c0008a39:	51                   	push   ecx
c0008a3a:	50                   	push   eax
c0008a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3f:	e8 b2 fe ff ff       	call   c00088f6 <VgaText::putchar(char)>
c0008a44:	83 c4 10             	add    esp,0x10
c0008a47:	eb e7                	jmp    c0008a30 <VgaText::puts(char const*)+0x8>
c0008a49:	83 c4 08             	add    esp,0x8
c0008a4c:	5b                   	pop    ebx
c0008a4d:	c3                   	ret    

c0008a4e <VgaText::write(unsigned long long, void*, int*)>:
c0008a4e:	55                   	push   ebp
c0008a4f:	57                   	push   edi
c0008a50:	56                   	push   esi
c0008a51:	53                   	push   ebx
c0008a52:	83 ec 0c             	sub    esp,0xc
c0008a55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a59:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a5d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008a61:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008a68:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008a6b:	39 eb                	cmp    ebx,ebp
c0008a6d:	74 13                	je     c0008a82 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008a6f:	50                   	push   eax
c0008a70:	43                   	inc    ebx
c0008a71:	50                   	push   eax
c0008a72:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008a76:	50                   	push   eax
c0008a77:	56                   	push   esi
c0008a78:	e8 79 fe ff ff       	call   c00088f6 <VgaText::putchar(char)>
c0008a7d:	83 c4 10             	add    esp,0x10
c0008a80:	eb e9                	jmp    c0008a6b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008a82:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008a89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a8d:	89 38                	mov    DWORD PTR [eax],edi
c0008a8f:	83 c4 0c             	add    esp,0xc
c0008a92:	31 c0                	xor    eax,eax
c0008a94:	5b                   	pop    ebx
c0008a95:	5e                   	pop    esi
c0008a96:	5f                   	pop    edi
c0008a97:	5d                   	pop    ebp
c0008a98:	c3                   	ret    
c0008a99:	90                   	nop

c0008a9a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008a9a:	55                   	push   ebp
c0008a9b:	57                   	push   edi
c0008a9c:	56                   	push   esi
c0008a9d:	53                   	push   ebx
c0008a9e:	83 ec 0c             	sub    esp,0xc
c0008aa1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008aa5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008aaa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008ab1:	50                   	push   eax
c0008ab2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008ab7:	50                   	push   eax
c0008ab8:	e8 bb fa ff ff       	call   c0008578 <VgaText::combineColours(unsigned char, unsigned char)>
c0008abd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ac1:	5a                   	pop    edx
c0008ac2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008ac5:	59                   	pop    ecx
c0008ac6:	0f b6 e8             	movzx  ebp,al
c0008ac9:	0f b7 f6             	movzx  esi,si
c0008acc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ad0:	01 f6                	add    esi,esi
c0008ad2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ad5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008ad8:	84 c0                	test   al,al
c0008ada:	0f 84 ec 00 00 00    	je     c0008bcc <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008ae0:	3c 0d                	cmp    al,0xd
c0008ae2:	75 0c                	jne    c0008af0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008ae4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008aeb:	e9 d6 00 00 00       	jmp    c0008bc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008af0:	3c 0a                	cmp    al,0xa
c0008af2:	75 44                	jne    c0008b38 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008af4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008afb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008afe:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b01:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b04:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b07:	75 0f                	jne    c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008b09:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	53                   	push   ebx
c0008b10:	e8 75 fa ff ff       	call   c000858a <VgaText::scrollScreen()>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	83 ec 0c             	sub    esp,0xc
c0008b1b:	53                   	push   ebx
c0008b1c:	e8 73 f9 ff ff       	call   c0008494 <VgaText::updateCursor()>
c0008b21:	83 c4 10             	add    esp,0x10
c0008b24:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b28:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2b:	0f b7 f6             	movzx  esi,si
c0008b2e:	01 f6                	add    esi,esi
c0008b30:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b33:	e9 8e 00 00 00       	jmp    c0008bc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b38:	3c 08                	cmp    al,0x8
c0008b3a:	75 34                	jne    c0008b70 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008b3c:	51                   	push   ecx
c0008b3d:	51                   	push   ecx
c0008b3e:	6a 01                	push   0x1
c0008b40:	53                   	push   ebx
c0008b41:	e8 c2 fc ff ff       	call   c0008808 <VgaText::decrementCursor(bool)>
c0008b46:	5e                   	pop    esi
c0008b47:	58                   	pop    eax
c0008b48:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b4e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b51:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b54:	6a 20                	push   0x20
c0008b56:	53                   	push   ebx
c0008b57:	e8 d0 fa ff ff       	call   c000862c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b5c:	83 c4 20             	add    esp,0x20
c0008b5f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b63:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b66:	0f b7 f6             	movzx  esi,si
c0008b69:	01 f6                	add    esi,esi
c0008b6b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b6e:	eb 56                	jmp    c0008bc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b70:	52                   	push   edx
c0008b71:	52                   	push   edx
c0008b72:	55                   	push   ebp
c0008b73:	50                   	push   eax
c0008b74:	e8 a3 fa ff ff       	call   c000861c <VgaText::combineCharAndColour(char, unsigned char)>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	66 89 06             	mov    WORD PTR [esi],ax
c0008b7f:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008b85:	75 1d                	jne    c0008ba4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008b87:	83 ec 0c             	sub    esp,0xc
c0008b8a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b98:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b9b:	50                   	push   eax
c0008b9c:	e8 cf ef 00 00       	call   c0017b70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008ba1:	83 c4 20             	add    esp,0x20
c0008ba4:	50                   	push   eax
c0008ba5:	83 c6 02             	add    esi,0x2
c0008ba8:	50                   	push   eax
c0008ba9:	6a 00                	push   0x0
c0008bab:	53                   	push   ebx
c0008bac:	e8 fb fb ff ff       	call   c00087ac <VgaText::incrementCursor(bool)>
c0008bb1:	83 c4 10             	add    esp,0x10
c0008bb4:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008bb8:	75 0c                	jne    c0008bc6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bba:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bbe:	0f b7 f6             	movzx  esi,si
c0008bc1:	01 f6                	add    esi,esi
c0008bc3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bc6:	47                   	inc    edi
c0008bc7:	e9 09 ff ff ff       	jmp    c0008ad5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008bcc:	83 ec 0c             	sub    esp,0xc
c0008bcf:	53                   	push   ebx
c0008bd0:	e8 bf f8 ff ff       	call   c0008494 <VgaText::updateCursor()>
c0008bd5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008bdc:	83 c4 1c             	add    esp,0x1c
c0008bdf:	5b                   	pop    ebx
c0008be0:	5e                   	pop    esi
c0008be1:	5f                   	pop    edi
c0008be2:	5d                   	pop    ebp
c0008be3:	c3                   	ret    

c0008be4 <VgaText::VgaText(char const*)>:
c0008be4:	56                   	push   esi
c0008be5:	53                   	push   ebx
c0008be6:	83 ec 14             	sub    esp,0x14
c0008be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf8:	e8 69 05 00 00       	call   c0009166 <UnixFile::UnixFile(int)>
c0008bfd:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c0008c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c06:	89 10                	mov    DWORD PTR [eax],edx
c0008c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c0c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c17:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c22:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c2a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c32:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c3d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c48:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c53:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c5e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008c65:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008c6c:	e8 1f 09 00 00       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c0008c71:	89 c2                	mov    edx,eax
c0008c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008c7a:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c87:	89 c6                	mov    esi,eax
c0008c89:	e8 ee f0 ff ff       	call   c0007d7c <Phys::allocatePage()>
c0008c8e:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008c96:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008c9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ca1:	e8 0c 10 00 00       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008caa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cad:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008cb5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008cbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0008cc0:	e8 2b 78 ff ff       	call   c00004f0 <memset>
c0008cc5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008ccd:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0008cdc:	e8 5d f8 ff ff       	call   c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008ce1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008ce9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008cf8:	e8 cf f9 ff ff       	call   c00086cc <VgaText::setCursor(int, int)>
c0008cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d01:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d04:	e8 25 fa ff ff       	call   c000872e <VgaText::clearScreen()>
c0008d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d15:	05 82 00 00 00       	add    eax,0x82
c0008d1a:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008d22:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d2d:	e8 be 77 ff ff       	call   c00004f0 <memset>
c0008d32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d36:	05 02 01 00 00       	add    eax,0x102
c0008d3b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008d43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d4e:	e8 9d 77 ff ff       	call   c00004f0 <memset>
c0008d53:	90                   	nop
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <VgaText::receiveKey(unsigned char)>:
c0008d5a:	55                   	push   ebp
c0008d5b:	57                   	push   edi
c0008d5c:	56                   	push   esi
c0008d5d:	53                   	push   ebx
c0008d5e:	83 ec 1c             	sub    esp,0x1c
c0008d61:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008d65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008d69:	84 db                	test   bl,bl
c0008d6b:	0f 84 3f 01 00 00    	je     c0008eb0 <VgaText::receiveKey(unsigned char)+0x156>
c0008d71:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008d77:	80 fb 08             	cmp    bl,0x8
c0008d7a:	75 68                	jne    c0008de4 <VgaText::receiveKey(unsigned char)+0x8a>
c0008d7c:	83 ec 0c             	sub    esp,0xc
c0008d7f:	57                   	push   edi
c0008d80:	e8 0b 78 ff ff       	call   c0000590 <strlen>
c0008d85:	83 c4 10             	add    esp,0x10
c0008d88:	85 c0                	test   eax,eax
c0008d8a:	0f 84 e6 00 00 00    	je     c0008e76 <VgaText::receiveKey(unsigned char)+0x11c>
c0008d90:	50                   	push   eax
c0008d91:	50                   	push   eax
c0008d92:	6a 08                	push   0x8
c0008d94:	56                   	push   esi
c0008d95:	e8 5c fb ff ff       	call   c00088f6 <VgaText::putchar(char)>
c0008d9a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008d9d:	e8 ee 77 ff ff       	call   c0000590 <strlen>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008dac:	3c 1f                	cmp    al,0x1f
c0008dae:	7f 1e                	jg     c0008dce <VgaText::receiveKey(unsigned char)+0x74>
c0008db0:	88 c2                	mov    dl,al
c0008db2:	80 ea 08             	sub    dl,0x8
c0008db5:	80 fa 02             	cmp    dl,0x2
c0008db8:	76 14                	jbe    c0008dce <VgaText::receiveKey(unsigned char)+0x74>
c0008dba:	3c 0d                	cmp    al,0xd
c0008dbc:	74 10                	je     c0008dce <VgaText::receiveKey(unsigned char)+0x74>
c0008dbe:	55                   	push   ebp
c0008dbf:	55                   	push   ebp
c0008dc0:	68 7b f9 01 c0       	push   0xc001f97b
c0008dc5:	56                   	push   esi
c0008dc6:	e8 5d fc ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	57                   	push   edi
c0008dd2:	e8 b9 77 ff ff       	call   c0000590 <strlen>
c0008dd7:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008ddf:	e9 8f 00 00 00       	jmp    c0008e73 <VgaText::receiveKey(unsigned char)+0x119>
c0008de4:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	50                   	push   eax
c0008dee:	e8 9d 77 ff ff       	call   c0000590 <strlen>
c0008df3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008df6:	89 c5                	mov    ebp,eax
c0008df8:	e8 93 77 ff ff       	call   c0000590 <strlen>
c0008dfd:	83 c4 10             	add    esp,0x10
c0008e00:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008e04:	3d 80 00 00 00       	cmp    eax,0x80
c0008e09:	0f 87 a1 00 00 00    	ja     c0008eb0 <VgaText::receiveKey(unsigned char)+0x156>
c0008e0f:	88 d8                	mov    al,bl
c0008e11:	fe c8                	dec    al
c0008e13:	3c 1e                	cmp    al,0x1e
c0008e15:	77 37                	ja     c0008e4e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e17:	88 d8                	mov    al,bl
c0008e19:	2c 09                	sub    al,0x9
c0008e1b:	3c 01                	cmp    al,0x1
c0008e1d:	76 2f                	jbe    c0008e4e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e1f:	80 fb 0d             	cmp    bl,0xd
c0008e22:	74 2a                	je     c0008e4e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e24:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008e27:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008e2a:	68 81 f9 01 c0       	push   0xc001f981
c0008e2f:	56                   	push   esi
c0008e30:	e8 65 fc ff ff       	call   c0008a9a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e35:	88 d8                	mov    al,bl
c0008e37:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008e3a:	04 40                	add    al,0x40
c0008e3c:	0f b6 c0             	movzx  eax,al
c0008e3f:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008e42:	50                   	push   eax
c0008e43:	56                   	push   esi
c0008e44:	e8 e1 f9 ff ff       	call   c000882a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e49:	83 c4 20             	add    esp,0x20
c0008e4c:	eb 0f                	jmp    c0008e5d <VgaText::receiveKey(unsigned char)+0x103>
c0008e4e:	51                   	push   ecx
c0008e4f:	0f be c3             	movsx  eax,bl
c0008e52:	51                   	push   ecx
c0008e53:	50                   	push   eax
c0008e54:	56                   	push   esi
c0008e55:	e8 9c fa ff ff       	call   c00088f6 <VgaText::putchar(char)>
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008e61:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008e66:	52                   	push   edx
c0008e67:	52                   	push   edx
c0008e68:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008e6c:	50                   	push   eax
c0008e6d:	57                   	push   edi
c0008e6e:	e8 2d 7a ff ff       	call   c00008a0 <strcat>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008e7d:	75 0f                	jne    c0008e8e <VgaText::receiveKey(unsigned char)+0x134>
c0008e7f:	80 fb 1c             	cmp    bl,0x1c
c0008e82:	77 2c                	ja     c0008eb0 <VgaText::receiveKey(unsigned char)+0x156>
c0008e84:	b8 08 04 00 10       	mov    eax,0x10000408
c0008e89:	0f a3 d8             	bt     eax,ebx
c0008e8c:	73 22                	jae    c0008eb0 <VgaText::receiveKey(unsigned char)+0x156>
c0008e8e:	50                   	push   eax
c0008e8f:	81 c6 02 01 00 00    	add    esi,0x102
c0008e95:	50                   	push   eax
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	e8 03 7a ff ff       	call   c00008a0 <strcat>
c0008e9d:	83 c4 0c             	add    esp,0xc
c0008ea0:	68 80 00 00 00       	push   0x80
c0008ea5:	6a 00                	push   0x0
c0008ea7:	57                   	push   edi
c0008ea8:	e8 43 76 ff ff       	call   c00004f0 <memset>
c0008ead:	83 c4 10             	add    esp,0x10
c0008eb0:	83 c4 1c             	add    esp,0x1c
c0008eb3:	5b                   	pop    ebx
c0008eb4:	5e                   	pop    esi
c0008eb5:	5f                   	pop    edi
c0008eb6:	5d                   	pop    ebp
c0008eb7:	c3                   	ret    

c0008eb8 <VgaText::doUpdate()>:
c0008eb8:	c3                   	ret    

c0008eb9 <newTerminal(char*)>:
c0008eb9:	83 ec 28             	sub    esp,0x28
c0008ebc:	68 84 01 00 00       	push   0x184
c0008ec1:	e8 a0 eb ff ff       	call   c0007a66 <malloc>
c0008ec6:	5a                   	pop    edx
c0008ec7:	59                   	pop    ecx
c0008ec8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ecc:	50                   	push   eax
c0008ecd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ed1:	e8 0e fd ff ff       	call   c0008be4 <VgaText::VgaText(char const*)>
c0008ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008eda:	83 c4 2c             	add    esp,0x2c
c0008edd:	c3                   	ret    
c0008ede:	66 90                	xchg   ax,ax

c0008ee0 <TSS::TSS()>:
c0008ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ee4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008eeb:	90                   	nop
c0008eec:	c3                   	ret    
c0008eed:	90                   	nop
c0008eee:	66 90                	xchg   ax,ax

c0008ef0 <TSS::setESP(unsigned long)>:
c0008ef0:	55                   	push   ebp
c0008ef1:	89 e5                	mov    ebp,esp
c0008ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ef9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008efc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008eff:	90                   	nop
c0008f00:	5d                   	pop    ebp
c0008f01:	c3                   	ret    
c0008f02:	66 90                	xchg   ax,ax

c0008f04 <TSS::flush()>:
c0008f04:	55                   	push   ebp
c0008f05:	89 e5                	mov    ebp,esp
c0008f07:	83 ec 10             	sub    esp,0x10
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f0f:	98                   	cwde   
c0008f10:	83 c8 03             	or     eax,0x3
c0008f13:	98                   	cwde   
c0008f14:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f18:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008f1c:	66 89 d0             	mov    ax,dx
c0008f1f:	0f 00 d8             	ltr    ax
c0008f22:	90                   	nop
c0008f23:	c9                   	leave  
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop
c0008f26:	66 90                	xchg   ax,ax

c0008f28 <TSS::setup(unsigned long, unsigned long)>:
c0008f28:	55                   	push   ebp
c0008f29:	89 e5                	mov    ebp,esp
c0008f2b:	83 ec 28             	sub    esp,0x28
c0008f2e:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008f35:	e8 2c eb ff ff       	call   c0007a66 <malloc>
c0008f3a:	89 c2                	mov    edx,eax
c0008f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f48:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008f50:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f5b:	e8 90 75 ff ff       	call   c00004f0 <memset>
c0008f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f66:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f72:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f96:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fae:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fba:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008fd5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fde:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fe1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fea:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	0f 20 da             	mov    edx,cr3
c0008ffa:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008ffd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009000:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009009:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000900d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009010:	89 04 24             	mov    DWORD PTR [esp],eax
c0009013:	e8 b2 e2 ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0009018:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c0009020:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009023:	89 04 24             	mov    DWORD PTR [esp],eax
c0009026:	e8 bb e2 ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c000902b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000902f:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c0009033:	24 0f                	and    al,0xf
c0009035:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009038:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c000903c:	0c 40                	or     al,0x40
c000903e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009041:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009046:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000904c:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c0009052:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009055:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0009058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000905c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009060:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009063:	e8 b0 e2 ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0009068:	89 c2                	mov    edx,eax
c000906a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906d:	89 10                	mov    DWORD PTR [eax],edx
c000906f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009074:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000907a:	05 78 01 00 00       	add    eax,0x178
c000907f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009082:	e8 bb e2 ff ff       	call   c0007342 <GDT::flush()>
c0009087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908a:	8b 00                	mov    eax,DWORD PTR [eax]
c000908c:	c9                   	leave  
c000908d:	c3                   	ret    

c000908e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000908e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009092:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009099:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000909e:	75 08                	jne    c00090a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090a0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090a6:	eb 38                	jmp    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090a8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ad:	75 17                	jne    c00090c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090c3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090c6:	89 c1                	mov    ecx,eax
c00090c8:	83 e1 fd             	and    ecx,0xfffffffd
c00090cb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00090d1:	74 cd                	je     c00090a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00090d3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00090d8:	83 e0 ef             	and    eax,0xffffffef
c00090db:	83 f8 08             	cmp    eax,0x8
c00090de:	76 c0                	jbe    c00090a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00090e0:	31 c0                	xor    eax,eax
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::isAtty()>:
c00090e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090eb:	31 c0                	xor    eax,eax
c00090ed:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00090f3:	74 09                	je     c00090fe <ReservedFilename::isAtty()+0x1a>
c00090f5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00090fb:	0f 94 c0             	sete   al
c00090fe:	c3                   	ret    
c00090ff:	90                   	nop

c0009100 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000910c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000910f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009114:	75 08                	jne    c000911e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009116:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000911c:	eb 3d                	jmp    c000915b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000911e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009123:	75 17                	jne    c000913c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000912a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000912d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009133:	8b 10                	mov    edx,DWORD PTR [eax]
c0009135:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009139:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000913c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009141:	75 04                	jne    c0009147 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009143:	89 0a                	mov    DWORD PTR [edx],ecx
c0009145:	eb 14                	jmp    c000915b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009147:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000914c:	74 c8                	je     c0009116 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000914e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009153:	83 e0 ef             	and    eax,0xffffffef
c0009156:	83 f8 08             	cmp    eax,0x8
c0009159:	76 bb                	jbe    c0009116 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000915b:	31 c0                	xor    eax,eax
c000915d:	c3                   	ret    

c000915e <UnixFile::getFileDescriptor()>:
c000915e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009165:	c3                   	ret    

c0009166 <UnixFile::UnixFile(int)>:
c0009166:	53                   	push   ebx
c0009167:	83 ec 38             	sub    esp,0x38
c000916a:	ba 58 fa 01 c0       	mov    edx,0xc001fa58
c000916f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009173:	89 10                	mov    DWORD PTR [eax],edx
c0009175:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c000917d:	0f 8f 70 01 00 00    	jg     c00092f3 <UnixFile::UnixFile(int)+0x18d>
c0009183:	a1 20 1b 02 c0       	mov    eax,ds:0xc0021b20
c0009188:	8d 50 01             	lea    edx,[eax+0x1]
c000918b:	89 15 20 1b 02 c0    	mov    DWORD PTR ds:0xc0021b20,edx
c0009191:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009195:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009198:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000919c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a0:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00091a7:	e8 44 54 01 00       	call   c001e5f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091ac:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c00091b3:	34 01                	xor    al,0x1
c00091b5:	0f 84 39 01 00 00    	je     c00092f4 <UnixFile::UnixFile(int)+0x18e>
c00091bb:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c00091c2:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c00091ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00091d1:	e8 90 e8 ff ff       	call   c0007a66 <malloc>
c00091d6:	89 c3                	mov    ebx,eax
c00091d8:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c00091e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091e3:	e8 12 01 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c00091e8:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c00091ee:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c00091f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00091fd:	e8 64 e8 ff ff       	call   c0007a66 <malloc>
c0009202:	89 c3                	mov    ebx,eax
c0009204:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c000920c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000920f:	e8 e6 00 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c0009214:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000921a:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c0009222:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009226:	89 04 24             	mov    DWORD PTR [esp],eax
c0009229:	e8 38 e8 ff ff       	call   c0007a66 <malloc>
c000922e:	89 c3                	mov    ebx,eax
c0009230:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c0009238:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000923b:	e8 ba 00 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c0009240:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c0009246:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c000924e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009252:	89 04 24             	mov    DWORD PTR [esp],eax
c0009255:	e8 0c e8 ff ff       	call   c0007a66 <malloc>
c000925a:	89 c3                	mov    ebx,eax
c000925c:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c0009264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009267:	e8 8e 00 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c000926c:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c0009272:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000927a:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c000927f:	7f 73                	jg     c00092f4 <UnixFile::UnixFile(int)+0x18e>
c0009281:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000928d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009290:	e8 d1 e7 ff ff       	call   c0007a66 <malloc>
c0009295:	89 c3                	mov    ebx,eax
c0009297:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000929b:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092a7:	e8 4e 00 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c00092ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092b0:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c00092b7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00092c6:	e8 9b e7 ff ff       	call   c0007a66 <malloc>
c00092cb:	89 c3                	mov    ebx,eax
c00092cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092d1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00092d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092dd:	e8 18 00 00 00       	call   c00092fa <ReservedFilename::ReservedFilename(int)>
c00092e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092e6:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c00092ed:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00092f1:	eb 87                	jmp    c000927a <UnixFile::UnixFile(int)+0x114>
c00092f3:	90                   	nop
c00092f4:	83 c4 38             	add    esp,0x38
c00092f7:	5b                   	pop    ebx
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <ReservedFilename::ReservedFilename(int)>:
c00092fa:	83 ec 1c             	sub    esp,0x1c
c00092fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009301:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009305:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009309:	89 04 24             	mov    DWORD PTR [esp],eax
c000930c:	e8 55 fe ff ff       	call   c0009166 <UnixFile::UnixFile(int)>
c0009311:	ba 74 fa 01 c0       	mov    edx,0xc001fa74
c0009316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000931a:	89 10                	mov    DWORD PTR [eax],edx
c000931c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009320:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009324:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009327:	90                   	nop
c0009328:	83 c4 1c             	add    esp,0x1c
c000932b:	c3                   	ret    

c000932c <UnixFile::~UnixFile()>:
c000932c:	83 ec 2c             	sub    esp,0x2c
c000932f:	ba 58 fa 01 c0       	mov    edx,0xc001fa58
c0009334:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009338:	89 10                	mov    DWORD PTR [eax],edx
c000933a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000933e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009341:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009346:	7f 67                	jg     c00093af <UnixFile::~UnixFile()+0x83>
c0009348:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009350:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009357:	e8 5c 53 01 00       	call   c001e6b8 <LinkedList<UnixFile>::getFirstElement()>
c000935c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009360:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009367:	e8 54 53 01 00       	call   c001e6c0 <LinkedList<UnixFile>::removeFirst()>
c000936c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009370:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0009374:	74 3c                	je     c00093b2 <UnixFile::~UnixFile()+0x86>
c0009376:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000937a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000937e:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009385:	e8 66 52 01 00       	call   c001e5f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000938a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000938e:	8d 50 01             	lea    edx,[eax+0x1]
c0009391:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009395:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000939a:	0f 94 c0             	sete   al
c000939d:	84 c0                	test   al,al
c000939f:	74 af                	je     c0009350 <UnixFile::~UnixFile()+0x24>
c00093a1:	c7 04 24 30 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa30
c00093a8:	e8 88 73 00 00       	call   c0010735 <KePanic(char const*)>
c00093ad:	eb a1                	jmp    c0009350 <UnixFile::~UnixFile()+0x24>
c00093af:	90                   	nop
c00093b0:	eb 01                	jmp    c00093b3 <UnixFile::~UnixFile()+0x87>
c00093b2:	90                   	nop
c00093b3:	90                   	nop
c00093b4:	83 c4 2c             	add    esp,0x2c
c00093b7:	c3                   	ret    

c00093b8 <UnixFile::~UnixFile()>:
c00093b8:	83 ec 1c             	sub    esp,0x1c
c00093bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	e8 65 ff ff ff       	call   c000932c <UnixFile::~UnixFile()>
c00093c7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00093cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d6:	e8 f1 14 00 00       	call   c000a8cc <operator delete(void*, unsigned long)>
c00093db:	83 c4 1c             	add    esp,0x1c
c00093de:	c3                   	ret    
c00093df:	90                   	nop

c00093e0 <ReservedFilename::~ReservedFilename()>:
c00093e0:	83 ec 1c             	sub    esp,0x1c
c00093e3:	ba 74 fa 01 c0       	mov    edx,0xc001fa74
c00093e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ec:	89 10                	mov    DWORD PTR [eax],edx
c00093ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093f5:	e8 32 ff ff ff       	call   c000932c <UnixFile::~UnixFile()>
c00093fa:	90                   	nop
c00093fb:	83 c4 1c             	add    esp,0x1c
c00093fe:	c3                   	ret    
c00093ff:	90                   	nop

c0009400 <ReservedFilename::~ReservedFilename()>:
c0009400:	83 ec 1c             	sub    esp,0x1c
c0009403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009407:	89 04 24             	mov    DWORD PTR [esp],eax
c000940a:	e8 d1 ff ff ff       	call   c00093e0 <ReservedFilename::~ReservedFilename()>
c000940f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	e8 a9 14 00 00       	call   c000a8cc <operator delete(void*, unsigned long)>
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    

c0009427 <getFromFileDescriptor(int)>:
c0009427:	53                   	push   ebx
c0009428:	83 ec 08             	sub    esp,0x8
c000942b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000942f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009435:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000943b:	7f 2c                	jg     c0009469 <getFromFileDescriptor(int)+0x42>
c000943d:	83 ec 0c             	sub    esp,0xc
c0009440:	68 98 4f 02 c0       	push   0xc0024f98
c0009445:	e8 6e 52 01 00       	call   c001e6b8 <LinkedList<UnixFile>::getFirstElement()>
c000944a:	83 c4 10             	add    esp,0x10
c000944d:	85 c0                	test   eax,eax
c000944f:	75 04                	jne    c0009455 <getFromFileDescriptor(int)+0x2e>
c0009451:	31 c0                	xor    eax,eax
c0009453:	eb 6e                	jmp    c00094c3 <getFromFileDescriptor(int)+0x9c>
c0009455:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009458:	74 69                	je     c00094c3 <getFromFileDescriptor(int)+0x9c>
c000945a:	52                   	push   edx
c000945b:	52                   	push   edx
c000945c:	50                   	push   eax
c000945d:	68 98 4f 02 c0       	push   0xc0024f98
c0009462:	e8 ef 52 01 00       	call   c001e756 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009467:	eb e1                	jmp    c000944a <getFromFileDescriptor(int)+0x23>
c0009469:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000946f:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c0009474:	74 4d                	je     c00094c3 <getFromFileDescriptor(int)+0x9c>
c0009476:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000947c:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009481:	74 40                	je     c00094c3 <getFromFileDescriptor(int)+0x9c>
c0009483:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009489:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c000948e:	74 33                	je     c00094c3 <getFromFileDescriptor(int)+0x9c>
c0009490:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009496:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000949b:	74 26                	je     c00094c3 <getFromFileDescriptor(int)+0x9c>
c000949d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00094a3:	83 f8 08             	cmp    eax,0x8
c00094a6:	77 09                	ja     c00094b1 <getFromFileDescriptor(int)+0x8a>
c00094a8:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c00094af:	eb 12                	jmp    c00094c3 <getFromFileDescriptor(int)+0x9c>
c00094b1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00094b7:	83 fb 08             	cmp    ebx,0x8
c00094ba:	77 95                	ja     c0009451 <getFromFileDescriptor(int)+0x2a>
c00094bc:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c00094c3:	83 c4 08             	add    esp,0x8
c00094c6:	5b                   	pop    ebx
c00094c7:	c3                   	ret    

c00094c8 <__static_initialization_and_destruction_0(int, int)>:
c00094c8:	83 ec 1c             	sub    esp,0x1c
c00094cb:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c00094d0:	75 32                	jne    c0009504 <__static_initialization_and_destruction_0(int, int)+0x3c>
c00094d2:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c00094da:	75 28                	jne    c0009504 <__static_initialization_and_destruction_0(int, int)+0x3c>
c00094dc:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00094e3:	e8 c6 50 01 00       	call   c001e5ae <LinkedList<UnixFile>::LinkedList()>
c00094e8:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c00094f0:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c00094f8:	c7 04 24 ac e5 01 c0 	mov    DWORD PTR [esp],0xc001e5ac
c00094ff:	e8 78 13 00 00       	call   c000a87c <__cxa_atexit>
c0009504:	90                   	nop
c0009505:	83 c4 1c             	add    esp,0x1c
c0009508:	c3                   	ret    

c0009509 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009509:	83 ec 1c             	sub    esp,0x1c
c000950c:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0009514:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000951b:	e8 a8 ff ff ff       	call   c00094c8 <__static_initialization_and_destruction_0(int, int)>
c0009520:	83 c4 1c             	add    esp,0x1c
c0009523:	c3                   	ret    
c0009524:	66 90                	xchg   ax,ax
c0009526:	66 90                	xchg   ax,ax
c0009528:	66 90                	xchg   ax,ax
c000952a:	66 90                	xchg   ax,ax
c000952c:	66 90                	xchg   ax,ax
c000952e:	66 90                	xchg   ax,ax

c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009530:	53                   	push   ebx
c0009531:	8b 15 28 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b28
c0009537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000953b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0009540:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0009546:	89 d8                	mov    eax,ebx
c0009548:	d1 e8                	shr    eax,1
c000954a:	01 d0                	add    eax,edx
c000954c:	f6 c3 01             	test   bl,0x1
c000954f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0009552:	75 09                	jne    c000955d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c0009554:	80 e2 f0             	and    dl,0xf0
c0009557:	08 d1                	or     cl,dl
c0009559:	88 08                	mov    BYTE PTR [eax],cl
c000955b:	5b                   	pop    ebx
c000955c:	c3                   	ret    
c000955d:	c0 e1 04             	shl    cl,0x4
c0009560:	80 e2 0f             	and    dl,0xf
c0009563:	08 ca                	or     dl,cl
c0009565:	88 10                	mov    BYTE PTR [eax],dl
c0009567:	5b                   	pop    ebx
c0009568:	c3                   	ret    

c0009569 <Virt::getPageState(unsigned long)>:
c0009569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956d:	8b 0d 28 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b28
c0009573:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009579:	89 d0                	mov    eax,edx
c000957b:	d1 e8                	shr    eax,1
c000957d:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009581:	88 c8                	mov    al,cl
c0009583:	c0 e8 04             	shr    al,0x4
c0009586:	f6 c2 01             	test   dl,0x1
c0009589:	75 04                	jne    c000958f <Virt::getPageState(unsigned long)+0x26>
c000958b:	88 c8                	mov    al,cl
c000958d:	24 0f                	and    al,0xf
c000958f:	c3                   	ret    

c0009590 <Virt::allocateKernelVirtualPages(int)>:
c0009590:	55                   	push   ebp
c0009591:	57                   	push   edi
c0009592:	31 ff                	xor    edi,edi
c0009594:	56                   	push   esi
c0009595:	31 f6                	xor    esi,esi
c0009597:	53                   	push   ebx
c0009598:	31 db                	xor    ebx,ebx
c000959a:	83 ec 1c             	sub    esp,0x1c
c000959d:	8b 2d 24 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021b24
c00095a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095a6:	e8 be ff ff ff       	call   c0009569 <Virt::getPageState(unsigned long)>
c00095ab:	84 c0                	test   al,al
c00095ad:	75 36                	jne    c00095e5 <Virt::allocateKernelVirtualPages(int)+0x55>
c00095af:	85 f6                	test   esi,esi
c00095b1:	0f 44 fd             	cmove  edi,ebp
c00095b4:	46                   	inc    esi
c00095b5:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c00095b9:	74 51                	je     c000960c <Virt::allocateKernelVirtualPages(int)+0x7c>
c00095bb:	45                   	inc    ebp
c00095bc:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00095c2:	76 2c                	jbe    c00095f0 <Virt::allocateKernelVirtualPages(int)+0x60>
c00095c4:	b8 00 80 0c 00       	mov    eax,0xc8000
c00095c9:	84 db                	test   bl,bl
c00095cb:	a3 24 1b 02 c0       	mov    ds:0xc0021b24,eax
c00095d0:	75 26                	jne    c00095f8 <Virt::allocateKernelVirtualPages(int)+0x68>
c00095d2:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00095d7:	b3 01                	mov    bl,0x1
c00095d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095dc:	e8 88 ff ff ff       	call   c0009569 <Virt::getPageState(unsigned long)>
c00095e1:	84 c0                	test   al,al
c00095e3:	74 ca                	je     c00095af <Virt::allocateKernelVirtualPages(int)+0x1f>
c00095e5:	45                   	inc    ebp
c00095e6:	31 f6                	xor    esi,esi
c00095e8:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00095ee:	77 d4                	ja     c00095c4 <Virt::allocateKernelVirtualPages(int)+0x34>
c00095f0:	89 2d 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,ebp
c00095f6:	eb ab                	jmp    c00095a3 <Virt::allocateKernelVirtualPages(int)+0x13>
c00095f8:	c7 04 24 88 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa88
c00095ff:	e8 31 71 00 00       	call   c0010735 <KePanic(char const*)>
c0009604:	8b 2d 24 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021b24
c000960a:	eb 97                	jmp    c00095a3 <Virt::allocateKernelVirtualPages(int)+0x13>
c000960c:	89 3d 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,edi
c0009612:	4e                   	dec    esi
c0009613:	74 74                	je     c0009689 <Virt::allocateKernelVirtualPages(int)+0xf9>
c0009615:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009619:	85 d2                	test   edx,edx
c000961b:	74 4b                	je     c0009668 <Virt::allocateKernelVirtualPages(int)+0xd8>
c000961d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009621:	89 f8                	mov    eax,edi
c0009623:	31 db                	xor    ebx,ebx
c0009625:	8d 71 ff             	lea    esi,[ecx-0x1]
c0009628:	eb 19                	jmp    c0009643 <Virt::allocateKernelVirtualPages(int)+0xb3>
c000962a:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c000962f:	43                   	inc    ebx
c0009630:	89 04 24             	mov    DWORD PTR [esp],eax
c0009633:	e8 f8 fe ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009638:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c000963c:	74 2a                	je     c0009668 <Virt::allocateKernelVirtualPages(int)+0xd8>
c000963e:	a1 24 1b 02 c0       	mov    eax,ds:0xc0021b24
c0009643:	8d 50 01             	lea    edx,[eax+0x1]
c0009646:	85 db                	test   ebx,ebx
c0009648:	89 15 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,edx
c000964e:	74 25                	je     c0009675 <Virt::allocateKernelVirtualPages(int)+0xe5>
c0009650:	39 de                	cmp    esi,ebx
c0009652:	75 d6                	jne    c000962a <Virt::allocateKernelVirtualPages(int)+0x9a>
c0009654:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c0009659:	43                   	inc    ebx
c000965a:	89 04 24             	mov    DWORD PTR [esp],eax
c000965d:	e8 ce fe ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009662:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c0009666:	75 d6                	jne    c000963e <Virt::allocateKernelVirtualPages(int)+0xae>
c0009668:	83 c4 1c             	add    esp,0x1c
c000966b:	89 f8                	mov    eax,edi
c000966d:	5b                   	pop    ebx
c000966e:	c1 e0 0c             	shl    eax,0xc
c0009671:	5e                   	pop    esi
c0009672:	5f                   	pop    edi
c0009673:	5d                   	pop    ebp
c0009674:	c3                   	ret    
c0009675:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c000967a:	bb 01 00 00 00       	mov    ebx,0x1
c000967f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009682:	e8 a9 fe ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009687:	eb b5                	jmp    c000963e <Virt::allocateKernelVirtualPages(int)+0xae>
c0009689:	89 3c 24             	mov    DWORD PTR [esp],edi
c000968c:	8d 47 01             	lea    eax,[edi+0x1]
c000968f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009694:	a3 24 1b 02 c0       	mov    ds:0xc0021b24,eax
c0009699:	e8 92 fe ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000969e:	83 c4 1c             	add    esp,0x1c
c00096a1:	89 f8                	mov    eax,edi
c00096a3:	5b                   	pop    ebx
c00096a4:	c1 e0 0c             	shl    eax,0xc
c00096a7:	5e                   	pop    esi
c00096a8:	5f                   	pop    edi
c00096a9:	5d                   	pop    ebp
c00096aa:	c3                   	ret    

c00096ab <Virt::freeSwapfilePage(unsigned long)>:
c00096ab:	53                   	push   ebx
c00096ac:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c00096b2:	b8 01 00 00 00       	mov    eax,0x1
c00096b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00096bb:	d3 e0                	shl    eax,cl
c00096bd:	89 cb                	mov    ebx,ecx
c00096bf:	c1 eb 05             	shr    ebx,0x5
c00096c2:	f7 d0                	not    eax
c00096c4:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00096c7:	5b                   	pop    ebx
c00096c8:	c3                   	ret    

c00096c9 <Virt::swapIDToSector(unsigned long)>:
c00096c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096cd:	8b 15 2c 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b2c
c00096d3:	8b 0d 34 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b34
c00096d9:	0f af c2             	imul   eax,edx
c00096dc:	01 c8                	add    eax,ecx
c00096de:	c3                   	ret    

c00096df <Virt::allocateSwapfilePage()>:
c00096df:	55                   	push   ebp
c00096e0:	31 d2                	xor    edx,edx
c00096e2:	57                   	push   edi
c00096e3:	56                   	push   esi
c00096e4:	53                   	push   ebx
c00096e5:	83 ec 1c             	sub    esp,0x1c
c00096e8:	8b 1d 30 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b30
c00096ee:	8b 0d 2c 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b2c
c00096f4:	89 d8                	mov    eax,ebx
c00096f6:	f7 f1                	div    ecx
c00096f8:	39 cb                	cmp    ebx,ecx
c00096fa:	72 2d                	jb     c0009729 <Virt::allocateSwapfilePage()+0x4a>
c00096fc:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009702:	8b 16                	mov    edx,DWORD PTR [esi]
c0009704:	f6 c2 01             	test   dl,0x1
c0009707:	74 38                	je     c0009741 <Virt::allocateSwapfilePage()+0x62>
c0009709:	31 c9                	xor    ecx,ecx
c000970b:	bf 01 00 00 00       	mov    edi,0x1
c0009710:	eb 12                	jmp    c0009724 <Virt::allocateSwapfilePage()+0x45>
c0009712:	89 ca                	mov    edx,ecx
c0009714:	89 fd                	mov    ebp,edi
c0009716:	c1 ea 05             	shr    edx,0x5
c0009719:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000971c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000971e:	d3 e5                	shl    ebp,cl
c0009720:	85 ea                	test   edx,ebp
c0009722:	74 26                	je     c000974a <Virt::allocateSwapfilePage()+0x6b>
c0009724:	41                   	inc    ecx
c0009725:	39 c8                	cmp    eax,ecx
c0009727:	77 e9                	ja     c0009712 <Virt::allocateSwapfilePage()+0x33>
c0009729:	c7 04 24 ef fb 01 c0 	mov    DWORD PTR [esp],0xc001fbef
c0009730:	e8 00 70 00 00       	call   c0010735 <KePanic(char const*)>
c0009735:	83 c4 1c             	add    esp,0x1c
c0009738:	31 c9                	xor    ecx,ecx
c000973a:	5b                   	pop    ebx
c000973b:	89 c8                	mov    eax,ecx
c000973d:	5e                   	pop    esi
c000973e:	5f                   	pop    edi
c000973f:	5d                   	pop    ebp
c0009740:	c3                   	ret    
c0009741:	89 f3                	mov    ebx,esi
c0009743:	bd 01 00 00 00       	mov    ebp,0x1
c0009748:	31 c9                	xor    ecx,ecx
c000974a:	09 ea                	or     edx,ebp
c000974c:	89 c8                	mov    eax,ecx
c000974e:	89 13                	mov    DWORD PTR [ebx],edx
c0009750:	83 c4 1c             	add    esp,0x1c
c0009753:	5b                   	pop    ebx
c0009754:	5e                   	pop    esi
c0009755:	5f                   	pop    edi
c0009756:	5d                   	pop    ebp
c0009757:	c3                   	ret    

c0009758 <Virt::virtualMemorySetup()>:
c0009758:	53                   	push   ebx
c0009759:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000975e:	83 ec 08             	sub    esp,0x8
c0009761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009764:	43                   	inc    ebx
c0009765:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c000976a:	e8 c1 fd ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000976f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009775:	75 ea                	jne    c0009761 <Virt::virtualMemorySetup()+0x9>
c0009777:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000977c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000977f:	43                   	inc    ebx
c0009780:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009785:	e8 a6 fd ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000978a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009790:	75 ea                	jne    c000977c <Virt::virtualMemorySetup()+0x24>
c0009792:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009797:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000979a:	43                   	inc    ebx
c000979b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c00097a0:	e8 8b fd ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097a5:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00097ab:	75 ea                	jne    c0009797 <Virt::virtualMemorySetup()+0x3f>
c00097ad:	83 c4 08             	add    esp,0x8
c00097b0:	5b                   	pop    ebx
c00097b1:	c3                   	ret    

c00097b2 <Virt::setupPageSwapping(int)>:
c00097b2:	53                   	push   ebx
c00097b3:	b9 06 fc 01 c0       	mov    ecx,0xc001fc06
c00097b8:	83 ec 18             	sub    esp,0x18
c00097bb:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c00097c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097c4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00097ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00097cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00097d0:	c1 e3 0b             	shl    ebx,0xb
c00097d3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00097d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00097da:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00097dd:	b2 43                	mov    dl,0x43
c00097df:	b9 08 00 00 00       	mov    ecx,0x8
c00097e4:	89 1d 30 1b 02 c0    	mov    DWORD PTR ds:0xc0021b30,ebx
c00097ea:	c1 eb 08             	shr    ebx,0x8
c00097ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097f0:	31 db                	xor    ebx,ebx
c00097f2:	88 15 38 1b 02 c0    	mov    BYTE PTR ds:0xc0021b38,dl
c00097f8:	89 0d 2c 1b 02 c0    	mov    DWORD PTR ds:0xc0021b2c,ecx
c00097fe:	a3 34 1b 02 c0       	mov    ds:0xc0021b34,eax
c0009803:	e8 5e e2 ff ff       	call   c0007a66 <malloc>
c0009808:	31 d2                	xor    edx,edx
c000980a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000980e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009813:	89 c1                	mov    ecx,eax
c0009815:	a1 30 1b 02 c0       	mov    eax,ds:0xc0021b30
c000981a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000981d:	f7 35 2c 1b 02 c0    	div    DWORD PTR ds:0xc0021b2c
c0009823:	c1 e8 05             	shr    eax,0x5
c0009826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982a:	e8 c1 6c ff ff       	call   c00004f0 <memset>
c000982f:	83 c4 18             	add    esp,0x18
c0009832:	5b                   	pop    ebx
c0009833:	c3                   	ret    

c0009834 <VAS::VAS(VAS*)>:
c0009834:	83 ec 1c             	sub    esp,0x1c
c0009837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000983b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009846:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000984d:	c7 04 24 a8 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa8
c0009854:	e8 dc 6e 00 00       	call   c0010735 <KePanic(char const*)>
c0009859:	90                   	nop
c000985a:	83 c4 1c             	add    esp,0x1c
c000985d:	c3                   	ret    

c000985e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000985e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009862:	89 c2                	mov    edx,eax
c0009864:	c1 ea 16             	shr    edx,0x16
c0009867:	c1 e8 0a             	shr    eax,0xa
c000986a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000986f:	19 c9                	sbb    ecx,ecx
c0009871:	25 fc 0f 00 00       	and    eax,0xffc
c0009876:	c1 e2 0c             	shl    edx,0xc
c0009879:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000987f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009886:	01 d0                	add    eax,edx
c0009888:	c3                   	ret    
c0009889:	90                   	nop

c000988a <VAS::getPageTableEntry(unsigned long)>:
c000988a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000988e:	89 ca                	mov    edx,ecx
c0009890:	c1 ea 16             	shr    edx,0x16
c0009893:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009899:	c1 e9 0a             	shr    ecx,0xa
c000989c:	c1 e0 0c             	shl    eax,0xc
c000989f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098a5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00098a8:	c3                   	ret    

c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00098a9:	57                   	push   edi
c00098aa:	56                   	push   esi
c00098ab:	53                   	push   ebx
c00098ac:	b3 01                	mov    bl,0x1
c00098ae:	83 ec 20             	sub    esp,0x20
c00098b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00098b5:	c1 ee 0c             	shr    esi,0xc
c00098b8:	eb 3f                	jmp    c00098f9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00098ba:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00098be:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00098c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00098c6:	e8 bf ff ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c00098cb:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00098d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00098d2:	f6 c4 04             	test   ah,0x4
c00098d5:	75 60                	jne    c0009937 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c00098d7:	80 fa 04             	cmp    dl,0x4
c00098da:	74 76                	je     c0009952 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c00098dc:	80 fa 02             	cmp    dl,0x2
c00098df:	0f 84 85 00 00 00    	je     c000996a <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c00098e5:	80 fa 03             	cmp    dl,0x3
c00098e8:	0f 84 a3 00 00 00    	je     c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c00098ee:	fe ca                	dec    dl
c00098f0:	0f 84 89 00 00 00    	je     c000997f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00098f6:	46                   	inc    esi
c00098f7:	31 db                	xor    ebx,ebx
c00098f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00098fc:	89 f7                	mov    edi,esi
c00098fe:	e8 66 fc ff ff       	call   c0009569 <Virt::getPageState(unsigned long)>
c0009903:	c1 e7 0c             	shl    edi,0xc
c0009906:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000990a:	84 c0                	test   al,al
c000990c:	75 ac                	jne    c00098ba <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c000990e:	c7 04 24 1d fc 01 c0 	mov    DWORD PTR [esp],0xc001fc1d
c0009915:	e8 1b 6e 00 00       	call   c0010735 <KePanic(char const*)>
c000991a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000991f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009923:	89 04 24             	mov    DWORD PTR [esp],eax
c0009926:	e8 5f ff ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c000992b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009930:	8b 00                	mov    eax,DWORD PTR [eax]
c0009932:	f6 c4 04             	test   ah,0x4
c0009935:	74 bf                	je     c00098f6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009937:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c000993b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009940:	89 04 24             	mov    DWORD PTR [esp],eax
c0009943:	e8 cc e3 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c0009948:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000994d:	80 fa 04             	cmp    dl,0x4
c0009950:	75 8a                	jne    c00098dc <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c0009952:	84 db                	test   bl,bl
c0009954:	75 3f                	jne    c0009995 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c0009956:	ba cc fa 01 c0       	mov    edx,0xc001facc
c000995b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000995f:	83 c4 20             	add    esp,0x20
c0009962:	5b                   	pop    ebx
c0009963:	5e                   	pop    esi
c0009964:	5f                   	pop    edi
c0009965:	e9 cb 6d 00 00       	jmp    c0010735 <KePanic(char const*)>
c000996a:	84 db                	test   bl,bl
c000996c:	75 11                	jne    c000997f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c000996e:	c7 04 24 39 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc39
c0009975:	e8 bb 6d 00 00       	call   c0010735 <KePanic(char const*)>
c000997a:	e9 77 ff ff ff       	jmp    c00098f6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c000997f:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009984:	89 34 24             	mov    DWORD PTR [esp],esi
c0009987:	e8 a4 fb ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000998c:	e9 65 ff ff ff       	jmp    c00098f6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009991:	84 db                	test   bl,bl
c0009993:	75 14                	jne    c00099a9 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009995:	89 34 24             	mov    DWORD PTR [esp],esi
c0009998:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c000999d:	e8 8e fb ff ff       	call   c0009530 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099a2:	83 c4 20             	add    esp,0x20
c00099a5:	5b                   	pop    ebx
c00099a6:	5e                   	pop    esi
c00099a7:	5f                   	pop    edi
c00099a8:	c3                   	ret    
c00099a9:	b8 55 fc 01 c0       	mov    eax,0xc001fc55
c00099ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b2:	83 c4 20             	add    esp,0x20
c00099b5:	5b                   	pop    ebx
c00099b6:	5e                   	pop    esi
c00099b7:	5f                   	pop    edi
c00099b8:	e9 78 6d 00 00       	jmp    c0010735 <KePanic(char const*)>
c00099bd:	90                   	nop

c00099be <VAS::freeAllocatedPages(unsigned long)>:
c00099be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099c6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00099ca:	74 09                	je     c00099d5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00099cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099d0:	e9 d4 fe ff ff       	jmp    c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00099d5:	b8 f0 fa 01 c0       	mov    eax,0xc001faf0
c00099da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099de:	e9 03 10 00 00       	jmp    c000a9e6 <Dbg::kprintf(char const*, ...)>
c00099e3:	90                   	nop

c00099e4 <VAS::virtualToPhysical(unsigned long)>:
c00099e4:	83 ec 08             	sub    esp,0x8
c00099e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099f6:	e8 8f fe ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c00099fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00099fd:	83 c4 08             	add    esp,0x8
c0009a00:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a05:	c3                   	ret    

c0009a06 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a06:	55                   	push   ebp
c0009a07:	57                   	push   edi
c0009a08:	56                   	push   esi
c0009a09:	53                   	push   ebx
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a11:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009a15:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009a19:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009a1d:	89 c3                	mov    ebx,eax
c0009a1f:	c1 e3 0c             	shl    ebx,0xc
c0009a22:	01 f3                	add    ebx,esi
c0009a24:	85 c0                	test   eax,eax
c0009a26:	7e 22                	jle    c0009a4a <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009a28:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009a2c:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009a35:	e8 50 fe ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c0009a3a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009a3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a40:	21 f9                	and    ecx,edi
c0009a42:	09 d1                	or     ecx,edx
c0009a44:	39 f3                	cmp    ebx,esi
c0009a46:	89 08                	mov    DWORD PTR [eax],ecx
c0009a48:	75 de                	jne    c0009a28 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009a4a:	83 c4 08             	add    esp,0x8
c0009a4d:	5b                   	pop    ebx
c0009a4e:	5e                   	pop    esi
c0009a4f:	5f                   	pop    edi
c0009a50:	5d                   	pop    ebp
c0009a51:	c3                   	ret    

c0009a52 <VAS::VAS()>:
c0009a52:	83 ec 14             	sub    esp,0x14
c0009a55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a6f:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a78:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a80:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009a83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a87:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009a8e:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009a93:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009a98:	29 c2                	sub    edx,eax
c0009a9a:	89 d0                	mov    eax,edx
c0009a9c:	05 ff 0f 00 00       	add    eax,0xfff
c0009aa1:	c1 e8 0c             	shr    eax,0xc
c0009aa4:	89 c2                	mov    edx,eax
c0009aa6:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aab:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009ab3:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009abb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009abf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ac3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009aca:	e8 37 ff ff ff       	call   c0009a06 <VAS::reflagRange(unsigned long, int, int, int)>
c0009acf:	90                   	nop
c0009ad0:	83 c4 14             	add    esp,0x14
c0009ad3:	c3                   	ret    

c0009ad4 <VAS::setToWriteCombining(unsigned long, int)>:
c0009ad4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ad9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009adf:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009ae6:	75 01                	jne    c0009ae9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009ae8:	c3                   	ret    
c0009ae9:	83 ec 14             	sub    esp,0x14
c0009aec:	b8 80 00 00 00       	mov    eax,0x80
c0009af1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009af9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009afe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b15:	e8 ec fe ff ff       	call   c0009a06 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b1a:	83 c4 14             	add    esp,0x14
c0009b1d:	c3                   	ret    

c0009b1e <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b22:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009b27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b2e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b31:	19 c0                	sbb    eax,eax
c0009b33:	83 ca 03             	or     edx,0x3
c0009b36:	83 e0 fc             	and    eax,0xfffffffc
c0009b39:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b40:	0f 20 d8             	mov    eax,cr3
c0009b43:	0f 22 d8             	mov    cr3,eax
c0009b46:	c3                   	ret    
c0009b47:	90                   	nop

c0009b48 <VAS::~VAS()>:
c0009b48:	83 ec 3c             	sub    esp,0x3c
c0009b4b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b53:	fa                   	cli    
c0009b54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b59:	40                   	inc    eax
c0009b5a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b5f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b69:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b6f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009b73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b77:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009b7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b82:	e8 97 ff ff ff       	call   c0009b1e <VAS::mapOtherVASIn(bool, VAS*)>
c0009b87:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b8f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009b97:	0f 8f d8 00 00 00    	jg     c0009c75 <VAS::~VAS()+0x12d>
c0009b9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ba1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ba4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009ba8:	c1 e2 02             	shl    edx,0x2
c0009bab:	01 d0                	add    eax,edx
c0009bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0009baf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb7:	83 e0 01             	and    eax,0x1
c0009bba:	0f 84 ac 00 00 00    	je     c0009c6c <VAS::~VAS()+0x124>
c0009bc0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc8:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009bd0:	7f 7a                	jg     c0009c4c <VAS::~VAS()+0x104>
c0009bd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009bd6:	c1 e0 0a             	shl    eax,0xa
c0009bd9:	89 c2                	mov    edx,eax
c0009bdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009bdf:	01 d0                	add    eax,edx
c0009be1:	c1 e0 0c             	shl    eax,0xc
c0009be4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009be8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf2:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c00:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0b:	e8 4e fc ff ff       	call   c000985e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c22:	25 01 04 00 00       	and    eax,0x401
c0009c27:	3d 01 04 00 00       	cmp    eax,0x401
c0009c2c:	75 15                	jne    c0009c43 <VAS::~VAS()+0xfb>
c0009c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c32:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c3a:	e8 d5 e0 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c0009c3f:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c43:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009c47:	e9 7c ff ff ff       	jmp    c0009bc8 <VAS::~VAS()+0x80>
c0009c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c50:	25 00 04 00 00       	and    eax,0x400
c0009c55:	74 15                	je     c0009c6c <VAS::~VAS()+0x124>
c0009c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c60:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c63:	e8 ac e0 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c0009c68:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c6c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009c70:	e9 1a ff ff ff       	jmp    c0009b8f <VAS::~VAS()+0x47>
c0009c75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c7f:	e8 25 fc ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c8e:	e8 81 e0 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c0009c93:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c97:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009c9c:	48                   	dec    eax
c0009c9d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009ca2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ca7:	85 c0                	test   eax,eax
c0009ca9:	75 01                	jne    c0009cac <VAS::~VAS()+0x164>
c0009cab:	fb                   	sti    
c0009cac:	90                   	nop
c0009cad:	83 c4 3c             	add    esp,0x3c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cb2:	83 ec 4c             	sub    esp,0x4c
c0009cb5:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009cb9:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009cbd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009cc1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc5:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009cc9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009ccd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009cd1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cd7:	77 0b                	ja     c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009cd9:	0f 20 d8             	mov    eax,cr3
c0009cdc:	0f 20 d8             	mov    eax,cr3
c0009cdf:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009ce2:	75 4f                	jne    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009ce4:	89 d8                	mov    eax,ebx
c0009ce6:	09 f8                	or     eax,edi
c0009ce8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ced:	75 5b                	jne    c0009d4a <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009cef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009cf2:	89 de                	mov    esi,ebx
c0009cf4:	c1 ee 16             	shr    esi,0x16
c0009cf7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009cfe:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d02:	74 54                	je     c0009d58 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009d04:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009d08:	c1 eb 0a             	shr    ebx,0xa
c0009d0b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d11:	c1 e6 0c             	shl    esi,0xc
c0009d14:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d1a:	09 c7                	or     edi,eax
c0009d1c:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d1f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009d23:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009d27:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009d2b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009d2f:	83 c4 4c             	add    esp,0x4c
c0009d32:	c3                   	ret    
c0009d33:	c7 04 24 14 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb14
c0009d3a:	e8 a7 0c 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0009d3f:	89 d8                	mov    eax,ebx
c0009d41:	09 f8                	or     eax,edi
c0009d43:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d48:	74 a5                	je     c0009cef <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009d4a:	c7 04 24 7c fb 01 c0 	mov    DWORD PTR [esp],0xc001fb7c
c0009d51:	e8 df 69 00 00       	call   c0010735 <KePanic(char const*)>
c0009d56:	eb 97                	jmp    c0009cef <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009d58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009d5c:	e8 1b e0 ff ff       	call   c0007d7c <Phys::allocatePage()>
c0009d61:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d67:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009d6e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d76:	e8 15 f8 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	b9 01 00 00 00       	mov    ecx,0x1
c0009d80:	ba 03 00 00 00       	mov    edx,0x3
c0009d85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009d89:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009d8d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009d91:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009d9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009da0:	e8 4d 02 00 00       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009da5:	89 c1                	mov    ecx,eax
c0009da7:	b8 00 10 00 00       	mov    eax,0x1000
c0009dac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009db0:	31 c0                	xor    eax,eax
c0009db2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009db9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009dbd:	e8 2e 67 ff ff       	call   c00004f0 <memset>
c0009dc2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dc6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dc9:	e8 db fa ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009dd2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009dd5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009dd9:	0d 07 04 00 00       	or     eax,0x407
c0009dde:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009de1:	e9 1e ff ff ff       	jmp    c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009de6 <VAS::allocatePages(int, int)>:
c0009de6:	55                   	push   ebp
c0009de7:	57                   	push   edi
c0009de8:	56                   	push   esi
c0009de9:	53                   	push   ebx
c0009dea:	83 ec 2c             	sub    esp,0x2c
c0009ded:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009df2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009df6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009dfc:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009e03:	24 01                	and    al,0x1
c0009e05:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e09:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009e0d:	0f 85 ce 00 00 00    	jne    c0009ee1 <VAS::allocatePages(int, int)+0xfb>
c0009e13:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009e16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e1a:	85 c0                	test   eax,eax
c0009e1c:	0f 84 a7 00 00 00    	je     c0009ec9 <VAS::allocatePages(int, int)+0xe3>
c0009e22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009e26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e2a:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009e2e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009e32:	c1 e6 0c             	shl    esi,0xc
c0009e35:	01 de                	add    esi,ebx
c0009e37:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009e3a:	81 cd 00 04 00 00    	or     ebp,0x400
c0009e40:	85 c0                	test   eax,eax
c0009e42:	7e 2d                	jle    c0009e71 <VAS::allocatePages(int, int)+0x8b>
c0009e44:	e8 33 df ff ff       	call   c0007d7c <Phys::allocatePage()>
c0009e49:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009e4d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009e54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e58:	e8 55 fe ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e5d:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009e62:	74 03                	je     c0009e67 <VAS::allocatePages(int, int)+0x81>
c0009e64:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e67:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e6d:	39 de                	cmp    esi,ebx
c0009e6f:	75 d3                	jne    c0009e44 <VAS::allocatePages(int, int)+0x5e>
c0009e71:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009e76:	75 12                	jne    c0009e8a <VAS::allocatePages(int, int)+0xa4>
c0009e78:	0f 20 d8             	mov    eax,cr3
c0009e7b:	0f 22 d8             	mov    cr3,eax
c0009e7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e82:	83 c4 2c             	add    esp,0x2c
c0009e85:	5b                   	pop    ebx
c0009e86:	5e                   	pop    esi
c0009e87:	5f                   	pop    edi
c0009e88:	5d                   	pop    ebp
c0009e89:	c3                   	ret    
c0009e8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e8e:	c1 ee 0a             	shr    esi,0xa
c0009e91:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e97:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009e9d:	c1 eb 0a             	shr    ebx,0xa
c0009ea0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ea6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009eac:	39 c3                	cmp    ebx,eax
c0009eae:	77 ce                	ja     c0009e7e <VAS::allocatePages(int, int)+0x98>
c0009eb0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009eb3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eb9:	39 d8                	cmp    eax,ebx
c0009ebb:	73 f3                	jae    c0009eb0 <VAS::allocatePages(int, int)+0xca>
c0009ebd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ec1:	83 c4 2c             	add    esp,0x2c
c0009ec4:	5b                   	pop    ebx
c0009ec5:	5e                   	pop    esi
c0009ec6:	5f                   	pop    edi
c0009ec7:	5d                   	pop    ebp
c0009ec8:	c3                   	ret    
c0009ec9:	c7 04 24 a0 fb 01 c0 	mov    DWORD PTR [esp],0xc001fba0
c0009ed0:	e8 60 68 00 00       	call   c0010735 <KePanic(char const*)>
c0009ed5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ed8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009edc:	e9 41 ff ff ff       	jmp    c0009e22 <VAS::allocatePages(int, int)+0x3c>
c0009ee1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ee8:	e8 a3 f6 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c0009eed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ef1:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ef6:	0f 87 a3 00 00 00    	ja     c0009f9f <VAS::allocatePages(int, int)+0x1b9>
c0009efc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f00:	85 d2                	test   edx,edx
c0009f02:	7e 44                	jle    c0009f48 <VAS::allocatePages(int, int)+0x162>
c0009f04:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009f08:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009f0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f10:	c1 e5 0c             	shl    ebp,0xc
c0009f13:	81 ce 00 04 00 00    	or     esi,0x400
c0009f19:	01 dd                	add    ebp,ebx
c0009f1b:	e8 5c de ff ff       	call   c0007d7c <Phys::allocatePage()>
c0009f20:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009f28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009f2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f2f:	e8 7e fd ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f34:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f39:	74 03                	je     c0009f3e <VAS::allocatePages(int, int)+0x158>
c0009f3b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f3e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f44:	39 dd                	cmp    ebp,ebx
c0009f46:	75 d3                	jne    c0009f1b <VAS::allocatePages(int, int)+0x135>
c0009f48:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f4d:	0f 84 25 ff ff ff    	je     c0009e78 <VAS::allocatePages(int, int)+0x92>
c0009f53:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f5b:	c1 e0 0c             	shl    eax,0xc
c0009f5e:	01 d0                	add    eax,edx
c0009f60:	89 d3                	mov    ebx,edx
c0009f62:	c1 eb 0a             	shr    ebx,0xa
c0009f65:	c1 e8 0a             	shr    eax,0xa
c0009f68:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f73:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f79:	2d 00 00 40 00       	sub    eax,0x400000
c0009f7e:	39 c3                	cmp    ebx,eax
c0009f80:	0f 87 f8 fe ff ff    	ja     c0009e7e <VAS::allocatePages(int, int)+0x98>
c0009f86:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f89:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f8f:	39 d8                	cmp    eax,ebx
c0009f91:	73 f3                	jae    c0009f86 <VAS::allocatePages(int, int)+0x1a0>
c0009f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f97:	83 c4 2c             	add    esp,0x2c
c0009f9a:	5b                   	pop    ebx
c0009f9b:	5e                   	pop    esi
c0009f9c:	5f                   	pop    edi
c0009f9d:	5d                   	pop    ebp
c0009f9e:	c3                   	ret    
c0009f9f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009faa:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fb1:	0f 84 45 ff ff ff    	je     c0009efc <VAS::allocatePages(int, int)+0x116>
c0009fb7:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c0009fbf:	e9 38 ff ff ff       	jmp    c0009efc <VAS::allocatePages(int, int)+0x116>

c0009fc4 <VAS::setCPUSpecific(unsigned long)>:
c0009fc4:	83 ec 1c             	sub    esp,0x1c
c0009fc7:	b8 05 00 00 00       	mov    eax,0x5
c0009fcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fd4:	ba 00 00 40 c2       	mov    edx,0xc2400000
c0009fd9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fe5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe8:	e8 c5 fc ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fed:	83 c4 1c             	add    esp,0x1c
c0009ff0:	c3                   	ret    
c0009ff1:	90                   	nop

c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ff2:	55                   	push   ebp
c0009ff3:	57                   	push   edi
c0009ff4:	56                   	push   esi
c0009ff5:	53                   	push   ebx
c0009ff6:	83 ec 2c             	sub    esp,0x2c
c0009ff9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ffe:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000a002:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000a006:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000a00a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a010:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a017:	24 01                	and    al,0x1
c000a019:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a01d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a021:	85 c0                	test   eax,eax
c000a023:	7e 41                	jle    c000a066 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a025:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a029:	89 f3                	mov    ebx,esi
c000a02b:	c1 e0 0c             	shl    eax,0xc
c000a02e:	01 f0                	add    eax,esi
c000a030:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a034:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a038:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a03c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a040:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a043:	29 f0                	sub    eax,esi
c000a045:	01 d8                	add    eax,ebx
c000a047:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a04b:	e8 62 fc ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a050:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a055:	74 03                	je     c000a05a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a057:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a060:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a064:	75 ce                	jne    c000a034 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a066:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a06b:	75 10                	jne    c000a07d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a06d:	0f 20 d8             	mov    eax,cr3
c000a070:	0f 22 d8             	mov    cr3,eax
c000a073:	83 c4 2c             	add    esp,0x2c
c000a076:	89 f0                	mov    eax,esi
c000a078:	5b                   	pop    ebx
c000a079:	5e                   	pop    esi
c000a07a:	5f                   	pop    edi
c000a07b:	5d                   	pop    ebp
c000a07c:	c3                   	ret    
c000a07d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a081:	89 f3                	mov    ebx,esi
c000a083:	c1 eb 0a             	shr    ebx,0xa
c000a086:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a08c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a092:	c1 e0 0c             	shl    eax,0xc
c000a095:	01 f0                	add    eax,esi
c000a097:	c1 e8 0a             	shr    eax,0xa
c000a09a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a09f:	2d 00 00 40 00       	sub    eax,0x400000
c000a0a4:	39 c3                	cmp    ebx,eax
c000a0a6:	77 cb                	ja     c000a073 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a0a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b1:	39 d8                	cmp    eax,ebx
c000a0b3:	73 f3                	jae    c000a0a8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a0b5:	83 c4 2c             	add    esp,0x2c
c000a0b8:	89 f0                	mov    eax,esi
c000a0ba:	5b                   	pop    ebx
c000a0bb:	5e                   	pop    esi
c000a0bc:	5f                   	pop    edi
c000a0bd:	5d                   	pop    ebp
c000a0be:	c3                   	ret    
c000a0bf:	90                   	nop

c000a0c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c0:	83 ec 4c             	sub    esp,0x4c
c000a0c3:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a0c7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a0cb:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a0cf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a0d3:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a0d7:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a0db:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a0df:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a0e4:	09 d8                	or     eax,ebx
c000a0e6:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0eb:	75 52                	jne    c000a13f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a0ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f0:	89 de                	mov    esi,ebx
c000a0f2:	c1 ee 16             	shr    esi,0x16
c000a0f5:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a0fc:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a100:	74 54                	je     c000a156 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a102:	c1 eb 0a             	shr    ebx,0xa
c000a105:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a109:	80 fa 01             	cmp    dl,0x1
c000a10c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a110:	19 c0                	sbb    eax,eax
c000a112:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a118:	c1 e6 0c             	shl    esi,0xc
c000a11b:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a120:	01 f3                	add    ebx,esi
c000a122:	09 ca                	or     edx,ecx
c000a124:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a12f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a133:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a137:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a13b:	83 c4 4c             	add    esp,0x4c
c000a13e:	c3                   	ret    
c000a13f:	c7 04 24 cc fb 01 c0 	mov    DWORD PTR [esp],0xc001fbcc
c000a146:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a14a:	e8 e6 65 00 00       	call   c0010735 <KePanic(char const*)>
c000a14f:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a154:	eb 97                	jmp    c000a0ed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a156:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a15a:	e8 1d dc ff ff       	call   c0007d7c <Phys::allocatePage()>
c000a15f:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a165:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a16c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a170:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a174:	e8 17 f4 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000a179:	b9 01 00 00 00       	mov    ecx,0x1
c000a17e:	ba 03 00 00 00       	mov    edx,0x3
c000a183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a187:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a18b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a18f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a192:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a196:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a19a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a19e:	e8 4f fe ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1a3:	89 c1                	mov    ecx,eax
c000a1a5:	b8 00 10 00 00       	mov    eax,0x1000
c000a1aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1ae:	31 c0                	xor    eax,eax
c000a1b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a1b7:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a1bb:	e8 30 63 ff ff       	call   c00004f0 <memset>
c000a1c0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a1c4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1c7:	e8 dd f6 ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a1d3:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a1d8:	81 c9 07 04 00 00    	or     ecx,0x407
c000a1de:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a1e1:	e9 1c ff ff ff       	jmp    c000a102 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a1e6 <VAS::VAS(bool)>:
c000a1e6:	53                   	push   ebx
c000a1e7:	83 ec 48             	sub    esp,0x48
c000a1ea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a1ee:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a1f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a1f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a201:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a208:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a20c:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a211:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a214:	e8 63 db ff ff       	call   c0007d7c <Phys::allocatePage()>
c000a219:	89 c2                	mov    edx,eax
c000a21b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a21f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a222:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a228:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a22f:	e8 5c f3 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000a234:	89 c2                	mov    edx,eax
c000a236:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a23a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23d:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a245:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a24d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a251:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a255:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a258:	e8 95 fd ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a25d:	89 c2                	mov    edx,eax
c000a25f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a263:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a266:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a26e:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a276:	7f 1c                	jg     c000a294 <VAS::VAS(bool)+0xae>
c000a278:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a27f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a283:	c1 e2 02             	shl    edx,0x2
c000a286:	01 d0                	add    eax,edx
c000a288:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a28e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a292:	eb da                	jmp    c000a26e <VAS::VAS(bool)+0x88>
c000a294:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a29c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a2a4:	7f 75                	jg     c000a31b <VAS::VAS(bool)+0x135>
c000a2a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a2aa:	2d 00 02 00 00       	sub    eax,0x200
c000a2af:	c1 e0 0c             	shl    eax,0xc
c000a2b2:	83 c8 05             	or     eax,0x5
c000a2b5:	89 c2                	mov    edx,eax
c000a2b7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2c2:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a2c9:	24 10                	and    al,0x10
c000a2cb:	74 07                	je     c000a2d4 <VAS::VAS(bool)+0xee>
c000a2cd:	b8 00 01 00 00       	mov    eax,0x100
c000a2d2:	eb 05                	jmp    c000a2d9 <VAS::VAS(bool)+0xf3>
c000a2d4:	b8 00 00 00 00       	mov    eax,0x0
c000a2d9:	09 d0                	or     eax,edx
c000a2db:	89 c1                	mov    ecx,eax
c000a2dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2e4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2e8:	c1 e2 02             	shl    edx,0x2
c000a2eb:	01 d0                	add    eax,edx
c000a2ed:	89 ca                	mov    edx,ecx
c000a2ef:	89 10                	mov    DWORD PTR [eax],edx
c000a2f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a2f5:	2d 40 03 00 00       	sub    eax,0x340
c000a2fa:	83 f8 7f             	cmp    eax,0x7f
c000a2fd:	77 16                	ja     c000a315 <VAS::VAS(bool)+0x12f>
c000a2ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a303:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a306:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a30a:	c1 e2 02             	shl    edx,0x2
c000a30d:	01 d0                	add    eax,edx
c000a30f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a315:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a319:	eb 81                	jmp    c000a29c <VAS::VAS(bool)+0xb6>
c000a31b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a320:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a326:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a32d:	24 10                	and    al,0x10
c000a32f:	74 07                	je     c000a338 <VAS::VAS(bool)+0x152>
c000a331:	b8 03 41 00 00       	mov    eax,0x4103
c000a336:	eb 05                	jmp    c000a33d <VAS::VAS(bool)+0x157>
c000a338:	b8 03 40 00 00       	mov    eax,0x4003
c000a33d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a341:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a344:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a34a:	89 02                	mov    DWORD PTR [edx],eax
c000a34c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a351:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a357:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a361:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a365:	89 04 24             	mov    DWORD PTR [esp],eax
c000a368:	e8 57 fc ff ff       	call   c0009fc4 <VAS::setCPUSpecific(unsigned long)>
c000a36d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a371:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a374:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a379:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37f:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a386:	24 10                	and    al,0x10
c000a388:	74 07                	je     c000a391 <VAS::VAS(bool)+0x1ab>
c000a38a:	b8 00 01 00 00       	mov    eax,0x100
c000a38f:	eb 05                	jmp    c000a396 <VAS::VAS(bool)+0x1b0>
c000a391:	b8 00 00 00 00       	mov    eax,0x0
c000a396:	09 c2                	or     edx,eax
c000a398:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a39c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a39f:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a4:	83 ca 03             	or     edx,0x3
c000a3a7:	89 10                	mov    DWORD PTR [eax],edx
c000a3a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b7:	e8 e8 1c 00 00       	call   c000c0a4 <Device::getName()>
c000a3bc:	c7 44 24 04 6f fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fc6f
c000a3c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c7:	e8 e4 63 ff ff       	call   c00007b0 <strcmp>
c000a3cc:	85 c0                	test   eax,eax
c000a3ce:	0f 94 c0             	sete   al
c000a3d1:	84 c0                	test   al,al
c000a3d3:	0f 84 8b 00 00 00    	je     c000a464 <VAS::VAS(bool)+0x27e>
c000a3d9:	fa                   	cli    
c000a3da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3df:	40                   	inc    eax
c000a3e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3e5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f0:	05 7c 09 00 00       	add    eax,0x97c
c000a3f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f8:	e8 45 d1 ff ff       	call   c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a402:	89 c3                	mov    ebx,eax
c000a404:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a409:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a40f:	05 7c 09 00 00       	add    eax,0x97c
c000a414:	89 04 24             	mov    DWORD PTR [esp],eax
c000a417:	e8 26 d1 ff ff       	call   c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a41c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a420:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a424:	89 04 24             	mov    DWORD PTR [esp],eax
c000a427:	e8 5e f4 ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c000a42c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a42e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a433:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a43b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a43f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a443:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a447:	89 04 24             	mov    DWORD PTR [esp],eax
c000a44a:	e8 63 f8 ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a44f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a454:	48                   	dec    eax
c000a455:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a45a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45f:	85 c0                	test   eax,eax
c000a461:	75 01                	jne    c000a464 <VAS::VAS(bool)+0x27e>
c000a463:	fb                   	sti    
c000a464:	90                   	nop
c000a465:	83 c4 48             	add    esp,0x48
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    

c000a46a <VAS::evict(unsigned long)>:
c000a46a:	55                   	push   ebp
c000a46b:	57                   	push   edi
c000a46c:	56                   	push   esi
c000a46d:	53                   	push   ebx
c000a46e:	83 ec 3c             	sub    esp,0x3c
c000a471:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a475:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a479:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a47d:	e8 5d f2 ff ff       	call   c00096df <Virt::allocateSwapfilePage()>
c000a482:	8b 1d 2c 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b2c
c000a488:	85 db                	test   ebx,ebx
c000a48a:	89 c7                	mov    edi,eax
c000a48c:	7e 4a                	jle    c000a4d8 <VAS::evict(unsigned long)+0x6e>
c000a48e:	89 ee                	mov    esi,ebp
c000a490:	31 db                	xor    ebx,ebx
c000a492:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a495:	e8 2f f2 ff ff       	call   c00096c9 <Virt::swapIDToSector(unsigned long)>
c000a49a:	31 c9                	xor    ecx,ecx
c000a49c:	ba 01 00 00 00       	mov    edx,0x1
c000a4a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a4a5:	81 c6 00 02 00 00    	add    esi,0x200
c000a4ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a4b3:	01 d8                	add    eax,ebx
c000a4b5:	43                   	inc    ebx
c000a4b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4ba:	0f be 05 38 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021b38
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4cb:	e8 b4 2c 00 00       	call   c000d184 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4d0:	39 1d 2c 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b2c,ebx
c000a4d6:	7f ba                	jg     c000a492 <VAS::evict(unsigned long)+0x28>
c000a4d8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a4dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a4e0:	c1 e7 0b             	shl    edi,0xb
c000a4e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4e6:	e8 9f f3 ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c000a4eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ed:	89 d1                	mov    ecx,edx
c000a4ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4f5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4fb:	09 cf                	or     edi,ecx
c000a4fd:	89 38                	mov    DWORD PTR [eax],edi
c000a4ff:	89 14 24             	mov    DWORD PTR [esp],edx
c000a502:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a508:	e8 07 d8 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c000a50d:	0f 20 d8             	mov    eax,cr3
c000a510:	0f 22 d8             	mov    cr3,eax
c000a513:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a518:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a51c:	8d 50 01             	lea    edx,[eax+0x1]
c000a51f:	b8 7d fc 01 c0       	mov    eax,0xc001fc7d
c000a524:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a52a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a52e:	83 c4 3c             	add    esp,0x3c
c000a531:	5b                   	pop    ebx
c000a532:	5e                   	pop    esi
c000a533:	5f                   	pop    edi
c000a534:	5d                   	pop    ebp
c000a535:	e9 ac 04 00 00       	jmp    c000a9e6 <Dbg::kprintf(char const*, ...)>

c000a53a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a53a:	83 ec 4c             	sub    esp,0x4c
c000a53d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a541:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a545:	c7 04 24 8e fc 01 c0 	mov    DWORD PTR [esp],0xc001fc8e
c000a54c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a550:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a554:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a558:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a55e:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a562:	e8 7f 04 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a567:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a56b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a56f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a572:	e8 13 f3 ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c000a577:	85 c0                	test   eax,eax
c000a579:	89 c6                	mov    esi,eax
c000a57b:	0f 95 c2             	setne  dl
c000a57e:	85 db                	test   ebx,ebx
c000a580:	0f 95 c0             	setne  al
c000a583:	20 c2                	and    dl,al
c000a585:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a589:	75 19                	jne    c000a5a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a58b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a590:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a594:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a598:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a59c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a5a0:	83 c4 4c             	add    esp,0x4c
c000a5a3:	c3                   	ret    
c000a5a4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a5a6:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a5ac:	74 07                	je     c000a5b5 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a5ae:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a5b3:	eb d6                	jmp    c000a58b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a5b5:	e8 c2 d7 ff ff       	call   c0007d7c <Phys::allocatePage()>
c000a5ba:	8b 16                	mov    edx,DWORD PTR [esi]
c000a5bc:	c1 ed 0b             	shr    ebp,0xb
c000a5bf:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5c5:	09 c2                	or     edx,eax
c000a5c7:	81 ca 01 08 00 00    	or     edx,0x801
c000a5cd:	89 16                	mov    DWORD PTR [esi],edx
c000a5cf:	8b 35 2c 1b 02 c0    	mov    esi,DWORD PTR ds:0xc0021b2c
c000a5d5:	85 f6                	test   esi,esi
c000a5d7:	7e 4a                	jle    c000a623 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a5d9:	89 df                	mov    edi,ebx
c000a5db:	31 f6                	xor    esi,esi
c000a5dd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a5e0:	e8 e4 f0 ff ff       	call   c00096c9 <Virt::swapIDToSector(unsigned long)>
c000a5e5:	31 c9                	xor    ecx,ecx
c000a5e7:	ba 01 00 00 00       	mov    edx,0x1
c000a5ec:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a5f0:	81 c7 00 02 00 00    	add    edi,0x200
c000a5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5fa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a5fe:	01 f0                	add    eax,esi
c000a600:	46                   	inc    esi
c000a601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a605:	0f be 05 38 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021b38
c000a60c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a613:	89 04 24             	mov    DWORD PTR [esp],eax
c000a616:	e8 fd 2a 00 00       	call   c000d118 <LogicalDisk::read(unsigned long long, int, void*)>
c000a61b:	39 35 2c 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b2c,esi
c000a621:	7f ba                	jg     c000a5dd <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a623:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a627:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a62c:	c7 04 24 a1 fc 01 c0 	mov    DWORD PTR [esp],0xc001fca1
c000a633:	48                   	dec    eax
c000a634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a638:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a63d:	e8 a4 03 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a642:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a645:	e8 61 f0 ff ff       	call   c00096ab <Virt::freeSwapfilePage(unsigned long)>
c000a64a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a64f:	48                   	dec    eax
c000a650:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a655:	75 01                	jne    c000a658 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a657:	fb                   	sti    
c000a658:	0f 20 d8             	mov    eax,cr3
c000a65b:	0f 22 d8             	mov    cr3,eax
c000a65e:	e9 28 ff ff ff       	jmp    c000a58b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a663:	90                   	nop

c000a664 <VAS::scanForEviction()>:
c000a664:	57                   	push   edi
c000a665:	31 ff                	xor    edi,edi
c000a667:	56                   	push   esi
c000a668:	53                   	push   ebx
c000a669:	83 ec 20             	sub    esp,0x20
c000a66c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a670:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a673:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a679:	75 0e                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a67b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a67e:	89 da                	mov    edx,ebx
c000a680:	c1 ea 16             	shr    edx,0x16
c000a683:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a687:	74 51                	je     c000a6da <VAS::scanForEviction()+0x76>
c000a689:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a68d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a690:	e8 f5 f1 ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c000a695:	8b 10                	mov    edx,DWORD PTR [eax]
c000a697:	89 d1                	mov    ecx,edx
c000a699:	81 e1 01 08 00 00    	and    ecx,0x801
c000a69f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6a5:	74 3e                	je     c000a6e5 <VAS::scanForEviction()+0x81>
c000a6a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6ad:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6b3:	76 2b                	jbe    c000a6e0 <VAS::scanForEviction()+0x7c>
c000a6b5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6bc:	47                   	inc    edi
c000a6bd:	83 ff 03             	cmp    edi,0x3
c000a6c0:	74 32                	je     c000a6f4 <VAS::scanForEviction()+0x90>
c000a6c2:	31 db                	xor    ebx,ebx
c000a6c4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6ca:	75 bd                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a6cc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6cf:	89 da                	mov    edx,ebx
c000a6d1:	c1 ea 16             	shr    edx,0x16
c000a6d4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6d8:	75 af                	jne    c000a689 <VAS::scanForEviction()+0x25>
c000a6da:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6e0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6e3:	eb 8e                	jmp    c000a673 <VAS::scanForEviction()+0xf>
c000a6e5:	f6 c2 20             	test   dl,0x20
c000a6e8:	74 13                	je     c000a6fd <VAS::scanForEviction()+0x99>
c000a6ea:	83 e2 df             	and    edx,0xffffffdf
c000a6ed:	89 10                	mov    DWORD PTR [eax],edx
c000a6ef:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6f2:	eb b3                	jmp    c000a6a7 <VAS::scanForEviction()+0x43>
c000a6f4:	83 c4 20             	add    esp,0x20
c000a6f7:	31 c0                	xor    eax,eax
c000a6f9:	5b                   	pop    ebx
c000a6fa:	5e                   	pop    esi
c000a6fb:	5f                   	pop    edi
c000a6fc:	c3                   	ret    
c000a6fd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a701:	89 d0                	mov    eax,edx
c000a703:	c7 04 24 b6 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcb6
c000a70a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a70f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a713:	e8 ce 02 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a718:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a71b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a71e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a722:	e8 43 fd ff ff       	call   c000a46a <VAS::evict(unsigned long)>
c000a727:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a72a:	c7 04 24 ca fc 01 c0 	mov    DWORD PTR [esp],0xc001fcca
c000a731:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a735:	e8 ac 02 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a73a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a73e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a745:	83 c4 20             	add    esp,0x20
c000a748:	5b                   	pop    ebx
c000a749:	5e                   	pop    esi
c000a74a:	5f                   	pop    edi
c000a74b:	c3                   	ret    

c000a74c <mapVASFirstTime>:
c000a74c:	55                   	push   ebp
c000a74d:	57                   	push   edi
c000a74e:	56                   	push   esi
c000a74f:	53                   	push   ebx
c000a750:	83 ec 2c             	sub    esp,0x2c
c000a753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a758:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a75b:	4a                   	dec    edx
c000a75c:	0f 84 06 01 00 00    	je     c000a868 <mapVASFirstTime+0x11c>
c000a762:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a765:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a76a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a76f:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a772:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a778:	c1 e5 15             	shl    ebp,0x15
c000a77b:	29 eb                	sub    ebx,ebp
c000a77d:	29 ef                	sub    edi,ebp
c000a77f:	e8 f8 d5 ff ff       	call   c0007d7c <Phys::allocatePage()>
c000a784:	b9 03 04 00 00       	mov    ecx,0x403
c000a789:	ba 01 00 00 00       	mov    edx,0x1
c000a78e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a792:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a798:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a79c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7a0:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7a7:	e8 46 f8 ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7ac:	39 fb                	cmp    ebx,edi
c000a7ae:	75 cf                	jne    c000a77f <mapVASFirstTime+0x33>
c000a7b0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7b5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7ba:	29 eb                	sub    ebx,ebp
c000a7bc:	29 ef                	sub    edi,ebp
c000a7be:	e8 b9 d5 ff ff       	call   c0007d7c <Phys::allocatePage()>
c000a7c3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a7c7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a7cb:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7ce:	19 d2                	sbb    edx,edx
c000a7d0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7d6:	83 e2 04             	and    edx,0x4
c000a7d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7dd:	81 c2 03 04 00 00    	add    edx,0x403
c000a7e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a7e7:	ba 01 00 00 00       	mov    edx,0x1
c000a7ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7f0:	e8 fd f7 ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7f5:	39 df                	cmp    edi,ebx
c000a7f7:	75 c5                	jne    c000a7be <mapVASFirstTime+0x72>
c000a7f9:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a803:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a809:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a80e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a812:	c1 eb 0c             	shr    ebx,0xc
c000a815:	b8 04 00 00 00       	mov    eax,0x4
c000a81a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a81e:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a823:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a828:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a82c:	89 34 24             	mov    DWORD PTR [esp],esi
c000a82f:	be 04 00 00 00       	mov    esi,0x4
c000a834:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a838:	e8 c9 f1 ff ff       	call   c0009a06 <VAS::reflagRange(unsigned long, int, int, int)>
c000a83d:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a842:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a846:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a84a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a84e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a852:	89 04 24             	mov    DWORD PTR [esp],eax
c000a855:	e8 ac f1 ff ff       	call   c0009a06 <VAS::reflagRange(unsigned long, int, int, int)>
c000a85a:	0f 20 d8             	mov    eax,cr3
c000a85d:	0f 22 d8             	mov    cr3,eax
c000a860:	83 c4 2c             	add    esp,0x2c
c000a863:	5b                   	pop    ebx
c000a864:	5e                   	pop    esi
c000a865:	5f                   	pop    edi
c000a866:	5d                   	pop    ebp
c000a867:	c3                   	ret    
c000a868:	c7 04 24 dd fc 01 c0 	mov    DWORD PTR [esp],0xc001fcdd
c000a86f:	e8 72 01 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a874:	83 c4 2c             	add    esp,0x2c
c000a877:	5b                   	pop    ebx
c000a878:	5e                   	pop    esi
c000a879:	5f                   	pop    edi
c000a87a:	5d                   	pop    ebp
c000a87b:	c3                   	ret    

c000a87c <__cxa_atexit>:
c000a87c:	31 c0                	xor    eax,eax
c000a87e:	c3                   	ret    

c000a87f <__cxa_finalize>:
c000a87f:	c3                   	ret    

c000a880 <__stack_chk_fail>:
c000a880:	55                   	push   ebp
c000a881:	89 e5                	mov    ebp,esp
c000a883:	83 ec 10             	sub    esp,0x10
c000a886:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a889:	68 f6 fc 01 c0       	push   0xc001fcf6
c000a88e:	e8 53 01 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a893:	58                   	pop    eax
c000a894:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a897:	5a                   	pop    edx
c000a898:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a89b:	68 f6 fc 01 c0       	push   0xc001fcf6
c000a8a0:	e8 41 01 00 00       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000a8a5:	c7 04 24 fe fc 01 c0 	mov    DWORD PTR [esp],0xc001fcfe
c000a8ac:	e8 84 5e 00 00       	call   c0010735 <KePanic(char const*)>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	c9                   	leave  
c000a8b5:	c3                   	ret    

c000a8b6 <__cxa_pure_virtual>:
c000a8b6:	83 ec 18             	sub    esp,0x18
c000a8b9:	68 16 fd 01 c0       	push   0xc001fd16
c000a8be:	e8 72 5e 00 00       	call   c0010735 <KePanic(char const*)>
c000a8c3:	83 c4 1c             	add    esp,0x1c
c000a8c6:	c3                   	ret    

c000a8c7 <operator new[](unsigned long)>:
c000a8c7:	e9 9a d1 ff ff       	jmp    c0007a66 <malloc>

c000a8cc <operator delete(void*, unsigned long)>:
c000a8cc:	e9 bb d1 ff ff       	jmp    c0007a8c <rfree>

c000a8d1 <operator delete[](void*)>:
c000a8d1:	e9 b6 d1 ff ff       	jmp    c0007a8c <rfree>

c000a8d6 <operator delete[](void*, unsigned long)>:
c000a8d6:	e9 b1 d1 ff ff       	jmp    c0007a8c <rfree>

c000a8db <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8db:	55                   	push   ebp
c000a8dc:	b8 30 31 32 33       	mov    eax,0x33323130
c000a8e1:	57                   	push   edi
c000a8e2:	ba 34 35 36 37       	mov    edx,0x37363534
c000a8e7:	56                   	push   esi
c000a8e8:	bf 43 44 45 46       	mov    edi,0x46454443
c000a8ed:	53                   	push   ebx
c000a8ee:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a8f3:	83 ec 20             	sub    esp,0x20
c000a8f6:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a8fa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a8fe:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a902:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a906:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a90a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a90e:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a912:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a917:	89 f7                	mov    edi,esi
c000a919:	89 eb                	mov    ebx,ebp
c000a91b:	eb 02                	jmp    c000a91f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a91d:	89 c7                	mov    edi,eax
c000a91f:	31 d2                	xor    edx,edx
c000a921:	89 f8                	mov    eax,edi
c000a923:	f7 f1                	div    ecx
c000a925:	43                   	inc    ebx
c000a926:	39 cf                	cmp    edi,ecx
c000a928:	73 f3                	jae    c000a91d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a92a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a92d:	eb 02                	jmp    c000a931 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a92f:	89 c6                	mov    esi,eax
c000a931:	31 d2                	xor    edx,edx
c000a933:	89 f0                	mov    eax,esi
c000a935:	f7 f1                	div    ecx
c000a937:	4b                   	dec    ebx
c000a938:	39 ce                	cmp    esi,ecx
c000a93a:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a93f:	88 13                	mov    BYTE PTR [ebx],dl
c000a941:	73 ec                	jae    c000a92f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a943:	83 c4 20             	add    esp,0x20
c000a946:	89 e8                	mov    eax,ebp
c000a948:	5b                   	pop    ebx
c000a949:	5e                   	pop    esi
c000a94a:	5f                   	pop    edi
c000a94b:	5d                   	pop    ebp
c000a94c:	c3                   	ret    

c000a94d <Dbg::logc(char)>:
c000a94d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a954:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a958:	75 12                	jne    c000a96c <Dbg::logc(char)+0x1f>
c000a95a:	ba fd 03 00 00       	mov    edx,0x3fd
c000a95f:	ec                   	in     al,dx
c000a960:	24 20                	and    al,0x20
c000a962:	74 fb                	je     c000a95f <Dbg::logc(char)+0x12>
c000a964:	ba f8 03 00 00       	mov    edx,0x3f8
c000a969:	88 c8                	mov    al,cl
c000a96b:	ee                   	out    dx,al
c000a96c:	c3                   	ret    

c000a96d <Dbg::logs(char*)>:
c000a96d:	53                   	push   ebx
c000a96e:	83 ec 04             	sub    esp,0x4
c000a971:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a975:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a978:	84 c0                	test   al,al
c000a97a:	74 10                	je     c000a98c <Dbg::logs(char*)+0x1f>
c000a97c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97f:	43                   	inc    ebx
c000a980:	e8 c8 ff ff ff       	call   c000a94d <Dbg::logc(char)>
c000a985:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a988:	84 c0                	test   al,al
c000a98a:	75 f0                	jne    c000a97c <Dbg::logs(char*)+0xf>
c000a98c:	58                   	pop    eax
c000a98d:	5b                   	pop    ebx
c000a98e:	c3                   	ret    

c000a98f <Dbg::logWriteInt(unsigned int)>:
c000a98f:	83 ec 1c             	sub    esp,0x1c
c000a992:	b8 0a 00 00 00       	mov    eax,0xa
c000a997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a99b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a99f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9aa:	e8 2c ff ff ff       	call   c000a8db <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9af:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b2:	e8 b6 ff ff ff       	call   c000a96d <Dbg::logs(char*)>
c000a9b7:	83 c4 1c             	add    esp,0x1c
c000a9ba:	c3                   	ret    

c000a9bb <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9bb:	83 ec 1c             	sub    esp,0x1c
c000a9be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9c6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a9ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d5:	e8 01 ff ff ff       	call   c000a8db <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9dd:	e8 8b ff ff ff       	call   c000a96d <Dbg::logs(char*)>
c000a9e2:	83 c4 1c             	add    esp,0x1c
c000a9e5:	c3                   	ret    

c000a9e6 <Dbg::kprintf(char const*, ...)>:
c000a9e6:	55                   	push   ebp
c000a9e7:	57                   	push   edi
c000a9e8:	56                   	push   esi
c000a9e9:	53                   	push   ebx
c000a9ea:	83 ec 14             	sub    esp,0x14
c000a9ed:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9f4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000a9f8:	74 08                	je     c000aa02 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9fa:	83 c4 14             	add    esp,0x14
c000a9fd:	5b                   	pop    ebx
c000a9fe:	5e                   	pop    esi
c000a9ff:	5f                   	pop    edi
c000aa00:	5d                   	pop    ebp
c000aa01:	c3                   	ret    
c000aa02:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000aa06:	31 db                	xor    ebx,ebx
c000aa08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa0c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa0f:	84 c0                	test   al,al
c000aa11:	74 e7                	je     c000a9fa <Dbg::kprintf(char const*, ...)+0x14>
c000aa13:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa16:	3c 25                	cmp    al,0x25
c000aa18:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aa1b:	75 46                	jne    c000aa63 <Dbg::kprintf(char const*, ...)+0x7d>
c000aa1d:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aa20:	83 c3 02             	add    ebx,0x2
c000aa23:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aa26:	2c 25                	sub    al,0x25
c000aa28:	3c 53                	cmp    al,0x53
c000aa2a:	0f 87 e8 00 00 00    	ja     c000ab18 <Dbg::kprintf(char const*, ...)+0x132>
c000aa30:	0f b6 c0             	movzx  eax,al
c000aa33:	ff 24 85 2c fd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe02d4]
c000aa3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aa3e:	89 c8                	mov    eax,ecx
c000aa40:	83 c1 04             	add    ecx,0x4
c000aa43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa4c:	e8 3e ff ff ff       	call   c000a98f <Dbg::logWriteInt(unsigned int)>
c000aa51:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa55:	84 c0                	test   al,al
c000aa57:	74 a1                	je     c000a9fa <Dbg::kprintf(char const*, ...)+0x14>
c000aa59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa5c:	3c 25                	cmp    al,0x25
c000aa5e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aa61:	74 ba                	je     c000aa1d <Dbg::kprintf(char const*, ...)+0x37>
c000aa63:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa66:	89 eb                	mov    ebx,ebp
c000aa68:	89 fd                	mov    ebp,edi
c000aa6a:	e8 de fe ff ff       	call   c000a94d <Dbg::logc(char)>
c000aa6f:	eb e0                	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000aa71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aa75:	89 c8                	mov    eax,ecx
c000aa77:	83 c1 04             	add    ecx,0x4
c000aa7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa80:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa83:	e8 e5 fe ff ff       	call   c000a96d <Dbg::logs(char*)>
c000aa88:	eb c7                	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000aa8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa8e:	89 d0                	mov    eax,edx
c000aa90:	83 c2 04             	add    edx,0x4
c000aa93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa97:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa99:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa9c:	e8 ee fe ff ff       	call   c000a98f <Dbg::logWriteInt(unsigned int)>
c000aaa1:	eb ae                	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000aaa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aaa7:	89 d0                	mov    eax,edx
c000aaa9:	83 c2 04             	add    edx,0x4
c000aaac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aab3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aab6:	e8 92 fe ff ff       	call   c000a94d <Dbg::logc(char)>
c000aabb:	eb 94                	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000aabd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aac1:	89 c8                	mov    eax,ecx
c000aac3:	83 c1 04             	add    ecx,0x4
c000aac6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aaca:	b9 10 00 00 00       	mov    ecx,0x10
c000aacf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aad3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad5:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad8:	e8 de fe ff ff       	call   c000a9bb <Dbg::logWriteIntBase(unsigned int, int)>
c000aadd:	e9 6f ff ff ff       	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000aae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aae6:	89 d0                	mov    eax,edx
c000aae8:	83 c2 08             	add    edx,0x8
c000aaeb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaef:	ba 10 00 00 00       	mov    edx,0x10
c000aaf4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf8:	8b 00                	mov    eax,DWORD PTR [eax]
c000aafa:	89 04 24             	mov    DWORD PTR [esp],eax
c000aafd:	e8 b9 fe ff ff       	call   c000a9bb <Dbg::logWriteIntBase(unsigned int, int)>
c000ab02:	e9 4a ff ff ff       	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab07:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab0e:	e8 3a fe ff ff       	call   c000a94d <Dbg::logc(char)>
c000ab13:	e9 39 ff ff ff       	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab18:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab1f:	e8 29 fe ff ff       	call   c000a94d <Dbg::logc(char)>
c000ab24:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ab27:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2a:	e8 1e fe ff ff       	call   c000a94d <Dbg::logc(char)>
c000ab2f:	e9 1d ff ff ff       	jmp    c000aa51 <Dbg::kprintf(char const*, ...)+0x6b>

c000ab34 <File::read(unsigned long long, void*, int*)>:
c000ab34:	53                   	push   ebx
c000ab35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab44:	3c 19                	cmp    al,0x19
c000ab46:	77 35                	ja     c000ab7d <File::read(unsigned long long, void*, int*)+0x49>
c000ab48:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab4f:	85 c0                	test   eax,eax
c000ab51:	74 2a                	je     c000ab7d <File::read(unsigned long long, void*, int*)+0x49>
c000ab53:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab59:	85 c0                	test   eax,eax
c000ab5b:	74 20                	je     c000ab7d <File::read(unsigned long long, void*, int*)+0x49>
c000ab5d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab61:	74 21                	je     c000ab84 <File::read(unsigned long long, void*, int*)+0x50>
c000ab63:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab65:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab69:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab77:	5b                   	pop    ebx
c000ab78:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab7b:	ff e0                	jmp    eax
c000ab7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab82:	eb 05                	jmp    c000ab89 <File::read(unsigned long long, void*, int*)+0x55>
c000ab84:	b8 05 00 00 00       	mov    eax,0x5
c000ab89:	5b                   	pop    ebx
c000ab8a:	c3                   	ret    
c000ab8b:	90                   	nop

c000ab8c <File::write(unsigned long long, void*, int*)>:
c000ab8c:	53                   	push   ebx
c000ab8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab9c:	3c 19                	cmp    al,0x19
c000ab9e:	77 35                	ja     c000abd5 <File::write(unsigned long long, void*, int*)+0x49>
c000aba0:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aba7:	85 c0                	test   eax,eax
c000aba9:	74 2a                	je     c000abd5 <File::write(unsigned long long, void*, int*)+0x49>
c000abab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abb1:	85 c0                	test   eax,eax
c000abb3:	74 20                	je     c000abd5 <File::write(unsigned long long, void*, int*)+0x49>
c000abb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abb9:	74 21                	je     c000abdc <File::write(unsigned long long, void*, int*)+0x50>
c000abbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abbd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abc1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abcf:	5b                   	pop    ebx
c000abd0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000abd3:	ff e0                	jmp    eax
c000abd5:	b8 0b 00 00 00       	mov    eax,0xb
c000abda:	eb 05                	jmp    c000abe1 <File::write(unsigned long long, void*, int*)+0x55>
c000abdc:	b8 05 00 00 00       	mov    eax,0x5
c000abe1:	5b                   	pop    ebx
c000abe2:	c3                   	ret    
c000abe3:	90                   	nop

c000abe4 <Directory::read(unsigned long long, void*, int*)>:
c000abe4:	53                   	push   ebx
c000abe5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abe9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abed:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abf4:	3c 19                	cmp    al,0x19
c000abf6:	77 35                	ja     c000ac2d <Directory::read(unsigned long long, void*, int*)+0x49>
c000abf8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abff:	85 c0                	test   eax,eax
c000ac01:	74 2a                	je     c000ac2d <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac03:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac09:	85 c0                	test   eax,eax
c000ac0b:	74 20                	je     c000ac2d <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac11:	74 21                	je     c000ac34 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ac13:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac19:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac27:	5b                   	pop    ebx
c000ac28:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ac2b:	ff e0                	jmp    eax
c000ac2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac32:	eb 05                	jmp    c000ac39 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ac34:	b8 05 00 00 00       	mov    eax,0x5
c000ac39:	5b                   	pop    ebx
c000ac3a:	c3                   	ret    
c000ac3b:	90                   	nop

c000ac3c <Directory::write(unsigned long long, void*, int*)>:
c000ac3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac40:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac47:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4c:	80 fa 19             	cmp    dl,0x19
c000ac4f:	77 18                	ja     c000ac69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac51:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac58:	85 d2                	test   edx,edx
c000ac5a:	74 0d                	je     c000ac69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac5c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac63:	19 c0                	sbb    eax,eax
c000ac65:	83 e0 0a             	and    eax,0xa
c000ac68:	40                   	inc    eax
c000ac69:	c3                   	ret    

c000ac6a <File::isAtty()>:
c000ac6a:	31 c0                	xor    eax,eax
c000ac6c:	c3                   	ret    
c000ac6d:	90                   	nop

c000ac6e <Directory::isAtty()>:
c000ac6e:	31 c0                	xor    eax,eax
c000ac70:	c3                   	ret    
c000ac71:	90                   	nop

c000ac72 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac72:	b8 0a 00 00 00       	mov    eax,0xa
c000ac77:	c3                   	ret    

c000ac78 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac78:	b8 0a 00 00 00       	mov    eax,0xa
c000ac7d:	c3                   	ret    

c000ac7e <Filesystem::allocateSwapfile(char const*, int)>:
c000ac7e:	31 c0                	xor    eax,eax
c000ac80:	31 d2                	xor    edx,edx
c000ac82:	c3                   	ret    
c000ac83:	90                   	nop

c000ac84 <File::~File()>:
c000ac84:	83 ec 1c             	sub    esp,0x1c
c000ac87:	ba ec fe 01 c0       	mov    edx,0xc001feec
c000ac8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac90:	89 10                	mov    DWORD PTR [eax],edx
c000ac92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac96:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac99:	e8 8e e6 ff ff       	call   c000932c <UnixFile::~UnixFile()>
c000ac9e:	90                   	nop
c000ac9f:	83 c4 1c             	add    esp,0x1c
c000aca2:	c3                   	ret    
c000aca3:	90                   	nop

c000aca4 <File::~File()>:
c000aca4:	83 ec 1c             	sub    esp,0x1c
c000aca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acab:	89 04 24             	mov    DWORD PTR [esp],eax
c000acae:	e8 d1 ff ff ff       	call   c000ac84 <File::~File()>
c000acb3:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000acbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acbf:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc2:	e8 05 fc ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000acc7:	83 c4 1c             	add    esp,0x1c
c000acca:	c3                   	ret    
c000accb:	90                   	nop

c000accc <Directory::~Directory()>:
c000accc:	83 ec 1c             	sub    esp,0x1c
c000accf:	ba 08 ff 01 c0       	mov    edx,0xc001ff08
c000acd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acd8:	89 10                	mov    DWORD PTR [eax],edx
c000acda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acde:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace1:	e8 46 e6 ff ff       	call   c000932c <UnixFile::~UnixFile()>
c000ace6:	90                   	nop
c000ace7:	83 c4 1c             	add    esp,0x1c
c000acea:	c3                   	ret    
c000aceb:	90                   	nop

c000acec <Directory::~Directory()>:
c000acec:	83 ec 1c             	sub    esp,0x1c
c000acef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000acf6:	e8 d1 ff ff ff       	call   c000accc <Directory::~Directory()>
c000acfb:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad07:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad0a:	e8 bd fb ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000ad0f:	83 c4 1c             	add    esp,0x1c
c000ad12:	c3                   	ret    
c000ad13:	90                   	nop

c000ad14 <Filesystem::Filesystem()>:
c000ad14:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000ad19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad1d:	89 10                	mov    DWORD PTR [eax],edx
c000ad1f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ad25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad30:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad35:	90                   	nop
c000ad36:	c3                   	ret    
c000ad37:	90                   	nop

c000ad38 <Filesystem::~Filesystem()>:
c000ad38:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000ad3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad41:	89 10                	mov    DWORD PTR [eax],edx
c000ad43:	90                   	nop
c000ad44:	c3                   	ret    
c000ad45:	90                   	nop

c000ad46 <Filesystem::~Filesystem()>:
c000ad46:	83 ec 1c             	sub    esp,0x1c
c000ad49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad50:	e8 e3 ff ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c000ad55:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000ad5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad61:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad64:	e8 63 fb ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000ad69:	83 c4 1c             	add    esp,0x1c
c000ad6c:	c3                   	ret    

c000ad6d <Fs::getcwd(Process*, char*, int)>:
c000ad6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad71:	31 c0                	xor    eax,eax
c000ad73:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad77:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad7a:	7d 15                	jge    c000ad91 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad7c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad80:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad87:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad8a:	84 c9                	test   cl,cl
c000ad8c:	74 06                	je     c000ad94 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad8e:	40                   	inc    eax
c000ad8f:	eb e2                	jmp    c000ad73 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad91:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad94:	31 c0                	xor    eax,eax
c000ad96:	c3                   	ret    

c000ad97 <Fs::initVFS()>:
c000ad97:	83 ec 18             	sub    esp,0x18
c000ad9a:	6a 08                	push   0x8
c000ad9c:	e8 c5 cc ff ff       	call   c0007a66 <malloc>
c000ada1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada4:	e8 c7 db 00 00       	call   c0018970 <FAT::FAT()>
c000ada9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000adb0:	e8 b1 cc ff ff       	call   c0007a66 <malloc>
c000adb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb8:	e8 1d ea 00 00       	call   c00197da <ISO9660::ISO9660()>
c000adbd:	83 c4 1c             	add    esp,0x1c
c000adc0:	c3                   	ret    

c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000adc1:	55                   	push   ebp
c000adc2:	57                   	push   edi
c000adc3:	56                   	push   esi
c000adc4:	53                   	push   ebx
c000adc5:	81 ec 10 04 00 00    	sub    esp,0x410
c000adcb:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000add2:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000add9:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ade0:	68 00 04 00 00       	push   0x400
c000ade5:	6a 00                	push   0x0
c000ade7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000adeb:	56                   	push   esi
c000adec:	e8 ff 56 ff ff       	call   c00004f0 <memset>
c000adf1:	83 c4 10             	add    esp,0x10
c000adf4:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000adf8:	75 0b                	jne    c000ae05 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adfa:	50                   	push   eax
c000adfb:	50                   	push   eax
c000adfc:	57                   	push   edi
c000adfd:	56                   	push   esi
c000adfe:	e8 8d 58 ff ff       	call   c0000690 <strcpy>
c000ae03:	eb 40                	jmp    c000ae45 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000ae05:	8a 07                	mov    al,BYTE PTR [edi]
c000ae07:	3c 2f                	cmp    al,0x2f
c000ae09:	74 04                	je     c000ae0f <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ae0b:	3c 5c                	cmp    al,0x5c
c000ae0d:	75 17                	jne    c000ae26 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000ae0f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae12:	3c 60                	cmp    al,0x60
c000ae14:	7e 02                	jle    c000ae18 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000ae16:	2c 20                	sub    al,0x20
c000ae18:	88 04 24             	mov    BYTE PTR [esp],al
c000ae1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae22:	50                   	push   eax
c000ae23:	50                   	push   eax
c000ae24:	eb 18                	jmp    c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000ae26:	50                   	push   eax
c000ae27:	50                   	push   eax
c000ae28:	55                   	push   ebp
c000ae29:	56                   	push   esi
c000ae2a:	e8 61 58 ff ff       	call   c0000690 <strcpy>
c000ae2f:	5a                   	pop    edx
c000ae30:	59                   	pop    ecx
c000ae31:	68 db 0d 02 c0       	push   0xc0020ddb
c000ae36:	56                   	push   esi
c000ae37:	e8 64 5a ff ff       	call   c00008a0 <strcat>
c000ae3c:	5d                   	pop    ebp
c000ae3d:	58                   	pop    eax
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	e8 5b 5a ff ff       	call   c00008a0 <strcat>
c000ae45:	83 c4 10             	add    esp,0x10
c000ae48:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae4b:	3c 60                	cmp    al,0x60
c000ae4d:	7e 02                	jle    c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000ae4f:	2c 20                	sub    al,0x20
c000ae51:	88 04 24             	mov    BYTE PTR [esp],al
c000ae54:	bf 03 00 00 00       	mov    edi,0x3
c000ae59:	88 03                	mov    BYTE PTR [ebx],al
c000ae5b:	b8 03 00 00 00       	mov    eax,0x3
c000ae60:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae67:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae6d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae71:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ae74:	84 d2                	test   dl,dl
c000ae76:	0f 84 91 00 00 00    	je     c000af0d <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000ae7c:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae7f:	80 fa 2f             	cmp    dl,0x2f
c000ae82:	74 05                	je     c000ae89 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000ae84:	80 fa 5c             	cmp    dl,0x5c
c000ae87:	75 12                	jne    c000ae9b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000ae89:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae8e:	89 c5                	mov    ebp,eax
c000ae90:	74 09                	je     c000ae9b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000ae92:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae96:	40                   	inc    eax
c000ae97:	89 cf                	mov    edi,ecx
c000ae99:	eb d6                	jmp    c000ae71 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000ae9b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aea0:	75 5b                	jne    c000aefd <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000aea2:	80 fa 2e             	cmp    dl,0x2e
c000aea5:	75 56                	jne    c000aefd <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000aea7:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aeab:	74 19                	je     c000aec6 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000aead:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aeb2:	74 53                	je     c000af07 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000aeb4:	89 f9                	mov    ecx,edi
c000aeb6:	41                   	inc    ecx
c000aeb7:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aeba:	80 fa 2f             	cmp    dl,0x2f
c000aebd:	74 f7                	je     c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000aebf:	80 fa 5c             	cmp    dl,0x5c
c000aec2:	74 f2                	je     c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000aec4:	eb d1                	jmp    c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aec6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aecb:	74 3a                	je     c000af07 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000aecd:	83 f8 03             	cmp    eax,0x3
c000aed0:	74 c5                	je     c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aed2:	41                   	inc    ecx
c000aed3:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aed6:	80 fa 2f             	cmp    dl,0x2f
c000aed9:	74 f7                	je     c000aed2 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000aedb:	80 fa 5c             	cmp    dl,0x5c
c000aede:	74 f2                	je     c000aed2 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000aee0:	48                   	dec    eax
c000aee1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aee5:	75 06                	jne    c000aeed <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000aee7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeeb:	eb f3                	jmp    c000aee0 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000aeed:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aef1:	74 07                	je     c000aefa <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000aef3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aef7:	48                   	dec    eax
c000aef8:	eb f3                	jmp    c000aeed <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000aefa:	40                   	inc    eax
c000aefb:	eb 9a                	jmp    c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aefd:	80 fa 2f             	cmp    dl,0x2f
c000af00:	74 95                	je     c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af02:	80 fa 5c             	cmp    dl,0x5c
c000af05:	74 90                	je     c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af07:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af0a:	40                   	inc    eax
c000af0b:	eb 8a                	jmp    c000ae97 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af0d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af11:	83 ec 0c             	sub    esp,0xc
c000af14:	53                   	push   ebx
c000af15:	e8 76 56 ff ff       	call   c0000590 <strlen>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af22:	75 26                	jne    c000af4a <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000af24:	83 ec 0c             	sub    esp,0xc
c000af27:	53                   	push   ebx
c000af28:	e8 63 56 ff ff       	call   c0000590 <strlen>
c000af2d:	83 c4 10             	add    esp,0x10
c000af30:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af35:	74 26                	je     c000af5d <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000af37:	83 ec 0c             	sub    esp,0xc
c000af3a:	53                   	push   ebx
c000af3b:	e8 50 56 ff ff       	call   c0000590 <strlen>
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af48:	eb c7                	jmp    c000af11 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	53                   	push   ebx
c000af4e:	e8 3d 56 ff ff       	call   c0000590 <strlen>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af5b:	74 c7                	je     c000af24 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000af5d:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af63:	5b                   	pop    ebx
c000af64:	5e                   	pop    esi
c000af65:	5f                   	pop    edi
c000af66:	5d                   	pop    ebp
c000af67:	c3                   	ret    

c000af68 <File::File(char const*, Process*)>:
c000af68:	83 ec 1c             	sub    esp,0x1c
c000af6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000af77:	89 04 24             	mov    DWORD PTR [esp],eax
c000af7a:	e8 e7 e1 ff ff       	call   c0009166 <UnixFile::UnixFile(int)>
c000af7f:	ba ec fe 01 c0       	mov    edx,0xc001feec
c000af84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af88:	89 10                	mov    DWORD PTR [eax],edx
c000af8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000af8e:	05 0c 01 00 00       	add    eax,0x10c
c000af93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af97:	83 c2 0d             	add    edx,0xd
c000af9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afa6:	89 14 24             	mov    DWORD PTR [esp],edx
c000afa9:	e8 13 fe ff ff       	call   c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afb2:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000afb6:	2c 41                	sub    al,0x41
c000afb8:	88 c2                	mov    dl,al
c000afba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afbe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afc8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afd0:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000afd7:	0f b6 c0             	movzx  eax,al
c000afda:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 3c                	je     c000b021 <File::File(char const*, Process*)+0xb9>
c000afe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afe9:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000aff0:	0f b6 c0             	movzx  eax,al
c000aff3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000affa:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b000:	85 c0                	test   eax,eax
c000b002:	75 1d                	jne    c000b021 <File::File(char const*, Process*)+0xb9>
c000b004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b008:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b00f:	0f b6 c0             	movzx  eax,al
c000b012:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b019:	89 04 24             	mov    DWORD PTR [esp],eax
c000b01c:	e8 35 20 00 00       	call   c000d056 <LogicalDisk::mount()>
c000b021:	90                   	nop
c000b022:	83 c4 1c             	add    esp,0x1c
c000b025:	c3                   	ret    

c000b026 <File::open(FileOpenMode)>:
c000b026:	53                   	push   ebx
c000b027:	b8 0b 00 00 00       	mov    eax,0xb
c000b02c:	83 ec 08             	sub    esp,0x8
c000b02f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b033:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b03a:	80 fa 19             	cmp    dl,0x19
c000b03d:	77 40                	ja     c000b07f <File::open(FileOpenMode)+0x59>
c000b03f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b046:	85 d2                	test   edx,edx
c000b048:	74 35                	je     c000b07f <File::open(FileOpenMode)+0x59>
c000b04a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b050:	85 d2                	test   edx,edx
c000b052:	74 2b                	je     c000b07f <File::open(FileOpenMode)+0x59>
c000b054:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b058:	b8 06 00 00 00       	mov    eax,0x6
c000b05d:	75 20                	jne    c000b07f <File::open(FileOpenMode)+0x59>
c000b05f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b061:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06b:	51                   	push   ecx
c000b06c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b06f:	51                   	push   ecx
c000b070:	52                   	push   edx
c000b071:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b074:	83 c4 10             	add    esp,0x10
c000b077:	85 c0                	test   eax,eax
c000b079:	75 04                	jne    c000b07f <File::open(FileOpenMode)+0x59>
c000b07b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b07f:	83 c4 08             	add    esp,0x8
c000b082:	5b                   	pop    ebx
c000b083:	c3                   	ret    

c000b084 <File::close()>:
c000b084:	53                   	push   ebx
c000b085:	b8 0b 00 00 00       	mov    eax,0xb
c000b08a:	83 ec 08             	sub    esp,0x8
c000b08d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b091:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b098:	80 fa 19             	cmp    dl,0x19
c000b09b:	77 41                	ja     c000b0de <File::close()+0x5a>
c000b09d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0a4:	85 db                	test   ebx,ebx
c000b0a6:	74 36                	je     c000b0de <File::close()+0x5a>
c000b0a8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b0af:	74 2d                	je     c000b0de <File::close()+0x5a>
c000b0b1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0b5:	b8 05 00 00 00       	mov    eax,0x5
c000b0ba:	74 22                	je     c000b0de <File::close()+0x5a>
c000b0bc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0c0:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b0c7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0cd:	53                   	push   ebx
c000b0ce:	53                   	push   ebx
c000b0cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0d1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0d7:	50                   	push   eax
c000b0d8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 08             	add    esp,0x8
c000b0e1:	5b                   	pop    ebx
c000b0e2:	c3                   	ret    
c000b0e3:	90                   	nop

c000b0e4 <File::seek(unsigned long long)>:
c000b0e4:	56                   	push   esi
c000b0e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ea:	53                   	push   ebx
c000b0eb:	51                   	push   ecx
c000b0ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0f8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0ff:	80 fa 19             	cmp    dl,0x19
c000b102:	77 31                	ja     c000b135 <File::seek(unsigned long long)+0x51>
c000b104:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b10b:	85 d2                	test   edx,edx
c000b10d:	74 26                	je     c000b135 <File::seek(unsigned long long)+0x51>
c000b10f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b115:	85 d2                	test   edx,edx
c000b117:	74 1c                	je     c000b135 <File::seek(unsigned long long)+0x51>
c000b119:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b11d:	b8 05 00 00 00       	mov    eax,0x5
c000b122:	74 11                	je     c000b135 <File::seek(unsigned long long)+0x51>
c000b124:	8b 02                	mov    eax,DWORD PTR [edx]
c000b126:	53                   	push   ebx
c000b127:	51                   	push   ecx
c000b128:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b12e:	52                   	push   edx
c000b12f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b132:	83 c4 10             	add    esp,0x10
c000b135:	5a                   	pop    edx
c000b136:	5b                   	pop    ebx
c000b137:	5e                   	pop    esi
c000b138:	c3                   	ret    
c000b139:	90                   	nop

c000b13a <File::tell(unsigned long long*)>:
c000b13a:	83 ec 0c             	sub    esp,0xc
c000b13d:	b8 0b 00 00 00       	mov    eax,0xb
c000b142:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b146:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b14d:	80 fa 19             	cmp    dl,0x19
c000b150:	77 34                	ja     c000b186 <File::tell(unsigned long long*)+0x4c>
c000b152:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b159:	85 d2                	test   edx,edx
c000b15b:	74 29                	je     c000b186 <File::tell(unsigned long long*)+0x4c>
c000b15d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b163:	85 d2                	test   edx,edx
c000b165:	74 1f                	je     c000b186 <File::tell(unsigned long long*)+0x4c>
c000b167:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b16b:	b8 05 00 00 00       	mov    eax,0x5
c000b170:	74 14                	je     c000b186 <File::tell(unsigned long long*)+0x4c>
c000b172:	50                   	push   eax
c000b173:	8b 02                	mov    eax,DWORD PTR [edx]
c000b175:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b179:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b17f:	52                   	push   edx
c000b180:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b183:	83 c4 10             	add    esp,0x10
c000b186:	83 c4 0c             	add    esp,0xc
c000b189:	c3                   	ret    

c000b18a <File::rewind()>:
c000b18a:	83 ec 10             	sub    esp,0x10
c000b18d:	6a 00                	push   0x0
c000b18f:	6a 00                	push   0x0
c000b191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b195:	e8 4a ff ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c000b19a:	83 c4 1c             	add    esp,0x1c
c000b19d:	c3                   	ret    

c000b19e <File::unlink()>:
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1b1:	80 f9 19             	cmp    cl,0x19
c000b1b4:	77 2f                	ja     c000b1e5 <File::unlink()+0x47>
c000b1b6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1bd:	85 c9                	test   ecx,ecx
c000b1bf:	74 24                	je     c000b1e5 <File::unlink()+0x47>
c000b1c1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1c7:	85 c9                	test   ecx,ecx
c000b1c9:	74 1a                	je     c000b1e5 <File::unlink()+0x47>
c000b1cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1cf:	b8 06 00 00 00       	mov    eax,0x6
c000b1d4:	75 0f                	jne    c000b1e5 <File::unlink()+0x47>
c000b1d6:	50                   	push   eax
c000b1d7:	83 c2 0d             	add    edx,0xd
c000b1da:	50                   	push   eax
c000b1db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1dd:	52                   	push   edx
c000b1de:	51                   	push   ecx
c000b1df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1e2:	83 c4 10             	add    esp,0x10
c000b1e5:	83 c4 0c             	add    esp,0xc
c000b1e8:	c3                   	ret    
c000b1e9:	90                   	nop

c000b1ea <File::rename(char const*)>:
c000b1ea:	83 ec 0c             	sub    esp,0xc
c000b1ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b1f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1fd:	80 f9 19             	cmp    cl,0x19
c000b200:	77 32                	ja     c000b234 <File::rename(char const*)+0x4a>
c000b202:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b209:	85 c9                	test   ecx,ecx
c000b20b:	74 27                	je     c000b234 <File::rename(char const*)+0x4a>
c000b20d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b213:	85 c9                	test   ecx,ecx
c000b215:	74 1d                	je     c000b234 <File::rename(char const*)+0x4a>
c000b217:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b21b:	b8 06 00 00 00       	mov    eax,0x6
c000b220:	75 12                	jne    c000b234 <File::rename(char const*)+0x4a>
c000b222:	50                   	push   eax
c000b223:	83 c2 0d             	add    edx,0xd
c000b226:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b22c:	52                   	push   edx
c000b22d:	51                   	push   ecx
c000b22e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b231:	83 c4 10             	add    esp,0x10
c000b234:	83 c4 0c             	add    esp,0xc
c000b237:	c3                   	ret    

c000b238 <File::chfatattr(unsigned char, unsigned char)>:
c000b238:	56                   	push   esi
c000b239:	b8 0b 00 00 00       	mov    eax,0xb
c000b23e:	53                   	push   ebx
c000b23f:	51                   	push   ecx
c000b240:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b244:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b249:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b24e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b255:	80 fa 19             	cmp    dl,0x19
c000b258:	77 2f                	ja     c000b289 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b25a:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b261:	85 d2                	test   edx,edx
c000b263:	74 24                	je     c000b289 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b265:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b26b:	85 d2                	test   edx,edx
c000b26d:	74 1a                	je     c000b289 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b26f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b273:	b8 06 00 00 00       	mov    eax,0x6
c000b278:	75 0f                	jne    c000b289 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b27a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b27c:	83 c6 0d             	add    esi,0xd
c000b27f:	53                   	push   ebx
c000b280:	51                   	push   ecx
c000b281:	56                   	push   esi
c000b282:	52                   	push   edx
c000b283:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	5a                   	pop    edx
c000b28a:	5b                   	pop    ebx
c000b28b:	5e                   	pop    esi
c000b28c:	c3                   	ret    
c000b28d:	90                   	nop

c000b28e <File::exists()>:
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	31 c0                	xor    eax,eax
c000b293:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b297:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b29e:	80 f9 19             	cmp    cl,0x19
c000b2a1:	77 24                	ja     c000b2c7 <File::exists()+0x39>
c000b2a3:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2aa:	85 c9                	test   ecx,ecx
c000b2ac:	74 19                	je     c000b2c7 <File::exists()+0x39>
c000b2ae:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2b4:	85 c9                	test   ecx,ecx
c000b2b6:	74 0f                	je     c000b2c7 <File::exists()+0x39>
c000b2b8:	50                   	push   eax
c000b2b9:	83 c2 0d             	add    edx,0xd
c000b2bc:	50                   	push   eax
c000b2bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2bf:	52                   	push   edx
c000b2c0:	51                   	push   ecx
c000b2c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	83 c4 0c             	add    esp,0xc
c000b2ca:	c3                   	ret    
c000b2cb:	90                   	nop

c000b2cc <File::stat(unsigned long long*, bool*)>:
c000b2cc:	56                   	push   esi
c000b2cd:	53                   	push   ebx
c000b2ce:	50                   	push   eax
c000b2cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b2d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2e7:	80 f9 19             	cmp    cl,0x19
c000b2ea:	77 3d                	ja     c000b329 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ec:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2f3:	85 c9                	test   ecx,ecx
c000b2f5:	74 32                	je     c000b329 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2f7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2fd:	85 c9                	test   ecx,ecx
c000b2ff:	74 28                	je     c000b329 <File::stat(unsigned long long*, bool*)+0x5d>
c000b301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b305:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b307:	74 13                	je     c000b31c <File::stat(unsigned long long*, bool*)+0x50>
c000b309:	83 ec 04             	sub    esp,0x4
c000b30c:	56                   	push   esi
c000b30d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b313:	51                   	push   ecx
c000b314:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b317:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b31a:	eb 0a                	jmp    c000b326 <File::stat(unsigned long long*, bool*)+0x5a>
c000b31c:	53                   	push   ebx
c000b31d:	83 c2 0d             	add    edx,0xd
c000b320:	56                   	push   esi
c000b321:	52                   	push   edx
c000b322:	51                   	push   ecx
c000b323:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b326:	83 c4 10             	add    esp,0x10
c000b329:	5a                   	pop    edx
c000b32a:	5b                   	pop    ebx
c000b32b:	5e                   	pop    esi
c000b32c:	c3                   	ret    

c000b32d <Fs::setcwd(Process*, char*)>:
c000b32d:	55                   	push   ebp
c000b32e:	57                   	push   edi
c000b32f:	56                   	push   esi
c000b330:	53                   	push   ebx
c000b331:	81 ec 20 02 00 00    	sub    esp,0x220
c000b337:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b33e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b344:	57                   	push   edi
c000b345:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b34c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b350:	56                   	push   esi
c000b351:	e8 6b fa ff ff       	call   c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b356:	89 34 24             	mov    DWORD PTR [esp],esi
c000b359:	e8 32 52 ff ff       	call   c0000590 <strlen>
c000b35e:	83 c4 10             	add    esp,0x10
c000b361:	83 f8 02             	cmp    eax,0x2
c000b364:	77 15                	ja     c000b37b <Fs::setcwd(Process*, char*)+0x4e>
c000b366:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b36b:	83 eb 41             	sub    ebx,0x41
c000b36e:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b375:	85 c0                	test   eax,eax
c000b377:	75 1c                	jne    c000b395 <Fs::setcwd(Process*, char*)+0x68>
c000b379:	eb 2f                	jmp    c000b3aa <Fs::setcwd(Process*, char*)+0x7d>
c000b37b:	83 ec 0c             	sub    esp,0xc
c000b37e:	56                   	push   esi
c000b37f:	e8 0c 52 ff ff       	call   c0000590 <strlen>
c000b384:	83 c4 10             	add    esp,0x10
c000b387:	83 f8 03             	cmp    eax,0x3
c000b38a:	75 57                	jne    c000b3e3 <Fs::setcwd(Process*, char*)+0xb6>
c000b38c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b391:	75 50                	jne    c000b3e3 <Fs::setcwd(Process*, char*)+0xb6>
c000b393:	eb d1                	jmp    c000b366 <Fs::setcwd(Process*, char*)+0x39>
c000b395:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b39c:	75 0c                	jne    c000b3aa <Fs::setcwd(Process*, char*)+0x7d>
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	50                   	push   eax
c000b3a2:	e8 af 1c 00 00       	call   c000d056 <LogicalDisk::mount()>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	83 fb 19             	cmp    ebx,0x19
c000b3ad:	b8 03 00 00 00       	mov    eax,0x3
c000b3b2:	0f 87 c6 00 00 00    	ja     c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b3b8:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	85 d2                	test   edx,edx
c000b3c6:	0f 84 b2 00 00 00    	je     c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b3cc:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3d3:	b8 06 00 00 00       	mov    eax,0x6
c000b3d8:	0f 85 92 00 00 00    	jne    c000b470 <Fs::setcwd(Process*, char*)+0x143>
c000b3de:	e9 9b 00 00 00       	jmp    c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b3e3:	83 ec 0c             	sub    esp,0xc
c000b3e6:	68 14 01 00 00       	push   0x114
c000b3eb:	e8 76 c6 ff ff       	call   c0007a66 <malloc>
c000b3f0:	83 c4 0c             	add    esp,0xc
c000b3f3:	55                   	push   ebp
c000b3f4:	56                   	push   esi
c000b3f5:	50                   	push   eax
c000b3f6:	89 c3                	mov    ebx,eax
c000b3f8:	e8 6b fb ff ff       	call   c000af68 <File::File(char const*, Process*)>
c000b3fd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b402:	83 c4 0c             	add    esp,0xc
c000b405:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b409:	50                   	push   eax
c000b40a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b40e:	50                   	push   eax
c000b40f:	53                   	push   ebx
c000b410:	e8 b7 fe ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	83 f8 02             	cmp    eax,0x2
c000b41b:	74 27                	je     c000b444 <Fs::setcwd(Process*, char*)+0x117>
c000b41d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b422:	75 1c                	jne    c000b440 <Fs::setcwd(Process*, char*)+0x113>
c000b424:	85 db                	test   ebx,ebx
c000b426:	b8 02 00 00 00       	mov    eax,0x2
c000b42b:	74 51                	je     c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b42d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	53                   	push   ebx
c000b433:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b436:	83 c4 10             	add    esp,0x10
c000b439:	b8 02 00 00 00       	mov    eax,0x2
c000b43e:	eb 3e                	jmp    c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b440:	85 c0                	test   eax,eax
c000b442:	74 1c                	je     c000b460 <Fs::setcwd(Process*, char*)+0x133>
c000b444:	85 db                	test   ebx,ebx
c000b446:	b8 01 00 00 00       	mov    eax,0x1
c000b44b:	74 31                	je     c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b44d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44f:	83 ec 0c             	sub    esp,0xc
c000b452:	53                   	push   ebx
c000b453:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b456:	83 c4 10             	add    esp,0x10
c000b459:	b8 01 00 00 00       	mov    eax,0x1
c000b45e:	eb 1e                	jmp    c000b47e <Fs::setcwd(Process*, char*)+0x151>
c000b460:	85 db                	test   ebx,ebx
c000b462:	74 0c                	je     c000b470 <Fs::setcwd(Process*, char*)+0x143>
c000b464:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	53                   	push   ebx
c000b46a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46d:	83 c4 10             	add    esp,0x10
c000b470:	50                   	push   eax
c000b471:	50                   	push   eax
c000b472:	56                   	push   esi
c000b473:	57                   	push   edi
c000b474:	e8 17 52 ff ff       	call   c0000690 <strcpy>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	31 c0                	xor    eax,eax
c000b47e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b484:	5b                   	pop    ebx
c000b485:	5e                   	pop    esi
c000b486:	5f                   	pop    edi
c000b487:	5d                   	pop    ebp
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <Directory::Directory(char const*, Process*)>:
c000b48a:	83 ec 1c             	sub    esp,0x1c
c000b48d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b491:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b499:	89 04 24             	mov    DWORD PTR [esp],eax
c000b49c:	e8 c5 dc ff ff       	call   c0009166 <UnixFile::UnixFile(int)>
c000b4a1:	ba 08 ff 01 c0       	mov    edx,0xc001ff08
c000b4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4aa:	89 10                	mov    DWORD PTR [eax],edx
c000b4ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b4b0:	05 0c 01 00 00       	add    eax,0x10c
c000b4b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b4b9:	83 c2 0d             	add    edx,0xd
c000b4bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b4c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4c8:	89 14 24             	mov    DWORD PTR [esp],edx
c000b4cb:	e8 f1 f8 ff ff       	call   c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4d4:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b4d8:	2c 41                	sub    al,0x41
c000b4da:	88 c2                	mov    dl,al
c000b4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4f2:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b4f9:	0f b6 c0             	movzx  eax,al
c000b4fc:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b503:	85 c0                	test   eax,eax
c000b505:	74 3c                	je     c000b543 <Directory::Directory(char const*, Process*)+0xb9>
c000b507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b50b:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b512:	0f b6 c0             	movzx  eax,al
c000b515:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b51c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b522:	85 c0                	test   eax,eax
c000b524:	75 1d                	jne    c000b543 <Directory::Directory(char const*, Process*)+0xb9>
c000b526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b52a:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b531:	0f b6 c0             	movzx  eax,al
c000b534:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b53b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b53e:	e8 13 1b 00 00       	call   c000d056 <LogicalDisk::mount()>
c000b543:	90                   	nop
c000b544:	83 c4 1c             	add    esp,0x1c
c000b547:	c3                   	ret    

c000b548 <Directory::open()>:
c000b548:	53                   	push   ebx
c000b549:	b8 0b 00 00 00       	mov    eax,0xb
c000b54e:	83 ec 08             	sub    esp,0x8
c000b551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b555:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b55c:	80 fa 19             	cmp    dl,0x19
c000b55f:	77 3d                	ja     c000b59e <Directory::open()+0x56>
c000b561:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b568:	85 d2                	test   edx,edx
c000b56a:	74 32                	je     c000b59e <Directory::open()+0x56>
c000b56c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b572:	85 d2                	test   edx,edx
c000b574:	74 28                	je     c000b59e <Directory::open()+0x56>
c000b576:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b57a:	b8 06 00 00 00       	mov    eax,0x6
c000b57f:	75 1d                	jne    c000b59e <Directory::open()+0x56>
c000b581:	50                   	push   eax
c000b582:	8b 02                	mov    eax,DWORD PTR [edx]
c000b584:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b58a:	51                   	push   ecx
c000b58b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b58e:	51                   	push   ecx
c000b58f:	52                   	push   edx
c000b590:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b593:	83 c4 10             	add    esp,0x10
c000b596:	85 c0                	test   eax,eax
c000b598:	75 04                	jne    c000b59e <Directory::open()+0x56>
c000b59a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b59e:	83 c4 08             	add    esp,0x8
c000b5a1:	5b                   	pop    ebx
c000b5a2:	c3                   	ret    
c000b5a3:	90                   	nop

c000b5a4 <Directory::close()>:
c000b5a4:	53                   	push   ebx
c000b5a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b5aa:	83 ec 08             	sub    esp,0x8
c000b5ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b5b8:	80 fa 19             	cmp    dl,0x19
c000b5bb:	77 41                	ja     c000b5fe <Directory::close()+0x5a>
c000b5bd:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5c4:	85 db                	test   ebx,ebx
c000b5c6:	74 36                	je     c000b5fe <Directory::close()+0x5a>
c000b5c8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5cf:	74 2d                	je     c000b5fe <Directory::close()+0x5a>
c000b5d1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b5d5:	b8 05 00 00 00       	mov    eax,0x5
c000b5da:	74 22                	je     c000b5fe <Directory::close()+0x5a>
c000b5dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b5e0:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b5e7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ed:	53                   	push   ebx
c000b5ee:	53                   	push   ebx
c000b5ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b5f7:	50                   	push   eax
c000b5f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	83 c4 08             	add    esp,0x8
c000b601:	5b                   	pop    ebx
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <Directory::unlink()>:
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	b8 0b 00 00 00       	mov    eax,0xb
c000b60c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b610:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b617:	80 f9 19             	cmp    cl,0x19
c000b61a:	77 2f                	ja     c000b64b <Directory::unlink()+0x47>
c000b61c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b623:	85 c9                	test   ecx,ecx
c000b625:	74 24                	je     c000b64b <Directory::unlink()+0x47>
c000b627:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b62d:	85 c9                	test   ecx,ecx
c000b62f:	74 1a                	je     c000b64b <Directory::unlink()+0x47>
c000b631:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b635:	b8 06 00 00 00       	mov    eax,0x6
c000b63a:	75 0f                	jne    c000b64b <Directory::unlink()+0x47>
c000b63c:	50                   	push   eax
c000b63d:	83 c2 0d             	add    edx,0xd
c000b640:	50                   	push   eax
c000b641:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b643:	52                   	push   edx
c000b644:	51                   	push   ecx
c000b645:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b648:	83 c4 10             	add    esp,0x10
c000b64b:	83 c4 0c             	add    esp,0xc
c000b64e:	c3                   	ret    
c000b64f:	90                   	nop

c000b650 <Directory::rename(char const*)>:
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	b8 0b 00 00 00       	mov    eax,0xb
c000b658:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b65c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b663:	80 f9 19             	cmp    cl,0x19
c000b666:	77 32                	ja     c000b69a <Directory::rename(char const*)+0x4a>
c000b668:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b66f:	85 c9                	test   ecx,ecx
c000b671:	74 27                	je     c000b69a <Directory::rename(char const*)+0x4a>
c000b673:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b679:	85 c9                	test   ecx,ecx
c000b67b:	74 1d                	je     c000b69a <Directory::rename(char const*)+0x4a>
c000b67d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b681:	b8 06 00 00 00       	mov    eax,0x6
c000b686:	75 12                	jne    c000b69a <Directory::rename(char const*)+0x4a>
c000b688:	50                   	push   eax
c000b689:	83 c2 0d             	add    edx,0xd
c000b68c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b68e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b692:	52                   	push   edx
c000b693:	51                   	push   ecx
c000b694:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	83 c4 0c             	add    esp,0xc
c000b69d:	c3                   	ret    

c000b69e <Directory::exists()>:
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	31 c0                	xor    eax,eax
c000b6a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6ae:	80 f9 19             	cmp    cl,0x19
c000b6b1:	77 24                	ja     c000b6d7 <Directory::exists()+0x39>
c000b6b3:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ba:	85 c9                	test   ecx,ecx
c000b6bc:	74 19                	je     c000b6d7 <Directory::exists()+0x39>
c000b6be:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6c4:	85 c9                	test   ecx,ecx
c000b6c6:	74 0f                	je     c000b6d7 <Directory::exists()+0x39>
c000b6c8:	50                   	push   eax
c000b6c9:	83 c2 0d             	add    edx,0xd
c000b6cc:	50                   	push   eax
c000b6cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6cf:	52                   	push   edx
c000b6d0:	51                   	push   ecx
c000b6d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	83 c4 0c             	add    esp,0xc
c000b6da:	c3                   	ret    
c000b6db:	90                   	nop

c000b6dc <Directory::read(dirent*)>:
c000b6dc:	83 ec 1c             	sub    esp,0x1c
c000b6df:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b6e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b6ef:	80 fa 19             	cmp    dl,0x19
c000b6f2:	77 30                	ja     c000b724 <Directory::read(dirent*)+0x48>
c000b6f4:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b6fb:	85 d2                	test   edx,edx
c000b6fd:	74 25                	je     c000b724 <Directory::read(dirent*)+0x48>
c000b6ff:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b706:	74 1c                	je     c000b724 <Directory::read(dirent*)+0x48>
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b70d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b711:	52                   	push   edx
c000b712:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b716:	6a 00                	push   0x0
c000b718:	68 10 01 00 00       	push   0x110
c000b71d:	51                   	push   ecx
c000b71e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b721:	83 c4 20             	add    esp,0x20
c000b724:	83 c4 1c             	add    esp,0x1c
c000b727:	c3                   	ret    

c000b728 <Directory::create()>:
c000b728:	83 ec 0c             	sub    esp,0xc
c000b72b:	b8 0b 00 00 00       	mov    eax,0xb
c000b730:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b734:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b73b:	80 f9 19             	cmp    cl,0x19
c000b73e:	77 2f                	ja     c000b76f <Directory::create()+0x47>
c000b740:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b747:	85 c9                	test   ecx,ecx
c000b749:	74 24                	je     c000b76f <Directory::create()+0x47>
c000b74b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b751:	85 c9                	test   ecx,ecx
c000b753:	74 1a                	je     c000b76f <Directory::create()+0x47>
c000b755:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b759:	b8 06 00 00 00       	mov    eax,0x6
c000b75e:	75 0f                	jne    c000b76f <Directory::create()+0x47>
c000b760:	50                   	push   eax
c000b761:	83 c2 0d             	add    edx,0xd
c000b764:	50                   	push   eax
c000b765:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b767:	52                   	push   edx
c000b768:	51                   	push   ecx
c000b769:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	83 c4 0c             	add    esp,0xc
c000b772:	c3                   	ret    
c000b773:	90                   	nop

c000b774 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b774:	b8 0a 00 00 00       	mov    eax,0xa
c000b779:	c3                   	ret    
c000b77a:	66 90                	xchg   ax,ax

c000b77c <Bus::Bus(char const*)>:
c000b77c:	83 ec 1c             	sub    esp,0x1c
c000b77f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b783:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b787:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b78b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b78e:	e8 17 08 00 00       	call   c000bfaa <Device::Device(char const*)>
c000b793:	ba 24 ff 01 c0       	mov    edx,0xc001ff24
c000b798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b79c:	89 10                	mov    DWORD PTR [eax],edx
c000b79e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b7ac:	90                   	nop
c000b7ad:	83 c4 1c             	add    esp,0x1c
c000b7b0:	c3                   	ret    
c000b7b1:	90                   	nop
c000b7b2:	66 90                	xchg   ax,ax

c000b7b4 <Bus::~Bus()>:
c000b7b4:	83 ec 1c             	sub    esp,0x1c
c000b7b7:	ba 24 ff 01 c0       	mov    edx,0xc001ff24
c000b7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7c0:	89 10                	mov    DWORD PTR [eax],edx
c000b7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7c9:	e8 48 05 00 00       	call   c000bd16 <Device::~Device()>
c000b7ce:	90                   	nop
c000b7cf:	83 c4 1c             	add    esp,0x1c
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <Bus::~Bus()>:
c000b7d4:	83 ec 1c             	sub    esp,0x1c
c000b7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7db:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7de:	e8 d1 ff ff ff       	call   c000b7b4 <Bus::~Bus()>
c000b7e3:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b7eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7f2:	e8 d5 f0 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000b7f7:	83 c4 1c             	add    esp,0x1c
c000b7fa:	c3                   	ret    

c000b7fb <beepThread(void*)>:
c000b7fb:	83 ec 0c             	sub    esp,0xc
c000b7fe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b807:	48                   	dec    eax
c000b808:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b80d:	75 01                	jne    c000b810 <beepThread(void*)+0x15>
c000b80f:	fb                   	sti    
c000b810:	6b c2 0a             	imul   eax,edx,0xa
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	50                   	push   eax
c000b817:	e8 10 9b 00 00       	call   c001532c <milliTenthSleep(unsigned int)>
c000b81c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b823:	e8 4c b8 00 00       	call   c0017074 <HalMakeBeep(int)>
c000b828:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b830:	83 c4 1c             	add    esp,0x1c
c000b833:	e9 f4 99 00 00       	jmp    c001522c <blockTask(TaskState)>

c000b838 <Krnl::beep(int, int, bool)>:
c000b838:	53                   	push   ebx
c000b839:	83 ec 24             	sub    esp,0x24
c000b83c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b840:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b844:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b848:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b84c:	e8 23 b8 00 00       	call   c0017074 <HalMakeBeep(int)>
c000b851:	83 c4 10             	add    esp,0x10
c000b854:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b858:	84 c0                	test   al,al
c000b85a:	74 1d                	je     c000b879 <Krnl::beep(int, int, bool)+0x41>
c000b85c:	6b db 0a             	imul   ebx,ebx,0xa
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	53                   	push   ebx
c000b863:	e8 c4 9a 00 00       	call   c001532c <milliTenthSleep(unsigned int)>
c000b868:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b870:	83 c4 28             	add    esp,0x28
c000b873:	5b                   	pop    ebx
c000b874:	e9 fb b7 00 00       	jmp    c0017074 <HalMakeBeep(int)>
c000b879:	68 e6 00 00 00       	push   0xe6
c000b87e:	53                   	push   ebx
c000b87f:	68 fb b7 00 c0       	push   0xc000b7fb
c000b884:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b88a:	e8 69 95 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c000b88f:	83 c4 28             	add    esp,0x28
c000b892:	5b                   	pop    ebx
c000b893:	c3                   	ret    

c000b894 <User::loadClockSettings(int)>:
c000b894:	53                   	push   ebx
c000b895:	83 ec 14             	sub    esp,0x14
c000b898:	68 14 01 00 00       	push   0x114
c000b89d:	e8 c4 c1 ff ff       	call   c0007a66 <malloc>
c000b8a2:	83 c4 0c             	add    esp,0xc
c000b8a5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b8ab:	68 48 ff 01 c0       	push   0xc001ff48
c000b8b0:	50                   	push   eax
c000b8b1:	89 c3                	mov    ebx,eax
c000b8b3:	e8 b0 f6 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c000b8b8:	58                   	pop    eax
c000b8b9:	5a                   	pop    edx
c000b8ba:	6a 01                	push   0x1
c000b8bc:	53                   	push   ebx
c000b8bd:	e8 64 f7 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c000b8c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8c5:	e8 ba f7 ff ff       	call   c000b084 <File::close()>
c000b8ca:	83 c4 10             	add    esp,0x10
c000b8cd:	85 db                	test   ebx,ebx
c000b8cf:	74 0f                	je     c000b8e0 <User::loadClockSettings(int)+0x4c>
c000b8d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8da:	83 c4 08             	add    esp,0x8
c000b8dd:	5b                   	pop    ebx
c000b8de:	ff e0                	jmp    eax
c000b8e0:	83 c4 08             	add    esp,0x8
c000b8e3:	5b                   	pop    ebx
c000b8e4:	c3                   	ret    
c000b8e5:	90                   	nop

c000b8e6 <Clock::Clock(char const*)>:
c000b8e6:	83 ec 1c             	sub    esp,0x1c
c000b8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b8f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b8f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8f8:	e8 ad 06 00 00       	call   c000bfaa <Device::Device(char const*)>
c000b8fd:	ba 70 ff 01 c0       	mov    edx,0xc001ff70
c000b902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b906:	89 10                	mov    DWORD PTR [eax],edx
c000b908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b90c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b916:	90                   	nop
c000b917:	83 c4 1c             	add    esp,0x1c
c000b91a:	c3                   	ret    
c000b91b:	90                   	nop

c000b91c <Clock::~Clock()>:
c000b91c:	83 ec 1c             	sub    esp,0x1c
c000b91f:	ba 70 ff 01 c0       	mov    edx,0xc001ff70
c000b924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b928:	89 10                	mov    DWORD PTR [eax],edx
c000b92a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b92e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b931:	e8 e0 03 00 00       	call   c000bd16 <Device::~Device()>
c000b936:	90                   	nop
c000b937:	83 c4 1c             	add    esp,0x1c
c000b93a:	c3                   	ret    
c000b93b:	90                   	nop

c000b93c <Clock::~Clock()>:
c000b93c:	83 ec 1c             	sub    esp,0x1c
c000b93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b943:	89 04 24             	mov    DWORD PTR [esp],eax
c000b946:	e8 d1 ff ff ff       	call   c000b91c <Clock::~Clock()>
c000b94b:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b957:	89 04 24             	mov    DWORD PTR [esp],eax
c000b95a:	e8 6d ef ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000b95f:	83 c4 1c             	add    esp,0x1c
c000b962:	c3                   	ret    
c000b963:	90                   	nop

c000b964 <Clock::timeInSecondsLocal()>:
c000b964:	53                   	push   ebx
c000b965:	83 ec 14             	sub    esp,0x14
c000b968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b96e:	50                   	push   eax
c000b96f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b972:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b979:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b97f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b985:	89 cb                	mov    ebx,ecx
c000b987:	c1 fb 1f             	sar    ebx,0x1f
c000b98a:	01 c8                	add    eax,ecx
c000b98c:	11 da                	adc    edx,ebx
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	31 c9                	xor    ecx,ecx
c000b993:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b99a:	74 05                	je     c000b9a1 <Clock::timeInSecondsLocal()+0x3d>
c000b99c:	b9 08 07 00 00       	mov    ecx,0x708
c000b9a1:	31 db                	xor    ebx,ebx
c000b9a3:	01 c8                	add    eax,ecx
c000b9a5:	11 da                	adc    edx,ebx
c000b9a7:	83 c4 08             	add    esp,0x8
c000b9aa:	5b                   	pop    ebx
c000b9ab:	c3                   	ret    

c000b9ac <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b9ac:	57                   	push   edi
c000b9ad:	56                   	push   esi
c000b9ae:	53                   	push   ebx
c000b9af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9bd:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9c0:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9c7:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9cd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9d3:	99                   	cdq    
c000b9d4:	29 c6                	sub    esi,eax
c000b9d6:	19 d7                	sbb    edi,edx
c000b9d8:	89 f0                	mov    eax,esi
c000b9da:	31 f6                	xor    esi,esi
c000b9dc:	89 fa                	mov    edx,edi
c000b9de:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9e5:	74 05                	je     c000b9ec <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9e7:	be 08 07 00 00       	mov    esi,0x708
c000b9ec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9f0:	31 ff                	xor    edi,edi
c000b9f2:	29 f0                	sub    eax,esi
c000b9f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9f8:	19 fa                	sbb    edx,edi
c000b9fa:	89 d8                	mov    eax,ebx
c000b9fc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba00:	5b                   	pop    ebx
c000ba01:	5e                   	pop    esi
c000ba02:	5f                   	pop    edi
c000ba03:	ff e0                	jmp    eax

c000ba05 <datetimeToSeconds(datetime_t)>:
c000ba05:	55                   	push   ebp
c000ba06:	57                   	push   edi
c000ba07:	56                   	push   esi
c000ba08:	53                   	push   ebx
c000ba09:	83 ec 0c             	sub    esp,0xc
c000ba0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ba14:	0f b6 c6             	movzx  eax,dh
c000ba17:	0f b6 c0             	movzx  eax,al
c000ba1a:	0f b6 dd             	movzx  ebx,ch
c000ba1d:	6b f8 3c             	imul   edi,eax,0x3c
c000ba20:	89 d0                	mov    eax,edx
c000ba22:	0f b6 d2             	movzx  edx,dl
c000ba25:	fe cb                	dec    bl
c000ba27:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000ba2d:	89 ce                	mov    esi,ecx
c000ba2f:	c1 e8 10             	shr    eax,0x10
c000ba32:	0f b6 c9             	movzx  ecx,cl
c000ba35:	c1 ee 10             	shr    esi,0x10
c000ba38:	0f b6 c0             	movzx  eax,al
c000ba3b:	01 f8                	add    eax,edi
c000ba3d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba43:	01 c2                	add    edx,eax
c000ba45:	0f b6 c3             	movzx  eax,bl
c000ba48:	89 14 24             	mov    DWORD PTR [esp],edx
c000ba4b:	8b 04 85 c0 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0040]
c000ba52:	c1 fa 1f             	sar    edx,0x1f
c000ba55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba59:	80 fb 01             	cmp    bl,0x1
c000ba5c:	0f b7 f6             	movzx  esi,si
c000ba5f:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000ba63:	76 2a                	jbe    c000ba8f <datetimeToSeconds(datetime_t)+0x8a>
c000ba65:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba6b:	75 22                	jne    c000ba8f <datetimeToSeconds(datetime_t)+0x8a>
c000ba6d:	31 d2                	xor    edx,edx
c000ba6f:	bb 64 00 00 00       	mov    ebx,0x64
c000ba74:	89 f0                	mov    eax,esi
c000ba76:	f7 f3                	div    ebx
c000ba78:	85 d2                	test   edx,edx
c000ba7a:	75 12                	jne    c000ba8e <datetimeToSeconds(datetime_t)+0x89>
c000ba7c:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba82:	bb 90 01 00 00       	mov    ebx,0x190
c000ba87:	99                   	cdq    
c000ba88:	f7 fb                	idiv   ebx
c000ba8a:	85 d2                	test   edx,edx
c000ba8c:	75 01                	jne    c000ba8f <datetimeToSeconds(datetime_t)+0x8a>
c000ba8e:	41                   	inc    ecx
c000ba8f:	83 fe 46             	cmp    esi,0x46
c000ba92:	76 45                	jbe    c000bad9 <datetimeToSeconds(datetime_t)+0xd4>
c000ba94:	bb 46 00 00 00       	mov    ebx,0x46
c000ba99:	bd 64 00 00 00       	mov    ebp,0x64
c000ba9e:	bf 90 01 00 00       	mov    edi,0x190
c000baa3:	f6 c3 03             	test   bl,0x3
c000baa6:	b8 6d 01 00 00       	mov    eax,0x16d
c000baab:	75 23                	jne    c000bad0 <datetimeToSeconds(datetime_t)+0xcb>
c000baad:	89 d8                	mov    eax,ebx
c000baaf:	99                   	cdq    
c000bab0:	f7 fd                	idiv   ebp
c000bab2:	b8 6e 01 00 00       	mov    eax,0x16e
c000bab7:	85 d2                	test   edx,edx
c000bab9:	75 15                	jne    c000bad0 <datetimeToSeconds(datetime_t)+0xcb>
c000babb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bac1:	99                   	cdq    
c000bac2:	f7 ff                	idiv   edi
c000bac4:	83 fa 01             	cmp    edx,0x1
c000bac7:	19 c0                	sbb    eax,eax
c000bac9:	f7 d0                	not    eax
c000bacb:	05 6e 01 00 00       	add    eax,0x16e
c000bad0:	43                   	inc    ebx
c000bad1:	01 c1                	add    ecx,eax
c000bad3:	39 f3                	cmp    ebx,esi
c000bad5:	7c cc                	jl     c000baa3 <datetimeToSeconds(datetime_t)+0x9e>
c000bad7:	eb 34                	jmp    c000bb0d <datetimeToSeconds(datetime_t)+0x108>
c000bad9:	74 32                	je     c000bb0d <datetimeToSeconds(datetime_t)+0x108>
c000badb:	b8 45 00 00 00       	mov    eax,0x45
c000bae0:	89 c2                	mov    edx,eax
c000bae2:	83 e2 03             	and    edx,0x3
c000bae5:	39 f0                	cmp    eax,esi
c000bae7:	7e 0f                	jle    c000baf8 <datetimeToSeconds(datetime_t)+0xf3>
c000bae9:	83 fa 01             	cmp    edx,0x1
c000baec:	19 d2                	sbb    edx,edx
c000baee:	48                   	dec    eax
c000baef:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000baf6:	eb e8                	jmp    c000bae0 <datetimeToSeconds(datetime_t)+0xdb>
c000baf8:	85 d2                	test   edx,edx
c000bafa:	b8 6d 01 00 00       	mov    eax,0x16d
c000baff:	75 0a                	jne    c000bb0b <datetimeToSeconds(datetime_t)+0x106>
c000bb01:	83 fe 01             	cmp    esi,0x1
c000bb04:	19 c0                	sbb    eax,eax
c000bb06:	05 6e 01 00 00       	add    eax,0x16e
c000bb0b:	29 c1                	sub    ecx,eax
c000bb0d:	b8 80 51 01 00       	mov    eax,0x15180
c000bb12:	f7 e9                	imul   ecx
c000bb14:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb17:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb1b:	83 c4 0c             	add    esp,0xc
c000bb1e:	5b                   	pop    ebx
c000bb1f:	5e                   	pop    esi
c000bb20:	5f                   	pop    edi
c000bb21:	5d                   	pop    ebp
c000bb22:	c3                   	ret    
c000bb23:	90                   	nop

c000bb24 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb24:	57                   	push   edi
c000bb25:	56                   	push   esi
c000bb26:	53                   	push   ebx
c000bb27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb2b:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb2d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb38:	e8 c8 fe ff ff       	call   c000ba05 <datetimeToSeconds(datetime_t)>
c000bb3d:	59                   	pop    ecx
c000bb3e:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb45:	5b                   	pop    ebx
c000bb46:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb4c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb52:	89 cb                	mov    ebx,ecx
c000bb54:	c1 fb 1f             	sar    ebx,0x1f
c000bb57:	29 c8                	sub    eax,ecx
c000bb59:	19 da                	sbb    edx,ebx
c000bb5b:	31 c9                	xor    ecx,ecx
c000bb5d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb64:	74 05                	je     c000bb6b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb66:	b9 08 07 00 00       	mov    ecx,0x708
c000bb6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb6f:	31 db                	xor    ebx,ebx
c000bb71:	29 c8                	sub    eax,ecx
c000bb73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb77:	19 da                	sbb    edx,ebx
c000bb79:	89 f8                	mov    eax,edi
c000bb7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb7f:	5b                   	pop    ebx
c000bb80:	5e                   	pop    esi
c000bb81:	5f                   	pop    edi
c000bb82:	ff e0                	jmp    eax

c000bb84 <secondsToDatetime(unsigned long long)>:
c000bb84:	55                   	push   ebp
c000bb85:	57                   	push   edi
c000bb86:	56                   	push   esi
c000bb87:	53                   	push   ebx
c000bb88:	83 ec 1c             	sub    esp,0x1c
c000bb8b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb8f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb97:	6a 00                	push   0x0
c000bb99:	68 80 51 01 00       	push   0x15180
c000bb9e:	55                   	push   ebp
c000bb9f:	57                   	push   edi
c000bba0:	e8 6b 27 01 00       	call   c001e310 <__udivdi3>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbac:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bbb2:	6a 00                	push   0x0
c000bbb4:	68 80 51 01 00       	push   0x15180
c000bbb9:	55                   	push   ebp
c000bbba:	57                   	push   edi
c000bbbb:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbc0:	e8 4b 28 01 00       	call   c001e410 <__umoddi3>
c000bbc5:	83 c4 10             	add    esp,0x10
c000bbc8:	99                   	cdq    
c000bbc9:	f7 ff                	idiv   edi
c000bbcb:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbd0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbd3:	89 d0                	mov    eax,edx
c000bbd5:	99                   	cdq    
c000bbd6:	f7 ff                	idiv   edi
c000bbd8:	85 db                	test   ebx,ebx
c000bbda:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbdd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbe0:	79 11                	jns    c000bbf3 <secondsToDatetime(unsigned long long)+0x6f>
c000bbe2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbe6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbf1:	eb 07                	jmp    c000bbfa <secondsToDatetime(unsigned long long)+0x76>
c000bbf3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbf8:	89 d8                	mov    eax,ebx
c000bbfa:	99                   	cdq    
c000bbfb:	bf b4 05 00 00       	mov    edi,0x5b4
c000bc00:	f7 f9                	idiv   ecx
c000bc02:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc07:	31 d2                	xor    edx,edx
c000bc09:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc12:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc1a:	01 c3                	add    ebx,eax
c000bc1c:	89 d8                	mov    eax,ebx
c000bc1e:	f7 f1                	div    ecx
c000bc20:	31 d2                	xor    edx,edx
c000bc22:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc25:	89 d8                	mov    eax,ebx
c000bc27:	f7 f7                	div    edi
c000bc29:	31 d2                	xor    edx,edx
c000bc2b:	29 c1                	sub    ecx,eax
c000bc2d:	89 d8                	mov    eax,ebx
c000bc2f:	f7 f5                	div    ebp
c000bc31:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	29 c1                	sub    ecx,eax
c000bc3a:	89 c8                	mov    eax,ecx
c000bc3c:	f7 f5                	div    ebp
c000bc3e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc43:	31 d2                	xor    edx,edx
c000bc45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc49:	89 c8                	mov    eax,ecx
c000bc4b:	f7 f5                	div    ebp
c000bc4d:	31 d2                	xor    edx,edx
c000bc4f:	01 c3                	add    ebx,eax
c000bc51:	89 c8                	mov    eax,ecx
c000bc53:	f7 f7                	div    edi
c000bc55:	bf 99 00 00 00       	mov    edi,0x99
c000bc5a:	31 d2                	xor    edx,edx
c000bc5c:	29 c3                	sub    ebx,eax
c000bc5e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc66:	29 c3                	sub    ebx,eax
c000bc68:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc6b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc6e:	83 c1 02             	add    ecx,0x2
c000bc71:	89 c8                	mov    eax,ecx
c000bc73:	bb 05 00 00 00       	mov    ebx,0x5
c000bc78:	f7 f7                	div    edi
c000bc7a:	31 d2                	xor    edx,edx
c000bc7c:	89 c7                	mov    edi,eax
c000bc7e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc84:	83 c0 02             	add    eax,0x2
c000bc87:	f7 f3                	div    ebx
c000bc89:	89 eb                	mov    ebx,ebp
c000bc8b:	29 c3                	sub    ebx,eax
c000bc8d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc93:	88 1e                	mov    BYTE PTR [esi],bl
c000bc95:	19 c0                	sbb    eax,eax
c000bc97:	31 d2                	xor    edx,edx
c000bc99:	83 e0 0c             	and    eax,0xc
c000bc9c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bca0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bca4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bcac:	01 c7                	add    edi,eax
c000bcae:	83 f9 01             	cmp    ecx,0x1
c000bcb1:	0f 96 c2             	setbe  dl
c000bcb4:	fe c1                	inc    cl
c000bcb6:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bcb9:	8d 04 17             	lea    eax,[edi+edx*1]
c000bcbc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcc0:	83 c4 1c             	add    esp,0x1c
c000bcc3:	89 f0                	mov    eax,esi
c000bcc5:	5b                   	pop    ebx
c000bcc6:	5e                   	pop    esi
c000bcc7:	5f                   	pop    edi
c000bcc8:	5d                   	pop    ebp
c000bcc9:	c2 04 00             	ret    0x4

c000bccc <Clock::timeInDatetimeLocal()>:
c000bccc:	53                   	push   ebx
c000bccd:	83 ec 14             	sub    esp,0x14
c000bcd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcd8:	e8 87 fc ff ff       	call   c000b964 <Clock::timeInSecondsLocal()>
c000bcdd:	83 c4 0c             	add    esp,0xc
c000bce0:	52                   	push   edx
c000bce1:	50                   	push   eax
c000bce2:	53                   	push   ebx
c000bce3:	e8 9c fe ff ff       	call   c000bb84 <secondsToDatetime(unsigned long long)>
c000bce8:	89 d8                	mov    eax,ebx
c000bcea:	83 c4 14             	add    esp,0x14
c000bced:	5b                   	pop    ebx
c000bcee:	c2 04 00             	ret    0x4
c000bcf1:	90                   	nop

c000bcf2 <Device::hibernate()>:
c000bcf2:	c3                   	ret    
c000bcf3:	90                   	nop

c000bcf4 <Device::wake()>:
c000bcf4:	c3                   	ret    
c000bcf5:	90                   	nop

c000bcf6 <Device::detect()>:
c000bcf6:	c3                   	ret    
c000bcf7:	90                   	nop

c000bcf8 <Device::disableLegacy()>:
c000bcf8:	c3                   	ret    
c000bcf9:	90                   	nop

c000bcfa <Device::powerSaving(PowerSavingLevel)>:
c000bcfa:	c3                   	ret    
c000bcfb:	90                   	nop

c000bcfc <DriverlessDevice::close(int, int, void*)>:
c000bcfc:	31 c0                	xor    eax,eax
c000bcfe:	c3                   	ret    
c000bcff:	90                   	nop

c000bd00 <DriverlessDevice::detect()>:
c000bd00:	c3                   	ret    
c000bd01:	90                   	nop

c000bd02 <DriverlessDevice::open(int, int, void*)>:
c000bd02:	83 ec 18             	sub    esp,0x18
c000bd05:	68 f0 ff 01 c0       	push   0xc001fff0
c000bd0a:	e8 26 4a 00 00       	call   c0010735 <KePanic(char const*)>
c000bd0f:	83 c8 ff             	or     eax,0xffffffff
c000bd12:	83 c4 1c             	add    esp,0x1c
c000bd15:	c3                   	ret    

c000bd16 <Device::~Device()>:
c000bd16:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000bd1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd1f:	89 10                	mov    DWORD PTR [eax],edx
c000bd21:	90                   	nop
c000bd22:	c3                   	ret    
c000bd23:	90                   	nop

c000bd24 <Device::~Device()>:
c000bd24:	83 ec 1c             	sub    esp,0x1c
c000bd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd2e:	e8 e3 ff ff ff       	call   c000bd16 <Device::~Device()>
c000bd33:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000bd3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd42:	e8 85 eb ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000bd47:	83 c4 1c             	add    esp,0x1c
c000bd4a:	c3                   	ret    
c000bd4b:	90                   	nop

c000bd4c <Device::findAndLoadDriver()>:
c000bd4c:	c7 44 24 04 0e 00 02 c0 	mov    DWORD PTR [esp+0x4],0xc002000e
c000bd54:	e9 8d ec ff ff       	jmp    c000a9e6 <Dbg::kprintf(char const*, ...)>
c000bd59:	90                   	nop

c000bd5a <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd5a:	57                   	push   edi
c000bd5b:	b9 09 00 00 00       	mov    ecx,0x9
c000bd60:	56                   	push   esi
c000bd61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd65:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd69:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd73:	81 c7 18 01 00 00    	add    edi,0x118
c000bd79:	fc                   	cld    
c000bd7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd7c:	5e                   	pop    esi
c000bd7d:	5f                   	pop    edi
c000bd7e:	c3                   	ret    
c000bd7f:	90                   	nop

c000bd80 <Device::preOpenACPI(void*, char*, char*)>:
c000bd80:	57                   	push   edi
c000bd81:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd86:	56                   	push   esi
c000bd87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd93:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd9d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bda3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bda9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdab:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bdb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdb5:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdbc:	5e                   	pop    esi
c000bdbd:	5f                   	pop    edi
c000bdbe:	c3                   	ret    
c000bdbf:	90                   	nop

c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdc0:	53                   	push   ebx
c000bdc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdc9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdd6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdde:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bde2:	5b                   	pop    ebx
c000bde3:	e9 8c 05 00 00       	jmp    c000c374 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bde8 <Device::getParent()>:
c000bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdec:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdf2:	c3                   	ret    
c000bdf3:	90                   	nop

c000bdf4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdfc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000be01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be05:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be09:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be0d:	e9 d6 06 00 00       	jmp    c000c4e8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be12 <Device::addChild(Device*)>:
c000be12:	53                   	push   ebx
c000be13:	83 ec 08             	sub    esp,0x8
c000be16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be1e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be24:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be2c:	85 d2                	test   edx,edx
c000be2e:	74 04                	je     c000be34 <Device::addChild(Device*)+0x22>
c000be30:	89 d3                	mov    ebx,edx
c000be32:	eb f6                	jmp    c000be2a <Device::addChild(Device*)+0x18>
c000be34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be37:	83 ec 0c             	sub    esp,0xc
c000be3a:	6a 08                	push   0x8
c000be3c:	e8 25 bc ff ff       	call   c0007a66 <malloc>
c000be41:	89 03                	mov    DWORD PTR [ebx],eax
c000be43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be50:	83 c4 18             	add    esp,0x18
c000be53:	5b                   	pop    ebx
c000be54:	c3                   	ret    
c000be55:	90                   	nop

c000be56 <Device::removeAllChildren()>:
c000be56:	56                   	push   esi
c000be57:	53                   	push   ebx
c000be58:	52                   	push   edx
c000be59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be5d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be66:	74 17                	je     c000be7f <Device::removeAllChildren()+0x29>
c000be68:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be6b:	85 c0                	test   eax,eax
c000be6d:	74 0c                	je     c000be7b <Device::removeAllChildren()+0x25>
c000be6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000be71:	83 ec 0c             	sub    esp,0xc
c000be74:	50                   	push   eax
c000be75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be78:	83 c4 10             	add    esp,0x10
c000be7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be7d:	eb e4                	jmp    c000be63 <Device::removeAllChildren()+0xd>
c000be7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be8b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be98:	58                   	pop    eax
c000be99:	5b                   	pop    ebx
c000be9a:	5e                   	pop    esi
c000be9b:	c3                   	ret    

c000be9c <Device::hibernateAll()>:
c000be9c:	53                   	push   ebx
c000be9d:	83 ec 14             	sub    esp,0x14
c000bea0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea6:	53                   	push   ebx
c000bea7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000beaa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb0:	83 c4 10             	add    esp,0x10
c000beb3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb6:	74 0f                	je     c000bec7 <Device::hibernateAll()+0x2b>
c000beb8:	83 ec 0c             	sub    esp,0xc
c000bebb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bebe:	e8 d9 ff ff ff       	call   c000be9c <Device::hibernateAll()>
c000bec3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec5:	eb e9                	jmp    c000beb0 <Device::hibernateAll()+0x14>
c000bec7:	83 c4 08             	add    esp,0x8
c000beca:	5b                   	pop    ebx
c000becb:	c3                   	ret    

c000becc <Device::wakeAll()>:
c000becc:	53                   	push   ebx
c000becd:	83 ec 14             	sub    esp,0x14
c000bed0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bed6:	53                   	push   ebx
c000bed7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000beda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bee6:	74 0f                	je     c000bef7 <Device::wakeAll()+0x2b>
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beee:	e8 d9 ff ff ff       	call   c000becc <Device::wakeAll()>
c000bef3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bef5:	eb e9                	jmp    c000bee0 <Device::wakeAll()+0x14>
c000bef7:	83 c4 08             	add    esp,0x8
c000befa:	5b                   	pop    ebx
c000befb:	c3                   	ret    

c000befc <Device::detectAll()>:
c000befc:	53                   	push   ebx
c000befd:	83 ec 14             	sub    esp,0x14
c000bf00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf04:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf06:	53                   	push   ebx
c000bf07:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf10:	83 c4 10             	add    esp,0x10
c000bf13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf16:	74 0f                	je     c000bf27 <Device::detectAll()+0x2b>
c000bf18:	83 ec 0c             	sub    esp,0xc
c000bf1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf1e:	e8 d9 ff ff ff       	call   c000befc <Device::detectAll()>
c000bf23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf25:	eb e9                	jmp    c000bf10 <Device::detectAll()+0x14>
c000bf27:	83 c4 08             	add    esp,0x8
c000bf2a:	5b                   	pop    ebx
c000bf2b:	c3                   	ret    

c000bf2c <Device::disableLegacyAll()>:
c000bf2c:	c3                   	ret    
c000bf2d:	90                   	nop

c000bf2e <Device::loadDriversForAll()>:
c000bf2e:	c3                   	ret    
c000bf2f:	90                   	nop

c000bf30 <Device::closeAll()>:
c000bf30:	53                   	push   ebx
c000bf31:	83 ec 08             	sub    esp,0x8
c000bf34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf38:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf3a:	6a 00                	push   0x0
c000bf3c:	6a 00                	push   0x0
c000bf3e:	6a 00                	push   0x0
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf50:	74 0f                	je     c000bf61 <Device::closeAll()+0x31>
c000bf52:	83 ec 0c             	sub    esp,0xc
c000bf55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf58:	e8 d3 ff ff ff       	call   c000bf30 <Device::closeAll()>
c000bf5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf5f:	eb e9                	jmp    c000bf4a <Device::closeAll()+0x1a>
c000bf61:	83 c4 08             	add    esp,0x8
c000bf64:	5b                   	pop    ebx
c000bf65:	c3                   	ret    

c000bf66 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf66:	56                   	push   esi
c000bf67:	53                   	push   ebx
c000bf68:	83 ec 0c             	sub    esp,0xc
c000bf6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf6f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf75:	56                   	push   esi
c000bf76:	53                   	push   ebx
c000bf77:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf86:	74 0f                	je     c000bf97 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf88:	52                   	push   edx
c000bf89:	52                   	push   edx
c000bf8a:	56                   	push   esi
c000bf8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf8e:	e8 d3 ff ff ff       	call   c000bf66 <Device::powerSavingAll(PowerSavingLevel)>
c000bf93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf95:	eb e9                	jmp    c000bf80 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf97:	58                   	pop    eax
c000bf98:	5b                   	pop    ebx
c000bf99:	5e                   	pop    esi
c000bf9a:	c3                   	ret    
c000bf9b:	90                   	nop

c000bf9c <Device::setName(char const*)>:
c000bf9c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bfa4:	e9 e7 46 ff ff       	jmp    c0000690 <strcpy>
c000bfa9:	90                   	nop

c000bfaa <Device::Device(char const*)>:
c000bfaa:	83 ec 2c             	sub    esp,0x2c
c000bfad:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000bfb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfb6:	89 10                	mov    DWORD PTR [eax],edx
c000bfb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfbc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfd8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfe6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bff0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bff8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bffc:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfff:	e8 98 ff ff ff       	call   c000bf9c <Device::setName(char const*)>
c000c004:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000c00c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c010:	89 04 24             	mov    DWORD PTR [esp],eax
c000c013:	e8 4e ba ff ff       	call   c0007a66 <malloc>
c000c018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c01e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c025:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c029:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c02f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c033:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c039:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c03f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c043:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c049:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c054:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c05b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c05f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c06a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c078:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c082:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c086:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c094:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c09e:	90                   	nop
c000c09f:	83 c4 2c             	add    esp,0x2c
c000c0a2:	c3                   	ret    
c000c0a3:	90                   	nop

c000c0a4 <Device::getName()>:
c000c0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0a8:	05 d0 00 00 00       	add    eax,0xd0
c000c0ad:	c3                   	ret    

c000c0ae <DriverlessDevice::DriverlessDevice(char const*)>:
c000c0ae:	83 ec 1c             	sub    esp,0x1c
c000c0b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c0b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c0bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0c0:	e8 e5 fe ff ff       	call   c000bfaa <Device::Device(char const*)>
c000c0c5:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c000c0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0ce:	89 10                	mov    DWORD PTR [eax],edx
c000c0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0d4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0de:	90                   	nop
c000c0df:	83 c4 1c             	add    esp,0x1c
c000c0e2:	c3                   	ret    
c000c0e3:	90                   	nop

c000c0e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0e4:	57                   	push   edi
c000c0e5:	56                   	push   esi
c000c0e6:	53                   	push   ebx
c000c0e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0f3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0f9:	75 0c                	jne    c000c107 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0fb:	52                   	push   edx
c000c0fc:	52                   	push   edx
c000c0fd:	53                   	push   ebx
c000c0fe:	56                   	push   esi
c000c0ff:	e8 a2 26 01 00       	call   c001e7a6 <LinkedList<Device>::addElement(Device*)>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c10d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c110:	74 12                	je     c000c124 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c112:	50                   	push   eax
c000c113:	57                   	push   edi
c000c114:	56                   	push   esi
c000c115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c118:	e8 c7 ff ff ff       	call   c000c0e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c11d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c11f:	83 c4 10             	add    esp,0x10
c000c122:	eb e9                	jmp    c000c10d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c124:	5b                   	pop    ebx
c000c125:	5e                   	pop    esi
c000c126:	5f                   	pop    edi
c000c127:	c3                   	ret    

c000c128 <getDevicesOfType(DeviceType)>:
c000c128:	53                   	push   ebx
c000c129:	83 ec 14             	sub    esp,0x14
c000c12c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c130:	53                   	push   ebx
c000c131:	e8 40 27 01 00       	call   c001e876 <LinkedList<Device>::LinkedList()>
c000c136:	83 c4 0c             	add    esp,0xc
c000c139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c13d:	53                   	push   ebx
c000c13e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c144:	e8 9b ff ff ff       	call   c000c0e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c149:	83 c4 18             	add    esp,0x18
c000c14c:	89 d8                	mov    eax,ebx
c000c14e:	5b                   	pop    ebx
c000c14f:	c2 04 00             	ret    0x4
c000c152:	66 90                	xchg   ax,ax

c000c154 <HardDiskController::HardDiskController(char const*)>:
c000c154:	83 ec 1c             	sub    esp,0x1c
c000c157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c15b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c15f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c163:	89 04 24             	mov    DWORD PTR [esp],eax
c000c166:	e8 3f fe ff ff       	call   c000bfaa <Device::Device(char const*)>
c000c16b:	ba a8 00 02 c0       	mov    edx,0xc00200a8
c000c170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c174:	89 10                	mov    DWORD PTR [eax],edx
c000c176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c17a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c184:	90                   	nop
c000c185:	83 c4 1c             	add    esp,0x1c
c000c188:	c3                   	ret    
c000c189:	90                   	nop
c000c18a:	66 90                	xchg   ax,ax

c000c18c <HardDiskController::~HardDiskController()>:
c000c18c:	83 ec 1c             	sub    esp,0x1c
c000c18f:	ba a8 00 02 c0       	mov    edx,0xc00200a8
c000c194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c198:	89 10                	mov    DWORD PTR [eax],edx
c000c19a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c19e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1a1:	e8 70 fb ff ff       	call   c000bd16 <Device::~Device()>
c000c1a6:	90                   	nop
c000c1a7:	83 c4 1c             	add    esp,0x1c
c000c1aa:	c3                   	ret    
c000c1ab:	90                   	nop

c000c1ac <HardDiskController::~HardDiskController()>:
c000c1ac:	83 ec 1c             	sub    esp,0x1c
c000c1af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1b6:	e8 d1 ff ff ff       	call   c000c18c <HardDiskController::~HardDiskController()>
c000c1bb:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c1c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1ca:	e8 fd e6 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000c1cf:	83 c4 1c             	add    esp,0x1c
c000c1d2:	c3                   	ret    
c000c1d3:	90                   	nop

c000c1d4 <PhysicalDisk::eject()>:
c000c1d4:	83 c8 ff             	or     eax,0xffffffff
c000c1d7:	c3                   	ret    

c000c1d8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1d8:	83 ec 1c             	sub    esp,0x1c
c000c1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c1e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1ea:	e8 bb fd ff ff       	call   c000bfaa <Device::Device(char const*)>
c000c1ef:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000c1f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f8:	89 10                	mov    DWORD PTR [eax],edx
c000c1fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c209:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c214:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c222:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c226:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c22c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c230:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c23a:	90                   	nop
c000c23b:	83 c4 1c             	add    esp,0x1c
c000c23e:	c3                   	ret    
c000c23f:	90                   	nop

c000c240 <PhysicalDisk::startCache()>:
c000c240:	56                   	push   esi
c000c241:	53                   	push   ebx
c000c242:	83 ec 10             	sub    esp,0x10
c000c245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c249:	6a 44                	push   0x44
c000c24b:	e8 16 b8 ff ff       	call   c0007a66 <malloc>
c000c250:	89 c6                	mov    esi,eax
c000c252:	58                   	pop    eax
c000c253:	5a                   	pop    edx
c000c254:	53                   	push   ebx
c000c255:	56                   	push   esi
c000c256:	e8 81 16 00 00       	call   c000d8dc <VCache::VCache(PhysicalDisk*)>
c000c25b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c261:	83 c4 14             	add    esp,0x14
c000c264:	5b                   	pop    ebx
c000c265:	5e                   	pop    esi
c000c266:	c3                   	ret    
c000c267:	90                   	nop

c000c268 <PhysicalDisk::~PhysicalDisk()>:
c000c268:	83 ec 1c             	sub    esp,0x1c
c000c26b:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000c270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c274:	89 10                	mov    DWORD PTR [eax],edx
c000c276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c27d:	e8 94 fa ff ff       	call   c000bd16 <Device::~Device()>
c000c282:	90                   	nop
c000c283:	83 c4 1c             	add    esp,0x1c
c000c286:	c3                   	ret    
c000c287:	90                   	nop

c000c288 <PhysicalDisk::~PhysicalDisk()>:
c000c288:	83 ec 1c             	sub    esp,0x1c
c000c28b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c28f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c292:	e8 d1 ff ff ff       	call   c000c268 <PhysicalDisk::~PhysicalDisk()>
c000c297:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c29f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2a6:	e8 21 e6 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000c2ab:	83 c4 1c             	add    esp,0x1c
c000c2ae:	c3                   	ret    
c000c2af:	90                   	nop

c000c2b0 <int_handler>:
c000c2b0:	55                   	push   ebp
c000c2b1:	57                   	push   edi
c000c2b2:	56                   	push   esi
c000c2b3:	53                   	push   ebx
c000c2b4:	83 ec 1c             	sub    esp,0x1c
c000c2b7:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2be:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2c2:	74 0b                	je     c000c2cf <int_handler+0x1f>
c000c2c4:	fa                   	cli    
c000c2c5:	f4                   	hlt    
c000c2c6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2cd:	75 f5                	jne    c000c2c4 <int_handler+0x14>
c000c2cf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2d2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2d5:	83 f8 17             	cmp    eax,0x17
c000c2d8:	76 3d                	jbe    c000c317 <int_handler+0x67>
c000c2da:	c1 e6 04             	shl    esi,0x4
c000c2dd:	31 db                	xor    ebx,ebx
c000c2df:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2e5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2eb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2ef:	85 c0                	test   eax,eax
c000c2f1:	74 12                	je     c000c305 <int_handler+0x55>
c000c2f3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2f6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c301:	74 1e                	je     c000c321 <int_handler+0x71>
c000c303:	ff d0                	call   eax
c000c305:	43                   	inc    ebx
c000c306:	83 fb 04             	cmp    ebx,0x4
c000c309:	75 e0                	jne    c000c2eb <int_handler+0x3b>
c000c30b:	83 c4 1c             	add    esp,0x1c
c000c30e:	31 c0                	xor    eax,eax
c000c310:	5b                   	pop    ebx
c000c311:	31 d2                	xor    edx,edx
c000c313:	5e                   	pop    esi
c000c314:	5f                   	pop    edi
c000c315:	5d                   	pop    ebp
c000c316:	c3                   	ret    
c000c317:	89 04 24             	mov    DWORD PTR [esp],eax
c000c31a:	e8 91 ad 00 00       	call   c00170b0 <HalEndOfInterrupt(int)>
c000c31f:	eb b9                	jmp    c000c2da <int_handler+0x2a>
c000c321:	ff d0                	call   eax
c000c323:	83 c4 1c             	add    esp,0x1c
c000c326:	5b                   	pop    ebx
c000c327:	5e                   	pop    esi
c000c328:	5f                   	pop    edi
c000c329:	5d                   	pop    ebp
c000c32a:	c3                   	ret    

c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c32b:	56                   	push   esi
c000c32c:	31 c0                	xor    eax,eax
c000c32e:	53                   	push   ebx
c000c32f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c337:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c33b:	89 ca                	mov    edx,ecx
c000c33d:	c1 e2 04             	shl    edx,0x4
c000c340:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c348:	74 16                	je     c000c360 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000c34a:	40                   	inc    eax
c000c34b:	83 f8 04             	cmp    eax,0x4
c000c34e:	75 f0                	jne    c000c340 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c350:	b8 04 01 02 c0       	mov    eax,0xc0020104
c000c355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c359:	5b                   	pop    ebx
c000c35a:	5e                   	pop    esi
c000c35b:	e9 d5 43 00 00       	jmp    c0010735 <KePanic(char const*)>
c000c360:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c363:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c36a:	5b                   	pop    ebx
c000c36b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c372:	5e                   	pop    esi
c000c373:	c3                   	ret    

c000c374 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c374:	56                   	push   esi
c000c375:	53                   	push   ebx
c000c376:	83 ec 34             	sub    esp,0x34
c000c379:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000c37e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c382:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c386:	88 c1                	mov    cl,al
c000c388:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c38d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c394:	74 50                	je     c000c3e6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c396:	84 c9                	test   cl,cl
c000c398:	74 20                	je     c000c3ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c39a:	83 fb 0f             	cmp    ebx,0xf
c000c39d:	0f 8f da 00 00 00    	jg     c000c47d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c3a3:	0f b6 9b 40 1b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde4c0]
c000c3aa:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000c3b2:	d1 e8                	shr    eax,1
c000c3b4:	24 01                	and    al,0x1
c000c3b6:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c3ba:	c7 04 24 11 01 02 c0 	mov    DWORD PTR [esp],0xc0020111
c000c3c1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3c6:	31 f6                	xor    esi,esi
c000c3c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3cc:	e8 15 e6 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000c3d1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3d6:	85 c0                	test   eax,eax
c000c3d8:	7f 4b                	jg     c000c425 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000c3da:	c7 04 24 28 01 02 c0 	mov    DWORD PTR [esp],0xc0020128
c000c3e1:	e8 4f 43 00 00       	call   c0010735 <KePanic(char const*)>
c000c3e6:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000c3e9:	31 c0                	xor    eax,eax
c000c3eb:	89 ca                	mov    edx,ecx
c000c3ed:	c1 e2 04             	shl    edx,0x4
c000c3f0:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000c3f7:	85 f6                	test   esi,esi
c000c3f9:	0f 84 94 00 00 00    	je     c000c493 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000c3ff:	40                   	inc    eax
c000c400:	83 f8 04             	cmp    eax,0x4
c000c403:	75 eb                	jne    c000c3f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000c405:	c7 04 24 7c 01 02 c0 	mov    DWORD PTR [esp],0xc002017c
c000c40c:	e8 24 43 00 00       	call   c0010735 <KePanic(char const*)>
c000c411:	83 c4 34             	add    esp,0x34
c000c414:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c419:	5b                   	pop    ebx
c000c41a:	5e                   	pop    esi
c000c41b:	c3                   	ret    
c000c41c:	46                   	inc    esi
c000c41d:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000c423:	7e b5                	jle    c000c3da <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000c425:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c429:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c430:	89 04 24             	mov    DWORD PTR [esp],eax
c000c433:	e8 8e 12 01 00       	call   c001d6c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c438:	84 c0                	test   al,al
c000c43a:	74 e0                	je     c000c41c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c43c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000c441:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c445:	31 c0                	xor    eax,eax
c000c447:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c44b:	88 d8                	mov    al,bl
c000c44d:	04 20                	add    al,0x20
c000c44f:	0f b6 c0             	movzx  eax,al
c000c452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c456:	31 c0                	xor    eax,eax
c000c458:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c45c:	31 c0                	xor    eax,eax
c000c45e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c462:	0f b6 c3             	movzx  eax,bl
c000c465:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c469:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c470:	89 04 24             	mov    DWORD PTR [esp],eax
c000c473:	e8 c0 13 01 00       	call   c001d838 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c478:	e9 69 ff ff ff       	jmp    c000c3e6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c47d:	c7 04 24 44 01 02 c0 	mov    DWORD PTR [esp],0xc0020144
c000c484:	e8 ac 42 00 00       	call   c0010735 <KePanic(char const*)>
c000c489:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000c48e:	e9 27 ff ff ff       	jmp    c000c3ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c493:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c497:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c49a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4a1:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000c4a5:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4ac:	83 c4 34             	add    esp,0x34
c000c4af:	89 d8                	mov    eax,ebx
c000c4b1:	5b                   	pop    ebx
c000c4b2:	5e                   	pop    esi
c000c4b3:	c3                   	ret    

c000c4b4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4bc:	c1 e0 04             	shl    eax,0x4
c000c4bf:	8d 50 10             	lea    edx,[eax+0x10]
c000c4c2:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4c8:	74 08                	je     c000c4d2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4ca:	83 c0 04             	add    eax,0x4
c000c4cd:	39 d0                	cmp    eax,edx
c000c4cf:	75 f1                	jne    c000c4c2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4d1:	c3                   	ret    
c000c4d2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4dc:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4e6:	eb e2                	jmp    c000c4ca <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4e8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4e8:	56                   	push   esi
c000c4e9:	53                   	push   ebx
c000c4ea:	83 ec 14             	sub    esp,0x14
c000c4ed:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000c4f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c4f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c4fa:	74 0e                	je     c000c50a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4fc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c501:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c508:	75 30                	jne    c000c53a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000c50a:	8d 43 20             	lea    eax,[ebx+0x20]
c000c50d:	c1 e0 04             	shl    eax,0x4
c000c510:	8d 50 10             	lea    edx,[eax+0x10]
c000c513:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c519:	74 0d                	je     c000c528 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c51b:	83 c0 04             	add    eax,0x4
c000c51e:	39 d0                	cmp    eax,edx
c000c520:	75 f1                	jne    c000c513 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c522:	83 c4 14             	add    esp,0x14
c000c525:	5b                   	pop    ebx
c000c526:	5e                   	pop    esi
c000c527:	c3                   	ret    
c000c528:	31 c9                	xor    ecx,ecx
c000c52a:	31 db                	xor    ebx,ebx
c000c52c:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000c532:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000c538:	eb e1                	jmp    c000c51b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c53a:	83 fb 0f             	cmp    ebx,0xf
c000c53d:	7f 09                	jg     c000c548 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000c53f:	0f b6 9b 40 1b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde4c0]
c000c546:	eb c2                	jmp    c000c50a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c548:	c7 04 24 35 01 02 c0 	mov    DWORD PTR [esp],0xc0020135
c000c54f:	e8 e1 41 00 00       	call   c0010735 <KePanic(char const*)>
c000c554:	eb b4                	jmp    c000c50a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c556 <setupINTS()>:
c000c556:	31 c0                	xor    eax,eax
c000c558:	31 d2                	xor    edx,edx
c000c55a:	31 c9                	xor    ecx,ecx
c000c55c:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000c562:	31 d2                	xor    edx,edx
c000c564:	83 c0 10             	add    eax,0x10
c000c567:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000c56d:	31 c9                	xor    ecx,ecx
c000c56f:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000c575:	31 d2                	xor    edx,edx
c000c577:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000c57d:	31 c9                	xor    ecx,ecx
c000c57f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000c585:	31 d2                	xor    edx,edx
c000c587:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000c58d:	31 c9                	xor    ecx,ecx
c000c58f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000c595:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000c59b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5a0:	75 b6                	jne    c000c558 <setupINTS()+0x2>
c000c5a2:	c3                   	ret    

c000c5a3 <convertLegacyIRQNumber(int)>:
c000c5a3:	83 ec 1c             	sub    esp,0x1c
c000c5a6:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5b0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5b7:	74 0c                	je     c000c5c5 <convertLegacyIRQNumber(int)+0x22>
c000c5b9:	83 f8 0f             	cmp    eax,0xf
c000c5bc:	7f 0b                	jg     c000c5c9 <convertLegacyIRQNumber(int)+0x26>
c000c5be:	0f b6 80 40 1b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde4c0]
c000c5c5:	83 c4 1c             	add    esp,0x1c
c000c5c8:	c3                   	ret    
c000c5c9:	c7 04 24 44 01 02 c0 	mov    DWORD PTR [esp],0xc0020144
c000c5d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d4:	e8 5c 41 00 00       	call   c0010735 <KePanic(char const*)>
c000c5d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5dd:	83 c4 1c             	add    esp,0x1c
c000c5e0:	c3                   	ret    
c000c5e1:	90                   	nop

c000c5e2 <startGUI(void*)>:
c000c5e2:	55                   	push   ebp
c000c5e3:	89 e5                	mov    ebp,esp
c000c5e5:	53                   	push   ebx
c000c5e6:	83 ec 14             	sub    esp,0x14
c000c5e9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5ee:	48                   	dec    eax
c000c5ef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5f9:	85 c0                	test   eax,eax
c000c5fb:	75 01                	jne    c000c5fe <startGUI(void*)+0x1c>
c000c5fd:	fb                   	sti    
c000c5fe:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c604:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c60c:	c7 04 24 a1 01 02 c0 	mov    DWORD PTR [esp],0xc00201a1
c000c613:	e8 b5 7f 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000c618:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c61c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c61f:	e8 e5 81 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000c624:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c62a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c632:	c7 04 24 bb 01 02 c0 	mov    DWORD PTR [esp],0xc00201bb
c000c639:	e8 8f 7f 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000c63e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c642:	89 04 24             	mov    DWORD PTR [esp],eax
c000c645:	e8 bf 81 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000c64a:	90                   	nop
c000c64b:	83 c4 14             	add    esp,0x14
c000c64e:	5b                   	pop    ebx
c000c64f:	5d                   	pop    ebp
c000c650:	c3                   	ret    

c000c651 <startGUIVESA(void*)>:
c000c651:	55                   	push   ebp
c000c652:	89 e5                	mov    ebp,esp
c000c654:	53                   	push   ebx
c000c655:	83 ec 14             	sub    esp,0x14
c000c658:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c65d:	48                   	dec    eax
c000c65e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c663:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c668:	85 c0                	test   eax,eax
c000c66a:	75 01                	jne    c000c66d <startGUIVESA(void*)+0x1c>
c000c66c:	fb                   	sti    
c000c66d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c673:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c67b:	c7 04 24 d9 01 02 c0 	mov    DWORD PTR [esp],0xc00201d9
c000c682:	e8 46 7f 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000c687:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c68b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c68e:	e8 76 81 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000c693:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c699:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c6a1:	c7 04 24 bb 01 02 c0 	mov    DWORD PTR [esp],0xc00201bb
c000c6a8:	e8 20 7f 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000c6ad:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6b1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6b4:	e8 50 81 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000c6b9:	90                   	nop
c000c6ba:	83 c4 14             	add    esp,0x14
c000c6bd:	5b                   	pop    ebx
c000c6be:	5d                   	pop    ebp
c000c6bf:	c3                   	ret    

c000c6c0 <sendKeyToTerminal(unsigned char)>:
c000c6c0:	55                   	push   ebp
c000c6c1:	89 e5                	mov    ebp,esp
c000c6c3:	83 ec 38             	sub    esp,0x38
c000c6c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6cc:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6d1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c6d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6dc:	e8 79 c6 ff ff       	call   c0008d5a <VgaText::receiveKey(unsigned char)>
c000c6e1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c6e5:	74 10                	je     c000c6f7 <sendKeyToTerminal(unsigned char)+0x37>
c000c6e7:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c6eb:	74 0a                	je     c000c6f7 <sendKeyToTerminal(unsigned char)+0x37>
c000c6ed:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c6f1:	0f 85 8c 00 00 00    	jne    c000c783 <sendKeyToTerminal(unsigned char)+0xc3>
c000c6f7:	fa                   	cli    
c000c6f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6fd:	40                   	inc    eax
c000c6fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c703:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c708:	40                   	inc    eax
c000c709:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c70e:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c713:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c716:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c720:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c724:	74 1c                	je     c000c742 <sendKeyToTerminal(unsigned char)+0x82>
c000c726:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c729:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c72c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c72f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c732:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c735:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c738:	89 04 24             	mov    DWORD PTR [esp],eax
c000c73b:	e8 98 8d 00 00       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c000c740:	eb de                	jmp    c000c720 <sendKeyToTerminal(unsigned char)+0x60>
c000c742:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c747:	48                   	dec    eax
c000c748:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c74d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c752:	85 c0                	test   eax,eax
c000c754:	75 18                	jne    c000c76e <sendKeyToTerminal(unsigned char)+0xae>
c000c756:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c75b:	85 c0                	test   eax,eax
c000c75d:	74 0f                	je     c000c76e <sendKeyToTerminal(unsigned char)+0xae>
c000c75f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c769:	e8 e2 88 00 00       	call   c0015050 <schedule()>
c000c76e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c773:	48                   	dec    eax
c000c774:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c779:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c77e:	85 c0                	test   eax,eax
c000c780:	75 01                	jne    c000c783 <sendKeyToTerminal(unsigned char)+0xc3>
c000c782:	fb                   	sti    
c000c783:	90                   	nop
c000c784:	c9                   	leave  
c000c785:	c3                   	ret    

c000c786 <sendKeyboardToken(KeyboardToken)>:
c000c786:	55                   	push   ebp
c000c787:	89 e5                	mov    ebp,esp
c000c789:	83 ec 28             	sub    esp,0x28
c000c78c:	e8 f4 3f 00 00       	call   c0010785 <Krnl::userIOReceived()>
c000c791:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000c795:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c799:	80 f2 01             	xor    dl,0x1
c000c79c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7a2:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7a7:	85 c0                	test   eax,eax
c000c7a9:	74 1d                	je     c000c7c8 <sendKeyboardToken(KeyboardToken)+0x42>
c000c7ab:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7b0:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000c7b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7bb:	89 14 24             	mov    DWORD PTR [esp],edx
c000c7be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c7c1:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000c7c6:	ff d0                	call   eax
c000c7c8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7cc:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000c7d0:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c7d7:	38 c2                	cmp    dl,al
c000c7d9:	74 1b                	je     c000c7f6 <sendKeyboardToken(KeyboardToken)+0x70>
c000c7db:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000c7df:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7e4:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c7eb:	0f b6 c0             	movzx  eax,al
c000c7ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000c7f1:	e8 96 bc ff ff       	call   c000848c <setTerminalScrollLock(bool)>
c000c7f6:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000c7fa:	84 c0                	test   al,al
c000c7fc:	0f 84 c4 00 00 00    	je     c000c8c6 <sendKeyboardToken(KeyboardToken)+0x140>
c000c802:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c806:	3d 18 03 00 00       	cmp    eax,0x318
c000c80b:	75 06                	jne    c000c813 <sendKeyboardToken(KeyboardToken)+0x8d>
c000c80d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c813:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c817:	3d 19 03 00 00       	cmp    eax,0x319
c000c81c:	75 06                	jne    c000c824 <sendKeyboardToken(KeyboardToken)+0x9e>
c000c81e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c824:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c828:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c82d:	75 06                	jne    c000c835 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c82f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c835:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c839:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c83e:	75 06                	jne    c000c846 <sendKeyboardToken(KeyboardToken)+0xc0>
c000c840:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c846:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c84a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c84f:	75 06                	jne    c000c857 <sendKeyboardToken(KeyboardToken)+0xd1>
c000c851:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c857:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c85b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c860:	75 06                	jne    c000c868 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c862:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c868:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c86c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c871:	75 06                	jne    c000c879 <sendKeyboardToken(KeyboardToken)+0xf3>
c000c873:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c879:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c87d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c882:	75 06                	jne    c000c88a <sendKeyboardToken(KeyboardToken)+0x104>
c000c884:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c88a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c88e:	3d 20 03 00 00       	cmp    eax,0x320
c000c893:	75 06                	jne    c000c89b <sendKeyboardToken(KeyboardToken)+0x115>
c000c895:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c89b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c89f:	3d 21 03 00 00       	cmp    eax,0x321
c000c8a4:	75 06                	jne    c000c8ac <sendKeyboardToken(KeyboardToken)+0x126>
c000c8a6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8ac:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8b0:	3d 22 03 00 00       	cmp    eax,0x322
c000c8b5:	0f 85 dd 00 00 00    	jne    c000c998 <sendKeyboardToken(KeyboardToken)+0x212>
c000c8bb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8c1:	e9 d2 00 00 00       	jmp    c000c998 <sendKeyboardToken(KeyboardToken)+0x212>
c000c8c6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8ca:	3d 18 03 00 00       	cmp    eax,0x318
c000c8cf:	75 0a                	jne    c000c8db <sendKeyboardToken(KeyboardToken)+0x155>
c000c8d1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8db:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8df:	3d 19 03 00 00       	cmp    eax,0x319
c000c8e4:	75 0a                	jne    c000c8f0 <sendKeyboardToken(KeyboardToken)+0x16a>
c000c8e6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8f4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8f9:	75 0a                	jne    c000c905 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c8fb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c901:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c905:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c909:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c90e:	75 0a                	jne    c000c91a <sendKeyboardToken(KeyboardToken)+0x194>
c000c910:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c916:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c91a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c91e:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c923:	75 0a                	jne    c000c92f <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c925:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c92b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c92f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c933:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c938:	75 0a                	jne    c000c944 <sendKeyboardToken(KeyboardToken)+0x1be>
c000c93a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c940:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c944:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c948:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c94d:	75 0a                	jne    c000c959 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000c94f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c955:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c959:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c95d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c962:	75 0a                	jne    c000c96e <sendKeyboardToken(KeyboardToken)+0x1e8>
c000c964:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c96a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c972:	3d 20 03 00 00       	cmp    eax,0x320
c000c977:	75 0a                	jne    c000c983 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000c979:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c97f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c983:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c987:	3d 21 03 00 00       	cmp    eax,0x321
c000c98c:	75 0a                	jne    c000c998 <sendKeyboardToken(KeyboardToken)+0x212>
c000c98e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c994:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c998:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c99c:	3d 00 02 00 00       	cmp    eax,0x200
c000c9a1:	75 3b                	jne    c000c9de <sendKeyboardToken(KeyboardToken)+0x258>
c000c9a3:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000c9aa:	34 01                	xor    al,0x1
c000c9ac:	84 c0                	test   al,al
c000c9ae:	74 2e                	je     c000c9de <sendKeyboardToken(KeyboardToken)+0x258>
c000c9b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000c9bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c9c5:	c7 44 24 04 e2 c5 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c5e2
c000c9cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9d0:	e8 23 84 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c000c9d5:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9dc:	eb 44                	jmp    c000ca22 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9e2:	3d 01 02 00 00       	cmp    eax,0x201
c000c9e7:	75 39                	jne    c000ca22 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9e9:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000c9f0:	34 01                	xor    al,0x1
c000c9f2:	84 c0                	test   al,al
c000c9f4:	74 2c                	je     c000ca22 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9f6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9fb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000ca03:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ca0b:	c7 44 24 04 51 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c651
c000ca13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca16:	e8 dd 83 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c000ca1b:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca22:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca26:	3d 25 03 00 00       	cmp    eax,0x325
c000ca2b:	75 06                	jne    c000ca33 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000ca2d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca33:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca37:	3d 24 03 00 00       	cmp    eax,0x324
c000ca3c:	75 06                	jne    c000ca44 <sendKeyboardToken(KeyboardToken)+0x2be>
c000ca3e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca44:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca48:	3d 23 03 00 00       	cmp    eax,0x323
c000ca4d:	75 06                	jne    c000ca55 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000ca4f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca55:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca59:	3d 26 03 00 00       	cmp    eax,0x326
c000ca5e:	75 06                	jne    c000ca66 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000ca60:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca66:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca6a:	3d 27 03 00 00       	cmp    eax,0x327
c000ca6f:	75 06                	jne    c000ca77 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000ca71:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca77:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca7b:	3d 22 03 00 00       	cmp    eax,0x322
c000ca80:	75 06                	jne    c000ca88 <sendKeyboardToken(KeyboardToken)+0x302>
c000ca82:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ca88:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ca8c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000ca90:	34 01                	xor    al,0x1
c000ca92:	84 c0                	test   al,al
c000ca94:	74 73                	je     c000cb09 <sendKeyboardToken(KeyboardToken)+0x383>
c000ca96:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000ca9d:	84 c0                	test   al,al
c000ca9f:	74 3f                	je     c000cae0 <sendKeyboardToken(KeyboardToken)+0x35a>
c000caa1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caa5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000caa9:	74 29                	je     c000cad4 <sendKeyboardToken(KeyboardToken)+0x34e>
c000caab:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cab1:	89 d0                	mov    eax,edx
c000cab3:	c1 e0 02             	shl    eax,0x2
c000cab6:	01 d0                	add    eax,edx
c000cab8:	01 c0                	add    eax,eax
c000caba:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cabf:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cac3:	8d 50 d0             	lea    edx,[eax-0x30]
c000cac6:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cacb:	01 d0                	add    eax,edx
c000cacd:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cad2:	eb 67                	jmp    c000cb3b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cad4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cade:	eb 5b                	jmp    c000cb3b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cae0:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cae5:	85 c0                	test   eax,eax
c000cae7:	74 14                	je     c000cafd <sendKeyboardToken(KeyboardToken)+0x377>
c000cae9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caee:	0f b6 c0             	movzx  eax,al
c000caf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000caf4:	e8 c7 fb ff ff       	call   c000c6c0 <sendKeyToTerminal(unsigned char)>
c000caf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cafd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb07:	eb 32                	jmp    c000cb3b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb09:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb0d:	3d 01 01 00 00       	cmp    eax,0x101
c000cb12:	75 27                	jne    c000cb3b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb14:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb19:	85 c0                	test   eax,eax
c000cb1b:	74 14                	je     c000cb31 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000cb1d:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb22:	0f b6 c0             	movzx  eax,al
c000cb25:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb28:	e8 93 fb ff ff       	call   c000c6c0 <sendKeyToTerminal(unsigned char)>
c000cb2d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb31:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb3b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cb3f:	34 01                	xor    al,0x1
c000cb41:	84 c0                	test   al,al
c000cb43:	74 4a                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb45:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb49:	34 01                	xor    al,0x1
c000cb4b:	84 c0                	test   al,al
c000cb4d:	74 40                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb4f:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cb56:	34 01                	xor    al,0x1
c000cb58:	84 c0                	test   al,al
c000cb5a:	74 33                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb5c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb60:	83 f8 1f             	cmp    eax,0x1f
c000cb63:	76 09                	jbe    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3e8>
c000cb65:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb69:	83 f8 7e             	cmp    eax,0x7e
c000cb6c:	76 12                	jbe    c000cb80 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cb6e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb72:	83 f8 0a             	cmp    eax,0xa
c000cb75:	74 09                	je     c000cb80 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cb77:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb7b:	83 f8 08             	cmp    eax,0x8
c000cb7e:	75 0f                	jne    c000cb8f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb80:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb84:	0f b6 c0             	movzx  eax,al
c000cb87:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb8a:	e8 31 fb ff ff       	call   c000c6c0 <sendKeyToTerminal(unsigned char)>
c000cb8f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cb93:	34 01                	xor    al,0x1
c000cb95:	84 c0                	test   al,al
c000cb97:	74 4d                	je     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cb99:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb9d:	34 01                	xor    al,0x1
c000cb9f:	84 c0                	test   al,al
c000cba1:	74 43                	je     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cba3:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cbaa:	84 c0                	test   al,al
c000cbac:	74 38                	je     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cbae:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbb2:	83 f8 3f             	cmp    eax,0x3f
c000cbb5:	76 2f                	jbe    c000cbe6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cbb7:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbbb:	83 f8 7f             	cmp    eax,0x7f
c000cbbe:	77 26                	ja     c000cbe6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cbc0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbc4:	88 c2                	mov    dl,al
c000cbc6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbca:	83 f8 5f             	cmp    eax,0x5f
c000cbcd:	76 04                	jbe    c000cbd3 <sendKeyboardToken(KeyboardToken)+0x44d>
c000cbcf:	b0 20                	mov    al,0x20
c000cbd1:	eb 02                	jmp    c000cbd5 <sendKeyboardToken(KeyboardToken)+0x44f>
c000cbd3:	b0 00                	mov    al,0x0
c000cbd5:	28 c2                	sub    dl,al
c000cbd7:	88 d0                	mov    al,dl
c000cbd9:	2c 40                	sub    al,0x40
c000cbdb:	0f b6 c0             	movzx  eax,al
c000cbde:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbe1:	e8 da fa ff ff       	call   c000c6c0 <sendKeyToTerminal(unsigned char)>
c000cbe6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbea:	3d 00 03 00 00       	cmp    eax,0x300
c000cbef:	75 0f                	jne    c000cc00 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cbf1:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cbf5:	34 01                	xor    al,0x1
c000cbf7:	84 c0                	test   al,al
c000cbf9:	74 05                	je     c000cc00 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cbfb:	e8 8d b8 ff ff       	call   c000848d <doTerminalCycle()>
c000cc00:	90                   	nop
c000cc01:	c9                   	leave  
c000cc02:	c3                   	ret    

c000cc03 <clearInternalKeybuffer(VgaText*)>:
c000cc03:	55                   	push   ebp
c000cc04:	89 e5                	mov    ebp,esp
c000cc06:	83 ec 18             	sub    esp,0x18
c000cc09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0c:	05 02 01 00 00       	add    eax,0x102
c000cc11:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc14:	e8 77 39 ff ff       	call   c0000590 <strlen>
c000cc19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc1c:	81 c2 02 01 00 00    	add    edx,0x102
c000cc22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cc2e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cc31:	e8 ba 38 ff ff       	call   c00004f0 <memset>
c000cc36:	90                   	nop
c000cc37:	c9                   	leave  
c000cc38:	c3                   	ret    

c000cc39 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc39:	55                   	push   ebp
c000cc3a:	89 e5                	mov    ebp,esp
c000cc3c:	83 ec 28             	sub    esp,0x28
c000cc3f:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc44:	85 c0                	test   eax,eax
c000cc46:	74 23                	je     c000cc6b <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000cc48:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cc4e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc53:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000cc5b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000cc5e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cc61:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000cc64:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000cc69:	ff d0                	call   eax
c000cc6b:	fb                   	sti    
c000cc6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cc73:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cc77:	0f 84 fa 00 00 00    	je     c000cd77 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000cc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc80:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cc87:	84 c0                	test   al,al
c000cc89:	75 28                	jne    c000ccb3 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000cc8b:	fa                   	cli    
c000cc8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc91:	40                   	inc    eax
c000cc92:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cc97:	e8 b4 83 00 00       	call   c0015050 <schedule()>
c000cc9c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cca1:	48                   	dec    eax
c000cca2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cca7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccac:	85 c0                	test   eax,eax
c000ccae:	75 cd                	jne    c000cc7d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000ccb0:	fb                   	sti    
c000ccb1:	eb ca                	jmp    c000cc7d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000ccb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ccb6:	8d 50 01             	lea    edx,[eax+0x1]
c000ccb9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ccbc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccbf:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000ccc6:	88 10                	mov    BYTE PTR [eax],dl
c000ccc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccb:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000ccd2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ccd5:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000ccd9:	75 20                	jne    c000ccfb <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000ccdb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cce0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cce2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cce5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cceb:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000ccf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ccf6:	e8 a8 3e 00 00       	call   c0010ba3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000ccfb:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000ccff:	75 20                	jne    c000cd21 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000cd01:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd06:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd0b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd11:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000cd19:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd1c:	e8 82 3e 00 00       	call   c0010ba3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd24:	05 02 01 00 00       	add    eax,0x102
c000cd29:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd2c:	e8 5f 38 ff ff       	call   c0000590 <strlen>
c000cd31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd34:	81 c2 02 01 00 00    	add    edx,0x102
c000cd3a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd3d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd40:	81 c2 02 01 00 00    	add    edx,0x102
c000cd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd4a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd4e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cd51:	e8 7a 36 ff ff       	call   c00003d0 <memmove>
c000cd56:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cd59:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cd5c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cd60:	74 10                	je     c000cd72 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cd62:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cd66:	74 0a                	je     c000cd72 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cd68:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cd6c:	0f 85 01 ff ff ff    	jne    c000cc73 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000cd72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd75:	eb 03                	jmp    c000cd7a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000cd77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd7a:	c9                   	leave  
c000cd7b:	c3                   	ret    

c000cd7c <Keyboard::Keyboard(char const*)>:
c000cd7c:	83 ec 1c             	sub    esp,0x1c
c000cd7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cd83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cd87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd8e:	e8 17 f2 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000cd93:	ba fc 01 02 c0       	mov    edx,0xc00201fc
c000cd98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cd9c:	89 10                	mov    DWORD PTR [eax],edx
c000cd9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cda2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cdac:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000cdb3:	90                   	nop
c000cdb4:	83 c4 1c             	add    esp,0x1c
c000cdb7:	c3                   	ret    

c000cdb8 <Keyboard::~Keyboard()>:
c000cdb8:	83 ec 1c             	sub    esp,0x1c
c000cdbb:	ba fc 01 02 c0       	mov    edx,0xc00201fc
c000cdc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdc4:	89 10                	mov    DWORD PTR [eax],edx
c000cdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdca:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdcd:	e8 44 ef ff ff       	call   c000bd16 <Device::~Device()>
c000cdd2:	90                   	nop
c000cdd3:	83 c4 1c             	add    esp,0x1c
c000cdd6:	c3                   	ret    
c000cdd7:	90                   	nop

c000cdd8 <Keyboard::~Keyboard()>:
c000cdd8:	83 ec 1c             	sub    esp,0x1c
c000cddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cddf:	89 04 24             	mov    DWORD PTR [esp],eax
c000cde2:	e8 d1 ff ff ff       	call   c000cdb8 <Keyboard::~Keyboard()>
c000cde7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cdef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdf6:	e8 d1 da ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000cdfb:	83 c4 1c             	add    esp,0x1c
c000cdfe:	c3                   	ret    
c000cdff:	90                   	nop

c000ce00 <LogicalDisk::close(int, int, void*)>:
c000ce00:	83 c8 ff             	or     eax,0xffffffff
c000ce03:	c3                   	ret    

c000ce04 <LogicalDisk::~LogicalDisk()>:
c000ce04:	83 ec 1c             	sub    esp,0x1c
c000ce07:	ba 74 02 02 c0       	mov    edx,0xc0020274
c000ce0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce10:	89 10                	mov    DWORD PTR [eax],edx
c000ce12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce16:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce19:	e8 f8 ee ff ff       	call   c000bd16 <Device::~Device()>
c000ce1e:	90                   	nop
c000ce1f:	83 c4 1c             	add    esp,0x1c
c000ce22:	c3                   	ret    
c000ce23:	90                   	nop

c000ce24 <LogicalDisk::~LogicalDisk()>:
c000ce24:	83 ec 1c             	sub    esp,0x1c
c000ce27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce2e:	e8 d1 ff ff ff       	call   c000ce04 <LogicalDisk::~LogicalDisk()>
c000ce33:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000ce3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce42:	e8 85 da ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000ce47:	83 c4 1c             	add    esp,0x1c
c000ce4a:	c3                   	ret    
c000ce4b:	90                   	nop

c000ce4c <LogicalDisk::open(int, int, void*)>:
c000ce4c:	83 ec 18             	sub    esp,0x18
c000ce4f:	68 28 02 02 c0       	push   0xc0020228
c000ce54:	e8 dc 38 00 00       	call   c0010735 <KePanic(char const*)>
c000ce59:	83 c8 ff             	or     eax,0xffffffff
c000ce5c:	83 c4 1c             	add    esp,0x1c
c000ce5f:	c3                   	ret    

c000ce60 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ce60:	53                   	push   ebx
c000ce61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ce6d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ce73:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ce79:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ce7f:	77 10                	ja     c000ce91 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ce81:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ce87:	89 d3                	mov    ebx,edx
c000ce89:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ce8f:	72 05                	jb     c000ce96 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ce91:	83 c8 ff             	or     eax,0xffffffff
c000ce94:	89 c2                	mov    edx,eax
c000ce96:	5b                   	pop    ebx
c000ce97:	c3                   	ret    

c000ce98 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ce98:	56                   	push   esi
c000ce99:	83 c8 ff             	or     eax,0xffffffff
c000ce9c:	53                   	push   ebx
c000ce9d:	89 c2                	mov    edx,eax
c000ce9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cea3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cea7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ceab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ceb1:	77 27                	ja     c000ceda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ceb3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ceb9:	89 d8                	mov    eax,ebx
c000cebb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cec1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cec6:	89 c2                	mov    edx,eax
c000cec8:	73 10                	jae    c000ceda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ceca:	89 c8                	mov    eax,ecx
c000cecc:	89 da                	mov    edx,ebx
c000cece:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ced4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ceda:	5b                   	pop    ebx
c000cedb:	5e                   	pop    esi
c000cedc:	c3                   	ret    
c000cedd:	90                   	nop

c000cede <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cede:	83 ec 2c             	sub    esp,0x2c
c000cee1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cee5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cee9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ceed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cef1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cefd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cf09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf10:	e8 95 f0 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000cf15:	ba 74 02 02 c0       	mov    edx,0xc0020274
c000cf1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf1e:	89 10                	mov    DWORD PTR [eax],edx
c000cf20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf24:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf2f:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cf36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf3a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf45:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cf4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cf53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cf5b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cf61:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cf67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cf6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf73:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cf79:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cf7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000cf87:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cf8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf91:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cf9b:	90                   	nop
c000cf9c:	83 c4 2c             	add    esp,0x2c
c000cf9f:	c3                   	ret    

c000cfa0 <LogicalDisk::assignDriveLetter()>:
c000cfa0:	55                   	push   ebp
c000cfa1:	57                   	push   edi
c000cfa2:	56                   	push   esi
c000cfa3:	53                   	push   ebx
c000cfa4:	83 ec 14             	sub    esp,0x14
c000cfa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfab:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000cfb1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cfb7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cfbb:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000cfc1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cfc7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cfcb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cfcf:	3c 01                	cmp    al,0x1
c000cfd1:	19 c0                	sbb    eax,eax
c000cfd3:	24 02                	and    al,0x2
c000cfd5:	04 41                	add    al,0x41
c000cfd7:	0f be e8             	movsx  ebp,al
c000cfda:	3c 43                	cmp    al,0x43
c000cfdc:	75 10                	jne    c000cfee <LogicalDisk::assignDriveLetter()+0x4e>
c000cfde:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cfe5:	75 5d                	jne    c000d044 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfe7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cfec:	75 56                	jne    c000d044 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfee:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cff1:	ba 01 00 00 00       	mov    edx,0x1
c000cff6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cffa:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cffe:	d3 e2                	shl    edx,cl
c000d000:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d004:	89 d7                	mov    edi,edx
c000d006:	89 d6                	mov    esi,edx
c000d008:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d00c:	c1 ff 1f             	sar    edi,0x1f
c000d00f:	21 f9                	and    ecx,edi
c000d011:	09 d1                	or     ecx,edx
c000d013:	75 2f                	jne    c000d044 <LogicalDisk::assignDriveLetter()+0xa4>
c000d015:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d019:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d01d:	09 f2                	or     edx,esi
c000d01f:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d025:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d029:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d02f:	09 fa                	or     edx,edi
c000d031:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d035:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d03b:	89 1c bd 20 74 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8be0],ebx
c000d042:	eb 09                	jmp    c000d04d <LogicalDisk::assignDriveLetter()+0xad>
c000d044:	fe c0                	inc    al
c000d046:	45                   	inc    ebp
c000d047:	3c 5b                	cmp    al,0x5b
c000d049:	75 8f                	jne    c000cfda <LogicalDisk::assignDriveLetter()+0x3a>
c000d04b:	31 c0                	xor    eax,eax
c000d04d:	83 c4 14             	add    esp,0x14
c000d050:	5b                   	pop    ebx
c000d051:	5e                   	pop    esi
c000d052:	5f                   	pop    edi
c000d053:	5d                   	pop    ebp
c000d054:	c3                   	ret    
c000d055:	90                   	nop

c000d056 <LogicalDisk::mount()>:
c000d056:	56                   	push   esi
c000d057:	53                   	push   ebx
c000d058:	53                   	push   ebx
c000d059:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d05d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d063:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d06d:	85 db                	test   ebx,ebx
c000d06f:	74 27                	je     c000d098 <LogicalDisk::mount()+0x42>
c000d071:	51                   	push   ecx
c000d072:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d079:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d07b:	83 e8 41             	sub    eax,0x41
c000d07e:	50                   	push   eax
c000d07f:	56                   	push   esi
c000d080:	53                   	push   ebx
c000d081:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d084:	83 c4 10             	add    esp,0x10
c000d087:	84 c0                	test   al,al
c000d089:	74 08                	je     c000d093 <LogicalDisk::mount()+0x3d>
c000d08b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d091:	eb 07                	jmp    c000d09a <LogicalDisk::mount()+0x44>
c000d093:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d096:	eb d5                	jmp    c000d06d <LogicalDisk::mount()+0x17>
c000d098:	31 c0                	xor    eax,eax
c000d09a:	5a                   	pop    edx
c000d09b:	5b                   	pop    ebx
c000d09c:	5e                   	pop    esi
c000d09d:	c3                   	ret    

c000d09e <LogicalDisk::unmount()>:
c000d09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0a2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d0ac:	c3                   	ret    
c000d0ad:	90                   	nop

c000d0ae <LogicalDisk::eject()>:
c000d0ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d0b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0be:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d0c1:	90                   	nop

c000d0c2 <LogicalDisk::unassignDriveLetter()>:
c000d0c2:	57                   	push   edi
c000d0c3:	56                   	push   esi
c000d0c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0c8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d0cf:	84 c9                	test   cl,cl
c000d0d1:	75 0f                	jne    c000d0e2 <LogicalDisk::unassignDriveLetter()+0x20>
c000d0d3:	c7 44 24 0c 4c 02 02 c0 	mov    DWORD PTR [esp+0xc],0xc002024c
c000d0db:	5e                   	pop    esi
c000d0dc:	5f                   	pop    edi
c000d0dd:	e9 53 36 00 00       	jmp    c0010735 <KePanic(char const*)>
c000d0e2:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d0e9:	83 e9 41             	sub    ecx,0x41
c000d0ec:	b8 01 00 00 00       	mov    eax,0x1
c000d0f1:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d0fc:	d3 e0                	shl    eax,cl
c000d0fe:	89 c7                	mov    edi,eax
c000d100:	f7 d0                	not    eax
c000d102:	c1 ff 1f             	sar    edi,0x1f
c000d105:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d10b:	89 fe                	mov    esi,edi
c000d10d:	f7 d6                	not    esi
c000d10f:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d115:	5e                   	pop    esi
c000d116:	5f                   	pop    edi
c000d117:	c3                   	ret    

c000d118 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d118:	57                   	push   edi
c000d119:	56                   	push   esi
c000d11a:	53                   	push   ebx
c000d11b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d11f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d123:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d12b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d131:	77 41                	ja     c000d174 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d133:	99                   	cdq    
c000d134:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d13a:	01 c8                	add    eax,ecx
c000d13c:	11 da                	adc    edx,ebx
c000d13e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d144:	19 d7                	sbb    edi,edx
c000d146:	72 33                	jb     c000d17b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d148:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d14e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d158:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d15c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d162:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d168:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d16c:	5b                   	pop    ebx
c000d16d:	5e                   	pop    esi
c000d16e:	5f                   	pop    edi
c000d16f:	e9 92 0a 00 00       	jmp    c000dc06 <VCache::read(unsigned long long, int, void*)>
c000d174:	b8 05 00 00 00       	mov    eax,0x5
c000d179:	eb 05                	jmp    c000d180 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d17b:	b8 07 00 00 00       	mov    eax,0x7
c000d180:	5b                   	pop    ebx
c000d181:	5e                   	pop    esi
c000d182:	5f                   	pop    edi
c000d183:	c3                   	ret    

c000d184 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d184:	57                   	push   edi
c000d185:	56                   	push   esi
c000d186:	53                   	push   ebx
c000d187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d18b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d18f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d197:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d19d:	77 41                	ja     c000d1e0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d19f:	99                   	cdq    
c000d1a0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1a6:	01 c8                	add    eax,ecx
c000d1a8:	11 da                	adc    edx,ebx
c000d1aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1b0:	19 d7                	sbb    edi,edx
c000d1b2:	72 33                	jb     c000d1e7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d1b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1d8:	5b                   	pop    ebx
c000d1d9:	5e                   	pop    esi
c000d1da:	5f                   	pop    edi
c000d1db:	e9 2c 09 00 00       	jmp    c000db0c <VCache::write(unsigned long long, int, void*)>
c000d1e0:	b8 05 00 00 00       	mov    eax,0x5
c000d1e5:	eb 05                	jmp    c000d1ec <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d1e7:	b8 07 00 00 00       	mov    eax,0x7
c000d1ec:	5b                   	pop    ebx
c000d1ed:	5e                   	pop    esi
c000d1ee:	5f                   	pop    edi
c000d1ef:	c3                   	ret    

c000d1f0 <Mouse::Mouse(char const*)>:
c000d1f0:	83 ec 1c             	sub    esp,0x1c
c000d1f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d1f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d1fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d202:	e8 a3 ed ff ff       	call   c000bfaa <Device::Device(char const*)>
c000d207:	ba a0 02 02 c0       	mov    edx,0xc00202a0
c000d20c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d210:	89 10                	mov    DWORD PTR [eax],edx
c000d212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d216:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d220:	90                   	nop
c000d221:	83 c4 1c             	add    esp,0x1c
c000d224:	c3                   	ret    
c000d225:	90                   	nop
c000d226:	66 90                	xchg   ax,ax

c000d228 <Mouse::~Mouse()>:
c000d228:	83 ec 1c             	sub    esp,0x1c
c000d22b:	ba a0 02 02 c0       	mov    edx,0xc00202a0
c000d230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d234:	89 10                	mov    DWORD PTR [eax],edx
c000d236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d23a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d23d:	e8 d4 ea ff ff       	call   c000bd16 <Device::~Device()>
c000d242:	90                   	nop
c000d243:	83 c4 1c             	add    esp,0x1c
c000d246:	c3                   	ret    
c000d247:	90                   	nop

c000d248 <Mouse::~Mouse()>:
c000d248:	83 ec 1c             	sub    esp,0x1c
c000d24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d252:	e8 d1 ff ff ff       	call   c000d228 <Mouse::~Mouse()>
c000d257:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d25f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d263:	89 04 24             	mov    DWORD PTR [esp],eax
c000d266:	e8 61 d6 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000d26b:	83 c4 1c             	add    esp,0x1c
c000d26e:	c3                   	ret    
c000d26f:	90                   	nop

c000d270 <NIC::getMAC()>:
c000d270:	31 c0                	xor    eax,eax
c000d272:	31 d2                	xor    edx,edx
c000d274:	c3                   	ret    
c000d275:	90                   	nop

c000d276 <NIC::write(int, unsigned char*, int*)>:
c000d276:	b8 01 00 00 00       	mov    eax,0x1
c000d27b:	c3                   	ret    

c000d27c <NIC::NIC(char const*)>:
c000d27c:	83 ec 1c             	sub    esp,0x1c
c000d27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d283:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d287:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d28b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d28e:	e8 17 ed ff ff       	call   c000bfaa <Device::Device(char const*)>
c000d293:	ba cc 02 02 c0       	mov    edx,0xc00202cc
c000d298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d29c:	89 10                	mov    DWORD PTR [eax],edx
c000d29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2a2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d2ac:	90                   	nop
c000d2ad:	83 c4 1c             	add    esp,0x1c
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <NIC::~NIC()>:
c000d2b2:	83 ec 1c             	sub    esp,0x1c
c000d2b5:	ba cc 02 02 c0       	mov    edx,0xc00202cc
c000d2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2be:	89 10                	mov    DWORD PTR [eax],edx
c000d2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2c7:	e8 4a ea ff ff       	call   c000bd16 <Device::~Device()>
c000d2cc:	90                   	nop
c000d2cd:	83 c4 1c             	add    esp,0x1c
c000d2d0:	c3                   	ret    
c000d2d1:	90                   	nop

c000d2d2 <NIC::~NIC()>:
c000d2d2:	83 ec 1c             	sub    esp,0x1c
c000d2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2dc:	e8 d1 ff ff ff       	call   c000d2b2 <NIC::~NIC()>
c000d2e1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d2e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2f0:	e8 d7 d5 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000d2f5:	83 c4 1c             	add    esp,0x1c
c000d2f8:	c3                   	ret    

c000d2f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d2f9:	55                   	push   ebp
c000d2fa:	57                   	push   edi
c000d2fb:	56                   	push   esi
c000d2fc:	53                   	push   ebx
c000d2fd:	81 ec 28 01 00 00    	sub    esp,0x128
c000d303:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d30a:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d311:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d318:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d31f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d323:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d327:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d32e:	e8 71 ed ff ff       	call   c000c0a4 <Device::getName()>
c000d333:	5a                   	pop    edx
c000d334:	59                   	pop    ecx
c000d335:	50                   	push   eax
c000d336:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d33a:	55                   	push   ebp
c000d33b:	e8 50 33 ff ff       	call   c0000690 <strcpy>
c000d340:	5b                   	pop    ebx
c000d341:	58                   	pop    eax
c000d342:	68 f8 02 02 c0       	push   0xc00202f8
c000d347:	55                   	push   ebp
c000d348:	e8 53 35 ff ff       	call   c00008a0 <strcat>
c000d34d:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d354:	e8 0d a7 ff ff       	call   c0007a66 <malloc>
c000d359:	83 c4 0c             	add    esp,0xc
c000d35c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d360:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d364:	89 c3                	mov    ebx,eax
c000d366:	57                   	push   edi
c000d367:	56                   	push   esi
c000d368:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d36f:	55                   	push   ebp
c000d370:	50                   	push   eax
c000d371:	e8 68 fb ff ff       	call   c000cede <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d376:	83 c4 14             	add    esp,0x14
c000d379:	53                   	push   ebx
c000d37a:	e8 21 fc ff ff       	call   c000cfa0 <LogicalDisk::assignDriveLetter()>
c000d37f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d382:	e8 cf fc ff ff       	call   c000d056 <LogicalDisk::mount()>
c000d387:	58                   	pop    eax
c000d388:	5a                   	pop    edx
c000d389:	53                   	push   ebx
c000d38a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d391:	e8 7c ea ff ff       	call   c000be12 <Device::addChild(Device*)>
c000d396:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d39c:	5b                   	pop    ebx
c000d39d:	5e                   	pop    esi
c000d39e:	5f                   	pop    edi
c000d39f:	5d                   	pop    ebp
c000d3a0:	c3                   	ret    

c000d3a1 <createPartitionsForDisk(PhysicalDisk*)>:
c000d3a1:	55                   	push   ebp
c000d3a2:	57                   	push   edi
c000d3a3:	56                   	push   esi
c000d3a4:	53                   	push   ebx
c000d3a5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d3ab:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d3b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d3b8:	3d 00 02 00 00       	cmp    eax,0x200
c000d3bd:	74 27                	je     c000d3e6 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d3bf:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d3c5:	83 ec 10             	sub    esp,0x10
c000d3c8:	99                   	cdq    
c000d3c9:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d3cf:	52                   	push   edx
c000d3d0:	50                   	push   eax
c000d3d1:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d3d5:	c1 e6 0a             	shl    esi,0xa
c000d3d8:	89 fd                	mov    ebp,edi
c000d3da:	55                   	push   ebp
c000d3db:	56                   	push   esi
c000d3dc:	e8 2f 0f 01 00       	call   c001e310 <__udivdi3>
c000d3e1:	e9 ae 00 00 00       	jmp    c000d494 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d3e6:	83 ec 0c             	sub    esp,0xc
c000d3e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3eb:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d3ef:	56                   	push   esi
c000d3f0:	6a 01                	push   0x1
c000d3f2:	6a 00                	push   0x0
c000d3f4:	6a 00                	push   0x0
c000d3f6:	53                   	push   ebx
c000d3f7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d3fa:	83 c4 20             	add    esp,0x20
c000d3fd:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d405:	75 0a                	jne    c000d411 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d407:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d40f:	74 2c                	je     c000d43d <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d411:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d417:	83 ec 10             	sub    esp,0x10
c000d41a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d420:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d426:	89 f7                	mov    edi,esi
c000d428:	c1 ff 1f             	sar    edi,0x1f
c000d42b:	57                   	push   edi
c000d42c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d430:	56                   	push   esi
c000d431:	c1 e0 0a             	shl    eax,0xa
c000d434:	52                   	push   edx
c000d435:	50                   	push   eax
c000d436:	e8 d5 0e 01 00       	call   c001e310 <__udivdi3>
c000d43b:	eb 57                	jmp    c000d494 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d43d:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d444:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d44b:	80 e1 7f             	and    cl,0x7f
c000d44e:	24 7f                	and    al,0x7f
c000d450:	00 c1                	add    cl,al
c000d452:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d459:	24 7f                	and    al,0x7f
c000d45b:	00 c1                	add    cl,al
c000d45d:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d464:	24 7f                	and    al,0x7f
c000d466:	00 c1                	add    cl,al
c000d468:	74 41                	je     c000d4ab <createPartitionsForDisk(PhysicalDisk*)+0x10a>
c000d46a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d470:	83 ec 10             	sub    esp,0x10
c000d473:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d479:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d47f:	89 f7                	mov    edi,esi
c000d481:	c1 ff 1f             	sar    edi,0x1f
c000d484:	57                   	push   edi
c000d485:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d489:	56                   	push   esi
c000d48a:	c1 e0 0a             	shl    eax,0xa
c000d48d:	52                   	push   edx
c000d48e:	50                   	push   eax
c000d48f:	e8 7c 0e 01 00       	call   c001e310 <__udivdi3>
c000d494:	83 c4 14             	add    esp,0x14
c000d497:	52                   	push   edx
c000d498:	50                   	push   eax
c000d499:	6a 00                	push   0x0
c000d49b:	6a 00                	push   0x0
c000d49d:	53                   	push   ebx
c000d49e:	e8 56 fe ff ff       	call   c000d2f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4a3:	83 c4 20             	add    esp,0x20
c000d4a6:	e9 79 01 00 00       	jmp    c000d624 <createPartitionsForDisk(PhysicalDisk*)+0x283>
c000d4ab:	89 f0                	mov    eax,esi
c000d4ad:	31 d2                	xor    edx,edx
c000d4af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d4b6:	75 02                	jne    c000d4ba <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d4b8:	88 d1                	mov    cl,dl
c000d4ba:	c7 44 d4 14 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x14],0x0
c000d4c2:	0f b6 b0 c7 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c7]
c000d4c9:	83 c0 10             	add    eax,0x10
c000d4cc:	c7 44 d4 34 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x34],0x0
c000d4d4:	0f b6 b8 b8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b8]
c000d4db:	c1 e6 08             	shl    esi,0x8
c000d4de:	c1 e7 10             	shl    edi,0x10
c000d4e1:	09 fe                	or     esi,edi
c000d4e3:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c000d4ea:	09 fe                	or     esi,edi
c000d4ec:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d4f3:	c1 e7 18             	shl    edi,0x18
c000d4f6:	09 fe                	or     esi,edi
c000d4f8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d4ff:	89 74 d4 10          	mov    DWORD PTR [esp+edx*8+0x10],esi
c000d503:	0f b6 b0 bb 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bb]
c000d50a:	c1 e7 10             	shl    edi,0x10
c000d50d:	c1 e6 08             	shl    esi,0x8
c000d510:	09 fe                	or     esi,edi
c000d512:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d519:	09 fe                	or     esi,edi
c000d51b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d522:	c1 e7 18             	shl    edi,0x18
c000d525:	09 fe                	or     esi,edi
c000d527:	89 74 d4 30          	mov    DWORD PTR [esp+edx*8+0x30],esi
c000d52b:	42                   	inc    edx
c000d52c:	83 fa 04             	cmp    edx,0x4
c000d52f:	0f 85 7a ff ff ff    	jne    c000d4af <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d539:	83 f0 01             	xor    eax,0x1
c000d53c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d540:	75 57                	jne    c000d599 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d546:	83 f0 01             	xor    eax,0x1
c000d549:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d54d:	75 4a                	jne    c000d599 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d54f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d555:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d559:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d55f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d567:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d56d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d575:	89 f7                	mov    edi,esi
c000d577:	c1 ff 1f             	sar    edi,0x1f
c000d57a:	57                   	push   edi
c000d57b:	56                   	push   esi
c000d57c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d580:	52                   	push   edx
c000d581:	c1 e0 0a             	shl    eax,0xa
c000d584:	50                   	push   eax
c000d585:	e8 86 0d 01 00       	call   c001e310 <__udivdi3>
c000d58a:	83 c4 10             	add    esp,0x10
c000d58d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d591:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d595:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d599:	84 c9                	test   cl,cl
c000d59b:	74 53                	je     c000d5f0 <createPartitionsForDisk(PhysicalDisk*)+0x24f>
c000d59d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5a1:	0f b6 c9             	movzx  ecx,cl
c000d5a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d5a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d5ac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5b4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d5b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5bc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d5c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d5c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5d0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d5d4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d5d8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d5dc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d5e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5e8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d5ec:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d5f0:	31 ed                	xor    ebp,ebp
c000d5f2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d5f6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d5fa:	89 f8                	mov    eax,edi
c000d5fc:	09 f0                	or     eax,esi
c000d5fe:	74 1e                	je     c000d61e <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d600:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d604:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d608:	89 d1                	mov    ecx,edx
c000d60a:	09 c1                	or     ecx,eax
c000d60c:	74 10                	je     c000d61e <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d60e:	83 ec 0c             	sub    esp,0xc
c000d611:	57                   	push   edi
c000d612:	56                   	push   esi
c000d613:	52                   	push   edx
c000d614:	50                   	push   eax
c000d615:	53                   	push   ebx
c000d616:	e8 de fc ff ff       	call   c000d2f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d61b:	83 c4 20             	add    esp,0x20
c000d61e:	45                   	inc    ebp
c000d61f:	83 fd 04             	cmp    ebp,0x4
c000d622:	75 ce                	jne    c000d5f2 <createPartitionsForDisk(PhysicalDisk*)+0x251>
c000d624:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d62a:	5b                   	pop    ebx
c000d62b:	5e                   	pop    esi
c000d62c:	5f                   	pop    edi
c000d62d:	5d                   	pop    ebp
c000d62e:	c3                   	ret    
c000d62f:	90                   	nop

c000d630 <Serial::Serial(char const*)>:
c000d630:	83 ec 1c             	sub    esp,0x1c
c000d633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d637:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d63b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d63f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d642:	e8 63 e9 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000d647:	ba 0c 03 02 c0       	mov    edx,0xc002030c
c000d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d650:	89 10                	mov    DWORD PTR [eax],edx
c000d652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d656:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d660:	90                   	nop
c000d661:	83 c4 1c             	add    esp,0x1c
c000d664:	c3                   	ret    
c000d665:	90                   	nop
c000d666:	66 90                	xchg   ax,ax

c000d668 <Serial::~Serial()>:
c000d668:	83 ec 1c             	sub    esp,0x1c
c000d66b:	ba 0c 03 02 c0       	mov    edx,0xc002030c
c000d670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d674:	89 10                	mov    DWORD PTR [eax],edx
c000d676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d67d:	e8 94 e6 ff ff       	call   c000bd16 <Device::~Device()>
c000d682:	90                   	nop
c000d683:	83 c4 1c             	add    esp,0x1c
c000d686:	c3                   	ret    
c000d687:	90                   	nop

c000d688 <Serial::~Serial()>:
c000d688:	83 ec 1c             	sub    esp,0x1c
c000d68b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d692:	e8 d1 ff ff ff       	call   c000d668 <Serial::~Serial()>
c000d697:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d69f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6a6:	e8 21 d2 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000d6ab:	83 c4 1c             	add    esp,0x1c
c000d6ae:	c3                   	ret    
c000d6af:	90                   	nop

c000d6b0 <Timer::Timer(char const*)>:
c000d6b0:	83 ec 1c             	sub    esp,0x1c
c000d6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d6bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6c2:	e8 e3 e8 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000d6c7:	ba 50 03 02 c0       	mov    edx,0xc0020350
c000d6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d0:	89 10                	mov    DWORD PTR [eax],edx
c000d6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d6e0:	90                   	nop
c000d6e1:	83 c4 1c             	add    esp,0x1c
c000d6e4:	c3                   	ret    
c000d6e5:	90                   	nop
c000d6e6:	66 90                	xchg   ax,ax

c000d6e8 <Timer::~Timer()>:
c000d6e8:	83 ec 1c             	sub    esp,0x1c
c000d6eb:	ba 50 03 02 c0       	mov    edx,0xc0020350
c000d6f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f4:	89 10                	mov    DWORD PTR [eax],edx
c000d6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6fd:	e8 14 e6 ff ff       	call   c000bd16 <Device::~Device()>
c000d702:	90                   	nop
c000d703:	83 c4 1c             	add    esp,0x1c
c000d706:	c3                   	ret    
c000d707:	90                   	nop

c000d708 <Timer::~Timer()>:
c000d708:	83 ec 1c             	sub    esp,0x1c
c000d70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d70f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d712:	e8 d1 ff ff ff       	call   c000d6e8 <Timer::~Timer()>
c000d717:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d723:	89 04 24             	mov    DWORD PTR [esp],eax
c000d726:	e8 a1 d1 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000d72b:	83 c4 1c             	add    esp,0x1c
c000d72e:	c3                   	ret    
c000d72f:	90                   	nop

c000d730 <Timer::read()>:
c000d730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d734:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d73a:	c3                   	ret    

c000d73b <setupTimer(int)>:
c000d73b:	53                   	push   ebx
c000d73c:	83 ec 14             	sub    esp,0x14
c000d73f:	68 5c 01 00 00       	push   0x15c
c000d744:	e8 1d a3 ff ff       	call   c0007a66 <malloc>
c000d749:	89 04 24             	mov    DWORD PTR [esp],eax
c000d74c:	89 c3                	mov    ebx,eax
c000d74e:	e8 29 04 01 00       	call   c001db7c <PIT::PIT()>
c000d753:	58                   	pop    eax
c000d754:	5a                   	pop    edx
c000d755:	53                   	push   ebx
c000d756:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d75c:	e8 b1 e6 ff ff       	call   c000be12 <Device::addChild(Device*)>
c000d761:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d763:	6a 00                	push   0x0
c000d765:	6a 00                	push   0x0
c000d767:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d76b:	53                   	push   ebx
c000d76c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d76f:	83 c4 28             	add    esp,0x28
c000d772:	89 d8                	mov    eax,ebx
c000d774:	5b                   	pop    ebx
c000d775:	c3                   	ret    

c000d776 <timerHandler(unsigned int)>:
c000d776:	56                   	push   esi
c000d777:	53                   	push   ebx
c000d778:	51                   	push   ecx
c000d779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77d:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d783:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d78a:	0f 84 48 01 00 00    	je     c000d8d8 <timerHandler(unsigned int)+0x162>
c000d790:	fa                   	cli    
c000d791:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d797:	83 ec 0c             	sub    esp,0xc
c000d79a:	68 78 81 02 c0       	push   0xc0028178
c000d79f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d7a5:	e8 0e 11 01 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	84 c0                	test   al,al
c000d7af:	0f 85 9f 00 00 00    	jne    c000d854 <timerHandler(unsigned int)+0xde>
c000d7b5:	83 ec 0c             	sub    esp,0xc
c000d7b8:	68 78 81 02 c0       	push   0xc0028178
c000d7bd:	e8 12 11 01 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7c2:	83 c4 10             	add    esp,0x10
c000d7c5:	89 c6                	mov    esi,eax
c000d7c7:	90                   	nop
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	68 78 81 02 c0       	push   0xc0028178
c000d7d0:	e8 ff 10 01 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7d5:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d7dc:	89 c3                	mov    ebx,eax
c000d7de:	e8 f9 10 01 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d7e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d7ef:	77 23                	ja     c000d814 <timerHandler(unsigned int)+0x9e>
c000d7f1:	83 ec 0c             	sub    esp,0xc
c000d7f4:	53                   	push   ebx
c000d7f5:	e8 de 7c 00 00       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c000d7fa:	83 c4 10             	add    esp,0x10
c000d7fd:	39 de                	cmp    esi,ebx
c000d7ff:	75 27                	jne    c000d828 <timerHandler(unsigned int)+0xb2>
c000d801:	83 ec 0c             	sub    esp,0xc
c000d804:	68 78 81 02 c0       	push   0xc0028178
c000d809:	e8 c6 10 01 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d80e:	89 c6                	mov    esi,eax
c000d810:	eb 12                	jmp    c000d824 <timerHandler(unsigned int)+0xae>
c000d812:	66 90                	xchg   ax,ax
c000d814:	52                   	push   edx
c000d815:	52                   	push   edx
c000d816:	53                   	push   ebx
c000d817:	68 78 81 02 c0       	push   0xc0028178
c000d81c:	e8 67 11 01 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d821:	8d 76 00             	lea    esi,[esi+0x0]
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	90                   	nop
c000d828:	83 ec 0c             	sub    esp,0xc
c000d82b:	68 78 81 02 c0       	push   0xc0028178
c000d830:	e8 83 10 01 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	84 c0                	test   al,al
c000d83a:	75 18                	jne    c000d854 <timerHandler(unsigned int)+0xde>
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	68 78 81 02 c0       	push   0xc0028178
c000d844:	e8 8b 10 01 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d849:	83 c4 10             	add    esp,0x10
c000d84c:	39 f0                	cmp    eax,esi
c000d84e:	0f 85 74 ff ff ff    	jne    c000d7c8 <timerHandler(unsigned int)+0x52>
c000d854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d859:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d85d:	74 41                	je     c000d8a0 <timerHandler(unsigned int)+0x12a>
c000d85f:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d866:	74 38                	je     c000d8a0 <timerHandler(unsigned int)+0x12a>
c000d868:	fa                   	cli    
c000d869:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d86f:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d874:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d87a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d87d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d883:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d886:	72 08                	jb     c000d890 <timerHandler(unsigned int)+0x11a>
c000d888:	e8 c3 77 00 00       	call   c0015050 <schedule()>
c000d88d:	8d 76 00             	lea    esi,[esi+0x0]
c000d890:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d895:	48                   	dec    eax
c000d896:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d89b:	75 03                	jne    c000d8a0 <timerHandler(unsigned int)+0x12a>
c000d89d:	fb                   	sti    
c000d89e:	66 90                	xchg   ax,ax
c000d8a0:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d8a5:	48                   	dec    eax
c000d8a6:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d8ab:	75 1b                	jne    c000d8c8 <timerHandler(unsigned int)+0x152>
c000d8ad:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d8b4:	74 12                	je     c000d8c8 <timerHandler(unsigned int)+0x152>
c000d8b6:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d8c0:	e8 8b 77 00 00       	call   c0015050 <schedule()>
c000d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d8cd:	48                   	dec    eax
c000d8ce:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d8d3:	75 03                	jne    c000d8d8 <timerHandler(unsigned int)+0x162>
c000d8d5:	fb                   	sti    
c000d8d6:	66 90                	xchg   ax,ax
c000d8d8:	58                   	pop    eax
c000d8d9:	5b                   	pop    ebx
c000d8da:	5e                   	pop    esi
c000d8db:	c3                   	ret    

c000d8dc <VCache::VCache(PhysicalDisk*)>:
c000d8dc:	53                   	push   ebx
c000d8dd:	83 ec 28             	sub    esp,0x28
c000d8e0:	ba 80 03 02 c0       	mov    edx,0xc0020380
c000d8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8e9:	89 10                	mov    DWORD PTR [eax],edx
c000d8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d8f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d905:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d90c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d917:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d91e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d929:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d934:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d938:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d93c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d943:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d94a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d94e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d956:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d95a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d95e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d966:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d96d:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000d975:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d979:	89 04 24             	mov    DWORD PTR [esp],eax
c000d97c:	e8 e5 a0 ff ff       	call   c0007a66 <malloc>
c000d981:	89 c3                	mov    ebx,eax
c000d983:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d986:	e8 51 74 00 00       	call   c0014ddc <Mutex::Mutex()>
c000d98b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d98f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d996:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d99a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d99d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9a1:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d9a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d9b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d9b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9bd:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d9c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d9c9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d9cd:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d9d0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d9d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9d7:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9e5:	05 00 02 00 00       	add    eax,0x200
c000d9ea:	c1 e0 03             	shl    eax,0x3
c000d9ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9f0:	e8 71 a0 ff ff       	call   c0007a66 <malloc>
c000d9f5:	89 c2                	mov    edx,eax
c000d9f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d9fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da02:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da0d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da15:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da1b:	89 d0                	mov    eax,edx
c000da1d:	c1 e0 02             	shl    eax,0x2
c000da20:	01 d0                	add    eax,edx
c000da22:	c1 e0 04             	shl    eax,0x4
c000da25:	89 04 24             	mov    DWORD PTR [esp],eax
c000da28:	e8 39 a0 ff ff       	call   c0007a66 <malloc>
c000da2d:	89 c2                	mov    edx,eax
c000da2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da33:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000da36:	90                   	nop
c000da37:	83 c4 28             	add    esp,0x28
c000da3a:	5b                   	pop    ebx
c000da3b:	c3                   	ret    

c000da3c <VCache::invalidateReadBuffer()>:
c000da3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da40:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000da46:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da4a:	c3                   	ret    
c000da4b:	90                   	nop

c000da4c <VCache::writeWriteBuffer()>:
c000da4c:	53                   	push   ebx
c000da4d:	83 ec 08             	sub    esp,0x8
c000da50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da54:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000da58:	74 1e                	je     c000da78 <VCache::writeWriteBuffer()+0x2c>
c000da5a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000da5d:	83 ec 0c             	sub    esp,0xc
c000da60:	8b 10                	mov    edx,DWORD PTR [eax]
c000da62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000da65:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000da68:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000da6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da6e:	50                   	push   eax
c000da6f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000da72:	83 c4 20             	add    esp,0x20
c000da75:	8d 76 00             	lea    esi,[esi+0x0]
c000da78:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da7f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000da86:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000da8a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000da91:	83 c4 08             	add    esp,0x8
c000da94:	5b                   	pop    ebx
c000da95:	c3                   	ret    
c000da96:	66 90                	xchg   ax,ax

c000da98 <VCache::~VCache()>:
c000da98:	83 ec 1c             	sub    esp,0x1c
c000da9b:	ba 80 03 02 c0       	mov    edx,0xc0020380
c000daa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa4:	89 10                	mov    DWORD PTR [eax],edx
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000daae:	84 c0                	test   al,al
c000dab0:	74 0e                	je     c000dac0 <VCache::~VCache()+0x28>
c000dab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dab9:	e8 8e ff ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c000dabe:	66 90                	xchg   ax,ax
c000dac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dac7:	89 04 24             	mov    DWORD PTR [esp],eax
c000daca:	e8 aa 9f ff ff       	call   c0007a79 <free>
c000dacf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dad6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dad9:	e8 9b 9f ff ff       	call   c0007a79 <free>
c000dade:	90                   	nop
c000dadf:	83 c4 1c             	add    esp,0x1c
c000dae2:	c3                   	ret    
c000dae3:	90                   	nop

c000dae4 <VCache::~VCache()>:
c000dae4:	83 ec 1c             	sub    esp,0x1c
c000dae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000daee:	e8 a5 ff ff ff       	call   c000da98 <VCache::~VCache()>
c000daf3:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	89 04 24             	mov    DWORD PTR [esp],eax
c000db02:	e8 c5 cd ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000db07:	83 c4 1c             	add    esp,0x1c
c000db0a:	c3                   	ret    
c000db0b:	90                   	nop

c000db0c <VCache::write(unsigned long long, int, void*)>:
c000db0c:	55                   	push   ebp
c000db0d:	57                   	push   edi
c000db0e:	56                   	push   esi
c000db0f:	53                   	push   ebx
c000db10:	83 ec 1c             	sub    esp,0x1c
c000db13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db1b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000db1f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000db23:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000db27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db2b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000db2f:	74 0f                	je     c000db40 <VCache::write(unsigned long long, int, void*)+0x34>
c000db31:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db35:	53                   	push   ebx
c000db36:	e8 01 ff ff ff       	call   c000da3c <VCache::invalidateReadBuffer()>
c000db3b:	58                   	pop    eax
c000db3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db44:	74 66                	je     c000dbac <VCache::write(unsigned long long, int, void*)+0xa0>
c000db46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db4d:	99                   	cdq    
c000db4e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000db51:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000db54:	89 c6                	mov    esi,eax
c000db56:	31 ce                	xor    esi,ecx
c000db58:	89 d0                	mov    eax,edx
c000db5a:	31 e8                	xor    eax,ebp
c000db5c:	09 c6                	or     esi,eax
c000db5e:	75 38                	jne    c000db98 <VCache::write(unsigned long long, int, void*)+0x8c>
c000db60:	83 ff 01             	cmp    edi,0x1
c000db63:	75 33                	jne    c000db98 <VCache::write(unsigned long long, int, void*)+0x8c>
c000db65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000db6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000db70:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000db76:	0f af f9             	imul   edi,ecx
c000db79:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000db7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db7e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db81:	40                   	inc    eax
c000db82:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000db85:	83 f8 50             	cmp    eax,0x50
c000db88:	75 72                	jne    c000dbfc <VCache::write(unsigned long long, int, void*)+0xf0>
c000db8a:	83 ec 0c             	sub    esp,0xc
c000db8d:	53                   	push   ebx
c000db8e:	e8 b9 fe ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	eb 64                	jmp    c000dbfc <VCache::write(unsigned long long, int, void*)+0xf0>
c000db98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db9c:	83 ec 0c             	sub    esp,0xc
c000db9f:	53                   	push   ebx
c000dba0:	e8 a7 fe ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c000dba5:	83 c4 10             	add    esp,0x10
c000dba8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbac:	83 ff 4f             	cmp    edi,0x4f
c000dbaf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbb2:	7f 20                	jg     c000dbd4 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dbb4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dbb7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dbbb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dbbe:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dbc1:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dbc4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dbc8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dbce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbd0:	eb 2a                	jmp    c000dbfc <VCache::write(unsigned long long, int, void*)+0xf0>
c000dbd2:	66 90                	xchg   ax,ax
c000dbd4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dbd8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbda:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dbde:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dbe2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dbe6:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dbea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbee:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dbf1:	83 c4 1c             	add    esp,0x1c
c000dbf4:	5b                   	pop    ebx
c000dbf5:	5e                   	pop    esi
c000dbf6:	5f                   	pop    edi
c000dbf7:	5d                   	pop    ebp
c000dbf8:	ff e0                	jmp    eax
c000dbfa:	66 90                	xchg   ax,ax
c000dbfc:	83 c4 1c             	add    esp,0x1c
c000dbff:	31 c0                	xor    eax,eax
c000dc01:	5b                   	pop    ebx
c000dc02:	5e                   	pop    esi
c000dc03:	5f                   	pop    edi
c000dc04:	5d                   	pop    ebp
c000dc05:	c3                   	ret    

c000dc06 <VCache::read(unsigned long long, int, void*)>:
c000dc06:	55                   	push   ebp
c000dc07:	57                   	push   edi
c000dc08:	56                   	push   esi
c000dc09:	53                   	push   ebx
c000dc0a:	83 ec 1c             	sub    esp,0x1c
c000dc0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dc11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dc19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dc1d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dc21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc25:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc29:	74 0d                	je     c000dc38 <VCache::read(unsigned long long, int, void*)+0x32>
c000dc2b:	83 ec 0c             	sub    esp,0xc
c000dc2e:	57                   	push   edi
c000dc2f:	e8 18 fe ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	90                   	nop
c000dc38:	83 fd 01             	cmp    ebp,0x1
c000dc3b:	0f 85 93 00 00 00    	jne    c000dcd4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc41:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc44:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dc4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc4e:	0f 85 80 00 00 00    	jne    c000dcd4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc54:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dc57:	89 cd                	mov    ebp,ecx
c000dc59:	f7 dd                	neg    ebp
c000dc5b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dc5f:	89 e8                	mov    eax,ebp
c000dc61:	21 dd                	and    ebp,ebx
c000dc63:	c1 f8 1f             	sar    eax,0x1f
c000dc66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc6a:	89 e8                	mov    eax,ebp
c000dc6c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc70:	21 f5                	and    ebp,esi
c000dc72:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dc76:	89 ea                	mov    edx,ebp
c000dc78:	74 2e                	je     c000dca8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc7a:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dc7d:	75 29                	jne    c000dca8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc7f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dc82:	75 24                	jne    c000dca8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc84:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc87:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc8d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dc90:	8d 70 ff             	lea    esi,[eax-0x1]
c000dc93:	21 f3                	and    ebx,esi
c000dc95:	0f af d9             	imul   ebx,ecx
c000dc98:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dc9b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc9f:	89 de                	mov    esi,ebx
c000dca1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dca3:	31 c0                	xor    eax,eax
c000dca5:	eb 61                	jmp    c000dd08 <VCache::read(unsigned long long, int, void*)+0x102>
c000dca7:	90                   	nop
c000dca8:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dcac:	83 ec 0c             	sub    esp,0xc
c000dcaf:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dcb2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dcb6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dcb9:	8b 36                	mov    esi,DWORD PTR [esi]
c000dcbb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dcbe:	51                   	push   ecx
c000dcbf:	52                   	push   edx
c000dcc0:	50                   	push   eax
c000dcc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc5:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dcc8:	83 c4 20             	add    esp,0x20
c000dccb:	85 c0                	test   eax,eax
c000dccd:	75 39                	jne    c000dd08 <VCache::read(unsigned long long, int, void*)+0x102>
c000dccf:	eb b3                	jmp    c000dc84 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd4:	83 ec 0c             	sub    esp,0xc
c000dcd7:	57                   	push   edi
c000dcd8:	e8 5f fd ff ff       	call   c000da3c <VCache::invalidateReadBuffer()>
c000dcdd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dce0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dce4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dce6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dcea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dcee:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dcf2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dcf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dcfa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dcfd:	83 c4 2c             	add    esp,0x2c
c000dd00:	5b                   	pop    ebx
c000dd01:	5e                   	pop    esi
c000dd02:	5f                   	pop    edi
c000dd03:	5d                   	pop    ebp
c000dd04:	ff e0                	jmp    eax
c000dd06:	66 90                	xchg   ax,ax
c000dd08:	83 c4 1c             	add    esp,0x1c
c000dd0b:	5b                   	pop    ebx
c000dd0c:	5e                   	pop    esi
c000dd0d:	5f                   	pop    edi
c000dd0e:	5d                   	pop    ebp
c000dd0f:	c3                   	ret    

c000dd10 <Video::putrect(int, int, int, int, unsigned int)>:
c000dd10:	55                   	push   ebp
c000dd11:	57                   	push   edi
c000dd12:	56                   	push   esi
c000dd13:	53                   	push   ebx
c000dd14:	83 ec 1c             	sub    esp,0x1c
c000dd17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd1f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dd23:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dd27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd2f:	01 df                	add    edi,ebx
c000dd31:	39 fb                	cmp    ebx,edi
c000dd33:	7d 1f                	jge    c000dd54 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dd35:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd39:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000dd3d:	7d 12                	jge    c000dd51 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dd3f:	8b 16                	mov    edx,DWORD PTR [esi]
c000dd41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd45:	53                   	push   ebx
c000dd46:	55                   	push   ebp
c000dd47:	45                   	inc    ebp
c000dd48:	56                   	push   esi
c000dd49:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd4c:	83 c4 10             	add    esp,0x10
c000dd4f:	eb e8                	jmp    c000dd39 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dd51:	43                   	inc    ebx
c000dd52:	eb dd                	jmp    c000dd31 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dd54:	83 c4 1c             	add    esp,0x1c
c000dd57:	5b                   	pop    ebx
c000dd58:	5e                   	pop    esi
c000dd59:	5f                   	pop    edi
c000dd5a:	5d                   	pop    ebp
c000dd5b:	c3                   	ret    

c000dd5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dd5c:	55                   	push   ebp
c000dd5d:	57                   	push   edi
c000dd5e:	31 ff                	xor    edi,edi
c000dd60:	56                   	push   esi
c000dd61:	53                   	push   ebx
c000dd62:	83 ec 1c             	sub    esp,0x1c
c000dd65:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dd69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dd6d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dd74:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dd79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd81:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dd85:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dd88:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dd8c:	01 f9                	add    ecx,edi
c000dd8e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dd92:	7d 2f                	jge    c000ddc3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dd94:	31 f6                	xor    esi,esi
c000dd96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dd9a:	01 f2                	add    edx,esi
c000dd9c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dda0:	7d 1a                	jge    c000ddbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dda2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dda5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dda8:	46                   	inc    esi
c000dda9:	51                   	push   ecx
c000ddaa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddae:	52                   	push   edx
c000ddaf:	55                   	push   ebp
c000ddb0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ddb3:	83 c4 10             	add    esp,0x10
c000ddb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddba:	eb da                	jmp    c000dd96 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ddbc:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ddc0:	47                   	inc    edi
c000ddc1:	eb c5                	jmp    c000dd88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ddc3:	83 c4 1c             	add    esp,0x1c
c000ddc6:	5b                   	pop    ebx
c000ddc7:	5e                   	pop    esi
c000ddc8:	5f                   	pop    edi
c000ddc9:	5d                   	pop    ebp
c000ddca:	c3                   	ret    
c000ddcb:	90                   	nop

c000ddcc <Video::blit(unsigned int*, int, int, int, int)>:
c000ddcc:	55                   	push   ebp
c000ddcd:	ba 00 00 00 00       	mov    edx,0x0
c000ddd2:	57                   	push   edi
c000ddd3:	56                   	push   esi
c000ddd4:	53                   	push   ebx
c000ddd5:	83 ec 1c             	sub    esp,0x1c
c000ddd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dddc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dde0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dde4:	85 c0                	test   eax,eax
c000dde6:	0f 49 d0             	cmovns edx,eax
c000dde9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ddf0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ddf4:	89 eb                	mov    ebx,ebp
c000ddf6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ddfa:	01 ea                	add    edx,ebp
c000ddfc:	39 da                	cmp    edx,ebx
c000ddfe:	7e 54                	jle    c000de54 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000de00:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de06:	7c 4c                	jl     c000de54 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000de08:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de10:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de14:	01 c1                	add    ecx,eax
c000de16:	39 f9                	cmp    ecx,edi
c000de18:	7e 2f                	jle    c000de49 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000de1a:	83 c2 04             	add    edx,0x4
c000de1d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de23:	7c 21                	jl     c000de46 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000de25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de29:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000de2b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000de2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de32:	55                   	push   ebp
c000de33:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de37:	56                   	push   esi
c000de38:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de46:	47                   	inc    edi
c000de47:	eb c7                	jmp    c000de10 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000de49:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000de4d:	43                   	inc    ebx
c000de4e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000de52:	eb a2                	jmp    c000ddf6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000de54:	83 c4 1c             	add    esp,0x1c
c000de57:	5b                   	pop    ebx
c000de58:	5e                   	pop    esi
c000de59:	5f                   	pop    edi
c000de5a:	5d                   	pop    ebp
c000de5b:	c3                   	ret    

c000de5c <Video::clearScreen(unsigned int)>:
c000de5c:	57                   	push   edi
c000de5d:	56                   	push   esi
c000de5e:	53                   	push   ebx
c000de5f:	31 db                	xor    ebx,ebx
c000de61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de65:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de6b:	7e 1f                	jle    c000de8c <Video::clearScreen(unsigned int)+0x30>
c000de6d:	31 ff                	xor    edi,edi
c000de6f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de75:	7e 12                	jle    c000de89 <Video::clearScreen(unsigned int)+0x2d>
c000de77:	8b 06                	mov    eax,DWORD PTR [esi]
c000de79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de7d:	53                   	push   ebx
c000de7e:	57                   	push   edi
c000de7f:	47                   	inc    edi
c000de80:	56                   	push   esi
c000de81:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	eb e6                	jmp    c000de6f <Video::clearScreen(unsigned int)+0x13>
c000de89:	43                   	inc    ebx
c000de8a:	eb d9                	jmp    c000de65 <Video::clearScreen(unsigned int)+0x9>
c000de8c:	5b                   	pop    ebx
c000de8d:	5e                   	pop    esi
c000de8e:	5f                   	pop    edi
c000de8f:	c3                   	ret    

c000de90 <Video::putpixel(int, int, unsigned int)>:
c000de90:	c7 44 24 04 88 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020388
c000de98:	e9 98 28 00 00       	jmp    c0010735 <KePanic(char const*)>
c000de9d:	90                   	nop

c000de9e <Video::readPixelApprox(int, int)>:
c000de9e:	83 ec 18             	sub    esp,0x18
c000dea1:	68 a9 03 02 c0       	push   0xc00203a9
c000dea6:	e8 8a 28 00 00       	call   c0010735 <KePanic(char const*)>
c000deab:	31 c0                	xor    eax,eax
c000dead:	83 c4 1c             	add    esp,0x1c
c000deb0:	c3                   	ret    
c000deb1:	90                   	nop

c000deb2 <Video::Video(char const*)>:
c000deb2:	83 ec 1c             	sub    esp,0x1c
c000deb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000debd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dec1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dec4:	e8 e1 e0 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000dec9:	ba 24 04 02 c0       	mov    edx,0xc0020424
c000dece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded2:	89 10                	mov    DWORD PTR [eax],edx
c000ded4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dee2:	90                   	nop
c000dee3:	83 c4 1c             	add    esp,0x1c
c000dee6:	c3                   	ret    
c000dee7:	90                   	nop

c000dee8 <Video::~Video()>:
c000dee8:	83 ec 1c             	sub    esp,0x1c
c000deeb:	ba 24 04 02 c0       	mov    edx,0xc0020424
c000def0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def4:	89 10                	mov    DWORD PTR [eax],edx
c000def6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000defa:	89 04 24             	mov    DWORD PTR [esp],eax
c000defd:	e8 14 de ff ff       	call   c000bd16 <Device::~Device()>
c000df02:	90                   	nop
c000df03:	83 c4 1c             	add    esp,0x1c
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <Video::~Video()>:
c000df08:	83 ec 1c             	sub    esp,0x1c
c000df0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000df12:	e8 d1 ff ff ff       	call   c000dee8 <Video::~Video()>
c000df17:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000df1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df23:	89 04 24             	mov    DWORD PTR [esp],eax
c000df26:	e8 a1 c9 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c000df2b:	83 c4 1c             	add    esp,0x1c
c000df2e:	c3                   	ret    
c000df2f:	90                   	nop

c000df30 <Video::isMonochrome()>:
c000df30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df34:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <Video::getWidth()>:
c000df3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df40:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <Video::getHeight()>:
c000df48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <Video::drawCursor(int, int, unsigned int*, int)>:
c000df54:	55                   	push   ebp
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 2c             	sub    esp,0x2c
c000df5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df5f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000df63:	83 f8 01             	cmp    eax,0x1
c000df66:	19 c9                	sbb    ecx,ecx
c000df68:	31 db                	xor    ebx,ebx
c000df6a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000df6e:	89 ce                	mov    esi,ecx
c000df70:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000df78:	f7 d6                	not    esi
c000df7a:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000df80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df84:	01 d8                	add    eax,ebx
c000df86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df8a:	57                   	push   edi
c000df8b:	e8 b8 ff ff ff       	call   c000df48 <Video::getHeight()>
c000df90:	59                   	pop    ecx
c000df91:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000df95:	7e 70                	jle    c000e007 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000df97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df9b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000df9f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dfa2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dfaa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dfb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfb5:	89 e8                	mov    eax,ebp
c000dfb7:	83 c0 20             	add    eax,0x20
c000dfba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfbe:	57                   	push   edi
c000dfbf:	e8 78 ff ff ff       	call   c000df3c <Video::getWidth()>
c000dfc4:	5a                   	pop    edx
c000dfc5:	39 c5                	cmp    ebp,eax
c000dfc7:	7d 34                	jge    c000dffd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dfc9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dfce:	74 05                	je     c000dfd5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dfd0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfd2:	56                   	push   esi
c000dfd3:	eb 0d                	jmp    c000dfe2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dfd5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dfda:	74 12                	je     c000dfee <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dfdc:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfe6:	55                   	push   ebp
c000dfe7:	57                   	push   edi
c000dfe8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dff2:	45                   	inc    ebp
c000dff3:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dff7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000dffb:	75 c1                	jne    c000dfbe <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dffd:	43                   	inc    ebx
c000dffe:	83 fb 20             	cmp    ebx,0x20
c000e001:	0f 85 79 ff ff ff    	jne    c000df80 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e007:	83 c4 2c             	add    esp,0x2c
c000e00a:	5b                   	pop    ebx
c000e00b:	5e                   	pop    esi
c000e00c:	5f                   	pop    edi
c000e00d:	5d                   	pop    ebp
c000e00e:	c3                   	ret    
c000e00f:	90                   	nop

c000e010 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e010:	55                   	push   ebp
c000e011:	57                   	push   edi
c000e012:	56                   	push   esi
c000e013:	53                   	push   ebx
c000e014:	83 ec 28             	sub    esp,0x28
c000e017:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e01b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e01f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e023:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e027:	c1 e6 08             	shl    esi,0x8
c000e02a:	01 c6                	add    esi,eax
c000e02c:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e030:	c1 e5 08             	shl    ebp,0x8
c000e033:	01 c5                	add    ebp,eax
c000e035:	89 f0                	mov    eax,esi
c000e037:	0f af c5             	imul   eax,ebp
c000e03a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e041:	50                   	push   eax
c000e042:	e8 1f 9a ff ff       	call   c0007a66 <malloc>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	85 c0                	test   eax,eax
c000e04c:	89 c7                	mov    edi,eax
c000e04e:	75 10                	jne    c000e060 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	68 d4 03 02 c0       	push   0xc00203d4
c000e058:	e8 d8 26 00 00       	call   c0010735 <KePanic(char const*)>
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e063:	ba 12 00 00 00       	mov    edx,0x12
c000e068:	84 c0                	test   al,al
c000e06a:	74 11                	je     c000e07d <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e06c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e070:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e074:	c1 fa 03             	sar    edx,0x3
c000e077:	0f af d1             	imul   edx,ecx
c000e07a:	83 c2 12             	add    edx,0x12
c000e07d:	85 f6                	test   esi,esi
c000e07f:	74 04                	je     c000e085 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e081:	85 ed                	test   ebp,ebp
c000e083:	75 12                	jne    c000e097 <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e085:	83 ec 0c             	sub    esp,0xc
c000e088:	68 e4 03 02 c0       	push   0xc00203e4
c000e08d:	e8 54 c9 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000e092:	e9 c1 00 00 00       	jmp    c000e158 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e097:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e09b:	80 f9 02             	cmp    cl,0x2
c000e09e:	0f 85 9f 00 00 00    	jne    c000e143 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e0a4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e0a9:	75 0f                	jne    c000e0ba <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e0ab:	84 c0                	test   al,al
c000e0ad:	75 0b                	jne    c000e0ba <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e0af:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e0b2:	80 e9 18             	sub    cl,0x18
c000e0b5:	f6 c1 f7             	test   cl,0xf7
c000e0b8:	74 0d                	je     c000e0c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e0ba:	83 ec 0c             	sub    esp,0xc
c000e0bd:	68 f9 03 02 c0       	push   0xc00203f9
c000e0c2:	e9 84 00 00 00       	jmp    c000e14b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e0c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e0d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0db:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0de:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e0e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e0ea:	75 0c                	jne    c000e0f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e0ec:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e0f1:	c1 e0 18             	shl    eax,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e0fd:	ff 04 24             	inc    DWORD PTR [esp]
c000e100:	c1 e0 10             	shl    eax,0x10
c000e103:	89 c1                	mov    ecx,eax
c000e105:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e10a:	c1 e0 08             	shl    eax,0x8
c000e10d:	09 c8                	or     eax,ecx
c000e10f:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e113:	09 c8                	or     eax,ecx
c000e115:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e118:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e11c:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e120:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e124:	c1 f8 03             	sar    eax,0x3
c000e127:	01 c2                	add    edx,eax
c000e129:	89 c8                	mov    eax,ecx
c000e12b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e12f:	39 c6                	cmp    esi,eax
c000e131:	7f ab                	jg     c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e133:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e137:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e13b:	7e 22                	jle    c000e15f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e13d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e141:	eb 94                	jmp    c000e0d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e143:	50                   	push   eax
c000e144:	50                   	push   eax
c000e145:	51                   	push   ecx
c000e146:	68 07 04 02 c0       	push   0xc0020407
c000e14b:	e8 96 c8 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000e150:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e153:	e8 21 99 ff ff       	call   c0007a79 <free>
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	31 ff                	xor    edi,edi
c000e15d:	eb 0c                	jmp    c000e16b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e15f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e163:	89 30                	mov    DWORD PTR [eax],esi
c000e165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e169:	89 28                	mov    DWORD PTR [eax],ebp
c000e16b:	83 c4 1c             	add    esp,0x1c
c000e16e:	89 f8                	mov    eax,edi
c000e170:	5b                   	pop    ebx
c000e171:	5e                   	pop    esi
c000e172:	5f                   	pop    edi
c000e173:	5d                   	pop    ebp
c000e174:	c3                   	ret    
c000e175:	90                   	nop

c000e176 <Video::putTGA(int, int, unsigned char*, int)>:
c000e176:	55                   	push   ebp
c000e177:	57                   	push   edi
c000e178:	56                   	push   esi
c000e179:	53                   	push   ebx
c000e17a:	83 ec 28             	sub    esp,0x28
c000e17d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e181:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e185:	50                   	push   eax
c000e186:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e18a:	50                   	push   eax
c000e18b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e18f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e193:	57                   	push   edi
c000e194:	e8 77 fe ff ff       	call   c000e010 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e199:	83 c4 20             	add    esp,0x20
c000e19c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e1a0:	85 c0                	test   eax,eax
c000e1a2:	74 35                	je     c000e1d9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1a4:	89 c6                	mov    esi,eax
c000e1a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e1ae:	39 d8                	cmp    eax,ebx
c000e1b0:	7e 27                	jle    c000e1d9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e1ba:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e1be:	39 e9                	cmp    ecx,ebp
c000e1c0:	7e 14                	jle    c000e1d6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e1c2:	83 c6 04             	add    esi,0x4
c000e1c5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e1c7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e1ca:	53                   	push   ebx
c000e1cb:	55                   	push   ebp
c000e1cc:	45                   	inc    ebp
c000e1cd:	57                   	push   edi
c000e1ce:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1d1:	83 c4 10             	add    esp,0x10
c000e1d4:	eb e0                	jmp    c000e1b6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e1d6:	43                   	inc    ebx
c000e1d7:	eb cd                	jmp    c000e1a6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e1d9:	83 c4 1c             	add    esp,0x1c
c000e1dc:	5b                   	pop    ebx
c000e1dd:	5e                   	pop    esi
c000e1de:	5f                   	pop    edi
c000e1df:	5d                   	pop    ebp
c000e1e0:	c3                   	ret    
c000e1e1:	66 90                	xchg   ax,ax
c000e1e3:	90                   	nop

c000e1e4 <ACPI::close(int, int, void*)>:
c000e1e4:	83 ec 2c             	sub    esp,0x2c
c000e1e7:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e1ef:	74 0b                	je     c000e1fc <ACPI::close(int, int, void*)+0x18>
c000e1f1:	b8 00 00 00 00       	mov    eax,0x0
c000e1f6:	e9 95 00 00 00       	jmp    c000e290 <ACPI::close(int, int, void*)+0xac>
c000e1fb:	90                   	nop
c000e1fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e201:	75 25                	jne    c000e228 <ACPI::close(int, int, void*)+0x44>
c000e203:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e208:	85 c0                	test   eax,eax
c000e20a:	74 08                	je     c000e214 <ACPI::close(int, int, void*)+0x30>
c000e20c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e211:	ff d0                	call   eax
c000e213:	90                   	nop
c000e214:	c7 04 24 68 04 02 c0 	mov    DWORD PTR [esp],0xc0020468
c000e21b:	e8 15 25 00 00       	call   c0010735 <KePanic(char const*)>
c000e220:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e225:	eb 69                	jmp    c000e290 <ACPI::close(int, int, void*)+0xac>
c000e227:	90                   	nop
c000e228:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e22d:	75 59                	jne    c000e288 <ACPI::close(int, int, void*)+0xa4>
c000e22f:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e234:	85 c0                	test   eax,eax
c000e236:	74 08                	je     c000e240 <ACPI::close(int, int, void*)+0x5c>
c000e238:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e23d:	ff d0                	call   eax
c000e23f:	90                   	nop
c000e240:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e245:	8d 76 00             	lea    esi,[esi+0x0]
c000e248:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e24d:	83 e0 02             	and    eax,0x2
c000e250:	74 1e                	je     c000e270 <ACPI::close(int, int, void*)+0x8c>
c000e252:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e25d:	89 c2                	mov    edx,eax
c000e25f:	ec                   	in     al,dx
c000e260:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e264:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e269:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e26d:	eb d9                	jmp    c000e248 <ACPI::close(int, int, void*)+0x64>
c000e26f:	90                   	nop
c000e270:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e277:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e27c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e285:	ee                   	out    dx,al
c000e286:	66 90                	xchg   ax,ax
c000e288:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e28d:	8d 76 00             	lea    esi,[esi+0x0]
c000e290:	83 c4 2c             	add    esp,0x2c
c000e293:	c3                   	ret    

c000e294 <findRSDP()>:
c000e294:	83 ec 2c             	sub    esp,0x2c
c000e297:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e29c:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e2a3:	24 04                	and    al,0x4
c000e2a5:	75 09                	jne    c000e2b0 <findRSDP()+0x1c>
c000e2a7:	b8 00 00 00 00       	mov    eax,0x0
c000e2ac:	eb 7a                	jmp    c000e328 <findRSDP()+0x94>
c000e2ae:	66 90                	xchg   ax,ax
c000e2b0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e2b5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e2ba:	7f 1c                	jg     c000e2d8 <findRSDP()+0x44>
c000e2bc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e2c1:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e2c8:	80 e2 fb             	and    dl,0xfb
c000e2cb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2d1:	b8 00 00 00 00       	mov    eax,0x0
c000e2d6:	eb 50                	jmp    c000e328 <findRSDP()+0x94>
c000e2d8:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e2e0:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e2e8:	77 36                	ja     c000e320 <findRSDP()+0x8c>
c000e2ea:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e2f2:	c7 44 24 04 03 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020503
c000e2fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e2fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000e301:	e8 7a 20 ff ff       	call   c0000380 <memcmp>
c000e306:	85 c0                	test   eax,eax
c000e308:	0f 94 c0             	sete   al
c000e30b:	84 c0                	test   al,al
c000e30d:	74 09                	je     c000e318 <findRSDP()+0x84>
c000e30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e313:	eb 13                	jmp    c000e328 <findRSDP()+0x94>
c000e315:	8d 76 00             	lea    esi,[esi+0x0]
c000e318:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000e31d:	eb c1                	jmp    c000e2e0 <findRSDP()+0x4c>
c000e31f:	90                   	nop
c000e320:	b8 00 00 00 00       	mov    eax,0x0
c000e325:	8d 76 00             	lea    esi,[esi+0x0]
c000e328:	83 c4 2c             	add    esp,0x2c
c000e32b:	c3                   	ret    

c000e32c <loadACPITables(unsigned char*)>:
c000e32c:	57                   	push   edi
c000e32d:	56                   	push   esi
c000e32e:	53                   	push   ebx
c000e32f:	83 c4 80             	add    esp,0xffffff80
c000e332:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e337:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e33e:	24 04                	and    al,0x4
c000e340:	0f 84 5e 02 00 00    	je     c000e5a4 <loadACPITables(unsigned char*)+0x278>
c000e346:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000e34d:	84 c0                	test   al,al
c000e34f:	74 7f                	je     c000e3d0 <loadACPITables(unsigned char*)+0xa4>
c000e351:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e358:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000e35c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e363:	83 e8 24             	sub    eax,0x24
c000e366:	c1 e8 03             	shr    eax,0x3
c000e369:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e36d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e37c:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000e380:	0f 8d be 00 00 00    	jge    c000e444 <loadACPITables(unsigned char*)+0x118>
c000e386:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e38d:	83 c0 24             	add    eax,0x24
c000e390:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000e394:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000e398:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e39c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e3a0:	c1 e0 03             	shl    eax,0x3
c000e3a3:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000e3a7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e3ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e3ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3b0:	89 c1                	mov    ecx,eax
c000e3b2:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e3b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ba:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e3c0:	89 ca                	mov    edx,ecx
c000e3c2:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e3c9:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000e3cd:	eb a9                	jmp    c000e378 <loadACPITables(unsigned char*)+0x4c>
c000e3cf:	90                   	nop
c000e3d0:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e3d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e3db:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e3df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3e2:	83 e8 24             	sub    eax,0x24
c000e3e5:	c1 e8 02             	shr    eax,0x2
c000e3e8:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e3ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000e3f4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e3f8:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000e3fc:	7d 46                	jge    c000e444 <loadACPITables(unsigned char*)+0x118>
c000e3fe:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e405:	83 c0 24             	add    eax,0x24
c000e408:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e40c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000e414:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e418:	c1 e0 02             	shl    eax,0x2
c000e41b:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000e41f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e423:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e425:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e42a:	8d 50 01             	lea    edx,[eax+0x1]
c000e42d:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e433:	89 ca                	mov    edx,ecx
c000e435:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e43c:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000e440:	eb b2                	jmp    c000e3f4 <loadACPITables(unsigned char*)+0xc8>
c000e442:	66 90                	xchg   ax,ax
c000e444:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000e44c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e451:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000e455:	0f 8d 4d 01 00 00    	jge    c000e5a8 <loadACPITables(unsigned char*)+0x27c>
c000e45b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e45f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e466:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e46a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e46e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e472:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e476:	25 ff 0f 00 00       	and    eax,0xfff
c000e47b:	89 c6                	mov    esi,eax
c000e47d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e483:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e48a:	e8 01 b1 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000e48f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e493:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e499:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e4a1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000e4a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e4b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4b4:	e8 39 bb ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4b9:	09 f0                	or     eax,esi
c000e4bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e4bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e4c3:	c1 e0 03             	shl    eax,0x3
c000e4c6:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e4cb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4d7:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000e4df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4eb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e4ef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e4f3:	89 c6                	mov    esi,eax
c000e4f5:	89 d7                	mov    edi,edx
c000e4f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4f9:	89 c8                	mov    eax,ecx
c000e4fb:	89 fa                	mov    edx,edi
c000e4fd:	89 f3                	mov    ebx,esi
c000e4ff:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e503:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e507:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e50b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e50f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e512:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e516:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e51a:	05 00 10 00 00       	add    eax,0x1000
c000e51f:	c1 e8 0c             	shr    eax,0xc
c000e522:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e526:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e52a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e52e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e532:	25 ff 0f 00 00       	and    eax,0xfff
c000e537:	89 c6                	mov    esi,eax
c000e539:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e53f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e543:	89 04 24             	mov    DWORD PTR [esp],eax
c000e546:	e8 45 b0 ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000e54b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e54f:	89 d1                	mov    ecx,edx
c000e551:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000e557:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e55f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e56b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e56f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e572:	e8 7b ba ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e577:	09 f0                	or     eax,esi
c000e579:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e57d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e581:	89 04 24             	mov    DWORD PTR [esp],eax
c000e584:	e8 20 b3 ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e589:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e58d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000e591:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e598:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000e59c:	e9 ab fe ff ff       	jmp    c000e44c <loadACPITables(unsigned char*)+0x120>
c000e5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5a4:	90                   	nop
c000e5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5a8:	83 ec 80             	sub    esp,0xffffff80
c000e5ab:	5b                   	pop    ebx
c000e5ac:	5e                   	pop    esi
c000e5ad:	5f                   	pop    edi
c000e5ae:	c3                   	ret    
c000e5af:	90                   	nop

c000e5b0 <findRSDT(unsigned char*)>:
c000e5b0:	57                   	push   edi
c000e5b1:	56                   	push   esi
c000e5b2:	53                   	push   ebx
c000e5b3:	83 ec 70             	sub    esp,0x70
c000e5b6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5bb:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e5c2:	24 04                	and    al,0x4
c000e5c4:	75 0a                	jne    c000e5d0 <findRSDT(unsigned char*)+0x20>
c000e5c6:	b8 00 00 00 00       	mov    eax,0x0
c000e5cb:	e9 44 01 00 00       	jmp    c000e714 <findRSDT(unsigned char*)+0x164>
c000e5d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e5d4:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e5d8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000e5df:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e5e3:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000e5eb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e5ef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e5f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e5f7:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000e5fb:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000e5ff:	89 c6                	mov    esi,eax
c000e601:	89 d7                	mov    edi,edx
c000e603:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e605:	89 c8                	mov    eax,ecx
c000e607:	89 fa                	mov    edx,edi
c000e609:	89 f3                	mov    ebx,esi
c000e60b:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000e60f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000e613:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e617:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000e61c:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000e620:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000e628:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e62c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e630:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e634:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e638:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e63c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e640:	25 ff 0f 00 00       	and    eax,0xfff
c000e645:	89 c6                	mov    esi,eax
c000e647:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e64d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e654:	e8 37 af ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000e659:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000e65d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e663:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e66b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e677:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e67b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e67e:	e8 6f b9 ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e683:	09 f0                	or     eax,esi
c000e685:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e689:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e68d:	25 ff 0f 00 00       	and    eax,0xfff
c000e692:	89 c6                	mov    esi,eax
c000e694:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e69a:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e6a1:	e8 ea ae ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c000e6a6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000e6aa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6b0:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e6b8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e6c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e6c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6cb:	e8 22 b9 ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6d0:	09 f0                	or     eax,esi
c000e6d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e6d6:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000e6db:	75 13                	jne    c000e6f0 <findRSDT(unsigned char*)+0x140>
c000e6dd:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e6e4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6e8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e6ec:	eb 22                	jmp    c000e710 <findRSDT(unsigned char*)+0x160>
c000e6ee:	66 90                	xchg   ax,ax
c000e6f0:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000e6f5:	75 11                	jne    c000e708 <findRSDT(unsigned char*)+0x158>
c000e6f7:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e6fe:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e702:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e706:	eb 08                	jmp    c000e710 <findRSDT(unsigned char*)+0x160>
c000e708:	b8 00 00 00 00       	mov    eax,0x0
c000e70d:	eb 05                	jmp    c000e714 <findRSDT(unsigned char*)+0x164>
c000e70f:	90                   	nop
c000e710:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000e714:	83 c4 70             	add    esp,0x70
c000e717:	5b                   	pop    ebx
c000e718:	5e                   	pop    esi
c000e719:	5f                   	pop    edi
c000e71a:	c3                   	ret    
c000e71b:	90                   	nop

c000e71c <findDataTable(unsigned char*, char*)>:
c000e71c:	83 ec 2c             	sub    esp,0x2c
c000e71f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e724:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e72b:	24 04                	and    al,0x4
c000e72d:	75 09                	jne    c000e738 <findDataTable(unsigned char*, char*)+0x1c>
c000e72f:	b8 00 00 00 00       	mov    eax,0x0
c000e734:	eb 62                	jmp    c000e798 <findDataTable(unsigned char*, char*)+0x7c>
c000e736:	66 90                	xchg   ax,ax
c000e738:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e740:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e745:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000e749:	7d 45                	jge    c000e790 <findDataTable(unsigned char*, char*)+0x74>
c000e74b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e74f:	c1 e0 03             	shl    eax,0x3
c000e752:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000e758:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000e760:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e764:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e768:	89 14 24             	mov    DWORD PTR [esp],edx
c000e76b:	e8 10 1c ff ff       	call   c0000380 <memcmp>
c000e770:	85 c0                	test   eax,eax
c000e772:	0f 94 c0             	sete   al
c000e775:	84 c0                	test   al,al
c000e777:	74 0f                	je     c000e788 <findDataTable(unsigned char*, char*)+0x6c>
c000e779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e77d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e784:	eb 12                	jmp    c000e798 <findDataTable(unsigned char*, char*)+0x7c>
c000e786:	66 90                	xchg   ax,ax
c000e788:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78c:	eb b2                	jmp    c000e740 <findDataTable(unsigned char*, char*)+0x24>
c000e78e:	66 90                	xchg   ax,ax
c000e790:	b8 00 00 00 00       	mov    eax,0x0
c000e795:	8d 76 00             	lea    esi,[esi+0x0]
c000e798:	83 c4 2c             	add    esp,0x2c
c000e79b:	c3                   	ret    

c000e79c <scanMADT()>:
c000e79c:	53                   	push   ebx
c000e79d:	83 ec 48             	sub    esp,0x48
c000e7a0:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e7a5:	25 00 04 00 00       	and    eax,0x400
c000e7aa:	74 18                	je     c000e7c4 <scanMADT()+0x28>
c000e7ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7b1:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e7b8:	80 e2 fb             	and    dl,0xfb
c000e7bb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7c9:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e7d0:	24 04                	and    al,0x4
c000e7d2:	0f 84 7c 04 00 00    	je     c000ec54 <scanMADT()+0x4b8>
c000e7d8:	e8 b7 fa ff ff       	call   c000e294 <findRSDP()>
c000e7dd:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e7e2:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e7e7:	85 c0                	test   eax,eax
c000e7e9:	75 1d                	jne    c000e808 <scanMADT()+0x6c>
c000e7eb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7f0:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e7f7:	80 e2 fb             	and    dl,0xfb
c000e7fa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e800:	e9 57 04 00 00       	jmp    c000ec5c <scanMADT()+0x4c0>
c000e805:	8d 76 00             	lea    esi,[esi+0x0]
c000e808:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e80d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e810:	e8 9b fd ff ff       	call   c000e5b0 <findRSDT(unsigned char*)>
c000e815:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e81a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e81f:	85 c0                	test   eax,eax
c000e821:	75 1d                	jne    c000e840 <scanMADT()+0xa4>
c000e823:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e828:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e82f:	80 e2 fb             	and    dl,0xfb
c000e832:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e838:	e9 1f 04 00 00       	jmp    c000ec5c <scanMADT()+0x4c0>
c000e83d:	8d 76 00             	lea    esi,[esi+0x0]
c000e840:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e845:	89 04 24             	mov    DWORD PTR [esp],eax
c000e848:	e8 df fa ff ff       	call   c000e32c <loadACPITables(unsigned char*)>
c000e84d:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e852:	c7 44 24 04 0c 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc002050c
c000e85a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e85d:	e8 ba fe ff ff       	call   c000e71c <findDataTable(unsigned char*, char*)>
c000e862:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e866:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000e86b:	75 1b                	jne    c000e888 <scanMADT()+0xec>
c000e86d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e872:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e879:	80 e2 fe             	and    dl,0xfe
c000e87c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e882:	e9 d5 03 00 00       	jmp    c000ec5c <scanMADT()+0x4c0>
c000e887:	90                   	nop
c000e888:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000e890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e894:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e897:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000e89b:	0f 87 bb 03 00 00    	ja     c000ec5c <scanMADT()+0x4c0>
c000e8a1:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000e8a9:	0f 87 ad 03 00 00    	ja     c000ec5c <scanMADT()+0x4c0>
c000e8af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e8b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e8be:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e8c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e8c6:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e8cb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000e8cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e8d6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e8da:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e8de:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e8e3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000e8e7:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000e8ec:	0f 86 66 03 00 00    	jbe    c000ec58 <scanMADT()+0x4bc>
c000e8f2:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000e8f7:	75 5f                	jne    c000e958 <scanMADT()+0x1bc>
c000e8f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8fd:	8d 50 01             	lea    edx,[eax+0x1]
c000e900:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e904:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e90b:	0f b6 d2             	movzx  edx,dl
c000e90e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e912:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e917:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e91d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e921:	8d 50 01             	lea    edx,[eax+0x1]
c000e924:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e928:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e92f:	88 d1                	mov    cl,dl
c000e931:	fe c1                	inc    cl
c000e933:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e939:	0f b6 d2             	movzx  edx,dl
c000e93c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e940:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e945:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e94b:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000e950:	e9 eb 02 00 00       	jmp    c000ec40 <scanMADT()+0x4a4>
c000e955:	8d 76 00             	lea    esi,[esi+0x0]
c000e958:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000e95d:	0f 85 25 01 00 00    	jne    c000ea88 <scanMADT()+0x2ec>
c000e963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e967:	8d 50 01             	lea    edx,[eax+0x1]
c000e96a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e96e:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000e975:	0f b6 d2             	movzx  edx,dl
c000e978:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e97c:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e981:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000e987:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000e98b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e98f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e993:	01 d0                	add    eax,edx
c000e995:	83 c0 2c             	add    eax,0x2c
c000e998:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000e99b:	0f b6 d0             	movzx  edx,al
c000e99e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9a2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9a9:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000e9ae:	0f b6 c0             	movzx  eax,al
c000e9b1:	c1 e0 08             	shl    eax,0x8
c000e9b4:	89 d1                	mov    ecx,edx
c000e9b6:	09 c1                	or     ecx,eax
c000e9b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9bc:	8d 50 02             	lea    edx,[eax+0x2]
c000e9bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9c3:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000e9c8:	0f b6 c0             	movzx  eax,al
c000e9cb:	c1 e0 10             	shl    eax,0x10
c000e9ce:	09 c1                	or     ecx,eax
c000e9d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9d4:	8d 50 03             	lea    edx,[eax+0x3]
c000e9d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9db:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000e9e0:	0f b6 c0             	movzx  eax,al
c000e9e3:	c1 e0 18             	shl    eax,0x18
c000e9e6:	09 c1                	or     ecx,eax
c000e9e8:	89 ca                	mov    edx,ecx
c000e9ea:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000e9f1:	0f b6 c0             	movzx  eax,al
c000e9f4:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000e9fb:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea08:	01 d0                	add    eax,edx
c000ea0a:	83 c0 2c             	add    eax,0x2c
c000ea0d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ea10:	0f b6 d0             	movzx  edx,al
c000ea13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea17:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea1e:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ea23:	0f b6 c0             	movzx  eax,al
c000ea26:	c1 e0 08             	shl    eax,0x8
c000ea29:	89 d1                	mov    ecx,edx
c000ea2b:	09 c1                	or     ecx,eax
c000ea2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea31:	8d 50 02             	lea    edx,[eax+0x2]
c000ea34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea38:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea3d:	0f b6 c0             	movzx  eax,al
c000ea40:	c1 e0 10             	shl    eax,0x10
c000ea43:	09 c1                	or     ecx,eax
c000ea45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea49:	8d 50 03             	lea    edx,[eax+0x3]
c000ea4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea50:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea55:	0f b6 c0             	movzx  eax,al
c000ea58:	c1 e0 18             	shl    eax,0x18
c000ea5b:	09 c1                	or     ecx,eax
c000ea5d:	89 ca                	mov    edx,ecx
c000ea5f:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ea66:	0f b6 c0             	movzx  eax,al
c000ea69:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000ea70:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea75:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ea7c:	fe c0                	inc    al
c000ea7e:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ea83:	e9 b8 01 00 00       	jmp    c000ec40 <scanMADT()+0x4a4>
c000ea88:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000ea8d:	0f 85 f9 00 00 00    	jne    c000eb8c <scanMADT()+0x3f0>
c000ea93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea97:	8d 50 01             	lea    edx,[eax+0x1]
c000ea9a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ea9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eaa2:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eaa7:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000eaab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaaf:	8d 50 01             	lea    edx,[eax+0x1]
c000eab2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eab6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eaba:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eabf:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000eac3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eac7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eacb:	01 d0                	add    eax,edx
c000eacd:	83 c0 2c             	add    eax,0x2c
c000ead0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ead3:	0f b6 d0             	movzx  edx,al
c000ead6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eada:	8d 48 01             	lea    ecx,[eax+0x1]
c000eadd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eae1:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eae6:	0f b6 c0             	movzx  eax,al
c000eae9:	c1 e0 08             	shl    eax,0x8
c000eaec:	89 d1                	mov    ecx,edx
c000eaee:	09 c1                	or     ecx,eax
c000eaf0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaf4:	8d 50 02             	lea    edx,[eax+0x2]
c000eaf7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eafb:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb00:	0f b6 c0             	movzx  eax,al
c000eb03:	c1 e0 10             	shl    eax,0x10
c000eb06:	09 c1                	or     ecx,eax
c000eb08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb0c:	8d 50 03             	lea    edx,[eax+0x3]
c000eb0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb13:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb18:	0f b6 c0             	movzx  eax,al
c000eb1b:	c1 e0 18             	shl    eax,0x18
c000eb1e:	09 c8                	or     eax,ecx
c000eb20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eb24:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eb29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb31:	01 d0                	add    eax,edx
c000eb33:	83 c0 2c             	add    eax,0x2c
c000eb36:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eb39:	0f b6 c0             	movzx  eax,al
c000eb3c:	0f bf d0             	movsx  edx,ax
c000eb3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb43:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb4a:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eb4f:	0f b6 c0             	movzx  eax,al
c000eb52:	c1 e0 08             	shl    eax,0x8
c000eb55:	98                   	cwde   
c000eb56:	09 d0                	or     eax,edx
c000eb58:	98                   	cwde   
c000eb59:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000eb5e:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000eb63:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000eb68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb6c:	88 90 40 1b 02 c0    	mov    BYTE PTR [eax-0x3ffde4c0],dl
c000eb72:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000eb77:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000eb7c:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000eb84:	e9 b7 00 00 00       	jmp    c000ec40 <scanMADT()+0x4a4>
c000eb89:	8d 76 00             	lea    esi,[esi+0x0]
c000eb8c:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000eb91:	0f 85 9d 00 00 00    	jne    c000ec34 <scanMADT()+0x498>
c000eb97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb9b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eba2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eba6:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ebab:	0f b6 c0             	movzx  eax,al
c000ebae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ebb2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ebb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebba:	01 d0                	add    eax,edx
c000ebbc:	83 c0 2c             	add    eax,0x2c
c000ebbf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ebc2:	0f b6 d0             	movzx  edx,al
c000ebc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc9:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebd0:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ebd5:	0f b6 c0             	movzx  eax,al
c000ebd8:	c1 e0 08             	shl    eax,0x8
c000ebdb:	09 d0                	or     eax,edx
c000ebdd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ebe1:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ebe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebea:	8d 50 01             	lea    edx,[eax+0x1]
c000ebed:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ebf1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ebf5:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ebfa:	0f b6 c0             	movzx  eax,al
c000ebfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec05:	c1 e0 08             	shl    eax,0x8
c000ec08:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000ec0c:	89 c1                	mov    ecx,eax
c000ec0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec12:	c1 e0 18             	shl    eax,0x18
c000ec15:	89 c3                	mov    ebx,eax
c000ec17:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec1c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec1f:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ec25:	09 d9                	or     ecx,ebx
c000ec27:	89 ca                	mov    edx,ecx
c000ec29:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ec30:	eb 0e                	jmp    c000ec40 <scanMADT()+0x4a4>
c000ec32:	66 90                	xchg   ax,ax
c000ec34:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000ec39:	75 05                	jne    c000ec40 <scanMADT()+0x4a4>
c000ec3b:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000ec40:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000ec45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec49:	01 d0                	add    eax,edx
c000ec4b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ec4f:	e9 3c fc ff ff       	jmp    c000e890 <scanMADT()+0xf4>
c000ec54:	90                   	nop
c000ec55:	eb 05                	jmp    c000ec5c <scanMADT()+0x4c0>
c000ec57:	90                   	nop
c000ec58:	90                   	nop
c000ec59:	8d 76 00             	lea    esi,[esi+0x0]
c000ec5c:	83 c4 48             	add    esp,0x48
c000ec5f:	5b                   	pop    ebx
c000ec60:	c3                   	ret    
c000ec61:	90                   	nop
c000ec62:	66 90                	xchg   ax,ax

c000ec64 <ACPI::ACPI()>:
c000ec64:	83 ec 1c             	sub    esp,0x1c
c000ec67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec6b:	c7 44 24 04 11 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020511
c000ec73:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec76:	e8 2f d3 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000ec7b:	ba 48 06 02 c0       	mov    edx,0xc0020648
c000ec80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec84:	89 10                	mov    DWORD PTR [eax],edx
c000ec86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec8a:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ec91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec95:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ec9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eca3:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ecad:	e8 ea fa ff ff       	call   c000e79c <scanMADT()>
c000ecb2:	90                   	nop
c000ecb3:	83 c4 1c             	add    esp,0x1c
c000ecb6:	c3                   	ret    
c000ecb7:	90                   	nop

c000ecb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ecb8:	83 ec 3c             	sub    esp,0x3c
c000ecbb:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000ecbf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecc3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000ecc7:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000eccb:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000ecd0:	88 c8                	mov    al,cl
c000ecd2:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ecd6:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ecdb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ece3:	90                   	nop
c000ece4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ece8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ecee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ecf2:	0f 8d 98 00 00 00    	jge    c000ed90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000ecf8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed00:	83 c2 2a             	add    edx,0x2a
c000ed03:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000ed08:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000ed0d:	39 c2                	cmp    edx,eax
c000ed0f:	75 73                	jne    c000ed84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ed11:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed19:	83 c2 2a             	add    edx,0x2a
c000ed1c:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000ed21:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000ed25:	75 5d                	jne    c000ed84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ed27:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ed2c:	74 32                	je     c000ed60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000ed2e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed36:	83 c2 2a             	add    edx,0x2a
c000ed39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed44:	39 c2                	cmp    edx,eax
c000ed46:	74 0c                	je     c000ed54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ed48:	c7 04 24 8c 04 02 c0 	mov    DWORD PTR [esp],0xc002048c
c000ed4f:	e8 e1 19 00 00       	call   c0010735 <KePanic(char const*)>
c000ed54:	c7 04 24 16 05 02 c0 	mov    DWORD PTR [esp],0xc0020516
c000ed5b:	e8 d5 19 00 00       	call   c0010735 <KePanic(char const*)>
c000ed60:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed6c:	83 c2 2a             	add    edx,0x2a
c000ed6f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ed73:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed75:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ed78:	89 01                	mov    DWORD PTR [ecx],eax
c000ed7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ed7d:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ed82:	66 90                	xchg   ax,ax
c000ed84:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ed88:	e9 57 ff ff ff       	jmp    c000ece4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ed8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed90:	90                   	nop
c000ed91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed95:	83 c4 3c             	add    esp,0x3c
c000ed98:	c2 04 00             	ret    0x4
c000ed9b:	90                   	nop

c000ed9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ed9c:	83 ec 2c             	sub    esp,0x2c
c000ed9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eda3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000eda7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edab:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000edb0:	88 c8                	mov    al,cl
c000edb2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000edb6:	88 d0                	mov    al,dl
c000edb8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000edbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edca:	83 c2 2a             	add    edx,0x2a
c000edcd:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000edd2:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000edd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edda:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ede0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ede7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edeb:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000edf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edfa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000edff:	fe c0                	inc    al
c000ee01:	88 c1                	mov    cl,al
c000ee03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee07:	83 c2 2a             	add    edx,0x2a
c000ee0a:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ee0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee12:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee23:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ee27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee31:	8d 50 01             	lea    edx,[eax+0x1]
c000ee34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee38:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ee3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee42:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee48:	3d 00 02 00 00       	cmp    eax,0x200
c000ee4d:	75 0d                	jne    c000ee5c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ee4f:	c7 04 24 25 05 02 c0 	mov    DWORD PTR [esp],0xc0020525
c000ee56:	e8 da 18 00 00       	call   c0010735 <KePanic(char const*)>
c000ee5b:	90                   	nop
c000ee5c:	90                   	nop
c000ee5d:	83 c4 2c             	add    esp,0x2c
c000ee60:	c3                   	ret    
c000ee61:	90                   	nop
c000ee62:	66 90                	xchg   ax,ax

c000ee64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ee64:	b8 00 00 00 00       	mov    eax,0x0
c000ee69:	c3                   	ret    
c000ee6a:	66 90                	xchg   ax,ax

c000ee6c <ACPI::detectPCI()>:
c000ee6c:	53                   	push   ebx
c000ee6d:	83 ec 38             	sub    esp,0x38
c000ee70:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ee75:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000ee7a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ee7f:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ee86:	24 04                	and    al,0x4
c000ee88:	74 2a                	je     c000eeb4 <ACPI::detectPCI()+0x48>
c000ee8a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ee8f:	c7 44 24 04 42 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020542
c000ee97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee9a:	e8 7d f8 ff ff       	call   c000e71c <findDataTable(unsigned char*, char*)>
c000ee9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eea3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000eea8:	74 0a                	je     c000eeb4 <ACPI::detectPCI()+0x48>
c000eeaa:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000eeaf:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000eeb4:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000eebc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eec0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eec3:	3c 01                	cmp    al,0x1
c000eec5:	75 0d                	jne    c000eed4 <ACPI::detectPCI()+0x68>
c000eec7:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000eecc:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000eed1:	eb 25                	jmp    c000eef8 <ACPI::detectPCI()+0x8c>
c000eed3:	90                   	nop
c000eed4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eed8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eedb:	3c 02                	cmp    al,0x2
c000eedd:	75 19                	jne    c000eef8 <ACPI::detectPCI()+0x8c>
c000eedf:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000eee4:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000eee9:	74 0d                	je     c000eef8 <ACPI::detectPCI()+0x8c>
c000eeeb:	c7 04 24 bc 04 02 c0 	mov    DWORD PTR [esp],0xc00204bc
c000eef2:	e8 3e 18 00 00       	call   c0010735 <KePanic(char const*)>
c000eef7:	90                   	nop
c000eef8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000eefd:	34 01                	xor    al,0x1
c000eeff:	74 3f                	je     c000ef40 <ACPI::detectPCI()+0xd4>
c000ef01:	e8 2a 12 ff ff       	call   c0000130 <manualPCIProbe>
c000ef06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef0a:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000ef0f:	75 0f                	jne    c000ef20 <ACPI::detectPCI()+0xb4>
c000ef11:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef16:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef1b:	eb 23                	jmp    c000ef40 <ACPI::detectPCI()+0xd4>
c000ef1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef20:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000ef25:	75 19                	jne    c000ef40 <ACPI::detectPCI()+0xd4>
c000ef27:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef2c:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000ef31:	74 0d                	je     c000ef40 <ACPI::detectPCI()+0xd4>
c000ef33:	c7 04 24 bc 04 02 c0 	mov    DWORD PTR [esp],0xc00204bc
c000ef3a:	e8 f6 17 00 00       	call   c0010735 <KePanic(char const*)>
c000ef3f:	90                   	nop
c000ef40:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ef45:	0f 84 89 00 00 00    	je     c000efd4 <ACPI::detectPCI()+0x168>
c000ef4b:	c7 04 24 47 05 02 c0 	mov    DWORD PTR [esp],0xc0020547
c000ef52:	e8 6a 11 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000ef57:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000ef5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef66:	e8 fb 8a ff ff       	call   c0007a66 <malloc>
c000ef6b:	89 c3                	mov    ebx,eax
c000ef6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef70:	e8 71 ae 00 00       	call   c0019de6 <PCI::PCI()>
c000ef75:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000ef79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ef85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef88:	e8 85 ce ff ff       	call   c000be12 <Device::addChild(Device*)>
c000ef8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef91:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef93:	83 c0 08             	add    eax,0x8
c000ef96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef98:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000ef9d:	74 09                	je     c000efa8 <ACPI::detectPCI()+0x13c>
c000ef9f:	ba 01 00 00 00       	mov    edx,0x1
c000efa4:	eb 0a                	jmp    c000efb0 <ACPI::detectPCI()+0x144>
c000efa6:	66 90                	xchg   ax,ax
c000efa8:	ba 02 00 00 00       	mov    edx,0x2
c000efad:	8d 76 00             	lea    esi,[esi+0x0]
c000efb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000efb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000efc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000efc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efc8:	89 14 24             	mov    DWORD PTR [esp],edx
c000efcb:	ff d0                	call   eax
c000efcd:	e9 9a 00 00 00       	jmp    c000f06c <ACPI::detectPCI()+0x200>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	c7 04 24 5f 05 02 c0 	mov    DWORD PTR [esp],0xc002055f
c000efdb:	e8 e1 10 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000efe0:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000efe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efec:	89 04 24             	mov    DWORD PTR [esp],eax
c000efef:	e8 72 8a ff ff       	call   c0007a66 <malloc>
c000eff4:	89 c3                	mov    ebx,eax
c000eff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eff9:	e8 48 b9 00 00       	call   c001a946 <IDE::IDE()>
c000effe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f002:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f006:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f00e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f011:	e8 fc cd ff ff       	call   c000be12 <Device::addChild(Device*)>
c000f016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f01a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f028:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f031:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f035:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f03e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f042:	8b 00                	mov    eax,DWORD PTR [eax]
c000f044:	83 c0 08             	add    eax,0x8
c000f047:	8b 00                	mov    eax,DWORD PTR [eax]
c000f049:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f051:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f059:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f061:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f065:	89 14 24             	mov    DWORD PTR [esp],edx
c000f068:	ff d0                	call   eax
c000f06a:	66 90                	xchg   ax,ax
c000f06c:	90                   	nop
c000f06d:	83 c4 38             	add    esp,0x38
c000f070:	5b                   	pop    ebx
c000f071:	c3                   	ret    
c000f072:	66 90                	xchg   ax,ax

c000f074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f074:	83 ec 2c             	sub    esp,0x2c
c000f077:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f07b:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f07f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f083:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f088:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f08d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f091:	89 04 24             	mov    DWORD PTR [esp],eax
c000f094:	e8 71 80 ff ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c000f099:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f09d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f0a2:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f0a7:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f0af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0b6:	e8 7d 81 ff ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f0bb:	90                   	nop
c000f0bc:	83 c4 2c             	add    esp,0x2c
c000f0bf:	c3                   	ret    

c000f0c0 <ACPI::sleep()>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0c8:	85 c0                	test   eax,eax
c000f0ca:	74 08                	je     c000f0d4 <ACPI::sleep()+0x14>
c000f0cc:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0d1:	ff d0                	call   eax
c000f0d3:	90                   	nop
c000f0d4:	90                   	nop
c000f0d5:	83 c4 0c             	add    esp,0xc
c000f0d8:	c3                   	ret    
c000f0d9:	90                   	nop
c000f0da:	66 90                	xchg   ax,ax

c000f0dc <ACPI::open(int, int, void*)>:
c000f0dc:	53                   	push   ebx
c000f0dd:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f0e3:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f0ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0ed:	e8 7a fd ff ff       	call   c000ee6c <ACPI::detectPCI()>
c000f0f2:	c7 04 24 e4 04 02 c0 	mov    DWORD PTR [esp],0xc00204e4
c000f0f9:	e8 c3 0f 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000f0fe:	c7 04 24 74 05 02 c0 	mov    DWORD PTR [esp],0xc0020574
c000f105:	e8 35 4a 00 00       	call   c0013b3f <Thr::loadKernelSymbolTable(char const*)>
c000f10a:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f112:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f11d:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f124:	89 04 24             	mov    DWORD PTR [esp],eax
c000f127:	e8 3a 89 ff ff       	call   c0007a66 <malloc>
c000f12c:	89 c3                	mov    ebx,eax
c000f12e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f137:	c7 44 24 04 92 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020592
c000f13f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f142:	e8 21 be ff ff       	call   c000af68 <File::File(char const*, Process*)>
c000f147:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f14e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f156:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f15d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f160:	e8 c1 be ff ff       	call   c000b026 <File::open(FileOpenMode)>
c000f165:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f16c:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f174:	75 12                	jne    c000f188 <ACPI::open(int, int, void*)+0xac>
c000f176:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f17d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f180:	e8 ff be ff ff       	call   c000b084 <File::close()>
c000f185:	eb 09                	jmp    c000f190 <ACPI::open(int, int, void*)+0xb4>
c000f187:	90                   	nop
c000f188:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f190:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f198:	74 1a                	je     c000f1b4 <ACPI::open(int, int, void*)+0xd8>
c000f19a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f1a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1a3:	83 c0 08             	add    eax,0x8
c000f1a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1a8:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f1af:	89 14 24             	mov    DWORD PTR [esp],edx
c000f1b2:	ff d0                	call   eax
c000f1b4:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f1bc:	34 01                	xor    al,0x1
c000f1be:	74 40                	je     c000f200 <ACPI::open(int, int, void*)+0x124>
c000f1c0:	c7 04 24 b0 05 02 c0 	mov    DWORD PTR [esp],0xc00205b0
c000f1c7:	e8 f5 0e 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000f1cc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f1d4:	c7 44 24 04 cb 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc00205cb
c000f1dc:	c7 04 24 dc 05 02 c0 	mov    DWORD PTR [esp],0xc00205dc
c000f1e3:	e8 db 3c 00 00       	call   c0012ec3 <Reg::readIntWithDefault(char*, char*, int)>
c000f1e8:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f1ef:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1f9:	e8 b4 a5 ff ff       	call   c00097b2 <Virt::setupPageSwapping(int)>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	c7 04 24 55 f6 01 c0 	mov    DWORD PTR [esp],0xc001f655
c000f207:	e8 b5 0e 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000f20c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f213:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f21b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f21e:	e8 05 cf ff ff       	call   c000c128 <getDevicesOfType(DeviceType)>
c000f223:	83 ec 04             	sub    esp,0x4
c000f226:	66 90                	xchg   ax,ax
c000f228:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f22f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f232:	e8 6d f8 00 00       	call   c001eaa4 <LinkedList<Device>::isEmpty()>
c000f237:	34 01                	xor    al,0x1
c000f239:	0f 84 49 01 00 00    	je     c000f388 <ACPI::open(int, int, void*)+0x2ac>
c000f23f:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f246:	89 04 24             	mov    DWORD PTR [esp],eax
c000f249:	e8 72 f8 00 00       	call   c001eac0 <LinkedList<Device>::getFirstElement()>
c000f24e:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f255:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f25c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f25f:	e8 64 f8 00 00       	call   c001eac8 <LinkedList<Device>::removeFirst()>
c000f264:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f26b:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f272:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f279:	b8 24 00 00 00       	mov    eax,0x24
c000f27e:	83 e0 fc             	and    eax,0xfffffffc
c000f281:	89 c3                	mov    ebx,eax
c000f283:	b8 00 00 00 00       	mov    eax,0x0
c000f288:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f28f:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f293:	83 c0 04             	add    eax,0x4
c000f296:	39 d8                	cmp    eax,ebx
c000f298:	72 ee                	jb     c000f288 <ACPI::open(int, int, void*)+0x1ac>
c000f29a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f29e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2a2:	b8 24 00 00 00       	mov    eax,0x24
c000f2a7:	83 e0 fc             	and    eax,0xfffffffc
c000f2aa:	89 c1                	mov    ecx,eax
c000f2ac:	b8 00 00 00 00       	mov    eax,0x0
c000f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b4:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f2b8:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f2bb:	83 c0 04             	add    eax,0x4
c000f2be:	39 c8                	cmp    eax,ecx
c000f2c0:	72 f2                	jb     c000f2b4 <ACPI::open(int, int, void*)+0x1d8>
c000f2c2:	e8 fd af 00 00       	call   c001a2c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f2c7:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f2ce:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f2d6:	0f 84 4c ff ff ff    	je     c000f228 <ACPI::open(int, int, void*)+0x14c>
c000f2dc:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f2e7:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f2ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2f1:	e8 70 87 ff ff       	call   c0007a66 <malloc>
c000f2f6:	89 c3                	mov    ebx,eax
c000f2f8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f2fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f301:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f30c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30f:	e8 54 bc ff ff       	call   c000af68 <File::File(char const*, Process*)>
c000f314:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000f31b:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f322:	89 04 24             	mov    DWORD PTR [esp],eax
c000f325:	e8 64 bf ff ff       	call   c000b28e <File::exists()>
c000f32a:	84 c0                	test   al,al
c000f32c:	74 2a                	je     c000f358 <ACPI::open(int, int, void*)+0x27c>
c000f32e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f336:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f33d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f340:	e8 88 52 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000f345:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000f34c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f350:	89 04 24             	mov    DWORD PTR [esp],eax
c000f353:	e8 b1 54 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000f358:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000f360:	0f 84 c2 fe ff ff    	je     c000f228 <ACPI::open(int, int, void*)+0x14c>
c000f366:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f36d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f36f:	83 c0 08             	add    eax,0x8
c000f372:	8b 00                	mov    eax,DWORD PTR [eax]
c000f374:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000f37b:	89 14 24             	mov    DWORD PTR [esp],edx
c000f37e:	ff d0                	call   eax
c000f380:	e9 a3 fe ff ff       	jmp    c000f228 <ACPI::open(int, int, void*)+0x14c>
c000f385:	8d 76 00             	lea    esi,[esi+0x0]
c000f388:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f38f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f392:	e8 09 f7 00 00       	call   c001eaa0 <LinkedList<Device>::~LinkedList()>
c000f397:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f39d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f3a5:	c7 04 24 e3 05 02 c0 	mov    DWORD PTR [esp],0xc00205e3
c000f3ac:	e8 1c 52 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000f3b1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000f3b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3b8:	e8 4c 54 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000f3bd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3c2:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f3c9:	24 04                	and    al,0x4
c000f3cb:	0f 84 0b 01 00 00    	je     c000f4dc <ACPI::open(int, int, void*)+0x400>
c000f3d1:	c7 04 24 00 06 02 c0 	mov    DWORD PTR [esp],0xc0020600
c000f3d8:	e8 e4 0c 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000f3dd:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000f3e8:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000f3ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3f2:	e8 6f 86 ff ff       	call   c0007a66 <malloc>
c000f3f7:	89 c3                	mov    ebx,eax
c000f3f9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f402:	c7 44 24 04 1d 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002061d
c000f40a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f40d:	e8 56 bb ff ff       	call   c000af68 <File::File(char const*, Process*)>
c000f412:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000f419:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f421:	74 19                	je     c000f43c <ACPI::open(int, int, void*)+0x360>
c000f423:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f42a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f42d:	e8 5c be ff ff       	call   c000b28e <File::exists()>
c000f432:	84 c0                	test   al,al
c000f434:	74 06                	je     c000f43c <ACPI::open(int, int, void*)+0x360>
c000f436:	b0 01                	mov    al,0x1
c000f438:	eb 06                	jmp    c000f440 <ACPI::open(int, int, void*)+0x364>
c000f43a:	66 90                	xchg   ax,ax
c000f43c:	b0 00                	mov    al,0x0
c000f43e:	66 90                	xchg   ax,ax
c000f440:	84 c0                	test   al,al
c000f442:	74 28                	je     c000f46c <ACPI::open(int, int, void*)+0x390>
c000f444:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f44c:	c7 04 24 1d 06 02 c0 	mov    DWORD PTR [esp],0xc002061d
c000f453:	e8 75 51 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c000f458:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000f45f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f463:	89 04 24             	mov    DWORD PTR [esp],eax
c000f466:	e8 9e 53 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c000f46b:	90                   	nop
c000f46c:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f474:	74 26                	je     c000f49c <ACPI::open(int, int, void*)+0x3c0>
c000f476:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f47e:	74 1c                	je     c000f49c <ACPI::open(int, int, void*)+0x3c0>
c000f480:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f487:	8b 00                	mov    eax,DWORD PTR [eax]
c000f489:	83 c0 08             	add    eax,0x8
c000f48c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48e:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000f495:	89 14 24             	mov    DWORD PTR [esp],edx
c000f498:	ff d0                	call   eax
c000f49a:	66 90                	xchg   ax,ax
c000f49c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f4a1:	c7 44 24 04 3a 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002063a
c000f4a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4ac:	e8 6b f2 ff ff       	call   c000e71c <findDataTable(unsigned char*, char*)>
c000f4b1:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000f4b8:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000f4c0:	74 1a                	je     c000f4dc <ACPI::open(int, int, void*)+0x400>
c000f4c2:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000f4c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f4cd:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f4d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4d7:	e8 98 fb ff ff       	call   c000f074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f4dc:	b8 00 00 00 00       	mov    eax,0x0
c000f4e1:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000f4e7:	5b                   	pop    ebx
c000f4e8:	c3                   	ret    
c000f4e9:	90                   	nop

c000f4ea <CPU::close(int, int, void*)>:
c000f4ea:	31 c0                	xor    eax,eax
c000f4ec:	c3                   	ret    
c000f4ed:	90                   	nop

c000f4ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f4ee:	60                   	pusha  
c000f4ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f4f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4fb:	9c                   	pushf  
c000f4fc:	fa                   	cli    
c000f4fd:	0f 09                	wbinvd 
c000f4ff:	0f 30                	wrmsr  
c000f501:	9d                   	popf   
c000f502:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f506:	89 02                	mov    DWORD PTR [edx],eax
c000f508:	61                   	popa   
c000f509:	c3                   	ret    

c000f50a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f50a:	60                   	pusha  
c000f50b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f50f:	9c                   	pushf  
c000f510:	fa                   	cli    
c000f511:	0f 09                	wbinvd 
c000f513:	31 c0                	xor    eax,eax
c000f515:	31 d2                	xor    edx,edx
c000f517:	0f 32                	rdmsr  
c000f519:	9d                   	popf   
c000f51a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f51e:	89 02                	mov    DWORD PTR [edx],eax
c000f520:	61                   	popa   
c000f521:	c3                   	ret    

c000f522 <CPU::AMD_K6_writeback(int, int, int)>:
c000f522:	56                   	push   esi
c000f523:	53                   	push   ebx
c000f524:	83 ec 10             	sub    esp,0x10
c000f527:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f52c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f530:	75 5d                	jne    c000f58f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f532:	83 f8 08             	cmp    eax,0x8
c000f535:	75 09                	jne    c000f540 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f537:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f53c:	7e 13                	jle    c000f551 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f53e:	eb 30                	jmp    c000f570 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f540:	83 f8 06             	cmp    eax,0x6
c000f543:	7c 4a                	jl     c000f58f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f545:	83 f8 07             	cmp    eax,0x7
c000f548:	7e 07                	jle    c000f551 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f54a:	83 f8 09             	cmp    eax,0x9
c000f54d:	74 21                	je     c000f570 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f54f:	eb 3e                	jmp    c000f58f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f551:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f557:	89 e6                	mov    esi,esp
c000f559:	56                   	push   esi
c000f55a:	68 82 00 00 c0       	push   0xc0000082
c000f55f:	e8 a6 ff ff ff       	call   c000f50a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f564:	c1 eb 15             	shr    ebx,0x15
c000f567:	56                   	push   esi
c000f568:	83 e3 7e             	and    ebx,0x7e
c000f56b:	6a 00                	push   0x0
c000f56d:	53                   	push   ebx
c000f56e:	eb 12                	jmp    c000f582 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f570:	89 e3                	mov    ebx,esp
c000f572:	53                   	push   ebx
c000f573:	68 82 00 00 c0       	push   0xc0000082
c000f578:	e8 8d ff ff ff       	call   c000f50a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f57d:	53                   	push   ebx
c000f57e:	6a 00                	push   0x0
c000f580:	6a 00                	push   0x0
c000f582:	68 82 00 00 c0       	push   0xc0000082
c000f587:	e8 62 ff ff ff       	call   c000f4ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f58c:	83 c4 18             	add    esp,0x18
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	5b                   	pop    ebx
c000f593:	5e                   	pop    esi
c000f594:	c3                   	ret    
c000f595:	90                   	nop

c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f596:	55                   	push   ebp
c000f597:	57                   	push   edi
c000f598:	56                   	push   esi
c000f599:	53                   	push   ebx
c000f59a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f59e:	39 05 50 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b50,eax
c000f5a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f5a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f5ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f5b0:	75 23                	jne    c000f5d5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f5b2:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f5b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f5bb:	89 06                	mov    DWORD PTR [esi],eax
c000f5bd:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f5c2:	89 07                	mov    DWORD PTR [edi],eax
c000f5c4:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f5c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f5cc:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f5d1:	89 02                	mov    DWORD PTR [edx],eax
c000f5d3:	eb 3f                	jmp    c000f614 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f5d5:	31 c9                	xor    ecx,ecx
c000f5d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5db:	0f a2                	cpuid  
c000f5dd:	89 06                	mov    DWORD PTR [esi],eax
c000f5df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5e3:	89 1f                	mov    DWORD PTR [edi],ebx
c000f5e5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f5e8:	89 10                	mov    DWORD PTR [eax],edx
c000f5ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5ee:	a3 50 1b 02 c0       	mov    ds:0xc0021b50,eax
c000f5f3:	8b 06                	mov    eax,DWORD PTR [esi]
c000f5f5:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f5fa:	8b 07                	mov    eax,DWORD PTR [edi]
c000f5fc:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f601:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f604:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f60d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60f:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f614:	5b                   	pop    ebx
c000f615:	5e                   	pop    esi
c000f616:	5f                   	pop    edi
c000f617:	5d                   	pop    ebp
c000f618:	c3                   	ret    
c000f619:	90                   	nop

c000f61a <CPU::cpuidCheckEDX(unsigned int)>:
c000f61a:	83 ec 10             	sub    esp,0x10
c000f61d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f621:	50                   	push   eax
c000f622:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f626:	50                   	push   eax
c000f627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f62b:	50                   	push   eax
c000f62c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f630:	50                   	push   eax
c000f631:	6a 01                	push   0x1
c000f633:	e8 5e ff ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f63c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f640:	0f 95 c0             	setne  al
c000f643:	83 c4 24             	add    esp,0x24
c000f646:	c3                   	ret    
c000f647:	90                   	nop

c000f648 <CPU::cpuidCheckECX(unsigned int)>:
c000f648:	83 ec 10             	sub    esp,0x10
c000f64b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f64f:	50                   	push   eax
c000f650:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f654:	50                   	push   eax
c000f655:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f659:	50                   	push   eax
c000f65a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f65e:	50                   	push   eax
c000f65f:	6a 01                	push   0x1
c000f661:	e8 30 ff ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f66a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f66e:	0f 95 c0             	setne  al
c000f671:	83 c4 24             	add    esp,0x24
c000f674:	c3                   	ret    
c000f675:	90                   	nop

c000f676 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f676:	83 ec 10             	sub    esp,0x10
c000f679:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67d:	50                   	push   eax
c000f67e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f682:	50                   	push   eax
c000f683:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f687:	50                   	push   eax
c000f688:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f68c:	50                   	push   eax
c000f68d:	6a 07                	push   0x7
c000f68f:	e8 02 ff ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f694:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f698:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f69c:	0f 95 c0             	setne  al
c000f69f:	83 c4 24             	add    esp,0x24
c000f6a2:	c3                   	ret    
c000f6a3:	90                   	nop

c000f6a4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f6a4:	83 ec 10             	sub    esp,0x10
c000f6a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ab:	50                   	push   eax
c000f6ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b0:	50                   	push   eax
c000f6b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b5:	50                   	push   eax
c000f6b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ba:	50                   	push   eax
c000f6bb:	6a 07                	push   0x7
c000f6bd:	e8 d4 fe ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6ca:	0f 95 c0             	setne  al
c000f6cd:	83 c4 24             	add    esp,0x24
c000f6d0:	c3                   	ret    
c000f6d1:	90                   	nop

c000f6d2 <CPU::CPU()>:
c000f6d2:	83 ec 1c             	sub    esp,0x1c
c000f6d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d9:	c7 44 24 04 5d 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002075d
c000f6e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6e4:	e8 c1 c8 ff ff       	call   c000bfaa <Device::Device(char const*)>
c000f6e9:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000f6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f2:	89 10                	mov    DWORD PTR [eax],edx
c000f6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f8:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f706:	05 78 01 00 00       	add    eax,0x178
c000f70b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f70e:	e8 ef 7b ff ff       	call   c0007302 <GDT::GDT()>
c000f713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f717:	05 7c 09 00 00       	add    eax,0x97c
c000f71c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f71f:	e8 1c 7e ff ff       	call   c0007540 <IDT::IDT()>
c000f724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f728:	05 7c 11 00 00       	add    eax,0x117c
c000f72d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f730:	e8 ab 97 ff ff       	call   c0008ee0 <TSS::TSS()>
c000f735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f739:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f744:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f74e:	90                   	nop
c000f74f:	83 c4 1c             	add    esp,0x1c
c000f752:	c3                   	ret    
c000f753:	90                   	nop

c000f754 <CPU::displayFeatures()>:
c000f754:	c3                   	ret    
c000f755:	90                   	nop

c000f756 <CPU::detectFeatures()>:
c000f756:	55                   	push   ebp
c000f757:	57                   	push   edi
c000f758:	56                   	push   esi
c000f759:	53                   	push   ebx
c000f75a:	83 ec 30             	sub    esp,0x30
c000f75d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f761:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f76b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f771:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f778:	6a 0d                	push   0xd
c000f77a:	6a 00                	push   0x0
c000f77c:	55                   	push   ebp
c000f77d:	e8 6e 0d ff ff       	call   c00004f0 <memset>
c000f782:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f791:	0f 84 ba 05 00 00    	je     c000fd51 <CPU::detectFeatures()+0x5fb>
c000f797:	83 ec 0c             	sub    esp,0xc
c000f79a:	89 ef                	mov    edi,ebp
c000f79c:	6a 10                	push   0x10
c000f79e:	e8 77 fe ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f7a3:	24 01                	and    al,0x1
c000f7a5:	00 c0                	add    al,al
c000f7a7:	88 c2                	mov    dl,al
c000f7a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7af:	24 fd                	and    al,0xfd
c000f7b1:	08 d0                	or     al,dl
c000f7b3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7b9:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f7c0:	e8 55 fe ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f7c5:	24 01                	and    al,0x1
c000f7c7:	c0 e0 02             	shl    al,0x2
c000f7ca:	88 c2                	mov    dl,al
c000f7cc:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7d2:	24 fb                	and    al,0xfb
c000f7d4:	08 d0                	or     al,dl
c000f7d6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7dc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f7e3:	e8 32 fe ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f7e8:	24 01                	and    al,0x1
c000f7ea:	c0 e0 03             	shl    al,0x3
c000f7ed:	88 c2                	mov    dl,al
c000f7ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7f5:	24 f7                	and    al,0xf7
c000f7f7:	08 d0                	or     al,dl
c000f7f9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7ff:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f806:	e8 0f fe ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f80b:	24 01                	and    al,0x1
c000f80d:	c0 e0 04             	shl    al,0x4
c000f810:	88 c2                	mov    dl,al
c000f812:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f818:	24 ef                	and    al,0xef
c000f81a:	08 d0                	or     al,dl
c000f81c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f822:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f829:	e8 ec fd ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f82e:	24 01                	and    al,0x1
c000f830:	c0 e0 05             	shl    al,0x5
c000f833:	88 c2                	mov    dl,al
c000f835:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f83b:	24 df                	and    al,0xdf
c000f83d:	08 d0                	or     al,dl
c000f83f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f845:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f84c:	e8 c9 fd ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f851:	24 01                	and    al,0x1
c000f853:	00 c0                	add    al,al
c000f855:	88 c2                	mov    dl,al
c000f857:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f85d:	24 fd                	and    al,0xfd
c000f85f:	08 d0                	or     al,dl
c000f861:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f867:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f86e:	e8 a7 fd ff ff       	call   c000f61a <CPU::cpuidCheckEDX(unsigned int)>
c000f873:	24 01                	and    al,0x1
c000f875:	c0 e0 06             	shl    al,0x6
c000f878:	88 c2                	mov    dl,al
c000f87a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f880:	24 bf                	and    al,0xbf
c000f882:	08 d0                	or     al,dl
c000f884:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f88a:	58                   	pop    eax
c000f88b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f88f:	50                   	push   eax
c000f890:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f894:	50                   	push   eax
c000f895:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f899:	56                   	push   esi
c000f89a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f89e:	50                   	push   eax
c000f89f:	6a 00                	push   0x0
c000f8a1:	e8 f0 fc ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8a6:	b8 04 00 00 00       	mov    eax,0x4
c000f8ab:	89 c1                	mov    ecx,eax
c000f8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8af:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f8b5:	89 c1                	mov    ecx,eax
c000f8b7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f8bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8bd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f8c3:	89 c1                	mov    ecx,eax
c000f8c5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f8c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8cb:	83 c4 18             	add    esp,0x18
c000f8ce:	68 6c 06 02 c0       	push   0xc002066c
c000f8d3:	55                   	push   ebp
c000f8d4:	e8 d7 0e ff ff       	call   c00007b0 <strcmp>
c000f8d9:	83 c4 10             	add    esp,0x10
c000f8dc:	85 c0                	test   eax,eax
c000f8de:	75 0f                	jne    c000f8ef <CPU::detectFeatures()+0x199>
c000f8e0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f8ea:	e9 22 02 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f8ef:	50                   	push   eax
c000f8f0:	50                   	push   eax
c000f8f1:	68 79 06 02 c0       	push   0xc0020679
c000f8f6:	55                   	push   ebp
c000f8f7:	e8 b4 0e ff ff       	call   c00007b0 <strcmp>
c000f8fc:	83 c4 10             	add    esp,0x10
c000f8ff:	85 c0                	test   eax,eax
c000f901:	74 dd                	je     c000f8e0 <CPU::detectFeatures()+0x18a>
c000f903:	50                   	push   eax
c000f904:	50                   	push   eax
c000f905:	68 86 06 02 c0       	push   0xc0020686
c000f90a:	55                   	push   ebp
c000f90b:	e8 a0 0e ff ff       	call   c00007b0 <strcmp>
c000f910:	83 c4 10             	add    esp,0x10
c000f913:	85 c0                	test   eax,eax
c000f915:	74 2a                	je     c000f941 <CPU::detectFeatures()+0x1eb>
c000f917:	50                   	push   eax
c000f918:	50                   	push   eax
c000f919:	68 93 06 02 c0       	push   0xc0020693
c000f91e:	55                   	push   ebp
c000f91f:	e8 8c 0e ff ff       	call   c00007b0 <strcmp>
c000f924:	83 c4 10             	add    esp,0x10
c000f927:	85 c0                	test   eax,eax
c000f929:	74 16                	je     c000f941 <CPU::detectFeatures()+0x1eb>
c000f92b:	50                   	push   eax
c000f92c:	50                   	push   eax
c000f92d:	68 a0 06 02 c0       	push   0xc00206a0
c000f932:	55                   	push   ebp
c000f933:	e8 78 0e ff ff       	call   c00007b0 <strcmp>
c000f938:	83 c4 10             	add    esp,0x10
c000f93b:	85 c0                	test   eax,eax
c000f93d:	74 48                	je     c000f987 <CPU::detectFeatures()+0x231>
c000f93f:	eb 0f                	jmp    c000f950 <CPU::detectFeatures()+0x1fa>
c000f941:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f94b:	e9 c1 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f950:	50                   	push   eax
c000f951:	50                   	push   eax
c000f952:	68 ad 06 02 c0       	push   0xc00206ad
c000f957:	55                   	push   ebp
c000f958:	e8 53 0e ff ff       	call   c00007b0 <strcmp>
c000f95d:	83 c4 10             	add    esp,0x10
c000f960:	85 c0                	test   eax,eax
c000f962:	74 23                	je     c000f987 <CPU::detectFeatures()+0x231>
c000f964:	57                   	push   edi
c000f965:	57                   	push   edi
c000f966:	68 ba 06 02 c0       	push   0xc00206ba
c000f96b:	55                   	push   ebp
c000f96c:	e8 3f 0e ff ff       	call   c00007b0 <strcmp>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	85 c0                	test   eax,eax
c000f976:	75 1e                	jne    c000f996 <CPU::detectFeatures()+0x240>
c000f978:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f982:	e9 8a 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f987:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f991:	e9 7b 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f996:	56                   	push   esi
c000f997:	56                   	push   esi
c000f998:	68 c7 06 02 c0       	push   0xc00206c7
c000f99d:	55                   	push   ebp
c000f99e:	e8 0d 0e ff ff       	call   c00007b0 <strcmp>
c000f9a3:	83 c4 10             	add    esp,0x10
c000f9a6:	85 c0                	test   eax,eax
c000f9a8:	75 0f                	jne    c000f9b9 <CPU::detectFeatures()+0x263>
c000f9aa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f9b4:	e9 58 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f9b9:	51                   	push   ecx
c000f9ba:	51                   	push   ecx
c000f9bb:	68 86 06 02 c0       	push   0xc0020686
c000f9c0:	55                   	push   ebp
c000f9c1:	e8 ea 0d ff ff       	call   c00007b0 <strcmp>
c000f9c6:	83 c4 10             	add    esp,0x10
c000f9c9:	85 c0                	test   eax,eax
c000f9cb:	75 0f                	jne    c000f9dc <CPU::detectFeatures()+0x286>
c000f9cd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f9d7:	e9 35 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f9dc:	52                   	push   edx
c000f9dd:	52                   	push   edx
c000f9de:	68 d4 06 02 c0       	push   0xc00206d4
c000f9e3:	55                   	push   ebp
c000f9e4:	e8 c7 0d ff ff       	call   c00007b0 <strcmp>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	75 0f                	jne    c000f9ff <CPU::detectFeatures()+0x2a9>
c000f9f0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f9fa:	e9 12 01 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000f9ff:	50                   	push   eax
c000fa00:	50                   	push   eax
c000fa01:	68 e1 06 02 c0       	push   0xc00206e1
c000fa06:	55                   	push   ebp
c000fa07:	e8 a4 0d ff ff       	call   c00007b0 <strcmp>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	85 c0                	test   eax,eax
c000fa11:	75 0f                	jne    c000fa22 <CPU::detectFeatures()+0x2cc>
c000fa13:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa1d:	e9 ef 00 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000fa22:	50                   	push   eax
c000fa23:	50                   	push   eax
c000fa24:	68 ee 06 02 c0       	push   0xc00206ee
c000fa29:	55                   	push   ebp
c000fa2a:	e8 81 0d ff ff       	call   c00007b0 <strcmp>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	85 c0                	test   eax,eax
c000fa34:	75 0f                	jne    c000fa45 <CPU::detectFeatures()+0x2ef>
c000fa36:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fa40:	e9 cc 00 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000fa45:	50                   	push   eax
c000fa46:	50                   	push   eax
c000fa47:	68 fb 06 02 c0       	push   0xc00206fb
c000fa4c:	55                   	push   ebp
c000fa4d:	e8 5e 0d ff ff       	call   c00007b0 <strcmp>
c000fa52:	83 c4 10             	add    esp,0x10
c000fa55:	85 c0                	test   eax,eax
c000fa57:	75 0f                	jne    c000fa68 <CPU::detectFeatures()+0x312>
c000fa59:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fa63:	e9 a9 00 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000fa68:	50                   	push   eax
c000fa69:	50                   	push   eax
c000fa6a:	68 08 07 02 c0       	push   0xc0020708
c000fa6f:	55                   	push   ebp
c000fa70:	e8 3b 0d ff ff       	call   c00007b0 <strcmp>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	85 c0                	test   eax,eax
c000fa7a:	75 0f                	jne    c000fa8b <CPU::detectFeatures()+0x335>
c000fa7c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fa86:	e9 86 00 00 00       	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000fa8b:	50                   	push   eax
c000fa8c:	50                   	push   eax
c000fa8d:	68 15 07 02 c0       	push   0xc0020715
c000fa92:	55                   	push   ebp
c000fa93:	e8 18 0d ff ff       	call   c00007b0 <strcmp>
c000fa98:	83 c4 10             	add    esp,0x10
c000fa9b:	85 c0                	test   eax,eax
c000fa9d:	75 0c                	jne    c000faab <CPU::detectFeatures()+0x355>
c000fa9f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000faa9:	eb 66                	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000faab:	50                   	push   eax
c000faac:	50                   	push   eax
c000faad:	68 22 07 02 c0       	push   0xc0020722
c000fab2:	55                   	push   ebp
c000fab3:	e8 f8 0c ff ff       	call   c00007b0 <strcmp>
c000fab8:	83 c4 10             	add    esp,0x10
c000fabb:	85 c0                	test   eax,eax
c000fabd:	75 0c                	jne    c000facb <CPU::detectFeatures()+0x375>
c000fabf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fac9:	eb 46                	jmp    c000fb11 <CPU::detectFeatures()+0x3bb>
c000facb:	57                   	push   edi
c000facc:	57                   	push   edi
c000facd:	68 2f 07 02 c0       	push   0xc002072f
c000fad2:	55                   	push   ebp
c000fad3:	e8 d8 0c ff ff       	call   c00007b0 <strcmp>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	85 c0                	test   eax,eax
c000fadd:	74 e0                	je     c000fabf <CPU::detectFeatures()+0x369>
c000fadf:	56                   	push   esi
c000fae0:	56                   	push   esi
c000fae1:	68 3c 07 02 c0       	push   0xc002073c
c000fae6:	55                   	push   ebp
c000fae7:	e8 c4 0c ff ff       	call   c00007b0 <strcmp>
c000faec:	83 c4 10             	add    esp,0x10
c000faef:	85 c0                	test   eax,eax
c000faf1:	74 cc                	je     c000fabf <CPU::detectFeatures()+0x369>
c000faf3:	51                   	push   ecx
c000faf4:	51                   	push   ecx
c000faf5:	68 49 07 02 c0       	push   0xc0020749
c000fafa:	55                   	push   ebp
c000fafb:	e8 b0 0c ff ff       	call   c00007b0 <strcmp>
c000fb00:	83 c4 10             	add    esp,0x10
c000fb03:	85 c0                	test   eax,eax
c000fb05:	74 b8                	je     c000fabf <CPU::detectFeatures()+0x369>
c000fb07:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb11:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb16:	0f 86 ac 00 00 00    	jbe    c000fbc8 <CPU::detectFeatures()+0x472>
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	68 80 00 00 00       	push   0x80
c000fb24:	e8 4d fb ff ff       	call   c000f676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb29:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fb2f:	80 e2 bf             	and    dl,0xbf
c000fb32:	24 01                	and    al,0x1
c000fb34:	c0 e0 06             	shl    al,0x6
c000fb37:	08 c2                	or     dl,al
c000fb39:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c000fb3f:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fb46:	e8 2b fb ff ff       	call   c000f676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb4b:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fb51:	80 e2 ef             	and    dl,0xef
c000fb54:	24 01                	and    al,0x1
c000fb56:	c0 e0 04             	shl    al,0x4
c000fb59:	08 c2                	or     dl,al
c000fb5b:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fb61:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fb68:	e8 09 fb ff ff       	call   c000f676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb6d:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fb73:	80 e2 7f             	and    dl,0x7f
c000fb76:	c0 e0 07             	shl    al,0x7
c000fb79:	08 d0                	or     al,dl
c000fb7b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb81:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fb88:	e8 17 fb ff ff       	call   c000f6a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fb8d:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fb93:	80 e2 f7             	and    dl,0xf7
c000fb96:	24 01                	and    al,0x1
c000fb98:	c0 e0 03             	shl    al,0x3
c000fb9b:	08 c2                	or     dl,al
c000fb9d:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fba3:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fbaa:	e8 f5 fa ff ff       	call   c000f6a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fbaf:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	80 e2 fb             	and    dl,0xfb
c000fbbb:	24 01                	and    al,0x1
c000fbbd:	c0 e0 02             	shl    al,0x2
c000fbc0:	08 c2                	or     dl,al
c000fbc2:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c000fbc8:	83 ec 0c             	sub    esp,0xc
c000fbcb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbcf:	50                   	push   eax
c000fbd0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbd4:	50                   	push   eax
c000fbd5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fbd9:	56                   	push   esi
c000fbda:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbde:	50                   	push   eax
c000fbdf:	6a 01                	push   0x1
c000fbe1:	e8 b0 f9 ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fbe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbea:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fbf0:	88 c1                	mov    cl,al
c000fbf2:	80 e1 0f             	and    cl,0xf
c000fbf5:	80 e2 f0             	and    dl,0xf0
c000fbf8:	08 ca                	or     dl,cl
c000fbfa:	88 c1                	mov    cl,al
c000fbfc:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc02:	c0 e9 04             	shr    cl,0x4
c000fc05:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c000fc09:	0f b6 d1             	movzx  edx,cl
c000fc0c:	89 d1                	mov    ecx,edx
c000fc0e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fc14:	c1 e1 06             	shl    ecx,0x6
c000fc17:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fc1d:	09 ca                	or     edx,ecx
c000fc1f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fc26:	89 c2                	mov    edx,eax
c000fc28:	c1 ea 08             	shr    edx,0x8
c000fc2b:	88 d1                	mov    cl,dl
c000fc2d:	c0 e2 06             	shl    dl,0x6
c000fc30:	80 e1 0f             	and    cl,0xf
c000fc33:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c000fc37:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fc3d:	80 e1 3f             	and    cl,0x3f
c000fc40:	08 ca                	or     dl,cl
c000fc42:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fc48:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fc4e:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c000fc52:	83 c4 20             	add    esp,0x20
c000fc55:	80 e2 c0             	and    dl,0xc0
c000fc58:	c0 e9 02             	shr    cl,0x2
c000fc5b:	08 ca                	or     dl,cl
c000fc5d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fc63:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fc69:	89 c2                	mov    edx,eax
c000fc6b:	c1 ea 0c             	shr    edx,0xc
c000fc6e:	80 e2 03             	and    dl,0x3
c000fc71:	c0 e2 04             	shl    dl,0x4
c000fc74:	80 e1 cf             	and    cl,0xcf
c000fc77:	08 ca                	or     dl,cl
c000fc79:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c000fc7e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc84:	74 07                	je     c000fc8d <CPU::detectFeatures()+0x537>
c000fc86:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fc8b:	75 5f                	jne    c000fcec <CPU::detectFeatures()+0x596>
c000fc8d:	89 c2                	mov    edx,eax
c000fc8f:	c1 ea 10             	shr    edx,0x10
c000fc92:	c0 e2 04             	shl    dl,0x4
c000fc95:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c000fc99:	0f b6 d2             	movzx  edx,dl
c000fc9c:	89 d7                	mov    edi,edx
c000fc9e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fca4:	c1 e7 06             	shl    edi,0x6
c000fca7:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fcad:	09 fa                	or     edx,edi
c000fcaf:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcb6:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fcbb:	75 2f                	jne    c000fcec <CPU::detectFeatures()+0x596>
c000fcbd:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fcc3:	c1 e8 14             	shr    eax,0x14
c000fcc6:	04 0f                	add    al,0xf
c000fcc8:	88 c1                	mov    cl,al
c000fcca:	c0 e1 06             	shl    cl,0x6
c000fccd:	c0 e8 02             	shr    al,0x2
c000fcd0:	80 e2 3f             	and    dl,0x3f
c000fcd3:	08 ca                	or     dl,cl
c000fcd5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fcdb:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fce1:	80 e2 c0             	and    dl,0xc0
c000fce4:	08 d0                	or     al,dl
c000fce6:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fcec:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fcf3:	83 ec 0c             	sub    esp,0xc
c000fcf6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcfa:	50                   	push   eax
c000fcfb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fcff:	55                   	push   ebp
c000fd00:	56                   	push   esi
c000fd01:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd05:	57                   	push   edi
c000fd06:	68 00 00 00 80       	push   0x80000000
c000fd0b:	e8 86 f8 ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd10:	83 c4 20             	add    esp,0x20
c000fd13:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd1b:	76 22                	jbe    c000fd3f <CPU::detectFeatures()+0x5e9>
c000fd1d:	83 ec 0c             	sub    esp,0xc
c000fd20:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd24:	50                   	push   eax
c000fd25:	55                   	push   ebp
c000fd26:	56                   	push   esi
c000fd27:	57                   	push   edi
c000fd28:	68 01 00 00 80       	push   0x80000001
c000fd2d:	e8 64 f8 ff ff       	call   c000f596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd32:	83 c4 20             	add    esp,0x20
c000fd35:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fd3f:	52                   	push   edx
c000fd40:	52                   	push   edx
c000fd41:	68 55 07 02 c0       	push   0xc0020755
c000fd46:	53                   	push   ebx
c000fd47:	e8 50 c2 ff ff       	call   c000bf9c <Device::setName(char const*)>
c000fd4c:	83 c4 10             	add    esp,0x10
c000fd4f:	eb 64                	jmp    c000fdb5 <CPU::detectFeatures()+0x65f>
c000fd51:	50                   	push   eax
c000fd52:	50                   	push   eax
c000fd53:	68 ba 06 02 c0       	push   0xc00206ba
c000fd58:	55                   	push   ebp
c000fd59:	e8 32 09 ff ff       	call   c0000690 <strcpy>
c000fd5e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd68:	e8 56 04 ff ff       	call   c00001c3 <is486>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	85 c0                	test   eax,eax
c000fd72:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd78:	74 1c                	je     c000fd96 <CPU::detectFeatures()+0x640>
c000fd7a:	0c 07                	or     al,0x7
c000fd7c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd82:	0f 20 c0             	mov    eax,cr0
c000fd85:	83 e0 14             	and    eax,0x14
c000fd88:	83 f8 04             	cmp    eax,0x4
c000fd8b:	75 0d                	jne    c000fd9a <CPU::detectFeatures()+0x644>
c000fd8d:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fd94:	eb 1f                	jmp    c000fdb5 <CPU::detectFeatures()+0x65f>
c000fd96:	24 f8                	and    al,0xf8
c000fd98:	eb e2                	jmp    c000fd7c <CPU::detectFeatures()+0x626>
c000fd9a:	e8 ff 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fd9f:	24 01                	and    al,0x1
c000fda1:	00 c0                	add    al,al
c000fda3:	88 c2                	mov    dl,al
c000fda5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fdab:	24 fd                	and    al,0xfd
c000fdad:	08 d0                	or     al,dl
c000fdaf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fdb5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fdbc:	74 0e                	je     c000fdcc <CPU::detectFeatures()+0x676>
c000fdbe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fdc3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fdca:	eb 1f                	jmp    c000fdeb <CPU::detectFeatures()+0x695>
c000fdcc:	e8 cd 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fdd1:	24 01                	and    al,0x1
c000fdd3:	00 c0                	add    al,al
c000fdd5:	88 c2                	mov    dl,al
c000fdd7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fddd:	24 fd                	and    al,0xfd
c000fddf:	08 d0                	or     al,dl
c000fde1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fde7:	24 02                	and    al,0x2
c000fde9:	75 d3                	jne    c000fdbe <CPU::detectFeatures()+0x668>
c000fdeb:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fdf2:	83 c4 2c             	add    esp,0x2c
c000fdf5:	5b                   	pop    ebx
c000fdf6:	5e                   	pop    esi
c000fdf7:	5f                   	pop    edi
c000fdf8:	5d                   	pop    ebp
c000fdf9:	c3                   	ret    

c000fdfa <CPU::setupSMEP()>:
c000fdfa:	0f 20 e0             	mov    eax,cr4
c000fdfd:	0d 00 00 10 00       	or     eax,0x100000
c000fe02:	0f 22 e0             	mov    cr4,eax
c000fe05:	c3                   	ret    

c000fe06 <CPU::setupUMIP()>:
c000fe06:	0f 20 e0             	mov    eax,cr4
c000fe09:	80 cc 08             	or     ah,0x8
c000fe0c:	0f 22 e0             	mov    cr4,eax
c000fe0f:	c3                   	ret    

c000fe10 <CPU::setupTSC()>:
c000fe10:	0f 20 e0             	mov    eax,cr4
c000fe13:	83 c8 04             	or     eax,0x4
c000fe16:	0f 22 e0             	mov    cr4,eax
c000fe19:	c3                   	ret    

c000fe1a <CPU::setupLargePages()>:
c000fe1a:	0f 20 e0             	mov    eax,cr4
c000fe1d:	83 c8 10             	or     eax,0x10
c000fe20:	0f 22 e0             	mov    cr4,eax
c000fe23:	c3                   	ret    

c000fe24 <CPU::setupPAT()>:
c000fe24:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fe29:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fe30:	74 2c                	je     c000fe5e <CPU::setupPAT()+0x3a>
c000fe32:	53                   	push   ebx
c000fe33:	83 ec 10             	sub    esp,0x10
c000fe36:	68 77 02 00 00       	push   0x277
c000fe3b:	50                   	push   eax
c000fe3c:	e8 ef 71 ff ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c000fe41:	83 e2 f8             	and    edx,0xfffffff8
c000fe44:	83 ca 01             	or     edx,0x1
c000fe47:	52                   	push   edx
c000fe48:	50                   	push   eax
c000fe49:	68 77 02 00 00       	push   0x277
c000fe4e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fe54:	e8 ff 71 ff ff       	call   c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fe59:	83 c4 28             	add    esp,0x28
c000fe5c:	5b                   	pop    ebx
c000fe5d:	c3                   	ret    
c000fe5e:	c3                   	ret    
c000fe5f:	90                   	nop

c000fe60 <CPU::setupMTRR()>:
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop

c000fe62 <CPU::setupGlobalPages()>:
c000fe62:	0f 20 e0             	mov    eax,cr4
c000fe65:	0c 80                	or     al,0x80
c000fe67:	0f 22 e0             	mov    cr4,eax
c000fe6a:	c3                   	ret    
c000fe6b:	90                   	nop

c000fe6c <CPU::allowUsermodeDataAccess()>:
c000fe6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe70:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fe77:	74 03                	je     c000fe7c <CPU::allowUsermodeDataAccess()+0x10>
c000fe79:	0f 01 cb             	stac   
c000fe7c:	c3                   	ret    
c000fe7d:	90                   	nop

c000fe7e <CPU::prohibitUsermodeDataAccess()>:
c000fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe82:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fe89:	74 03                	je     c000fe8e <CPU::prohibitUsermodeDataAccess()+0x10>
c000fe8b:	0f 01 ca             	clac   
c000fe8e:	c3                   	ret    
c000fe8f:	90                   	nop

c000fe90 <CPU::setupSMAP()>:
c000fe90:	0f 20 e0             	mov    eax,cr4
c000fe93:	0d 00 00 20 00       	or     eax,0x200000
c000fe98:	0f 22 e0             	mov    cr4,eax
c000fe9b:	eb e1                	jmp    c000fe7e <CPU::prohibitUsermodeDataAccess()>
c000fe9d:	90                   	nop

c000fe9e <CPU::setupFeatures()>:
c000fe9e:	53                   	push   ebx
c000fe9f:	83 ec 08             	sub    esp,0x8
c000fea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fea6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fead:	74 18                	je     c000fec7 <CPU::setupFeatures()+0x29>
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	68 61 07 02 c0       	push   0xc0020761
c000feb7:	e8 2a ab ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000febc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000febf:	e8 42 ff ff ff       	call   c000fe06 <CPU::setupUMIP()>
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fece:	74 18                	je     c000fee8 <CPU::setupFeatures()+0x4a>
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	68 6b 07 02 c0       	push   0xc002076b
c000fed8:	e8 09 ab ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000fedd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fee0:	e8 2b ff ff ff       	call   c000fe10 <CPU::setupTSC()>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000feef:	74 18                	je     c000ff09 <CPU::setupFeatures()+0x6b>
c000fef1:	83 ec 0c             	sub    esp,0xc
c000fef4:	68 74 07 02 c0       	push   0xc0020774
c000fef9:	e8 e8 aa ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000fefe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff01:	e8 14 ff ff ff       	call   c000fe1a <CPU::setupLargePages()>
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ff10:	74 18                	je     c000ff2a <CPU::setupFeatures()+0x8c>
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	68 7d 07 02 c0       	push   0xc002077d
c000ff1a:	e8 c7 aa ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000ff1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff22:	e8 3b ff ff ff       	call   c000fe62 <CPU::setupGlobalPages()>
c000ff27:	83 c4 10             	add    esp,0x10
c000ff2a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ff31:	74 18                	je     c000ff4b <CPU::setupFeatures()+0xad>
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	68 8f 07 02 c0       	push   0xc002078f
c000ff3b:	e8 a6 aa ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c000ff40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff43:	e8 dc fe ff ff       	call   c000fe24 <CPU::setupPAT()>
c000ff48:	83 c4 10             	add    esp,0x10
c000ff4b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ff52:	74 11                	je     c000ff65 <CPU::setupFeatures()+0xc7>
c000ff54:	c7 44 24 10 98 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020798
c000ff5c:	83 c4 08             	add    esp,0x8
c000ff5f:	5b                   	pop    ebx
c000ff60:	e9 81 aa ff ff       	jmp    c000a9e6 <Dbg::kprintf(char const*, ...)>
c000ff65:	83 c4 08             	add    esp,0x8
c000ff68:	5b                   	pop    ebx
c000ff69:	c3                   	ret    

c000ff6a <CPU::open(int, int, void*)>:
c000ff6a:	57                   	push   edi
c000ff6b:	56                   	push   esi
c000ff6c:	53                   	push   ebx
c000ff6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff71:	83 ec 0c             	sub    esp,0xc
c000ff74:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ff78:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ff7e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ff84:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ff8a:	50                   	push   eax
c000ff8b:	e8 d4 73 ff ff       	call   c0007364 <GDT::setup()>
c000ff90:	83 c4 0c             	add    esp,0xc
c000ff93:	6a 00                	push   0x0
c000ff95:	68 ef be ad de       	push   0xdeadbeef
c000ff9a:	57                   	push   edi
c000ff9b:	e8 88 8f ff ff       	call   c0008f28 <TSS::setup(unsigned long, unsigned long)>
c000ffa0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffa3:	e8 5c 8f ff ff       	call   c0008f04 <TSS::flush()>
c000ffa8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ffae:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffb1:	e8 00 76 ff ff       	call   c00075b6 <IDT::setup()>
c000ffb6:	b8 00 04 00 00       	mov    eax,0x400
c000ffbb:	0f 23 f8             	mov    db7,eax
c000ffbe:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ffc8:	e8 af 7d ff ff       	call   c0007d7c <Phys::allocatePage()>
c000ffcd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ffd3:	89 30                	mov    DWORD PTR [eax],esi
c000ffd5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ffdb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ffde:	58                   	pop    eax
c000ffdf:	5a                   	pop    edx
c000ffe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ffe6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffea:	e8 d5 9f ff ff       	call   c0009fc4 <VAS::setCPUSpecific(unsigned long)>
c000ffef:	c7 04 24 a2 07 02 c0 	mov    DWORD PTR [esp],0xc00207a2
c000fff6:	e8 c6 00 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c000fffb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fffe:	e8 53 f7 ff ff       	call   c000f756 <CPU::detectFeatures()>
c0010003:	c7 04 24 c5 07 02 c0 	mov    DWORD PTR [esp],0xc00207c5
c001000a:	e8 b2 00 00 00       	call   c00100c1 <KeSetBootMessage(char const*)>
c001000f:	e8 ba 6e 00 00       	call   c0016ece <HalInitialise()>
c0010014:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010019:	83 e0 10             	and    eax,0x10
c001001c:	83 f8 01             	cmp    eax,0x1
c001001f:	19 c0                	sbb    eax,eax
c0010021:	83 e0 46             	and    eax,0x46
c0010024:	83 c0 1e             	add    eax,0x1e
c0010027:	89 04 24             	mov    DWORD PTR [esp],eax
c001002a:	e8 0c d7 ff ff       	call   c000d73b <setupTimer(int)>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010039:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001003f:	74 0c                	je     c001004d <CPU::open(int, int, void*)+0xe3>
c0010041:	83 ec 0c             	sub    esp,0xc
c0010044:	53                   	push   ebx
c0010045:	e8 54 fe ff ff       	call   c000fe9e <CPU::setupFeatures()>
c001004a:	83 c4 10             	add    esp,0x10
c001004d:	5b                   	pop    ebx
c001004e:	31 c0                	xor    eax,eax
c0010050:	5e                   	pop    esi
c0010051:	5f                   	pop    edi
c0010052:	c3                   	ret    

c0010053 <KeDisplaySplashScreen()>:
c0010053:	55                   	push   ebp
c0010054:	bd 05 00 00 00       	mov    ebp,0x5
c0010059:	57                   	push   edi
c001005a:	bf 60 1b 02 c0       	mov    edi,0xc0021b60
c001005f:	56                   	push   esi
c0010060:	be 0a 00 00 00       	mov    esi,0xa
c0010065:	53                   	push   ebx
c0010066:	31 db                	xor    ebx,ebx
c0010068:	83 ec 0c             	sub    esp,0xc
c001006b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001006e:	84 c0                	test   al,al
c0010070:	74 47                	je     c00100b9 <KeDisplaySplashScreen()+0x66>
c0010072:	80 bb 96 1b 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde46a],0xdb
c0010079:	75 13                	jne    c001008e <KeDisplaySplashScreen()+0x3b>
c001007b:	0f b6 93 95 1b 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde46b]
c0010082:	83 e2 fe             	and    edx,0xfffffffe
c0010085:	81 fa ba 00 00 00    	cmp    edx,0xba
c001008b:	75 01                	jne    c001008e <KeDisplaySplashScreen()+0x3b>
c001008d:	46                   	inc    esi
c001008e:	3c 0d                	cmp    al,0xd
c0010090:	74 24                	je     c00100b6 <KeDisplaySplashScreen()+0x63>
c0010092:	3c 0a                	cmp    al,0xa
c0010094:	75 0a                	jne    c00100a0 <KeDisplaySplashScreen()+0x4d>
c0010096:	45                   	inc    ebp
c0010097:	be 0a 00 00 00       	mov    esi,0xa
c001009c:	31 db                	xor    ebx,ebx
c001009e:	eb 16                	jmp    c00100b6 <KeDisplaySplashScreen()+0x63>
c00100a0:	8d 14 33             	lea    edx,[ebx+esi*1]
c00100a3:	83 ec 0c             	sub    esp,0xc
c00100a6:	55                   	push   ebp
c00100a7:	43                   	inc    ebx
c00100a8:	52                   	push   edx
c00100a9:	6a 00                	push   0x0
c00100ab:	6a 0e                	push   0xe
c00100ad:	50                   	push   eax
c00100ae:	e8 bd 7a 00 00       	call   c0017b70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00100b3:	83 c4 20             	add    esp,0x20
c00100b6:	47                   	inc    edi
c00100b7:	eb b2                	jmp    c001006b <KeDisplaySplashScreen()+0x18>
c00100b9:	83 c4 0c             	add    esp,0xc
c00100bc:	5b                   	pop    ebx
c00100bd:	5e                   	pop    esi
c00100be:	5f                   	pop    edi
c00100bf:	5d                   	pop    ebp
c00100c0:	c3                   	ret    

c00100c1 <KeSetBootMessage(char const*)>:
c00100c1:	57                   	push   edi
c00100c2:	56                   	push   esi
c00100c3:	53                   	push   ebx
c00100c4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00100ca:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00100d1:	68 9e 00 00 00       	push   0x9e
c00100d6:	6a 00                	push   0x0
c00100d8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00100dc:	56                   	push   esi
c00100dd:	e8 0e 04 ff ff       	call   c00004f0 <memset>
c00100e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100e5:	e8 a6 04 ff ff       	call   c0000590 <strlen>
c00100ea:	ba 50 00 00 00       	mov    edx,0x50
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	31 c9                	xor    ecx,ecx
c00100f4:	29 c2                	sub    edx,eax
c00100f6:	83 e2 fe             	and    edx,0xfffffffe
c00100f9:	01 f2                	add    edx,esi
c00100fb:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010100:	84 c0                	test   al,al
c0010102:	74 0a                	je     c001010e <KeSetBootMessage(char const*)+0x4d>
c0010104:	80 cc 0f             	or     ah,0xf
c0010107:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001010b:	41                   	inc    ecx
c001010c:	eb ed                	jmp    c00100fb <KeSetBootMessage(char const*)+0x3a>
c001010e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010113:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010120:	5b                   	pop    ebx
c0010121:	5e                   	pop    esi
c0010122:	5f                   	pop    edi
c0010123:	c3                   	ret    

c0010124 <EnvVarContainer::getEnv(char const*)>:
c0010124:	57                   	push   edi
c0010125:	56                   	push   esi
c0010126:	53                   	push   ebx
c0010127:	31 db                	xor    ebx,ebx
c0010129:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001012d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001012f:	7e 2b                	jle    c001015c <EnvVarContainer::getEnv(char const*)+0x38>
c0010131:	50                   	push   eax
c0010132:	50                   	push   eax
c0010133:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010136:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001013d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010140:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010144:	e8 67 06 ff ff       	call   c00007b0 <strcmp>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	85 c0                	test   eax,eax
c001014e:	75 09                	jne    c0010159 <EnvVarContainer::getEnv(char const*)+0x35>
c0010150:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010153:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010157:	eb 05                	jmp    c001015e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010159:	43                   	inc    ebx
c001015a:	eb d1                	jmp    c001012d <EnvVarContainer::getEnv(char const*)+0x9>
c001015c:	31 c0                	xor    eax,eax
c001015e:	5b                   	pop    ebx
c001015f:	5e                   	pop    esi
c0010160:	5f                   	pop    edi
c0010161:	c3                   	ret    

c0010162 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010162:	55                   	push   ebp
c0010163:	57                   	push   edi
c0010164:	56                   	push   esi
c0010165:	53                   	push   ebx
c0010166:	83 ec 28             	sub    esp,0x28
c0010169:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001016d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010171:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010175:	56                   	push   esi
c0010176:	e8 15 04 ff ff       	call   c0000590 <strlen>
c001017b:	40                   	inc    eax
c001017c:	89 04 24             	mov    DWORD PTR [esp],eax
c001017f:	e8 e2 78 ff ff       	call   c0007a66 <malloc>
c0010184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001018b:	e8 00 04 ff ff       	call   c0000590 <strlen>
c0010190:	40                   	inc    eax
c0010191:	89 04 24             	mov    DWORD PTR [esp],eax
c0010194:	e8 cd 78 ff ff       	call   c0007a66 <malloc>
c0010199:	89 34 24             	mov    DWORD PTR [esp],esi
c001019c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101a0:	e8 eb 03 ff ff       	call   c0000590 <strlen>
c00101a5:	83 c4 0c             	add    esp,0xc
c00101a8:	40                   	inc    eax
c00101a9:	50                   	push   eax
c00101aa:	6a 00                	push   0x0
c00101ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101b0:	e8 3b 03 ff ff       	call   c00004f0 <memset>
c00101b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00101b8:	e8 d3 03 ff ff       	call   c0000590 <strlen>
c00101bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101c1:	8d 48 01             	lea    ecx,[eax+0x1]
c00101c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101c9:	89 de                	mov    esi,ebx
c00101cb:	e8 c0 03 ff ff       	call   c0000590 <strlen>
c00101d0:	83 c4 0c             	add    esp,0xc
c00101d3:	40                   	inc    eax
c00101d4:	50                   	push   eax
c00101d5:	6a 00                	push   0x0
c00101d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101db:	e8 10 03 ff ff       	call   c00004f0 <memset>
c00101e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101e3:	e8 a8 03 ff ff       	call   c0000590 <strlen>
c00101e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00101ec:	8d 48 01             	lea    ecx,[eax+0x1]
c00101ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00101f4:	40                   	inc    eax
c00101f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00101f8:	c1 e0 03             	shl    eax,0x3
c00101fb:	5a                   	pop    edx
c00101fc:	59                   	pop    ecx
c00101fd:	50                   	push   eax
c00101fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010201:	e8 45 78 ff ff       	call   c0007a4b <realloc>
c0010206:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010209:	8d 74 24 18          	lea    esi,[esp+0x18]
c001020d:	b9 08 00 00 00       	mov    ecx,0x8
c0010212:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010215:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001021b:	83 c4 2c             	add    esp,0x2c
c001021e:	5b                   	pop    ebx
c001021f:	5e                   	pop    esi
c0010220:	5f                   	pop    edi
c0010221:	5d                   	pop    ebp
c0010222:	c3                   	ret    
c0010223:	90                   	nop

c0010224 <EnvVarContainer::deleteEnv(char const*)>:
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010226:	55                   	push   ebp
c0010227:	57                   	push   edi
c0010228:	56                   	push   esi
c0010229:	53                   	push   ebx
c001022a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010230:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010237:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001023e:	68 14 01 00 00       	push   0x114
c0010243:	e8 1e 78 ff ff       	call   c0007a66 <malloc>
c0010248:	83 c4 0c             	add    esp,0xc
c001024b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001024e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010255:	89 c3                	mov    ebx,eax
c0010257:	50                   	push   eax
c0010258:	e8 0b ad ff ff       	call   c000af68 <File::File(char const*, Process*)>
c001025d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010260:	e8 29 b0 ff ff       	call   c000b28e <File::exists()>
c0010265:	83 c4 10             	add    esp,0x10
c0010268:	84 c0                	test   al,al
c001026a:	75 31                	jne    c001029d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001026c:	50                   	push   eax
c001026d:	50                   	push   eax
c001026e:	6a 12                	push   0x12
c0010270:	53                   	push   ebx
c0010271:	e8 b0 ad ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0010276:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010278:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001027b:	89 34 24             	mov    DWORD PTR [esp],esi
c001027e:	e8 0d 03 ff ff       	call   c0000590 <strlen>
c0010283:	5a                   	pop    edx
c0010284:	31 d2                	xor    edx,edx
c0010286:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001028a:	51                   	push   ecx
c001028b:	56                   	push   esi
c001028c:	52                   	push   edx
c001028d:	50                   	push   eax
c001028e:	53                   	push   ebx
c001028f:	ff d7                	call   edi
c0010291:	83 c4 14             	add    esp,0x14
c0010294:	53                   	push   ebx
c0010295:	e8 ea ad ff ff       	call   c000b084 <File::close()>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	56                   	push   esi
c001029e:	31 f6                	xor    esi,esi
c00102a0:	68 00 01 00 00       	push   0x100
c00102a5:	6a 00                	push   0x0
c00102a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102ab:	50                   	push   eax
c00102ac:	e8 3f 02 ff ff       	call   c00004f0 <memset>
c00102b1:	5f                   	pop    edi
c00102b2:	58                   	pop    eax
c00102b3:	6a 01                	push   0x1
c00102b5:	53                   	push   ebx
c00102b6:	e8 6b ad ff ff       	call   c000b026 <File::open(FileOpenMode)>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102cb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102cf:	51                   	push   ecx
c00102d0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00102d4:	52                   	push   edx
c00102d5:	6a 00                	push   0x0
c00102d7:	6a 01                	push   0x1
c00102d9:	53                   	push   ebx
c00102da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102dd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00102e1:	83 c4 20             	add    esp,0x20
c00102e4:	3c 0d                	cmp    al,0xd
c00102e6:	0f 84 09 01 00 00    	je     c00103f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00102ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00102f1:	0f 84 ef 00 00 00    	je     c00103e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00102f7:	3c 0a                	cmp    al,0xa
c00102f9:	74 13                	je     c001030e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00102fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010300:	74 0c                	je     c001030e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010302:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010308:	0f 8e d8 00 00 00    	jle    c00103e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001030e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010312:	83 ec 0c             	sub    esp,0xc
c0010315:	8d 78 01             	lea    edi,[eax+0x1]
c0010318:	57                   	push   edi
c0010319:	e8 48 77 ff ff       	call   c0007a66 <malloc>
c001031e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010322:	8d 56 04             	lea    edx,[esi+0x4]
c0010325:	89 14 24             	mov    DWORD PTR [esp],edx
c0010328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001032c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010330:	e8 31 77 ff ff       	call   c0007a66 <malloc>
c0010335:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010339:	83 c4 0c             	add    esp,0xc
c001033c:	57                   	push   edi
c001033d:	6a 00                	push   0x0
c001033f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010343:	e8 a8 01 ff ff       	call   c00004f0 <memset>
c0010348:	8d 74 24 30          	lea    esi,[esp+0x30]
c001034c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010350:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010354:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010356:	83 c4 0c             	add    esp,0xc
c0010359:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001035d:	52                   	push   edx
c001035e:	6a 00                	push   0x0
c0010360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010364:	e8 87 01 ff ff       	call   c00004f0 <memset>
c0010369:	8d 74 24 30          	lea    esi,[esp+0x30]
c001036d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010371:	89 34 24             	mov    DWORD PTR [esp],esi
c0010374:	e8 17 02 ff ff       	call   c0000590 <strlen>
c0010379:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001037d:	89 c1                	mov    ecx,eax
c001037f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010381:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001038a:	40                   	inc    eax
c001038b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001038e:	85 d2                	test   edx,edx
c0010390:	75 0c                	jne    c001039e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010392:	83 ec 0c             	sub    esp,0xc
c0010395:	6a 08                	push   0x8
c0010397:	e8 ca 76 ff ff       	call   c0007a66 <malloc>
c001039c:	eb 0c                	jmp    c00103aa <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001039e:	51                   	push   ecx
c001039f:	51                   	push   ecx
c00103a0:	c1 e0 03             	shl    eax,0x3
c00103a3:	50                   	push   eax
c00103a4:	52                   	push   edx
c00103a5:	e8 a1 76 ff ff       	call   c0007a4b <realloc>
c00103aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103ad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103b6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103ba:	b9 08 00 00 00       	mov    ecx,0x8
c00103bf:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c5:	50                   	push   eax
c00103c6:	31 f6                	xor    esi,esi
c00103c8:	68 00 01 00 00       	push   0x100
c00103cd:	6a 00                	push   0x0
c00103cf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103d3:	50                   	push   eax
c00103d4:	e8 17 01 ff ff       	call   c00004f0 <memset>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103e4:	eb 0f                	jmp    c00103f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103e6:	3c 3d                	cmp    al,0x3d
c00103e8:	74 07                	je     c00103f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00103ea:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00103ee:	46                   	inc    esi
c00103ef:	eb 04                	jmp    c00103f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00103f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103fa:	0f 85 c6 fe ff ff    	jne    c00102c6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010400:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010406:	5b                   	pop    ebx
c0010407:	5e                   	pop    esi
c0010408:	5f                   	pop    edi
c0010409:	5d                   	pop    ebp
c001040a:	c3                   	ret    
c001040b:	90                   	nop

c001040c <EnvVarContainer::__loadSystem()>:
c001040c:	83 ec 10             	sub    esp,0x10
c001040f:	68 c0 1c 02 c0       	push   0xc0021cc0
c0010414:	68 08 08 02 c0       	push   0xc0020808
c0010419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041d:	e8 04 fe ff ff       	call   c0010226 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	c3                   	ret    

c0010426 <EnvVarContainer::__loadUser()>:
c0010426:	c3                   	ret    
c0010427:	90                   	nop

c0010428 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001043a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001043d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010441:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010448:	90                   	nop
c0010449:	c3                   	ret    

c001044a <EnvVarContainer::~EnvVarContainer()>:
c001044a:	83 ec 1c             	sub    esp,0x1c
c001044d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010454:	85 c0                	test   eax,eax
c0010456:	74 19                	je     c0010471 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001045c:	8b 00                	mov    eax,DWORD PTR [eax]
c001045e:	85 c0                	test   eax,eax
c0010460:	74 0f                	je     c0010471 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010469:	89 04 24             	mov    DWORD PTR [esp],eax
c001046c:	e8 08 76 ff ff       	call   c0007a79 <free>
c0010471:	90                   	nop
c0010472:	83 c4 1c             	add    esp,0x1c
c0010475:	c3                   	ret    

c0010476 <Krnl::getEnv(Process*, char const*)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010484:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010488:	74 04                	je     c001048e <Krnl::getEnv(Process*, char const*)+0x18>
c001048a:	85 c0                	test   eax,eax
c001048c:	75 0b                	jne    c0010499 <Krnl::getEnv(Process*, char const*)+0x23>
c001048e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010493:	85 c0                	test   eax,eax
c0010495:	75 19                	jne    c00104b0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010497:	eb 27                	jmp    c00104c0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010499:	52                   	push   edx
c001049a:	52                   	push   edx
c001049b:	53                   	push   ebx
c001049c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104a2:	e8 7d fc ff ff       	call   c0010124 <EnvVarContainer::getEnv(char const*)>
c00104a7:	83 c4 10             	add    esp,0x10
c00104aa:	85 c0                	test   eax,eax
c00104ac:	75 28                	jne    c00104d6 <Krnl::getEnv(Process*, char const*)+0x60>
c00104ae:	eb de                	jmp    c001048e <Krnl::getEnv(Process*, char const*)+0x18>
c00104b0:	52                   	push   edx
c00104b1:	52                   	push   edx
c00104b2:	53                   	push   ebx
c00104b3:	50                   	push   eax
c00104b4:	e8 6b fc ff ff       	call   c0010124 <EnvVarContainer::getEnv(char const*)>
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	85 c0                	test   eax,eax
c00104be:	75 16                	jne    c00104d6 <Krnl::getEnv(Process*, char const*)+0x60>
c00104c0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104c4:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00104c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104cd:	83 c4 08             	add    esp,0x8
c00104d0:	5b                   	pop    ebx
c00104d1:	e9 4e fc ff ff       	jmp    c0010124 <EnvVarContainer::getEnv(char const*)>
c00104d6:	83 c4 08             	add    esp,0x8
c00104d9:	5b                   	pop    ebx
c00104da:	c3                   	ret    

c00104db <Krnl::setEnvSystem(char const*, char const*)>:
c00104db:	83 ec 10             	sub    esp,0x10
c00104de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104e6:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00104ec:	e8 71 fc ff ff       	call   c0010162 <EnvVarContainer::setEnv(char const*, char const*)>
c00104f1:	83 c4 1c             	add    esp,0x1c
c00104f4:	c3                   	ret    

c00104f5 <Krnl::setEnvUser(char const*, char const*)>:
c00104f5:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00104fa:	85 c0                	test   eax,eax
c00104fc:	74 15                	je     c0010513 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00104fe:	83 ec 10             	sub    esp,0x10
c0010501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010505:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010509:	50                   	push   eax
c001050a:	e8 53 fc ff ff       	call   c0010162 <EnvVarContainer::setEnv(char const*, char const*)>
c001050f:	83 c4 1c             	add    esp,0x1c
c0010512:	c3                   	ret    
c0010513:	c3                   	ret    

c0010514 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010518:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001051e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010522:	e9 3b fc ff ff       	jmp    c0010162 <EnvVarContainer::setEnv(char const*, char const*)>

c0010527 <Krnl::deleteEnvSystem(char const*)>:
c0010527:	c3                   	ret    

c0010528 <Krnl::deleteEnvUser(char const*)>:
c0010528:	c3                   	ret    

c0010529 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010529:	c3                   	ret    

c001052a <Krnl::newProcessEnv(Process*)>:
c001052a:	83 ec 28             	sub    esp,0x28
c001052d:	6a 0c                	push   0xc
c001052f:	e8 32 75 ff ff       	call   c0007a66 <malloc>
c0010534:	5a                   	pop    edx
c0010535:	59                   	pop    ecx
c0010536:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001053a:	50                   	push   eax
c001053b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001053f:	e8 e4 fe ff ff       	call   c0010428 <EnvVarContainer::EnvVarContainer(Process*)>
c0010544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010548:	83 c4 2c             	add    esp,0x2c
c001054b:	c3                   	ret    

c001054c <Krnl::copyProcessEnv(Process*, Process*)>:
c001054c:	57                   	push   edi
c001054d:	56                   	push   esi
c001054e:	53                   	push   ebx
c001054f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010553:	83 ec 0c             	sub    esp,0xc
c0010556:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001055c:	6a 0c                	push   0xc
c001055e:	e8 03 75 ff ff       	call   c0007a66 <malloc>
c0010563:	89 c3                	mov    ebx,eax
c0010565:	58                   	pop    eax
c0010566:	5a                   	pop    edx
c0010567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056b:	53                   	push   ebx
c001056c:	e8 b7 fe ff ff       	call   c0010428 <EnvVarContainer::EnvVarContainer(Process*)>
c0010571:	8b 07                	mov    eax,DWORD PTR [edi]
c0010573:	89 03                	mov    DWORD PTR [ebx],eax
c0010575:	c1 e0 03             	shl    eax,0x3
c0010578:	89 04 24             	mov    DWORD PTR [esp],eax
c001057b:	e8 e6 74 ff ff       	call   c0007a66 <malloc>
c0010580:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010583:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010585:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010588:	89 c7                	mov    edi,eax
c001058a:	c1 e1 03             	shl    ecx,0x3
c001058d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	89 d8                	mov    eax,ebx
c0010594:	5b                   	pop    ebx
c0010595:	5e                   	pop    esi
c0010596:	5f                   	pop    edi
c0010597:	c3                   	ret    

c0010598 <Krnl::loadSystemEnv()>:
c0010598:	53                   	push   ebx
c0010599:	83 ec 14             	sub    esp,0x14
c001059c:	6a 0c                	push   0xc
c001059e:	e8 c3 74 ff ff       	call   c0007a66 <malloc>
c00105a3:	89 c3                	mov    ebx,eax
c00105a5:	58                   	pop    eax
c00105a6:	5a                   	pop    edx
c00105a7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00105ad:	53                   	push   ebx
c00105ae:	e8 75 fe ff ff       	call   c0010428 <EnvVarContainer::EnvVarContainer(Process*)>
c00105b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105b6:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00105bc:	e8 4b fe ff ff       	call   c001040c <EnvVarContainer::__loadSystem()>
c00105c1:	83 c4 18             	add    esp,0x18
c00105c4:	5b                   	pop    ebx
c00105c5:	c3                   	ret    

c00105c6 <Krnl::loadUserEnv()>:
c00105c6:	53                   	push   ebx
c00105c7:	83 ec 14             	sub    esp,0x14
c00105ca:	6a 0c                	push   0xc
c00105cc:	e8 95 74 ff ff       	call   c0007a66 <malloc>
c00105d1:	89 c3                	mov    ebx,eax
c00105d3:	58                   	pop    eax
c00105d4:	5a                   	pop    edx
c00105d5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00105db:	53                   	push   ebx
c00105dc:	e8 47 fe ff ff       	call   c0010428 <EnvVarContainer::EnvVarContainer(Process*)>
c00105e1:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00105e7:	83 c4 18             	add    esp,0x18
c00105ea:	5b                   	pop    ebx
c00105eb:	c3                   	ret    

c00105ec <Krnl::flushEnv()>:
c00105ec:	c3                   	ret    

c00105ed <Krnl::getProcessTotalEnvCount(Process*)>:
c00105ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f1:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00105f7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00105fd:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010602:	8b 00                	mov    eax,DWORD PTR [eax]
c0010604:	03 01                	add    eax,DWORD PTR [ecx]
c0010606:	85 d2                	test   edx,edx
c0010608:	74 02                	je     c001060c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001060a:	03 02                	add    eax,DWORD PTR [edx]
c001060c:	c3                   	ret    

c001060d <Krnl::getProcessEnvPair(Process*, int)>:
c001060d:	57                   	push   edi
c001060e:	56                   	push   esi
c001060f:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010615:	53                   	push   ebx
c0010616:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001061a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061e:	85 f6                	test   esi,esi
c0010620:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010624:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001062a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001062c:	75 16                	jne    c0010644 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001062e:	39 c2                	cmp    edx,eax
c0010630:	7c 16                	jl     c0010648 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010632:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010638:	8b 31                	mov    esi,DWORD PTR [ecx]
c001063a:	01 c6                	add    esi,eax
c001063c:	39 d6                	cmp    esi,edx
c001063e:	7e 3c                	jle    c001067c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010640:	29 c2                	sub    edx,eax
c0010642:	eb 04                	jmp    c0010648 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010644:	39 c2                	cmp    edx,eax
c0010646:	7d 05                	jge    c001064d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010648:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001064b:	eb 20                	jmp    c001066d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001064d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001064f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010652:	39 d1                	cmp    ecx,edx
c0010654:	7e 04                	jle    c001065a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010656:	29 c2                	sub    edx,eax
c0010658:	eb 10                	jmp    c001066a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001065a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010660:	03 0e                	add    ecx,DWORD PTR [esi]
c0010662:	39 d1                	cmp    ecx,edx
c0010664:	7e 16                	jle    c001067c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010666:	29 c2                	sub    edx,eax
c0010668:	29 fa                	sub    edx,edi
c001066a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001066d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010670:	8b 02                	mov    eax,DWORD PTR [edx]
c0010672:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010675:	89 03                	mov    DWORD PTR [ebx],eax
c0010677:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001067a:	eb 1d                	jmp    c0010699 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001067c:	83 ec 0c             	sub    esp,0xc
c001067f:	68 2a 08 02 c0       	push   0xc002082a
c0010684:	e8 ac 00 00 00       	call   c0010735 <KePanic(char const*)>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010692:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010699:	89 d8                	mov    eax,ebx
c001069b:	5b                   	pop    ebx
c001069c:	5e                   	pop    esi
c001069d:	5f                   	pop    edi
c001069e:	c2 04 00             	ret    0x4

c00106a1 <CPU::current()>:
c00106a1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00106a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00106ac:	c3                   	ret    

c00106ad <operator new(unsigned long)>:
c00106ad:	e9 b4 73 ff ff       	jmp    c0007a66 <malloc>

c00106b2 <operator delete(void*)>:
c00106b2:	e9 d5 73 ff ff       	jmp    c0007a8c <rfree>

c00106b7 <disableIRQs()>:
c00106b7:	fa                   	cli    
c00106b8:	c3                   	ret    

c00106b9 <enableIRQs()>:
c00106b9:	fb                   	sti    
c00106ba:	c3                   	ret    

c00106bb <lockScheduler()>:
c00106bb:	fa                   	cli    
c00106bc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00106c2:	c3                   	ret    

c00106c3 <unlockScheduler()>:
c00106c3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00106c8:	48                   	dec    eax
c00106c9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00106ce:	75 01                	jne    c00106d1 <unlockScheduler()+0xe>
c00106d0:	fb                   	sti    
c00106d1:	c3                   	ret    

c00106d2 <lockStuff()>:
c00106d2:	fa                   	cli    
c00106d3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00106d9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00106df:	c3                   	ret    

c00106e0 <unlockStuff()>:
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00106e8:	48                   	dec    eax
c00106e9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00106ee:	75 18                	jne    c0010708 <unlockStuff()+0x28>
c00106f0:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00106f7:	74 0f                	je     c0010708 <unlockStuff()+0x28>
c00106f9:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010703:	e8 48 49 00 00       	call   c0015050 <schedule()>
c0010708:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001070d:	48                   	dec    eax
c001070e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010713:	75 01                	jne    c0010716 <unlockStuff()+0x36>
c0010715:	fb                   	sti    
c0010716:	83 c4 0c             	add    esp,0xc
c0010719:	c3                   	ret    

c001071a <Virt::getAKernelVAS()>:
c001071a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001071f:	c3                   	ret    

c0010720 <__not_memcpy>:
c0010720:	57                   	push   edi
c0010721:	56                   	push   esi
c0010722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010726:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001072a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001072e:	89 c7                	mov    edi,eax
c0010730:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010732:	5e                   	pop    esi
c0010733:	5f                   	pop    edi
c0010734:	c3                   	ret    

c0010735 <KePanic(char const*)>:
c0010735:	b0 01                	mov    al,0x1
c0010737:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c001073c:	e9 79 66 00 00       	jmp    c0016dba <HalPanic(char const*)>

c0010741 <Krnl::powerThread(void*)>:
c0010741:	83 ec 0c             	sub    esp,0xc
c0010744:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010749:	48                   	dec    eax
c001074a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001074f:	75 01                	jne    c0010752 <Krnl::powerThread(void*)+0x11>
c0010751:	fb                   	sti    
c0010752:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010759:	83 ec 0c             	sub    esp,0xc
c001075c:	6a 0a                	push   0xa
c001075e:	e8 d9 4b 00 00       	call   c001533c <sleep(unsigned int)>
c0010763:	83 c4 10             	add    esp,0x10
c0010766:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001076d:	eb e3                	jmp    c0010752 <Krnl::powerThread(void*)+0x11>

c001076f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001076f:	57                   	push   edi
c0010770:	b9 09 00 00 00       	mov    ecx,0x9
c0010775:	56                   	push   esi
c0010776:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001077b:	fc                   	cld    
c001077c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010780:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010782:	5e                   	pop    esi
c0010783:	5f                   	pop    edi
c0010784:	c3                   	ret    

c0010785 <Krnl::userIOReceived()>:
c0010785:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001078f:	c3                   	ret    

c0010790 <Krnl::handlePowerButton()>:
c0010790:	83 ec 0c             	sub    esp,0xc
c0010793:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010798:	83 f8 02             	cmp    eax,0x2
c001079b:	75 10                	jne    c00107ad <Krnl::handlePowerButton()+0x1d>
c001079d:	83 ec 0c             	sub    esp,0xc
c00107a0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107a6:	e8 f1 68 ff ff       	call   c000709c <Computer::shutdown()>
c00107ab:	eb 11                	jmp    c00107be <Krnl::handlePowerButton()+0x2e>
c00107ad:	48                   	dec    eax
c00107ae:	75 11                	jne    c00107c1 <Krnl::handlePowerButton()+0x31>
c00107b0:	83 ec 0c             	sub    esp,0xc
c00107b3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107b9:	e8 2c 69 ff ff       	call   c00070ea <Computer::sleep()>
c00107be:	83 c4 10             	add    esp,0x10
c00107c1:	83 c4 0c             	add    esp,0xc
c00107c4:	c3                   	ret    

c00107c5 <Krnl::handleSleepButton()>:
c00107c5:	83 ec 0c             	sub    esp,0xc
c00107c8:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00107cd:	83 f8 02             	cmp    eax,0x2
c00107d0:	75 10                	jne    c00107e2 <Krnl::handleSleepButton()+0x1d>
c00107d2:	83 ec 0c             	sub    esp,0xc
c00107d5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107db:	e8 bc 68 ff ff       	call   c000709c <Computer::shutdown()>
c00107e0:	eb 11                	jmp    c00107f3 <Krnl::handleSleepButton()+0x2e>
c00107e2:	48                   	dec    eax
c00107e3:	75 11                	jne    c00107f6 <Krnl::handleSleepButton()+0x31>
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107ee:	e8 f7 68 ff ff       	call   c00070ea <Computer::sleep()>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	83 c4 0c             	add    esp,0xc
c00107f9:	c3                   	ret    

c00107fa <Krnl::setupPowerManager()>:
c00107fa:	83 ec 0c             	sub    esp,0xc
c00107fd:	68 f0 00 00 00       	push   0xf0
c0010802:	6a 00                	push   0x0
c0010804:	68 41 07 01 c0       	push   0xc0010741
c0010809:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001080f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010819:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010820:	e8 d3 45 00 00       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c0010825:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001082f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010839:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010843:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001084d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010857:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010861:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001086b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010875:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001087f:	83 c4 1c             	add    esp,0x1c
c0010882:	c3                   	ret    

c0010883 <KeRand()>:
c0010883:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001088d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010897:	53                   	push   ebx
c0010898:	01 c1                	add    ecx,eax
c001089a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001089f:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00108a5:	01 ca                	add    edx,ecx
c00108a7:	05 ef 04 b5 00       	add    eax,0xb504ef
c00108ac:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00108b1:	83 d2 00             	adc    edx,0x0
c00108b4:	0f b7 da             	movzx  ebx,dx
c00108b7:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00108bd:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00108c1:	5b                   	pop    ebx
c00108c2:	c3                   	ret    

c00108c3 <KeSeedRand(unsigned int)>:
c00108c3:	53                   	push   ebx
c00108c4:	83 ec 08             	sub    esp,0x8
c00108c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cb:	e8 dd 67 00 00       	call   c00170ad <HalGetRand()>
c00108d0:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00108da:	31 d8                	xor    eax,ebx
c00108dc:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00108e1:	e8 9d ff ff ff       	call   c0010883 <KeRand()>
c00108e6:	83 c4 08             	add    esp,0x8
c00108e9:	5b                   	pop    ebx
c00108ea:	eb 97                	jmp    c0010883 <KeRand()>

c00108ec <KeInitRand()>:
c00108ec:	83 ec 0c             	sub    esp,0xc
c00108ef:	e8 bf 65 00 00       	call   c0016eb3 <HalQueryPerformanceCounter()>
c00108f4:	0f 20 da             	mov    edx,cr3
c00108f7:	0f 22 da             	mov    cr3,edx
c00108fa:	0f 20 da             	mov    edx,cr3
c00108fd:	0f 22 da             	mov    cr3,edx
c0010900:	0f 20 da             	mov    edx,cr3
c0010903:	0f 22 da             	mov    cr3,edx
c0010906:	0f 20 da             	mov    edx,cr3
c0010909:	0f 22 da             	mov    cr3,edx
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010914:	50                   	push   eax
c0010915:	e8 a9 ff ff ff       	call   c00108c3 <KeSeedRand(unsigned int)>
c001091a:	83 c4 1c             	add    esp,0x1c
c001091d:	c3                   	ret    
c001091e:	66 90                	xchg   ax,ax

c0010920 <KeResolveCompatibilitySymbol(char*)>:
c0010920:	83 ec 1c             	sub    esp,0x1c
c0010923:	c7 44 24 04 44 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020844
c001092b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001092f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010932:	e8 79 fe fe ff       	call   c00007b0 <strcmp>
c0010937:	85 c0                	test   eax,eax
c0010939:	0f 94 c0             	sete   al
c001093c:	84 c0                	test   al,al
c001093e:	74 0c                	je     c001094c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010940:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010945:	e9 62 01 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c001094a:	66 90                	xchg   ax,ax
c001094c:	c7 44 24 04 4d 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002084d
c0010954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010958:	89 04 24             	mov    DWORD PTR [esp],eax
c001095b:	e8 50 fe fe ff       	call   c00007b0 <strcmp>
c0010960:	85 c0                	test   eax,eax
c0010962:	0f 94 c0             	sete   al
c0010965:	84 c0                	test   al,al
c0010967:	74 0b                	je     c0010974 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010969:	b8 10 e3 01 c0       	mov    eax,0xc001e310
c001096e:	e9 39 01 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010973:	90                   	nop
c0010974:	c7 44 24 04 57 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020857
c001097c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010980:	89 04 24             	mov    DWORD PTR [esp],eax
c0010983:	e8 28 fe fe ff       	call   c00007b0 <strcmp>
c0010988:	85 c0                	test   eax,eax
c001098a:	0f 94 c0             	sete   al
c001098d:	84 c0                	test   al,al
c001098f:	74 0b                	je     c001099c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010991:	b8 44 e0 01 c0       	mov    eax,0xc001e044
c0010996:	e9 11 01 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c001099b:	90                   	nop
c001099c:	c7 44 24 04 60 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020860
c00109a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ab:	e8 00 fe fe ff       	call   c00007b0 <strcmp>
c00109b0:	85 c0                	test   eax,eax
c00109b2:	0f 94 c0             	sete   al
c00109b5:	84 c0                	test   al,al
c00109b7:	74 0b                	je     c00109c4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00109b9:	b8 35 07 01 c0       	mov    eax,0xc0010735
c00109be:	e9 e9 00 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c00109c3:	90                   	nop
c00109c4:	c7 44 24 04 73 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020873
c00109cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00109d3:	e8 d8 fd fe ff       	call   c00007b0 <strcmp>
c00109d8:	85 c0                	test   eax,eax
c00109da:	0f 94 c0             	sete   al
c00109dd:	84 c0                	test   al,al
c00109df:	74 0b                	je     c00109ec <KeResolveCompatibilitySymbol(char*)+0xcc>
c00109e1:	b8 c1 00 01 c0       	mov    eax,0xc00100c1
c00109e6:	e9 c1 00 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c00109eb:	90                   	nop
c00109ec:	c7 44 24 04 90 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020890
c00109f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00109fb:	e8 b0 fd fe ff       	call   c00007b0 <strcmp>
c0010a00:	85 c0                	test   eax,eax
c0010a02:	0f 94 c0             	sete   al
c0010a05:	84 c0                	test   al,al
c0010a07:	74 0b                	je     c0010a14 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010a09:	b8 10 e4 01 c0       	mov    eax,0xc001e410
c0010a0e:	e9 99 00 00 00       	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a13:	90                   	nop
c0010a14:	c7 44 24 04 9a 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002089a
c0010a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a20:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a23:	e8 88 fd fe ff       	call   c00007b0 <strcmp>
c0010a28:	85 c0                	test   eax,eax
c0010a2a:	0f 94 c0             	sete   al
c0010a2d:	84 c0                	test   al,al
c0010a2f:	74 07                	je     c0010a38 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010a31:	b8 90 e1 01 c0       	mov    eax,0xc001e190
c0010a36:	eb 74                	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a38:	c7 44 24 04 a3 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208a3
c0010a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a47:	e8 64 fd fe ff       	call   c00007b0 <strcmp>
c0010a4c:	85 c0                	test   eax,eax
c0010a4e:	0f 94 c0             	sete   al
c0010a51:	84 c0                	test   al,al
c0010a53:	74 07                	je     c0010a5c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010a55:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010a5a:	eb 50                	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a5c:	c7 44 24 04 bb 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208bb
c0010a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a6b:	e8 40 fd fe ff       	call   c00007b0 <strcmp>
c0010a70:	85 c0                	test   eax,eax
c0010a72:	0f 94 c0             	sete   al
c0010a75:	84 c0                	test   al,al
c0010a77:	74 07                	je     c0010a80 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010a79:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010a7e:	eb 2c                	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a80:	c7 44 24 04 c8 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208c8
c0010a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8f:	e8 1c fd fe ff       	call   c00007b0 <strcmp>
c0010a94:	85 c0                	test   eax,eax
c0010a96:	0f 94 c0             	sete   al
c0010a99:	84 c0                	test   al,al
c0010a9b:	74 07                	je     c0010aa4 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010a9d:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010aa2:	eb 08                	jmp    c0010aac <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010aa4:	b8 00 00 00 00       	mov    eax,0x0
c0010aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0010aac:	83 c4 1c             	add    esp,0x1c
c0010aaf:	c3                   	ret    

c0010ab0 <KiSigKill(int)>:
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	6a 00                	push   0x0
c0010ab5:	6a 00                	push   0x0
c0010ab7:	6a ff                	push   0xffffffff
c0010ab9:	6a 01                	push   0x1
c0010abb:	e8 92 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ac0:	83 c4 1c             	add    esp,0x1c
c0010ac3:	c3                   	ret    

c0010ac4 <KiDefaultSignalHandlerIgnore(int)>:
c0010ac4:	c3                   	ret    

c0010ac5 <KiDefaultSignalHandlerPause(int)>:
c0010ac5:	57                   	push   edi
c0010ac6:	b9 07 00 00 00       	mov    ecx,0x7
c0010acb:	56                   	push   esi
c0010acc:	be 11 09 02 c0       	mov    esi,0xc0020911
c0010ad1:	83 ec 24             	sub    esp,0x24
c0010ad4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ad8:	fc                   	cld    
c0010ad9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010adb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010adf:	50                   	push   eax
c0010ae0:	6a 00                	push   0x0
c0010ae2:	6a 00                	push   0x0
c0010ae4:	6a 27                	push   0x27
c0010ae6:	e8 67 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010aeb:	83 c4 34             	add    esp,0x34
c0010aee:	5e                   	pop    esi
c0010aef:	5f                   	pop    edi
c0010af0:	c3                   	ret    

c0010af1 <KiDefaultSignalHandlerResume(int)>:
c0010af1:	57                   	push   edi
c0010af2:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010af7:	56                   	push   esi
c0010af8:	be 2d 09 02 c0       	mov    esi,0xc002092d
c0010afd:	83 ec 24             	sub    esp,0x24
c0010b00:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010b04:	fc                   	cld    
c0010b05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b07:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010b0b:	50                   	push   eax
c0010b0c:	6a 00                	push   0x0
c0010b0e:	6a 00                	push   0x0
c0010b10:	6a 27                	push   0x27
c0010b12:	e8 3b 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b17:	83 c4 34             	add    esp,0x34
c0010b1a:	5e                   	pop    esi
c0010b1b:	5f                   	pop    edi
c0010b1c:	c3                   	ret    

c0010b1d <KeDeinitSignals(SigHandlerBlock*)>:
c0010b1d:	e9 57 6f ff ff       	jmp    c0007a79 <free>

c0010b22 <KeInitSignals()>:
c0010b22:	53                   	push   ebx
c0010b23:	83 ec 14             	sub    esp,0x14
c0010b26:	68 c8 00 00 00       	push   0xc8
c0010b2b:	e8 36 6f ff ff       	call   c0007a66 <malloc>
c0010b30:	83 c4 0c             	add    esp,0xc
c0010b33:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010b3d:	89 c3                	mov    ebx,eax
c0010b3f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010b49:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010b4f:	6a 20                	push   0x20
c0010b51:	6a 00                	push   0x0
c0010b53:	50                   	push   eax
c0010b54:	e8 97 f9 fe ff       	call   c00004f0 <memset>
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	6a 44                	push   0x44
c0010b5e:	6a 00                	push   0x0
c0010b60:	53                   	push   ebx
c0010b61:	e8 8a f9 fe ff       	call   c00004f0 <memset>
c0010b66:	83 c4 18             	add    esp,0x18
c0010b69:	89 d8                	mov    eax,ebx
c0010b6b:	5b                   	pop    ebx
c0010b6c:	c3                   	ret    

c0010b6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010b6d:	53                   	push   ebx
c0010b6e:	b8 01 00 00 00       	mov    eax,0x1
c0010b73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b7b:	83 f9 10             	cmp    ecx,0x10
c0010b7e:	7f 21                	jg     c0010ba1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b84:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010b87:	89 03                	mov    DWORD PTR [ebx],eax
c0010b89:	b8 01 00 00 00       	mov    eax,0x1
c0010b8e:	d3 e0                	shl    eax,cl
c0010b90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010b94:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010b97:	31 c0                	xor    eax,eax
c0010b99:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ba1:	5b                   	pop    ebx
c0010ba2:	c3                   	ret    

c0010ba3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ba3:	55                   	push   ebp
c0010ba4:	57                   	push   edi
c0010ba5:	bf 08 00 00 00       	mov    edi,0x8
c0010baa:	56                   	push   esi
c0010bab:	53                   	push   ebx
c0010bac:	83 ec 18             	sub    esp,0x18
c0010baf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bb3:	68 4a 09 02 c0       	push   0xc002094a
c0010bb8:	e8 29 9e ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	31 c9                	xor    ecx,ecx
c0010bc2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010bc9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010bcf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010bd3:	99                   	cdq    
c0010bd4:	f7 ff                	idiv   edi
c0010bd6:	8d 42 24             	lea    eax,[edx+0x24]
c0010bd9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010bdd:	85 f6                	test   esi,esi
c0010bdf:	75 1a                	jne    c0010bfb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010be1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010be5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010be9:	50                   	push   eax
c0010bea:	50                   	push   eax
c0010beb:	52                   	push   edx
c0010bec:	68 5b 09 02 c0       	push   0xc002095b
c0010bf1:	e8 f0 9d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0010bf6:	83 c4 10             	add    esp,0x10
c0010bf9:	eb 1b                	jmp    c0010c16 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010bfb:	41                   	inc    ecx
c0010bfc:	83 f9 08             	cmp    ecx,0x8
c0010bff:	75 ce                	jne    c0010bcf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010c01:	83 ec 0c             	sub    esp,0xc
c0010c04:	be 01 00 00 00       	mov    esi,0x1
c0010c09:	68 7c 09 02 c0       	push   0xc002097c
c0010c0e:	e8 d3 9d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0010c13:	83 c4 10             	add    esp,0x10
c0010c16:	83 c4 0c             	add    esp,0xc
c0010c19:	89 f0                	mov    eax,esi
c0010c1b:	5b                   	pop    ebx
c0010c1c:	5e                   	pop    esi
c0010c1d:	5f                   	pop    edi
c0010c1e:	5d                   	pop    ebp
c0010c1f:	c3                   	ret    

c0010c20 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010c20:	55                   	push   ebp
c0010c21:	57                   	push   edi
c0010c22:	56                   	push   esi
c0010c23:	53                   	push   ebx
c0010c24:	51                   	push   ecx
c0010c25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c29:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010c30:	0f 84 b1 00 00 00    	je     c0010ce7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010c36:	31 c9                	xor    ecx,ecx
c0010c38:	bf 08 00 00 00       	mov    edi,0x8
c0010c3d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010c43:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010c46:	99                   	cdq    
c0010c47:	f7 ff                	idiv   edi
c0010c49:	89 d5                	mov    ebp,edx
c0010c4b:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010c52:	85 d2                	test   edx,edx
c0010c54:	0f 84 9e 00 00 00    	je     c0010cf8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c0010c5a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010c60:	88 d1                	mov    cl,dl
c0010c62:	bf 01 00 00 00       	mov    edi,0x1
c0010c67:	d3 e7                	shl    edi,cl
c0010c69:	31 c9                	xor    ecx,ecx
c0010c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c6e:	b8 01 00 00 00       	mov    eax,0x1
c0010c73:	d3 e0                	shl    eax,cl
c0010c75:	85 04 24             	test   DWORD PTR [esp],eax
c0010c78:	74 06                	je     c0010c80 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c0010c7a:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010c7e:	75 67                	jne    c0010ce7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010c80:	41                   	inc    ecx
c0010c81:	83 f9 11             	cmp    ecx,0x11
c0010c84:	75 e8                	jne    c0010c6e <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c0010c86:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010c89:	46                   	inc    esi
c0010c8a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010c90:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c0010c9b:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ca2:	09 f8                	or     eax,edi
c0010ca4:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010caa:	31 c0                	xor    eax,eax
c0010cac:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010cb4:	74 09                	je     c0010cbf <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c0010cb6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cbd:	eb 06                	jmp    c0010cc5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010cbf:	40                   	inc    eax
c0010cc0:	83 f8 08             	cmp    eax,0x8
c0010cc3:	75 e7                	jne    c0010cac <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c0010cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010cc9:	83 fa 09             	cmp    edx,0x9
c0010ccc:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010ccf:	89 11                	mov    DWORD PTR [ecx],edx
c0010cd1:	75 07                	jne    c0010cda <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c0010cd3:	b8 b0 0a 01 c0       	mov    eax,0xc0010ab0
c0010cd8:	eb 31                	jmp    c0010d0b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cda:	83 f8 01             	cmp    eax,0x1
c0010cdd:	75 0c                	jne    c0010ceb <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c0010cdf:	f7 d7                	not    edi
c0010ce1:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010ce7:	31 c0                	xor    eax,eax
c0010ce9:	eb 20                	jmp    c0010d0b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010ceb:	85 c0                	test   eax,eax
c0010ced:	75 1c                	jne    c0010d0b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cef:	8b 04 95 20 1d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde2e0]
c0010cf6:	eb 13                	jmp    c0010d0b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cf8:	41                   	inc    ecx
c0010cf9:	46                   	inc    esi
c0010cfa:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d00:	83 f9 08             	cmp    ecx,0x8
c0010d03:	0f 85 34 ff ff ff    	jne    c0010c3d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010d09:	eb dc                	jmp    c0010ce7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d0b:	5a                   	pop    edx
c0010d0c:	5b                   	pop    ebx
c0010d0d:	5e                   	pop    esi
c0010d0e:	5f                   	pop    edi
c0010d0f:	5d                   	pop    ebp
c0010d10:	c3                   	ret    

c0010d11 <KiCheckSignalZ>:
c0010d11:	83 ec 10             	sub    esp,0x10
c0010d14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010d18:	50                   	push   eax
c0010d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d21:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010d27:	e8 f4 fe ff ff       	call   c0010c20 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010d2c:	5a                   	pop    edx
c0010d2d:	31 d2                	xor    edx,edx
c0010d2f:	59                   	pop    ecx
c0010d30:	85 c0                	test   eax,eax
c0010d32:	74 19                	je     c0010d4d <KiCheckSignalZ+0x3c>
c0010d34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010d3a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010d3d:	89 02                	mov    DWORD PTR [edx],eax
c0010d3f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d4a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010d4d:	89 d0                	mov    eax,edx
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	c3                   	ret    

c0010d53 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010d53:	56                   	push   esi
c0010d54:	53                   	push   ebx
c0010d55:	bb 01 00 00 00       	mov    ebx,0x1
c0010d5a:	52                   	push   edx
c0010d5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010d5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d63:	d3 e3                	shl    ebx,cl
c0010d65:	83 f9 10             	cmp    ecx,0x10
c0010d68:	7f 08                	jg     c0010d72 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010d6a:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010d70:	75 10                	jne    c0010d82 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	68 8d 09 02 c0       	push   0xc002098d
c0010d7a:	e8 b6 f9 ff ff       	call   c0010735 <KePanic(char const*)>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	f7 d3                	not    ebx
c0010d84:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010d8a:	58                   	pop    eax
c0010d8b:	5b                   	pop    ebx
c0010d8c:	5e                   	pop    esi
c0010d8d:	c3                   	ret    

c0010d8e <KiFinishSignalZ>:
c0010d8e:	53                   	push   ebx
c0010d8f:	83 ec 10             	sub    esp,0x10
c0010d92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d96:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010da1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010da7:	e8 a7 ff ff ff       	call   c0010d53 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010dac:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010db2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010db9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010dc0:	83 c4 18             	add    esp,0x18
c0010dc3:	5b                   	pop    ebx
c0010dc4:	c3                   	ret    

c0010dc5 <SysSeekDir(regs*)>:
c0010dc5:	31 c0                	xor    eax,eax
c0010dc7:	31 d2                	xor    edx,edx
c0010dc9:	c3                   	ret    

c0010dca <SysTellDir(regs*)>:
c0010dca:	31 c0                	xor    eax,eax
c0010dcc:	31 d2                	xor    edx,edx
c0010dce:	c3                   	ret    

c0010dcf <SysVerify(regs*)>:
c0010dcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd3:	31 d2                	xor    edx,edx
c0010dd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dd8:	c3                   	ret    

c0010dd9 <SysGetArgc(regs*)>:
c0010dd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010de1:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010de7:	99                   	cdq    
c0010de8:	c3                   	ret    

c0010de9 <SysTTYName(regs*)>:
c0010de9:	b8 01 00 00 00       	mov    eax,0x1
c0010dee:	31 d2                	xor    edx,edx
c0010df0:	c3                   	ret    

c0010df1 <SysFormatDisk(regs*)>:
c0010df1:	56                   	push   esi
c0010df2:	53                   	push   ebx
c0010df3:	83 ec 24             	sub    esp,0x24
c0010df6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dfa:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010e00:	eb 32                	jmp    c0010e34 <SysFormatDisk(regs*)+0x43>
c0010e02:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010e05:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010e08:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010e0a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010e0e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010e11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e15:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010e1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e27:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010e2a:	83 f8 08             	cmp    eax,0x8
c0010e2d:	89 c1                	mov    ecx,eax
c0010e2f:	75 14                	jne    c0010e45 <SysFormatDisk(regs*)+0x54>
c0010e31:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010e34:	85 db                	test   ebx,ebx
c0010e36:	75 ca                	jne    c0010e02 <SysFormatDisk(regs*)+0x11>
c0010e38:	b8 03 00 00 00       	mov    eax,0x3
c0010e3d:	31 d2                	xor    edx,edx
c0010e3f:	83 c4 24             	add    esp,0x24
c0010e42:	5b                   	pop    ebx
c0010e43:	5e                   	pop    esi
c0010e44:	c3                   	ret    
c0010e45:	85 c0                	test   eax,eax
c0010e47:	74 13                	je     c0010e5c <SysFormatDisk(regs*)+0x6b>
c0010e49:	31 d2                	xor    edx,edx
c0010e4b:	83 f9 09             	cmp    ecx,0x9
c0010e4e:	b8 01 00 00 00       	mov    eax,0x1
c0010e53:	74 ea                	je     c0010e3f <SysFormatDisk(regs*)+0x4e>
c0010e55:	b8 02 00 00 00       	mov    eax,0x2
c0010e5a:	eb e1                	jmp    c0010e3d <SysFormatDisk(regs*)+0x4c>
c0010e5c:	31 c0                	xor    eax,eax
c0010e5e:	eb dd                	jmp    c0010e3d <SysFormatDisk(regs*)+0x4c>

c0010e60 <SysSetDiskVolumeLabel(regs*)>:
c0010e60:	83 ec 1c             	sub    esp,0x1c
c0010e63:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010e67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010e6b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010e6f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010e72:	83 f8 19             	cmp    eax,0x19
c0010e75:	77 3d                	ja     c0010eb4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e77:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010e7e:	85 c9                	test   ecx,ecx
c0010e80:	74 32                	je     c0010eb4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e82:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010e85:	85 db                	test   ebx,ebx
c0010e87:	74 2b                	je     c0010eb4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e89:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010e8f:	85 d2                	test   edx,edx
c0010e91:	74 21                	je     c0010eb4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e93:	8b 32                	mov    esi,DWORD PTR [edx]
c0010e95:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010e99:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ea0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010ea4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010ea7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010eab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010eaf:	83 c4 1c             	add    esp,0x1c
c0010eb2:	99                   	cdq    
c0010eb3:	c3                   	ret    
c0010eb4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010eb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ebe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ec2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010ec6:	83 c4 1c             	add    esp,0x1c
c0010ec9:	c3                   	ret    

c0010eca <SysGetDiskVolumeLabel(regs*)>:
c0010eca:	83 ec 2c             	sub    esp,0x2c
c0010ecd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ed5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010ed9:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010edd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ee0:	83 fa 19             	cmp    edx,0x19
c0010ee3:	77 4c                	ja     c0010f31 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ee5:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010eec:	85 c9                	test   ecx,ecx
c0010eee:	74 41                	je     c0010f31 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ef0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ef3:	85 db                	test   ebx,ebx
c0010ef5:	74 3a                	je     c0010f31 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ef7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010efa:	85 f6                	test   esi,esi
c0010efc:	74 33                	je     c0010f31 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010efe:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010f04:	85 c0                	test   eax,eax
c0010f06:	74 29                	je     c0010f31 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f08:	8b 38                	mov    edi,DWORD PTR [eax]
c0010f0a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010f0e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010f16:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f1d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010f20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f24:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f28:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f2c:	83 c4 2c             	add    esp,0x2c
c0010f2f:	99                   	cdq    
c0010f30:	c3                   	ret    
c0010f31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f43:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f47:	83 c4 2c             	add    esp,0x2c
c0010f4a:	c3                   	ret    

c0010f4b <SysShutdown(regs*)>:
c0010f4b:	83 ec 1c             	sub    esp,0x1c
c0010f4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f56:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010f5a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f5d:	85 c0                	test   eax,eax
c0010f5f:	74 28                	je     c0010f89 <SysShutdown(regs*)+0x3e>
c0010f61:	83 f8 01             	cmp    eax,0x1
c0010f64:	0f 84 8a 00 00 00    	je     c0010ff4 <SysShutdown(regs*)+0xa9>
c0010f6a:	83 f8 02             	cmp    eax,0x2
c0010f6d:	be ff ff ff ff       	mov    esi,0xffffffff
c0010f72:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010f77:	74 49                	je     c0010fc2 <SysShutdown(regs*)+0x77>
c0010f79:	89 f0                	mov    eax,esi
c0010f7b:	89 fa                	mov    edx,edi
c0010f7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010f81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f85:	83 c4 1c             	add    esp,0x1c
c0010f88:	c3                   	ret    
c0010f89:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010f8e:	31 f6                	xor    esi,esi
c0010f90:	31 ff                	xor    edi,edi
c0010f92:	31 c9                	xor    ecx,ecx
c0010f94:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f96:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010f9a:	be ff ff ff ff       	mov    esi,0xffffffff
c0010f9f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010fa3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010fa8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010fac:	89 04 24             	mov    DWORD PTR [esp],eax
c0010faf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fb2:	89 f0                	mov    eax,esi
c0010fb4:	89 fa                	mov    edx,edi
c0010fb6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010fba:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fbe:	83 c4 1c             	add    esp,0x1c
c0010fc1:	c3                   	ret    
c0010fc2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010fc7:	31 c9                	xor    ecx,ecx
c0010fc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fcb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010fcf:	31 c9                	xor    ecx,ecx
c0010fd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fd5:	b9 01 00 00 00       	mov    ecx,0x1
c0010fda:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fe1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fe4:	89 f0                	mov    eax,esi
c0010fe6:	89 fa                	mov    edx,edi
c0010fe8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010fec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010ff0:	83 c4 1c             	add    esp,0x1c
c0010ff3:	c3                   	ret    
c0010ff4:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0010ff9:	85 c0                	test   eax,eax
c0010ffb:	74 02                	je     c0010fff <SysShutdown(regs*)+0xb4>
c0010ffd:	ff d0                	call   eax
c0010fff:	31 f6                	xor    esi,esi
c0011001:	31 ff                	xor    edi,edi
c0011003:	89 f0                	mov    eax,esi
c0011005:	89 fa                	mov    edx,edi
c0011007:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001100b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001100f:	83 c4 1c             	add    esp,0x1c
c0011012:	c3                   	ret    

c0011013 <SysRealpath(regs*)>:
c0011013:	53                   	push   ebx
c0011014:	83 ec 18             	sub    esp,0x18
c0011017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001101e:	85 c9                	test   ecx,ecx
c0011020:	74 39                	je     c001105b <SysRealpath(regs*)+0x48>
c0011022:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011025:	31 d2                	xor    edx,edx
c0011027:	b8 01 00 00 00       	mov    eax,0x1
c001102c:	85 db                	test   ebx,ebx
c001102e:	75 05                	jne    c0011035 <SysRealpath(regs*)+0x22>
c0011030:	83 c4 18             	add    esp,0x18
c0011033:	5b                   	pop    ebx
c0011034:	c3                   	ret    
c0011035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001103a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001103d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011044:	05 0c 01 00 00       	add    eax,0x10c
c0011049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001104d:	e8 6f 9d ff ff       	call   c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011052:	31 c0                	xor    eax,eax
c0011054:	31 d2                	xor    edx,edx
c0011056:	83 c4 18             	add    esp,0x18
c0011059:	5b                   	pop    ebx
c001105a:	c3                   	ret    
c001105b:	b8 01 00 00 00       	mov    eax,0x1
c0011060:	31 d2                	xor    edx,edx
c0011062:	eb f2                	jmp    c0011056 <SysRealpath(regs*)+0x43>

c0011064 <SysReadDir(regs*)>:
c0011064:	53                   	push   ebx
c0011065:	83 ec 38             	sub    esp,0x38
c0011068:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001106c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001106f:	83 f8 02             	cmp    eax,0x2
c0011072:	76 53                	jbe    c00110c7 <SysReadDir(regs*)+0x63>
c0011074:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001107b:	77 56                	ja     c00110d3 <SysReadDir(regs*)+0x6f>
c001107d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011080:	e8 a2 83 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c0011085:	85 c0                	test   eax,eax
c0011087:	74 4a                	je     c00110d3 <SysReadDir(regs*)+0x6f>
c0011089:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c001108d:	31 d2                	xor    edx,edx
c001108f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011093:	8b 10                	mov    edx,DWORD PTR [eax]
c0011095:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011099:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001109c:	31 db                	xor    ebx,ebx
c001109e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00110a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00110a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00110a9:	b9 10 01 00 00       	mov    ecx,0x110
c00110ae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00110b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110b5:	85 c0                	test   eax,eax
c00110b7:	89 c1                	mov    ecx,eax
c00110b9:	74 27                	je     c00110e2 <SysReadDir(regs*)+0x7e>
c00110bb:	31 d2                	xor    edx,edx
c00110bd:	83 f9 07             	cmp    ecx,0x7
c00110c0:	b8 02 00 00 00       	mov    eax,0x2
c00110c5:	75 16                	jne    c00110dd <SysReadDir(regs*)+0x79>
c00110c7:	b8 01 00 00 00       	mov    eax,0x1
c00110cc:	31 d2                	xor    edx,edx
c00110ce:	83 c4 38             	add    esp,0x38
c00110d1:	5b                   	pop    ebx
c00110d2:	c3                   	ret    
c00110d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110dd:	83 c4 38             	add    esp,0x38
c00110e0:	5b                   	pop    ebx
c00110e1:	c3                   	ret    
c00110e2:	31 c0                	xor    eax,eax
c00110e4:	31 d2                	xor    edx,edx
c00110e6:	eb e6                	jmp    c00110ce <SysReadDir(regs*)+0x6a>

c00110e8 <SysIsATTY(regs*)>:
c00110e8:	83 ec 1c             	sub    esp,0x1c
c00110eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110f2:	83 f8 02             	cmp    eax,0x2
c00110f5:	76 07                	jbe    c00110fe <SysIsATTY(regs*)+0x16>
c00110f7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110fc:	75 22                	jne    c0011120 <SysIsATTY(regs*)+0x38>
c00110fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011106:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001110c:	85 c0                	test   eax,eax
c001110e:	74 1c                	je     c001112c <SysIsATTY(regs*)+0x44>
c0011110:	8b 10                	mov    edx,DWORD PTR [eax]
c0011112:	89 04 24             	mov    DWORD PTR [esp],eax
c0011115:	ff 12                	call   DWORD PTR [edx]
c0011117:	31 d2                	xor    edx,edx
c0011119:	83 c4 1c             	add    esp,0x1c
c001111c:	0f b6 c0             	movzx  eax,al
c001111f:	c3                   	ret    
c0011120:	89 04 24             	mov    DWORD PTR [esp],eax
c0011123:	e8 ff 82 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c0011128:	85 c0                	test   eax,eax
c001112a:	75 e4                	jne    c0011110 <SysIsATTY(regs*)+0x28>
c001112c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011131:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011136:	83 c4 1c             	add    esp,0x1c
c0011139:	c3                   	ret    

c001113a <SysSeek(regs*)>:
c001113a:	83 ec 1c             	sub    esp,0x1c
c001113d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011141:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011145:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011149:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001114c:	8d 71 fd             	lea    esi,[ecx-0x3]
c001114f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011155:	77 3a                	ja     c0011191 <SysSeek(regs*)+0x57>
c0011157:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001115a:	e8 c8 82 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c001115f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011162:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011166:	31 d2                	xor    edx,edx
c0011168:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001116c:	89 04 24             	mov    DWORD PTR [esp],eax
c001116f:	e8 70 9f ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001117c:	85 c0                	test   eax,eax
c001117e:	0f 95 c0             	setne  al
c0011181:	31 d2                	xor    edx,edx
c0011183:	0f b6 c0             	movzx  eax,al
c0011186:	f7 d8                	neg    eax
c0011188:	83 d2 00             	adc    edx,0x0
c001118b:	83 c4 1c             	add    esp,0x1c
c001118e:	f7 da                	neg    edx
c0011190:	c3                   	ret    
c0011191:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011196:	ba ff ff ff ff       	mov    edx,0xffffffff
c001119b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001119f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00111a3:	83 c4 1c             	add    esp,0x1c
c00111a6:	c3                   	ret    

c00111a7 <SysTell(regs*)>:
c00111a7:	53                   	push   ebx
c00111a8:	83 ec 18             	sub    esp,0x18
c00111ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111b2:	83 f8 02             	cmp    eax,0x2
c00111b5:	76 4d                	jbe    c0011204 <SysTell(regs*)+0x5d>
c00111b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111bc:	76 19                	jbe    c00111d7 <SysTell(regs*)+0x30>
c00111be:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111c1:	31 d2                	xor    edx,edx
c00111c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00111c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111d0:	83 c4 18             	add    esp,0x18
c00111d3:	31 c0                	xor    eax,eax
c00111d5:	5b                   	pop    ebx
c00111d6:	c3                   	ret    
c00111d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00111da:	e8 48 82 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c00111df:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00111e9:	e8 4c 9f ff ff       	call   c000b13a <File::tell(unsigned long long*)>
c00111ee:	85 c0                	test   eax,eax
c00111f0:	0f 95 c0             	setne  al
c00111f3:	31 d2                	xor    edx,edx
c00111f5:	0f b6 c0             	movzx  eax,al
c00111f8:	f7 d8                	neg    eax
c00111fa:	83 d2 00             	adc    edx,0x0
c00111fd:	83 c4 18             	add    esp,0x18
c0011200:	5b                   	pop    ebx
c0011201:	f7 da                	neg    edx
c0011203:	c3                   	ret    
c0011204:	83 c4 18             	add    esp,0x18
c0011207:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001120c:	5b                   	pop    ebx
c001120d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011212:	c3                   	ret    

c0011213 <SysSize(regs*)>:
c0011213:	53                   	push   ebx
c0011214:	83 ec 28             	sub    esp,0x28
c0011217:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001121b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001121e:	83 f8 02             	cmp    eax,0x2
c0011221:	76 55                	jbe    c0011278 <SysSize(regs*)+0x65>
c0011223:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011228:	76 19                	jbe    c0011243 <SysSize(regs*)+0x30>
c001122a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001122d:	31 d2                	xor    edx,edx
c001122f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011235:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123c:	83 c4 28             	add    esp,0x28
c001123f:	31 c0                	xor    eax,eax
c0011241:	5b                   	pop    ebx
c0011242:	c3                   	ret    
c0011243:	89 04 24             	mov    DWORD PTR [esp],eax
c0011246:	e8 dc 81 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c001124b:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c001124f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011256:	89 04 24             	mov    DWORD PTR [esp],eax
c0011259:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001125d:	e8 6a a0 ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0011262:	85 c0                	test   eax,eax
c0011264:	0f 95 c0             	setne  al
c0011267:	31 d2                	xor    edx,edx
c0011269:	0f b6 c0             	movzx  eax,al
c001126c:	f7 d8                	neg    eax
c001126e:	83 d2 00             	adc    edx,0x0
c0011271:	83 c4 28             	add    esp,0x28
c0011274:	5b                   	pop    ebx
c0011275:	f7 da                	neg    edx
c0011277:	c3                   	ret    
c0011278:	83 c4 28             	add    esp,0x28
c001127b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011280:	5b                   	pop    ebx
c0011281:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011286:	c3                   	ret    

c0011287 <SysSizeFromFilename(regs*)>:
c0011287:	83 ec 2c             	sub    esp,0x2c
c001128a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001128e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011292:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011296:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001129a:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001129d:	83 fb 02             	cmp    ebx,0x2
c00112a0:	0f 86 97 00 00 00    	jbe    c001133d <SysSizeFromFilename(regs*)+0xb6>
c00112a6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00112ac:	76 24                	jbe    c00112d2 <SysSizeFromFilename(regs*)+0x4b>
c00112ae:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112b1:	31 d2                	xor    edx,edx
c00112b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112c0:	31 c0                	xor    eax,eax
c00112c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00112ca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112ce:	83 c4 2c             	add    esp,0x2c
c00112d1:	c3                   	ret    
c00112d2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00112d9:	e8 88 67 ff ff       	call   c0007a66 <malloc>
c00112de:	89 c7                	mov    edi,eax
c00112e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112e8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00112ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112f3:	e8 70 9c ff ff       	call   c000af68 <File::File(char const*, Process*)>
c00112f8:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00112fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011300:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011303:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011306:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001130a:	e8 bd 9f ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c001130f:	85 ff                	test   edi,edi
c0011311:	89 c3                	mov    ebx,eax
c0011313:	74 08                	je     c001131d <SysSizeFromFilename(regs*)+0x96>
c0011315:	8b 07                	mov    eax,DWORD PTR [edi]
c0011317:	89 3c 24             	mov    DWORD PTR [esp],edi
c001131a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001131d:	31 c0                	xor    eax,eax
c001131f:	85 db                	test   ebx,ebx
c0011321:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011325:	0f 95 c0             	setne  al
c0011328:	31 d2                	xor    edx,edx
c001132a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001132e:	f7 d8                	neg    eax
c0011330:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011334:	83 d2 00             	adc    edx,0x0
c0011337:	83 c4 2c             	add    esp,0x2c
c001133a:	f7 da                	neg    edx
c001133c:	c3                   	ret    
c001133d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011342:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011347:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001134b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001134f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011353:	83 c4 2c             	add    esp,0x2c
c0011356:	c3                   	ret    

c0011357 <SysClose(regs*)>:
c0011357:	53                   	push   ebx
c0011358:	83 ec 18             	sub    esp,0x18
c001135b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001135f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011362:	83 f8 02             	cmp    eax,0x2
c0011365:	76 39                	jbe    c00113a0 <SysClose(regs*)+0x49>
c0011367:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001136d:	83 fa 01             	cmp    edx,0x1
c0011370:	76 25                	jbe    c0011397 <SysClose(regs*)+0x40>
c0011372:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011377:	77 27                	ja     c00113a0 <SysClose(regs*)+0x49>
c0011379:	89 04 24             	mov    DWORD PTR [esp],eax
c001137c:	e8 a6 80 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c0011381:	89 04 24             	mov    DWORD PTR [esp],eax
c0011384:	89 c3                	mov    ebx,eax
c0011386:	e8 f9 9c ff ff       	call   c000b084 <File::close()>
c001138b:	85 db                	test   ebx,ebx
c001138d:	74 08                	je     c0011397 <SysClose(regs*)+0x40>
c001138f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011394:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011397:	83 c4 18             	add    esp,0x18
c001139a:	31 c0                	xor    eax,eax
c001139c:	5b                   	pop    ebx
c001139d:	31 d2                	xor    edx,edx
c001139f:	c3                   	ret    
c00113a0:	83 c4 18             	add    esp,0x18
c00113a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113a8:	5b                   	pop    ebx
c00113a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ae:	c3                   	ret    

c00113af <SysOpenDir(regs*)>:
c00113af:	83 ec 1c             	sub    esp,0x1c
c00113b2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113ba:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00113be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113c1:	85 c0                	test   eax,eax
c00113c3:	74 5c                	je     c0011421 <SysOpenDir(regs*)+0x72>
c00113c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113cc:	e8 95 66 ff ff       	call   c0007a66 <malloc>
c00113d1:	89 c6                	mov    esi,eax
c00113d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113df:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00113e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113e9:	e8 9c a0 ff ff       	call   c000b48a <Directory::Directory(char const*, Process*)>
c00113ee:	85 f6                	test   esi,esi
c00113f0:	74 2f                	je     c0011421 <SysOpenDir(regs*)+0x72>
c00113f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f5:	e8 4e a1 ff ff       	call   c000b548 <Directory::open()>
c00113fa:	85 c0                	test   eax,eax
c00113fc:	75 23                	jne    c0011421 <SysOpenDir(regs*)+0x72>
c00113fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0011401:	e8 58 7d ff ff       	call   c000915e <UnixFile::getFileDescriptor()>
c0011406:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011409:	89 02                	mov    DWORD PTR [edx],eax
c001140b:	c1 f8 1f             	sar    eax,0x1f
c001140e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011411:	31 c0                	xor    eax,eax
c0011413:	31 d2                	xor    edx,edx
c0011415:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011419:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001141d:	83 c4 1c             	add    esp,0x1c
c0011420:	c3                   	ret    
c0011421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011426:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001142f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011433:	83 c4 1c             	add    esp,0x1c
c0011436:	c3                   	ret    

c0011437 <SysMakeDir(regs*)>:
c0011437:	56                   	push   esi
c0011438:	53                   	push   ebx
c0011439:	83 ec 14             	sub    esp,0x14
c001143c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011443:	e8 1e 66 ff ff       	call   c0007a66 <malloc>
c0011448:	89 c3                	mov    ebx,eax
c001144a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001144f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011452:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001145a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001145d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011460:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011464:	e8 21 a0 ff ff       	call   c000b48a <Directory::Directory(char const*, Process*)>
c0011469:	85 db                	test   ebx,ebx
c001146b:	74 28                	je     c0011495 <SysMakeDir(regs*)+0x5e>
c001146d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011470:	e8 b3 a2 ff ff       	call   c000b728 <Directory::create()>
c0011475:	89 c6                	mov    esi,eax
c0011477:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011479:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001147c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001147f:	31 c0                	xor    eax,eax
c0011481:	85 f6                	test   esi,esi
c0011483:	0f 95 c0             	setne  al
c0011486:	31 d2                	xor    edx,edx
c0011488:	f7 d8                	neg    eax
c001148a:	83 d2 00             	adc    edx,0x0
c001148d:	83 c4 14             	add    esp,0x14
c0011490:	5b                   	pop    ebx
c0011491:	f7 da                	neg    edx
c0011493:	5e                   	pop    esi
c0011494:	c3                   	ret    
c0011495:	83 c4 14             	add    esp,0x14
c0011498:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149d:	5b                   	pop    ebx
c001149e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a3:	5e                   	pop    esi
c00114a4:	c3                   	ret    

c00114a5 <SysCloseDir(regs*)>:
c00114a5:	53                   	push   ebx
c00114a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ab:	83 ec 18             	sub    esp,0x18
c00114ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114b2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ba:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00114bd:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00114c3:	77 22                	ja     c00114e7 <SysCloseDir(regs*)+0x42>
c00114c5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00114c8:	e8 5a 7f ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c00114cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00114d0:	89 c3                	mov    ebx,eax
c00114d2:	e8 cd a0 ff ff       	call   c000b5a4 <Directory::close()>
c00114d7:	85 db                	test   ebx,ebx
c00114d9:	74 08                	je     c00114e3 <SysCloseDir(regs*)+0x3e>
c00114db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114e3:	31 c0                	xor    eax,eax
c00114e5:	31 d2                	xor    edx,edx
c00114e7:	83 c4 18             	add    esp,0x18
c00114ea:	5b                   	pop    ebx
c00114eb:	c3                   	ret    

c00114ec <SysWait(regs*)>:
c00114ec:	83 ec 1c             	sub    esp,0x1c
c00114ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114f3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00114fa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011501:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011504:	89 04 24             	mov    DWORD PTR [esp],eax
c0011507:	e8 50 3d 00 00       	call   c001525c <waitTask(int, int*, int)>
c001150c:	83 c4 1c             	add    esp,0x1c
c001150f:	99                   	cdq    
c0011510:	c3                   	ret    

c0011511 <SysNotImpl(regs*)>:
c0011511:	83 ec 1c             	sub    esp,0x1c
c0011514:	c7 04 24 9e 09 02 c0 	mov    DWORD PTR [esp],0xc002099e
c001151b:	e8 15 f2 ff ff       	call   c0010735 <KePanic(char const*)>
c0011520:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011525:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152a:	83 c4 1c             	add    esp,0x1c
c001152d:	c3                   	ret    

c001152e <SysPanic(regs*)>:
c001152e:	83 ec 1c             	sub    esp,0x1c
c0011531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011535:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011538:	89 04 24             	mov    DWORD PTR [esp],eax
c001153b:	e8 f5 f1 ff ff       	call   c0010735 <KePanic(char const*)>
c0011540:	b8 01 00 00 00       	mov    eax,0x1
c0011545:	31 d2                	xor    edx,edx
c0011547:	83 c4 1c             	add    esp,0x1c
c001154a:	c3                   	ret    

c001154b <SysRmdir(regs*)>:
c001154b:	56                   	push   esi
c001154c:	53                   	push   ebx
c001154d:	83 ec 14             	sub    esp,0x14
c0011550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011554:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011557:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001155e:	e8 03 65 ff ff       	call   c0007a66 <malloc>
c0011563:	89 c3                	mov    ebx,eax
c0011565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001156d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011571:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011578:	e8 eb 99 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c001157d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011580:	e8 19 9c ff ff       	call   c000b19e <File::unlink()>
c0011585:	85 db                	test   ebx,ebx
c0011587:	89 c6                	mov    esi,eax
c0011589:	74 08                	je     c0011593 <SysRmdir(regs*)+0x48>
c001158b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001158d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011590:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011593:	31 c0                	xor    eax,eax
c0011595:	85 f6                	test   esi,esi
c0011597:	0f 95 c0             	setne  al
c001159a:	31 d2                	xor    edx,edx
c001159c:	f7 d8                	neg    eax
c001159e:	83 d2 00             	adc    edx,0x0
c00115a1:	83 c4 14             	add    esp,0x14
c00115a4:	5b                   	pop    ebx
c00115a5:	f7 da                	neg    edx
c00115a7:	5e                   	pop    esi
c00115a8:	c3                   	ret    

c00115a9 <SysUnlink(regs*)>:
c00115a9:	56                   	push   esi
c00115aa:	53                   	push   ebx
c00115ab:	83 ec 14             	sub    esp,0x14
c00115ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115b2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00115bc:	e8 a5 64 ff ff       	call   c0007a66 <malloc>
c00115c1:	89 c3                	mov    ebx,eax
c00115c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115cb:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00115cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115d6:	e8 8d 99 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c00115db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115de:	e8 bb 9b ff ff       	call   c000b19e <File::unlink()>
c00115e3:	85 db                	test   ebx,ebx
c00115e5:	89 c6                	mov    esi,eax
c00115e7:	74 08                	je     c00115f1 <SysUnlink(regs*)+0x48>
c00115e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115f1:	31 c0                	xor    eax,eax
c00115f3:	85 f6                	test   esi,esi
c00115f5:	0f 95 c0             	setne  al
c00115f8:	31 d2                	xor    edx,edx
c00115fa:	f7 d8                	neg    eax
c00115fc:	83 d2 00             	adc    edx,0x0
c00115ff:	83 c4 14             	add    esp,0x14
c0011602:	5b                   	pop    ebx
c0011603:	f7 da                	neg    edx
c0011605:	5e                   	pop    esi
c0011606:	c3                   	ret    

c0011607 <SysGetArgv(regs*)>:
c0011607:	83 ec 1c             	sub    esp,0x1c
c001160a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001160e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011611:	85 c0                	test   eax,eax
c0011613:	78 2b                	js     c0011640 <SysGetArgv(regs*)+0x39>
c0011615:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001161b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001161e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011624:	7d 1a                	jge    c0011640 <SysGetArgv(regs*)+0x39>
c0011626:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001162d:	85 c0                	test   eax,eax
c001162f:	74 17                	je     c0011648 <SysGetArgv(regs*)+0x41>
c0011631:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011635:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011638:	89 04 24             	mov    DWORD PTR [esp],eax
c001163b:	e8 50 f0 fe ff       	call   c0000690 <strcpy>
c0011640:	31 c0                	xor    eax,eax
c0011642:	31 d2                	xor    edx,edx
c0011644:	83 c4 1c             	add    esp,0x1c
c0011647:	c3                   	ret    
c0011648:	b8 01 00 00 00       	mov    eax,0x1
c001164d:	31 d2                	xor    edx,edx
c001164f:	83 c4 1c             	add    esp,0x1c
c0011652:	c3                   	ret    

c0011653 <SysUSleep(regs*)>:
c0011653:	53                   	push   ebx
c0011654:	ba 64 00 00 00       	mov    edx,0x64
c0011659:	83 ec 18             	sub    esp,0x18
c001165c:	31 db                	xor    ebx,ebx
c001165e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011662:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011665:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011668:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001166c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011670:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011674:	89 04 24             	mov    DWORD PTR [esp],eax
c0011677:	e8 94 cc 00 00       	call   c001e310 <__udivdi3>
c001167c:	89 04 24             	mov    DWORD PTR [esp],eax
c001167f:	e8 a8 3c 00 00       	call   c001532c <milliTenthSleep(unsigned int)>
c0011684:	83 c4 18             	add    esp,0x18
c0011687:	31 c0                	xor    eax,eax
c0011689:	5b                   	pop    ebx
c001168a:	31 d2                	xor    edx,edx
c001168c:	c3                   	ret    

c001168d <SysSpawn(regs*)>:
c001168d:	83 ec 1c             	sub    esp,0x1c
c0011690:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011694:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011698:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001169c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001169f:	85 f6                	test   esi,esi
c00116a1:	75 10                	jne    c00116b3 <SysSpawn(regs*)+0x26>
c00116a3:	31 c0                	xor    eax,eax
c00116a5:	31 d2                	xor    edx,edx
c00116a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116ab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00116af:	83 c4 1c             	add    esp,0x1c
c00116b2:	c3                   	ret    
c00116b3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00116ba:	e8 a7 63 ff ff       	call   c0007a66 <malloc>
c00116bf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116c5:	89 c6                	mov    esi,eax
c00116c7:	31 c0                	xor    eax,eax
c00116c9:	85 c9                	test   ecx,ecx
c00116cb:	75 08                	jne    c00116d5 <SysSpawn(regs*)+0x48>
c00116cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116e7:	e8 fc 32 00 00       	call   c00149e8 <Process::Process(char const*, Process*, char**)>
c00116ec:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00116f3:	75 ae                	jne    c00116a3 <SysSpawn(regs*)+0x16>
c00116f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00116f8:	e8 ff 37 00 00       	call   c0014efc <Process::createUserThread()>
c00116fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00116ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011703:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011707:	83 c4 1c             	add    esp,0x1c
c001170a:	99                   	cdq    
c001170b:	c3                   	ret    

c001170c <SysGetEnv(regs*)>:
c001170c:	83 ec 2c             	sub    esp,0x2c
c001170f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011713:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011717:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001171b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001171f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011724:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011727:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001172a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001172d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011730:	e8 b8 ee ff ff       	call   c00105ed <Krnl::getProcessTotalEnvCount(Process*)>
c0011735:	39 c7                	cmp    edi,eax
c0011737:	7c 1b                	jl     c0011754 <SysGetEnv(regs*)+0x48>
c0011739:	31 c0                	xor    eax,eax
c001173b:	31 d2                	xor    edx,edx
c001173d:	85 f6                	test   esi,esi
c001173f:	74 03                	je     c0011744 <SysGetEnv(regs*)+0x38>
c0011741:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011744:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011748:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001174c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011750:	83 c4 2c             	add    esp,0x2c
c0011753:	c3                   	ret    
c0011754:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011758:	8d 44 24 18          	lea    eax,[esp+0x18]
c001175c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011762:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011765:	89 04 24             	mov    DWORD PTR [esp],eax
c0011768:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001176c:	e8 9c ee ff ff       	call   c001060d <Krnl::getProcessEnvPair(Process*, int)>
c0011771:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011774:	83 ec 04             	sub    esp,0x4
c0011777:	85 d2                	test   edx,edx
c0011779:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001177d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011781:	75 28                	jne    c00117ab <SysGetEnv(regs*)+0x9f>
c0011783:	89 04 24             	mov    DWORD PTR [esp],eax
c0011786:	e8 05 ee fe ff       	call   c0000590 <strlen>
c001178b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001178e:	89 c3                	mov    ebx,eax
c0011790:	e8 fb ed fe ff       	call   c0000590 <strlen>
c0011795:	31 d2                	xor    edx,edx
c0011797:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001179b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001179f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00117a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00117a7:	83 c4 2c             	add    esp,0x2c
c00117aa:	c3                   	ret    
c00117ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00117b5:	e8 d6 ee fe ff       	call   c0000690 <strcpy>
c00117ba:	b8 b8 09 02 c0       	mov    eax,0xc00209b8
c00117bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00117c6:	e8 d5 f0 fe ff       	call   c00008a0 <strcat>
c00117cb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00117cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d2:	e8 c9 f0 fe ff       	call   c00008a0 <strcat>
c00117d7:	31 c0                	xor    eax,eax
c00117d9:	31 d2                	xor    edx,edx
c00117db:	eb be                	jmp    c001179b <SysGetEnv(regs*)+0x8f>

c00117dd <SysSetFatAttrib(regs*)>:
c00117dd:	83 ec 1c             	sub    esp,0x1c
c00117e0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00117e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00117e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00117ec:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00117f0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00117f3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00117fa:	e8 67 62 ff ff       	call   c0007a66 <malloc>
c00117ff:	89 c3                	mov    ebx,eax
c0011801:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011809:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001180d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011810:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011814:	e8 4f 97 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0011819:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001181c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001181f:	0f b6 d4             	movzx  edx,ah
c0011822:	0f b6 c0             	movzx  eax,al
c0011825:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011829:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001182d:	e8 06 9a ff ff       	call   c000b238 <File::chfatattr(unsigned char, unsigned char)>
c0011832:	85 db                	test   ebx,ebx
c0011834:	89 c6                	mov    esi,eax
c0011836:	74 08                	je     c0011840 <SysSetFatAttrib(regs*)+0x63>
c0011838:	8b 03                	mov    eax,DWORD PTR [ebx]
c001183a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001183d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011840:	31 c0                	xor    eax,eax
c0011842:	85 f6                	test   esi,esi
c0011844:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011848:	0f 95 c0             	setne  al
c001184b:	31 d2                	xor    edx,edx
c001184d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011851:	f7 d8                	neg    eax
c0011853:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011857:	83 d2 00             	adc    edx,0x0
c001185a:	83 c4 1c             	add    esp,0x1c
c001185d:	f7 da                	neg    edx
c001185f:	c3                   	ret    

c0011860 <SysPipe(regs*)>:
c0011860:	83 ec 1c             	sub    esp,0x1c
c0011863:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001186b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001186f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011873:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011876:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011879:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011880:	e8 e1 61 ff ff       	call   c0007a66 <malloc>
c0011885:	89 c3                	mov    ebx,eax
c0011887:	b8 00 50 00 00       	mov    eax,0x5000
c001188c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011890:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011893:	e8 22 6b ff ff       	call   c00083ba <Pipe::Pipe(int)>
c0011898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001189b:	e8 be 78 ff ff       	call   c000915e <UnixFile::getFileDescriptor()>
c00118a0:	89 07                	mov    DWORD PTR [edi],eax
c00118a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118a5:	e8 b4 78 ff ff       	call   c000915e <UnixFile::getFileDescriptor()>
c00118aa:	31 d2                	xor    edx,edx
c00118ac:	89 06                	mov    DWORD PTR [esi],eax
c00118ae:	31 c0                	xor    eax,eax
c00118b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00118b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00118bc:	83 c4 1c             	add    esp,0x1c
c00118bf:	c3                   	ret    

c00118c0 <SysGetUnixTime(regs*)>:
c00118c0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118cf:	e9 90 a0 ff ff       	jmp    c000b964 <Clock::timeInSecondsLocal()>

c00118d4 <string_ends_with(char const*, char const*)>:
c00118d4:	83 ec 1c             	sub    esp,0x1c
c00118d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00118db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118df:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00118e3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00118e7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00118eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ee:	e8 9d ec fe ff       	call   c0000590 <strlen>
c00118f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118f6:	89 c6                	mov    esi,eax
c00118f8:	e8 93 ec fe ff       	call   c0000590 <strlen>
c00118fd:	31 d2                	xor    edx,edx
c00118ff:	39 c6                	cmp    esi,eax
c0011901:	7d 12                	jge    c0011915 <string_ends_with(char const*, char const*)+0x41>
c0011903:	89 d0                	mov    eax,edx
c0011905:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011909:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001190d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011911:	83 c4 1c             	add    esp,0x1c
c0011914:	c3                   	ret    
c0011915:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011919:	29 c6                	sub    esi,eax
c001191b:	01 f3                	add    ebx,esi
c001191d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011920:	e8 8b ee fe ff       	call   c00007b0 <strcmp>
c0011925:	31 d2                	xor    edx,edx
c0011927:	85 c0                	test   eax,eax
c0011929:	0f 94 c2             	sete   dl
c001192c:	eb d5                	jmp    c0011903 <string_ends_with(char const*, char const*)+0x2f>

c001192e <SysOpen(regs*)>:
c001192e:	56                   	push   esi
c001192f:	53                   	push   ebx
c0011930:	81 ec 14 01 00 00    	sub    esp,0x114
c0011936:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c001193d:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c0011940:	85 c9                	test   ecx,ecx
c0011942:	0f 84 c2 01 00 00    	je     c0011b0a <SysOpen(regs*)+0x1dc>
c0011948:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001194b:	85 c0                	test   eax,eax
c001194d:	0f 84 b7 01 00 00    	je     c0011b0a <SysOpen(regs*)+0x1dc>
c0011953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011957:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001195b:	ba ba 09 02 c0       	mov    edx,0xc00209ba
c0011960:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011964:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011967:	e8 55 94 ff ff       	call   c000adc1 <Fs::standardiseFiles(char*, char const*, char const*)>
c001196c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001196f:	e8 1c ec fe ff       	call   c0000590 <strlen>
c0011974:	48                   	dec    eax
c0011975:	74 29                	je     c00119a0 <SysOpen(regs*)+0x72>
c0011977:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c001197c:	80 fa 2e             	cmp    dl,0x2e
c001197f:	74 1a                	je     c001199b <SysOpen(regs*)+0x6d>
c0011981:	80 fa 3a             	cmp    dl,0x3a
c0011984:	74 15                	je     c001199b <SysOpen(regs*)+0x6d>
c0011986:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001198a:	48                   	dec    eax
c001198b:	74 13                	je     c00119a0 <SysOpen(regs*)+0x72>
c001198d:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c0011991:	80 fa 3a             	cmp    dl,0x3a
c0011994:	74 05                	je     c001199b <SysOpen(regs*)+0x6d>
c0011996:	80 fa 2e             	cmp    dl,0x2e
c0011999:	75 eb                	jne    c0011986 <SysOpen(regs*)+0x58>
c001199b:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c00119a0:	b8 be 09 02 c0       	mov    eax,0xc00209be
c00119a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119a9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00119af:	e8 20 ff ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c00119b4:	85 c0                	test   eax,eax
c00119b6:	74 1d                	je     c00119d5 <SysOpen(regs*)+0xa7>
c00119b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119bb:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119c8:	81 c4 14 01 00 00    	add    esp,0x114
c00119ce:	31 c0                	xor    eax,eax
c00119d0:	5b                   	pop    ebx
c00119d1:	31 d2                	xor    edx,edx
c00119d3:	5e                   	pop    esi
c00119d4:	c3                   	ret    
c00119d5:	b8 c3 09 02 c0       	mov    eax,0xc00209c3
c00119da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119de:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00119e4:	e8 eb fe ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c00119e9:	85 c0                	test   eax,eax
c00119eb:	75 cb                	jne    c00119b8 <SysOpen(regs*)+0x8a>
c00119ed:	b8 bf 09 02 c0       	mov    eax,0xc00209bf
c00119f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119f6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00119fc:	e8 af ed fe ff       	call   c00007b0 <strcmp>
c0011a01:	85 c0                	test   eax,eax
c0011a03:	74 b3                	je     c00119b8 <SysOpen(regs*)+0x8a>
c0011a05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a08:	b8 be 09 02 c0       	mov    eax,0xc00209be
c0011a0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a11:	e8 be fe ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c0011a16:	85 c0                	test   eax,eax
c0011a18:	75 9e                	jne    c00119b8 <SysOpen(regs*)+0x8a>
c0011a1a:	b8 c8 09 02 c0       	mov    eax,0xc00209c8
c0011a1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a23:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a26:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a29:	e8 a6 fe ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c0011a2e:	85 c0                	test   eax,eax
c0011a30:	0f 85 e7 00 00 00    	jne    c0011b1d <SysOpen(regs*)+0x1ef>
c0011a36:	b9 cd 09 02 c0       	mov    ecx,0xc00209cd
c0011a3b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011a3f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a45:	e8 8a fe ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c0011a4a:	85 c0                	test   eax,eax
c0011a4c:	0f 85 cb 00 00 00    	jne    c0011b1d <SysOpen(regs*)+0x1ef>
c0011a52:	ba c9 09 02 c0       	mov    edx,0xc00209c9
c0011a57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a5b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a61:	e8 4a ed fe ff       	call   c00007b0 <strcmp>
c0011a66:	85 c0                	test   eax,eax
c0011a68:	0f 84 af 00 00 00    	je     c0011b1d <SysOpen(regs*)+0x1ef>
c0011a6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a71:	b8 c8 09 02 c0       	mov    eax,0xc00209c8
c0011a76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a7a:	e8 55 fe ff ff       	call   c00118d4 <string_ends_with(char const*, char const*)>
c0011a7f:	85 c0                	test   eax,eax
c0011a81:	0f 85 96 00 00 00    	jne    c0011b1d <SysOpen(regs*)+0x1ef>
c0011a87:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011a8e:	e8 d3 5f ff ff       	call   c0007a66 <malloc>
c0011a93:	89 c3                	mov    ebx,eax
c0011a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011aa1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011aa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011aa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011aab:	e8 b8 94 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0011ab0:	85 db                	test   ebx,ebx
c0011ab2:	74 56                	je     c0011b0a <SysOpen(regs*)+0x1dc>
c0011ab4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011ab7:	0f b6 c2             	movzx  eax,dl
c0011aba:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0011abd:	89 d0                	mov    eax,edx
c0011abf:	83 e0 01             	and    eax,0x1
c0011ac2:	f6 c2 02             	test   dl,0x2
c0011ac5:	74 03                	je     c0011aca <SysOpen(regs*)+0x19c>
c0011ac7:	83 c8 02             	or     eax,0x2
c0011aca:	f6 c2 04             	test   dl,0x4
c0011acd:	74 03                	je     c0011ad2 <SysOpen(regs*)+0x1a4>
c0011acf:	83 c8 04             	or     eax,0x4
c0011ad2:	f6 c2 08             	test   dl,0x8
c0011ad5:	74 03                	je     c0011ada <SysOpen(regs*)+0x1ac>
c0011ad7:	83 c8 0a             	or     eax,0xa
c0011ada:	f6 c2 10             	test   dl,0x10
c0011add:	74 03                	je     c0011ae2 <SysOpen(regs*)+0x1b4>
c0011adf:	83 c8 12             	or     eax,0x12
c0011ae2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ae9:	e8 38 95 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0011aee:	85 c0                	test   eax,eax
c0011af0:	75 18                	jne    c0011b0a <SysOpen(regs*)+0x1dc>
c0011af2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011af5:	e8 64 76 ff ff       	call   c000915e <UnixFile::getFileDescriptor()>
c0011afa:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0011afd:	89 02                	mov    DWORD PTR [edx],eax
c0011aff:	c1 f8 1f             	sar    eax,0x1f
c0011b02:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b05:	e9 be fe ff ff       	jmp    c00119c8 <SysOpen(regs*)+0x9a>
c0011b0a:	81 c4 14 01 00 00    	add    esp,0x114
c0011b10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b15:	5b                   	pop    ebx
c0011b16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b1b:	5e                   	pop    esi
c0011b1c:	c3                   	ret    
c0011b1d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011b20:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b26:	e9 96 fe ff ff       	jmp    c00119c1 <SysOpen(regs*)+0x93>

c0011b2b <KeSystemCall(regs*, void*)>:
c0011b2b:	53                   	push   ebx
c0011b2c:	83 ec 08             	sub    esp,0x8
c0011b2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b33:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b36:	83 f8 3b             	cmp    eax,0x3b
c0011b39:	77 16                	ja     c0011b51 <KeSystemCall(regs*, void*)+0x26>
c0011b3b:	8b 14 85 80 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde280]
c0011b42:	85 d2                	test   edx,edx
c0011b44:	74 0b                	je     c0011b51 <KeSystemCall(regs*, void*)+0x26>
c0011b46:	83 ec 0c             	sub    esp,0xc
c0011b49:	53                   	push   ebx
c0011b4a:	ff d2                	call   edx
c0011b4c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b4f:	eb 0d                	jmp    c0011b5e <KeSystemCall(regs*, void*)+0x33>
c0011b51:	52                   	push   edx
c0011b52:	52                   	push   edx
c0011b53:	50                   	push   eax
c0011b54:	68 d2 09 02 c0       	push   0xc00209d2
c0011b59:	e8 88 8e ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b66:	83 c4 08             	add    esp,0x8
c0011b69:	31 d2                	xor    edx,edx
c0011b6b:	5b                   	pop    ebx
c0011b6c:	c3                   	ret    
c0011b6d:	66 90                	xchg   ax,ax
c0011b6f:	90                   	nop

c0011b70 <KeSwitchEndian16(unsigned short)>:
c0011b70:	83 ec 04             	sub    esp,0x4
c0011b73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b77:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b7b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b7f:	c1 f8 08             	sar    eax,0x8
c0011b82:	0f bf d0             	movsx  edx,ax
c0011b85:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b89:	c1 e0 08             	shl    eax,0x8
c0011b8c:	98                   	cwde   
c0011b8d:	09 d0                	or     eax,edx
c0011b8f:	98                   	cwde   
c0011b90:	0f b7 c0             	movzx  eax,ax
c0011b93:	83 c4 04             	add    esp,0x4
c0011b96:	c3                   	ret    
c0011b97:	90                   	nop

c0011b98 <KeSwitchEndian32(unsigned int)>:
c0011b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9c:	c1 e8 18             	shr    eax,0x18
c0011b9f:	89 c2                	mov    edx,eax
c0011ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ba5:	c1 e0 08             	shl    eax,0x8
c0011ba8:	25 00 00 ff 00       	and    eax,0xff0000
c0011bad:	09 c2                	or     edx,eax
c0011baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb3:	c1 e8 08             	shr    eax,0x8
c0011bb6:	25 00 ff 00 00       	and    eax,0xff00
c0011bbb:	09 c2                	or     edx,eax
c0011bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc1:	c1 e0 18             	shl    eax,0x18
c0011bc4:	09 d0                	or     eax,edx
c0011bc6:	c3                   	ret    
c0011bc7:	90                   	nop

c0011bc8 <EthernetCRC32(unsigned char*, int)>:
c0011bc8:	83 ec 10             	sub    esp,0x10
c0011bcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bd0:	75 0a                	jne    c0011bdc <EthernetCRC32(unsigned char*, int)+0x14>
c0011bd2:	b8 00 00 00 00       	mov    eax,0x0
c0011bd7:	e9 8c 00 00 00       	jmp    c0011c68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bdc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011be1:	7f 09                	jg     c0011bec <EthernetCRC32(unsigned char*, int)+0x24>
c0011be3:	b8 00 00 00 00       	mov    eax,0x0
c0011be8:	eb 7e                	jmp    c0011c68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bea:	66 90                	xchg   ax,ax
c0011bec:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011bf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c00:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c04:	7d 5a                	jge    c0011c60 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c0e:	01 d0                	add    eax,edx
c0011c10:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011c13:	0f b6 c0             	movzx  eax,al
c0011c16:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c22:	66 90                	xchg   ax,ax
c0011c24:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c29:	7f 2d                	jg     c0011c58 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c2f:	83 e0 01             	and    eax,0x1
c0011c32:	74 10                	je     c0011c44 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c38:	d1 e8                	shr    eax,1
c0011c3a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c3f:	eb 0b                	jmp    c0011c4c <EthernetCRC32(unsigned char*, int)+0x84>
c0011c41:	8d 76 00             	lea    esi,[esi+0x0]
c0011c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c48:	d1 e8                	shr    eax,1
c0011c4a:	66 90                	xchg   ax,ax
c0011c4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c54:	eb ce                	jmp    c0011c24 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c56:	66 90                	xchg   ax,ax
c0011c58:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011c5c:	eb 9e                	jmp    c0011bfc <EthernetCRC32(unsigned char*, int)+0x34>
c0011c5e:	66 90                	xchg   ax,ax
c0011c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c64:	f7 d0                	not    eax
c0011c66:	66 90                	xchg   ax,ax
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	c3                   	ret    

c0011c6c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c6c:	83 ec 3c             	sub    esp,0x3c
c0011c6f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c73:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0011c78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c84:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011c88:	3d 06 08 00 00       	cmp    eax,0x806
c0011c8d:	75 11                	jne    c0011ca0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011c8f:	c7 04 24 e6 09 02 c0 	mov    DWORD PTR [esp],0xc00209e6
c0011c96:	e8 4b 8d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0011c9b:	eb 1f                	jmp    c0011cbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0011ca0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca4:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011ca8:	3d 00 08 00 00       	cmp    eax,0x800
c0011cad:	75 0d                	jne    c0011cbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011caf:	c7 04 24 fc 09 02 c0 	mov    DWORD PTR [esp],0xc00209fc
c0011cb6:	e8 2b 8d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0011cbb:	90                   	nop
c0011cbc:	90                   	nop
c0011cbd:	83 c4 3c             	add    esp,0x3c
c0011cc0:	c3                   	ret    

c0011cc1 <CmOpen(char const*)>:
c0011cc1:	57                   	push   edi
c0011cc2:	56                   	push   esi
c0011cc3:	53                   	push   ebx
c0011cc4:	83 ec 1c             	sub    esp,0x1c
c0011cc7:	6a 30                	push   0x30
c0011cc9:	e8 98 5d ff ff       	call   c0007a66 <malloc>
c0011cce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cd5:	89 c3                	mov    ebx,eax
c0011cd7:	e8 8a 5d ff ff       	call   c0007a66 <malloc>
c0011cdc:	83 c4 0c             	add    esp,0xc
c0011cdf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011ce5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011ce9:	89 c6                	mov    esi,eax
c0011ceb:	50                   	push   eax
c0011cec:	e8 77 92 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0011cf1:	83 c4 0c             	add    esp,0xc
c0011cf4:	89 33                	mov    DWORD PTR [ebx],esi
c0011cf6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011cfa:	50                   	push   eax
c0011cfb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011cff:	50                   	push   eax
c0011d00:	56                   	push   esi
c0011d01:	e8 c6 95 ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0011d06:	5a                   	pop    edx
c0011d07:	59                   	pop    ecx
c0011d08:	6a 01                	push   0x1
c0011d0a:	ff 33                	push   DWORD PTR [ebx]
c0011d0c:	e8 15 93 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0011d11:	5e                   	pop    esi
c0011d12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d16:	e8 4b 5d ff ff       	call   c0007a66 <malloc>
c0011d1b:	5a                   	pop    edx
c0011d1c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d20:	89 c7                	mov    edi,eax
c0011d22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d24:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d26:	56                   	push   esi
c0011d27:	57                   	push   edi
c0011d28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d30:	50                   	push   eax
c0011d31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d34:	83 c4 14             	add    esp,0x14
c0011d37:	ff 33                	push   DWORD PTR [ebx]
c0011d39:	e8 46 93 ff ff       	call   c000b084 <File::close()>
c0011d3e:	59                   	pop    ecx
c0011d3f:	58                   	pop    eax
c0011d40:	6a 13                	push   0x13
c0011d42:	ff 33                	push   DWORD PTR [ebx]
c0011d44:	e8 dd 92 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0011d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d50:	57                   	push   edi
c0011d51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d59:	50                   	push   eax
c0011d5a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d5d:	83 c4 14             	add    esp,0x14
c0011d60:	57                   	push   edi
c0011d61:	e8 13 5d ff ff       	call   c0007a79 <free>
c0011d66:	83 c4 10             	add    esp,0x10
c0011d69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d6c:	75 10                	jne    c0011d7e <CmOpen(char const*)+0xbd>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	68 11 0a 02 c0       	push   0xc0020a11
c0011d76:	e8 ba e9 ff ff       	call   c0010735 <KePanic(char const*)>
c0011d7b:	83 c4 10             	add    esp,0x10
c0011d7e:	50                   	push   eax
c0011d7f:	6a 00                	push   0x0
c0011d81:	6a 00                	push   0x0
c0011d83:	ff 33                	push   DWORD PTR [ebx]
c0011d85:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d88:	e8 57 93 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d91:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d94:	57                   	push   edi
c0011d95:	6a 00                	push   0x0
c0011d97:	6a 2b                	push   0x2b
c0011d99:	50                   	push   eax
c0011d9a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d9d:	83 c4 1c             	add    esp,0x1c
c0011da0:	6a 00                	push   0x0
c0011da2:	6a 00                	push   0x0
c0011da4:	ff 33                	push   DWORD PTR [ebx]
c0011da6:	e8 39 93 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011dab:	83 c4 0c             	add    esp,0xc
c0011dae:	6a 08                	push   0x8
c0011db0:	68 22 0a 02 c0       	push   0xc0020a22
c0011db5:	57                   	push   edi
c0011db6:	e8 c5 e5 fe ff       	call   c0000380 <memcmp>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	85 c0                	test   eax,eax
c0011dc0:	74 10                	je     c0011dd2 <CmOpen(char const*)+0x111>
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	68 2b 0a 02 c0       	push   0xc0020a2b
c0011dca:	e8 66 e9 ff ff       	call   c0010735 <KePanic(char const*)>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	89 d8                	mov    eax,ebx
c0011ddb:	5b                   	pop    ebx
c0011ddc:	5e                   	pop    esi
c0011ddd:	5f                   	pop    edi
c0011dde:	c3                   	ret    

c0011ddf <CmClose(Reghive_Tag*)>:
c0011ddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011de7:	74 0b                	je     c0011df4 <CmClose(Reghive_Tag*)+0x15>
c0011de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011deb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011def:	e9 90 92 ff ff       	jmp    c000b084 <File::close()>
c0011df4:	c3                   	ret    

c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011df5:	53                   	push   ebx
c0011df6:	83 ec 18             	sub    esp,0x18
c0011df9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011dfd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e01:	74 29                	je     c0011e2c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e03:	50                   	push   eax
c0011e04:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e09:	99                   	cdq    
c0011e0a:	52                   	push   edx
c0011e0b:	50                   	push   eax
c0011e0c:	ff 33                	push   DWORD PTR [ebx]
c0011e0e:	e8 d1 92 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011e13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e15:	5a                   	pop    edx
c0011e16:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e1c:	51                   	push   ecx
c0011e1d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e21:	6a 00                	push   0x0
c0011e23:	6a 2b                	push   0x2b
c0011e25:	50                   	push   eax
c0011e26:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e29:	83 c4 20             	add    esp,0x20
c0011e2c:	83 c4 18             	add    esp,0x18
c0011e2f:	5b                   	pop    ebx
c0011e30:	c3                   	ret    

c0011e31 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e31:	55                   	push   ebp
c0011e32:	57                   	push   edi
c0011e33:	56                   	push   esi
c0011e34:	53                   	push   ebx
c0011e35:	31 db                	xor    ebx,ebx
c0011e37:	83 ec 70             	sub    esp,0x70
c0011e3a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e3e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e45:	50                   	push   eax
c0011e46:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e4d:	55                   	push   ebp
c0011e4e:	e8 a2 ff ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e5b:	c1 e0 08             	shl    eax,0x8
c0011e5e:	89 c2                	mov    edx,eax
c0011e60:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e65:	09 d0                	or     eax,edx
c0011e67:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e6c:	c1 e0 08             	shl    eax,0x8
c0011e6f:	09 d0                	or     eax,edx
c0011e71:	74 25                	je     c0011e98 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e73:	52                   	push   edx
c0011e74:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e78:	52                   	push   edx
c0011e79:	6b fb 0d             	imul   edi,ebx,0xd
c0011e7c:	50                   	push   eax
c0011e7d:	55                   	push   ebp
c0011e7e:	e8 72 ff ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e83:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e87:	b9 27 00 00 00       	mov    ecx,0x27
c0011e8c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	83 c3 03             	add    ebx,0x3
c0011e9b:	83 fb 15             	cmp    ebx,0x15
c0011e9e:	75 b6                	jne    c0011e56 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ea0:	83 c4 6c             	add    esp,0x6c
c0011ea3:	5b                   	pop    ebx
c0011ea4:	5e                   	pop    esi
c0011ea5:	5f                   	pop    edi
c0011ea6:	5d                   	pop    ebp
c0011ea7:	c3                   	ret    

c0011ea8 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ea8:	83 ec 40             	sub    esp,0x40
c0011eab:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011eaf:	50                   	push   eax
c0011eb0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eb8:	e8 38 ff ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	83 c8 ff             	or     eax,0xffffffff
c0011ec3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ec8:	75 19                	jne    c0011ee3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011eca:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ecf:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ed4:	c1 e0 08             	shl    eax,0x8
c0011ed7:	09 c2                	or     edx,eax
c0011ed9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ede:	c1 e0 10             	shl    eax,0x10
c0011ee1:	09 d0                	or     eax,edx
c0011ee3:	83 c4 3c             	add    esp,0x3c
c0011ee6:	c3                   	ret    

c0011ee7 <CmGetNext(Reghive_Tag*, int)>:
c0011ee7:	83 ec 40             	sub    esp,0x40
c0011eea:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011eee:	50                   	push   eax
c0011eef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ef3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ef7:	e8 f9 fe ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011efc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f01:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f06:	c1 e0 08             	shl    eax,0x8
c0011f09:	09 c2                	or     edx,eax
c0011f0b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f10:	83 c4 4c             	add    esp,0x4c
c0011f13:	c1 e0 10             	shl    eax,0x10
c0011f16:	09 d0                	or     eax,edx
c0011f18:	c3                   	ret    

c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f19:	53                   	push   ebx
c0011f1a:	83 ec 18             	sub    esp,0x18
c0011f1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f21:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f25:	74 29                	je     c0011f50 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f27:	50                   	push   eax
c0011f28:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f2d:	99                   	cdq    
c0011f2e:	52                   	push   edx
c0011f2f:	50                   	push   eax
c0011f30:	ff 33                	push   DWORD PTR [ebx]
c0011f32:	e8 ad 91 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011f37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f39:	5a                   	pop    edx
c0011f3a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f40:	51                   	push   ecx
c0011f41:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f45:	6a 00                	push   0x0
c0011f47:	6a 2b                	push   0x2b
c0011f49:	50                   	push   eax
c0011f4a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f4d:	83 c4 20             	add    esp,0x20
c0011f50:	83 c4 18             	add    esp,0x18
c0011f53:	5b                   	pop    ebx
c0011f54:	c3                   	ret    

c0011f55 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f55:	53                   	push   ebx
c0011f56:	83 ec 3c             	sub    esp,0x3c
c0011f59:	6a 2b                	push   0x2b
c0011f5b:	6a 00                	push   0x0
c0011f5d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f61:	53                   	push   ebx
c0011f62:	e8 89 e5 fe ff       	call   c00004f0 <memset>
c0011f67:	83 c4 0c             	add    esp,0xc
c0011f6a:	53                   	push   ebx
c0011f6b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f73:	e8 a1 ff ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f78:	83 c4 48             	add    esp,0x48
c0011f7b:	5b                   	pop    ebx
c0011f7c:	c3                   	ret    

c0011f7d <CmUpdateHeader(Reghive_Tag*)>:
c0011f7d:	83 ec 0c             	sub    esp,0xc
c0011f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f84:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f88:	74 10                	je     c0011f9a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f8a:	52                   	push   edx
c0011f8b:	8d 50 05             	lea    edx,[eax+0x5]
c0011f8e:	52                   	push   edx
c0011f8f:	6a 00                	push   0x0
c0011f91:	50                   	push   eax
c0011f92:	e8 82 ff ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f97:	83 c4 10             	add    esp,0x10
c0011f9a:	83 c4 0c             	add    esp,0xc
c0011f9d:	c3                   	ret    

c0011f9e <CmExpand(Reghive_Tag*, int)>:
c0011f9e:	55                   	push   ebp
c0011f9f:	57                   	push   edi
c0011fa0:	83 cf ff             	or     edi,0xffffffff
c0011fa3:	56                   	push   esi
c0011fa4:	53                   	push   ebx
c0011fa5:	83 ec 3c             	sub    esp,0x3c
c0011fa8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011fac:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011fb0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fb4:	74 59                	je     c001200f <CmExpand(Reghive_Tag*, int)+0x71>
c0011fb6:	50                   	push   eax
c0011fb7:	31 d2                	xor    edx,edx
c0011fb9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fbd:	31 ff                	xor    edi,edi
c0011fbf:	52                   	push   edx
c0011fc0:	50                   	push   eax
c0011fc1:	ff 33                	push   DWORD PTR [ebx]
c0011fc3:	e8 1c 91 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0011fc8:	83 c4 0c             	add    esp,0xc
c0011fcb:	6a 2b                	push   0x2b
c0011fcd:	6a 00                	push   0x0
c0011fcf:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011fd3:	55                   	push   ebp
c0011fd4:	e8 17 e5 fe ff       	call   c00004f0 <memset>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	39 f7                	cmp    edi,esi
c0011fde:	7d 1b                	jge    c0011ffb <CmExpand(Reghive_Tag*, int)+0x5d>
c0011fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fe2:	83 ec 0c             	sub    esp,0xc
c0011fe5:	47                   	inc    edi
c0011fe6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011fea:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fec:	51                   	push   ecx
c0011fed:	55                   	push   ebp
c0011fee:	6a 00                	push   0x0
c0011ff0:	6a 2b                	push   0x2b
c0011ff2:	50                   	push   eax
c0011ff3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ff6:	83 c4 20             	add    esp,0x20
c0011ff9:	eb e1                	jmp    c0011fdc <CmExpand(Reghive_Tag*, int)+0x3e>
c0011ffb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	01 fe                	add    esi,edi
c0012003:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012006:	53                   	push   ebx
c0012007:	e8 71 ff ff ff       	call   c0011f7d <CmUpdateHeader(Reghive_Tag*)>
c001200c:	83 c4 10             	add    esp,0x10
c001200f:	83 c4 3c             	add    esp,0x3c
c0012012:	89 f8                	mov    eax,edi
c0012014:	5b                   	pop    ebx
c0012015:	5e                   	pop    esi
c0012016:	5f                   	pop    edi
c0012017:	5d                   	pop    ebp
c0012018:	c3                   	ret    

c0012019 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012019:	55                   	push   ebp
c001201a:	57                   	push   edi
c001201b:	56                   	push   esi
c001201c:	53                   	push   ebx
c001201d:	83 cb ff             	or     ebx,0xffffffff
c0012020:	83 ec 1c             	sub    esp,0x1c
c0012023:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012027:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001202b:	74 68                	je     c0012095 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001202d:	51                   	push   ecx
c001202e:	be 2b 00 00 00       	mov    esi,0x2b
c0012033:	6a 00                	push   0x0
c0012035:	31 ff                	xor    edi,edi
c0012037:	6a 00                	push   0x0
c0012039:	31 db                	xor    ebx,ebx
c001203b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001203e:	e8 a1 90 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012049:	76 3b                	jbe    c0012086 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001204b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001204e:	83 ec 0c             	sub    esp,0xc
c0012051:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012055:	8b 10                	mov    edx,DWORD PTR [eax]
c0012057:	51                   	push   ecx
c0012058:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001205c:	51                   	push   ecx
c001205d:	6a 00                	push   0x0
c001205f:	6a 01                	push   0x1
c0012061:	50                   	push   eax
c0012062:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012065:	83 c4 20             	add    esp,0x20
c0012068:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001206d:	74 26                	je     c0012095 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001206f:	52                   	push   edx
c0012070:	43                   	inc    ebx
c0012071:	57                   	push   edi
c0012072:	56                   	push   esi
c0012073:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012076:	e8 69 90 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c001207b:	83 c6 2b             	add    esi,0x2b
c001207e:	83 d7 00             	adc    edi,0x0
c0012081:	83 c4 10             	add    esp,0x10
c0012084:	eb c0                	jmp    c0012046 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012086:	50                   	push   eax
c0012087:	50                   	push   eax
c0012088:	6a 40                	push   0x40
c001208a:	55                   	push   ebp
c001208b:	e8 0e ff ff ff       	call   c0011f9e <CmExpand(Reghive_Tag*, int)>
c0012090:	83 c4 10             	add    esp,0x10
c0012093:	89 c3                	mov    ebx,eax
c0012095:	83 c4 1c             	add    esp,0x1c
c0012098:	89 d8                	mov    eax,ebx
c001209a:	5b                   	pop    ebx
c001209b:	5e                   	pop    esi
c001209c:	5f                   	pop    edi
c001209d:	5d                   	pop    ebp
c001209e:	c3                   	ret    

c001209f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001209f:	55                   	push   ebp
c00120a0:	57                   	push   edi
c00120a1:	56                   	push   esi
c00120a2:	53                   	push   ebx
c00120a3:	81 ec 88 00 00 00    	sub    esp,0x88
c00120a9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120b0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120b7:	e8 5d ff ff ff       	call   c0012019 <CmFindUnusedExtent(Reghive_Tag*)>
c00120bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120c0:	83 c4 0c             	add    esp,0xc
c00120c3:	6a 2b                	push   0x2b
c00120c5:	6a 00                	push   0x0
c00120c7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120cb:	55                   	push   ebp
c00120cc:	e8 1f e4 fe ff       	call   c00004f0 <memset>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	85 db                	test   ebx,ebx
c00120d6:	74 12                	je     c00120ea <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120d8:	51                   	push   ecx
c00120d9:	55                   	push   ebp
c00120da:	53                   	push   ebx
c00120db:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120e2:	e8 0e fd ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120e7:	83 c4 10             	add    esp,0x10
c00120ea:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00120ee:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00120f5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00120fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120fc:	85 db                	test   ebx,ebx
c00120fe:	74 4c                	je     c001214c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c0012100:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012105:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001210a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001210e:	c1 e0 08             	shl    eax,0x8
c0012111:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012117:	09 c8                	or     eax,ecx
c0012119:	0f b6 ca             	movzx  ecx,dl
c001211c:	74 11                	je     c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c001211e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012122:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012126:	c1 e8 10             	shr    eax,0x10
c0012129:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001212d:	eb 0f                	jmp    c001213e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c001212f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012134:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012139:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001213e:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c0012142:	c1 ea 08             	shr    edx,0x8
c0012145:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001214a:	eb 0f                	jmp    c001215b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c001214c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012151:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012156:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001215b:	52                   	push   edx
c001215c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012160:	50                   	push   eax
c0012161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012165:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001216c:	e8 a8 fd ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	85 db                	test   ebx,ebx
c0012176:	74 12                	je     c001218a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012178:	50                   	push   eax
c0012179:	55                   	push   ebp
c001217a:	53                   	push   ebx
c001217b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012182:	e8 92 fd ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012187:	83 c4 10             	add    esp,0x10
c001218a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001218e:	83 c4 7c             	add    esp,0x7c
c0012191:	5b                   	pop    ebx
c0012192:	5e                   	pop    esi
c0012193:	5f                   	pop    edi
c0012194:	5d                   	pop    ebp
c0012195:	c3                   	ret    

c0012196 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012196:	55                   	push   ebp
c0012197:	57                   	push   edi
c0012198:	56                   	push   esi
c0012199:	53                   	push   ebx
c001219a:	bb 27 00 00 00       	mov    ebx,0x27
c001219f:	81 ec 88 00 00 00    	sub    esp,0x88
c00121a5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121ac:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121b3:	e8 d8 e3 fe ff       	call   c0000590 <strlen>
c00121b8:	8d 48 26             	lea    ecx,[eax+0x26]
c00121bb:	89 c8                	mov    eax,ecx
c00121bd:	99                   	cdq    
c00121be:	f7 fb                	idiv   ebx
c00121c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121cd:	7e 10                	jle    c00121df <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121cf:	83 ec 0c             	sub    esp,0xc
c00121d2:	68 3c 0a 02 c0       	push   0xc0020a3c
c00121d7:	e8 59 e5 ff ff       	call   c0010735 <KePanic(char const*)>
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	50                   	push   eax
c00121e0:	31 ff                	xor    edi,edi
c00121e2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121e6:	53                   	push   ebx
c00121e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121ee:	56                   	push   esi
c00121ef:	e8 01 fc ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00121fb:	89 d0                	mov    eax,edx
c00121fd:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012201:	c1 e0 08             	shl    eax,0x8
c0012204:	09 c2                	or     edx,eax
c0012206:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001220a:	c1 e2 08             	shl    edx,0x8
c001220d:	09 c2                	or     edx,eax
c001220f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012213:	7e 76                	jle    c001228b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012215:	85 d2                	test   edx,edx
c0012217:	75 25                	jne    c001223e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012219:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001221e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012222:	50                   	push   eax
c0012223:	6a 00                	push   0x0
c0012225:	6a 00                	push   0x0
c0012227:	56                   	push   esi
c0012228:	e8 72 fe ff ff       	call   c001209f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001222d:	83 c4 10             	add    esp,0x10
c0012230:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012233:	89 c2                	mov    edx,eax
c0012235:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012238:	c1 f8 10             	sar    eax,0x10
c001223b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001223e:	55                   	push   ebp
c001223f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012243:	55                   	push   ebp
c0012244:	52                   	push   edx
c0012245:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012249:	56                   	push   esi
c001224a:	e8 a6 fb ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001224f:	83 c4 0c             	add    esp,0xc
c0012252:	6a 27                	push   0x27
c0012254:	6a 00                	push   0x0
c0012256:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001225a:	51                   	push   ecx
c001225b:	e8 90 e2 fe ff       	call   c00004f0 <memset>
c0012260:	6b c7 27             	imul   eax,edi,0x27
c0012263:	83 c4 0c             	add    esp,0xc
c0012266:	6a 27                	push   0x27
c0012268:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001226f:	50                   	push   eax
c0012270:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012274:	51                   	push   ecx
c0012275:	e8 46 e4 fe ff       	call   c00006c0 <strncpy>
c001227a:	83 c4 0c             	add    esp,0xc
c001227d:	55                   	push   ebp
c001227e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012282:	52                   	push   edx
c0012283:	56                   	push   esi
c0012284:	e8 90 fc ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012289:	eb 19                	jmp    c00122a4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001228b:	85 d2                	test   edx,edx
c001228d:	74 18                	je     c00122a7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001228f:	51                   	push   ecx
c0012290:	51                   	push   ecx
c0012291:	52                   	push   edx
c0012292:	56                   	push   esi
c0012293:	e8 bd fc ff ff       	call   c0011f55 <CmFreeExtent(Reghive_Tag*, int)>
c0012298:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001229c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122a0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122a4:	83 c4 10             	add    esp,0x10
c00122a7:	47                   	inc    edi
c00122a8:	83 c3 03             	add    ebx,0x3
c00122ab:	83 ff 07             	cmp    edi,0x7
c00122ae:	0f 85 43 ff ff ff    	jne    c00121f7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122b4:	50                   	push   eax
c00122b5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122b9:	50                   	push   eax
c00122ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122c1:	56                   	push   esi
c00122c2:	e8 52 fc ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122c7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122cd:	5b                   	pop    ebx
c00122ce:	5e                   	pop    esi
c00122cf:	5f                   	pop    edi
c00122d0:	5d                   	pop    ebp
c00122d1:	c3                   	ret    

c00122d2 <CmGetMatch(char*, char*, bool, bool*)>:
c00122d2:	56                   	push   esi
c00122d3:	53                   	push   ebx
c00122d4:	50                   	push   eax
c00122d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122da:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122de:	74 25                	je     c0012305 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122e0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122e3:	31 db                	xor    ebx,ebx
c00122e5:	50                   	push   eax
c00122e6:	50                   	push   eax
c00122e7:	8d 04 9d 80 1e 02 c0 	lea    eax,[ebx*4-0x3ffde180]
c00122ee:	50                   	push   eax
c00122ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122f3:	e8 b8 e4 fe ff       	call   c00007b0 <strcmp>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	85 c0                	test   eax,eax
c00122fd:	74 2e                	je     c001232d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122ff:	43                   	inc    ebx
c0012300:	83 fb 3f             	cmp    ebx,0x3f
c0012303:	75 e0                	jne    c00122e5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012305:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012308:	31 db                	xor    ebx,ebx
c001230a:	51                   	push   ecx
c001230b:	51                   	push   ecx
c001230c:	8d 04 9d 80 1e 02 c0 	lea    eax,[ebx*4-0x3ffde180]
c0012313:	50                   	push   eax
c0012314:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012318:	e8 93 e4 fe ff       	call   c00007b0 <strcmp>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	85 c0                	test   eax,eax
c0012322:	74 09                	je     c001232d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012324:	43                   	inc    ebx
c0012325:	83 fb 3f             	cmp    ebx,0x3f
c0012328:	75 e0                	jne    c001230a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001232a:	83 cb ff             	or     ebx,0xffffffff
c001232d:	5a                   	pop    edx
c001232e:	89 d8                	mov    eax,ebx
c0012330:	5b                   	pop    ebx
c0012331:	5e                   	pop    esi
c0012332:	c3                   	ret    

c0012333 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012333:	55                   	push   ebp
c0012334:	31 c0                	xor    eax,eax
c0012336:	57                   	push   edi
c0012337:	56                   	push   esi
c0012338:	53                   	push   ebx
c0012339:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001233d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012341:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012345:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c001234a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001234c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001234f:	83 fd 1f             	cmp    ebp,0x1f
c0012352:	7f 08                	jg     c001235c <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c0012354:	d3 e2                	shl    edx,cl
c0012356:	b0 01                	mov    al,0x1
c0012358:	09 17                	or     DWORD PTR [edi],edx
c001235a:	01 33                	add    DWORD PTR [ebx],esi
c001235c:	5b                   	pop    ebx
c001235d:	5e                   	pop    esi
c001235e:	5f                   	pop    edi
c001235f:	5d                   	pop    ebp
c0012360:	c3                   	ret    

c0012361 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012361:	57                   	push   edi
c0012362:	56                   	push   esi
c0012363:	53                   	push   ebx
c0012364:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012368:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001236c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012370:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012374:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012376:	7c 18                	jl     c0012390 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012378:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001237a:	b8 01 00 00 00       	mov    eax,0x1
c001237f:	d3 e0                	shl    eax,cl
c0012381:	fe c8                	dec    al
c0012383:	22 03                	and    al,BYTE PTR [ebx]
c0012385:	d3 ef                	shr    edi,cl
c0012387:	89 3b                	mov    DWORD PTR [ebx],edi
c0012389:	29 0a                	sub    DWORD PTR [edx],ecx
c001238b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001238e:	eb 05                	jmp    c0012395 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012390:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012393:	31 c0                	xor    eax,eax
c0012395:	5b                   	pop    ebx
c0012396:	5e                   	pop    esi
c0012397:	5f                   	pop    edi
c0012398:	c3                   	ret    

c0012399 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012399:	83 ec 40             	sub    esp,0x40
c001239c:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123a0:	50                   	push   eax
c00123a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123a9:	e8 47 fa ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123b2:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123b6:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123ba:	89 10                	mov    DWORD PTR [eax],edx
c00123bc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123bf:	83 c4 4c             	add    esp,0x4c
c00123c2:	c3                   	ret    

c00123c3 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123c3:	55                   	push   ebp
c00123c4:	57                   	push   edi
c00123c5:	56                   	push   esi
c00123c6:	53                   	push   ebx
c00123c7:	83 ec 40             	sub    esp,0x40
c00123ca:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123ce:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123d2:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123d6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123da:	53                   	push   ebx
c00123db:	56                   	push   esi
c00123dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123e0:	e8 10 fa ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123e5:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123e9:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	53                   	push   ebx
c00123f1:	56                   	push   esi
c00123f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123f6:	e8 1e fb ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123fb:	83 c4 4c             	add    esp,0x4c
c00123fe:	5b                   	pop    ebx
c00123ff:	5e                   	pop    esi
c0012400:	5f                   	pop    edi
c0012401:	5d                   	pop    ebp
c0012402:	c3                   	ret    

c0012403 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012403:	55                   	push   ebp
c0012404:	57                   	push   edi
c0012405:	56                   	push   esi
c0012406:	31 f6                	xor    esi,esi
c0012408:	53                   	push   ebx
c0012409:	31 db                	xor    ebx,ebx
c001240b:	83 ec 40             	sub    esp,0x40
c001240e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012416:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001241e:	6a 12                	push   0x12
c0012420:	68 ee 00 00 00       	push   0xee
c0012425:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012429:	e8 c2 e0 fe ff       	call   c00004f0 <memset>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	6a 08                	push   0x8
c0012433:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012437:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001243b:	50                   	push   eax
c001243c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012440:	57                   	push   edi
c0012441:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012445:	55                   	push   ebp
c0012446:	e8 e8 fe ff ff       	call   c0012333 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001244b:	83 c4 10             	add    esp,0x10
c001244e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012452:	50                   	push   eax
c0012453:	6a 06                	push   0x6
c0012455:	57                   	push   edi
c0012456:	55                   	push   ebp
c0012457:	e8 05 ff ff ff       	call   c0012361 <CmGetShift(unsigned int*, int*, int, bool*)>
c001245c:	83 c4 10             	add    esp,0x10
c001245f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012464:	74 07                	je     c001246d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012466:	46                   	inc    esi
c0012467:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001246b:	eb e1                	jmp    c001244e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001246d:	43                   	inc    ebx
c001246e:	83 fb 12             	cmp    ebx,0x12
c0012471:	75 be                	jne    c0012431 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012473:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012477:	31 f6                	xor    esi,esi
c0012479:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001247c:	50                   	push   eax
c001247d:	50                   	push   eax
c001247e:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012483:	46                   	inc    esi
c0012484:	8d 04 85 80 1e 02 c0 	lea    eax,[eax*4-0x3ffde180]
c001248b:	50                   	push   eax
c001248c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012490:	e8 0b e4 fe ff       	call   c00008a0 <strcat>
c0012495:	83 c4 10             	add    esp,0x10
c0012498:	83 fe 18             	cmp    esi,0x18
c001249b:	75 df                	jne    c001247c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001249d:	83 c4 3c             	add    esp,0x3c
c00124a0:	31 c0                	xor    eax,eax
c00124a2:	5b                   	pop    ebx
c00124a3:	5e                   	pop    esi
c00124a4:	5f                   	pop    edi
c00124a5:	5d                   	pop    ebp
c00124a6:	c3                   	ret    

c00124a7 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124a7:	83 ec 40             	sub    esp,0x40
c00124aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124ae:	50                   	push   eax
c00124af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124b7:	e8 39 f9 ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124bc:	58                   	pop    eax
c00124bd:	5a                   	pop    edx
c00124be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124c2:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124c6:	50                   	push   eax
c00124c7:	e8 37 ff ff ff       	call   c0012403 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124cc:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124d1:	83 c4 4c             	add    esp,0x4c
c00124d4:	c3                   	ret    

c00124d5 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124d5:	55                   	push   ebp
c00124d6:	57                   	push   edi
c00124d7:	56                   	push   esi
c00124d8:	53                   	push   ebx
c00124d9:	31 db                	xor    ebx,ebx
c00124db:	83 ec 70             	sub    esp,0x70
c00124de:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124e5:	6a 30                	push   0x30
c00124e7:	6a 00                	push   0x0
c00124e9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124ed:	56                   	push   esi
c00124ee:	e8 fd df fe ff       	call   c00004f0 <memset>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	57                   	push   edi
c00124fa:	e8 91 e0 fe ff       	call   c0000590 <strlen>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	39 d8                	cmp    eax,ebx
c0012504:	76 16                	jbe    c001251c <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012506:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001250a:	83 ec 0c             	sub    esp,0xc
c001250d:	50                   	push   eax
c001250e:	e8 7d e4 fe ff       	call   c0000990 <toupper>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012519:	43                   	inc    ebx
c001251a:	eb da                	jmp    c00124f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001251c:	52                   	push   edx
c001251d:	31 db                	xor    ebx,ebx
c001251f:	6a 18                	push   0x18
c0012521:	31 ff                	xor    edi,edi
c0012523:	6a 3f                	push   0x3f
c0012525:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012529:	50                   	push   eax
c001252a:	e8 c1 df fe ff       	call   c00004f0 <memset>
c001252f:	83 c4 10             	add    esp,0x10
c0012532:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012536:	8d 74 24 10          	lea    esi,[esp+0x10]
c001253a:	84 c0                	test   al,al
c001253c:	0f 84 af 00 00 00    	je     c00125f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012542:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012546:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012551:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012555:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012559:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001255e:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012562:	56                   	push   esi
c0012563:	e8 28 e0 fe ff       	call   c0000590 <strlen>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	85 c0                	test   eax,eax
c001256d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012571:	74 0b                	je     c001257e <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012573:	50                   	push   eax
c0012574:	6a 01                	push   0x1
c0012576:	56                   	push   esi
c0012577:	8d 44 24 20          	lea    eax,[esp+0x20]
c001257b:	50                   	push   eax
c001257c:	eb 0a                	jmp    c0012588 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001257e:	50                   	push   eax
c001257f:	6a 00                	push   0x0
c0012581:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012585:	50                   	push   eax
c0012586:	6a 00                	push   0x0
c0012588:	e8 45 fd ff ff       	call   c00122d2 <CmGetMatch(char*, char*, bool, bool*)>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 f8 ff             	cmp    eax,0xffffffff
c0012593:	75 1a                	jne    c00125af <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	68 51 0a 02 c0       	push   0xc0020a51
c001259d:	e8 93 e1 ff ff       	call   c0010735 <KePanic(char const*)>
c00125a2:	83 c4 10             	add    esp,0x10
c00125a5:	b8 02 00 00 00       	mov    eax,0x2
c00125aa:	e9 bb 00 00 00       	jmp    c001266a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125af:	83 ff 18             	cmp    edi,0x18
c00125b2:	75 1a                	jne    c00125ce <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125b4:	83 ec 0c             	sub    esp,0xc
c00125b7:	68 66 0a 02 c0       	push   0xc0020a66
c00125bc:	e8 74 e1 ff ff       	call   c0010735 <KePanic(char const*)>
c00125c1:	83 c4 10             	add    esp,0x10
c00125c4:	b8 01 00 00 00       	mov    eax,0x1
c00125c9:	e9 9c 00 00 00       	jmp    c001266a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125ce:	47                   	inc    edi
c00125cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125d4:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125d8:	0f 45 dd             	cmovne ebx,ebp
c00125db:	83 ec 0c             	sub    esp,0xc
c00125de:	56                   	push   esi
c00125df:	e8 ac df fe ff       	call   c0000590 <strlen>
c00125e4:	83 c4 10             	add    esp,0x10
c00125e7:	85 c0                	test   eax,eax
c00125e9:	74 06                	je     c00125f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125eb:	43                   	inc    ebx
c00125ec:	e9 41 ff ff ff       	jmp    c0012532 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00125f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125f9:	31 db                	xor    ebx,ebx
c00125fb:	31 ff                	xor    edi,edi
c00125fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012605:	50                   	push   eax
c0012606:	6a 12                	push   0x12
c0012608:	68 ee 00 00 00       	push   0xee
c001260d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012614:	e8 d7 de fe ff       	call   c00004f0 <memset>
c0012619:	83 c4 10             	add    esp,0x10
c001261c:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012620:	83 fb 17             	cmp    ebx,0x17
c0012623:	7e 26                	jle    c001264b <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012625:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012629:	50                   	push   eax
c001262a:	6a 08                	push   0x8
c001262c:	55                   	push   ebp
c001262d:	56                   	push   esi
c001262e:	e8 2e fd ff ff       	call   c0012361 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001263b:	74 26                	je     c0012663 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001263d:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012644:	4b                   	dec    ebx
c0012645:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012648:	47                   	inc    edi
c0012649:	eb 1c                	jmp    c0012667 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001264b:	6a 06                	push   0x6
c001264d:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012652:	50                   	push   eax
c0012653:	55                   	push   ebp
c0012654:	56                   	push   esi
c0012655:	e8 d9 fc ff ff       	call   c0012333 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	84 c0                	test   al,al
c001265f:	75 06                	jne    c0012667 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012661:	eb c2                	jmp    c0012625 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012663:	31 c0                	xor    eax,eax
c0012665:	eb 03                	jmp    c001266a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012667:	43                   	inc    ebx
c0012668:	eb b2                	jmp    c001261c <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001266a:	83 c4 6c             	add    esp,0x6c
c001266d:	5b                   	pop    ebx
c001266e:	5e                   	pop    esi
c001266f:	5f                   	pop    edi
c0012670:	5d                   	pop    ebp
c0012671:	c3                   	ret    

c0012672 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012672:	53                   	push   ebx
c0012673:	83 ec 3c             	sub    esp,0x3c
c0012676:	6a 2b                	push   0x2b
c0012678:	6a 00                	push   0x0
c001267a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001267e:	53                   	push   ebx
c001267f:	e8 6c de fe ff       	call   c00004f0 <memset>
c0012684:	58                   	pop    eax
c0012685:	5a                   	pop    edx
c0012686:	8d 44 24 11          	lea    eax,[esp+0x11]
c001268a:	50                   	push   eax
c001268b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001268f:	e8 41 fe ff ff       	call   c00124d5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012694:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012699:	83 c4 0c             	add    esp,0xc
c001269c:	6a 15                	push   0x15
c001269e:	6a 00                	push   0x0
c00126a0:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126a4:	50                   	push   eax
c00126a5:	e8 46 de fe ff       	call   c00004f0 <memset>
c00126aa:	53                   	push   ebx
c00126ab:	6a 00                	push   0x0
c00126ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126b5:	e8 e5 f9 ff ff       	call   c001209f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126ba:	83 c4 58             	add    esp,0x58
c00126bd:	5b                   	pop    ebx
c00126be:	c3                   	ret    

c00126bf <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126bf:	56                   	push   esi
c00126c0:	53                   	push   ebx
c00126c1:	83 ec 48             	sub    esp,0x48
c00126c4:	6a 12                	push   0x12
c00126c6:	68 ff 00 00 00       	push   0xff
c00126cb:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126cf:	56                   	push   esi
c00126d0:	e8 1b de fe ff       	call   c00004f0 <memset>
c00126d5:	5a                   	pop    edx
c00126d6:	59                   	pop    ecx
c00126d7:	56                   	push   esi
c00126d8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126dc:	e8 f4 fd ff ff       	call   c00124d5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126e1:	83 c4 10             	add    esp,0x10
c00126e4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126e8:	85 db                	test   ebx,ebx
c00126ea:	74 42                	je     c001272e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126ec:	50                   	push   eax
c00126ed:	8d 44 24 19          	lea    eax,[esp+0x19]
c00126f1:	50                   	push   eax
c00126f2:	53                   	push   ebx
c00126f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126f7:	e8 f9 f6 ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126fc:	83 c4 0c             	add    esp,0xc
c00126ff:	6a 12                	push   0x12
c0012701:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012705:	50                   	push   eax
c0012706:	56                   	push   esi
c0012707:	e8 74 dc fe ff       	call   c0000380 <memcmp>
c001270c:	83 c4 10             	add    esp,0x10
c001270f:	85 c0                	test   eax,eax
c0012711:	74 1e                	je     c0012731 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012713:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012718:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001271d:	c1 e3 08             	shl    ebx,0x8
c0012720:	09 d8                	or     eax,ebx
c0012722:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012727:	c1 e3 10             	shl    ebx,0x10
c001272a:	09 c3                	or     ebx,eax
c001272c:	eb ba                	jmp    c00126e8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001272e:	83 cb ff             	or     ebx,0xffffffff
c0012731:	83 c4 44             	add    esp,0x44
c0012734:	89 d8                	mov    eax,ebx
c0012736:	5b                   	pop    ebx
c0012737:	5e                   	pop    esi
c0012738:	c3                   	ret    

c0012739 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012739:	57                   	push   edi
c001273a:	56                   	push   esi
c001273b:	53                   	push   ebx
c001273c:	83 ec 34             	sub    esp,0x34
c001273f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012743:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012747:	6a 2b                	push   0x2b
c0012749:	6a 00                	push   0x0
c001274b:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001274f:	53                   	push   ebx
c0012750:	e8 9b dd fe ff       	call   c00004f0 <memset>
c0012755:	58                   	pop    eax
c0012756:	5a                   	pop    edx
c0012757:	8d 44 24 11          	lea    eax,[esp+0x11]
c001275b:	50                   	push   eax
c001275c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012760:	e8 70 fd ff ff       	call   c00124d5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012765:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012769:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001276d:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012771:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012775:	53                   	push   ebx
c0012776:	6a 00                	push   0x0
c0012778:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001277c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012780:	e8 1a f9 ff ff       	call   c001209f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012785:	83 c4 50             	add    esp,0x50
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	c3                   	ret    

c001278c <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001278c:	55                   	push   ebp
c001278d:	57                   	push   edi
c001278e:	56                   	push   esi
c001278f:	53                   	push   ebx
c0012790:	83 ec 40             	sub    esp,0x40
c0012793:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012797:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001279b:	6a 2b                	push   0x2b
c001279d:	6a 00                	push   0x0
c001279f:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127a3:	56                   	push   esi
c00127a4:	e8 47 dd fe ff       	call   c00004f0 <memset>
c00127a9:	5f                   	pop    edi
c00127aa:	89 ef                	mov    edi,ebp
c00127ac:	58                   	pop    eax
c00127ad:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127b1:	50                   	push   eax
c00127b2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127b6:	e8 1a fd ff ff       	call   c00124d5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127bb:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127c0:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127c5:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127ca:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	85 ed                	test   ebp,ebp
c00127d4:	74 14                	je     c00127ea <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127d6:	51                   	push   ecx
c00127d7:	51                   	push   ecx
c00127d8:	57                   	push   edi
c00127d9:	53                   	push   ebx
c00127da:	e8 08 f7 ff ff       	call   c0011ee7 <CmGetNext(Reghive_Tag*, int)>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	85 c0                	test   eax,eax
c00127e4:	74 04                	je     c00127ea <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127e6:	89 c7                	mov    edi,eax
c00127e8:	eb e8                	jmp    c00127d2 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127ea:	56                   	push   esi
c00127eb:	6a 00                	push   0x0
c00127ed:	57                   	push   edi
c00127ee:	53                   	push   ebx
c00127ef:	e8 ab f8 ff ff       	call   c001209f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127f4:	83 c4 0c             	add    esp,0xc
c00127f7:	56                   	push   esi
c00127f8:	50                   	push   eax
c00127f9:	89 c7                	mov    edi,eax
c00127fb:	53                   	push   ebx
c00127fc:	e8 f4 f5 ff ff       	call   c0011df5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012801:	58                   	pop    eax
c0012802:	5a                   	pop    edx
c0012803:	6a 6c                	push   0x6c
c0012805:	6a 00                	push   0x0
c0012807:	6a 00                	push   0x0
c0012809:	68 77 0a 02 c0       	push   0xc0020a77
c001280e:	57                   	push   edi
c001280f:	53                   	push   ebx
c0012810:	e8 24 ff ff ff       	call   c0012739 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012815:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012819:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001281d:	c1 e8 10             	shr    eax,0x10
c0012820:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012824:	83 c4 1c             	add    esp,0x1c
c0012827:	56                   	push   esi
c0012828:	57                   	push   edi
c0012829:	53                   	push   ebx
c001282a:	e8 ea f6 ff ff       	call   c0011f19 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001282f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012834:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012839:	c1 e0 08             	shl    eax,0x8
c001283c:	09 c2                	or     edx,eax
c001283e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012843:	83 c4 4c             	add    esp,0x4c
c0012846:	5b                   	pop    ebx
c0012847:	5e                   	pop    esi
c0012848:	c1 e0 10             	shl    eax,0x10
c001284b:	09 d0                	or     eax,edx
c001284d:	5f                   	pop    edi
c001284e:	5d                   	pop    ebp
c001284f:	c3                   	ret    

c0012850 <zStrtok(char*, char const*)>:
c0012850:	57                   	push   edi
c0012851:	56                   	push   esi
c0012852:	53                   	push   ebx
c0012853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285b:	85 f6                	test   esi,esi
c001285d:	74 2b                	je     c001288a <zStrtok(char*, char const*)+0x3a>
c001285f:	85 c0                	test   eax,eax
c0012861:	75 09                	jne    c001286c <zStrtok(char*, char const*)+0x1c>
c0012863:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012868:	85 c0                	test   eax,eax
c001286a:	74 49                	je     c00128b5 <zStrtok(char*, char const*)+0x65>
c001286c:	31 c9                	xor    ecx,ecx
c001286e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012872:	74 03                	je     c0012877 <zStrtok(char*, char const*)+0x27>
c0012874:	41                   	inc    ecx
c0012875:	eb f7                	jmp    c001286e <zStrtok(char*, char const*)+0x1e>
c0012877:	31 d2                	xor    edx,edx
c0012879:	39 ca                	cmp    edx,ecx
c001287b:	74 11                	je     c001288e <zStrtok(char*, char const*)+0x3e>
c001287d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001287f:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012882:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012885:	74 13                	je     c001289a <zStrtok(char*, char const*)+0x4a>
c0012887:	42                   	inc    edx
c0012888:	eb ef                	jmp    c0012879 <zStrtok(char*, char const*)+0x29>
c001288a:	31 c0                	xor    eax,eax
c001288c:	eb 27                	jmp    c00128b5 <zStrtok(char*, char const*)+0x65>
c001288e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012898:	eb 1b                	jmp    c00128b5 <zStrtok(char*, char const*)+0x65>
c001289a:	3a 18                	cmp    bl,BYTE PTR [eax]
c001289c:	75 0a                	jne    c00128a8 <zStrtok(char*, char const*)+0x58>
c001289e:	40                   	inc    eax
c001289f:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128a4:	89 f0                	mov    eax,esi
c00128a6:	eb 0d                	jmp    c00128b5 <zStrtok(char*, char const*)+0x65>
c00128a8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128ab:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128af:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128b5:	5b                   	pop    ebx
c00128b6:	5e                   	pop    esi
c00128b7:	5f                   	pop    edi
c00128b8:	c3                   	ret    

c00128b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128b9:	57                   	push   edi
c00128ba:	56                   	push   esi
c00128bb:	53                   	push   ebx
c00128bc:	81 ec 08 01 00 00    	sub    esp,0x108
c00128c2:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128c9:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128d0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128d4:	53                   	push   ebx
c00128d5:	e8 b6 dd fe ff       	call   c0000690 <strcpy>
c00128da:	59                   	pop    ecx
c00128db:	5e                   	pop    esi
c00128dc:	68 db 0d 02 c0       	push   0xc0020ddb
c00128e1:	53                   	push   ebx
c00128e2:	bb 01 00 00 00       	mov    ebx,0x1
c00128e7:	e8 64 ff ff ff       	call   c0012850 <zStrtok(char*, char const*)>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	85 c0                	test   eax,eax
c00128f1:	74 3b                	je     c001292e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128f3:	52                   	push   edx
c00128f4:	50                   	push   eax
c00128f5:	6a 01                	push   0x1
c00128f7:	57                   	push   edi
c00128f8:	e8 c2 fd ff ff       	call   c00126bf <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00128fd:	59                   	pop    ecx
c00128fe:	5e                   	pop    esi
c00128ff:	89 c3                	mov    ebx,eax
c0012901:	68 db 0d 02 c0       	push   0xc0020ddb
c0012906:	6a 00                	push   0x0
c0012908:	e8 43 ff ff ff       	call   c0012850 <zStrtok(char*, char const*)>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	85 c0                	test   eax,eax
c0012912:	89 c6                	mov    esi,eax
c0012914:	74 18                	je     c001292e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012916:	52                   	push   edx
c0012917:	52                   	push   edx
c0012918:	53                   	push   ebx
c0012919:	57                   	push   edi
c001291a:	e8 89 f5 ff ff       	call   c0011ea8 <CmEnterDirectory(Reghive_Tag*, int)>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	83 f8 ff             	cmp    eax,0xffffffff
c0012925:	89 c3                	mov    ebx,eax
c0012927:	74 05                	je     c001292e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012929:	50                   	push   eax
c001292a:	56                   	push   esi
c001292b:	53                   	push   ebx
c001292c:	eb c9                	jmp    c00128f7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001292e:	81 c4 00 01 00 00    	add    esp,0x100
c0012934:	89 d8                	mov    eax,ebx
c0012936:	5b                   	pop    ebx
c0012937:	5e                   	pop    esi
c0012938:	5f                   	pop    edi
c0012939:	c3                   	ret    

c001293a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001293a:	55                   	push   ebp
c001293b:	57                   	push   edi
c001293c:	56                   	push   esi
c001293d:	53                   	push   ebx
c001293e:	83 ec 5c             	sub    esp,0x5c
c0012941:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012945:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012949:	85 db                	test   ebx,ebx
c001294b:	0f 8e 84 00 00 00    	jle    c00129d5 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012951:	57                   	push   edi
c0012952:	31 ed                	xor    ebp,ebp
c0012954:	6a 32                	push   0x32
c0012956:	6a 00                	push   0x0
c0012958:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001295c:	57                   	push   edi
c001295d:	e8 8e db fe ff       	call   c00004f0 <memset>
c0012962:	83 c4 0c             	add    esp,0xc
c0012965:	57                   	push   edi
c0012966:	53                   	push   ebx
c0012967:	56                   	push   esi
c0012968:	e8 3a fb ff ff       	call   c00124a7 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001296d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012978:	7d 13                	jge    c001298d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001297a:	83 ec 0c             	sub    esp,0xc
c001297d:	45                   	inc    ebp
c001297e:	68 48 11 02 c0       	push   0xc0021148
c0012983:	e8 5e 80 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0012988:	83 c4 10             	add    esp,0x10
c001298b:	eb e7                	jmp    c0012974 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001298d:	51                   	push   ecx
c001298e:	57                   	push   edi
c001298f:	53                   	push   ebx
c0012990:	68 7d 0a 02 c0       	push   0xc0020a7d
c0012995:	e8 4c 80 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001299a:	83 c4 10             	add    esp,0x10
c001299d:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129a2:	75 1e                	jne    c00129c2 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129a4:	52                   	push   edx
c00129a5:	52                   	push   edx
c00129a6:	53                   	push   ebx
c00129a7:	56                   	push   esi
c00129a8:	e8 fb f4 ff ff       	call   c0011ea8 <CmEnterDirectory(Reghive_Tag*, int)>
c00129ad:	83 c4 0c             	add    esp,0xc
c00129b0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129b4:	8d 51 04             	lea    edx,[ecx+0x4]
c00129b7:	52                   	push   edx
c00129b8:	50                   	push   eax
c00129b9:	56                   	push   esi
c00129ba:	e8 7b ff ff ff       	call   c001293a <CmDisplayTree(Reghive_Tag*, int, int)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	50                   	push   eax
c00129c3:	50                   	push   eax
c00129c4:	53                   	push   ebx
c00129c5:	56                   	push   esi
c00129c6:	e8 1c f5 ff ff       	call   c0011ee7 <CmGetNext(Reghive_Tag*, int)>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	89 c3                	mov    ebx,eax
c00129d0:	e9 74 ff ff ff       	jmp    c0012949 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129d5:	83 c4 5c             	add    esp,0x5c
c00129d8:	5b                   	pop    ebx
c00129d9:	5e                   	pop    esi
c00129da:	5f                   	pop    edi
c00129db:	5d                   	pop    ebp
c00129dc:	c3                   	ret    

c00129dd <CmSplitFinalSlashInPlace(char*)>:
c00129dd:	53                   	push   ebx
c00129de:	83 ec 14             	sub    esp,0x14
c00129e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00129e5:	53                   	push   ebx
c00129e6:	e8 a5 db fe ff       	call   c0000590 <strlen>
c00129eb:	83 c4 10             	add    esp,0x10
c00129ee:	48                   	dec    eax
c00129ef:	85 c0                	test   eax,eax
c00129f1:	74 15                	je     c0012a08 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00129f3:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129f7:	8d 14 03             	lea    edx,[ebx+eax*1]
c00129fa:	75 09                	jne    c0012a05 <CmSplitFinalSlashInPlace(char*)+0x28>
c00129fc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00129ff:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a03:	eb 05                	jmp    c0012a0a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a05:	48                   	dec    eax
c0012a06:	eb e7                	jmp    c00129ef <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a08:	31 c0                	xor    eax,eax
c0012a0a:	83 c4 08             	add    esp,0x8
c0012a0d:	5b                   	pop    ebx
c0012a0e:	c3                   	ret    

c0012a0f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a0f:	55                   	push   ebp
c0012a10:	57                   	push   edi
c0012a11:	56                   	push   esi
c0012a12:	53                   	push   ebx
c0012a13:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a19:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012a20:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012a22:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012a25:	80 fb 40             	cmp    bl,0x40
c0012a28:	75 19                	jne    c0012a43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0012a2a:	8a 06                	mov    al,BYTE PTR [esi]
c0012a2c:	84 c0                	test   al,al
c0012a2e:	74 07                	je     c0012a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012a30:	3c 3a                	cmp    al,0x3a
c0012a32:	74 03                	je     c0012a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012a34:	46                   	inc    esi
c0012a35:	eb f3                	jmp    c0012a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012a37:	84 c0                	test   al,al
c0012a39:	0f 84 2b 01 00 00    	je     c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a3f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a42:	46                   	inc    esi
c0012a43:	50                   	push   eax
c0012a44:	6a 40                	push   0x40
c0012a46:	6a 00                	push   0x0
c0012a48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a4c:	50                   	push   eax
c0012a4d:	e8 9e da fe ff       	call   c00004f0 <memset>
c0012a52:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a59:	31 d2                	xor    edx,edx
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	8a 07                	mov    al,BYTE PTR [edi]
c0012a60:	84 c0                	test   al,al
c0012a62:	0f 84 02 01 00 00    	je     c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a68:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0012a6e:	0f 8f f6 00 00 00    	jg     c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a74:	3c 0a                	cmp    al,0xa
c0012a76:	0f 85 df 00 00 00    	jne    c0012b5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0012a7c:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0012a81:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012a85:	a8 df                	test   al,0xdf
c0012a87:	0f 94 c1             	sete   cl
c0012a8a:	3c 23                	cmp    al,0x23
c0012a8c:	0f 94 c2             	sete   dl
c0012a8f:	08 d1                	or     cl,dl
c0012a91:	75 50                	jne    c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a93:	88 c2                	mov    dl,al
c0012a95:	80 ea 09             	sub    dl,0x9
c0012a98:	80 fa 01             	cmp    dl,0x1
c0012a9b:	76 46                	jbe    c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a9d:	3c 5b                	cmp    al,0x5b
c0012a9f:	75 46                	jne    c0012ae7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c0012aa1:	80 fb 40             	cmp    bl,0x40
c0012aa4:	75 3d                	jne    c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012aa6:	83 ec 0c             	sub    esp,0xc
c0012aa9:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012aad:	52                   	push   edx
c0012aae:	e8 dd da fe ff       	call   c0000590 <strlen>
c0012ab3:	83 c4 10             	add    esp,0x10
c0012ab6:	83 f8 3f             	cmp    eax,0x3f
c0012ab9:	0f 87 ab 00 00 00    	ja     c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012abf:	50                   	push   eax
c0012ac0:	50                   	push   eax
c0012ac1:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012ac5:	52                   	push   edx
c0012ac6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012aca:	52                   	push   edx
c0012acb:	e8 c0 db fe ff       	call   c0000690 <strcpy>
c0012ad0:	58                   	pop    eax
c0012ad1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012ad5:	52                   	push   edx
c0012ad6:	e8 b5 da fe ff       	call   c0000590 <strlen>
c0012adb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	31 c9                	xor    ecx,ecx
c0012ae5:	eb 7b                	jmp    c0012b62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0012ae7:	80 fb 40             	cmp    bl,0x40
c0012aea:	74 06                	je     c0012af2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c0012aec:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012af0:	eb 16                	jmp    c0012b08 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012af2:	51                   	push   ecx
c0012af3:	51                   	push   ecx
c0012af4:	55                   	push   ebp
c0012af5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012af9:	50                   	push   eax
c0012afa:	e8 b1 dc fe ff       	call   c00007b0 <strcmp>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	85 c0                	test   eax,eax
c0012b04:	75 dd                	jne    c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b06:	eb e4                	jmp    c0012aec <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0012b08:	8a 02                	mov    al,BYTE PTR [edx]
c0012b0a:	84 c0                	test   al,al
c0012b0c:	0f 94 c1             	sete   cl
c0012b0f:	3c 3d                	cmp    al,0x3d
c0012b11:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0012b16:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0012b1a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012b1e:	75 03                	jne    c0012b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c0012b20:	42                   	inc    edx
c0012b21:	eb e5                	jmp    c0012b08 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012b23:	84 c0                	test   al,al
c0012b25:	74 43                	je     c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b2b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b2e:	52                   	push   edx
c0012b2f:	52                   	push   edx
c0012b30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b34:	50                   	push   eax
c0012b35:	56                   	push   esi
c0012b36:	e8 75 dc fe ff       	call   c00007b0 <strcmp>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b42:	85 c0                	test   eax,eax
c0012b44:	75 9d                	jne    c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b46:	50                   	push   eax
c0012b47:	42                   	inc    edx
c0012b48:	50                   	push   eax
c0012b49:	52                   	push   edx
c0012b4a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b51:	e8 3a db fe ff       	call   c0000690 <strcpy>
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	eb 14                	jmp    c0012b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0012b5b:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0012b5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012b62:	47                   	inc    edi
c0012b63:	89 ca                	mov    edx,ecx
c0012b65:	e9 f4 fe ff ff       	jmp    c0012a5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0012b6a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012b6f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012b73:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b79:	5b                   	pop    ebx
c0012b7a:	5e                   	pop    esi
c0012b7b:	5f                   	pop    edi
c0012b7c:	5d                   	pop    ebp
c0012b7d:	c3                   	ret    

c0012b7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b7e:	57                   	push   edi
c0012b7f:	56                   	push   esi
c0012b80:	53                   	push   ebx
c0012b81:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b87:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b8e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b95:	53                   	push   ebx
c0012b96:	e8 f5 d9 fe ff       	call   c0000590 <strlen>
c0012b9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b9e:	89 c7                	mov    edi,eax
c0012ba0:	e8 eb d9 fe ff       	call   c0000590 <strlen>
c0012ba5:	83 c4 10             	add    esp,0x10
c0012ba8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bac:	3d ff 00 00 00       	cmp    eax,0xff
c0012bb1:	0f 87 d3 00 00 00    	ja     c0012c8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bb7:	57                   	push   edi
c0012bb8:	57                   	push   edi
c0012bb9:	56                   	push   esi
c0012bba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bbe:	56                   	push   esi
c0012bbf:	e8 cc da fe ff       	call   c0000690 <strcpy>
c0012bc4:	58                   	pop    eax
c0012bc5:	5a                   	pop    edx
c0012bc6:	68 db 0d 02 c0       	push   0xc0020ddb
c0012bcb:	56                   	push   esi
c0012bcc:	e8 cf dc fe ff       	call   c00008a0 <strcat>
c0012bd1:	59                   	pop    ecx
c0012bd2:	5f                   	pop    edi
c0012bd3:	53                   	push   ebx
c0012bd4:	56                   	push   esi
c0012bd5:	e8 c6 dc fe ff       	call   c00008a0 <strcat>
c0012bda:	58                   	pop    eax
c0012bdb:	5a                   	pop    edx
c0012bdc:	68 87 0a 02 c0       	push   0xc0020a87
c0012be1:	56                   	push   esi
c0012be2:	e8 b9 dc fe ff       	call   c00008a0 <strcat>
c0012be7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bee:	e8 73 4e ff ff       	call   c0007a66 <malloc>
c0012bf3:	83 c4 0c             	add    esp,0xc
c0012bf6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012bfc:	56                   	push   esi
c0012bfd:	50                   	push   eax
c0012bfe:	89 c3                	mov    ebx,eax
c0012c00:	e8 63 83 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	85 db                	test   ebx,ebx
c0012c0a:	74 7e                	je     c0012c8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c0c:	51                   	push   ecx
c0012c0d:	51                   	push   ecx
c0012c0e:	6a 01                	push   0x1
c0012c10:	53                   	push   ebx
c0012c11:	e8 10 84 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	85 c0                	test   eax,eax
c0012c1b:	74 08                	je     c0012c25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c22:	53                   	push   ebx
c0012c23:	eb 5f                	jmp    c0012c84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c25:	52                   	push   edx
c0012c26:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c2a:	50                   	push   eax
c0012c2b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c2f:	50                   	push   eax
c0012c30:	53                   	push   ebx
c0012c31:	e8 96 86 ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0012c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	89 c1                	mov    ecx,eax
c0012c3f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c43:	74 31                	je     c0012c76 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c45:	83 ec 0c             	sub    esp,0xc
c0012c48:	50                   	push   eax
c0012c49:	e8 18 4e ff ff       	call   c0007a66 <malloc>
c0012c4e:	89 c6                	mov    esi,eax
c0012c50:	58                   	pop    eax
c0012c51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c53:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c57:	52                   	push   edx
c0012c58:	56                   	push   esi
c0012c59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c61:	53                   	push   ebx
c0012c62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c65:	83 c4 20             	add    esp,0x20
c0012c68:	85 c0                	test   eax,eax
c0012c6a:	75 0a                	jne    c0012c76 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c70:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c74:	74 18                	je     c0012c8e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c76:	83 ec 0c             	sub    esp,0xc
c0012c79:	53                   	push   ebx
c0012c7a:	e8 05 84 ff ff       	call   c000b084 <File::close()>
c0012c7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	31 c0                	xor    eax,eax
c0012c8c:	eb 3b                	jmp    c0012cc9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c8e:	83 ec 0c             	sub    esp,0xc
c0012c91:	53                   	push   ebx
c0012c92:	e8 ed 83 ff ff       	call   c000b084 <File::close()>
c0012c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c9f:	83 c4 0c             	add    esp,0xc
c0012ca2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ca9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cb0:	56                   	push   esi
c0012cb1:	e8 59 fd ff ff       	call   c0012a0f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cb6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cbd:	e8 b7 4d ff ff       	call   c0007a79 <free>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012cc9:	81 c4 20 01 00 00    	add    esp,0x120
c0012ccf:	5b                   	pop    ebx
c0012cd0:	5e                   	pop    esi
c0012cd1:	5f                   	pop    edi
c0012cd2:	c3                   	ret    

c0012cd3 <Reg::getLine(char*, char*, char*)>:
c0012cd3:	57                   	push   edi
c0012cd4:	56                   	push   esi
c0012cd5:	53                   	push   ebx
c0012cd6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012cda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012cde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ce2:	57                   	push   edi
c0012ce3:	56                   	push   esi
c0012ce4:	53                   	push   ebx
c0012ce5:	68 8c 0a 02 c0       	push   0xc0020a8c
c0012cea:	e8 8f fe ff ff       	call   c0012b7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	84 c0                	test   al,al
c0012cf4:	75 10                	jne    c0012d06 <Reg::getLine(char*, char*, char*)+0x33>
c0012cf6:	57                   	push   edi
c0012cf7:	56                   	push   esi
c0012cf8:	53                   	push   ebx
c0012cf9:	68 b1 0a 02 c0       	push   0xc0020ab1
c0012cfe:	e8 7b fe ff ff       	call   c0012b7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	5b                   	pop    ebx
c0012d07:	5e                   	pop    esi
c0012d08:	5f                   	pop    edi
c0012d09:	c3                   	ret    

c0012d0a <Reg::readInt(char*, char*, int*)>:
c0012d0a:	55                   	push   ebp
c0012d0b:	57                   	push   edi
c0012d0c:	56                   	push   esi
c0012d0d:	53                   	push   ebx
c0012d0e:	81 ec e0 00 00 00    	sub    esp,0xe0
c0012d14:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d18:	56                   	push   esi
c0012d19:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012d20:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012d27:	e8 a7 ff ff ff       	call   c0012cd3 <Reg::getLine(char*, char*, char*)>
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	84 c0                	test   al,al
c0012d31:	0f 84 a4 00 00 00    	je     c0012ddb <Reg::readInt(char*, char*, int*)+0xd1>
c0012d37:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012d3b:	80 fa 2b             	cmp    dl,0x2b
c0012d3e:	74 0c                	je     c0012d4c <Reg::readInt(char*, char*, int*)+0x42>
c0012d40:	80 fa 2d             	cmp    dl,0x2d
c0012d43:	75 0e                	jne    c0012d53 <Reg::readInt(char*, char*, int*)+0x49>
c0012d45:	ba 01 00 00 00       	mov    edx,0x1
c0012d4a:	eb 0b                	jmp    c0012d57 <Reg::readInt(char*, char*, int*)+0x4d>
c0012d4c:	ba 01 00 00 00       	mov    edx,0x1
c0012d51:	eb 02                	jmp    c0012d55 <Reg::readInt(char*, char*, int*)+0x4b>
c0012d53:	31 d2                	xor    edx,edx
c0012d55:	31 c0                	xor    eax,eax
c0012d57:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0012d5c:	bf 0a 00 00 00       	mov    edi,0xa
c0012d61:	75 20                	jne    c0012d83 <Reg::readInt(char*, char*, int*)+0x79>
c0012d63:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0012d67:	80 f9 78             	cmp    cl,0x78
c0012d6a:	75 0a                	jne    c0012d76 <Reg::readInt(char*, char*, int*)+0x6c>
c0012d6c:	83 c2 02             	add    edx,0x2
c0012d6f:	bf 10 00 00 00       	mov    edi,0x10
c0012d74:	eb 0d                	jmp    c0012d83 <Reg::readInt(char*, char*, int*)+0x79>
c0012d76:	80 f9 62             	cmp    cl,0x62
c0012d79:	75 08                	jne    c0012d83 <Reg::readInt(char*, char*, int*)+0x79>
c0012d7b:	83 c2 02             	add    edx,0x2
c0012d7e:	bf 02 00 00 00       	mov    edi,0x2
c0012d83:	01 d6                	add    esi,edx
c0012d85:	31 ed                	xor    ebp,ebp
c0012d87:	8a 0e                	mov    cl,BYTE PTR [esi]
c0012d89:	84 c9                	test   cl,cl
c0012d8b:	0f 94 c2             	sete   dl
c0012d8e:	80 f9 0d             	cmp    cl,0xd
c0012d91:	0f 94 c3             	sete   bl
c0012d94:	08 d3                	or     bl,dl
c0012d96:	75 32                	jne    c0012dca <Reg::readInt(char*, char*, int*)+0xc0>
c0012d98:	89 ea                	mov    edx,ebp
c0012d9a:	0f be e9             	movsx  ebp,cl
c0012d9d:	0f af d7             	imul   edx,edi
c0012da0:	83 ff 10             	cmp    edi,0x10
c0012da3:	75 1e                	jne    c0012dc3 <Reg::readInt(char*, char*, int*)+0xb9>
c0012da5:	88 cb                	mov    bl,cl
c0012da7:	80 eb 41             	sub    bl,0x41
c0012daa:	80 fb 05             	cmp    bl,0x5
c0012dad:	77 06                	ja     c0012db5 <Reg::readInt(char*, char*, int*)+0xab>
c0012daf:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c0012db3:	eb 12                	jmp    c0012dc7 <Reg::readInt(char*, char*, int*)+0xbd>
c0012db5:	80 e9 61             	sub    cl,0x61
c0012db8:	80 f9 05             	cmp    cl,0x5
c0012dbb:	77 06                	ja     c0012dc3 <Reg::readInt(char*, char*, int*)+0xb9>
c0012dbd:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c0012dc1:	eb 04                	jmp    c0012dc7 <Reg::readInt(char*, char*, int*)+0xbd>
c0012dc3:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c0012dc7:	46                   	inc    esi
c0012dc8:	eb bd                	jmp    c0012d87 <Reg::readInt(char*, char*, int*)+0x7d>
c0012dca:	84 c0                	test   al,al
c0012dcc:	74 02                	je     c0012dd0 <Reg::readInt(char*, char*, int*)+0xc6>
c0012dce:	f7 dd                	neg    ebp
c0012dd0:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c0012dd7:	89 28                	mov    DWORD PTR [eax],ebp
c0012dd9:	88 d8                	mov    al,bl
c0012ddb:	81 c4 dc 00 00 00    	add    esp,0xdc
c0012de1:	5b                   	pop    ebx
c0012de2:	5e                   	pop    esi
c0012de3:	5f                   	pop    edi
c0012de4:	5d                   	pop    ebp
c0012de5:	c3                   	ret    

c0012de6 <Reg::readString(char*, char*, char*, int)>:
c0012de6:	56                   	push   esi
c0012de7:	53                   	push   ebx
c0012de8:	81 ec e8 00 00 00    	sub    esp,0xe8
c0012dee:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012df2:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0012df9:	56                   	push   esi
c0012dfa:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e01:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e08:	e8 c6 fe ff ff       	call   c0012cd3 <Reg::getLine(char*, char*, char*)>
c0012e0d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e19:	74 44                	je     c0012e5f <Reg::readString(char*, char*, char*, int)+0x79>
c0012e1b:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c0012e22:	31 c0                	xor    eax,eax
c0012e24:	4a                   	dec    edx
c0012e25:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0012e28:	84 c9                	test   cl,cl
c0012e2a:	74 0f                	je     c0012e3b <Reg::readString(char*, char*, char*, int)+0x55>
c0012e2c:	39 c2                	cmp    edx,eax
c0012e2e:	7e 0b                	jle    c0012e3b <Reg::readString(char*, char*, char*, int)+0x55>
c0012e30:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e33:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e38:	40                   	inc    eax
c0012e39:	eb ea                	jmp    c0012e25 <Reg::readString(char*, char*, char*, int)+0x3f>
c0012e3b:	83 ec 0c             	sub    esp,0xc
c0012e3e:	53                   	push   ebx
c0012e3f:	e8 4c d7 fe ff       	call   c0000590 <strlen>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e4c:	75 11                	jne    c0012e5f <Reg::readString(char*, char*, char*, int)+0x79>
c0012e4e:	83 ec 0c             	sub    esp,0xc
c0012e51:	53                   	push   ebx
c0012e52:	e8 39 d7 fe ff       	call   c0000590 <strlen>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e63:	81 c4 e4 00 00 00    	add    esp,0xe4
c0012e69:	5b                   	pop    ebx
c0012e6a:	5e                   	pop    esi
c0012e6b:	c3                   	ret    

c0012e6c <Reg::readBool(char*, char*, bool*)>:
c0012e6c:	83 ec 20             	sub    esp,0x20
c0012e6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e73:	50                   	push   eax
c0012e74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e7c:	e8 89 fe ff ff       	call   c0012d0a <Reg::readInt(char*, char*, int*)>
c0012e81:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e85:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e8a:	0f 95 02             	setne  BYTE PTR [edx]
c0012e8d:	83 c4 2c             	add    esp,0x2c
c0012e90:	c3                   	ret    

c0012e91 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e91:	83 ec 30             	sub    esp,0x30
c0012e94:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c0012e98:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012e9c:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c0012ea0:	50                   	push   eax
c0012ea1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea9:	e8 be ff ff ff       	call   c0012e6c <Reg::readBool(char*, char*, bool*)>
c0012eae:	83 c4 10             	add    esp,0x10
c0012eb1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012eb5:	84 c0                	test   al,al
c0012eb7:	74 04                	je     c0012ebd <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c0012eb9:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c0012ebd:	88 d0                	mov    al,dl
c0012ebf:	83 c4 2c             	add    esp,0x2c
c0012ec2:	c3                   	ret    

c0012ec3 <Reg::readIntWithDefault(char*, char*, int)>:
c0012ec3:	53                   	push   ebx
c0012ec4:	83 ec 1c             	sub    esp,0x1c
c0012ec7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ecb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ecf:	50                   	push   eax
c0012ed0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed8:	e8 2d fe ff ff       	call   c0012d0a <Reg::readInt(char*, char*, int*)>
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	84 c0                	test   al,al
c0012ee2:	74 04                	je     c0012ee8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012ee4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ee8:	83 c4 18             	add    esp,0x18
c0012eeb:	89 d8                	mov    eax,ebx
c0012eed:	5b                   	pop    ebx
c0012eee:	c3                   	ret    

c0012eef <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012eef:	57                   	push   edi
c0012ef0:	56                   	push   esi
c0012ef1:	53                   	push   ebx
c0012ef2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ef6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012efa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012efe:	56                   	push   esi
c0012eff:	57                   	push   edi
c0012f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f08:	e8 d9 fe ff ff       	call   c0012de6 <Reg::readString(char*, char*, char*, int)>
c0012f0d:	83 c4 10             	add    esp,0x10
c0012f10:	84 c0                	test   al,al
c0012f12:	75 16                	jne    c0012f2a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f14:	50                   	push   eax
c0012f15:	56                   	push   esi
c0012f16:	6a 00                	push   0x0
c0012f18:	57                   	push   edi
c0012f19:	e8 d2 d5 fe ff       	call   c00004f0 <memset>
c0012f1e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f21:	89 de                	mov    esi,ebx
c0012f23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	89 df                	mov    edi,ebx
c0012f2a:	5b                   	pop    ebx
c0012f2b:	89 f8                	mov    eax,edi
c0012f2d:	5e                   	pop    esi
c0012f2e:	5f                   	pop    edi
c0012f2f:	c3                   	ret    

c0012f30 <SysEject(regs*)>:
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	83 ca ff             	or     edx,0xffffffff
c0012f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f3d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f42:	83 e9 41             	sub    ecx,0x41
c0012f45:	83 f9 19             	cmp    ecx,0x19
c0012f48:	77 18                	ja     c0012f62 <SysEject(regs*)+0x32>
c0012f4a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f51:	85 c9                	test   ecx,ecx
c0012f53:	74 0d                	je     c0012f62 <SysEject(regs*)+0x32>
c0012f55:	83 ec 0c             	sub    esp,0xc
c0012f58:	51                   	push   ecx
c0012f59:	e8 50 a1 ff ff       	call   c000d0ae <LogicalDisk::eject()>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	99                   	cdq    
c0012f62:	83 c4 0c             	add    esp,0xc
c0012f65:	c3                   	ret    

c0012f66 <SysExit(regs*)>:
c0012f66:	83 ec 18             	sub    esp,0x18
c0012f69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f6d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f70:	e8 93 29 00 00       	call   c0015908 <terminateTask(int)>
c0012f75:	83 c8 ff             	or     eax,0xffffffff
c0012f78:	83 c4 1c             	add    esp,0x1c
c0012f7b:	89 c2                	mov    edx,eax
c0012f7d:	c3                   	ret    

c0012f7e <SysGetCwd(regs*)>:
c0012f7e:	83 ec 10             	sub    esp,0x10
c0012f81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f85:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f90:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f93:	e8 d5 7d ff ff       	call   c000ad6d <Fs::getcwd(Process*, char*, int)>
c0012f98:	83 c4 1c             	add    esp,0x1c
c0012f9b:	99                   	cdq    
c0012f9c:	c3                   	ret    

c0012f9d <SysGetPID(regs*)>:
c0012f9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fa7:	99                   	cdq    
c0012fa8:	c3                   	ret    

c0012fa9 <SysGetRAMData(regs*)>:
c0012fa9:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012fb3:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fb9:	99                   	cdq    
c0012fba:	f7 f9                	idiv   ecx
c0012fbc:	c1 e0 18             	shl    eax,0x18
c0012fbf:	09 c8                	or     eax,ecx
c0012fc1:	99                   	cdq    
c0012fc2:	c3                   	ret    

c0012fc3 <SysGetVGAPtr(regs*)>:
c0012fc3:	55                   	push   ebp
c0012fc4:	57                   	push   edi
c0012fc5:	56                   	push   esi
c0012fc6:	53                   	push   ebx
c0012fc7:	83 ec 18             	sub    esp,0x18
c0012fca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fce:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fd1:	e8 62 24 00 00       	call   c0015438 <Thr::processFromPID(int)>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	89 c1                	mov    ecx,eax
c0012fdb:	b8 01 00 00 00       	mov    eax,0x1
c0012fe0:	85 c9                	test   ecx,ecx
c0012fe2:	74 57                	je     c001303b <SysGetVGAPtr(regs*)+0x78>
c0012fe4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012fe8:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012fee:	74 0c                	je     c0012ffc <SysGetVGAPtr(regs*)+0x39>
c0012ff0:	83 ec 0c             	sub    esp,0xc
c0012ff3:	55                   	push   ebp
c0012ff4:	e8 ea 56 ff ff       	call   c00086e3 <setActiveTerminal(VgaText*)>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012fff:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013004:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013009:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001300c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001300f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013015:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013018:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001301b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013021:	50                   	push   eax
c0013022:	50                   	push   eax
c0013023:	68 cc 0a 02 c0       	push   0xc0020acc
c0013028:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001302b:	05 a8 0f 00 00       	add    eax,0xfa8
c0013030:	50                   	push   eax
c0013031:	e8 5a d6 fe ff       	call   c0000690 <strcpy>
c0013036:	83 c4 10             	add    esp,0x10
c0013039:	31 c0                	xor    eax,eax
c001303b:	83 c4 0c             	add    esp,0xc
c001303e:	31 d2                	xor    edx,edx
c0013040:	5b                   	pop    ebx
c0013041:	5e                   	pop    esi
c0013042:	5f                   	pop    edi
c0013043:	5d                   	pop    ebp
c0013044:	c3                   	ret    
c0013045:	66 90                	xchg   ax,ax
c0013047:	90                   	nop

c0013048 <SysKill(regs*)>:
c0013048:	53                   	push   ebx
c0013049:	83 ec 08             	sub    esp,0x8
c001304c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013050:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013054:	75 16                	jne    c001306c <SysKill(regs*)+0x24>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	68 d6 0a 02 c0       	push   0xc0020ad6
c001305e:	e8 d2 d6 ff ff       	call   c0010735 <KePanic(char const*)>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	e9 89 00 00 00       	jmp    c00130f4 <SysKill(regs*)+0xac>
c001306b:	90                   	nop
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	68 84 81 02 c0       	push   0xc0028184
c0013074:	e8 5b b8 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013079:	8d 76 00             	lea    esi,[esi+0x0]
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	85 c0                	test   eax,eax
c0013081:	74 19                	je     c001309c <SysKill(regs*)+0x54>
c0013083:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013086:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013089:	39 0a                	cmp    DWORD PTR [edx],ecx
c001308b:	74 33                	je     c00130c0 <SysKill(regs*)+0x78>
c001308d:	52                   	push   edx
c001308e:	52                   	push   edx
c001308f:	50                   	push   eax
c0013090:	68 84 81 02 c0       	push   0xc0028184
c0013095:	e8 22 bb 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001309a:	eb e0                	jmp    c001307c <SysKill(regs*)+0x34>
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	68 78 81 02 c0       	push   0xc0028178
c00130a4:	e8 2b b8 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130a9:	8d 76 00             	lea    esi,[esi+0x0]
c00130ac:	83 c4 10             	add    esp,0x10
c00130af:	85 c0                	test   eax,eax
c00130b1:	74 41                	je     c00130f4 <SysKill(regs*)+0xac>
c00130b3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130b6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130b9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130bb:	75 27                	jne    c00130e4 <SysKill(regs*)+0x9c>
c00130bd:	8d 76 00             	lea    esi,[esi+0x0]
c00130c0:	51                   	push   ecx
c00130c1:	51                   	push   ecx
c00130c2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130cd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130d3:	e8 cb da ff ff       	call   c0010ba3 <KeRaiseSignal(SigHandlerBlock*, int)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	31 c0                	xor    eax,eax
c00130dd:	31 d2                	xor    edx,edx
c00130df:	eb 1b                	jmp    c00130fc <SysKill(regs*)+0xb4>
c00130e1:	8d 76 00             	lea    esi,[esi+0x0]
c00130e4:	52                   	push   edx
c00130e5:	52                   	push   edx
c00130e6:	50                   	push   eax
c00130e7:	68 78 81 02 c0       	push   0xc0028178
c00130ec:	e8 cb ba 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130f1:	eb b9                	jmp    c00130ac <SysKill(regs*)+0x64>
c00130f3:	90                   	nop
c00130f4:	83 c8 ff             	or     eax,0xffffffff
c00130f7:	89 c2                	mov    edx,eax
c00130f9:	8d 76 00             	lea    esi,[esi+0x0]
c00130fc:	83 c4 08             	add    esp,0x8
c00130ff:	5b                   	pop    ebx
c0013100:	c3                   	ret    

c0013101 <SysLoadDLL(regs*)>:
c0013101:	56                   	push   esi
c0013102:	31 d2                	xor    edx,edx
c0013104:	53                   	push   ebx
c0013105:	b8 01 00 00 00       	mov    eax,0x1
c001310a:	51                   	push   ecx
c001310b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001310f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013113:	0f 84 8c 00 00 00    	je     c00131a5 <SysLoadDLL(regs*)+0xa4>
c0013119:	83 ec 0c             	sub    esp,0xc
c001311c:	68 14 01 00 00       	push   0x114
c0013121:	e8 40 49 ff ff       	call   c0007a66 <malloc>
c0013126:	83 c4 0c             	add    esp,0xc
c0013129:	89 c3                	mov    ebx,eax
c001312b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013130:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013133:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013136:	53                   	push   ebx
c0013137:	e8 2c 7e ff ff       	call   c000af68 <File::File(char const*, Process*)>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	31 d2                	xor    edx,edx
c0013141:	85 db                	test   ebx,ebx
c0013143:	b8 02 00 00 00       	mov    eax,0x2
c0013148:	74 5b                	je     c00131a5 <SysLoadDLL(regs*)+0xa4>
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	53                   	push   ebx
c001314e:	e8 3b 81 ff ff       	call   c000b28e <File::exists()>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	84 c0                	test   al,al
c0013158:	8b 03                	mov    eax,DWORD PTR [ebx]
c001315a:	75 11                	jne    c001316d <SysLoadDLL(regs*)+0x6c>
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	53                   	push   ebx
c0013160:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	b8 03 00 00 00       	mov    eax,0x3
c001316b:	eb 36                	jmp    c00131a3 <SysLoadDLL(regs*)+0xa2>
c001316d:	83 ec 0c             	sub    esp,0xc
c0013170:	53                   	push   ebx
c0013171:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013174:	58                   	pop    eax
c0013175:	5a                   	pop    edx
c0013176:	6a 00                	push   0x0
c0013178:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001317b:	e8 4d 14 00 00       	call   c00145cd <Thr::loadDLL(char const*, bool)>
c0013180:	83 c4 10             	add    esp,0x10
c0013183:	31 d2                	xor    edx,edx
c0013185:	89 c1                	mov    ecx,eax
c0013187:	b8 04 00 00 00       	mov    eax,0x4
c001318c:	85 c9                	test   ecx,ecx
c001318e:	74 15                	je     c00131a5 <SysLoadDLL(regs*)+0xa4>
c0013190:	53                   	push   ebx
c0013191:	53                   	push   ebx
c0013192:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013198:	51                   	push   ecx
c0013199:	e8 6b 16 00 00       	call   c0014809 <Thr::executeDLL(unsigned long, void*)>
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	31 c0                	xor    eax,eax
c00131a3:	31 d2                	xor    edx,edx
c00131a5:	59                   	pop    ecx
c00131a6:	5b                   	pop    ebx
c00131a7:	5e                   	pop    esi
c00131a8:	c3                   	ret    

c00131a9 <SysRead(regs*)>:
c00131a9:	57                   	push   edi
c00131aa:	56                   	push   esi
c00131ab:	53                   	push   ebx
c00131ac:	83 ec 10             	sub    esp,0x10
c00131af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131b6:	83 f8 02             	cmp    eax,0x2
c00131b9:	77 10                	ja     c00131cb <SysRead(regs*)+0x22>
c00131bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131c3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131c9:	eb 0e                	jmp    c00131d9 <SysRead(regs*)+0x30>
c00131cb:	83 ec 0c             	sub    esp,0xc
c00131ce:	50                   	push   eax
c00131cf:	e8 53 62 ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	89 c1                	mov    ecx,eax
c00131d9:	83 c8 ff             	or     eax,0xffffffff
c00131dc:	85 c9                	test   ecx,ecx
c00131de:	89 c2                	mov    edx,eax
c00131e0:	74 28                	je     c001320a <SysRead(regs*)+0x61>
c00131e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	31 ff                	xor    edi,edi
c00131ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f5:	52                   	push   edx
c00131f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131f9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00131fc:	57                   	push   edi
c00131fd:	56                   	push   esi
c00131fe:	51                   	push   ecx
c00131ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013206:	83 c4 20             	add    esp,0x20
c0013209:	99                   	cdq    
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	5b                   	pop    ebx
c001320e:	5e                   	pop    esi
c001320f:	5f                   	pop    edi
c0013210:	c3                   	ret    

c0013211 <SysRegisterSignal(regs*)>:
c0013211:	83 ec 18             	sub    esp,0x18
c0013214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013218:	6a 00                	push   0x0
c001321a:	6a 00                	push   0x0
c001321c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001321f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013227:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001322a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013230:	e8 38 d9 ff ff       	call   c0010b6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013235:	83 c4 2c             	add    esp,0x2c
c0013238:	99                   	cdq    
c0013239:	c3                   	ret    

c001323a <SysRegistryGetTypeFromPath(regs*)>:
c001323a:	57                   	push   edi
c001323b:	56                   	push   esi
c001323c:	53                   	push   ebx
c001323d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013243:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001324a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001324d:	68 f7 0a 02 c0       	push   0xc0020af7
c0013252:	e8 8f 77 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013257:	5a                   	pop    edx
c0013258:	59                   	pop    ecx
c0013259:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001325c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001325f:	e8 55 f6 ff ff       	call   c00128b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013264:	5f                   	pop    edi
c0013265:	5a                   	pop    edx
c0013266:	89 c6                	mov    esi,eax
c0013268:	50                   	push   eax
c0013269:	68 17 0b 02 c0       	push   0xc0020b17
c001326e:	e8 73 77 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	85 f6                	test   esi,esi
c0013278:	74 28                	je     c00132a2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001327a:	50                   	push   eax
c001327b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001327f:	57                   	push   edi
c0013280:	56                   	push   esi
c0013281:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013284:	e8 1e f2 ff ff       	call   c00124a7 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	57                   	push   edi
c001328d:	50                   	push   eax
c001328e:	89 c3                	mov    ebx,eax
c0013290:	68 1f 0b 02 c0       	push   0xc0020b1f
c0013295:	e8 4c 77 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001329a:	89 d8                	mov    eax,ebx
c001329c:	83 c4 10             	add    esp,0x10
c001329f:	99                   	cdq    
c00132a0:	eb 05                	jmp    c00132a7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132a2:	83 c8 ff             	or     eax,0xffffffff
c00132a5:	89 c2                	mov    edx,eax
c00132a7:	81 c4 30 01 00 00    	add    esp,0x130
c00132ad:	5b                   	pop    ebx
c00132ae:	5e                   	pop    esi
c00132af:	5f                   	pop    edi
c00132b0:	c3                   	ret    

c00132b1 <SysRegistryReadExtent(regs*)>:
c00132b1:	83 ec 1c             	sub    esp,0x1c
c00132b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132b8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132bb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132be:	85 c0                	test   eax,eax
c00132c0:	79 1f                	jns    c00132e1 <SysRegistryReadExtent(regs*)+0x30>
c00132c2:	52                   	push   edx
c00132c3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132c8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132cc:	52                   	push   edx
c00132cd:	50                   	push   eax
c00132ce:	51                   	push   ecx
c00132cf:	e8 c5 f0 ff ff       	call   c0012399 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	eb 14                	jmp    c00132f5 <SysRegistryReadExtent(regs*)+0x44>
c00132e1:	83 ec 04             	sub    esp,0x4
c00132e4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00132e7:	50                   	push   eax
c00132e8:	51                   	push   ecx
c00132e9:	e8 43 eb ff ff       	call   c0011e31 <CmGetString(Reghive_Tag*, int, char*)>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	31 c0                	xor    eax,eax
c00132f3:	31 d2                	xor    edx,edx
c00132f5:	83 c4 1c             	add    esp,0x1c
c00132f8:	c3                   	ret    

c00132f9 <SysRegistryPathToExtentLookup(regs*)>:
c00132f9:	53                   	push   ebx
c00132fa:	83 ec 10             	sub    esp,0x10
c00132fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013301:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013304:	68 35 0b 02 c0       	push   0xc0020b35
c0013309:	e8 d8 76 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001330e:	58                   	pop    eax
c001330f:	5a                   	pop    edx
c0013310:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013313:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013316:	e8 9e f5 ff ff       	call   c00128b9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001331b:	83 c4 18             	add    esp,0x18
c001331e:	5b                   	pop    ebx
c001331f:	99                   	cdq    
c0013320:	c3                   	ret    

c0013321 <SysRegistryEnterDirectory(regs*)>:
c0013321:	53                   	push   ebx
c0013322:	83 ec 10             	sub    esp,0x10
c0013325:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013329:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001332c:	68 58 0b 02 c0       	push   0xc0020b58
c0013331:	e8 b0 76 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013336:	58                   	pop    eax
c0013337:	5a                   	pop    edx
c0013338:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001333b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001333e:	e8 65 eb ff ff       	call   c0011ea8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013343:	83 c4 18             	add    esp,0x18
c0013346:	5b                   	pop    ebx
c0013347:	99                   	cdq    
c0013348:	c3                   	ret    

c0013349 <SysRegistryGetNext(regs*)>:
c0013349:	53                   	push   ebx
c001334a:	83 ec 10             	sub    esp,0x10
c001334d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013351:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013354:	68 76 0b 02 c0       	push   0xc0020b76
c0013359:	e8 88 76 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001335e:	58                   	pop    eax
c001335f:	5a                   	pop    edx
c0013360:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013363:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013366:	e8 7c eb ff ff       	call   c0011ee7 <CmGetNext(Reghive_Tag*, int)>
c001336b:	83 c4 18             	add    esp,0x18
c001336e:	5b                   	pop    ebx
c001336f:	99                   	cdq    
c0013370:	c3                   	ret    

c0013371 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	81 ec 34 01 00 00    	sub    esp,0x134
c001337a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013381:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013385:	57                   	push   edi
c0013386:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013389:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001338c:	e8 16 f1 ff ff       	call   c00124a7 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013391:	89 c3                	mov    ebx,eax
c0013393:	58                   	pop    eax
c0013394:	5a                   	pop    edx
c0013395:	57                   	push   edi
c0013396:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013399:	e8 f2 d2 fe ff       	call   c0000690 <strcpy>
c001339e:	81 c4 40 01 00 00    	add    esp,0x140
c00133a4:	89 d8                	mov    eax,ebx
c00133a6:	5b                   	pop    ebx
c00133a7:	99                   	cdq    
c00133a8:	5e                   	pop    esi
c00133a9:	5f                   	pop    edi
c00133aa:	c3                   	ret    

c00133ab <SysRegistryOpen(regs*)>:
c00133ab:	83 ec 18             	sub    esp,0x18
c00133ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133b5:	e8 07 e9 ff ff       	call   c0011cc1 <CmOpen(char const*)>
c00133ba:	83 c4 1c             	add    esp,0x1c
c00133bd:	99                   	cdq    
c00133be:	c3                   	ret    

c00133bf <SysRegistryClose(regs*)>:
c00133bf:	83 ec 18             	sub    esp,0x18
c00133c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133c9:	e8 11 ea ff ff       	call   c0011ddf <CmClose(Reghive_Tag*)>
c00133ce:	31 c0                	xor    eax,eax
c00133d0:	31 d2                	xor    edx,edx
c00133d2:	83 c4 1c             	add    esp,0x1c
c00133d5:	c3                   	ret    

c00133d6 <SysSbrk(regs*)>:
c00133d6:	56                   	push   esi
c00133d7:	53                   	push   ebx
c00133d8:	50                   	push   eax
c00133d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133e5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00133e8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00133ee:	85 db                	test   ebx,ebx
c00133f0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133f3:	74 02                	je     c00133f7 <SysSbrk(regs*)+0x21>
c00133f5:	79 06                	jns    c00133fd <SysSbrk(regs*)+0x27>
c00133f7:	89 f0                	mov    eax,esi
c00133f9:	31 d2                	xor    edx,edx
c00133fb:	eb 2a                	jmp    c0013427 <SysSbrk(regs*)+0x51>
c00133fd:	83 c8 ff             	or     eax,0xffffffff
c0013400:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013406:	89 c2                	mov    edx,eax
c0013408:	77 1d                	ja     c0013427 <SysSbrk(regs*)+0x51>
c001340a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013410:	50                   	push   eax
c0013411:	68 07 0c 00 00       	push   0xc07
c0013416:	c1 ea 0c             	shr    edx,0xc
c0013419:	52                   	push   edx
c001341a:	51                   	push   ecx
c001341b:	e8 c6 69 ff ff       	call   c0009de6 <VAS::allocatePages(int, int)>
c0013420:	89 f0                	mov    eax,esi
c0013422:	31 d2                	xor    edx,edx
c0013424:	83 c4 10             	add    esp,0x10
c0013427:	59                   	pop    ecx
c0013428:	5b                   	pop    ebx
c0013429:	5e                   	pop    esi
c001342a:	c3                   	ret    

c001342b <SysSetCwd(regs*)>:
c001342b:	83 ec 14             	sub    esp,0x14
c001342e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013432:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001343a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001343d:	e8 eb 7e ff ff       	call   c000b32d <Fs::setcwd(Process*, char*)>
c0013442:	83 c4 1c             	add    esp,0x1c
c0013445:	99                   	cdq    
c0013446:	c3                   	ret    

c0013447 <SysSetTime(regs*)>:
c0013447:	56                   	push   esi
c0013448:	be 0c 00 00 00       	mov    esi,0xc
c001344d:	53                   	push   ebx
c001344e:	83 ec 18             	sub    esp,0x18
c0013451:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013459:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001345d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013465:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013468:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001346b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001346e:	89 c2                	mov    edx,eax
c0013470:	c1 e8 05             	shr    eax,0x5
c0013473:	83 e2 1f             	and    edx,0x1f
c0013476:	42                   	inc    edx
c0013477:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c001347d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013481:	c1 e3 10             	shl    ebx,0x10
c0013484:	31 d2                	xor    edx,edx
c0013486:	f7 f6                	div    esi
c0013488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001348c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013490:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013496:	88 d4                	mov    ah,dl
c0013498:	31 d2                	xor    edx,edx
c001349a:	0f b7 c0             	movzx  eax,ax
c001349d:	09 d8                	or     eax,ebx
c001349f:	bb 3c 00 00 00       	mov    ebx,0x3c
c00134a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134a8:	89 c8                	mov    eax,ecx
c00134aa:	f7 f3                	div    ebx
c00134ac:	c1 e2 10             	shl    edx,0x10
c00134af:	09 d6                	or     esi,edx
c00134b1:	31 d2                	xor    edx,edx
c00134b3:	f7 f3                	div    ebx
c00134b5:	89 f0                	mov    eax,esi
c00134b7:	bb 10 0e 00 00       	mov    ebx,0xe10
c00134bc:	88 d4                	mov    ah,dl
c00134be:	31 d2                	xor    edx,edx
c00134c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c4:	89 c8                	mov    eax,ecx
c00134c6:	b9 18 00 00 00       	mov    ecx,0x18
c00134cb:	f7 f3                	div    ebx
c00134cd:	31 d2                	xor    edx,edx
c00134cf:	f7 f1                	div    ecx
c00134d1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134d6:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00134da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134e2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134e8:	e8 37 86 ff ff       	call   c000bb24 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134ed:	83 c4 24             	add    esp,0x24
c00134f0:	31 d2                	xor    edx,edx
c00134f2:	5b                   	pop    ebx
c00134f3:	5e                   	pop    esi
c00134f4:	34 01                	xor    al,0x1
c00134f6:	0f b6 c0             	movzx  eax,al
c00134f9:	c3                   	ret    

c00134fa <SysTimezone(regs*)>:
c00134fa:	53                   	push   ebx
c00134fb:	83 ec 08             	sub    esp,0x8
c00134fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013502:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013506:	75 17                	jne    c001351f <SysTimezone(regs*)+0x25>
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	68 8d 0b 02 c0       	push   0xc0020b8d
c0013510:	e8 d1 74 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013515:	83 c8 ff             	or     eax,0xffffffff
c0013518:	83 c4 10             	add    esp,0x10
c001351b:	89 c2                	mov    edx,eax
c001351d:	eb 20                	jmp    c001353f <SysTimezone(regs*)+0x45>
c001351f:	83 ec 0c             	sub    esp,0xc
c0013522:	68 a2 0b 02 c0       	push   0xc0020ba2
c0013527:	e8 ba 74 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001352c:	58                   	pop    eax
c001352d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013530:	e8 5f 83 ff ff       	call   c000b894 <User::loadClockSettings(int)>
c0013535:	83 c4 10             	add    esp,0x10
c0013538:	b8 01 00 00 00       	mov    eax,0x1
c001353d:	31 d2                	xor    edx,edx
c001353f:	83 c4 08             	add    esp,0x8
c0013542:	5b                   	pop    ebx
c0013543:	c3                   	ret    

c0013544 <SysWrite(regs*)>:
c0013544:	57                   	push   edi
c0013545:	56                   	push   esi
c0013546:	53                   	push   ebx
c0013547:	83 ec 10             	sub    esp,0x10
c001354a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001354e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013551:	83 f8 02             	cmp    eax,0x2
c0013554:	77 10                	ja     c0013566 <SysWrite(regs*)+0x22>
c0013556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001355e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013564:	eb 0e                	jmp    c0013574 <SysWrite(regs*)+0x30>
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	50                   	push   eax
c001356a:	e8 b8 5e ff ff       	call   c0009427 <getFromFileDescriptor(int)>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	89 c1                	mov    ecx,eax
c0013574:	83 c8 ff             	or     eax,0xffffffff
c0013577:	85 c9                	test   ecx,ecx
c0013579:	89 c2                	mov    edx,eax
c001357b:	74 28                	je     c00135a5 <SysWrite(regs*)+0x61>
c001357d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013585:	83 ec 0c             	sub    esp,0xc
c0013588:	31 ff                	xor    edi,edi
c001358a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001358e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013590:	52                   	push   edx
c0013591:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013594:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013597:	57                   	push   edi
c0013598:	56                   	push   esi
c0013599:	51                   	push   ecx
c001359a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001359d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135a1:	83 c4 20             	add    esp,0x20
c00135a4:	99                   	cdq    
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	5b                   	pop    ebx
c00135a9:	5e                   	pop    esi
c00135aa:	5f                   	pop    edi
c00135ab:	c3                   	ret    

c00135ac <SysWsbe(regs*)>:
c00135ac:	57                   	push   edi
c00135ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00135b2:	56                   	push   esi
c00135b3:	be e1 0b 02 c0       	mov    esi,0xc0020be1
c00135b8:	53                   	push   ebx
c00135b9:	83 ec 30             	sub    esp,0x30
c00135bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135c0:	fc                   	cld    
c00135c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135c3:	83 ec 0c             	sub    esp,0xc
c00135c6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135d2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00135da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135dd:	57                   	push   edi
c00135de:	e8 ad cf fe ff       	call   c0000590 <strlen>
c00135e3:	5a                   	pop    edx
c00135e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135e8:	52                   	push   edx
c00135e9:	31 d2                	xor    edx,edx
c00135eb:	57                   	push   edi
c00135ec:	52                   	push   edx
c00135ed:	50                   	push   eax
c00135ee:	56                   	push   esi
c00135ef:	ff d3                	call   ebx
c00135f1:	83 c4 14             	add    esp,0x14
c00135f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00135f8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135fb:	e8 08 23 00 00       	call   c0015908 <terminateTask(int)>
c0013600:	83 c4 40             	add    esp,0x40
c0013603:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013608:	5b                   	pop    ebx
c0013609:	31 d2                	xor    edx,edx
c001360b:	5e                   	pop    esi
c001360c:	5f                   	pop    edi
c001360d:	c3                   	ret    

c001360e <SysYield(regs*)>:
c001360e:	83 ec 0c             	sub    esp,0xc
c0013611:	fa                   	cli    
c0013612:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013618:	e8 33 1a 00 00       	call   c0015050 <schedule()>
c001361d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013622:	48                   	dec    eax
c0013623:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013628:	75 01                	jne    c001362b <SysYield(regs*)+0x1d>
c001362a:	fb                   	sti    
c001362b:	31 c0                	xor    eax,eax
c001362d:	31 d2                	xor    edx,edx
c001362f:	83 c4 0c             	add    esp,0xc
c0013632:	c3                   	ret    

c0013633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013633:	55                   	push   ebp
c0013634:	57                   	push   edi
c0013635:	56                   	push   esi
c0013636:	53                   	push   ebx
c0013637:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001363d:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013648:	74 3b                	je     c0013685 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001364a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013652:	74 31                	je     c0013685 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013654:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001365c:	75 27                	jne    c0013685 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001365e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013665:	05 00 10 00 00       	add    eax,0x1000
c001366a:	89 c2                	mov    edx,eax
c001366c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013671:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013678:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001367e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013685:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	6a 01                	push   0x1
c0013691:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013697:	e8 f4 5e ff ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136a5:	89 c3                	mov    ebx,eax
c00136a7:	0f 86 26 01 00 00    	jbe    c00137d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136b5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136bc:	c1 ee 0c             	shr    esi,0xc
c00136bf:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136c3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136ca:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136d5:	29 ef                	sub    edi,ebp
c00136d7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136db:	0f 83 f9 00 00 00    	jae    c00137da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136e1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136e7:	b8 00 10 00 00       	mov    eax,0x1000
c00136ec:	0f 47 f8             	cmova  edi,eax
c00136ef:	83 ec 0c             	sub    esp,0xc
c00136f2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00136f9:	31 d2                	xor    edx,edx
c00136fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136fd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013701:	50                   	push   eax
c0013702:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013706:	56                   	push   esi
c0013707:	52                   	push   edx
c0013708:	57                   	push   edi
c0013709:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013710:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013713:	83 c4 20             	add    esp,0x20
c0013716:	85 c0                	test   eax,eax
c0013718:	75 06                	jne    c0013720 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001371a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001371e:	74 13                	je     c0013733 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013720:	83 ec 0c             	sub    esp,0xc
c0013723:	53                   	push   ebx
c0013724:	e8 80 61 ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	31 c0                	xor    eax,eax
c001372e:	e9 7c 01 00 00       	jmp    c00138af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013733:	fa                   	cli    
c0013734:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001373a:	e8 3d 46 ff ff       	call   c0007d7c <Phys::allocatePage()>
c001373f:	6a 07                	push   0x7
c0013741:	53                   	push   ebx
c0013742:	50                   	push   eax
c0013743:	89 c7                	mov    edi,eax
c0013745:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001374a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001374d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013753:	e8 5a 65 ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013758:	83 c4 0c             	add    esp,0xc
c001375b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013762:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013768:	6a 00                	push   0x0
c001376a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001376f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013772:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013778:	e8 a1 63 ff ff       	call   c0009b1e <VAS::mapOtherVASIn(bool, VAS*)>
c001377d:	58                   	pop    eax
c001377e:	5a                   	pop    edx
c001377f:	68 07 0c 00 00       	push   0xc07
c0013784:	55                   	push   ebp
c0013785:	57                   	push   edi
c0013786:	89 df                	mov    edi,ebx
c0013788:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001378f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013795:	6a 00                	push   0x0
c0013797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001379c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001379f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a5:	e8 16 69 ff ff       	call   c000a0c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137aa:	b9 00 10 00 00       	mov    ecx,0x1000
c00137af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137b1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137b6:	83 c4 20             	add    esp,0x20
c00137b9:	48                   	dec    eax
c00137ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137bf:	85 c0                	test   eax,eax
c00137c1:	75 01                	jne    c00137c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137c3:	fb                   	sti    
c00137c4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137c8:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137ce:	e9 f0 fe ff ff       	jmp    c00136c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137d3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137da:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137e1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137e7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137ed:	0f 86 ae 00 00 00    	jbe    c00138a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00137f3:	fa                   	cli    
c00137f4:	51                   	push   ecx
c00137f5:	31 ff                	xor    edi,edi
c00137f7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137fe:	c1 ee 0c             	shr    esi,0xc
c0013801:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013807:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001380d:	6a 00                	push   0x0
c001380f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013814:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013817:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001381d:	e8 fc 62 ff ff       	call   c0009b1e <VAS::mapOtherVASIn(bool, VAS*)>
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	e8 52 45 ff ff       	call   c0007d7c <Phys::allocatePage()>
c001382a:	47                   	inc    edi
c001382b:	6a 07                	push   0x7
c001382d:	53                   	push   ebx
c001382e:	50                   	push   eax
c001382f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013833:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013839:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001383c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013842:	e8 6b 64 ff ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013847:	58                   	pop    eax
c0013848:	5a                   	pop    edx
c0013849:	68 07 0c 00 00       	push   0xc07
c001384e:	55                   	push   ebp
c001384f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013855:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013859:	50                   	push   eax
c001385a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013861:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013867:	6a 00                	push   0x0
c0013869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001386e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013871:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013877:	e8 44 68 ff ff       	call   c000a0c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001387c:	83 c4 1c             	add    esp,0x1c
c001387f:	68 00 10 00 00       	push   0x1000
c0013884:	6a 00                	push   0x0
c0013886:	53                   	push   ebx
c0013887:	e8 64 cc fe ff       	call   c00004f0 <memset>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	39 fe                	cmp    esi,edi
c0013891:	77 92                	ja     c0013825 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013893:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013898:	48                   	dec    eax
c0013899:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001389e:	75 01                	jne    c00138a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138a0:	fb                   	sti    
c00138a1:	83 ec 0c             	sub    esp,0xc
c00138a4:	53                   	push   ebx
c00138a5:	e8 ff 5f ff ff       	call   c00098a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	b0 01                	mov    al,0x1
c00138af:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138b5:	5b                   	pop    ebx
c00138b6:	5e                   	pop    esi
c00138b7:	5f                   	pop    edi
c00138b8:	5d                   	pop    ebp
c00138b9:	c3                   	ret    

c00138ba <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138ba:	55                   	push   ebp
c00138bb:	57                   	push   edi
c00138bc:	56                   	push   esi
c00138bd:	53                   	push   ebx
c00138be:	83 ec 48             	sub    esp,0x48
c00138c1:	68 14 01 00 00       	push   0x114
c00138c6:	e8 9b 41 ff ff       	call   c0007a66 <malloc>
c00138cb:	83 c4 0c             	add    esp,0xc
c00138ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138d6:	89 c7                	mov    edi,eax
c00138d8:	50                   	push   eax
c00138d9:	e8 8a 76 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c00138de:	58                   	pop    eax
c00138df:	5a                   	pop    edx
c00138e0:	6a 01                	push   0x1
c00138e2:	57                   	push   edi
c00138e3:	e8 3e 77 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	85 c0                	test   eax,eax
c00138ed:	0f 85 4d 01 00 00    	jne    c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00138f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00138fb:	83 ec 0c             	sub    esp,0xc
c00138fe:	6a 34                	push   0x34
c0013900:	e8 61 41 ff ff       	call   c0007a66 <malloc>
c0013905:	89 c3                	mov    ebx,eax
c0013907:	58                   	pop    eax
c0013908:	8b 07                	mov    eax,DWORD PTR [edi]
c001390a:	8d 74 24 38          	lea    esi,[esp+0x38]
c001390e:	56                   	push   esi
c001390f:	53                   	push   ebx
c0013910:	6a 00                	push   0x0
c0013912:	6a 34                	push   0x34
c0013914:	57                   	push   edi
c0013915:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013918:	83 c4 20             	add    esp,0x20
c001391b:	85 c0                	test   eax,eax
c001391d:	0f 85 1d 01 00 00    	jne    c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013923:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013929:	0f 85 11 01 00 00    	jne    c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001392f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013932:	85 c0                	test   eax,eax
c0013934:	0f 84 06 01 00 00    	je     c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001393a:	31 d2                	xor    edx,edx
c001393c:	55                   	push   ebp
c001393d:	52                   	push   edx
c001393e:	50                   	push   eax
c001393f:	57                   	push   edi
c0013940:	e8 9f 77 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	85 c0                	test   eax,eax
c001394a:	0f 85 f0 00 00 00    	jne    c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013950:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013953:	83 ec 0c             	sub    esp,0xc
c0013956:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001395a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001395e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013962:	0f af c2             	imul   eax,edx
c0013965:	50                   	push   eax
c0013966:	e8 fb 40 ff ff       	call   c0007a66 <malloc>
c001396b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001396d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013970:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013974:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013978:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001397c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013980:	0f af c2             	imul   eax,edx
c0013983:	99                   	cdq    
c0013984:	52                   	push   edx
c0013985:	50                   	push   eax
c0013986:	57                   	push   edi
c0013987:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001398a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001398d:	83 c4 20             	add    esp,0x20
c0013990:	85 c0                	test   eax,eax
c0013992:	0f 84 a8 00 00 00    	je     c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013998:	31 d2                	xor    edx,edx
c001399a:	51                   	push   ecx
c001399b:	52                   	push   edx
c001399c:	50                   	push   eax
c001399d:	57                   	push   edi
c001399e:	e8 41 77 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c00139a3:	83 c4 10             	add    esp,0x10
c00139a6:	85 c0                	test   eax,eax
c00139a8:	0f 85 92 00 00 00    	jne    c0013a40 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139ae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139b2:	83 ec 0c             	sub    esp,0xc
c00139b5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139b9:	0f af c2             	imul   eax,edx
c00139bc:	50                   	push   eax
c00139bd:	e8 a4 40 ff ff       	call   c0007a66 <malloc>
c00139c2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00139c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139cf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139d3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139d7:	0f af c2             	imul   eax,edx
c00139da:	99                   	cdq    
c00139db:	52                   	push   edx
c00139dc:	50                   	push   eax
c00139dd:	57                   	push   edi
c00139de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139e1:	83 c4 20             	add    esp,0x20
c00139e4:	31 c9                	xor    ecx,ecx
c00139e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139ee:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139f2:	39 c8                	cmp    eax,ecx
c00139f4:	0f 86 8b 00 00 00    	jbe    c0013a85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c00139fa:	89 cd                	mov    ebp,ecx
c00139fc:	c1 e5 05             	shl    ebp,0x5
c00139ff:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a03:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a07:	75 73                	jne    c0013a7c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c0013a09:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a10:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a17:	52                   	push   edx
c0013a18:	31 d2                	xor    edx,edx
c0013a1a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a1d:	52                   	push   edx
c0013a1e:	50                   	push   eax
c0013a1f:	57                   	push   edi
c0013a20:	e8 bf 76 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a2c:	85 c0                	test   eax,eax
c0013a2e:	74 17                	je     c0013a47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	68 0d 0c 02 c0       	push   0xc0020c0d
c0013a38:	e8 a9 6f ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	31 c0                	xor    eax,eax
c0013a42:	e9 8e 00 00 00       	jmp    c0013ad5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0013a47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a4b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a4e:	83 ec 0c             	sub    esp,0xc
c0013a51:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a54:	50                   	push   eax
c0013a55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a59:	56                   	push   esi
c0013a5a:	57                   	push   edi
c0013a5b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a5f:	e8 cf fb ff ff       	call   c0013633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a64:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a68:	83 c4 20             	add    esp,0x20
c0013a6b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a73:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a78:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a7c:	41                   	inc    ecx
c0013a7d:	0f b7 c9             	movzx  ecx,cx
c0013a80:	e9 69 ff ff ff       	jmp    c00139ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a85:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a89:	83 ec 0c             	sub    esp,0xc
c0013a8c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013a90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a94:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c0013a9a:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013aa0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013aa5:	05 00 10 00 00       	add    eax,0x1000
c0013aaa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ab1:	e8 c3 3f ff ff       	call   c0007a79 <free>
c0013ab6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ab9:	e8 bb 3f ff ff       	call   c0007a79 <free>
c0013abe:	58                   	pop    eax
c0013abf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac3:	e8 b1 3f ff ff       	call   c0007a79 <free>
c0013ac8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013acb:	e8 b4 75 ff ff       	call   c000b084 <File::close()>
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	b0 01                	mov    al,0x1
c0013ad5:	83 c4 3c             	add    esp,0x3c
c0013ad8:	5b                   	pop    ebx
c0013ad9:	5e                   	pop    esi
c0013ada:	5f                   	pop    edi
c0013adb:	5d                   	pop    ebp
c0013adc:	c3                   	ret    

c0013add <Thr::runtimeReferenceHelper()>:
c0013add:	83 ec 18             	sub    esp,0x18
c0013ae0:	68 15 0c 02 c0       	push   0xc0020c15
c0013ae5:	e8 fc 6e ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0013aea:	fa                   	cli    
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	eb fe                	jmp    c0013aee <Thr::runtimeReferenceHelper()+0x11>

c0013af0 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013af0:	57                   	push   edi
c0013af1:	56                   	push   esi
c0013af2:	53                   	push   ebx
c0013af3:	31 db                	xor    ebx,ebx
c0013af5:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013afb:	7e 3c                	jle    c0013b39 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013afd:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b04:	31 ff                	xor    edi,edi
c0013b06:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b0d:	7e 27                	jle    c0013b36 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b0f:	50                   	push   eax
c0013b10:	50                   	push   eax
c0013b11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b15:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b17:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b1e:	50                   	push   eax
c0013b1f:	e8 8c cc fe ff       	call   c00007b0 <strcmp>
c0013b24:	83 c4 10             	add    esp,0x10
c0013b27:	85 c0                	test   eax,eax
c0013b29:	75 05                	jne    c0013b30 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b2b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b2e:	eb 0b                	jmp    c0013b3b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b30:	83 c6 10             	add    esi,0x10
c0013b33:	47                   	inc    edi
c0013b34:	eb d0                	jmp    c0013b06 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b36:	43                   	inc    ebx
c0013b37:	eb bc                	jmp    c0013af5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b39:	31 c0                	xor    eax,eax
c0013b3b:	5b                   	pop    ebx
c0013b3c:	5e                   	pop    esi
c0013b3d:	5f                   	pop    edi
c0013b3e:	c3                   	ret    

c0013b3f <Thr::loadKernelSymbolTable(char const*)>:
c0013b3f:	55                   	push   ebp
c0013b40:	57                   	push   edi
c0013b41:	56                   	push   esi
c0013b42:	53                   	push   ebx
c0013b43:	83 ec 68             	sub    esp,0x68
c0013b46:	68 14 01 00 00       	push   0x114
c0013b4b:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b51:	e8 10 3f ff ff       	call   c0007a66 <malloc>
c0013b56:	83 c4 0c             	add    esp,0xc
c0013b59:	56                   	push   esi
c0013b5a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b5e:	89 c3                	mov    ebx,eax
c0013b60:	50                   	push   eax
c0013b61:	e8 02 74 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0013b66:	5e                   	pop    esi
c0013b67:	5f                   	pop    edi
c0013b68:	6a 01                	push   0x1
c0013b6a:	53                   	push   ebx
c0013b6b:	e8 b6 74 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	85 c0                	test   eax,eax
c0013b75:	74 0a                	je     c0013b81 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b77:	83 ec 0c             	sub    esp,0xc
c0013b7a:	68 37 0c 02 c0       	push   0xc0020c37
c0013b7f:	eb 34                	jmp    c0013bb5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b81:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b89:	83 ec 0c             	sub    esp,0xc
c0013b8c:	6a 34                	push   0x34
c0013b8e:	e8 d3 3e ff ff       	call   c0007a66 <malloc>
c0013b93:	59                   	pop    ecx
c0013b94:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b98:	89 c7                	mov    edi,eax
c0013b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9c:	56                   	push   esi
c0013b9d:	57                   	push   edi
c0013b9e:	6a 00                	push   0x0
c0013ba0:	6a 34                	push   0x34
c0013ba2:	53                   	push   ebx
c0013ba3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ba6:	83 c4 20             	add    esp,0x20
c0013ba9:	85 c0                	test   eax,eax
c0013bab:	74 17                	je     c0013bc4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bad:	83 ec 0c             	sub    esp,0xc
c0013bb0:	68 4e 0c 02 c0       	push   0xc0020c4e
c0013bb5:	e8 7b cb ff ff       	call   c0010735 <KePanic(char const*)>
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	31 c0                	xor    eax,eax
c0013bbf:	e9 34 02 00 00       	jmp    c0013df8 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0013bc4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bca:	75 e1                	jne    c0013bad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bcc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bcf:	85 c0                	test   eax,eax
c0013bd1:	74 da                	je     c0013bad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bd3:	52                   	push   edx
c0013bd4:	31 d2                	xor    edx,edx
c0013bd6:	52                   	push   edx
c0013bd7:	50                   	push   eax
c0013bd8:	53                   	push   ebx
c0013bd9:	e8 06 75 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	85 c0                	test   eax,eax
c0013be3:	75 c8                	jne    c0013bad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013be5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013be9:	83 ec 0c             	sub    esp,0xc
c0013bec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bf0:	0f af c2             	imul   eax,edx
c0013bf3:	50                   	push   eax
c0013bf4:	e8 6d 3e ff ff       	call   c0007a66 <malloc>
c0013bf9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013bfb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bfe:	31 f6                	xor    esi,esi
c0013c00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c10:	0f af c2             	imul   eax,edx
c0013c13:	99                   	cdq    
c0013c14:	52                   	push   edx
c0013c15:	50                   	push   eax
c0013c16:	53                   	push   ebx
c0013c17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c1a:	83 c4 20             	add    esp,0x20
c0013c1d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c2d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c3d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c41:	39 f0                	cmp    eax,esi
c0013c43:	0f 86 ab 00 00 00    	jbe    c0013cf4 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c0013c49:	6b ee 28             	imul   ebp,esi,0x28
c0013c4c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0013c50:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0013c53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c57:	50                   	push   eax
c0013c58:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c60:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013c63:	6b c0 28             	imul   eax,eax,0x28
c0013c66:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c6a:	89 d0                	mov    eax,edx
c0013c6c:	31 d2                	xor    edx,edx
c0013c6e:	52                   	push   edx
c0013c6f:	50                   	push   eax
c0013c70:	53                   	push   ebx
c0013c71:	e8 6e 74 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013c76:	83 c4 0c             	add    esp,0xc
c0013c79:	6a 20                	push   0x20
c0013c7b:	6a 00                	push   0x0
c0013c7d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c81:	52                   	push   edx
c0013c82:	e8 69 c8 fe ff       	call   c00004f0 <memset>
c0013c87:	58                   	pop    eax
c0013c88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c8e:	51                   	push   ecx
c0013c8f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c93:	52                   	push   edx
c0013c94:	6a 00                	push   0x0
c0013c96:	6a 1f                	push   0x1f
c0013c98:	53                   	push   ebx
c0013c99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c9c:	83 c4 18             	add    esp,0x18
c0013c9f:	68 65 0c 02 c0       	push   0xc0020c65
c0013ca4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ca8:	52                   	push   edx
c0013ca9:	e8 02 cb fe ff       	call   c00007b0 <strcmp>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	85 c0                	test   eax,eax
c0013cb3:	75 0f                	jne    c0013cc4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cb5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013cb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cc4:	50                   	push   eax
c0013cc5:	50                   	push   eax
c0013cc6:	68 6d 0c 02 c0       	push   0xc0020c6d
c0013ccb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013ccf:	50                   	push   eax
c0013cd0:	e8 db ca fe ff       	call   c00007b0 <strcmp>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	85 c0                	test   eax,eax
c0013cda:	75 0f                	jne    c0013ceb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013cdc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013cdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ce3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ceb:	46                   	inc    esi
c0013cec:	0f b7 f6             	movzx  esi,si
c0013cef:	e9 49 ff ff ff       	jmp    c0013c3d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013cf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013cf9:	75 10                	jne    c0013d0b <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0013cfb:	83 ec 0c             	sub    esp,0xc
c0013cfe:	68 75 0c 02 c0       	push   0xc0020c75
c0013d03:	e8 2d ca ff ff       	call   c0010735 <KePanic(char const*)>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d10:	75 10                	jne    c0013d22 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	68 75 0c 02 c0       	push   0xc0020c75
c0013d1a:	e8 16 ca ff ff       	call   c0010735 <KePanic(char const*)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	50                   	push   eax
c0013d23:	31 d2                	xor    edx,edx
c0013d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d29:	52                   	push   edx
c0013d2a:	50                   	push   eax
c0013d2b:	53                   	push   ebx
c0013d2c:	e8 b3 73 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013d31:	5a                   	pop    edx
c0013d32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d36:	e8 2b 3d ff ff       	call   c0007a66 <malloc>
c0013d3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d3f:	31 c9                	xor    ecx,ecx
c0013d41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d47:	5e                   	pop    esi
c0013d48:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d4c:	55                   	push   ebp
c0013d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d51:	51                   	push   ecx
c0013d52:	52                   	push   edx
c0013d53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d57:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d5b:	53                   	push   ebx
c0013d5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d5f:	83 c4 14             	add    esp,0x14
c0013d62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d66:	e8 fb 3c ff ff       	call   c0007a66 <malloc>
c0013d6b:	89 c6                	mov    esi,eax
c0013d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d72:	56                   	push   esi
c0013d73:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d77:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d7b:	51                   	push   ecx
c0013d7c:	52                   	push   edx
c0013d7d:	53                   	push   ebx
c0013d7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d85:	83 c4 1c             	add    esp,0x1c
c0013d88:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d8e:	c1 e8 04             	shr    eax,0x4
c0013d91:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d9c:	31 d2                	xor    edx,edx
c0013d9e:	52                   	push   edx
c0013d9f:	50                   	push   eax
c0013da0:	53                   	push   ebx
c0013da1:	e8 3e 73 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013da6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013da8:	31 d2                	xor    edx,edx
c0013daa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dad:	56                   	push   esi
c0013dae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013db2:	52                   	push   edx
c0013db3:	50                   	push   eax
c0013db4:	53                   	push   ebx
c0013db5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013db8:	83 c4 14             	add    esp,0x14
c0013dbb:	53                   	push   ebx
c0013dbc:	e8 c3 72 ff ff       	call   c000b084 <File::close()>
c0013dc1:	5d                   	pop    ebp
c0013dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dc6:	e8 ae 3c ff ff       	call   c0007a79 <free>
c0013dcb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dce:	e8 a6 3c ff ff       	call   c0007a79 <free>
c0013dd3:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013dd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013de6:	8d 50 01             	lea    edx,[eax+0x1]
c0013de9:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013df0:	b0 01                	mov    al,0x1
c0013df2:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013df8:	83 c4 5c             	add    esp,0x5c
c0013dfb:	5b                   	pop    ebx
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	5d                   	pop    ebp
c0013dff:	c3                   	ret    

c0013e00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e00:	55                   	push   ebp
c0013e01:	57                   	push   edi
c0013e02:	56                   	push   esi
c0013e03:	53                   	push   ebx
c0013e04:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e0a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e11:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e17:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0013e1b:	68 14 01 00 00       	push   0x114
c0013e20:	e8 41 3c ff ff       	call   c0007a66 <malloc>
c0013e25:	83 c4 0c             	add    esp,0xc
c0013e28:	53                   	push   ebx
c0013e29:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e30:	50                   	push   eax
c0013e31:	89 c6                	mov    esi,eax
c0013e33:	e8 30 71 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0013e38:	5f                   	pop    edi
c0013e39:	5d                   	pop    ebp
c0013e3a:	6a 01                	push   0x1
c0013e3c:	56                   	push   esi
c0013e3d:	e8 e4 71 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	85 c0                	test   eax,eax
c0013e47:	0f 85 bc 06 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e4d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e55:	83 ec 0c             	sub    esp,0xc
c0013e58:	6a 34                	push   0x34
c0013e5a:	e8 07 3c ff ff       	call   c0007a66 <malloc>
c0013e5f:	5b                   	pop    ebx
c0013e60:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e64:	89 c5                	mov    ebp,eax
c0013e66:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e68:	53                   	push   ebx
c0013e69:	55                   	push   ebp
c0013e6a:	6a 00                	push   0x0
c0013e6c:	6a 34                	push   0x34
c0013e6e:	56                   	push   esi
c0013e6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e72:	83 c4 20             	add    esp,0x20
c0013e75:	85 c0                	test   eax,eax
c0013e77:	0f 85 8c 06 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e7d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e84:	0f 85 7f 06 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e8a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e8d:	85 c0                	test   eax,eax
c0013e8f:	0f 84 74 06 00 00    	je     c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e95:	31 d2                	xor    edx,edx
c0013e97:	51                   	push   ecx
c0013e98:	52                   	push   edx
c0013e99:	50                   	push   eax
c0013e9a:	56                   	push   esi
c0013e9b:	e8 44 72 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	85 c0                	test   eax,eax
c0013ea5:	0f 85 5e 06 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013eab:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013eb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013eb9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ebd:	0f af c2             	imul   eax,edx
c0013ec0:	50                   	push   eax
c0013ec1:	e8 a0 3b ff ff       	call   c0007a66 <malloc>
c0013ec6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013ec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ecb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ecf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ed7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013edb:	0f af c2             	imul   eax,edx
c0013ede:	99                   	cdq    
c0013edf:	52                   	push   edx
c0013ee0:	50                   	push   eax
c0013ee1:	56                   	push   esi
c0013ee2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ee5:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013ee8:	83 c4 20             	add    esp,0x20
c0013eeb:	85 c0                	test   eax,eax
c0013eed:	0f 84 16 06 00 00    	je     c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013ef3:	52                   	push   edx
c0013ef4:	31 d2                	xor    edx,edx
c0013ef6:	52                   	push   edx
c0013ef7:	50                   	push   eax
c0013ef8:	56                   	push   esi
c0013ef9:	e8 e6 71 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	85 c0                	test   eax,eax
c0013f03:	0f 85 00 06 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f09:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f0d:	83 ec 0c             	sub    esp,0xc
c0013f10:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f14:	0f af c2             	imul   eax,edx
c0013f17:	50                   	push   eax
c0013f18:	e8 49 3b ff ff       	call   c0007a66 <malloc>
c0013f1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013f1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f2e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f32:	0f af c2             	imul   eax,edx
c0013f35:	99                   	cdq    
c0013f36:	52                   	push   edx
c0013f37:	50                   	push   eax
c0013f38:	56                   	push   esi
c0013f39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f3c:	83 c4 20             	add    esp,0x20
c0013f3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f47:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f4b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0013f4f:	0f 86 84 00 00 00    	jbe    c0013fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0013f55:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0013f59:	c1 e7 05             	shl    edi,0x5
c0013f5c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013f60:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f63:	75 63                	jne    c0013fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0013f65:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f68:	31 d2                	xor    edx,edx
c0013f6a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013f6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f71:	50                   	push   eax
c0013f72:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f75:	52                   	push   edx
c0013f76:	50                   	push   eax
c0013f77:	56                   	push   esi
c0013f78:	e8 67 71 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	85 c0                	test   eax,eax
c0013f82:	0f 85 81 05 00 00    	jne    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f88:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f8f:	83 ec 0c             	sub    esp,0xc
c0013f92:	31 d2                	xor    edx,edx
c0013f94:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0013f98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013f9a:	01 c3                	add    ebx,eax
c0013f9c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fa3:	50                   	push   eax
c0013fa4:	53                   	push   ebx
c0013fa5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013fa9:	52                   	push   edx
c0013faa:	50                   	push   eax
c0013fab:	56                   	push   esi
c0013fac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013faf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013fb2:	83 c4 1c             	add    esp,0x1c
c0013fb5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013fb8:	50                   	push   eax
c0013fb9:	6a 00                	push   0x0
c0013fbb:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0013fbf:	53                   	push   ebx
c0013fc0:	e8 2b c5 fe ff       	call   c00004f0 <memset>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fcc:	40                   	inc    eax
c0013fcd:	0f b7 c0             	movzx  eax,ax
c0013fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fd4:	e9 6e ff ff ff       	jmp    c0013f47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c0013fd9:	53                   	push   ebx
c0013fda:	68 00 01 00 00       	push   0x100
c0013fdf:	6a 00                	push   0x0
c0013fe1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fe5:	50                   	push   eax
c0013fe6:	e8 05 c5 fe ff       	call   c00004f0 <memset>
c0013feb:	83 c4 0c             	add    esp,0xc
c0013fee:	68 00 01 00 00       	push   0x100
c0013ff3:	6a 00                	push   0x0
c0013ff5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013ffc:	50                   	push   eax
c0013ffd:	e8 ee c4 fe ff       	call   c00004f0 <memset>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001400d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014015:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001401d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014025:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001402d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014035:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014039:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001403d:	0f 86 25 01 00 00    	jbe    c0014168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c0014043:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c0014048:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001404c:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c001404f:	52                   	push   edx
c0014050:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014058:	8b 07                	mov    eax,DWORD PTR [edi]
c001405a:	6b d2 28             	imul   edx,edx,0x28
c001405d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014061:	31 d2                	xor    edx,edx
c0014063:	52                   	push   edx
c0014064:	50                   	push   eax
c0014065:	56                   	push   esi
c0014066:	e8 79 70 ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c001406b:	83 c4 0c             	add    esp,0xc
c001406e:	6a 20                	push   0x20
c0014070:	6a 00                	push   0x0
c0014072:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014079:	51                   	push   ecx
c001407a:	e8 71 c4 fe ff       	call   c00004f0 <memset>
c001407f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014081:	59                   	pop    ecx
c0014082:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014086:	52                   	push   edx
c0014087:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001408e:	51                   	push   ecx
c001408f:	6a 00                	push   0x0
c0014091:	6a 1f                	push   0x1f
c0014093:	56                   	push   esi
c0014094:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014097:	83 c4 1c             	add    esp,0x1c
c001409a:	6a 09                	push   0x9
c001409c:	68 8f 0c 02 c0       	push   0xc0020c8f
c00140a1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140a8:	51                   	push   ecx
c00140a9:	e8 d2 c2 fe ff       	call   c0000380 <memcmp>
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	85 c0                	test   eax,eax
c00140b3:	75 1d                	jne    c00140d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c00140b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140bd:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00140c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140c4:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00140cb:	89 c8                	mov    eax,ecx
c00140cd:	40                   	inc    eax
c00140ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140d2:	50                   	push   eax
c00140d3:	6a 09                	push   0x9
c00140d5:	68 99 0c 02 c0       	push   0xc0020c99
c00140da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140e1:	50                   	push   eax
c00140e2:	e8 99 c2 fe ff       	call   c0000380 <memcmp>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	85 c0                	test   eax,eax
c00140ec:	75 1d                	jne    c001410b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c00140ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140f6:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00140fa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140fd:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014104:	89 c8                	mov    eax,ecx
c0014106:	40                   	inc    eax
c0014107:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001410b:	50                   	push   eax
c001410c:	50                   	push   eax
c001410d:	68 65 0c 02 c0       	push   0xc0020c65
c0014112:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014119:	50                   	push   eax
c001411a:	e8 91 c6 fe ff       	call   c00007b0 <strcmp>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	85 c0                	test   eax,eax
c0014124:	75 0b                	jne    c0014131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c0014126:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001412a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001412d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014131:	50                   	push   eax
c0014132:	50                   	push   eax
c0014133:	68 6d 0c 02 c0       	push   0xc0020c6d
c0014138:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001413f:	50                   	push   eax
c0014140:	e8 6b c6 fe ff       	call   c00007b0 <strcmp>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	85 c0                	test   eax,eax
c001414a:	75 0b                	jne    c0014157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c001414c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014150:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415b:	40                   	inc    eax
c001415c:	0f b7 c0             	movzx  eax,ax
c001415f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014163:	e9 cd fe ff ff       	jmp    c0014035 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c0014168:	50                   	push   eax
c0014169:	31 d2                	xor    edx,edx
c001416b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001416f:	52                   	push   edx
c0014170:	50                   	push   eax
c0014171:	56                   	push   esi
c0014172:	e8 6d 6f ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0014177:	58                   	pop    eax
c0014178:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001417c:	e8 e5 38 ff ff       	call   c0007a66 <malloc>
c0014181:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014183:	31 d2                	xor    edx,edx
c0014185:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014189:	58                   	pop    eax
c001418a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001418e:	53                   	push   ebx
c001418f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014193:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014197:	52                   	push   edx
c0014198:	50                   	push   eax
c0014199:	56                   	push   esi
c001419a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001419d:	83 c4 14             	add    esp,0x14
c00141a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141a4:	e8 bd 38 ff ff       	call   c0007a66 <malloc>
c00141a9:	31 d2                	xor    edx,edx
c00141ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141b6:	52                   	push   edx
c00141b7:	50                   	push   eax
c00141b8:	56                   	push   esi
c00141b9:	e8 26 6f ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c00141be:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00141c0:	31 d2                	xor    edx,edx
c00141c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141cd:	52                   	push   edx
c00141ce:	50                   	push   eax
c00141cf:	56                   	push   esi
c00141d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141d3:	83 c4 20             	add    esp,0x20
c00141d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00141de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00141e6:	0f 84 21 03 00 00    	je     c001450d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c00141ec:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00141f3:	31 d2                	xor    edx,edx
c00141f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141f9:	c1 e8 03             	shr    eax,0x3
c00141fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014200:	51                   	push   ecx
c0014201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014205:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014209:	52                   	push   edx
c001420a:	50                   	push   eax
c001420b:	56                   	push   esi
c001420c:	e8 d3 6e ff ff       	call   c000b0e4 <File::seek(unsigned long long)>
c0014211:	5b                   	pop    ebx
c0014212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014216:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001421d:	e8 44 38 ff ff       	call   c0007a66 <malloc>
c0014222:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014224:	31 d2                	xor    edx,edx
c0014226:	5f                   	pop    edi
c0014227:	89 c3                	mov    ebx,eax
c0014229:	8d 44 24 58          	lea    eax,[esp+0x58]
c001422d:	50                   	push   eax
c001422e:	53                   	push   ebx
c001422f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014233:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001423a:	52                   	push   edx
c001423b:	50                   	push   eax
c001423c:	56                   	push   esi
c001423d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014240:	83 c4 20             	add    esp,0x20
c0014243:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001424b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001424f:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0014253:	0f 8d 9b 02 00 00    	jge    c00144f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014259:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c001425e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014262:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0014265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001426d:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014271:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014275:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014279:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001427d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014281:	c1 e8 08             	shr    eax,0x8
c0014284:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014288:	89 c7                	mov    edi,eax
c001428a:	c1 e7 04             	shl    edi,0x4
c001428d:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c0014291:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c0014294:	85 c9                	test   ecx,ecx
c0014296:	0f 85 bf 00 00 00    	jne    c001435b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001429c:	83 ec 0c             	sub    esp,0xc
c001429f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142a3:	03 07                	add    eax,DWORD PTR [edi]
c00142a5:	50                   	push   eax
c00142a6:	e8 45 f8 ff ff       	call   c0013af0 <Thr::getAddressOfKernelSymbol(char const*)>
c00142ab:	83 c4 10             	add    esp,0x10
c00142ae:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00142b3:	85 c0                	test   eax,eax
c00142b5:	89 c1                	mov    ecx,eax
c00142b7:	0f 85 9e 00 00 00    	jne    c001435b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142c4:	03 07                	add    eax,DWORD PTR [edi]
c00142c6:	50                   	push   eax
c00142c7:	e8 54 c6 ff ff       	call   c0010920 <KeResolveCompatibilitySymbol(char*)>
c00142cc:	83 c4 10             	add    esp,0x10
c00142cf:	85 c0                	test   eax,eax
c00142d1:	89 c1                	mov    ecx,eax
c00142d3:	0f 85 82 00 00 00    	jne    c001435b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00142d9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00142dd:	50                   	push   eax
c00142de:	50                   	push   eax
c00142df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142e3:	03 07                	add    eax,DWORD PTR [edi]
c00142e5:	50                   	push   eax
c00142e6:	68 a3 0c 02 c0       	push   0xc0020ca3
c00142eb:	e8 f6 66 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00142f0:	58                   	pop    eax
c00142f1:	5a                   	pop    edx
c00142f2:	68 bd 0c 02 c0       	push   0xc0020cbd
c00142f7:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00142fe:	52                   	push   edx
c00142ff:	e8 8c c3 fe ff       	call   c0000690 <strcpy>
c0014304:	59                   	pop    ecx
c0014305:	58                   	pop    eax
c0014306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001430a:	03 07                	add    eax,DWORD PTR [edi]
c001430c:	50                   	push   eax
c001430d:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014314:	52                   	push   edx
c0014315:	e8 86 c5 fe ff       	call   c00008a0 <strcat>
c001431a:	58                   	pop    eax
c001431b:	5a                   	pop    edx
c001431c:	68 53 0d 02 c0       	push   0xc0020d53
c0014321:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014328:	52                   	push   edx
c0014329:	e8 72 c5 fe ff       	call   c00008a0 <strcat>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014336:	0f 84 75 01 00 00    	je     c00144b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014346:	52                   	push   edx
c0014347:	e8 e9 c3 ff ff       	call   c0010735 <KePanic(char const*)>
c001434c:	83 c4 10             	add    esp,0x10
c001434f:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c0014353:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014357:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001435b:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c0014360:	0f 85 90 00 00 00    	jne    c00143f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c0014366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001436a:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014371:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014375:	01 f8                	add    eax,edi
c0014377:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001437f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014383:	8b 00                	mov    eax,DWORD PTR [eax]
c0014385:	0f 94 c2             	sete   dl
c0014388:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014390:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014395:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c0014399:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001439e:	74 39                	je     c00143d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c00143a0:	8d 3c 08             	lea    edi,[eax+ecx*1]
c00143a3:	84 d2                	test   dl,dl
c00143a5:	75 15                	jne    c00143bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c00143a7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143ab:	66 83 f8 0c          	cmp    ax,0xc
c00143af:	76 05                	jbe    c00143b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00143b1:	b8 0c 00 00 00       	mov    eax,0xc
c00143b6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143ba:	76 2f                	jbe    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143bc:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00143c1:	0f 84 ea 00 00 00    	je     c00144b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00143c7:	83 ec 0c             	sub    esp,0xc
c00143ca:	68 d4 0c 02 c0       	push   0xc0020cd4
c00143cf:	e8 61 c3 ff ff       	call   c0010735 <KePanic(char const*)>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	eb 12                	jmp    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143d9:	01 c7                	add    edi,eax
c00143db:	84 d2                	test   dl,dl
c00143dd:	75 0c                	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143df:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143e3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143e7:	77 02                	ja     c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143e9:	01 cf                	add    edi,ecx
c00143eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143ef:	89 38                	mov    DWORD PTR [eax],edi
c00143f1:	e9 f5 00 00 00       	jmp    c00144eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00143f6:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c00143fb:	0f 85 82 00 00 00    	jne    c0014483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c0014401:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014408:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c001440c:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0014410:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014418:	74 21                	je     c001443b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c001441a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014422:	74 17                	je     c001443b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014424:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0014428:	b8 0a 00 00 00       	mov    eax,0xa
c001442d:	83 fa 0e             	cmp    edx,0xe
c0014430:	77 03                	ja     c0014435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c0014432:	8d 42 fc             	lea    eax,[edx-0x4]
c0014435:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014439:	76 1f                	jbe    c001445a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c001443b:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014440:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014444:	74 6b                	je     c00144b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	68 f0 0c 02 c0       	push   0xc0020cf0
c001444e:	e8 e2 c2 ff ff       	call   c0010735 <KePanic(char const*)>
c0014453:	83 c4 10             	add    esp,0x10
c0014456:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001445a:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001445f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014461:	74 16                	je     c0014479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c0014463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014467:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001446e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014472:	01 c2                	add    edx,eax
c0014474:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014477:	eb 06                	jmp    c001447f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014479:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001447d:	01 c8                	add    eax,ecx
c001447f:	89 07                	mov    DWORD PTR [edi],eax
c0014481:	eb 68                	jmp    c00144eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014483:	57                   	push   edi
c0014484:	57                   	push   edi
c0014485:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001448a:	50                   	push   eax
c001448b:	68 0c 0d 02 c0       	push   0xc0020d0c
c0014490:	e8 51 65 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0014495:	83 c4 10             	add    esp,0x10
c0014498:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c001449d:	74 12                	je     c00144b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001449f:	83 ec 0c             	sub    esp,0xc
c00144a2:	68 17 0d 02 c0       	push   0xc0020d17
c00144a7:	e8 89 c2 ff ff       	call   c0010735 <KePanic(char const*)>
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	eb 3a                	jmp    c00144eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00144b1:	83 ec 0c             	sub    esp,0xc
c00144b4:	56                   	push   esi
c00144b5:	e8 ca 6b ff ff       	call   c000b084 <File::close()>
c00144ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00144bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00144bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144c5:	e8 af 35 ff ff       	call   c0007a79 <free>
c00144ca:	59                   	pop    ecx
c00144cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144cf:	e8 a5 35 ff ff       	call   c0007a79 <free>
c00144d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144d7:	e8 9d 35 ff ff       	call   c0007a79 <free>
c00144dc:	5b                   	pop    ebx
c00144dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144e1:	e8 93 35 ff ff       	call   c0007a79 <free>
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	eb 1e                	jmp    c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00144eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00144ef:	e9 57 fd ff ff       	jmp    c001424b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c00144f4:	83 ec 0c             	sub    esp,0xc
c00144f7:	53                   	push   ebx
c00144f8:	e8 7c 35 ff ff       	call   c0007a79 <free>
c00144fd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014501:	83 c4 10             	add    esp,0x10
c0014504:	e9 d5 fc ff ff       	jmp    c00141de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c0014509:	31 c0                	xor    eax,eax
c001450b:	eb 32                	jmp    c001453f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001450d:	83 ec 0c             	sub    esp,0xc
c0014510:	56                   	push   esi
c0014511:	e8 6e 6b ff ff       	call   c000b084 <File::close()>
c0014516:	8b 06                	mov    eax,DWORD PTR [esi]
c0014518:	89 34 24             	mov    DWORD PTR [esp],esi
c001451b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001451e:	58                   	pop    eax
c001451f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014523:	e8 51 35 ff ff       	call   c0007a79 <free>
c0014528:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001452b:	e8 49 35 ff ff       	call   c0007a79 <free>
c0014530:	5a                   	pop    edx
c0014531:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014535:	e8 3f 35 ff ff       	call   c0007a79 <free>
c001453a:	83 c4 10             	add    esp,0x10
c001453d:	b0 01                	mov    al,0x1
c001453f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014545:	5b                   	pop    ebx
c0014546:	5e                   	pop    esi
c0014547:	5f                   	pop    edi
c0014548:	5d                   	pop    ebp
c0014549:	c3                   	ret    

c001454a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001454a:	56                   	push   esi
c001454b:	31 d2                	xor    edx,edx
c001454d:	53                   	push   ebx
c001454e:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014554:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014558:	39 d3                	cmp    ebx,edx
c001455a:	7e 1b                	jle    c0014577 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001455c:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014563:	39 c8                	cmp    eax,ecx
c0014565:	77 0d                	ja     c0014574 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014567:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001456e:	01 c6                	add    esi,eax
c0014570:	39 ce                	cmp    esi,ecx
c0014572:	77 05                	ja     c0014579 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014574:	42                   	inc    edx
c0014575:	eb e1                	jmp    c0014558 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014577:	31 c0                	xor    eax,eax
c0014579:	5b                   	pop    ebx
c001457a:	5e                   	pop    esi
c001457b:	c3                   	ret    

c001457c <Thr::getDriverNameFromAddress(unsigned long)>:
c001457c:	53                   	push   ebx
c001457d:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014583:	31 c0                	xor    eax,eax
c0014585:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014589:	39 c3                	cmp    ebx,eax
c001458b:	7e 22                	jle    c00145af <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001458d:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014594:	39 ca                	cmp    edx,ecx
c0014596:	77 14                	ja     c00145ac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014598:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001459f:	39 ca                	cmp    edx,ecx
c00145a1:	76 09                	jbe    c00145ac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145a3:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145aa:	eb 05                	jmp    c00145b1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145ac:	40                   	inc    eax
c00145ad:	eb da                	jmp    c0014589 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145af:	31 c0                	xor    eax,eax
c00145b1:	5b                   	pop    ebx
c00145b2:	c3                   	ret    

c00145b3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145b3:	53                   	push   ebx
c00145b4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145b8:	53                   	push   ebx
c00145b9:	e8 8c ff ff ff       	call   c001454a <Thr::getDriverBaseFromAddress(unsigned long)>
c00145be:	5a                   	pop    edx
c00145bf:	31 d2                	xor    edx,edx
c00145c1:	85 c0                	test   eax,eax
c00145c3:	74 04                	je     c00145c9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145c5:	89 da                	mov    edx,ebx
c00145c7:	29 c2                	sub    edx,eax
c00145c9:	5b                   	pop    ebx
c00145ca:	89 d0                	mov    eax,edx
c00145cc:	c3                   	ret    

c00145cd <Thr::loadDLL(char const*, bool)>:
c00145cd:	55                   	push   ebp
c00145ce:	57                   	push   edi
c00145cf:	56                   	push   esi
c00145d0:	53                   	push   ebx
c00145d1:	81 ec 34 01 00 00    	sub    esp,0x134
c00145d7:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c00145de:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c00145e5:	57                   	push   edi
c00145e6:	68 2f 0d 02 c0       	push   0xc0020d2f
c00145eb:	e8 f6 63 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00145f0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145f7:	e8 6a 34 ff ff       	call   c0007a66 <malloc>
c00145fc:	83 c4 0c             	add    esp,0xc
c00145ff:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014605:	57                   	push   edi
c0014606:	50                   	push   eax
c0014607:	89 c6                	mov    esi,eax
c0014609:	e8 5a 69 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c001460e:	83 c4 10             	add    esp,0x10
c0014611:	85 f6                	test   esi,esi
c0014613:	75 3a                	jne    c001464f <Thr::loadDLL(char const*, bool)+0x82>
c0014615:	84 db                	test   bl,bl
c0014617:	0f 84 df 01 00 00    	je     c00147fc <Thr::loadDLL(char const*, bool)+0x22f>
c001461d:	50                   	push   eax
c001461e:	50                   	push   eax
c001461f:	68 40 0d 02 c0       	push   0xc0020d40
c0014624:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014628:	55                   	push   ebp
c0014629:	e8 62 c0 fe ff       	call   c0000690 <strcpy>
c001462e:	58                   	pop    eax
c001462f:	5a                   	pop    edx
c0014630:	57                   	push   edi
c0014631:	55                   	push   ebp
c0014632:	e8 69 c2 fe ff       	call   c00008a0 <strcat>
c0014637:	59                   	pop    ecx
c0014638:	58                   	pop    eax
c0014639:	68 53 0d 02 c0       	push   0xc0020d53
c001463e:	55                   	push   ebp
c001463f:	e8 5c c2 fe ff       	call   c00008a0 <strcat>
c0014644:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014647:	e8 e9 c0 ff ff       	call   c0010735 <KePanic(char const*)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	50                   	push   eax
c0014650:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014654:	50                   	push   eax
c0014655:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014659:	50                   	push   eax
c001465a:	56                   	push   esi
c001465b:	e8 6c 6c ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	85 f6                	test   esi,esi
c0014665:	74 0c                	je     c0014673 <Thr::loadDLL(char const*, bool)+0xa6>
c0014667:	8b 06                	mov    eax,DWORD PTR [esi]
c0014669:	83 ec 0c             	sub    esp,0xc
c001466c:	56                   	push   esi
c001466d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014678:	75 0a                	jne    c0014684 <Thr::loadDLL(char const*, bool)+0xb7>
c001467a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014682:	75 3c                	jne    c00146c0 <Thr::loadDLL(char const*, bool)+0xf3>
c0014684:	31 f6                	xor    esi,esi
c0014686:	84 db                	test   bl,bl
c0014688:	0f 84 6e 01 00 00    	je     c00147fc <Thr::loadDLL(char const*, bool)+0x22f>
c001468e:	50                   	push   eax
c001468f:	50                   	push   eax
c0014690:	68 40 0d 02 c0       	push   0xc0020d40
c0014695:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014699:	56                   	push   esi
c001469a:	e8 f1 bf fe ff       	call   c0000690 <strcpy>
c001469f:	58                   	pop    eax
c00146a0:	5a                   	pop    edx
c00146a1:	57                   	push   edi
c00146a2:	56                   	push   esi
c00146a3:	e8 f8 c1 fe ff       	call   c00008a0 <strcat>
c00146a8:	59                   	pop    ecx
c00146a9:	5d                   	pop    ebp
c00146aa:	68 53 0d 02 c0       	push   0xc0020d53
c00146af:	56                   	push   esi
c00146b0:	e8 eb c1 fe ff       	call   c00008a0 <strcat>
c00146b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00146b8:	e8 78 c0 ff ff       	call   c0010735 <KePanic(char const*)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	56                   	push   esi
c00146c1:	6a 03                	push   0x3
c00146c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146cb:	05 ff 0f 00 00       	add    eax,0xfff
c00146d0:	83 d2 00             	adc    edx,0x0
c00146d3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146d7:	50                   	push   eax
c00146d8:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146de:	e8 03 57 ff ff       	call   c0009de6 <VAS::allocatePages(int, int)>
c00146e3:	89 c6                	mov    esi,eax
c00146e5:	58                   	pop    eax
c00146e6:	5a                   	pop    edx
c00146e7:	56                   	push   esi
c00146e8:	68 ce f8 01 c0       	push   0xc001f8ce
c00146ed:	e8 f4 62 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00146f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146f5:	e8 96 be fe ff       	call   c0000590 <strlen>
c00146fa:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c0014700:	40                   	inc    eax
c0014701:	89 04 24             	mov    DWORD PTR [esp],eax
c0014704:	e8 5d 33 ff ff       	call   c0007a66 <malloc>
c0014709:	59                   	pop    ecx
c001470a:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014711:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014716:	5d                   	pop    ebp
c0014717:	57                   	push   edi
c0014718:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001471f:	e8 6c bf fe ff       	call   c0000690 <strcpy>
c0014724:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014729:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c0014730:	8d 50 01             	lea    edx,[eax+0x1]
c0014733:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014739:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001473d:	83 c4 0c             	add    esp,0xc
c0014740:	6a 01                	push   0x1
c0014742:	56                   	push   esi
c0014743:	57                   	push   edi
c0014744:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001474b:	e8 b0 f6 ff ff       	call   c0013e00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014750:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001475c:	74 2d                	je     c001478b <Thr::loadDLL(char const*, bool)+0x1be>
c001475e:	84 db                	test   bl,bl
c0014760:	74 12                	je     c0014774 <Thr::loadDLL(char const*, bool)+0x1a7>
c0014762:	83 ec 0c             	sub    esp,0xc
c0014765:	68 55 0d 02 c0       	push   0xc0020d55
c001476a:	e8 c6 bf ff ff       	call   c0010735 <KePanic(char const*)>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	eb 07                	jmp    c001477b <Thr::loadDLL(char const*, bool)+0x1ae>
c0014774:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014779:	75 10                	jne    c001478b <Thr::loadDLL(char const*, bool)+0x1be>
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	68 74 0d 02 c0       	push   0xc0020d74
c0014783:	e8 ad bf ff ff       	call   c0010735 <KePanic(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	31 ff                	xor    edi,edi
c001478d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014791:	bb 00 00 00 00       	mov    ebx,0x0
c0014796:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001479a:	05 ff 0f 00 00       	add    eax,0xfff
c001479f:	83 d2 00             	adc    edx,0x0
c00147a2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147aa:	c1 ea 0c             	shr    edx,0xc
c00147ad:	89 d8                	mov    eax,ebx
c00147af:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00147b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147b7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147bb:	73 32                	jae    c00147ef <Thr::loadDLL(char const*, bool)+0x222>
c00147bd:	50                   	push   eax
c00147be:	50                   	push   eax
c00147bf:	89 f8                	mov    eax,edi
c00147c1:	c1 e0 0c             	shl    eax,0xc
c00147c4:	01 f0                	add    eax,esi
c00147c6:	50                   	push   eax
c00147c7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147cd:	e8 b8 50 ff ff       	call   c000988a <VAS::getPageTableEntry(unsigned long)>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00147d7:	a8 60                	test   al,0x60
c00147d9:	75 11                	jne    c00147ec <Thr::loadDLL(char const*, bool)+0x21f>
c00147db:	83 ec 0c             	sub    esp,0xc
c00147de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147e3:	50                   	push   eax
c00147e4:	e8 2b 35 ff ff       	call   c0007d14 <Phys::freePage(unsigned long)>
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	47                   	inc    edi
c00147ed:	eb 9e                	jmp    c001478d <Thr::loadDLL(char const*, bool)+0x1c0>
c00147ef:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00147f4:	b8 00 00 00 00       	mov    eax,0x0
c00147f9:	0f 44 f0             	cmove  esi,eax
c00147fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014802:	89 f0                	mov    eax,esi
c0014804:	5b                   	pop    ebx
c0014805:	5e                   	pop    esi
c0014806:	5f                   	pop    edi
c0014807:	5d                   	pop    ebp
c0014808:	c3                   	ret    

c0014809 <Thr::executeDLL(unsigned long, void*)>:
c0014809:	56                   	push   esi
c001480a:	53                   	push   ebx
c001480b:	52                   	push   edx
c001480c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014810:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014814:	85 db                	test   ebx,ebx
c0014816:	75 10                	jne    c0014828 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	68 90 0d 02 c0       	push   0xc0020d90
c0014820:	e8 10 bf ff ff       	call   c0010735 <KePanic(char const*)>
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	50                   	push   eax
c0014829:	50                   	push   eax
c001482a:	53                   	push   ebx
c001482b:	68 ba 0d 02 c0       	push   0xc0020dba
c0014830:	e8 b1 61 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0014835:	89 d8                	mov    eax,ebx
c0014837:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001483b:	83 c4 14             	add    esp,0x14
c001483e:	5b                   	pop    ebx
c001483f:	5e                   	pop    esi
c0014840:	ff e0                	jmp    eax
c0014842:	66 90                	xchg   ax,ax
c0014844:	66 90                	xchg   ax,ax
c0014846:	66 90                	xchg   ax,ax
c0014848:	66 90                	xchg   ax,ax
c001484a:	66 90                	xchg   ax,ax
c001484c:	66 90                	xchg   ax,ax
c001484e:	66 90                	xchg   ax,ax

c0014850 <userModeEntryPoint(void*)>:
c0014850:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014855:	48                   	dec    eax
c0014856:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001485b:	75 03                	jne    c0014860 <userModeEntryPoint(void*)+0x10>
c001485d:	fb                   	sti    
c001485e:	66 90                	xchg   ax,ax
c0014860:	fb                   	sti    
c0014861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014866:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014869:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001486f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014873:	e9 c7 b9 fe ff       	jmp    c000023f <goToUsermode>

c0014878 <changeTSS>:
c0014878:	83 ec 1c             	sub    esp,0x1c
c001487b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014880:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014883:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014888:	c1 e2 15             	shl    edx,0x15
c001488b:	29 d0                	sub    eax,edx
c001488d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014891:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014896:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001489c:	05 7c 11 00 00       	add    eax,0x117c
c00148a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a4:	e8 47 46 ff ff       	call   c0008ef0 <TSS::setESP(unsigned long)>
c00148a9:	83 c4 1c             	add    esp,0x1c
c00148ac:	c3                   	ret    
c00148ad:	8d 76 00             	lea    esi,[esi+0x0]

c00148b0 <switchToThread(ThreadControlBlock*)>:
c00148b0:	83 ec 1c             	sub    esp,0x1c
c00148b3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00148b7:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c00148bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00148c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00148c5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00148c9:	85 f6                	test   esi,esi
c00148cb:	0f 85 97 00 00 00    	jne    c0014968 <switchToThread(ThreadControlBlock*)+0xb8>
c00148d1:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c00148d5:	3c ff                	cmp    al,0xff
c00148d7:	0f 84 87 00 00 00    	je     c0014964 <switchToThread(ThreadControlBlock*)+0xb4>
c00148dd:	0f b6 d0             	movzx  edx,al
c00148e0:	b8 00 04 00 00       	mov    eax,0x400
c00148e5:	29 d0                	sub    eax,edx
c00148e7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148ea:	d1 f8                	sar    eax,1
c00148ec:	01 d0                	add    eax,edx
c00148ee:	66 90                	xchg   ax,ax
c00148f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148f3:	e8 bb 25 00 00       	call   c0016eb3 <HalQueryPerformanceCounter()>
c00148f8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148fd:	89 c6                	mov    esi,eax
c00148ff:	89 d7                	mov    edi,edx
c0014901:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014907:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c001490c:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014912:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014918:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001491e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014924:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c001492a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014930:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014933:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014936:	01 c6                	add    esi,eax
c0014938:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001493b:	11 d7                	adc    edi,edx
c001493d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014940:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014943:	e8 2f b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014948:	0f 20 c0             	mov    eax,cr0
c001494b:	83 c8 08             	or     eax,0x8
c001494e:	0f 22 c0             	mov    cr0,eax
c0014951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014959:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001495d:	83 c4 1c             	add    esp,0x1c
c0014960:	c3                   	ret    
c0014961:	8d 76 00             	lea    esi,[esi+0x0]
c0014964:	31 c0                	xor    eax,eax
c0014966:	eb 88                	jmp    c00148f0 <switchToThread(ThreadControlBlock*)+0x40>
c0014968:	b9 01 00 00 00       	mov    ecx,0x1
c001496d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014971:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0014977:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001497b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001497f:	83 c4 1c             	add    esp,0x1c
c0014982:	c3                   	ret    
c0014983:	90                   	nop

c0014984 <Process::addArgs(char**)>:
c0014984:	57                   	push   edi
c0014985:	31 c0                	xor    eax,eax
c0014987:	56                   	push   esi
c0014988:	53                   	push   ebx
c0014989:	83 ec 10             	sub    esp,0x10
c001498c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0014990:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014994:	85 ff                	test   edi,edi
c0014996:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c001499c:	74 42                	je     c00149e0 <Process::addArgs(char**)+0x5c>
c001499e:	8b 07                	mov    eax,DWORD PTR [edi]
c00149a0:	85 c0                	test   eax,eax
c00149a2:	74 3c                	je     c00149e0 <Process::addArgs(char**)+0x5c>
c00149a4:	31 db                	xor    ebx,ebx
c00149a6:	66 90                	xchg   ax,ax
c00149a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00149ab:	e8 e0 bb fe ff       	call   c0000590 <strlen>
c00149b0:	40                   	inc    eax
c00149b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00149b4:	e8 ad 30 ff ff       	call   c0007a66 <malloc>
c00149b9:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00149c0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00149c3:	43                   	inc    ebx
c00149c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00149cb:	e8 c0 bc fe ff       	call   c0000690 <strcpy>
c00149d0:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00149d6:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00149d9:	85 c0                	test   eax,eax
c00149db:	75 cb                	jne    c00149a8 <Process::addArgs(char**)+0x24>
c00149dd:	8d 76 00             	lea    esi,[esi+0x0]
c00149e0:	83 c4 10             	add    esp,0x10
c00149e3:	5b                   	pop    ebx
c00149e4:	5e                   	pop    esi
c00149e5:	5f                   	pop    edi
c00149e6:	c3                   	ret    
c00149e7:	90                   	nop

c00149e8 <Process::Process(char const*, Process*, char**)>:
c00149e8:	56                   	push   esi
c00149e9:	53                   	push   ebx
c00149ea:	83 ec 24             	sub    esp,0x24
c00149ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149f1:	05 0c 02 00 00       	add    eax,0x20c
c00149f6:	bb 07 00 00 00       	mov    ebx,0x7
c00149fb:	89 c6                	mov    esi,eax
c00149fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014a00:	85 db                	test   ebx,ebx
c0014a02:	78 10                	js     c0014a14 <Process::Process(char const*, Process*, char**)+0x2c>
c0014a04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a07:	e8 bc a1 00 00       	call   c001ebc8 <ThreadControlBlock::ThreadControlBlock()>
c0014a0c:	83 c6 5f             	add    esi,0x5f
c0014a0f:	4b                   	dec    ebx
c0014a10:	eb ee                	jmp    c0014a00 <Process::Process(char const*, Process*, char**)+0x18>
c0014a12:	66 90                	xchg   ax,ax
c0014a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a31:	e8 f4 ba ff ff       	call   c001052a <Krnl::newProcessEnv(Process*)>
c0014a36:	89 c2                	mov    edx,eax
c0014a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a3c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a46:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a4f:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c0014a54:	8d 50 01             	lea    edx,[eax+0x1]
c0014a57:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c0014a5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014a61:	89 02                	mov    DWORD PTR [edx],eax
c0014a63:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c0014a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a72:	e8 ef 2f ff ff       	call   c0007a66 <malloc>
c0014a77:	89 c3                	mov    ebx,eax
c0014a79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014a81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a84:	e8 5d 57 ff ff       	call   c000a1e6 <VAS::VAS(bool)>
c0014a89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a8d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a97:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014aa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aa5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014aa9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014aaf:	e8 6e c0 ff ff       	call   c0010b22 <KeInitSignals()>
c0014ab4:	89 c2                	mov    edx,eax
c0014ab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ac0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ac4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aca:	85 c0                	test   eax,eax
c0014acc:	74 42                	je     c0014b10 <Process::Process(char const*, Process*, char**)+0x128>
c0014ace:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ad2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ad8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ae2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014af2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014af8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014afc:	05 0c 01 00 00       	add    eax,0x10c
c0014b01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b05:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b08:	e8 83 bb fe ff       	call   c0000690 <strcpy>
c0014b0d:	eb 5d                	jmp    c0014b6c <Process::Process(char const*, Process*, char**)+0x184>
c0014b0f:	90                   	nop
c0014b10:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0014b18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b1f:	e8 42 2f ff ff       	call   c0007a66 <malloc>
c0014b24:	89 c3                	mov    ebx,eax
c0014b26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b31:	e8 ae 40 ff ff       	call   c0008be4 <VgaText::VgaText(char const*)>
c0014b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b3a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b4d:	e8 3c 39 ff ff       	call   c000848e <addToTerminalCycle(VgaText*)>
c0014b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b56:	05 0c 01 00 00       	add    eax,0x10c
c0014b5b:	c7 44 24 04 d9 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dd9
c0014b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b66:	e8 25 bb fe ff       	call   c0000690 <strcpy>
c0014b6b:	90                   	nop
c0014b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b70:	8d 50 0c             	lea    edx,[eax+0xc]
c0014b73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b7b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014b7e:	e8 0d bb fe ff       	call   c0000690 <strcpy>
c0014b83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014b87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b92:	e8 ed fd ff ff       	call   c0014984 <Process::addArgs(char**)>
c0014b97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ba3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ba6:	e8 0f ed ff ff       	call   c00138ba <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014baf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014bb4:	34 01                	xor    al,0x1
c0014bb6:	88 c2                	mov    dl,al
c0014bb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bbc:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bc2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014bc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bcb:	c7 04 24 30 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e30
c0014bd2:	e8 0f 5e ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0014bd7:	90                   	nop
c0014bd8:	83 c4 24             	add    esp,0x24
c0014bdb:	5b                   	pop    ebx
c0014bdc:	5e                   	pop    esi
c0014bdd:	c3                   	ret    
c0014bde:	66 90                	xchg   ax,ax

c0014be0 <Process::Process(bool, char const*, Process*, char**)>:
c0014be0:	56                   	push   esi
c0014be1:	53                   	push   ebx
c0014be2:	83 ec 34             	sub    esp,0x34
c0014be5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014be9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014bed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014bf1:	05 0c 02 00 00       	add    eax,0x20c
c0014bf6:	bb 07 00 00 00       	mov    ebx,0x7
c0014bfb:	89 c6                	mov    esi,eax
c0014bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0014c00:	85 db                	test   ebx,ebx
c0014c02:	78 10                	js     c0014c14 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0014c04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c07:	e8 bc 9f 00 00       	call   c001ebc8 <ThreadControlBlock::ThreadControlBlock()>
c0014c0c:	83 c6 5f             	add    esi,0x5f
c0014c0f:	4b                   	dec    ebx
c0014c10:	eb ee                	jmp    c0014c00 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c12:	66 90                	xchg   ax,ax
c0014c14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c31:	e8 f4 b8 ff ff       	call   c001052a <Krnl::newProcessEnv(Process*)>
c0014c36:	89 c2                	mov    edx,eax
c0014c38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c3c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c46:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c4f:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c0014c54:	8d 50 01             	lea    edx,[eax+0x1]
c0014c57:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c0014c5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014c61:	89 02                	mov    DWORD PTR [edx],eax
c0014c63:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c0014c6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c72:	e8 ef 2d ff ff       	call   c0007a66 <malloc>
c0014c77:	89 c3                	mov    ebx,eax
c0014c79:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014c7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c85:	e8 5c 55 ff ff       	call   c000a1e6 <VAS::VAS(bool)>
c0014c8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c8e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c98:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ca2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ca6:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014caa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014cb0:	e8 6d be ff ff       	call   c0010b22 <KeInitSignals()>
c0014cb5:	89 c2                	mov    edx,eax
c0014cb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cbb:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cc5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ccb:	85 c0                	test   eax,eax
c0014ccd:	74 41                	je     c0014d10 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0014ccf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cd3:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cd9:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cdf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ce3:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ce9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ced:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cf3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cfd:	05 0c 01 00 00       	add    eax,0x10c
c0014d02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014d06:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d09:	e8 82 b9 fe ff       	call   c0000690 <strcpy>
c0014d0e:	eb 5c                	jmp    c0014d6c <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0014d10:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0014d18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d1f:	e8 42 2d ff ff       	call   c0007a66 <malloc>
c0014d24:	89 c3                	mov    ebx,eax
c0014d26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d31:	e8 ae 3e ff ff       	call   c0008be4 <VgaText::VgaText(char const*)>
c0014d36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d3a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d4d:	e8 3c 37 ff ff       	call   c000848e <addToTerminalCycle(VgaText*)>
c0014d52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d56:	05 0c 01 00 00       	add    eax,0x10c
c0014d5b:	c7 44 24 04 d9 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dd9
c0014d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d66:	e8 25 b9 fe ff       	call   c0000690 <strcpy>
c0014d6b:	90                   	nop
c0014d6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d70:	8d 50 0c             	lea    edx,[eax+0xc]
c0014d73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d7b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014d7e:	e8 0d b9 fe ff       	call   c0000690 <strcpy>
c0014d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d92:	e8 ed fb ff ff       	call   c0014984 <Process::addArgs(char**)>
c0014d97:	90                   	nop
c0014d98:	83 c4 34             	add    esp,0x34
c0014d9b:	5b                   	pop    ebx
c0014d9c:	5e                   	pop    esi
c0014d9d:	c3                   	ret    
c0014d9e:	66 90                	xchg   ax,ax

c0014da0 <taskStartupFunction>:
c0014da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014da5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014da8:	c3                   	ret    
c0014da9:	90                   	nop
c0014daa:	66 90                	xchg   ax,ax

c0014dac <Semaphore::Semaphore(int)>:
c0014dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db4:	89 10                	mov    DWORD PTR [eax],edx
c0014db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014dd7:	90                   	nop
c0014dd8:	c3                   	ret    
c0014dd9:	90                   	nop
c0014dda:	66 90                	xchg   ax,ax

c0014ddc <Mutex::Mutex()>:
c0014ddc:	83 ec 08             	sub    esp,0x8
c0014ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014de3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0014deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dee:	e8 b9 ff ff ff       	call   c0014dac <Semaphore::Semaphore(int)>
c0014df3:	90                   	nop
c0014df4:	83 c4 08             	add    esp,0x8
c0014df7:	c3                   	ret    

c0014df8 <Process::createThread(void (*)(void*), void*, int)>:
c0014df8:	57                   	push   edi
c0014df9:	31 c9                	xor    ecx,ecx
c0014dfb:	56                   	push   esi
c0014dfc:	53                   	push   ebx
c0014dfd:	83 ec 10             	sub    esp,0x10
c0014e00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014e04:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c0014e0b:	89 d0                	mov    eax,edx
c0014e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e10:	a8 01                	test   al,0x1
c0014e12:	74 14                	je     c0014e28 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e14:	d1 e8                	shr    eax,1
c0014e16:	41                   	inc    ecx
c0014e17:	83 f9 10             	cmp    ecx,0x10
c0014e1a:	75 f4                	jne    c0014e10 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	31 db                	xor    ebx,ebx
c0014e21:	89 d8                	mov    eax,ebx
c0014e23:	5b                   	pop    ebx
c0014e24:	5e                   	pop    esi
c0014e25:	5f                   	pop    edi
c0014e26:	c3                   	ret    
c0014e27:	90                   	nop
c0014e28:	b8 01 00 00 00       	mov    eax,0x1
c0014e2d:	d3 e0                	shl    eax,cl
c0014e2f:	09 d0                	or     eax,edx
c0014e31:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014e38:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e3b:	c1 e0 05             	shl    eax,0x5
c0014e3e:	29 c8                	sub    eax,ecx
c0014e40:	01 d8                	add    eax,ebx
c0014e42:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e49:	75 09                	jne    c0014e54 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014e4b:	31 f6                	xor    esi,esi
c0014e4d:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0014e53:	90                   	nop
c0014e54:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e5a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e5d:	c1 e6 05             	shl    esi,0x5
c0014e60:	29 ce                	sub    esi,ecx
c0014e62:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e65:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e68:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e6e:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e74:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e7a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e8b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e91:	89 ca                	mov    edx,ecx
c0014e93:	31 c9                	xor    ecx,ecx
c0014e95:	f7 da                	neg    edx
c0014e97:	c1 e2 15             	shl    edx,0x15
c0014e9a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014ea0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014ea6:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c0014eab:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014eb1:	31 d2                	xor    edx,edx
c0014eb3:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c0014eb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ebd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014ec3:	31 d2                	xor    edx,edx
c0014ec5:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c0014ecb:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c0014ed1:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014ed8:	e8 89 2b ff ff       	call   c0007a66 <malloc>
c0014edd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014ee0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014ee4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014eeb:	e8 98 9a 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ef0:	83 c4 10             	add    esp,0x10
c0014ef3:	89 d8                	mov    eax,ebx
c0014ef5:	5b                   	pop    ebx
c0014ef6:	5e                   	pop    esi
c0014ef7:	5f                   	pop    edi
c0014ef8:	c3                   	ret    
c0014ef9:	90                   	nop
c0014efa:	66 90                	xchg   ax,ax

c0014efc <Process::createUserThread()>:
c0014efc:	83 ec 1c             	sub    esp,0x1c
c0014eff:	b8 80 00 00 00       	mov    eax,0x80
c0014f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f0c:	31 d2                	xor    edx,edx
c0014f0e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0014f12:	b9 50 48 01 c0       	mov    ecx,0xc0014850
c0014f17:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0014f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f1e:	e8 d5 fe ff ff       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c0014f23:	83 c4 1c             	add    esp,0x1c
c0014f26:	c3                   	ret    
c0014f27:	90                   	nop

c0014f28 <setupMultitasking(void (*)())>:
c0014f28:	56                   	push   esi
c0014f29:	53                   	push   ebx
c0014f2a:	83 ec 24             	sub    esp,0x24
c0014f2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014f31:	eb 0d                	jmp    c0014f40 <setupMultitasking(void (*)())+0x18>
c0014f33:	90                   	nop
c0014f34:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014f3b:	e8 9c 99 00 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f40:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014f47:	e8 6c 99 00 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f4c:	84 c0                	test   al,al
c0014f4e:	74 e4                	je     c0014f34 <setupMultitasking(void (*)())+0xc>
c0014f50:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0014f57:	e8 0a 2b ff ff       	call   c0007a66 <malloc>
c0014f5c:	31 d2                	xor    edx,edx
c0014f5e:	b9 dd 0d 02 c0       	mov    ecx,0xc0020ddd
c0014f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f67:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014f6b:	89 c3                	mov    ebx,eax
c0014f6d:	31 c0                	xor    eax,eax
c0014f6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f73:	b8 01 00 00 00       	mov    eax,0x1
c0014f78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f7f:	e8 5c fc ff ff       	call   c0014be0 <Process::Process(bool, char const*, Process*, char**)>
c0014f84:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f8a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f90:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f93:	e8 4b 37 ff ff       	call   c00086e3 <setActiveTerminal(VgaText*)>
c0014f98:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c0014f9f:	31 d2                	xor    edx,edx
c0014fa1:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c0014fa6:	83 c8 01             	or     eax,0x1
c0014fa9:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fb0:	31 c0                	xor    eax,eax
c0014fb2:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c0014fb8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fbe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fc1:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c0014fc7:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fcd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fd3:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c0014fd8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0014fde:	31 c0                	xor    eax,eax
c0014fe0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0014fe6:	b8 01 00 00 00       	mov    eax,0x1
c0014feb:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c0014ff1:	31 c0                	xor    eax,eax
c0014ff3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014ff9:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fff:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c0015005:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c001500b:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015012:	e8 4f 2a ff ff       	call   c0007a66 <malloc>
c0015017:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001501d:	b8 d9 0d 02 c0       	mov    eax,0xc0020dd9
c0015022:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015028:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001502c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015032:	89 04 24             	mov    DWORD PTR [esp],eax
c0015035:	e8 56 b6 fe ff       	call   c0000690 <strcpy>
c001503a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015041:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015045:	83 c4 24             	add    esp,0x24
c0015048:	5b                   	pop    ebx
c0015049:	5e                   	pop    esi
c001504a:	e9 1a b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001504f:	90                   	nop

c0015050 <schedule()>:
c0015050:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015056:	85 d2                	test   edx,edx
c0015058:	74 0e                	je     c0015068 <schedule()+0x18>
c001505a:	b8 01 00 00 00       	mov    eax,0x1
c001505f:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015064:	c3                   	ret    
c0015065:	8d 76 00             	lea    esi,[esi+0x0]
c0015068:	53                   	push   ebx
c0015069:	83 ec 18             	sub    esp,0x18
c001506c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015073:	e8 40 98 00 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015078:	84 c0                	test   al,al
c001507a:	75 38                	jne    c00150b4 <schedule()+0x64>
c001507c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015081:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015084:	4a                   	dec    edx
c0015085:	74 35                	je     c00150bc <schedule()+0x6c>
c0015087:	90                   	nop
c0015088:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001508f:	e8 40 98 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015094:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001509b:	89 c3                	mov    ebx,eax
c001509d:	e8 3a 98 00 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00150a2:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00150a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ac:	e8 ff f7 ff ff       	call   c00148b0 <switchToThread(ThreadControlBlock*)>
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	83 c4 18             	add    esp,0x18
c00150b7:	5b                   	pop    ebx
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00150cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150d3:	e8 b0 98 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150d8:	eb ae                	jmp    c0015088 <schedule()+0x38>
c00150da:	66 90                	xchg   ax,ax

c00150dc <Semaphore::tryAcquire()>:
c00150dc:	53                   	push   ebx
c00150dd:	83 ec 08             	sub    esp,0x8
c00150e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150e4:	fa                   	cli    
c00150e5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150eb:	8d 42 01             	lea    eax,[edx+0x1]
c00150ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150f3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150f8:	8d 58 01             	lea    ebx,[eax+0x1]
c00150fb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015101:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015104:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015106:	7c 2c                	jl     c0015134 <Semaphore::tryAcquire()+0x58>
c0015108:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001510d:	85 c0                	test   eax,eax
c001510f:	75 0b                	jne    c001511c <Semaphore::tryAcquire()+0x40>
c0015111:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015117:	85 c9                	test   ecx,ecx
c0015119:	75 55                	jne    c0015170 <Semaphore::tryAcquire()+0x94>
c001511b:	90                   	nop
c001511c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015122:	31 c0                	xor    eax,eax
c0015124:	85 d2                	test   edx,edx
c0015126:	75 04                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c0015128:	fb                   	sti    
c0015129:	8d 76 00             	lea    esi,[esi+0x0]
c001512c:	83 c4 08             	add    esp,0x8
c001512f:	5b                   	pop    ebx
c0015130:	c3                   	ret    
c0015131:	8d 76 00             	lea    esi,[esi+0x0]
c0015134:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015139:	43                   	inc    ebx
c001513a:	85 c0                	test   eax,eax
c001513c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001513f:	75 1f                	jne    c0015160 <Semaphore::tryAcquire()+0x84>
c0015141:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015146:	85 c0                	test   eax,eax
c0015148:	74 16                	je     c0015160 <Semaphore::tryAcquire()+0x84>
c001514a:	31 db                	xor    ebx,ebx
c001514c:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c0015152:	e8 f9 fe ff ff       	call   c0015050 <schedule()>
c0015157:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001515c:	8d 50 ff             	lea    edx,[eax-0x1]
c001515f:	90                   	nop
c0015160:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015166:	85 d2                	test   edx,edx
c0015168:	b0 01                	mov    al,0x1
c001516a:	75 c0                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c001516c:	eb ba                	jmp    c0015128 <Semaphore::tryAcquire()+0x4c>
c001516e:	66 90                	xchg   ax,ax
c0015170:	31 c0                	xor    eax,eax
c0015172:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015177:	e8 d4 fe ff ff       	call   c0015050 <schedule()>
c001517c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015181:	8d 50 ff             	lea    edx,[eax-0x1]
c0015184:	31 c0                	xor    eax,eax
c0015186:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001518c:	85 d2                	test   edx,edx
c001518e:	75 9c                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c0015190:	eb 96                	jmp    c0015128 <Semaphore::tryAcquire()+0x4c>
c0015192:	66 90                	xchg   ax,ax

c0015194 <Semaphore::assertLocked(char const*)>:
c0015194:	83 ec 1c             	sub    esp,0x1c
c0015197:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519b:	fa                   	cli    
c001519c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151a1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00151a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00151aa:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151b2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151b5:	7c 29                	jl     c00151e0 <Semaphore::assertLocked(char const*)+0x4c>
c00151b7:	90                   	nop
c00151b8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151bd:	85 c0                	test   eax,eax
c00151bf:	75 0b                	jne    c00151cc <Semaphore::assertLocked(char const*)+0x38>
c00151c1:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00151c7:	85 d2                	test   edx,edx
c00151c9:	75 29                	jne    c00151f4 <Semaphore::assertLocked(char const*)+0x60>
c00151cb:	90                   	nop
c00151cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d1:	48                   	dec    eax
c00151d2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151d7:	75 03                	jne    c00151dc <Semaphore::assertLocked(char const*)+0x48>
c00151d9:	fb                   	sti    
c00151da:	66 90                	xchg   ax,ax
c00151dc:	83 c4 1c             	add    esp,0x1c
c00151df:	c3                   	ret    
c00151e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00151e7:	e8 49 b5 ff ff       	call   c0010735 <KePanic(char const*)>
c00151ec:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151f1:	48                   	dec    eax
c00151f2:	eb c4                	jmp    c00151b8 <Semaphore::assertLocked(char const*)+0x24>
c00151f4:	31 c0                	xor    eax,eax
c00151f6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00151fb:	e8 50 fe ff ff       	call   c0015050 <schedule()>
c0015200:	eb ca                	jmp    c00151cc <Semaphore::assertLocked(char const*)+0x38>
c0015202:	66 90                	xchg   ax,ax

c0015204 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015204:	83 ec 0c             	sub    esp,0xc
c0015207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015210:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015213:	e8 38 fe ff ff       	call   c0015050 <schedule()>
c0015218:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001521d:	48                   	dec    eax
c001521e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015223:	75 03                	jne    c0015228 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015225:	fb                   	sti    
c0015226:	66 90                	xchg   ax,ax
c0015228:	83 c4 0c             	add    esp,0xc
c001522b:	c3                   	ret    

c001522c <blockTask(TaskState)>:
c001522c:	83 ec 0c             	sub    esp,0xc
c001522f:	fa                   	cli    
c0015230:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001523a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015242:	e8 09 fe ff ff       	call   c0015050 <schedule()>
c0015247:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001524c:	48                   	dec    eax
c001524d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015252:	75 04                	jne    c0015258 <blockTask(TaskState)+0x2c>
c0015254:	fb                   	sti    
c0015255:	8d 76 00             	lea    esi,[esi+0x0]
c0015258:	83 c4 0c             	add    esp,0xc
c001525b:	c3                   	ret    

c001525c <waitTask(int, int*, int)>:
c001525c:	83 ec 1c             	sub    esp,0x1c
c001525f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015264:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015268:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001526b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001526f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015274:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015277:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001527e:	e8 a9 ff ff ff       	call   c001522c <blockTask(TaskState)>
c0015283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015288:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001528b:	85 d2                	test   edx,edx
c001528d:	74 0d                	je     c001529c <waitTask(int, int*, int)+0x40>
c001528f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015292:	89 02                	mov    DWORD PTR [edx],eax
c0015294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015299:	8d 76 00             	lea    esi,[esi+0x0]
c001529c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001529f:	83 c4 1c             	add    esp,0x1c
c00152a2:	c3                   	ret    
c00152a3:	90                   	nop

c00152a4 <milliTenthSleepUntil(unsigned int)>:
c00152a4:	83 ec 1c             	sub    esp,0x1c
c00152a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ab:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152b1:	76 05                	jbe    c00152b8 <milliTenthSleepUntil(unsigned int)+0x14>
c00152b3:	90                   	nop
c00152b4:	83 c4 1c             	add    esp,0x1c
c00152b7:	c3                   	ret    
c00152b8:	fa                   	cli    
c00152b9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00152bf:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00152c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152cb:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d3:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00152da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152de:	e8 a5 96 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152ea:	e8 3d ff ff ff       	call   c001522c <blockTask(TaskState)>
c00152ef:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152f4:	48                   	dec    eax
c00152f5:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152fa:	75 0c                	jne    c0015308 <milliTenthSleepUntil(unsigned int)+0x64>
c00152fc:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015302:	85 d2                	test   edx,edx
c0015304:	75 16                	jne    c001531c <milliTenthSleepUntil(unsigned int)+0x78>
c0015306:	66 90                	xchg   ax,ax
c0015308:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001530d:	48                   	dec    eax
c001530e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015313:	75 9f                	jne    c00152b4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015315:	fb                   	sti    
c0015316:	83 c4 1c             	add    esp,0x1c
c0015319:	c3                   	ret    
c001531a:	66 90                	xchg   ax,ax
c001531c:	31 c0                	xor    eax,eax
c001531e:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015323:	e8 28 fd ff ff       	call   c0015050 <schedule()>
c0015328:	eb de                	jmp    c0015308 <milliTenthSleepUntil(unsigned int)+0x64>
c001532a:	66 90                	xchg   ax,ax

c001532c <milliTenthSleep(unsigned int)>:
c001532c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015331:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015335:	e9 6a ff ff ff       	jmp    c00152a4 <milliTenthSleepUntil(unsigned int)>
c001533a:	66 90                	xchg   ax,ax

c001533c <sleep(unsigned int)>:
c001533c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015344:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015348:	eb e2                	jmp    c001532c <milliTenthSleep(unsigned int)>
c001534a:	66 90                	xchg   ax,ax

c001534c <Semaphore::acquire()>:
c001534c:	83 ec 1c             	sub    esp,0x1c
c001534f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015353:	fa                   	cli    
c0015354:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015359:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001535f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015362:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015368:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001536b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001536d:	7d 2d                	jge    c001539c <Semaphore::acquire()+0x50>
c001536f:	41                   	inc    ecx
c0015370:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015373:	90                   	nop
c0015374:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015379:	85 c0                	test   eax,eax
c001537b:	75 0b                	jne    c0015388 <Semaphore::acquire()+0x3c>
c001537d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015383:	85 d2                	test   edx,edx
c0015385:	75 5d                	jne    c00153e4 <Semaphore::acquire()+0x98>
c0015387:	90                   	nop
c0015388:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001538d:	48                   	dec    eax
c001538e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015393:	75 03                	jne    c0015398 <Semaphore::acquire()+0x4c>
c0015395:	fb                   	sti    
c0015396:	66 90                	xchg   ax,ax
c0015398:	83 c4 1c             	add    esp,0x1c
c001539b:	c3                   	ret    
c001539c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153a8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153ab:	85 c9                	test   ecx,ecx
c00153ad:	74 45                	je     c00153f4 <Semaphore::acquire()+0xa8>
c00153af:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153b8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153bb:	90                   	nop
c00153bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00153c4:	c7 04 24 58 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e58
c00153cb:	e8 16 56 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00153d0:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00153d7:	e8 50 fe ff ff       	call   c001522c <blockTask(TaskState)>
c00153dc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153e1:	48                   	dec    eax
c00153e2:	eb 90                	jmp    c0015374 <Semaphore::acquire()+0x28>
c00153e4:	31 c0                	xor    eax,eax
c00153e6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00153eb:	e8 60 fc ff ff       	call   c0015050 <schedule()>
c00153f0:	eb 96                	jmp    c0015388 <Semaphore::acquire()+0x3c>
c00153f2:	66 90                	xchg   ax,ax
c00153f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00153fc:	eb be                	jmp    c00153bc <Semaphore::acquire()+0x70>
c00153fe:	66 90                	xchg   ax,ax

c0015400 <taskReturned>:
c0015400:	83 ec 1c             	sub    esp,0x1c
c0015403:	c7 04 24 78 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e78
c001540a:	e8 26 b3 ff ff       	call   c0010735 <KePanic(char const*)>
c001540f:	90                   	nop
c0015410:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0015417:	e8 10 fe ff ff       	call   c001522c <blockTask(TaskState)>
c001541c:	fa                   	cli    
c001541d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015423:	e8 28 fc ff ff       	call   c0015050 <schedule()>
c0015428:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001542d:	48                   	dec    eax
c001542e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015433:	75 db                	jne    c0015410 <taskReturned+0x10>
c0015435:	fb                   	sti    
c0015436:	eb d8                	jmp    c0015410 <taskReturned+0x10>

c0015438 <Thr::processFromPID(int)>:
c0015438:	57                   	push   edi
c0015439:	56                   	push   esi
c001543a:	53                   	push   ebx
c001543b:	83 ec 10             	sub    esp,0x10
c001543e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015442:	fa                   	cli    
c0015443:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001544a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015450:	e8 7f 94 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015455:	89 c7                	mov    edi,eax
c0015457:	eb 13                	jmp    c001546c <Thr::processFromPID(int)+0x34>
c0015459:	8d 76 00             	lea    esi,[esi+0x0]
c001545c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015463:	e8 6c 94 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015468:	39 f8                	cmp    eax,edi
c001546a:	74 50                	je     c00154bc <Thr::processFromPID(int)+0x84>
c001546c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015473:	e8 5c 94 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015478:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001547f:	89 c3                	mov    ebx,eax
c0015481:	e8 56 94 00 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015486:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001548a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015491:	e8 f2 94 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015496:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015499:	39 30                	cmp    DWORD PTR [eax],esi
c001549b:	75 bf                	jne    c001545c <Thr::processFromPID(int)+0x24>
c001549d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154a2:	48                   	dec    eax
c00154a3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154a8:	74 0e                	je     c00154b8 <Thr::processFromPID(int)+0x80>
c00154aa:	66 90                	xchg   ax,ax
c00154ac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154af:	90                   	nop
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	5b                   	pop    ebx
c00154b4:	5e                   	pop    esi
c00154b5:	5f                   	pop    edi
c00154b6:	c3                   	ret    
c00154b7:	90                   	nop
c00154b8:	fb                   	sti    
c00154b9:	eb f1                	jmp    c00154ac <Thr::processFromPID(int)+0x74>
c00154bb:	90                   	nop
c00154bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154c1:	8d 50 ff             	lea    edx,[eax-0x1]
c00154c4:	31 c0                	xor    eax,eax
c00154c6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154cc:	85 d2                	test   edx,edx
c00154ce:	75 e0                	jne    c00154b0 <Thr::processFromPID(int)+0x78>
c00154d0:	fb                   	sti    
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	5b                   	pop    ebx
c00154d5:	5e                   	pop    esi
c00154d6:	5f                   	pop    edi
c00154d7:	c3                   	ret    

c00154d8 <unblockTask(ThreadControlBlock*)>:
c00154d8:	53                   	push   ebx
c00154d9:	83 ec 18             	sub    esp,0x18
c00154dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154e0:	fa                   	cli    
c00154e1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00154ea:	85 c0                	test   eax,eax
c00154ec:	74 5a                	je     c0015548 <unblockTask(ThreadControlBlock*)+0x70>
c00154ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154f1:	48                   	dec    eax
c00154f2:	74 30                	je     c0015524 <unblockTask(ThreadControlBlock*)+0x4c>
c00154f4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154fb:	e8 d4 93 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015500:	85 c0                	test   eax,eax
c0015502:	75 18                	jne    c001551c <unblockTask(ThreadControlBlock*)+0x44>
c0015504:	eb 52                	jmp    c0015558 <unblockTask(ThreadControlBlock*)+0x80>
c0015506:	66 90                	xchg   ax,ax
c0015508:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001550c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015513:	e8 a4 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015518:	85 c0                	test   eax,eax
c001551a:	74 3c                	je     c0015558 <unblockTask(ThreadControlBlock*)+0x80>
c001551c:	39 c3                	cmp    ebx,eax
c001551e:	75 e8                	jne    c0015508 <unblockTask(ThreadControlBlock*)+0x30>
c0015520:	eb 0e                	jmp    c0015530 <unblockTask(ThreadControlBlock*)+0x58>
c0015522:	66 90                	xchg   ax,ax
c0015524:	c7 04 24 fb 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dfb
c001552b:	e8 b6 54 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0015530:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015535:	48                   	dec    eax
c0015536:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001553b:	75 03                	jne    c0015540 <unblockTask(ThreadControlBlock*)+0x68>
c001553d:	fb                   	sti    
c001553e:	66 90                	xchg   ax,ax
c0015540:	83 c4 18             	add    esp,0x18
c0015543:	5b                   	pop    ebx
c0015544:	c3                   	ret    
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	c7 04 24 e4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de4
c001554f:	e8 92 54 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0015554:	eb da                	jmp    c0015530 <unblockTask(ThreadControlBlock*)+0x58>
c0015556:	66 90                	xchg   ax,ax
c0015558:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001555c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015563:	e8 20 94 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015568:	eb c6                	jmp    c0015530 <unblockTask(ThreadControlBlock*)+0x58>
c001556a:	66 90                	xchg   ax,ax

c001556c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001556c:	55                   	push   ebp
c001556d:	57                   	push   edi
c001556e:	56                   	push   esi
c001556f:	53                   	push   ebx
c0015570:	83 ec 2c             	sub    esp,0x2c
c0015573:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015577:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001557a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015580:	85 ff                	test   edi,edi
c0015582:	7e 20                	jle    c00155a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015584:	31 f6                	xor    esi,esi
c0015586:	66 90                	xchg   ax,ax
c0015588:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001558f:	46                   	inc    esi
c0015590:	89 04 24             	mov    DWORD PTR [esp],eax
c0015593:	e8 e1 24 ff ff       	call   c0007a79 <free>
c0015598:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001559b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00155a1:	7f e5                	jg     c0015588 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00155a3:	90                   	nop
c00155a4:	31 f6                	xor    esi,esi
c00155a6:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c00155ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155b1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00155b4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00155b7:	d3 c0                	rol    eax,cl
c00155b9:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c00155c0:	21 c8                	and    eax,ecx
c00155c2:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00155c9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155cc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00155d4:	89 f7                	mov    edi,esi
c00155d6:	0f 85 68 01 00 00    	jne    c0015744 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00155dc:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00155e2:	85 ed                	test   ebp,ebp
c00155e4:	74 1e                	je     c0015604 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c00155e6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155e9:	e8 5c ae ff ff       	call   c001044a <EnvVarContainer::~EnvVarContainer()>
c00155ee:	b9 0c 00 00 00       	mov    ecx,0xc
c00155f3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00155f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155fa:	e8 cd 52 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c00155ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015602:	89 f7                	mov    edi,esi
c0015604:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001560a:	85 c0                	test   eax,eax
c001560c:	0f 84 ae 00 00 00    	je     c00156c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015612:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015615:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015619:	31 c9                	xor    ecx,ecx
c001561b:	eb 17                	jmp    c0015634 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001561d:	8d 76 00             	lea    esi,[esi+0x0]
c0015620:	41                   	inc    ecx
c0015621:	83 f9 10             	cmp    ecx,0x10
c0015624:	0f 84 96 00 00 00    	je     c00156c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001562a:	66 90                	xchg   ax,ax
c001562c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015632:	66 90                	xchg   ax,ax
c0015634:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001563b:	d3 fa                	sar    edx,cl
c001563d:	f6 c2 01             	test   dl,0x1
c0015640:	74 de                	je     c0015620 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015642:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015645:	c1 e2 05             	shl    edx,0x5
c0015648:	29 ca                	sub    edx,ecx
c001564a:	01 d0                	add    eax,edx
c001564c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015652:	83 fd 07             	cmp    ebp,0x7
c0015655:	75 c9                	jne    c0015620 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015657:	05 40 02 00 00       	add    eax,0x240
c001565c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001565f:	83 fd ff             	cmp    ebp,0xffffffff
c0015662:	0f 8c e4 00 00 00    	jl     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015668:	0f 84 9a 01 00 00    	je     c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001566e:	85 ed                	test   ebp,ebp
c0015670:	0f 84 72 01 00 00    	je     c00157e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015676:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015678:	75 a6                	jne    c0015620 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001567a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001567e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015684:	01 d0                	add    eax,edx
c0015686:	66 90                	xchg   ax,ax
c0015688:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001568c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015692:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015695:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001569b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00156a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00156a5:	e8 2e fe ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c00156aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00156ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156b1:	41                   	inc    ecx
c00156b2:	83 f9 10             	cmp    ecx,0x10
c00156b5:	89 f7                	mov    edi,esi
c00156b7:	0f 85 6f ff ff ff    	jne    c001562c <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c00156bd:	8d 76 00             	lea    esi,[esi+0x0]
c00156c0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00156c6:	85 c0                	test   eax,eax
c00156c8:	74 56                	je     c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00156ca:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00156d0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00156d6:	74 48                	je     c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00156d8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156df:	e8 f0 91 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156e4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156eb:	89 c7                	mov    edi,eax
c00156ed:	e8 c6 91 00 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00156f2:	84 c0                	test   al,al
c00156f4:	0f 84 be 00 00 00    	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00156fa:	66 90                	xchg   ax,ax
c00156fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015705:	85 d2                	test   edx,edx
c0015707:	74 0b                	je     c0015714 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0015709:	8b 02                	mov    eax,DWORD PTR [edx]
c001570b:	89 14 24             	mov    DWORD PTR [esp],edx
c001570e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015711:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015714:	31 d2                	xor    edx,edx
c0015716:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001571c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001571f:	90                   	nop
c0015720:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015726:	85 db                	test   ebx,ebx
c0015728:	74 1a                	je     c0015744 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c001572a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001572d:	e8 16 44 ff ff       	call   c0009b48 <VAS::~VAS()>
c0015732:	b8 14 00 00 00       	mov    eax,0x14
c0015737:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001573b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001573e:	e8 89 51 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c0015743:	90                   	nop
c0015744:	83 c4 2c             	add    esp,0x2c
c0015747:	5b                   	pop    ebx
c0015748:	5e                   	pop    esi
c0015749:	5f                   	pop    edi
c001574a:	5d                   	pop    ebp
c001574b:	c3                   	ret    
c001574c:	c7 04 24 ac 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eac
c0015753:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015757:	e8 d9 af ff ff       	call   c0010735 <KePanic(char const*)>
c001575c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001575f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015763:	89 f7                	mov    edi,esi
c0015765:	e9 b6 fe ff ff       	jmp    c0015620 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001576a:	66 90                	xchg   ax,ax
c001576c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015772:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015778:	75 1a                	jne    c0015794 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c001577a:	c7 04 24 14 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f14
c0015781:	e8 60 52 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0015786:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001578d:	e8 9a fa ff ff       	call   c001522c <blockTask(TaskState)>
c0015792:	66 90                	xchg   ax,ax
c0015794:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015798:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001579f:	e8 e4 91 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157a4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157ab:	e8 24 91 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157b0:	39 f8                	cmp    eax,edi
c00157b2:	0f 84 44 ff ff ff    	je     c00156fc <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c00157b8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157bf:	e8 10 91 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157c4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157cb:	89 c6                	mov    esi,eax
c00157cd:	e8 0a 91 00 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157d2:	39 f3                	cmp    ebx,esi
c00157d4:	74 be                	je     c0015794 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00157d6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00157d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157dc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00157e2:	75 b0                	jne    c0015794 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00157e4:	eb 86                	jmp    c001576c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00157e6:	66 90                	xchg   ax,ax
c00157e8:	c7 04 24 e0 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ee0
c00157ef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00157f3:	e8 3d af ff ff       	call   c0010735 <KePanic(char const*)>
c00157f8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157ff:	89 f7                	mov    edi,esi
c0015801:	e9 1a fe ff ff       	jmp    c0015620 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015806:	66 90                	xchg   ax,ax
c0015808:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001580c:	8b 36                	mov    esi,DWORD PTR [esi]
c001580e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015811:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015814:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001581a:	01 d7                	add    edi,edx
c001581c:	89 f8                	mov    eax,edi
c001581e:	e9 65 fe ff ff       	jmp    c0015688 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015823:	90                   	nop

c0015824 <cleanerTaskFunction(void*)>:
c0015824:	53                   	push   ebx
c0015825:	83 ec 18             	sub    esp,0x18
c0015828:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001582d:	48                   	dec    eax
c001582e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015833:	75 03                	jne    c0015838 <cleanerTaskFunction(void*)+0x14>
c0015835:	fb                   	sti    
c0015836:	66 90                	xchg   ax,ax
c0015838:	fa                   	cli    
c0015839:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001583e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015845:	8d 50 01             	lea    edx,[eax+0x1]
c0015848:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001584e:	0f 84 a0 00 00 00    	je     c00158f4 <cleanerTaskFunction(void*)+0xd0>
c0015854:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015859:	85 c0                	test   eax,eax
c001585b:	75 03                	jne    c0015860 <cleanerTaskFunction(void*)+0x3c>
c001585d:	fb                   	sti    
c001585e:	66 90                	xchg   ax,ax
c0015860:	31 c9                	xor    ecx,ecx
c0015862:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c0015868:	fa                   	cli    
c0015869:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001586f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015875:	fa                   	cli    
c0015876:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001587c:	eb 26                	jmp    c00158a4 <cleanerTaskFunction(void*)+0x80>
c001587e:	66 90                	xchg   ax,ax
c0015880:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015887:	e8 48 90 00 00       	call   c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001588c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015893:	89 c3                	mov    ebx,eax
c0015895:	e8 42 90 00 00       	call   c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001589a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001589d:	e8 ca fc ff ff       	call   c001556c <cleanupTerminatedTask(ThreadControlBlock*)>
c00158a2:	66 90                	xchg   ax,ax
c00158a4:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00158ab:	e8 08 90 00 00       	call   c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158b0:	84 c0                	test   al,al
c00158b2:	74 cc                	je     c0015880 <cleanerTaskFunction(void*)+0x5c>
c00158b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158b9:	48                   	dec    eax
c00158ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158bf:	75 03                	jne    c00158c4 <cleanerTaskFunction(void*)+0xa0>
c00158c1:	fb                   	sti    
c00158c2:	66 90                	xchg   ax,ax
c00158c4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00158c9:	48                   	dec    eax
c00158ca:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00158cf:	0f 85 53 ff ff ff    	jne    c0015828 <cleanerTaskFunction(void*)+0x4>
c00158d5:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00158db:	85 d2                	test   edx,edx
c00158dd:	0f 84 45 ff ff ff    	je     c0015828 <cleanerTaskFunction(void*)+0x4>
c00158e3:	31 c0                	xor    eax,eax
c00158e5:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00158ea:	e8 61 f7 ff ff       	call   c0015050 <schedule()>
c00158ef:	e9 34 ff ff ff       	jmp    c0015828 <cleanerTaskFunction(void*)+0x4>
c00158f4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00158fb:	e8 04 f9 ff ff       	call   c0015204 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015900:	e9 5b ff ff ff       	jmp    c0015860 <cleanerTaskFunction(void*)+0x3c>
c0015905:	8d 76 00             	lea    esi,[esi+0x0]

c0015908 <terminateTask(int)>:
c0015908:	83 ec 1c             	sub    esp,0x1c
c001590b:	fa                   	cli    
c001590c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015912:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015918:	fa                   	cli    
c0015919:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001591f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015928:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001592b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015930:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015933:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015937:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001593e:	e8 45 90 00 00       	call   c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015948:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001594f:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015954:	85 c0                	test   eax,eax
c0015956:	74 58                	je     c00159b0 <terminateTask(int)+0xa8>
c0015958:	89 04 24             	mov    DWORD PTR [esp],eax
c001595b:	b2 01                	mov    dl,0x1
c001595d:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c0015963:	e8 70 fb ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c0015968:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001596d:	48                   	dec    eax
c001596e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015973:	75 03                	jne    c0015978 <terminateTask(int)+0x70>
c0015975:	fb                   	sti    
c0015976:	66 90                	xchg   ax,ax
c0015978:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001597d:	48                   	dec    eax
c001597e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015983:	75 0b                	jne    c0015990 <terminateTask(int)+0x88>
c0015985:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c001598c:	75 32                	jne    c00159c0 <terminateTask(int)+0xb8>
c001598e:	66 90                	xchg   ax,ax
c0015990:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015995:	48                   	dec    eax
c0015996:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001599b:	75 03                	jne    c00159a0 <terminateTask(int)+0x98>
c001599d:	fb                   	sti    
c001599e:	66 90                	xchg   ax,ax
c00159a0:	fa                   	cli    
c00159a1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159a7:	90                   	nop
c00159a8:	e8 a3 f6 ff ff       	call   c0015050 <schedule()>
c00159ad:	eb e1                	jmp    c0015990 <terminateTask(int)+0x88>
c00159af:	90                   	nop
c00159b0:	c7 04 24 12 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e12
c00159b7:	e8 2a 50 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00159bc:	eb aa                	jmp    c0015968 <terminateTask(int)+0x60>
c00159be:	66 90                	xchg   ax,ax
c00159c0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159ca:	eb dc                	jmp    c00159a8 <terminateTask(int)+0xa0>

c00159cc <Thr::terminateFromIRQ(int)>:
c00159cc:	83 ec 1c             	sub    esp,0x1c
c00159cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00159d6:	e8 2d ff ff ff       	call   c0015908 <terminateTask(int)>
c00159db:	90                   	nop

c00159dc <Semaphore::release()>:
c00159dc:	83 ec 1c             	sub    esp,0x1c
c00159df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159e3:	fa                   	cli    
c00159e4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159e9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00159f2:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159f8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00159fb:	85 c9                	test   ecx,ecx
c00159fd:	74 3d                	je     c0015a3c <Semaphore::release()+0x60>
c00159ff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015a02:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015a08:	e8 cb fa ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c0015a0d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a12:	48                   	dec    eax
c0015a13:	90                   	nop
c0015a14:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a19:	85 c0                	test   eax,eax
c0015a1b:	75 0b                	jne    c0015a28 <Semaphore::release()+0x4c>
c0015a1d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015a23:	85 d2                	test   edx,edx
c0015a25:	75 1d                	jne    c0015a44 <Semaphore::release()+0x68>
c0015a27:	90                   	nop
c0015a28:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a2d:	48                   	dec    eax
c0015a2e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a33:	75 03                	jne    c0015a38 <Semaphore::release()+0x5c>
c0015a35:	fb                   	sti    
c0015a36:	66 90                	xchg   ax,ax
c0015a38:	83 c4 1c             	add    esp,0x1c
c0015a3b:	c3                   	ret    
c0015a3c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015a3f:	eb d3                	jmp    c0015a14 <Semaphore::release()+0x38>
c0015a41:	8d 76 00             	lea    esi,[esi+0x0]
c0015a44:	31 c0                	xor    eax,eax
c0015a46:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015a4b:	e8 00 f6 ff ff       	call   c0015050 <schedule()>
c0015a50:	eb d6                	jmp    c0015a28 <Semaphore::release()+0x4c>
c0015a52:	66 90                	xchg   ax,ax

c0015a54 <__static_initialization_and_destruction_0(int, int)>:
c0015a54:	83 ec 1c             	sub    esp,0x1c
c0015a57:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0015a5c:	0f 85 82 00 00 00    	jne    c0015ae4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015a62:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0015a6a:	75 78                	jne    c0015ae4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015a6c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015a73:	e8 9c 91 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015a78:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015a80:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0015a88:	c7 04 24 c4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebc4
c0015a8f:	e8 e8 4d ff ff       	call   c000a87c <__cxa_atexit>
c0015a94:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c0015a9b:	e8 74 91 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015aa0:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015aa8:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c0015ab0:	c7 04 24 c4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebc4
c0015ab7:	e8 c0 4d ff ff       	call   c000a87c <__cxa_atexit>
c0015abc:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015ac3:	e8 4c 91 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ac8:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015ad0:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c0015ad8:	c7 04 24 c4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebc4
c0015adf:	e8 98 4d ff ff       	call   c000a87c <__cxa_atexit>
c0015ae4:	90                   	nop
c0015ae5:	83 c4 1c             	add    esp,0x1c
c0015ae8:	c3                   	ret    
c0015ae9:	8d 76 00             	lea    esi,[esi+0x0]

c0015aec <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015aec:	83 ec 1c             	sub    esp,0x1c
c0015aef:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0015af7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0015afe:	e8 51 ff ff ff       	call   c0015a54 <__static_initialization_and_destruction_0(int, int)>
c0015b03:	83 c4 1c             	add    esp,0x1c
c0015b06:	c3                   	ret    

c0015b07 <Vm::inbv(unsigned short)>:
c0015b07:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015b0c:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015b12:	75 06                	jne    c0015b1a <Vm::inbv(unsigned short)+0x13>
c0015b14:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015b19:	c3                   	ret    
c0015b1a:	ec                   	in     al,dx
c0015b1b:	c3                   	ret    

c0015b1c <Vm::outbv(unsigned short, unsigned char)>:
c0015b1c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015b21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b25:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015b2b:	75 25                	jne    c0015b52 <Vm::outbv(unsigned short, unsigned char)+0x36>
c0015b2d:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015b33:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015b39:	8d 51 01             	lea    edx,[ecx+0x1]
c0015b3c:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015b42:	83 fa 20             	cmp    edx,0x20
c0015b45:	75 0c                	jne    c0015b53 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0015b47:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015b51:	c3                   	ret    
c0015b52:	ee                   	out    dx,al
c0015b53:	c3                   	ret    

c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015b54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b5e:	c1 e0 04             	shl    eax,0x4
c0015b61:	01 d0                	add    eax,edx
c0015b63:	c3                   	ret    

c0015b64 <Vm::getSegment(unsigned int)>:
c0015b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b68:	c1 e8 10             	shr    eax,0x10
c0015b6b:	c3                   	ret    

c0015b6c <Vm::getOffset(unsigned int)>:
c0015b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b70:	c3                   	ret    

c0015b71 <Vm::mainloop2()>:
c0015b71:	83 ec 18             	sub    esp,0x18
c0015b74:	fa                   	cli    
c0015b75:	6a 02                	push   0x2
c0015b77:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015b7d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015b84:	e8 7b f6 ff ff       	call   c0015204 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b8e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015b92:	52                   	push   edx
c0015b93:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015b97:	52                   	push   edx
c0015b98:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015b9c:	52                   	push   edx
c0015b9d:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ba1:	50                   	push   eax
c0015ba2:	e8 68 a6 fe ff       	call   c000020f <goToVM86>
c0015ba7:	83 c4 2c             	add    esp,0x2c
c0015baa:	c3                   	ret    

c0015bab <Vm::mainVm8086Loop(void*)>:
c0015bab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bb0:	48                   	dec    eax
c0015bb1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bb6:	75 01                	jne    c0015bb9 <Vm::mainVm8086Loop(void*)+0xe>
c0015bb8:	fb                   	sti    
c0015bb9:	eb b6                	jmp    c0015b71 <Vm::mainloop2()>

c0015bbb <Vm::mainloop3(unsigned long)>:
c0015bbb:	83 ec 18             	sub    esp,0x18
c0015bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bc2:	fa                   	cli    
c0015bc3:	6a 02                	push   0x2
c0015bc5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015bcb:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015bd2:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015bd7:	e8 28 f6 ff ff       	call   c0015204 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015bdc:	83 c4 1c             	add    esp,0x1c
c0015bdf:	eb 90                	jmp    c0015b71 <Vm::mainloop2()>

c0015be1 <Vm::initialise8086()>:
c0015be1:	83 ec 0c             	sub    esp,0xc
c0015be4:	68 80 00 00 00       	push   0x80
c0015be9:	6a 00                	push   0x0
c0015beb:	68 ab 5b 01 c0       	push   0xc0015bab
c0015bf0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015bf6:	e8 fd f1 ff ff       	call   c0014df8 <Process::createThread(void (*)(void*), void*, int)>
c0015bfb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015c02:	68 00 01 00 00       	push   0x100
c0015c07:	6a 00                	push   0x0
c0015c09:	6a 00                	push   0x0
c0015c0b:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015c10:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015c15:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c1b:	e8 d2 43 ff ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015c20:	83 c4 2c             	add    esp,0x2c
c0015c23:	c3                   	ret    

c0015c24 <Vm::finish8086()>:
c0015c24:	53                   	push   ebx
c0015c25:	83 ec 08             	sub    esp,0x8
c0015c28:	fa                   	cli    
c0015c29:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c2f:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015c36:	75 15                	jne    c0015c4d <Vm::finish8086()+0x29>
c0015c38:	e8 13 f4 ff ff       	call   c0015050 <schedule()>
c0015c3d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c42:	48                   	dec    eax
c0015c43:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c48:	75 de                	jne    c0015c28 <Vm::finish8086()+0x4>
c0015c4a:	fb                   	sti    
c0015c4b:	eb db                	jmp    c0015c28 <Vm::finish8086()+0x4>
c0015c4d:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015c54:	83 ec 0c             	sub    esp,0xc
c0015c57:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015c5d:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015c63:	e8 70 f8 ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c0015c68:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c73:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c79:	85 d2                	test   edx,edx
c0015c7b:	75 01                	jne    c0015c7e <Vm::finish8086()+0x5a>
c0015c7d:	fb                   	sti    
c0015c7e:	83 c4 08             	add    esp,0x8
c0015c81:	89 d8                	mov    eax,ebx
c0015c83:	5b                   	pop    ebx
c0015c84:	c3                   	ret    

c0015c85 <Vm::getOutput8086(unsigned char*)>:
c0015c85:	57                   	push   edi
c0015c86:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c8c:	56                   	push   esi
c0015c8d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015c92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015c96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015c98:	5e                   	pop    esi
c0015c99:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015c9e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ca8:	5f                   	pop    edi
c0015ca9:	c3                   	ret    

c0015caa <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015caa:	55                   	push   ebp
c0015cab:	57                   	push   edi
c0015cac:	56                   	push   esi
c0015cad:	53                   	push   ebx
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015cb6:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c0015cbb:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c0015cc0:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c0015cc5:	fa                   	cli    
c0015cc6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccc:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015cd3:	75 15                	jne    c0015cea <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c0015cd5:	e8 76 f3 ff ff       	call   c0015050 <schedule()>
c0015cda:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cdf:	48                   	dec    eax
c0015ce0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ce5:	75 de                	jne    c0015cc5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015ce7:	fb                   	sti    
c0015ce8:	eb db                	jmp    c0015cc5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015cea:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015cf4:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015cf9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015cfd:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015d01:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015d05:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015d09:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015d0d:	50                   	push   eax
c0015d0e:	6a 20                	push   0x20
c0015d10:	6a 00                	push   0x0
c0015d12:	68 e0 81 02 c0       	push   0xc00281e0
c0015d17:	e8 d4 a7 fe ff       	call   c00004f0 <memset>
c0015d1c:	5a                   	pop    edx
c0015d1d:	59                   	pop    ecx
c0015d1e:	57                   	push   edi
c0015d1f:	56                   	push   esi
c0015d20:	e8 2f fe ff ff       	call   c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015d30:	89 c7                	mov    edi,eax
c0015d32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d34:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015d3b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d40:	48                   	dec    eax
c0015d41:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d46:	75 01                	jne    c0015d49 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0015d48:	fb                   	sti    
c0015d49:	83 ec 0c             	sub    esp,0xc
c0015d4c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d52:	e8 81 f7 ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c0015d57:	83 c4 1c             	add    esp,0x1c
c0015d5a:	b0 01                	mov    al,0x1
c0015d5c:	5b                   	pop    ebx
c0015d5d:	5e                   	pop    esi
c0015d5e:	5f                   	pop    edi
c0015d5f:	5d                   	pop    ebp
c0015d60:	c3                   	ret    

c0015d61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d61:	55                   	push   ebp
c0015d62:	57                   	push   edi
c0015d63:	56                   	push   esi
c0015d64:	53                   	push   ebx
c0015d65:	83 ec 2c             	sub    esp,0x2c
c0015d68:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c0015d6d:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0015d72:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0015d77:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c0015d7c:	fa                   	cli    
c0015d7d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0015d82:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d88:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d8c:	84 c0                	test   al,al
c0015d8e:	75 15                	jne    c0015da5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015d90:	e8 bb f2 ff ff       	call   c0015050 <schedule()>
c0015d95:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d9a:	48                   	dec    eax
c0015d9b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015da0:	75 da                	jne    c0015d7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015da2:	fb                   	sti    
c0015da3:	eb d7                	jmp    c0015d7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015da5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015daf:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015db4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015db8:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dbc:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015dc0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015dc4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015dc8:	50                   	push   eax
c0015dc9:	6a 20                	push   0x20
c0015dcb:	6a 00                	push   0x0
c0015dcd:	68 e0 81 02 c0       	push   0xc00281e0
c0015dd2:	e8 19 a7 fe ff       	call   c00004f0 <memset>
c0015dd7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015dde:	e8 83 1c ff ff       	call   c0007a66 <malloc>
c0015de3:	83 c4 0c             	add    esp,0xc
c0015de6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015dec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015df0:	89 c3                	mov    ebx,eax
c0015df2:	50                   	push   eax
c0015df3:	e8 70 51 ff ff       	call   c000af68 <File::File(char const*, Process*)>
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	85 db                	test   ebx,ebx
c0015dfd:	75 0a                	jne    c0015e09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c0015dff:	83 ec 0c             	sub    esp,0xc
c0015e02:	68 3c 0f 02 c0       	push   0xc0020f3c
c0015e07:	eb 3e                	jmp    c0015e47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015e09:	55                   	push   ebp
c0015e0a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e0e:	50                   	push   eax
c0015e0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e13:	50                   	push   eax
c0015e14:	53                   	push   ebx
c0015e15:	e8 b2 54 ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015e22:	74 0a                	je     c0015e2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0015e24:	83 ec 0c             	sub    esp,0xc
c0015e27:	68 50 0f 02 c0       	push   0xc0020f50
c0015e2c:	eb 19                	jmp    c0015e47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015e2e:	51                   	push   ecx
c0015e2f:	51                   	push   ecx
c0015e30:	6a 01                	push   0x1
c0015e32:	53                   	push   ebx
c0015e33:	e8 ee 51 ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	85 c0                	test   eax,eax
c0015e3d:	74 27                	je     c0015e66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c0015e3f:	83 ec 0c             	sub    esp,0xc
c0015e42:	68 69 0f 02 c0       	push   0xc0020f69
c0015e47:	e8 e9 a8 ff ff       	call   c0010735 <KePanic(char const*)>
c0015e4c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	48                   	dec    eax
c0015e55:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e5a:	85 c0                	test   eax,eax
c0015e5c:	75 01                	jne    c0015e5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c0015e5e:	fb                   	sti    
c0015e5f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015e64:	eb 52                	jmp    c0015eb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0015e66:	50                   	push   eax
c0015e67:	50                   	push   eax
c0015e68:	57                   	push   edi
c0015e69:	56                   	push   esi
c0015e6a:	e8 e5 fc ff ff       	call   c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e6f:	5a                   	pop    edx
c0015e70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e72:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015e76:	51                   	push   ecx
c0015e77:	50                   	push   eax
c0015e78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e80:	53                   	push   ebx
c0015e81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e84:	83 c4 14             	add    esp,0x14
c0015e87:	53                   	push   ebx
c0015e88:	e8 f7 51 ff ff       	call   c000b084 <File::close()>
c0015e8d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e92:	83 c4 10             	add    esp,0x10
c0015e95:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e9c:	48                   	dec    eax
c0015e9d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ea2:	85 c0                	test   eax,eax
c0015ea4:	75 01                	jne    c0015ea7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c0015ea6:	fb                   	sti    
c0015ea7:	83 ec 0c             	sub    esp,0xc
c0015eaa:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015eb0:	e8 23 f6 ff ff       	call   c00154d8 <unblockTask(ThreadControlBlock*)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ebc:	83 c4 2c             	add    esp,0x2c
c0015ebf:	5b                   	pop    ebx
c0015ec0:	5e                   	pop    esi
c0015ec1:	5f                   	pop    edi
c0015ec2:	5d                   	pop    ebp
c0015ec3:	c3                   	ret    

c0015ec4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015ec4:	57                   	push   edi
c0015ec5:	56                   	push   esi
c0015ec6:	53                   	push   ebx
c0015ec7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ecc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0015ed1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ed5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015ed9:	83 e8 06             	sub    eax,0x6
c0015edc:	0f b7 c0             	movzx  eax,ax
c0015edf:	50                   	push   eax
c0015ee0:	52                   	push   edx
c0015ee1:	e8 6e fc ff ff       	call   c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ee6:	5a                   	pop    edx
c0015ee7:	5e                   	pop    esi
c0015ee8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015eeb:	8d 56 fa             	lea    edx,[esi-0x6]
c0015eee:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015ef1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ef7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015efa:	8d 56 02             	lea    edx,[esi+0x2]
c0015efd:	66 89 10             	mov    WORD PTR [eax],dx
c0015f00:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015f03:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015f07:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c0015f0b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015f0f:	89 d6                	mov    esi,edx
c0015f11:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015f17:	81 e6 ff fd 00 00    	and    esi,0xfdff
c0015f1d:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015f21:	74 08                	je     c0015f2b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0015f23:	89 d6                	mov    esi,edx
c0015f25:	81 ce 00 02 00 00    	or     esi,0x200
c0015f2b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f34:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015f38:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015f40:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015f43:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015f4b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015f4e:	5b                   	pop    ebx
c0015f4f:	5e                   	pop    esi
c0015f50:	5f                   	pop    edi
c0015f51:	c3                   	ret    

c0015f52 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015f52:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f57:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f5c:	c1 e0 04             	shl    eax,0x4
c0015f5f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015f62:	c3                   	ret    

c0015f63 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015f63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f6d:	c1 e0 04             	shl    eax,0x4
c0015f70:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015f74:	c3                   	ret    

c0015f75 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015f75:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f7a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f7f:	c1 e0 04             	shl    eax,0x4
c0015f82:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015f85:	c3                   	ret    

c0015f86 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015f86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f90:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0015f94:	c1 e0 04             	shl    eax,0x4
c0015f97:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015f9a:	c3                   	ret    

c0015f9b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015f9b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015fa0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015fa5:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c0015faa:	c1 e0 04             	shl    eax,0x4
c0015fad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015fb1:	c3                   	ret    

c0015fb2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015fb2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015fb7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015fbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fc0:	c1 e0 04             	shl    eax,0x4
c0015fc3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015fc6:	c3                   	ret    

c0015fc7 <Vm::faultHandler(regs*)>:
c0015fc7:	55                   	push   ebp
c0015fc8:	57                   	push   edi
c0015fc9:	56                   	push   esi
c0015fca:	53                   	push   ebx
c0015fcb:	83 ec 1c             	sub    esp,0x1c
c0015fce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015fd2:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c0015fd6:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c0015fda:	50                   	push   eax
c0015fdb:	57                   	push   edi
c0015fdc:	e8 73 fb ff ff       	call   c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fe1:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c0015fe5:	59                   	pop    ecx
c0015fe6:	5e                   	pop    esi
c0015fe7:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c0015fea:	89 c1                	mov    ecx,eax
c0015fec:	0f b7 c6             	movzx  eax,si
c0015fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ff3:	50                   	push   eax
c0015ff4:	55                   	push   ebp
c0015ff5:	e8 5a fb ff ff       	call   c0015b54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ffa:	5a                   	pop    edx
c0015ffb:	5a                   	pop    edx
c0015ffc:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c0016001:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016006:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c001600b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001600e:	80 fa 9d             	cmp    dl,0x9d
c0016011:	0f 84 2c 02 00 00    	je     c0016243 <Vm::faultHandler(regs*)+0x27c>
c0016017:	0f 87 94 00 00 00    	ja     c00160b1 <Vm::faultHandler(regs*)+0xea>
c001601d:	80 fa 66             	cmp    dl,0x66
c0016020:	0f 84 99 01 00 00    	je     c00161bf <Vm::faultHandler(regs*)+0x1f8>
c0016026:	77 4a                	ja     c0016072 <Vm::faultHandler(regs*)+0xab>
c0016028:	80 fa 36             	cmp    dl,0x36
c001602b:	0f 84 81 01 00 00    	je     c00161b2 <Vm::faultHandler(regs*)+0x1eb>
c0016031:	77 1d                	ja     c0016050 <Vm::faultHandler(regs*)+0x89>
c0016033:	80 fa 26             	cmp    dl,0x26
c0016036:	0f 84 4f 01 00 00    	je     c001618b <Vm::faultHandler(regs*)+0x1c4>
c001603c:	80 fa 2e             	cmp    dl,0x2e
c001603f:	0f 85 ec 05 00 00    	jne    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016045:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016048:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001604d:	41                   	inc    ecx
c001604e:	eb bb                	jmp    c001600b <Vm::faultHandler(regs*)+0x44>
c0016050:	80 fa 64             	cmp    dl,0x64
c0016053:	0f 84 3f 01 00 00    	je     c0016198 <Vm::faultHandler(regs*)+0x1d1>
c0016059:	0f 87 46 01 00 00    	ja     c00161a5 <Vm::faultHandler(regs*)+0x1de>
c001605f:	80 fa 3e             	cmp    dl,0x3e
c0016062:	0f 85 c9 05 00 00    	jne    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016068:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001606b:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016070:	eb db                	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c0016072:	80 fa 6d             	cmp    dl,0x6d
c0016075:	0f 84 e3 02 00 00    	je     c001635e <Vm::faultHandler(regs*)+0x397>
c001607b:	77 17                	ja     c0016094 <Vm::faultHandler(regs*)+0xcd>
c001607d:	80 fa 67             	cmp    dl,0x67
c0016080:	0f 84 46 01 00 00    	je     c00161cc <Vm::faultHandler(regs*)+0x205>
c0016086:	80 fa 6c             	cmp    dl,0x6c
c0016089:	0f 84 60 02 00 00    	je     c00162ef <Vm::faultHandler(regs*)+0x328>
c001608f:	e9 9d 05 00 00       	jmp    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016094:	80 fa 6f             	cmp    dl,0x6f
c0016097:	0f 84 f1 03 00 00    	je     c001648e <Vm::faultHandler(regs*)+0x4c7>
c001609d:	0f 82 54 03 00 00    	jb     c00163f7 <Vm::faultHandler(regs*)+0x430>
c00160a3:	80 fa 9c             	cmp    dl,0x9c
c00160a6:	0f 84 2d 01 00 00    	je     c00161d9 <Vm::faultHandler(regs*)+0x212>
c00160ac:	e9 80 05 00 00       	jmp    c0016631 <Vm::faultHandler(regs*)+0x66a>
c00160b1:	80 fa ec             	cmp    dl,0xec
c00160b4:	0f 84 19 05 00 00    	je     c00165d3 <Vm::faultHandler(regs*)+0x60c>
c00160ba:	77 79                	ja     c0016135 <Vm::faultHandler(regs*)+0x16e>
c00160bc:	80 fa e4             	cmp    dl,0xe4
c00160bf:	0f 84 98 04 00 00    	je     c001655d <Vm::faultHandler(regs*)+0x596>
c00160c5:	77 51                	ja     c0016118 <Vm::faultHandler(regs*)+0x151>
c00160c7:	80 fa cd             	cmp    dl,0xcd
c00160ca:	0f 84 d3 01 00 00    	je     c00162a3 <Vm::faultHandler(regs*)+0x2dc>
c00160d0:	80 fa cf             	cmp    dl,0xcf
c00160d3:	0f 85 58 05 00 00    	jne    c0016631 <Vm::faultHandler(regs*)+0x66a>
c00160d9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00160dc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00160df:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00160e3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00160e6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00160ea:	81 ca 00 02 02 00    	or     edx,0x20200
c00160f0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00160f3:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00160f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00160fd:	c1 e8 09             	shr    eax,0x9
c0016100:	24 01                	and    al,0x1
c0016102:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016105:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016108:	83 c0 06             	add    eax,0x6
c001610b:	25 ff ff 00 00       	and    eax,0xffff
c0016110:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016113:	e9 15 05 00 00       	jmp    c001662d <Vm::faultHandler(regs*)+0x666>
c0016118:	80 fa e6             	cmp    dl,0xe6
c001611b:	0f 84 86 04 00 00    	je     c00165a7 <Vm::faultHandler(regs*)+0x5e0>
c0016121:	0f 82 52 04 00 00    	jb     c0016579 <Vm::faultHandler(regs*)+0x5b2>
c0016127:	80 fa e7             	cmp    dl,0xe7
c001612a:	0f 84 8e 04 00 00    	je     c00165be <Vm::faultHandler(regs*)+0x5f7>
c0016130:	e9 fc 04 00 00       	jmp    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016135:	80 fa ef             	cmp    dl,0xef
c0016138:	0f 84 d9 04 00 00    	je     c0016617 <Vm::faultHandler(regs*)+0x650>
c001613e:	77 28                	ja     c0016168 <Vm::faultHandler(regs*)+0x1a1>
c0016140:	80 fa ed             	cmp    dl,0xed
c0016143:	0f 84 a6 04 00 00    	je     c00165ef <Vm::faultHandler(regs*)+0x628>
c0016149:	80 fa ee             	cmp    dl,0xee
c001614c:	0f 85 df 04 00 00    	jne    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016152:	50                   	push   eax
c0016153:	50                   	push   eax
c0016154:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016158:	50                   	push   eax
c0016159:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001615d:	50                   	push   eax
c001615e:	e8 b9 f9 ff ff       	call   c0015b1c <Vm::outbv(unsigned short, unsigned char)>
c0016163:	e9 a7 04 00 00       	jmp    c001660f <Vm::faultHandler(regs*)+0x648>
c0016168:	80 fa fa             	cmp    dl,0xfa
c001616b:	0f 84 62 01 00 00    	je     c00162d3 <Vm::faultHandler(regs*)+0x30c>
c0016171:	80 fa fb             	cmp    dl,0xfb
c0016174:	0f 84 67 01 00 00    	je     c00162e1 <Vm::faultHandler(regs*)+0x31a>
c001617a:	80 fa f3             	cmp    dl,0xf3
c001617d:	0f 85 ae 04 00 00    	jne    c0016631 <Vm::faultHandler(regs*)+0x66a>
c0016183:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016186:	e9 c2 fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c001618b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001618e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c0016193:	e9 b5 fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c0016198:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001619b:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c00161a0:	e9 a8 fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c00161a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161a8:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c00161ad:	e9 9b fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c00161b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161b5:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c00161ba:	e9 8e fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c00161bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161c2:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c00161c7:	e9 81 fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c00161cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161cf:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00161d4:	e9 74 fe ff ff       	jmp    c001604d <Vm::faultHandler(regs*)+0x86>
c00161d9:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00161de:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00161e1:	74 30                	je     c0016213 <Vm::faultHandler(regs*)+0x24c>
c00161e3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00161e6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00161ec:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00161f2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00161f5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00161f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00161fe:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016202:	0f 84 22 04 00 00    	je     c001662a <Vm::faultHandler(regs*)+0x663>
c0016208:	80 ce 02             	or     dh,0x2
c001620b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001620e:	e9 17 04 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c0016213:	8d 4e fe             	lea    ecx,[esi-0x2]
c0016216:	0f b7 d2             	movzx  edx,dx
c0016219:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001621f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016222:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016226:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001622c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016230:	74 05                	je     c0016237 <Vm::faultHandler(regs*)+0x270>
c0016232:	80 ce 02             	or     dh,0x2
c0016235:	eb 03                	jmp    c001623a <Vm::faultHandler(regs*)+0x273>
c0016237:	80 e6 fd             	and    dh,0xfd
c001623a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001623e:	e9 e7 03 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c0016243:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016248:	74 29                	je     c0016273 <Vm::faultHandler(regs*)+0x2ac>
c001624a:	8b 10                	mov    edx,DWORD PTR [eax]
c001624c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016252:	81 ca 00 02 02 00    	or     edx,0x20200
c0016258:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001625b:	8b 00                	mov    eax,DWORD PTR [eax]
c001625d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016263:	c1 e8 09             	shr    eax,0x9
c0016266:	24 01                	and    al,0x1
c0016268:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001626b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001626e:	83 c0 04             	add    eax,0x4
c0016271:	eb 23                	jmp    c0016296 <Vm::faultHandler(regs*)+0x2cf>
c0016273:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016276:	81 ca 00 02 02 00    	or     edx,0x20200
c001627c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001627f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016282:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016288:	c1 e8 09             	shr    eax,0x9
c001628b:	24 01                	and    al,0x1
c001628d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016290:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016293:	83 c0 02             	add    eax,0x2
c0016296:	25 ff ff 00 00       	and    eax,0xffff
c001629b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001629e:	e9 87 03 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c00162a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00162a7:	3c ee                	cmp    al,0xee
c00162a9:	75 10                	jne    c00162bb <Vm::faultHandler(regs*)+0x2f4>
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00162b1:	e8 05 f9 ff ff       	call   c0015bbb <Vm::mainloop3(unsigned long)>
c00162b6:	e9 57 03 00 00       	jmp    c0016612 <Vm::faultHandler(regs*)+0x64b>
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c2:	55                   	push   ebp
c00162c3:	51                   	push   ecx
c00162c4:	50                   	push   eax
c00162c5:	53                   	push   ebx
c00162c6:	e8 f9 fb ff ff       	call   c0015ec4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00162cb:	83 c4 20             	add    esp,0x20
c00162ce:	e9 5a 03 00 00       	jmp    c001662d <Vm::faultHandler(regs*)+0x666>
c00162d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00162dc:	e9 49 03 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c00162e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00162ea:	e9 3b 03 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c00162ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00162f4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00162f7:	74 2b                	je     c0016324 <Vm::faultHandler(regs*)+0x35d>
c00162f9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016300:	76 22                	jbe    c0016324 <Vm::faultHandler(regs*)+0x35d>
c0016302:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016306:	50                   	push   eax
c0016307:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001630b:	50                   	push   eax
c001630c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016310:	50                   	push   eax
c0016311:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016315:	50                   	push   eax
c0016316:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001631a:	50                   	push   eax
c001631b:	6a 6c                	push   0x6c
c001631d:	6a 6c                	push   0x6c
c001631f:	e9 c6 01 00 00       	jmp    c00164ea <Vm::faultHandler(regs*)+0x523>
c0016324:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	0f b7 f6             	movzx  esi,si
c001632e:	50                   	push   eax
c001632f:	e8 d3 f7 ff ff       	call   c0015b07 <Vm::inbv(unsigned short)>
c0016334:	83 c4 0c             	add    esp,0xc
c0016337:	0f b6 c0             	movzx  eax,al
c001633a:	50                   	push   eax
c001633b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001633f:	50                   	push   eax
c0016340:	56                   	push   esi
c0016341:	e8 40 fc ff ff       	call   c0015f86 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016346:	83 c4 10             	add    esp,0x10
c0016349:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001634c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016350:	74 03                	je     c0016355 <Vm::faultHandler(regs*)+0x38e>
c0016352:	48                   	dec    eax
c0016353:	eb 01                	jmp    c0016356 <Vm::faultHandler(regs*)+0x38f>
c0016355:	40                   	inc    eax
c0016356:	0f b7 c0             	movzx  eax,ax
c0016359:	e9 91 00 00 00       	jmp    c00163ef <Vm::faultHandler(regs*)+0x428>
c001635e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016363:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016366:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016369:	74 29                	je     c0016394 <Vm::faultHandler(regs*)+0x3cd>
c001636b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016370:	76 22                	jbe    c0016394 <Vm::faultHandler(regs*)+0x3cd>
c0016372:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016376:	50                   	push   eax
c0016377:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001637b:	50                   	push   eax
c001637c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016380:	50                   	push   eax
c0016381:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016385:	50                   	push   eax
c0016386:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001638a:	50                   	push   eax
c001638b:	6a 6d                	push   0x6d
c001638d:	6a 6d                	push   0x6d
c001638f:	e9 56 01 00 00       	jmp    c00164ea <Vm::faultHandler(regs*)+0x523>
c0016394:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016399:	0f b7 c8             	movzx  ecx,ax
c001639c:	0f b7 f6             	movzx  esi,si
c001639f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00163a3:	74 1e                	je     c00163c3 <Vm::faultHandler(regs*)+0x3fc>
c00163a5:	ed                   	in     eax,dx
c00163a6:	52                   	push   edx
c00163a7:	50                   	push   eax
c00163a8:	51                   	push   ecx
c00163a9:	56                   	push   esi
c00163aa:	e8 03 fc ff ff       	call   c0015fb2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00163af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	8d 50 04             	lea    edx,[eax+0x4]
c00163b8:	83 e8 04             	sub    eax,0x4
c00163bb:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163c1:	eb 20                	jmp    c00163e3 <Vm::faultHandler(regs*)+0x41c>
c00163c3:	66 ed                	in     ax,dx
c00163c5:	55                   	push   ebp
c00163c6:	0f b7 c0             	movzx  eax,ax
c00163c9:	50                   	push   eax
c00163ca:	51                   	push   ecx
c00163cb:	56                   	push   esi
c00163cc:	e8 ca fb ff ff       	call   c0015f9b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00163d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	8d 50 02             	lea    edx,[eax+0x2]
c00163da:	83 e8 02             	sub    eax,0x2
c00163dd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163e3:	25 ff ff 00 00       	and    eax,0xffff
c00163e8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00163ec:	0f 44 c2             	cmove  eax,edx
c00163ef:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00163f2:	e9 33 02 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c00163f7:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c00163fb:	fe c8                	dec    al
c00163fd:	3c 05                	cmp    al,0x5
c00163ff:	77 23                	ja     c0016424 <Vm::faultHandler(regs*)+0x45d>
c0016401:	0f b6 c0             	movzx  eax,al
c0016404:	ff 24 85 dc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf024]
c001640b:	89 ef                	mov    edi,ebp
c001640d:	eb 15                	jmp    c0016424 <Vm::faultHandler(regs*)+0x45d>
c001640f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016413:	eb 0f                	jmp    c0016424 <Vm::faultHandler(regs*)+0x45d>
c0016415:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016419:	eb 09                	jmp    c0016424 <Vm::faultHandler(regs*)+0x45d>
c001641b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001641f:	eb 03                	jmp    c0016424 <Vm::faultHandler(regs*)+0x45d>
c0016421:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016424:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016429:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001642c:	74 29                	je     c0016457 <Vm::faultHandler(regs*)+0x490>
c001642e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016433:	76 22                	jbe    c0016457 <Vm::faultHandler(regs*)+0x490>
c0016435:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016439:	50                   	push   eax
c001643a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001643e:	50                   	push   eax
c001643f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016443:	50                   	push   eax
c0016444:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016448:	50                   	push   eax
c0016449:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001644d:	50                   	push   eax
c001644e:	6a 6e                	push   0x6e
c0016450:	6a 6e                	push   0x6e
c0016452:	e9 93 00 00 00       	jmp    c00164ea <Vm::faultHandler(regs*)+0x523>
c0016457:	51                   	push   ecx
c0016458:	0f b7 c0             	movzx  eax,ax
c001645b:	51                   	push   ecx
c001645c:	50                   	push   eax
c001645d:	57                   	push   edi
c001645e:	e8 ef fa ff ff       	call   c0015f52 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016463:	5e                   	pop    esi
c0016464:	5f                   	pop    edi
c0016465:	0f b6 c0             	movzx  eax,al
c0016468:	50                   	push   eax
c0016469:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001646d:	50                   	push   eax
c001646e:	e8 a9 f6 ff ff       	call   c0015b1c <Vm::outbv(unsigned short, unsigned char)>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016479:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001647d:	74 03                	je     c0016482 <Vm::faultHandler(regs*)+0x4bb>
c001647f:	48                   	dec    eax
c0016480:	eb 01                	jmp    c0016483 <Vm::faultHandler(regs*)+0x4bc>
c0016482:	40                   	inc    eax
c0016483:	0f b7 c0             	movzx  eax,ax
c0016486:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016489:	e9 9c 01 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c001648e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016492:	fe c8                	dec    al
c0016494:	3c 05                	cmp    al,0x5
c0016496:	77 23                	ja     c00164bb <Vm::faultHandler(regs*)+0x4f4>
c0016498:	0f b6 c0             	movzx  eax,al
c001649b:	ff 24 85 f4 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf00c]
c00164a2:	89 ef                	mov    edi,ebp
c00164a4:	eb 15                	jmp    c00164bb <Vm::faultHandler(regs*)+0x4f4>
c00164a6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00164aa:	eb 0f                	jmp    c00164bb <Vm::faultHandler(regs*)+0x4f4>
c00164ac:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00164b0:	eb 09                	jmp    c00164bb <Vm::faultHandler(regs*)+0x4f4>
c00164b2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00164b6:	eb 03                	jmp    c00164bb <Vm::faultHandler(regs*)+0x4f4>
c00164b8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00164bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00164c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00164c3:	74 37                	je     c00164fc <Vm::faultHandler(regs*)+0x535>
c00164c5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00164cb:	76 2f                	jbe    c00164fc <Vm::faultHandler(regs*)+0x535>
c00164cd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164d1:	50                   	push   eax
c00164d2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164d6:	50                   	push   eax
c00164d7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164db:	50                   	push   eax
c00164dc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164e0:	50                   	push   eax
c00164e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164e5:	50                   	push   eax
c00164e6:	6a 6f                	push   0x6f
c00164e8:	6a 6f                	push   0x6f
c00164ea:	68 82 0f 02 c0       	push   0xc0020f82
c00164ef:	e8 f2 44 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00164f4:	83 c4 20             	add    esp,0x20
c00164f7:	e9 89 01 00 00       	jmp    c0016685 <Vm::faultHandler(regs*)+0x6be>
c00164fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00164ff:	0f b7 c6             	movzx  eax,si
c0016502:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c0016506:	81 e1 00 04 00 00    	and    ecx,0x400
c001650c:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016511:	74 1c                	je     c001652f <Vm::faultHandler(regs*)+0x568>
c0016513:	52                   	push   edx
c0016514:	52                   	push   edx
c0016515:	50                   	push   eax
c0016516:	57                   	push   edi
c0016517:	e8 59 fa ff ff       	call   c0015f75 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001651c:	83 c4 10             	add    esp,0x10
c001651f:	89 ea                	mov    edx,ebp
c0016521:	ef                   	out    dx,eax
c0016522:	8d 46 04             	lea    eax,[esi+0x4]
c0016525:	83 ee 04             	sub    esi,0x4
c0016528:	25 ff ff 00 00       	and    eax,0xffff
c001652d:	eb 1b                	jmp    c001654a <Vm::faultHandler(regs*)+0x583>
c001652f:	52                   	push   edx
c0016530:	52                   	push   edx
c0016531:	50                   	push   eax
c0016532:	57                   	push   edi
c0016533:	e8 2b fa ff ff       	call   c0015f63 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016538:	83 c4 10             	add    esp,0x10
c001653b:	89 ea                	mov    edx,ebp
c001653d:	66 ef                	out    dx,ax
c001653f:	8d 46 02             	lea    eax,[esi+0x2]
c0016542:	83 ee 02             	sub    esi,0x2
c0016545:	25 ff ff 00 00       	and    eax,0xffff
c001654a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016550:	85 c9                	test   ecx,ecx
c0016552:	0f 44 f0             	cmove  esi,eax
c0016555:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016558:	e9 cd 00 00 00       	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c001655d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001656b:	50                   	push   eax
c001656c:	e8 96 f5 ff ff       	call   c0015b07 <Vm::inbv(unsigned short)>
c0016571:	0f b6 c0             	movzx  eax,al
c0016574:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016577:	eb 3f                	jmp    c00165b8 <Vm::faultHandler(regs*)+0x5f1>
c0016579:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001657e:	74 07                	je     c0016587 <Vm::faultHandler(regs*)+0x5c0>
c0016580:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016584:	ed                   	in     eax,dx
c0016585:	eb 14                	jmp    c001659b <Vm::faultHandler(regs*)+0x5d4>
c0016587:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001658a:	66 31 f6             	xor    si,si
c001658d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016590:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016594:	66 ed                	in     ax,dx
c0016596:	0f b7 c0             	movzx  eax,ax
c0016599:	09 f0                	or     eax,esi
c001659b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001659e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00165a2:	e9 86 00 00 00       	jmp    c001662d <Vm::faultHandler(regs*)+0x666>
c00165a7:	52                   	push   edx
c00165a8:	52                   	push   edx
c00165a9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00165ad:	50                   	push   eax
c00165ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165b2:	50                   	push   eax
c00165b3:	e8 64 f5 ff ff       	call   c0015b1c <Vm::outbv(unsigned short, unsigned char)>
c00165b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00165bc:	eb 54                	jmp    c0016612 <Vm::faultHandler(regs*)+0x64b>
c00165be:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00165c3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165c6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00165ca:	74 03                	je     c00165cf <Vm::faultHandler(regs*)+0x608>
c00165cc:	ef                   	out    dx,eax
c00165cd:	eb cf                	jmp    c001659e <Vm::faultHandler(regs*)+0x5d7>
c00165cf:	66 ef                	out    dx,ax
c00165d1:	eb cb                	jmp    c001659e <Vm::faultHandler(regs*)+0x5d7>
c00165d3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00165e1:	50                   	push   eax
c00165e2:	e8 20 f5 ff ff       	call   c0015b07 <Vm::inbv(unsigned short)>
c00165e7:	0f b6 c0             	movzx  eax,al
c00165ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00165ed:	eb 20                	jmp    c001660f <Vm::faultHandler(regs*)+0x648>
c00165ef:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00165f4:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00165f8:	74 03                	je     c00165fd <Vm::faultHandler(regs*)+0x636>
c00165fa:	ed                   	in     eax,dx
c00165fb:	eb 0d                	jmp    c001660a <Vm::faultHandler(regs*)+0x643>
c00165fd:	66 ed                	in     ax,dx
c00165ff:	0f b7 d0             	movzx  edx,ax
c0016602:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016605:	66 31 c0             	xor    ax,ax
c0016608:	09 d0                	or     eax,edx
c001660a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001660d:	eb 1b                	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c001660f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016612:	83 c4 10             	add    esp,0x10
c0016615:	eb 16                	jmp    c001662d <Vm::faultHandler(regs*)+0x666>
c0016617:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001661c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001661f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016623:	74 03                	je     c0016628 <Vm::faultHandler(regs*)+0x661>
c0016625:	ef                   	out    dx,eax
c0016626:	eb 02                	jmp    c001662a <Vm::faultHandler(regs*)+0x663>
c0016628:	66 ef                	out    dx,ax
c001662a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001662d:	b0 01                	mov    al,0x1
c001662f:	eb 56                	jmp    c0016687 <Vm::faultHandler(regs*)+0x6c0>
c0016631:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016635:	50                   	push   eax
c0016636:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001663a:	50                   	push   eax
c001663b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001663f:	50                   	push   eax
c0016640:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016644:	50                   	push   eax
c0016645:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016649:	50                   	push   eax
c001664a:	52                   	push   edx
c001664b:	52                   	push   edx
c001664c:	68 af 0f 02 c0       	push   0xc0020faf
c0016651:	e8 90 43 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016656:	83 c4 20             	add    esp,0x20
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	6a 60                	push   0x60
c001665e:	e8 a4 f4 ff ff       	call   c0015b07 <Vm::inbv(unsigned short)>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	3c 1c                	cmp    al,0x1c
c0016668:	74 04                	je     c001666e <Vm::faultHandler(regs*)+0x6a7>
c001666a:	3c 5a                	cmp    al,0x5a
c001666c:	75 eb                	jne    c0016659 <Vm::faultHandler(regs*)+0x692>
c001666e:	3c 1c                	cmp    al,0x1c
c0016670:	74 04                	je     c0016676 <Vm::faultHandler(regs*)+0x6af>
c0016672:	3c 5a                	cmp    al,0x5a
c0016674:	75 0f                	jne    c0016685 <Vm::faultHandler(regs*)+0x6be>
c0016676:	83 ec 0c             	sub    esp,0xc
c0016679:	6a 60                	push   0x60
c001667b:	e8 87 f4 ff ff       	call   c0015b07 <Vm::inbv(unsigned short)>
c0016680:	83 c4 10             	add    esp,0x10
c0016683:	eb e9                	jmp    c001666e <Vm::faultHandler(regs*)+0x6a7>
c0016685:	31 c0                	xor    eax,eax
c0016687:	83 c4 1c             	add    esp,0x1c
c001668a:	5b                   	pop    ebx
c001668b:	5e                   	pop    esi
c001668c:	5f                   	pop    edi
c001668d:	5d                   	pop    ebp
c001668e:	c3                   	ret    

c001668f <noCopro(unsigned long)>:
c001668f:	c3                   	ret    

c0016690 <nmiHandler(regs*, void*)>:
c0016690:	83 ec 1c             	sub    esp,0x1c
c0016693:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016698:	89 04 24             	mov    DWORD PTR [esp],eax
c001669b:	e8 b8 0b ff ff       	call   c0007258 <Computer::handleNMI()>
c00166a0:	90                   	nop
c00166a1:	83 c4 1c             	add    esp,0x1c
c00166a4:	c3                   	ret    

c00166a5 <doubleFault(regs*, void*)>:
c00166a5:	55                   	push   ebp
c00166a6:	89 e5                	mov    ebp,esp
c00166a8:	83 ec 18             	sub    esp,0x18
c00166ab:	c7 04 24 0c 10 02 c0 	mov    DWORD PTR [esp],0xc002100c
c00166b2:	e8 7e a0 ff ff       	call   c0010735 <KePanic(char const*)>
c00166b7:	90                   	nop
c00166b8:	c9                   	leave  
c00166b9:	c3                   	ret    

c00166ba <displayDebugInfo(regs*)>:
c00166ba:	83 ec 2c             	sub    esp,0x2c
c00166bd:	0f 20 c0             	mov    eax,cr0
c00166c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166c4:	0f 20 d0             	mov    eax,cr2
c00166c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166cb:	0f 20 d8             	mov    eax,cr3
c00166ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166d2:	0f 20 e0             	mov    eax,cr4
c00166d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166dd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00166e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166e4:	c7 04 24 28 10 02 c0 	mov    DWORD PTR [esp],0xc0021028
c00166eb:	e8 f6 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00166f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00166f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166fb:	c7 04 24 19 10 02 c0 	mov    DWORD PTR [esp],0xc0021019
c0016702:	e8 df 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001670b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001670e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016712:	c7 04 24 24 10 02 c0 	mov    DWORD PTR [esp],0xc0021024
c0016719:	e8 c8 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001671e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016722:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016725:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016729:	c7 04 24 33 10 02 c0 	mov    DWORD PTR [esp],0xc0021033
c0016730:	e8 b1 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016739:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001673c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016740:	c7 04 24 3e 10 02 c0 	mov    DWORD PTR [esp],0xc002103e
c0016747:	e8 9a 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001674c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016750:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016754:	c7 04 24 49 10 02 c0 	mov    DWORD PTR [esp],0xc0021049
c001675b:	e8 86 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016764:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016768:	c7 04 24 54 10 02 c0 	mov    DWORD PTR [esp],0xc0021054
c001676f:	e8 72 42 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016774:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016779:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001677f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016782:	e8 5c 1f ff ff       	call   c00086e3 <setActiveTerminal(VgaText*)>
c0016787:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001678c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016792:	c7 44 24 04 5f 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002105f
c001679a:	89 04 24             	mov    DWORD PTR [esp],eax
c001679d:	e8 86 22 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00167a2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00167b1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00167b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00167b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00167bb:	e8 22 22 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c00167c0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167cb:	c7 44 24 04 6d 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002106d
c00167d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00167d6:	e8 4d 22 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00167db:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167e6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00167eb:	8b 12                	mov    edx,DWORD PTR [edx]
c00167ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00167f0:	83 c2 0c             	add    edx,0xc
c00167f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00167f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00167fa:	e8 29 22 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00167ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016804:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001680a:	c7 44 24 04 76 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021076
c0016812:	89 04 24             	mov    DWORD PTR [esp],eax
c0016815:	e8 0e 22 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c001681a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001681f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016825:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016829:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001682c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016830:	89 04 24             	mov    DWORD PTR [esp],eax
c0016833:	e8 aa 21 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c0016838:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001683d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016843:	c7 44 24 04 7e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002107e
c001684b:	89 04 24             	mov    DWORD PTR [esp],eax
c001684e:	e8 d5 21 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016853:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016858:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001685e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016862:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016865:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016869:	89 04 24             	mov    DWORD PTR [esp],eax
c001686c:	e8 71 21 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c0016871:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016876:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001687c:	c7 44 24 04 86 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021086
c0016884:	89 04 24             	mov    DWORD PTR [esp],eax
c0016887:	e8 9c 21 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c001688c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016891:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001689b:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001689e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00168a5:	e8 38 21 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c00168aa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b5:	c7 44 24 04 8e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002108e
c00168bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00168c0:	e8 63 21 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00168c5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168d4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168db:	89 04 24             	mov    DWORD PTR [esp],eax
c00168de:	e8 ff 20 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c00168e3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168ee:	c7 44 24 04 96 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021096
c00168f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00168f9:	e8 2a 21 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00168fe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016903:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001690d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016910:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016914:	89 04 24             	mov    DWORD PTR [esp],eax
c0016917:	e8 c6 20 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c001691c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016921:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016927:	c7 44 24 04 9e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002109e
c001692f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016932:	e8 f1 20 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016937:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016942:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016946:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016949:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001694d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016950:	e8 8d 20 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c0016955:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016960:	c7 44 24 04 a6 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210a6
c0016968:	89 04 24             	mov    DWORD PTR [esp],eax
c001696b:	e8 b8 20 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016970:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016975:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001697b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001697f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016983:	89 04 24             	mov    DWORD PTR [esp],eax
c0016986:	e8 57 20 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c001698b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016990:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016996:	c7 44 24 04 af 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210af
c001699e:	89 04 24             	mov    DWORD PTR [esp],eax
c00169a1:	e8 82 20 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00169a6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00169bc:	e8 21 20 ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c00169c1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169cc:	c7 44 24 04 b7 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210b7
c00169d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00169d7:	e8 4c 20 ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c00169dc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00169f2:	e8 eb 1f ff ff       	call   c00089e2 <VgaText::putx(unsigned int)>
c00169f7:	fa                   	cli    
c00169f8:	f4                   	hlt    
c00169f9:	eb fe                	jmp    c00169f9 <displayDebugInfo(regs*)+0x33f>

c00169fb <HalSystemIdle()>:
c00169fb:	56                   	push   esi
c00169fc:	53                   	push   ebx
c00169fd:	83 ec 24             	sub    esp,0x24
c0016a00:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a0b:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0016a12:	24 04                	and    al,0x4
c0016a14:	0f 95 c0             	setne  al
c0016a17:	84 c0                	test   al,al
c0016a19:	74 53                	je     c0016a6e <HalSystemIdle()+0x73>
c0016a1b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a20:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016a28:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a2b:	e8 00 06 ff ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c0016a30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a38:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a41:	83 e2 02             	and    edx,0x2
c0016a44:	89 d3                	mov    ebx,edx
c0016a46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a4a:	83 e2 00             	and    edx,0x0
c0016a4d:	89 d6                	mov    esi,edx
c0016a4f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016a53:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016a57:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a62:	e8 f1 05 ff ff       	call   c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016a67:	e8 28 97 fe ff       	call   c0000194 <doTPAUSE>
c0016a6c:	eb 01                	jmp    c0016a6f <HalSystemIdle()+0x74>
c0016a6e:	f4                   	hlt    
c0016a6f:	90                   	nop
c0016a70:	83 c4 24             	add    esp,0x24
c0016a73:	5b                   	pop    ebx
c0016a74:	5e                   	pop    esi
c0016a75:	c3                   	ret    

c0016a76 <displayProgramFault(char const*)>:
c0016a76:	83 ec 1c             	sub    esp,0x1c
c0016a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a80:	e8 61 3f ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016a85:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a95:	85 c0                	test   eax,eax
c0016a97:	74 30                	je     c0016ac9 <displayProgramFault(char const*)+0x53>
c0016a99:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016aa0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016aa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aa9:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c0016ab1:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0016ab9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016abd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ac4:	e8 d1 1f ff ff       	call   c0008a9a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016ac9:	90                   	nop
c0016aca:	83 c4 1c             	add    esp,0x1c
c0016acd:	c3                   	ret    

c0016ace <gpFault(regs*, void*)>:
c0016ace:	83 ec 2c             	sub    esp,0x2c
c0016ad1:	c7 05 10 82 02 c0 c7 5f 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0015fc7
c0016adb:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016ae0:	85 c0                	test   eax,eax
c0016ae2:	74 19                	je     c0016afd <gpFault(regs*, void*)+0x2f>
c0016ae4:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016ae9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016aed:	89 14 24             	mov    DWORD PTR [esp],edx
c0016af0:	ff d0                	call   eax
c0016af2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016af6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016afb:	75 26                	jne    c0016b23 <gpFault(regs*, void*)+0x55>
c0016afd:	c7 04 24 bf 10 02 c0 	mov    DWORD PTR [esp],0xc00210bf
c0016b04:	e8 6d ff ff ff       	call   c0016a76 <displayProgramFault(char const*)>
c0016b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b10:	e8 a5 fb ff ff       	call   c00166ba <displayDebugInfo(regs*)>
c0016b15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016b1c:	e8 ab ee ff ff       	call   c00159cc <Thr::terminateFromIRQ(int)>
c0016b21:	eb 01                	jmp    c0016b24 <gpFault(regs*, void*)+0x56>
c0016b23:	90                   	nop
c0016b24:	83 c4 2c             	add    esp,0x2c
c0016b27:	c3                   	ret    

c0016b28 <pgFault(regs*, void*)>:
c0016b28:	83 ec 2c             	sub    esp,0x2c
c0016b2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016b32:	0f 20 d0             	mov    eax,cr2
c0016b35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b3d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016b41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b45:	c7 04 24 9c 11 02 c0 	mov    DWORD PTR [esp],0xc002119c
c0016b4c:	e8 95 3e ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016b51:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b5b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016b61:	0f 20 d2             	mov    edx,cr2
c0016b64:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b6c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b73:	e8 c2 39 ff ff       	call   c000a53a <VAS::tryLoadBackOffDisk(unsigned long)>
c0016b78:	84 c0                	test   al,al
c0016b7a:	75 26                	jne    c0016ba2 <pgFault(regs*, void*)+0x7a>
c0016b7c:	c7 04 24 d8 10 02 c0 	mov    DWORD PTR [esp],0xc00210d8
c0016b83:	e8 ee fe ff ff       	call   c0016a76 <displayProgramFault(char const*)>
c0016b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b8f:	e8 26 fb ff ff       	call   c00166ba <displayDebugInfo(regs*)>
c0016b94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016b9b:	e8 2c ee ff ff       	call   c00159cc <Thr::terminateFromIRQ(int)>
c0016ba0:	eb 01                	jmp    c0016ba3 <pgFault(regs*, void*)+0x7b>
c0016ba2:	90                   	nop
c0016ba3:	83 c4 2c             	add    esp,0x2c
c0016ba6:	c3                   	ret    

c0016ba7 <otherISRHandler(regs*, void*)>:
c0016ba7:	83 ec 1c             	sub    esp,0x1c
c0016baa:	c7 04 24 c4 11 02 c0 	mov    DWORD PTR [esp],0xc00211c4
c0016bb1:	e8 c0 fe ff ff       	call   c0016a76 <displayProgramFault(char const*)>
c0016bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bba:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bbd:	e8 f8 fa ff ff       	call   c00166ba <displayDebugInfo(regs*)>
c0016bc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016bc9:	e8 fe ed ff ff       	call   c00159cc <Thr::terminateFromIRQ(int)>
c0016bce:	90                   	nop
c0016bcf:	83 c4 1c             	add    esp,0x1c
c0016bd2:	c3                   	ret    

c0016bd3 <opcodeFault(regs*, void*)>:
c0016bd3:	55                   	push   ebp
c0016bd4:	89 e5                	mov    ebp,esp
c0016bd6:	83 ec 18             	sub    esp,0x18
c0016bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016bdc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016bdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016be3:	c7 04 24 e3 10 02 c0 	mov    DWORD PTR [esp],0xc00210e3
c0016bea:	e8 f7 3d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016bef:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bfa:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c0016c01:	84 c0                	test   al,al
c0016c03:	74 1d                	je     c0016c22 <opcodeFault(regs*, void*)+0x4f>
c0016c05:	c7 04 24 ec 11 02 c0 	mov    DWORD PTR [esp],0xc00211ec
c0016c0c:	e8 d5 3d ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c17:	8d 50 19             	lea    edx,[eax+0x19]
c0016c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c20:	eb 23                	jmp    c0016c45 <opcodeFault(regs*, void*)+0x72>
c0016c22:	c7 04 24 f1 10 02 c0 	mov    DWORD PTR [esp],0xc00210f1
c0016c29:	e8 48 fe ff ff       	call   c0016a76 <displayProgramFault(char const*)>
c0016c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c34:	e8 81 fa ff ff       	call   c00166ba <displayDebugInfo(regs*)>
c0016c39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c40:	e8 87 ed ff ff       	call   c00159cc <Thr::terminateFromIRQ(int)>
c0016c45:	c9                   	leave  
c0016c46:	c3                   	ret    

c0016c47 <i386SaveCoprocessor(void*)>:
c0016c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4b:	83 c0 3f             	add    eax,0x3f
c0016c4e:	83 e0 c0             	and    eax,0xffffffc0
c0016c51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c55:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016c5b <i386LoadCoprocessor(void*)>:
c0016c5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c5f:	83 c0 3f             	add    eax,0x3f
c0016c62:	83 e0 c0             	and    eax,0xffffffc0
c0016c65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c69:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016c6f <x87EmulHandler(regs*, void*)>:
c0016c6f:	53                   	push   ebx
c0016c70:	83 ec 08             	sub    esp,0x8
c0016c73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c78:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016c7c:	74 10                	je     c0016c8e <x87EmulHandler(regs*, void*)+0x1f>
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	68 fe 10 02 c0       	push   0xc00210fe
c0016c86:	e8 aa 9a ff ff       	call   c0010735 <KePanic(char const*)>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	0f 20 c0             	mov    eax,cr0
c0016c91:	a8 08                	test   al,0x8
c0016c93:	74 59                	je     c0016cee <x87EmulHandler(regs*, void*)+0x7f>
c0016c95:	0f 06                	clts   
c0016c97:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016c9c:	85 c0                	test   eax,eax
c0016c9e:	74 0e                	je     c0016cae <x87EmulHandler(regs*, void*)+0x3f>
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016ca6:	e8 9c ff ff ff       	call   c0016c47 <i386SaveCoprocessor(void*)>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016cb4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016cb8:	75 12                	jne    c0016ccc <x87EmulHandler(regs*, void*)+0x5d>
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	68 40 02 00 00       	push   0x240
c0016cc2:	e8 9f 0d ff ff       	call   c0007a66 <malloc>
c0016cc7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016cca:	eb 10                	jmp    c0016cdc <x87EmulHandler(regs*, void*)+0x6d>
c0016ccc:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016cd1:	83 ec 0c             	sub    esp,0xc
c0016cd4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016cd7:	e8 7f ff ff ff       	call   c0016c5b <i386LoadCoprocessor(void*)>
c0016cdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016ce9:	83 c4 08             	add    esp,0x8
c0016cec:	5b                   	pop    ebx
c0016ced:	c3                   	ret    
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	68 12 11 02 c0       	push   0xc0021112
c0016cf6:	e8 eb 3c ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016cfb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016d03:	83 c4 18             	add    esp,0x18
c0016d06:	5b                   	pop    ebx
c0016d07:	e9 c0 ec ff ff       	jmp    c00159cc <Thr::terminateFromIRQ(int)>

c0016d0c <HalInitialiseCoprocessor()>:
c0016d0c:	83 ec 10             	sub    esp,0x10
c0016d0f:	6a 00                	push   0x0
c0016d11:	68 6f 6c 01 c0       	push   0xc0016c6f
c0016d16:	6a 07                	push   0x7
c0016d18:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016d22:	e8 04 56 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d27:	e8 d4 6e 00 00       	call   c001dc00 <avxDetect>
c0016d2c:	83 c4 10             	add    esp,0x10
c0016d2f:	85 c0                	test   eax,eax
c0016d31:	74 1c                	je     c0016d4f <HalInitialiseCoprocessor()+0x43>
c0016d33:	c7 05 0c 82 02 c0 2a dc 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dc2a
c0016d3d:	c7 05 08 82 02 c0 3b dc 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dc3b
c0016d47:	83 c4 0c             	add    esp,0xc
c0016d4a:	e9 fd 6e 00 00       	jmp    c001dc4c <avxInit>
c0016d4f:	e8 3c 72 00 00       	call   c001df90 <absolutelyNoChanceInHell>
c0016d54:	85 c0                	test   eax,eax
c0016d56:	74 1c                	je     c0016d74 <HalInitialiseCoprocessor()+0x68>
c0016d58:	c7 05 0c 82 02 c0 a8 df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dfa8
c0016d62:	c7 05 08 82 02 c0 b0 df 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dfb0
c0016d6c:	83 c4 0c             	add    esp,0xc
c0016d6f:	e9 44 72 00 00       	jmp    c001dfb8 <sseInit>
c0016d74:	e8 5d 72 00 00       	call   c001dfd6 <x87Detect>
c0016d79:	85 c0                	test   eax,eax
c0016d7b:	74 1c                	je     c0016d99 <HalInitialiseCoprocessor()+0x8d>
c0016d7d:	c7 05 0c 82 02 c0 f1 df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dff1
c0016d87:	c7 05 08 82 02 c0 f8 df 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dff8
c0016d91:	83 c4 0c             	add    esp,0xc
c0016d94:	e9 66 72 00 00       	jmp    c001dfff <x87Init>
c0016d99:	c7 05 0c 82 02 c0 8f 66 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001668f
c0016da3:	c7 05 08 82 02 c0 8f 66 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001668f
c0016dad:	0f 20 c0             	mov    eax,cr0
c0016db0:	83 c8 04             	or     eax,0x4
c0016db3:	0f 22 c0             	mov    cr0,eax
c0016db6:	83 c4 0c             	add    esp,0xc
c0016db9:	c3                   	ret    

c0016dba <HalPanic(char const*)>:
c0016dba:	53                   	push   ebx
c0016dbb:	83 ec 10             	sub    esp,0x10
c0016dbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016dc2:	fa                   	cli    
c0016dc3:	53                   	push   ebx
c0016dc4:	68 28 11 02 c0       	push   0xc0021128
c0016dc9:	e8 18 3c ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0016dce:	83 c4 0c             	add    esp,0xc
c0016dd1:	6a 01                	push   0x1
c0016dd3:	6a 0f                	push   0xf
c0016dd5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ddb:	e8 5e 17 ff ff       	call   c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016de0:	58                   	pop    eax
c0016de1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016de7:	e8 42 19 ff ff       	call   c000872e <VgaText::clearScreen()>
c0016dec:	5a                   	pop    edx
c0016ded:	59                   	pop    ecx
c0016dee:	68 80 f9 01 c0       	push   0xc001f980
c0016df3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016df9:	e8 78 17 ff ff       	call   c0008576 <VgaText::setTitle(char*)>
c0016dfe:	83 c4 0c             	add    esp,0xc
c0016e01:	6a 01                	push   0x1
c0016e03:	6a 0f                	push   0xf
c0016e05:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e0b:	e8 2e 17 ff ff       	call   c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e10:	58                   	pop    eax
c0016e11:	5a                   	pop    edx
c0016e12:	68 41 11 02 c0       	push   0xc0021141
c0016e17:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e1d:	e8 06 1c ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e22:	83 c4 0c             	add    esp,0xc
c0016e25:	6a 0f                	push   0xf
c0016e27:	6a 01                	push   0x1
c0016e29:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e2f:	e8 0a 17 ff ff       	call   c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e34:	59                   	pop    ecx
c0016e35:	58                   	pop    eax
c0016e36:	68 4a 11 02 c0       	push   0xc002114a
c0016e3b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e41:	e8 e2 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e46:	83 c4 0c             	add    esp,0xc
c0016e49:	6a 01                	push   0x1
c0016e4b:	6a 0f                	push   0xf
c0016e4d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e53:	e8 e6 16 ff ff       	call   c000853e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e58:	58                   	pop    eax
c0016e59:	5a                   	pop    edx
c0016e5a:	68 8e 11 02 c0       	push   0xc002118e
c0016e5f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e65:	e8 be 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e6a:	59                   	pop    ecx
c0016e6b:	58                   	pop    eax
c0016e6c:	68 57 11 02 c0       	push   0xc0021157
c0016e71:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e77:	e8 ac 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e7c:	58                   	pop    eax
c0016e7d:	5a                   	pop    edx
c0016e7e:	68 91 11 02 c0       	push   0xc0021191
c0016e83:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e89:	e8 9a 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e8e:	59                   	pop    ecx
c0016e8f:	58                   	pop    eax
c0016e90:	53                   	push   ebx
c0016e91:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e97:	e8 8c 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016e9c:	58                   	pop    eax
c0016e9d:	5a                   	pop    edx
c0016e9e:	68 8e 11 02 c0       	push   0xc002118e
c0016ea3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ea9:	e8 7a 1b ff ff       	call   c0008a28 <VgaText::puts(char const*)>
c0016eae:	83 c4 10             	add    esp,0x10
c0016eb1:	eb fe                	jmp    c0016eb1 <HalPanic(char const*)+0xf7>

c0016eb3 <HalQueryPerformanceCounter()>:
c0016eb3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016eb8:	31 d2                	xor    edx,edx
c0016eba:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ec0:	31 c0                	xor    eax,eax
c0016ec2:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016ec9:	74 02                	je     c0016ecd <HalQueryPerformanceCounter()+0x1a>
c0016ecb:	0f 31                	rdtsc  
c0016ecd:	c3                   	ret    

c0016ece <HalInitialise()>:
c0016ece:	53                   	push   ebx
c0016ecf:	83 ec 08             	sub    esp,0x8
c0016ed2:	e8 7f 56 ff ff       	call   c000c556 <setupINTS()>
c0016ed7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016edc:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0016ee3:	75 07                	jne    c0016eec <HalInitialise()+0x1e>
c0016ee5:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016eec:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016ef3:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0016efa:	e8 a9 02 00 00       	call   c00171a8 <picOpen()>
c0016eff:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0016f06:	74 0a                	je     c0016f12 <HalInitialise()+0x44>
c0016f08:	e8 df 01 00 00       	call   c00170ec <picDisable()>
c0016f0d:	e8 47 66 00 00       	call   c001d559 <apicOpen()>
c0016f12:	50                   	push   eax
c0016f13:	bb 0f 00 00 00       	mov    ebx,0xf
c0016f18:	6a 00                	push   0x0
c0016f1a:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016f1f:	6a 00                	push   0x0
c0016f21:	e8 05 54 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f26:	83 c4 0c             	add    esp,0xc
c0016f29:	6a 00                	push   0x0
c0016f2b:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016f30:	6a 01                	push   0x1
c0016f32:	e8 f4 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f37:	83 c4 0c             	add    esp,0xc
c0016f3a:	6a 00                	push   0x0
c0016f3c:	68 90 66 01 c0       	push   0xc0016690
c0016f41:	6a 02                	push   0x2
c0016f43:	e8 e3 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f48:	83 c4 0c             	add    esp,0xc
c0016f4b:	6a 00                	push   0x0
c0016f4d:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016f52:	6a 03                	push   0x3
c0016f54:	e8 d2 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f59:	83 c4 0c             	add    esp,0xc
c0016f5c:	6a 00                	push   0x0
c0016f5e:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016f63:	6a 04                	push   0x4
c0016f65:	e8 c1 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f6a:	83 c4 0c             	add    esp,0xc
c0016f6d:	6a 00                	push   0x0
c0016f6f:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016f74:	6a 05                	push   0x5
c0016f76:	e8 b0 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f7b:	83 c4 0c             	add    esp,0xc
c0016f7e:	6a 00                	push   0x0
c0016f80:	68 d3 6b 01 c0       	push   0xc0016bd3
c0016f85:	6a 06                	push   0x6
c0016f87:	e8 9f 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f8c:	83 c4 0c             	add    esp,0xc
c0016f8f:	6a 00                	push   0x0
c0016f91:	68 a5 66 01 c0       	push   0xc00166a5
c0016f96:	6a 08                	push   0x8
c0016f98:	e8 8e 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f9d:	83 c4 0c             	add    esp,0xc
c0016fa0:	6a 00                	push   0x0
c0016fa2:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016fa7:	6a 09                	push   0x9
c0016fa9:	e8 7d 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fae:	83 c4 0c             	add    esp,0xc
c0016fb1:	6a 00                	push   0x0
c0016fb3:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016fb8:	6a 0a                	push   0xa
c0016fba:	e8 6c 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fbf:	83 c4 0c             	add    esp,0xc
c0016fc2:	6a 00                	push   0x0
c0016fc4:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016fc9:	6a 0b                	push   0xb
c0016fcb:	e8 5b 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fd0:	83 c4 0c             	add    esp,0xc
c0016fd3:	6a 00                	push   0x0
c0016fd5:	68 ce 6a 01 c0       	push   0xc0016ace
c0016fda:	6a 0d                	push   0xd
c0016fdc:	e8 4a 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fe1:	83 c4 0c             	add    esp,0xc
c0016fe4:	6a 00                	push   0x0
c0016fe6:	68 28 6b 01 c0       	push   0xc0016b28
c0016feb:	6a 0e                	push   0xe
c0016fed:	e8 39 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ff2:	83 c4 10             	add    esp,0x10
c0016ff5:	50                   	push   eax
c0016ff6:	6a 00                	push   0x0
c0016ff8:	68 a7 6b 01 c0       	push   0xc0016ba7
c0016ffd:	53                   	push   ebx
c0016ffe:	43                   	inc    ebx
c0016fff:	e8 27 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	83 fb 1e             	cmp    ebx,0x1e
c001700a:	75 e9                	jne    c0016ff5 <HalInitialise()+0x127>
c001700c:	50                   	push   eax
c001700d:	6a 00                	push   0x0
c001700f:	68 2b 1b 01 c0       	push   0xc0011b2b
c0017014:	6a 60                	push   0x60
c0017016:	e8 10 53 ff ff       	call   c000c32b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001701b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017020:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001702a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017031:	e8 30 0a ff ff       	call   c0007a66 <malloc>
c0017036:	89 04 24             	mov    DWORD PTR [esp],eax
c0017039:	89 c3                	mov    ebx,eax
c001703b:	e8 5c 09 00 00       	call   c001799c <RTC::RTC()>
c0017040:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001704a:	5a                   	pop    edx
c001704b:	59                   	pop    ecx
c001704c:	53                   	push   ebx
c001704d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017053:	e8 ba 4d ff ff       	call   c000be12 <Device::addChild(Device*)>
c0017058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001705a:	6a 00                	push   0x0
c001705c:	6a 00                	push   0x0
c001705e:	6a 00                	push   0x0
c0017060:	53                   	push   ebx
c0017061:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017064:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017069:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001706f:	83 c4 28             	add    esp,0x28
c0017072:	5b                   	pop    ebx
c0017073:	c3                   	ret    

c0017074 <HalMakeBeep(int)>:
c0017074:	53                   	push   ebx
c0017075:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017079:	85 db                	test   ebx,ebx
c001707b:	75 06                	jne    c0017083 <HalMakeBeep(int)+0xf>
c001707d:	e4 61                	in     al,0x61
c001707f:	24 fc                	and    al,0xfc
c0017081:	eb 26                	jmp    c00170a9 <HalMakeBeep(int)+0x35>
c0017083:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017088:	99                   	cdq    
c0017089:	f7 fb                	idiv   ebx
c001708b:	89 c1                	mov    ecx,eax
c001708d:	b0 b6                	mov    al,0xb6
c001708f:	e6 43                	out    0x43,al
c0017091:	88 c8                	mov    al,cl
c0017093:	e6 42                	out    0x42,al
c0017095:	89 c8                	mov    eax,ecx
c0017097:	c1 e8 08             	shr    eax,0x8
c001709a:	e6 42                	out    0x42,al
c001709c:	e4 61                	in     al,0x61
c001709e:	88 c2                	mov    dl,al
c00170a0:	80 ca 03             	or     dl,0x3
c00170a3:	38 c2                	cmp    dl,al
c00170a5:	74 04                	je     c00170ab <HalMakeBeep(int)+0x37>
c00170a7:	88 d0                	mov    al,dl
c00170a9:	e6 61                	out    0x61,al
c00170ab:	5b                   	pop    ebx
c00170ac:	c3                   	ret    

c00170ad <HalGetRand()>:
c00170ad:	31 c0                	xor    eax,eax
c00170af:	c3                   	ret    

c00170b0 <HalEndOfInterrupt(int)>:
c00170b0:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170b7:	74 23                	je     c00170dc <HalEndOfInterrupt(int)+0x2c>
c00170b9:	83 ec 14             	sub    esp,0x14
c00170bc:	6a 1b                	push   0x1b
c00170be:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00170c4:	e8 67 ff fe ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c00170c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00170ce:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00170d8:	83 c4 1c             	add    esp,0x1c
c00170db:	c3                   	ret    
c00170dc:	e9 5b 02 00 00       	jmp    c001733c <picEOI(int)>

c00170e1 <HalRestart()>:
c00170e1:	c3                   	ret    

c00170e2 <HalShutdown()>:
c00170e2:	c3                   	ret    

c00170e3 <HalSleep()>:
c00170e3:	c3                   	ret    

c00170e4 <picIoWait()>:
c00170e4:	eb 00                	jmp    c00170e6 <picIoWait()+0x2>
c00170e6:	eb 00                	jmp    c00170e8 <picIoWait()+0x4>
c00170e8:	90                   	nop
c00170e9:	c3                   	ret    
c00170ea:	66 90                	xchg   ax,ax

c00170ec <picDisable()>:
c00170ec:	83 ec 10             	sub    esp,0x10
c00170ef:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00170f6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00170fb:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017100:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017105:	ee                   	out    dx,al
c0017106:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001710d:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017112:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017117:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001711c:	ee                   	out    dx,al
c001711d:	90                   	nop
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	c3                   	ret    
c0017122:	66 90                	xchg   ax,ax

c0017124 <picGetIRQReg(int)>:
c0017124:	83 ec 10             	sub    esp,0x10
c0017127:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001712b:	0f b6 c0             	movzx  eax,al
c001712e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017135:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017139:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001713e:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0017143:	ee                   	out    dx,al
c0017144:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017148:	0f b6 c0             	movzx  eax,al
c001714b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017152:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017156:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001715b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017160:	ee                   	out    dx,al
c0017161:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017168:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c001716d:	89 c2                	mov    edx,eax
c001716f:	ec                   	in     al,dx
c0017170:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017174:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017179:	0f b6 c0             	movzx  eax,al
c001717c:	c1 e0 08             	shl    eax,0x8
c001717f:	0f bf c8             	movsx  ecx,ax
c0017182:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017189:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001718e:	89 c2                	mov    edx,eax
c0017190:	ec                   	in     al,dx
c0017191:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017195:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001719a:	0f b6 c0             	movzx  eax,al
c001719d:	98                   	cwde   
c001719e:	09 c8                	or     eax,ecx
c00171a0:	98                   	cwde   
c00171a1:	0f b7 c0             	movzx  eax,ax
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	c3                   	ret    

c00171a8 <picOpen()>:
c00171a8:	83 ec 50             	sub    esp,0x50
c00171ab:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00171b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171b7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00171bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00171c0:	ee                   	out    dx,al
c00171c1:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00171c8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00171cd:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00171d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00171d6:	ee                   	out    dx,al
c00171d7:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00171df:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00171e7:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00171ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171f2:	89 c2                	mov    edx,eax
c00171f4:	ec                   	in     al,dx
c00171f5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00171f9:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00171fe:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017202:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001720d:	89 c2                	mov    edx,eax
c001720f:	ec                   	in     al,dx
c0017210:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017214:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017219:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001721d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017224:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017229:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001722e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017232:	ee                   	out    dx,al
c0017233:	e8 ac fe ff ff       	call   c00170e4 <picIoWait()>
c0017238:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001723f:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017244:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0017249:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001724d:	ee                   	out    dx,al
c001724e:	e8 91 fe ff ff       	call   c00170e4 <picIoWait()>
c0017253:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017257:	0f b6 c0             	movzx  eax,al
c001725a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017261:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017265:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001726a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001726e:	ee                   	out    dx,al
c001726f:	e8 70 fe ff ff       	call   c00170e4 <picIoWait()>
c0017274:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017278:	0f b6 c0             	movzx  eax,al
c001727b:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017282:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017286:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c001728b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001728f:	ee                   	out    dx,al
c0017290:	e8 4f fe ff ff       	call   c00170e4 <picIoWait()>
c0017295:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001729c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00172a1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00172a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00172aa:	ee                   	out    dx,al
c00172ab:	e8 34 fe ff ff       	call   c00170e4 <picIoWait()>
c00172b0:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00172b7:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00172bc:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c00172c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172c5:	ee                   	out    dx,al
c00172c6:	e8 19 fe ff ff       	call   c00170e4 <picIoWait()>
c00172cb:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00172d2:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00172d7:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00172dc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00172e0:	ee                   	out    dx,al
c00172e1:	e8 fe fd ff ff       	call   c00170e4 <picIoWait()>
c00172e6:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00172ed:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00172f2:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00172f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172fb:	ee                   	out    dx,al
c00172fc:	e8 e3 fd ff ff       	call   c00170e4 <picIoWait()>
c0017301:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017306:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001730d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017311:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c0017316:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001731a:	ee                   	out    dx,al
c001731b:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017320:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017327:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001732b:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c0017330:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017334:	ee                   	out    dx,al
c0017335:	90                   	nop
c0017336:	83 c4 50             	add    esp,0x50
c0017339:	c3                   	ret    
c001733a:	66 90                	xchg   ax,ax

c001733c <picEOI(int)>:
c001733c:	83 ec 14             	sub    esp,0x14
c001733f:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017344:	75 1e                	jne    c0017364 <picEOI(int)+0x28>
c0017346:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001734d:	e8 d2 fd ff ff       	call   c0017124 <picGetIRQReg(int)>
c0017352:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017357:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001735c:	25 80 00 00 00       	and    eax,0x80
c0017361:	74 79                	je     c00173dc <picEOI(int)+0xa0>
c0017363:	90                   	nop
c0017364:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c0017369:	75 35                	jne    c00173a0 <picEOI(int)+0x64>
c001736b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017372:	e8 ad fd ff ff       	call   c0017124 <picGetIRQReg(int)>
c0017377:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001737c:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017381:	85 c0                	test   eax,eax
c0017383:	78 1b                	js     c00173a0 <picEOI(int)+0x64>
c0017385:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001738c:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c0017391:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017396:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001739b:	ee                   	out    dx,al
c001739c:	eb 42                	jmp    c00173e0 <picEOI(int)+0xa4>
c001739e:	66 90                	xchg   ax,ax
c00173a0:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c00173a5:	7e 19                	jle    c00173c0 <picEOI(int)+0x84>
c00173a7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00173ae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00173b3:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c00173b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00173bd:	ee                   	out    dx,al
c00173be:	66 90                	xchg   ax,ax
c00173c0:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c00173c7:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00173cc:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c00173d1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00173d6:	ee                   	out    dx,al
c00173d7:	eb 07                	jmp    c00173e0 <picEOI(int)+0xa4>
c00173d9:	8d 76 00             	lea    esi,[esi+0x0]
c00173dc:	90                   	nop
c00173dd:	8d 76 00             	lea    esi,[esi+0x0]
c00173e0:	83 c4 14             	add    esp,0x14
c00173e3:	c3                   	ret    

c00173e4 <RTC::open(int, int, void*)>:
c00173e4:	31 c0                	xor    eax,eax
c00173e6:	c3                   	ret    
c00173e7:	90                   	nop

c00173e8 <RTC::close(int, int, void*)>:
c00173e8:	31 c0                	xor    eax,eax
c00173ea:	c3                   	ret    
c00173eb:	90                   	nop

c00173ec <RTC::timeInSecondsUTC()>:
c00173ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00173fc:	c3                   	ret    
c00173fd:	90                   	nop

c00173fe <RTC::timeInDatetimeUTC()>:
c00173fe:	53                   	push   ebx
c00173ff:	83 ec 14             	sub    esp,0x14
c0017402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017406:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001740a:	8b 10                	mov    edx,DWORD PTR [eax]
c001740c:	50                   	push   eax
c001740d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017410:	83 c4 0c             	add    esp,0xc
c0017413:	52                   	push   edx
c0017414:	50                   	push   eax
c0017415:	53                   	push   ebx
c0017416:	e8 69 47 ff ff       	call   c000bb84 <secondsToDatetime(unsigned long long)>
c001741b:	89 d8                	mov    eax,ebx
c001741d:	83 c4 14             	add    esp,0x14
c0017420:	5b                   	pop    ebx
c0017421:	c2 04 00             	ret    0x4

c0017424 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017424:	56                   	push   esi
c0017425:	53                   	push   ebx
c0017426:	83 ec 14             	sub    esp,0x14
c0017429:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001742d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001742f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017432:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017436:	52                   	push   edx
c0017437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001743b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001743f:	50                   	push   eax
c0017440:	e8 3f 47 ff ff       	call   c000bb84 <secondsToDatetime(unsigned long long)>
c0017445:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017449:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001744d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017451:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017455:	89 f0                	mov    eax,esi
c0017457:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001745b:	83 c4 20             	add    esp,0x20
c001745e:	5b                   	pop    ebx
c001745f:	5e                   	pop    esi
c0017460:	ff e0                	jmp    eax

c0017462 <RTC::~RTC()>:
c0017462:	83 ec 1c             	sub    esp,0x1c
c0017465:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c001746a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001746e:	89 10                	mov    DWORD PTR [eax],edx
c0017470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017474:	89 04 24             	mov    DWORD PTR [esp],eax
c0017477:	e8 a0 44 ff ff       	call   c000b91c <Clock::~Clock()>
c001747c:	90                   	nop
c001747d:	83 c4 1c             	add    esp,0x1c
c0017480:	c3                   	ret    
c0017481:	90                   	nop

c0017482 <RTC::~RTC()>:
c0017482:	83 ec 1c             	sub    esp,0x1c
c0017485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017489:	89 04 24             	mov    DWORD PTR [esp],eax
c001748c:	e8 d1 ff ff ff       	call   c0017462 <RTC::~RTC()>
c0017491:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c0017499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749d:	89 04 24             	mov    DWORD PTR [esp],eax
c00174a0:	e8 27 34 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c00174a5:	83 c4 1c             	add    esp,0x1c
c00174a8:	c3                   	ret    
c00174a9:	90                   	nop

c00174aa <RTC::get_update_in_progress_flag()>:
c00174aa:	83 ec 14             	sub    esp,0x14
c00174ad:	6a 0a                	push   0xa
c00174af:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00174b5:	e8 50 fc fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00174ba:	83 c4 1c             	add    esp,0x1c
c00174bd:	c0 e8 07             	shr    al,0x7
c00174c0:	c3                   	ret    
c00174c1:	90                   	nop

c00174c2 <RTC::completeRTCRefresh()>:
c00174c2:	57                   	push   edi
c00174c3:	56                   	push   esi
c00174c4:	53                   	push   ebx
c00174c5:	83 ec 20             	sub    esp,0x20
c00174c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00174cc:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c00174d2:	83 ec 0c             	sub    esp,0xc
c00174d5:	53                   	push   ebx
c00174d6:	e8 cf ff ff ff       	call   c00174aa <RTC::get_update_in_progress_flag()>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	84 c0                	test   al,al
c00174e0:	74 0e                	je     c00174f0 <RTC::completeRTCRefresh()+0x2e>
c00174e2:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c00174e8:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00174ee:	73 e2                	jae    c00174d2 <RTC::completeRTCRefresh()+0x10>
c00174f0:	51                   	push   ecx
c00174f1:	51                   	push   ecx
c00174f2:	6a 00                	push   0x0
c00174f4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00174fa:	e8 0b fc fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00174ff:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017503:	5e                   	pop    esi
c0017504:	5f                   	pop    edi
c0017505:	6a 02                	push   0x2
c0017507:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001750d:	e8 f8 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017512:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017516:	58                   	pop    eax
c0017517:	5a                   	pop    edx
c0017518:	6a 04                	push   0x4
c001751a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017520:	e8 e5 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017525:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0017529:	59                   	pop    ecx
c001752a:	5e                   	pop    esi
c001752b:	6a 07                	push   0x7
c001752d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017533:	e8 d2 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017538:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001753c:	5f                   	pop    edi
c001753d:	58                   	pop    eax
c001753e:	6a 08                	push   0x8
c0017540:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017546:	e8 bf fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001754b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001754f:	58                   	pop    eax
c0017550:	5a                   	pop    edx
c0017551:	6a 09                	push   0x9
c0017553:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017559:	e8 ac fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	0f b6 f0             	movzx  esi,al
c0017564:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	53                   	push   ebx
c001756e:	e8 37 ff ff ff       	call   c00174aa <RTC::get_update_in_progress_flag()>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	84 c0                	test   al,al
c0017578:	74 0e                	je     c0017588 <RTC::completeRTCRefresh()+0xc6>
c001757a:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017580:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017586:	73 e2                	jae    c001756a <RTC::completeRTCRefresh()+0xa8>
c0017588:	57                   	push   edi
c0017589:	57                   	push   edi
c001758a:	6a 00                	push   0x0
c001758c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017592:	e8 73 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017597:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001759b:	58                   	pop    eax
c001759c:	5a                   	pop    edx
c001759d:	6a 02                	push   0x2
c001759f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175a5:	e8 60 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00175ae:	59                   	pop    ecx
c00175af:	5f                   	pop    edi
c00175b0:	6a 04                	push   0x4
c00175b2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175b8:	e8 4d fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175bd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00175c1:	58                   	pop    eax
c00175c2:	5a                   	pop    edx
c00175c3:	6a 07                	push   0x7
c00175c5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175cb:	e8 3a fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175d0:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00175d4:	59                   	pop    ecx
c00175d5:	5f                   	pop    edi
c00175d6:	6a 08                	push   0x8
c00175d8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175de:	e8 27 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175e3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00175e7:	58                   	pop    eax
c00175e8:	5a                   	pop    edx
c00175e9:	6a 09                	push   0x9
c00175eb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175f1:	e8 14 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175f6:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	0f b6 f8             	movzx  edi,al
c0017600:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0017604:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017608:	74 2f                	je     c0017639 <RTC::completeRTCRefresh()+0x177>
c001760a:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001760e:	89 fe                	mov    esi,edi
c0017610:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017614:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017618:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001761c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017620:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017624:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017628:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001762c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017630:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017634:	e9 2b ff ff ff       	jmp    c0017564 <RTC::completeRTCRefresh()+0xa2>
c0017639:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001763d:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c0017641:	75 c7                	jne    c001760a <RTC::completeRTCRefresh()+0x148>
c0017643:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017647:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c001764b:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c001764f:	0f 94 c2             	sete   dl
c0017652:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0017656:	0f 94 c1             	sete   cl
c0017659:	20 d1                	and    cl,dl
c001765b:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c001765f:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017663:	0f 94 c2             	sete   dl
c0017666:	84 d1                	test   cl,dl
c0017668:	74 a0                	je     c001760a <RTC::completeRTCRefresh()+0x148>
c001766a:	39 fe                	cmp    esi,edi
c001766c:	75 9c                	jne    c001760a <RTC::completeRTCRefresh()+0x148>
c001766e:	56                   	push   esi
c001766f:	56                   	push   esi
c0017670:	6a 0b                	push   0xb
c0017672:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017678:	e8 8d fa fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001767d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017681:	24 04                	and    al,0x4
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	84 c0                	test   al,al
c0017688:	0f 85 8c 00 00 00    	jne    c001771a <RTC::completeRTCRefresh()+0x258>
c001768e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017692:	c1 ef 04             	shr    edi,0x4
c0017695:	b1 0a                	mov    cl,0xa
c0017697:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001769b:	6b ff 0a             	imul   edi,edi,0xa
c001769e:	c0 e8 04             	shr    al,0x4
c00176a1:	f6 e1                	mul    cl
c00176a3:	80 e2 0f             	and    dl,0xf
c00176a6:	00 c2                	add    dl,al
c00176a8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00176ac:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00176b0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00176b4:	c0 e8 04             	shr    al,0x4
c00176b7:	f6 e1                	mul    cl
c00176b9:	80 e2 0f             	and    dl,0xf
c00176bc:	00 c2                	add    dl,al
c00176be:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176c2:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00176c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00176ca:	c0 e8 04             	shr    al,0x4
c00176cd:	24 07                	and    al,0x7
c00176cf:	80 e2 0f             	and    dl,0xf
c00176d2:	f6 e1                	mul    cl
c00176d4:	00 d0                	add    al,dl
c00176d6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00176da:	80 e2 80             	and    dl,0x80
c00176dd:	08 d0                	or     al,dl
c00176df:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c00176e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00176e7:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00176eb:	80 e2 0f             	and    dl,0xf
c00176ee:	c0 e8 04             	shr    al,0x4
c00176f1:	f6 e1                	mul    cl
c00176f3:	00 c2                	add    dl,al
c00176f5:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00176f9:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c00176fd:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017701:	c0 e8 04             	shr    al,0x4
c0017704:	f6 e1                	mul    cl
c0017706:	80 e2 0f             	and    dl,0xf
c0017709:	00 c2                	add    dl,al
c001770b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001770f:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017713:	24 0f                	and    al,0xf
c0017715:	0f b6 c0             	movzx  eax,al
c0017718:	01 c7                	add    edi,eax
c001771a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001771e:	24 02                	and    al,0x2
c0017720:	75 20                	jne    c0017742 <RTC::completeRTCRefresh()+0x280>
c0017722:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017727:	79 19                	jns    c0017742 <RTC::completeRTCRefresh()+0x280>
c0017729:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001772d:	b9 18 00 00 00       	mov    ecx,0x18
c0017732:	80 e2 7f             	and    dl,0x7f
c0017735:	0f b6 d2             	movzx  edx,dl
c0017738:	8d 42 0c             	lea    eax,[edx+0xc]
c001773b:	99                   	cdq    
c001773c:	f7 f9                	idiv   ecx
c001773e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0017742:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c0017748:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c001774e:	77 06                	ja     c0017756 <RTC::completeRTCRefresh()+0x294>
c0017750:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c0017756:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001775b:	c1 e6 10             	shl    esi,0x10
c001775e:	31 d2                	xor    edx,edx
c0017760:	89 d7                	mov    edi,edx
c0017762:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0017768:	c1 e0 10             	shl    eax,0x10
c001776b:	89 c1                	mov    ecx,eax
c001776d:	31 c0                	xor    eax,eax
c001776f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017773:	09 cf                	or     edi,ecx
c0017775:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c0017779:	89 fa                	mov    edx,edi
c001777b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001777f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017783:	0f b7 c8             	movzx  ecx,ax
c0017786:	09 f1                	or     ecx,esi
c0017788:	89 c8                	mov    eax,ecx
c001778a:	51                   	push   ecx
c001778b:	51                   	push   ecx
c001778c:	52                   	push   edx
c001778d:	50                   	push   eax
c001778e:	e8 72 42 ff ff       	call   c000ba05 <datetimeToSeconds(datetime_t)>
c0017793:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0017799:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001779f:	83 c4 30             	add    esp,0x30
c00177a2:	5b                   	pop    ebx
c00177a3:	5e                   	pop    esi
c00177a4:	5f                   	pop    edi
c00177a5:	c3                   	ret    

c00177a6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00177a6:	53                   	push   ebx
c00177a7:	83 ec 1c             	sub    esp,0x1c
c00177aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00177b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00177b6:	6a 00                	push   0x0
c00177b8:	6a 00                	push   0x0
c00177ba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c0:	e8 73 fa fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00177c5:	83 c4 0c             	add    esp,0xc
c00177c8:	6a 00                	push   0x0
c00177ca:	6a 02                	push   0x2
c00177cc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177d2:	e8 61 fa fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00177d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177db:	89 d8                	mov    eax,ebx
c00177dd:	c1 e8 10             	shr    eax,0x10
c00177e0:	b9 64 00 00 00       	mov    ecx,0x64
c00177e5:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00177e9:	0f b6 c7             	movzx  eax,bh
c00177ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177f0:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00177f4:	0f b6 c6             	movzx  eax,dh
c00177f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177fb:	89 d0                	mov    eax,edx
c00177fd:	31 d2                	xor    edx,edx
c00177ff:	c1 e8 10             	shr    eax,0x10
c0017802:	f7 f1                	div    ecx
c0017804:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c0017808:	59                   	pop    ecx
c0017809:	58                   	pop    eax
c001780a:	6a 0b                	push   0xb
c001780c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017812:	e8 f3 f8 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017817:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001781b:	24 04                	and    al,0x4
c001781d:	83 c4 10             	add    esp,0x10
c0017820:	84 c0                	test   al,al
c0017822:	75 78                	jne    c001789c <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c0017824:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017829:	b1 0a                	mov    cl,0xa
c001782b:	f6 f1                	div    cl
c001782d:	88 c2                	mov    dl,al
c001782f:	0f b6 c4             	movzx  eax,ah
c0017832:	c0 e2 04             	shl    dl,0x4
c0017835:	08 c2                	or     dl,al
c0017837:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001783b:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001783f:	f6 f1                	div    cl
c0017841:	88 c2                	mov    dl,al
c0017843:	0f b6 c4             	movzx  eax,ah
c0017846:	c0 e2 04             	shl    dl,0x4
c0017849:	08 c2                	or     dl,al
c001784b:	0f b6 c3             	movzx  eax,bl
c001784e:	f6 f1                	div    cl
c0017850:	88 14 24             	mov    BYTE PTR [esp],dl
c0017853:	88 c3                	mov    bl,al
c0017855:	0f b6 c4             	movzx  eax,ah
c0017858:	c0 e3 04             	shl    bl,0x4
c001785b:	08 c3                	or     bl,al
c001785d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017862:	f6 f1                	div    cl
c0017864:	88 c2                	mov    dl,al
c0017866:	0f b6 c4             	movzx  eax,ah
c0017869:	c0 e2 04             	shl    dl,0x4
c001786c:	08 c2                	or     dl,al
c001786e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017873:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017877:	f6 f1                	div    cl
c0017879:	88 c2                	mov    dl,al
c001787b:	0f b6 c4             	movzx  eax,ah
c001787e:	c0 e2 04             	shl    dl,0x4
c0017881:	08 c2                	or     dl,al
c0017883:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0017888:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001788c:	f6 f1                	div    cl
c001788e:	88 c2                	mov    dl,al
c0017890:	0f b6 c4             	movzx  eax,ah
c0017893:	c0 e2 04             	shl    dl,0x4
c0017896:	08 c2                	or     dl,al
c0017898:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c001789c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00178a0:	24 02                	and    al,0x2
c00178a2:	75 17                	jne    c00178bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00178a4:	80 fb 0b             	cmp    bl,0xb
c00178a7:	76 0c                	jbe    c00178b5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00178a9:	80 eb 0c             	sub    bl,0xc
c00178ac:	75 02                	jne    c00178b0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00178ae:	b3 0c                	mov    bl,0xc
c00178b0:	80 cb 80             	or     bl,0x80
c00178b3:	eb 06                	jmp    c00178bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00178b5:	84 db                	test   bl,bl
c00178b7:	75 02                	jne    c00178bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00178b9:	b3 0c                	mov    bl,0xc
c00178bb:	50                   	push   eax
c00178bc:	0f b6 db             	movzx  ebx,bl
c00178bf:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c00178c4:	50                   	push   eax
c00178c5:	6a 00                	push   0x0
c00178c7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178cd:	e8 66 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d2:	83 c4 0c             	add    esp,0xc
c00178d5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00178da:	50                   	push   eax
c00178db:	6a 02                	push   0x2
c00178dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178e3:	e8 50 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178e8:	83 c4 0c             	add    esp,0xc
c00178eb:	53                   	push   ebx
c00178ec:	6a 04                	push   0x4
c00178ee:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178f4:	e8 3f f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178f9:	83 c4 0c             	add    esp,0xc
c00178fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017901:	50                   	push   eax
c0017902:	6a 07                	push   0x7
c0017904:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001790a:	e8 29 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c001790f:	83 c4 0c             	add    esp,0xc
c0017912:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017917:	50                   	push   eax
c0017918:	6a 08                	push   0x8
c001791a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017920:	e8 13 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017925:	83 c4 0c             	add    esp,0xc
c0017928:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001792d:	52                   	push   edx
c001792e:	6a 09                	push   0x9
c0017930:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017936:	e8 fd f8 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c001793b:	5a                   	pop    edx
c001793c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017940:	e8 7d fb ff ff       	call   c00174c2 <RTC::completeRTCRefresh()>
c0017945:	83 c4 28             	add    esp,0x28
c0017948:	b0 01                	mov    al,0x1
c001794a:	5b                   	pop    ebx
c001794b:	c3                   	ret    

c001794c <rtcIRQHandler(regs*, void*)>:
c001794c:	53                   	push   ebx
c001794d:	83 ec 10             	sub    esp,0x10
c0017950:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017954:	6a 0c                	push   0xc
c0017956:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001795c:	e8 a9 f7 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	84 c0                	test   al,al
c0017966:	79 2f                	jns    c0017997 <rtcIRQHandler(regs*, void*)+0x4b>
c0017968:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c001796e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017975:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001797c:	40                   	inc    eax
c001797d:	0f b7 c0             	movzx  eax,ax
c0017980:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c0017986:	85 c0                	test   eax,eax
c0017988:	75 0d                	jne    c0017997 <rtcIRQHandler(regs*, void*)+0x4b>
c001798a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001798e:	83 c4 08             	add    esp,0x8
c0017991:	5b                   	pop    ebx
c0017992:	e9 2b fb ff ff       	jmp    c00174c2 <RTC::completeRTCRefresh()>
c0017997:	83 c4 08             	add    esp,0x8
c001799a:	5b                   	pop    ebx
c001799b:	c3                   	ret    

c001799c <RTC::RTC()>:
c001799c:	83 ec 3c             	sub    esp,0x3c
c001799f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179a3:	c7 44 24 04 0f 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002120f
c00179ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00179ae:	e8 33 3f ff ff       	call   c000b8e6 <Clock::Clock(char const*)>
c00179b3:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c00179b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179bc:	89 10                	mov    DWORD PTR [eax],edx
c00179be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179c2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00179ca:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00179d2:	c7 44 24 08 4c 79 01 c0 	mov    DWORD PTR [esp+0x8],0xc001794c
c00179da:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c00179e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00179e5:	e8 d6 43 ff ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00179ea:	89 c2                	mov    edx,eax
c00179ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179f0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00179f6:	fa                   	cli    
c00179f7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00179fc:	40                   	inc    eax
c00179fd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017a02:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017a07:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017a0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a12:	e8 f3 f6 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017a17:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017a1b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017a20:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0017a25:	80 ca 10             	or     dl,0x10
c0017a28:	0f b6 d2             	movzx  edx,dl
c0017a2b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017a2f:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a3a:	e8 f9 f7 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a46:	e8 77 fa ff ff       	call   c00174c2 <RTC::completeRTCRefresh()>
c0017a4b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017a50:	48                   	dec    eax
c0017a51:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017a56:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017a5b:	85 c0                	test   eax,eax
c0017a5d:	75 01                	jne    c0017a60 <RTC::RTC()+0xc4>
c0017a5f:	fb                   	sti    
c0017a60:	90                   	nop
c0017a61:	83 c4 3c             	add    esp,0x3c
c0017a64:	c3                   	ret    
c0017a65:	66 90                	xchg   ax,ax
c0017a67:	90                   	nop

c0017a68 <HalConsoleScroll(int, int)>:
c0017a68:	83 ec 10             	sub    esp,0x10
c0017a6b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017a73:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017a7b:	90                   	nop
c0017a7c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017a81:	0f 8f e1 00 00 00    	jg     c0017b68 <HalConsoleScroll(int, int)+0x100>
c0017a87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a8f:	90                   	nop
c0017a90:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017a98:	0f 8f be 00 00 00    	jg     c0017b5c <HalConsoleScroll(int, int)+0xf4>
c0017a9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aa2:	89 d0                	mov    eax,edx
c0017aa4:	c1 e0 02             	shl    eax,0x2
c0017aa7:	01 d0                	add    eax,edx
c0017aa9:	c1 e0 05             	shl    eax,0x5
c0017aac:	89 c2                	mov    edx,eax
c0017aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ab2:	01 d0                	add    eax,edx
c0017ab4:	89 c2                	mov    edx,eax
c0017ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017abd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ac1:	89 d0                	mov    eax,edx
c0017ac3:	c1 e0 02             	shl    eax,0x2
c0017ac6:	01 d0                	add    eax,edx
c0017ac8:	c1 e0 05             	shl    eax,0x5
c0017acb:	89 c2                	mov    edx,eax
c0017acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ad1:	01 d0                	add    eax,edx
c0017ad3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017add:	01 d0                	add    eax,edx
c0017adf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017ae2:	88 10                	mov    BYTE PTR [eax],dl
c0017ae4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017ae9:	75 65                	jne    c0017b50 <HalConsoleScroll(int, int)+0xe8>
c0017aeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aef:	83 e0 01             	and    eax,0x1
c0017af2:	74 38                	je     c0017b2c <HalConsoleScroll(int, int)+0xc4>
c0017af4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017af8:	24 0f                	and    al,0xf
c0017afa:	88 c2                	mov    dl,al
c0017afc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b00:	c1 e0 04             	shl    eax,0x4
c0017b03:	88 d1                	mov    cl,dl
c0017b05:	08 c1                	or     cl,al
c0017b07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b0b:	89 d0                	mov    eax,edx
c0017b0d:	c1 e0 02             	shl    eax,0x2
c0017b10:	01 d0                	add    eax,edx
c0017b12:	c1 e0 05             	shl    eax,0x5
c0017b15:	89 c2                	mov    edx,eax
c0017b17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b1b:	01 d0                	add    eax,edx
c0017b1d:	89 c2                	mov    edx,eax
c0017b1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b23:	01 d0                	add    eax,edx
c0017b25:	88 ca                	mov    dl,cl
c0017b27:	88 10                	mov    BYTE PTR [eax],dl
c0017b29:	eb 25                	jmp    c0017b50 <HalConsoleScroll(int, int)+0xe8>
c0017b2b:	90                   	nop
c0017b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b30:	89 d0                	mov    eax,edx
c0017b32:	c1 e0 02             	shl    eax,0x2
c0017b35:	01 d0                	add    eax,edx
c0017b37:	c1 e0 05             	shl    eax,0x5
c0017b3a:	89 c2                	mov    edx,eax
c0017b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b40:	01 d0                	add    eax,edx
c0017b42:	89 c2                	mov    edx,eax
c0017b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b48:	01 d0                	add    eax,edx
c0017b4a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b50:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017b54:	e9 37 ff ff ff       	jmp    c0017a90 <HalConsoleScroll(int, int)+0x28>
c0017b59:	8d 76 00             	lea    esi,[esi+0x0]
c0017b5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017b60:	e9 17 ff ff ff       	jmp    c0017a7c <HalConsoleScroll(int, int)+0x14>
c0017b65:	8d 76 00             	lea    esi,[esi+0x0]
c0017b68:	90                   	nop
c0017b69:	83 c4 10             	add    esp,0x10
c0017b6c:	c3                   	ret    
c0017b6d:	8d 76 00             	lea    esi,[esi+0x0]

c0017b70 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017b70:	83 ec 14             	sub    esp,0x14
c0017b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b77:	88 04 24             	mov    BYTE PTR [esp],al
c0017b7a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017b7e:	0f b6 c0             	movzx  eax,al
c0017b81:	0f bf d0             	movsx  edx,ax
c0017b84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b88:	83 e0 0f             	and    eax,0xf
c0017b8b:	89 c1                	mov    ecx,eax
c0017b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b91:	c1 e0 04             	shl    eax,0x4
c0017b94:	0f b6 c0             	movzx  eax,al
c0017b97:	09 c8                	or     eax,ecx
c0017b99:	c1 e0 08             	shl    eax,0x8
c0017b9c:	98                   	cwde   
c0017b9d:	09 d0                	or     eax,edx
c0017b9f:	98                   	cwde   
c0017ba0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017ba5:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017bad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb1:	89 d0                	mov    eax,edx
c0017bb3:	c1 e0 02             	shl    eax,0x2
c0017bb6:	01 d0                	add    eax,edx
c0017bb8:	c1 e0 04             	shl    eax,0x4
c0017bbb:	89 c2                	mov    edx,eax
c0017bbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc1:	01 d0                	add    eax,edx
c0017bc3:	01 c0                	add    eax,eax
c0017bc5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017bc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bcd:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0017bd2:	66 89 10             	mov    WORD PTR [eax],dx
c0017bd5:	90                   	nop
c0017bd6:	83 c4 14             	add    esp,0x14
c0017bd9:	c3                   	ret    
c0017bda:	66 90                	xchg   ax,ax

c0017bdc <HalConsoleCursorUpdate(int, int)>:
c0017bdc:	83 ec 20             	sub    esp,0x20
c0017bdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be3:	0f b7 c0             	movzx  eax,ax
c0017be6:	89 c2                	mov    edx,eax
c0017be8:	c1 e2 02             	shl    edx,0x2
c0017beb:	01 d0                	add    eax,edx
c0017bed:	c1 e0 04             	shl    eax,0x4
c0017bf0:	0f b7 d0             	movzx  edx,ax
c0017bf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bf7:	0f b7 c0             	movzx  eax,ax
c0017bfa:	01 d0                	add    eax,edx
c0017bfc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017c01:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017c08:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017c0d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c16:	ee                   	out    dx,al
c0017c17:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017c1c:	0f b6 c0             	movzx  eax,al
c0017c1f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017c26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017c2a:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017c2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c33:	ee                   	out    dx,al
c0017c34:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017c3b:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017c40:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017c45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c49:	ee                   	out    dx,al
c0017c4a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017c4f:	c1 e8 08             	shr    eax,0x8
c0017c52:	0f b7 c0             	movzx  eax,ax
c0017c55:	0f b6 c0             	movzx  eax,al
c0017c58:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017c5f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017c63:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017c68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c6c:	ee                   	out    dx,al
c0017c6d:	90                   	nop
c0017c6e:	83 c4 20             	add    esp,0x20
c0017c71:	c3                   	ret    
c0017c72:	66 90                	xchg   ax,ax

c0017c74 <FAT::getName()>:
c0017c74:	b8 60 12 02 c0       	mov    eax,0xc0021260
c0017c79:	c3                   	ret    
c0017c7a:	66 90                	xchg   ax,ax

c0017c7c <FAT::tell(void*, unsigned long long*)>:
c0017c7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017c81:	75 09                	jne    c0017c8c <FAT::tell(void*, unsigned long long*)+0x10>
c0017c83:	b8 04 00 00 00       	mov    eax,0x4
c0017c88:	c3                   	ret    
c0017c89:	8d 76 00             	lea    esi,[esi+0x0]
c0017c8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017c91:	75 09                	jne    c0017c9c <FAT::tell(void*, unsigned long long*)+0x20>
c0017c93:	b8 04 00 00 00       	mov    eax,0x4
c0017c98:	c3                   	ret    
c0017c99:	8d 76 00             	lea    esi,[esi+0x0]
c0017c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ca0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017ca3:	ba 00 00 00 00       	mov    edx,0x0
c0017ca8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cac:	89 01                	mov    DWORD PTR [ecx],eax
c0017cae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017cb1:	b8 00 00 00 00       	mov    eax,0x0
c0017cb6:	c3                   	ret    
c0017cb7:	90                   	nop

c0017cb8 <FAT::stat(void*, unsigned long long*)>:
c0017cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017cbd:	75 09                	jne    c0017cc8 <FAT::stat(void*, unsigned long long*)+0x10>
c0017cbf:	b8 04 00 00 00       	mov    eax,0x4
c0017cc4:	c3                   	ret    
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ccd:	75 09                	jne    c0017cd8 <FAT::stat(void*, unsigned long long*)+0x20>
c0017ccf:	b8 04 00 00 00       	mov    eax,0x4
c0017cd4:	c3                   	ret    
c0017cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cdf:	ba 00 00 00 00       	mov    edx,0x0
c0017ce4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ce8:	89 01                	mov    DWORD PTR [ecx],eax
c0017cea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ced:	b8 00 00 00 00       	mov    eax,0x0
c0017cf2:	c3                   	ret    
c0017cf3:	90                   	nop

c0017cf4 <FAT::~FAT()>:
c0017cf4:	83 ec 1c             	sub    esp,0x1c
c0017cf7:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c0017cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d00:	89 10                	mov    DWORD PTR [eax],edx
c0017d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d06:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d09:	e8 2a 30 ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c0017d0e:	90                   	nop
c0017d0f:	83 c4 1c             	add    esp,0x1c
c0017d12:	c3                   	ret    
c0017d13:	90                   	nop

c0017d14 <FAT::~FAT()>:
c0017d14:	83 ec 1c             	sub    esp,0x1c
c0017d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d1e:	e8 d1 ff ff ff       	call   c0017cf4 <FAT::~FAT()>
c0017d23:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d32:	e8 95 2b ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c0017d37:	83 c4 1c             	add    esp,0x1c
c0017d3a:	c3                   	ret    
c0017d3b:	90                   	nop

c0017d3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017d3c:	83 ec 2c             	sub    esp,0x2c
c0017d3f:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c0017d46:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0017d4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d4f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017d56:	83 f8 ff             	cmp    eax,0xffffffff
c0017d59:	75 35                	jne    c0017d90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017d5b:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017d60:	88 c2                	mov    dl,al
c0017d62:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017d67:	00 d0                	add    al,dl
c0017d69:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017d6d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017d73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d77:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017d7e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017d83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017d87:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017d8e:	eb 18                	jmp    c0017da8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017d90:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017d95:	88 c2                	mov    dl,al
c0017d97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d9b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017da2:	00 d0                	add    al,dl
c0017da4:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017da8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017dac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017db0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017db4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017db8:	8d 44 24 19          	lea    eax,[esp+0x19]
c0017dbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dbf:	e8 75 d1 fe ff       	call   c0004f39 <f_getlabel>
c0017dc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017dc8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017dcd:	75 09                	jne    c0017dd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c0017dcf:	b8 00 00 00 00       	mov    eax,0x0
c0017dd4:	eb 0a                	jmp    c0017de0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c0017dd6:	66 90                	xchg   ax,ax
c0017dd8:	b8 01 00 00 00       	mov    eax,0x1
c0017ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0017de0:	83 c4 2c             	add    esp,0x2c
c0017de3:	c3                   	ret    

c0017de4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017de4:	53                   	push   ebx
c0017de5:	83 ec 68             	sub    esp,0x68
c0017de8:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0017df0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017df4:	b9 00 00 00 00       	mov    ecx,0x0
c0017df9:	b8 3c 00 00 00       	mov    eax,0x3c
c0017dfe:	83 e0 f8             	and    eax,0xfffffff8
c0017e01:	89 c3                	mov    ebx,eax
c0017e03:	b8 00 00 00 00       	mov    eax,0x0
c0017e08:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0017e0c:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0017e10:	83 c0 08             	add    eax,0x8
c0017e13:	39 d8                	cmp    eax,ebx
c0017e15:	72 f1                	jb     c0017e08 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017e17:	01 c2                	add    edx,eax
c0017e19:	89 0a                	mov    DWORD PTR [edx],ecx
c0017e1b:	83 c2 04             	add    edx,0x4
c0017e1e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e22:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e29:	83 f8 ff             	cmp    eax,0xffffffff
c0017e2c:	75 36                	jne    c0017e64 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017e2e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017e33:	88 c2                	mov    dl,al
c0017e35:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e3a:	00 d0                	add    al,dl
c0017e3c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017e40:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e46:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e4a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e51:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e56:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0017e5a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e61:	eb 19                	jmp    c0017e7c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017e63:	90                   	nop
c0017e64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017e69:	88 c2                	mov    dl,al
c0017e6b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e6f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e76:	00 d0                	add    al,dl
c0017e78:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017e7c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017e80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e88:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e8b:	e8 10 8a fe ff       	call   c00008a0 <strcat>
c0017e90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e94:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e97:	e8 f1 d1 fe ff       	call   c000508d <f_setlabel>
c0017e9c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0017ea0:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0017ea5:	75 09                	jne    c0017eb0 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c0017ea7:	b8 00 00 00 00       	mov    eax,0x0
c0017eac:	eb 0a                	jmp    c0017eb8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c0017eae:	66 90                	xchg   ax,ax
c0017eb0:	b8 01 00 00 00       	mov    eax,0x1
c0017eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017eb8:	83 c4 68             	add    esp,0x68
c0017ebb:	5b                   	pop    ebx
c0017ebc:	c3                   	ret    
c0017ebd:	90                   	nop
c0017ebe:	66 90                	xchg   ax,ax

c0017ec0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017ec0:	83 ec 3c             	sub    esp,0x3c
c0017ec3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ecb:	c7 44 24 04 84 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021284
c0017ed3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ed7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017eda:	e8 d1 88 fe ff       	call   c00007b0 <strcmp>
c0017edf:	85 c0                	test   eax,eax
c0017ee1:	0f 94 c0             	sete   al
c0017ee4:	84 c0                	test   al,al
c0017ee6:	74 10                	je     c0017ef8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017ee8:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017ef0:	e9 b3 00 00 00       	jmp    c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef8:	c7 44 24 04 76 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021276
c0017f00:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f04:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f07:	e8 a4 88 fe ff       	call   c00007b0 <strcmp>
c0017f0c:	85 c0                	test   eax,eax
c0017f0e:	0f 94 c0             	sete   al
c0017f11:	84 c0                	test   al,al
c0017f13:	74 0f                	je     c0017f24 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017f15:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017f1d:	e9 86 00 00 00       	jmp    c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f22:	66 90                	xchg   ax,ax
c0017f24:	c7 44 24 04 7c 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002127c
c0017f2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f33:	e8 78 88 fe ff       	call   c00007b0 <strcmp>
c0017f38:	85 c0                	test   eax,eax
c0017f3a:	0f 94 c0             	sete   al
c0017f3d:	84 c0                	test   al,al
c0017f3f:	74 0b                	je     c0017f4c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017f41:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017f49:	eb 5d                	jmp    c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f4b:	90                   	nop
c0017f4c:	c7 44 24 04 5c f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f05c
c0017f54:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f5b:	e8 50 88 fe ff       	call   c00007b0 <strcmp>
c0017f60:	85 c0                	test   eax,eax
c0017f62:	0f 94 c0             	sete   al
c0017f65:	84 c0                	test   al,al
c0017f67:	74 0b                	je     c0017f74 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017f69:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0017f71:	eb 35                	jmp    c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f73:	90                   	nop
c0017f74:	c7 44 24 04 82 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021282
c0017f7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f83:	e8 28 88 fe ff       	call   c00007b0 <strcmp>
c0017f88:	85 c0                	test   eax,eax
c0017f8a:	0f 94 c0             	sete   al
c0017f8d:	84 c0                	test   al,al
c0017f8f:	74 0b                	je     c0017f9c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017f91:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c0017f99:	eb 0d                	jmp    c0017fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f9b:	90                   	nop
c0017f9c:	b8 08 00 00 00       	mov    eax,0x8
c0017fa1:	e9 f2 00 00 00       	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0017fa6:	66 90                	xchg   ax,ax
c0017fa8:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c0017faf:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c0017fb4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fb8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fbf:	83 f8 ff             	cmp    eax,0xffffffff
c0017fc2:	75 38                	jne    c0017ffc <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c0017fc4:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0017fc9:	88 c2                	mov    dl,al
c0017fcb:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fd0:	00 d0                	add    al,dl
c0017fd2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fd6:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fdc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fe0:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fe7:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fec:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017ff0:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017ff7:	eb 1b                	jmp    c0018014 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c0017ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ffc:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018001:	88 c2                	mov    dl,al
c0018003:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018007:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001800e:	00 d0                	add    al,dl
c0018010:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018018:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001801c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018024:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001802c:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c0018031:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018039:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018040:	e8 21 fa fe ff       	call   c0007a66 <malloc>
c0018045:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018049:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c0018051:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018055:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018059:	8d 44 24 10          	lea    eax,[esp+0x10]
c001805d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018061:	8d 44 24 21          	lea    eax,[esp+0x21]
c0018065:	89 04 24             	mov    DWORD PTR [esp],eax
c0018068:	e8 0e d3 fe ff       	call   c000537b <f_mkfs>
c001806d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018071:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018076:	75 08                	jne    c0018080 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c0018078:	b8 00 00 00 00       	mov    eax,0x0
c001807d:	eb 19                	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001807f:	90                   	nop
c0018080:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c0018085:	75 09                	jne    c0018090 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0018087:	b8 09 00 00 00       	mov    eax,0x9
c001808c:	eb 0a                	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001808e:	66 90                	xchg   ax,ax
c0018090:	b8 01 00 00 00       	mov    eax,0x1
c0018095:	8d 76 00             	lea    esi,[esi+0x0]
c0018098:	83 c4 3c             	add    esp,0x3c
c001809b:	c3                   	ret    

c001809c <FAT::tryMount(LogicalDisk*, int)>:
c001809c:	81 ec 5c 03 00 00    	sub    esp,0x35c
c00180a2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180a7:	83 f8 14             	cmp    eax,0x14
c00180aa:	75 14                	jne    c00180c0 <FAT::tryMount(LogicalDisk*, int)+0x24>
c00180ac:	c7 04 24 88 12 02 c0 	mov    DWORD PTR [esp],0xc0021288
c00180b3:	e8 7d 86 ff ff       	call   c0010735 <KePanic(char const*)>
c00180b8:	b0 00                	mov    al,0x0
c00180ba:	e9 f1 01 00 00       	jmp    c00182b0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00180bf:	90                   	nop
c00180c0:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c00180c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00180cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00180d3:	3d 00 02 00 00       	cmp    eax,0x200
c00180d8:	74 0a                	je     c00180e4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00180da:	b0 00                	mov    al,0x0
c00180dc:	e9 cf 01 00 00       	jmp    c00182b0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00180e1:	8d 76 00             	lea    esi,[esi+0x0]
c00180e4:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c00180ec:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c00180f3:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180fa:	83 f8 ff             	cmp    eax,0xffffffff
c00180fd:	74 09                	je     c0018108 <FAT::tryMount(LogicalDisk*, int)+0x6c>
c00180ff:	b0 01                	mov    al,0x1
c0018101:	e9 aa 01 00 00       	jmp    c00182b0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018106:	66 90                	xchg   ax,ax
c0018108:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c0018112:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c001811a:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c0018122:	88 c2                	mov    dl,al
c0018124:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018129:	00 d0                	add    al,dl
c001812b:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c0018132:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018138:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c001813f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018146:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001814b:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c0018152:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018159:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c0018160:	e8 01 f9 fe ff       	call   c0007a66 <malloc>
c0018165:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c001816c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018174:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001817b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001817f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018186:	89 04 24             	mov    DWORD PTR [esp],eax
c0018189:	e8 2d ba fe ff       	call   c0003bbb <f_mount>
c001818e:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c0018195:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c001819d:	74 19                	je     c00181b8 <FAT::tryMount(LogicalDisk*, int)+0x11c>
c001819f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00181a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00181a9:	e8 de f8 fe ff       	call   c0007a8c <rfree>
c00181ae:	b0 00                	mov    al,0x0
c00181b0:	e9 fb 00 00 00       	jmp    c00182b0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181b5:	8d 76 00             	lea    esi,[esi+0x0]
c00181b8:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00181c0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181c8:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00181cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00181d2:	e8 19 83 fe ff       	call   c00004f0 <memset>
c00181d7:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c00181de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181e2:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00181e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00181ec:	e8 af 86 fe ff       	call   c00008a0 <strcat>
c00181f1:	c7 44 24 04 96 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021296
c00181f9:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018200:	89 04 24             	mov    DWORD PTR [esp],eax
c0018203:	e8 98 86 fe ff       	call   c00008a0 <strcat>
c0018208:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018210:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001821b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001821f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018222:	e8 f6 b9 fe ff       	call   c0003c1d <f_open>
c0018227:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c001822e:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c0018235:	85 c0                	test   eax,eax
c0018237:	74 0b                	je     c0018244 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c0018239:	78 2d                	js     c0018268 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001823b:	83 e8 04             	sub    eax,0x4
c001823e:	83 f8 01             	cmp    eax,0x1
c0018241:	77 25                	ja     c0018268 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018243:	90                   	nop
c0018244:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c001824c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018250:	89 04 24             	mov    DWORD PTR [esp],eax
c0018253:	e8 55 c1 fe ff       	call   c00043ad <f_close>
c0018258:	90                   	nop
c0018259:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c0018261:	74 45                	je     c00182a8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018263:	eb 37                	jmp    c001829c <FAT::tryMount(LogicalDisk*, int)+0x200>
c0018265:	8d 76 00             	lea    esi,[esi+0x0]
c0018268:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c001826f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018272:	e8 15 f8 fe ff       	call   c0007a8c <rfree>
c0018277:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001827f:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c0018286:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001828a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018291:	e8 25 b9 fe ff       	call   c0003bbb <f_mount>
c0018296:	b0 00                	mov    al,0x0
c0018298:	eb 16                	jmp    c00182b0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001829a:	66 90                	xchg   ax,ax
c001829c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182a1:	40                   	inc    eax
c00182a2:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00182a7:	90                   	nop
c00182a8:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c00182b0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182b6:	c3                   	ret    
c00182b7:	90                   	nop

c00182b8 <FAT::allocateSwapfile(char const*, int)>:
c00182b8:	55                   	push   ebp
c00182b9:	57                   	push   edi
c00182ba:	56                   	push   esi
c00182bb:	53                   	push   ebx
c00182bc:	81 ec 5c 04 00 00    	sub    esp,0x45c
c00182c2:	c7 84 24 40 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x440],0x114
c00182cd:	8b 84 24 40 04 00 00 	mov    eax,DWORD PTR [esp+0x440]
c00182d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00182d7:	e8 8a f7 fe ff       	call   c0007a66 <malloc>
c00182dc:	89 c7                	mov    edi,eax
c00182de:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00182e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182e7:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c00182ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00182f5:	e8 6e 2c ff ff       	call   c000af68 <File::File(char const*, Process*)>
c00182fa:	89 bc 24 4c 04 00 00 	mov    DWORD PTR [esp+0x44c],edi
c0018301:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c0018305:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018309:	8d 44 24 30          	lea    eax,[esp+0x30]
c001830d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018311:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018318:	89 04 24             	mov    DWORD PTR [esp],eax
c001831b:	e8 ac 2f ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c0018320:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018327:	c1 e0 14             	shl    eax,0x14
c001832a:	89 c7                	mov    edi,eax
c001832c:	89 c5                	mov    ebp,eax
c001832e:	c1 fd 1f             	sar    ebp,0x1f
c0018331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018335:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018339:	89 f9                	mov    ecx,edi
c001833b:	31 c1                	xor    ecx,eax
c001833d:	89 cb                	mov    ebx,ecx
c001833f:	89 e9                	mov    ecx,ebp
c0018341:	31 d1                	xor    ecx,edx
c0018343:	89 ce                	mov    esi,ecx
c0018345:	89 f0                	mov    eax,esi
c0018347:	09 d8                	or     eax,ebx
c0018349:	0f 84 a9 00 00 00    	je     c00183f8 <FAT::allocateSwapfile(char const*, int)+0x140>
c001834f:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018356:	89 04 24             	mov    DWORD PTR [esp],eax
c0018359:	e8 40 2e ff ff       	call   c000b19e <File::unlink()>
c001835e:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c0018366:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001836d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018370:	e8 b1 2c ff ff       	call   c000b026 <File::open(FileOpenMode)>
c0018375:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001837c:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018382:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c0018389:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018390:	c1 e0 14             	shl    eax,0x14
c0018393:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c001839b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001839f:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c00183a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00183a9:	e8 6f ce fe ff       	call   c000521d <f_expand>
c00183ae:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b7:	83 c0 10             	add    eax,0x10
c00183ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00183bc:	8d 54 24 38          	lea    edx,[esp+0x38]
c00183c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00183c4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00183c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183cc:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c00183d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00183dc:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c00183e3:	89 14 24             	mov    DWORD PTR [esp],edx
c00183e6:	ff d0                	call   eax
c00183e8:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00183f2:	e8 8d 2c ff ff       	call   c000b084 <File::close()>
c00183f7:	90                   	nop
c00183f8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018400:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018407:	89 04 24             	mov    DWORD PTR [esp],eax
c001840a:	e8 17 2c ff ff       	call   c000b026 <File::open(FileOpenMode)>
c001840f:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018416:	8b 00                	mov    eax,DWORD PTR [eax]
c0018418:	83 c0 0c             	add    eax,0xc
c001841b:	8b 00                	mov    eax,DWORD PTR [eax]
c001841d:	8d 54 24 38          	lea    edx,[esp+0x38]
c0018421:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018425:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0018429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001842d:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0018435:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001843d:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c0018444:	89 14 24             	mov    DWORD PTR [esp],edx
c0018447:	ff d0                	call   eax
c0018449:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018450:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018456:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c001845d:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0018464:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018467:	89 84 24 44 04 00 00 	mov    DWORD PTR [esp+0x444],eax
c001846e:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018475:	89 04 24             	mov    DWORD PTR [esp],eax
c0018478:	e8 07 2c ff ff       	call   c000b084 <File::close()>
c001847d:	8b 84 24 44 04 00 00 	mov    eax,DWORD PTR [esp+0x444]
c0018484:	ba 00 00 00 00       	mov    edx,0x0
c0018489:	81 c4 5c 04 00 00    	add    esp,0x45c
c001848f:	5b                   	pop    ebx
c0018490:	5e                   	pop    esi
c0018491:	5f                   	pop    edi
c0018492:	5d                   	pop    ebp
c0018493:	c3                   	ret    

c0018494 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018494:	57                   	push   edi
c0018495:	56                   	push   esi
c0018496:	53                   	push   ebx
c0018497:	81 ec 60 02 00 00    	sub    esp,0x260
c001849d:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c00184a5:	74 0d                	je     c00184b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00184a7:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c00184af:	75 0f                	jne    c00184c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00184b1:	8d 76 00             	lea    esi,[esi+0x0]
c00184b4:	b8 04 00 00 00       	mov    eax,0x4
c00184b9:	e9 32 01 00 00       	jmp    c00185f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00184be:	66 90                	xchg   ax,ax
c00184c0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00184c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184cb:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c00184d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00184d5:	e8 95 c1 fe ff       	call   c000466f <f_readdir>
c00184da:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c00184e1:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00184e8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00184ef:	83 c0 16             	add    eax,0x16
c00184f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00184f5:	e8 96 80 fe ff       	call   c0000590 <strlen>
c00184fa:	ba 00 00 00 00       	mov    edx,0x0
c00184ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018503:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0018507:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c001850f:	0f b6 c0             	movzx  eax,al
c0018512:	83 e0 10             	and    eax,0x10
c0018515:	74 09                	je     c0018520 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c0018517:	b8 02 00 00 00       	mov    eax,0x2
c001851c:	eb 0a                	jmp    c0018528 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c001851e:	66 90                	xchg   ax,ax
c0018520:	b8 01 00 00 00       	mov    eax,0x1
c0018525:	8d 76 00             	lea    esi,[esi+0x0]
c0018528:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001852c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018533:	83 c0 16             	add    eax,0x16
c0018536:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001853a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001853e:	83 c0 10             	add    eax,0x10
c0018541:	89 04 24             	mov    DWORD PTR [esp],eax
c0018544:	e8 47 81 fe ff       	call   c0000690 <strcpy>
c0018549:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c0018550:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c0018557:	8d 44 24 18          	lea    eax,[esp+0x18]
c001855b:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c0018562:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c0018569:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c0018570:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018577:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001857e:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018585:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c001858c:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c0018593:	89 c6                	mov    esi,eax
c0018595:	89 d7                	mov    edi,edx
c0018597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018599:	89 c8                	mov    eax,ecx
c001859b:	89 fa                	mov    edx,edi
c001859d:	89 f3                	mov    ebx,esi
c001859f:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c00185a6:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c00185ad:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00185b4:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c00185bb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00185c1:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c00185c9:	84 c0                	test   al,al
c00185cb:	75 07                	jne    c00185d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c00185cd:	b8 07 00 00 00       	mov    eax,0x7
c00185d2:	eb 1c                	jmp    c00185f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185d4:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c00185db:	85 c0                	test   eax,eax
c00185dd:	75 09                	jne    c00185e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c00185df:	b8 00 00 00 00       	mov    eax,0x0
c00185e4:	eb 0a                	jmp    c00185f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185e6:	66 90                	xchg   ax,ax
c00185e8:	b8 01 00 00 00       	mov    eax,0x1
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	81 c4 60 02 00 00    	add    esp,0x260
c00185f6:	5b                   	pop    ebx
c00185f7:	5e                   	pop    esi
c00185f8:	5f                   	pop    edi
c00185f9:	c3                   	ret    
c00185fa:	66 90                	xchg   ax,ax

c00185fc <FAT::read(void*, unsigned long, void*, int*)>:
c00185fc:	83 ec 2c             	sub    esp,0x2c
c00185ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018604:	74 0a                	je     c0018610 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018606:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001860b:	75 0b                	jne    c0018618 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	b8 04 00 00 00       	mov    eax,0x4
c0018615:	eb 4d                	jmp    c0018664 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018617:	90                   	nop
c0018618:	8d 44 24 18          	lea    eax,[esp+0x18]
c001861c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018620:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018628:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001862c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018630:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018634:	89 04 24             	mov    DWORD PTR [esp],eax
c0018637:	e8 ab b8 fe ff       	call   c0003ee7 <f_read>
c001863c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018640:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018644:	89 c2                	mov    edx,eax
c0018646:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001864a:	89 10                	mov    DWORD PTR [eax],edx
c001864c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018650:	85 c0                	test   eax,eax
c0018652:	75 08                	jne    c001865c <FAT::read(void*, unsigned long, void*, int*)+0x60>
c0018654:	b8 00 00 00 00       	mov    eax,0x0
c0018659:	eb 09                	jmp    c0018664 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c001865b:	90                   	nop
c001865c:	b8 01 00 00 00       	mov    eax,0x1
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	83 c4 2c             	add    esp,0x2c
c0018667:	c3                   	ret    

c0018668 <FAT::write(void*, unsigned long, void*, int*)>:
c0018668:	83 ec 2c             	sub    esp,0x2c
c001866b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018670:	74 0a                	je     c001867c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018672:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018677:	75 0b                	jne    c0018684 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018679:	8d 76 00             	lea    esi,[esi+0x0]
c001867c:	b8 04 00 00 00       	mov    eax,0x4
c0018681:	eb 4d                	jmp    c00186d0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018683:	90                   	nop
c0018684:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001868c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018694:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018698:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001869c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00186a3:	e8 1b ba fe ff       	call   c00040c3 <f_write>
c00186a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186b0:	89 c2                	mov    edx,eax
c00186b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186b6:	89 10                	mov    DWORD PTR [eax],edx
c00186b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186bc:	85 c0                	test   eax,eax
c00186be:	75 08                	jne    c00186c8 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c00186c0:	b8 00 00 00 00       	mov    eax,0x0
c00186c5:	eb 09                	jmp    c00186d0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c00186c7:	90                   	nop
c00186c8:	b8 01 00 00 00       	mov    eax,0x1
c00186cd:	8d 76 00             	lea    esi,[esi+0x0]
c00186d0:	83 c4 2c             	add    esp,0x2c
c00186d3:	c3                   	ret    

c00186d4 <FAT::close(void*)>:
c00186d4:	83 ec 2c             	sub    esp,0x2c
c00186d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00186dc:	75 0a                	jne    c00186e8 <FAT::close(void*)+0x14>
c00186de:	b8 04 00 00 00       	mov    eax,0x4
c00186e3:	eb 37                	jmp    c001871c <FAT::close(void*)+0x48>
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]
c00186e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00186ef:	e8 b9 bc fe ff       	call   c00043ad <f_close>
c00186f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00186ff:	e8 75 f3 fe ff       	call   c0007a79 <free>
c0018704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018708:	85 c0                	test   eax,eax
c001870a:	75 08                	jne    c0018714 <FAT::close(void*)+0x40>
c001870c:	b8 00 00 00 00       	mov    eax,0x0
c0018711:	eb 09                	jmp    c001871c <FAT::close(void*)+0x48>
c0018713:	90                   	nop
c0018714:	b8 01 00 00 00       	mov    eax,0x1
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	83 c4 2c             	add    esp,0x2c
c001871f:	c3                   	ret    

c0018720 <FAT::closeDir(void*)>:
c0018720:	83 ec 2c             	sub    esp,0x2c
c0018723:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018728:	75 0a                	jne    c0018734 <FAT::closeDir(void*)+0x14>
c001872a:	b8 04 00 00 00       	mov    eax,0x4
c001872f:	eb 37                	jmp    c0018768 <FAT::closeDir(void*)+0x48>
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018738:	89 04 24             	mov    DWORD PTR [esp],eax
c001873b:	e8 0d bf fe ff       	call   c000464d <f_closedir>
c0018740:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018748:	89 04 24             	mov    DWORD PTR [esp],eax
c001874b:	e8 29 f3 fe ff       	call   c0007a79 <free>
c0018750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018754:	85 c0                	test   eax,eax
c0018756:	75 08                	jne    c0018760 <FAT::closeDir(void*)+0x40>
c0018758:	b8 00 00 00 00       	mov    eax,0x0
c001875d:	eb 09                	jmp    c0018768 <FAT::closeDir(void*)+0x48>
c001875f:	90                   	nop
c0018760:	b8 01 00 00 00       	mov    eax,0x1
c0018765:	8d 76 00             	lea    esi,[esi+0x0]
c0018768:	83 c4 2c             	add    esp,0x2c
c001876b:	c3                   	ret    

c001876c <FAT::seek(void*, unsigned long long)>:
c001876c:	83 ec 3c             	sub    esp,0x3c
c001876f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018777:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001877b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001877f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018784:	75 0a                	jne    c0018790 <FAT::seek(void*, unsigned long long)+0x24>
c0018786:	b8 04 00 00 00       	mov    eax,0x4
c001878b:	eb 33                	jmp    c00187c0 <FAT::seek(void*, unsigned long long)+0x54>
c001878d:	8d 76 00             	lea    esi,[esi+0x0]
c0018790:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018794:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018798:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001879c:	89 04 24             	mov    DWORD PTR [esp],eax
c001879f:	e8 38 bc fe ff       	call   c00043dc <f_lseek>
c00187a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00187a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00187ac:	85 c0                	test   eax,eax
c00187ae:	75 08                	jne    c00187b8 <FAT::seek(void*, unsigned long long)+0x4c>
c00187b0:	b8 00 00 00 00       	mov    eax,0x0
c00187b5:	eb 09                	jmp    c00187c0 <FAT::seek(void*, unsigned long long)+0x54>
c00187b7:	90                   	nop
c00187b8:	b8 01 00 00 00       	mov    eax,0x1
c00187bd:	8d 76 00             	lea    esi,[esi+0x0]
c00187c0:	83 c4 3c             	add    esp,0x3c
c00187c3:	c3                   	ret    

c00187c4 <fatWrapperReadDisk>:
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 34             	sub    esp,0x34
c00187c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187cd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d6:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00187dd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00187e1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187e5:	ba 00 00 00 00       	mov    edx,0x0
c00187ea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00187ee:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00187f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00187fe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018801:	e8 12 49 ff ff       	call   c000d118 <LogicalDisk::read(unsigned long long, int, void*)>
c0018806:	83 c4 34             	add    esp,0x34
c0018809:	5b                   	pop    ebx
c001880a:	5e                   	pop    esi
c001880b:	c3                   	ret    

c001880c <fatWrapperWriteDisk>:
c001880c:	56                   	push   esi
c001880d:	53                   	push   ebx
c001880e:	83 ec 34             	sub    esp,0x34
c0018811:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018815:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881e:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018825:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0018829:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001882d:	ba 00 00 00 00       	mov    edx,0x0
c0018832:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0018836:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001883a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001883e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018842:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018846:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018849:	e8 36 49 ff ff       	call   c000d184 <LogicalDisk::write(unsigned long long, int, void*)>
c001884e:	83 c4 34             	add    esp,0x34
c0018851:	5b                   	pop    ebx
c0018852:	5e                   	pop    esi
c0018853:	c3                   	ret    

c0018854 <fatWrapperIoctl>:
c0018854:	53                   	push   ebx
c0018855:	83 ec 38             	sub    esp,0x38
c0018858:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001885c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018860:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018864:	88 d0                	mov    al,dl
c0018866:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001886a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001886f:	75 37                	jne    c00188a8 <fatWrapperIoctl+0x54>
c0018871:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018875:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018879:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001887e:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018885:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001888b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018891:	0f b7 d0             	movzx  edx,ax
c0018894:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018898:	66 89 10             	mov    WORD PTR [eax],dx
c001889b:	b8 00 00 00 00       	mov    eax,0x0
c00188a0:	e9 c3 00 00 00       	jmp    c0018968 <fatWrapperIoctl+0x114>
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]
c00188a8:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00188ad:	75 71                	jne    c0018920 <fatWrapperIoctl+0xcc>
c00188af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00188b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188b7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00188bc:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00188c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00188c9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00188cf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00188d5:	89 c8                	mov    eax,ecx
c00188d7:	89 da                	mov    edx,ebx
c00188d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00188dd:	c1 e0 0a             	shl    eax,0xa
c00188e0:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c00188e5:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00188ec:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00188f2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00188f8:	89 cb                	mov    ebx,ecx
c00188fa:	c1 fb 1f             	sar    ebx,0x1f
c00188fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018901:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018905:	89 04 24             	mov    DWORD PTR [esp],eax
c0018908:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001890c:	e8 ff 59 00 00       	call   c001e310 <__udivdi3>
c0018911:	89 c2                	mov    edx,eax
c0018913:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018917:	89 10                	mov    DWORD PTR [eax],edx
c0018919:	b8 00 00 00 00       	mov    eax,0x0
c001891e:	eb 48                	jmp    c0018968 <fatWrapperIoctl+0x114>
c0018920:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018925:	75 09                	jne    c0018930 <fatWrapperIoctl+0xdc>
c0018927:	b8 00 00 00 00       	mov    eax,0x0
c001892c:	eb 3a                	jmp    c0018968 <fatWrapperIoctl+0x114>
c001892e:	66 90                	xchg   ax,ax
c0018930:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0018935:	75 19                	jne    c0018950 <fatWrapperIoctl+0xfc>
c0018937:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001893b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001893f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018943:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018949:	b8 00 00 00 00       	mov    eax,0x0
c001894e:	eb 18                	jmp    c0018968 <fatWrapperIoctl+0x114>
c0018950:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c0018955:	75 09                	jne    c0018960 <fatWrapperIoctl+0x10c>
c0018957:	b8 00 00 00 00       	mov    eax,0x0
c001895c:	eb 0a                	jmp    c0018968 <fatWrapperIoctl+0x114>
c001895e:	66 90                	xchg   ax,ax
c0018960:	b8 04 00 00 00       	mov    eax,0x4
c0018965:	8d 76 00             	lea    esi,[esi+0x0]
c0018968:	83 c4 38             	add    esp,0x38
c001896b:	5b                   	pop    ebx
c001896c:	c3                   	ret    
c001896d:	90                   	nop
c001896e:	66 90                	xchg   ax,ax

c0018970 <FAT::FAT()>:
c0018970:	83 ec 2c             	sub    esp,0x2c
c0018973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018977:	89 04 24             	mov    DWORD PTR [esp],eax
c001897a:	e8 95 23 ff ff       	call   c000ad14 <Filesystem::Filesystem()>
c001897f:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c0018984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018988:	89 10                	mov    DWORD PTR [eax],edx
c001898a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018994:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001899c:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c00189a1:	7f 15                	jg     c00189b8 <FAT::FAT()+0x48>
c00189a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189a7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c00189b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00189b6:	eb e4                	jmp    c001899c <FAT::FAT()+0x2c>
c00189b8:	90                   	nop
c00189b9:	83 c4 2c             	add    esp,0x2c
c00189bc:	c3                   	ret    
c00189bd:	90                   	nop
c00189be:	66 90                	xchg   ax,ax

c00189c0 <FAT::fixFilepath(char*)>:
c00189c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189c7:	3c 40                	cmp    al,0x40
c00189c9:	7e 2d                	jle    c00189f8 <FAT::fixFilepath(char*)+0x38>
c00189cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189d2:	2c 41                	sub    al,0x41
c00189d4:	88 c2                	mov    dl,al
c00189d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189da:	88 10                	mov    BYTE PTR [eax],dl
c00189dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189e3:	0f be c0             	movsx  eax,al
c00189e6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00189ed:	04 30                	add    al,0x30
c00189ef:	88 c2                	mov    dl,al
c00189f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189f5:	88 10                	mov    BYTE PTR [eax],dl
c00189f7:	90                   	nop
c00189f8:	90                   	nop
c00189f9:	c3                   	ret    
c00189fa:	66 90                	xchg   ax,ax

c00189fc <FAT::open(char const*, void**, FileOpenMode)>:
c00189fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018a0a:	74 0c                	je     c0018a18 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018a0c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018a14:	75 0e                	jne    c0018a24 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018a16:	66 90                	xchg   ax,ax
c0018a18:	b8 04 00 00 00       	mov    eax,0x4
c0018a1d:	e9 02 01 00 00       	jmp    c0018b24 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018a22:	66 90                	xchg   ax,ax
c0018a24:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018a2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a33:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a36:	e8 55 7c fe ff       	call   c0000690 <strcpy>
c0018a3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a43:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a4d:	e8 6e ff ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018a52:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018a5a:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a61:	83 e0 01             	and    eax,0x1
c0018a64:	74 0a                	je     c0018a70 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018a66:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018a6e:	66 90                	xchg   ax,ax
c0018a70:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a77:	83 e0 04             	and    eax,0x4
c0018a7a:	74 10                	je     c0018a8c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018a7c:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0018a84:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018a8c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a93:	83 e0 02             	and    eax,0x2
c0018a96:	74 08                	je     c0018aa0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018a98:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018aa0:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018aa7:	83 e0 08             	and    eax,0x8
c0018aaa:	74 08                	je     c0018ab4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018aac:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018ab4:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018abb:	83 e0 10             	and    eax,0x10
c0018abe:	74 08                	je     c0018ac8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018ac0:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c0018ac8:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c0018acf:	e8 92 ef fe ff       	call   c0007a66 <malloc>
c0018ad4:	89 c2                	mov    edx,eax
c0018ad6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018add:	89 10                	mov    DWORD PTR [eax],edx
c0018adf:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c0018ae7:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0018af0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018af4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018af8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018afc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aff:	e8 19 b1 fe ff       	call   c0003c1d <f_open>
c0018b04:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018b0b:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0018b13:	74 07                	je     c0018b1c <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0018b15:	b8 01 00 00 00       	mov    eax,0x1
c0018b1a:	eb 08                	jmp    c0018b24 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018b1c:	b8 00 00 00 00       	mov    eax,0x0
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b2a:	c3                   	ret    
c0018b2b:	90                   	nop

c0018b2c <FAT::openDir(char const*, void**)>:
c0018b2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018b32:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018b3a:	74 0c                	je     c0018b48 <FAT::openDir(char const*, void**)+0x1c>
c0018b3c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018b44:	75 0e                	jne    c0018b54 <FAT::openDir(char const*, void**)+0x28>
c0018b46:	66 90                	xchg   ax,ax
c0018b48:	b8 04 00 00 00       	mov    eax,0x4
c0018b4d:	e9 82 00 00 00       	jmp    c0018bd4 <FAT::openDir(char const*, void**)+0xa8>
c0018b52:	66 90                	xchg   ax,ax
c0018b54:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018b5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b66:	e8 25 7b fe ff       	call   c0000690 <strcpy>
c0018b6b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018b6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b73:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018b7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b7d:	e8 3e fe ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018b82:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0018b89:	e8 d8 ee fe ff       	call   c0007a66 <malloc>
c0018b8e:	89 c2                	mov    edx,eax
c0018b90:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018b97:	89 10                	mov    DWORD PTR [eax],edx
c0018b99:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ba2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018ba6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018baa:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bad:	e8 d0 b9 fe ff       	call   c0004582 <f_opendir>
c0018bb2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018bb9:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c0018bc1:	74 09                	je     c0018bcc <FAT::openDir(char const*, void**)+0xa0>
c0018bc3:	b8 01 00 00 00       	mov    eax,0x1
c0018bc8:	eb 0a                	jmp    c0018bd4 <FAT::openDir(char const*, void**)+0xa8>
c0018bca:	66 90                	xchg   ax,ax
c0018bcc:	b8 00 00 00 00       	mov    eax,0x0
c0018bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bda:	c3                   	ret    
c0018bdb:	90                   	nop

c0018bdc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018bdc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018be2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018bea:	75 0c                	jne    c0018bf8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018bec:	b8 04 00 00 00       	mov    eax,0x4
c0018bf1:	e9 d2 00 00 00       	jmp    c0018cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018bf6:	66 90                	xchg   ax,ax
c0018bf8:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0018c00:	75 0a                	jne    c0018c0c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018c02:	b8 04 00 00 00       	mov    eax,0x4
c0018c07:	e9 bc 00 00 00       	jmp    c0018cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018c0c:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0018c14:	75 0a                	jne    c0018c20 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018c16:	b8 04 00 00 00       	mov    eax,0x4
c0018c1b:	e9 a8 00 00 00       	jmp    c0018cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018c20:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018c27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c2b:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c32:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c35:	e8 56 7a fe ff       	call   c0000690 <strcpy>
c0018c3a:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c45:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0018c4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c4f:	e8 6c fd ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018c54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c5c:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c66:	e8 96 ba fe ff       	call   c0004701 <f_stat>
c0018c6b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0018c72:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0018c79:	85 c0                	test   eax,eax
c0018c7b:	74 07                	je     c0018c84 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c0018c7d:	83 f8 04             	cmp    eax,0x4
c0018c80:	74 36                	je     c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0018c82:	eb 3c                	jmp    c0018cc0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0018c84:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018c89:	0f b6 c0             	movzx  eax,al
c0018c8c:	83 e0 10             	and    eax,0x10
c0018c8f:	0f 95 c2             	setne  dl
c0018c92:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018c99:	88 10                	mov    BYTE PTR [eax],dl
c0018c9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c9f:	ba 00 00 00 00       	mov    edx,0x0
c0018ca4:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c0018cab:	89 01                	mov    DWORD PTR [ecx],eax
c0018cad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018cb0:	b8 00 00 00 00       	mov    eax,0x0
c0018cb5:	eb 11                	jmp    c0018cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018cb7:	90                   	nop
c0018cb8:	b8 02 00 00 00       	mov    eax,0x2
c0018cbd:	eb 09                	jmp    c0018cc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018cbf:	90                   	nop
c0018cc0:	b8 01 00 00 00       	mov    eax,0x1
c0018cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc8:	81 c4 3c 02 00 00    	add    esp,0x23c
c0018cce:	c3                   	ret    
c0018ccf:	90                   	nop

c0018cd0 <FAT::unlink(char const*)>:
c0018cd0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018cd6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018cde:	75 08                	jne    c0018ce8 <FAT::unlink(char const*)+0x18>
c0018ce0:	b8 04 00 00 00       	mov    eax,0x4
c0018ce5:	eb 5d                	jmp    c0018d44 <FAT::unlink(char const*)+0x74>
c0018ce7:	90                   	nop
c0018ce8:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018cef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cf3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cfa:	e8 91 79 fe ff       	call   c0000690 <strcpy>
c0018cff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d07:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018d0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d11:	e8 aa fc ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018d16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d1d:	e8 46 bc fe ff       	call   c0004968 <f_unlink>
c0018d22:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018d29:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018d30:	85 c0                	test   eax,eax
c0018d32:	75 08                	jne    c0018d3c <FAT::unlink(char const*)+0x6c>
c0018d34:	b8 00 00 00 00       	mov    eax,0x0
c0018d39:	eb 09                	jmp    c0018d44 <FAT::unlink(char const*)+0x74>
c0018d3b:	90                   	nop
c0018d3c:	b8 01 00 00 00       	mov    eax,0x1
c0018d41:	8d 76 00             	lea    esi,[esi+0x0]
c0018d44:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018d4a:	c3                   	ret    
c0018d4b:	90                   	nop

c0018d4c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018d4c:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0018d52:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018d59:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0018d60:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018d64:	88 d0                	mov    al,dl
c0018d66:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018d6a:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018d72:	75 0c                	jne    c0018d80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018d74:	b8 04 00 00 00       	mov    eax,0x4
c0018d79:	e9 32 01 00 00       	jmp    c0018eb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d92:	e8 f9 78 fe ff       	call   c0000690 <strcpy>
c0018d97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d9f:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018da9:	e8 12 fc ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018dae:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c0018db6:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c0018dbe:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018dc3:	83 e0 01             	and    eax,0x1
c0018dc6:	74 08                	je     c0018dd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018dc8:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c0018dd0:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018dd5:	83 e0 02             	and    eax,0x2
c0018dd8:	74 0a                	je     c0018de4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c0018dda:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c0018de2:	66 90                	xchg   ax,ax
c0018de4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018de9:	83 e0 04             	and    eax,0x4
c0018dec:	74 0a                	je     c0018df8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018dee:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0018df6:	66 90                	xchg   ax,ax
c0018df8:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018dfd:	83 e0 08             	and    eax,0x8
c0018e00:	74 0a                	je     c0018e0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0018e02:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c0018e0a:	66 90                	xchg   ax,ax
c0018e0c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e11:	83 e0 01             	and    eax,0x1
c0018e14:	74 0a                	je     c0018e20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0018e16:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c0018e1e:	66 90                	xchg   ax,ax
c0018e20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e25:	83 e0 02             	and    eax,0x2
c0018e28:	74 0a                	je     c0018e34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c0018e2a:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0018e32:	66 90                	xchg   ax,ax
c0018e34:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e39:	83 e0 04             	and    eax,0x4
c0018e3c:	74 0a                	je     c0018e48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018e3e:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0018e46:	66 90                	xchg   ax,ax
c0018e48:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e4d:	83 e0 08             	and    eax,0x8
c0018e50:	74 0a                	je     c0018e5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0018e52:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c0018e5a:	66 90                	xchg   ax,ax
c0018e5c:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018e64:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c0018e6b:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0018e73:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018e7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018e7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e83:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e87:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e8a:	e8 4a bf fe ff       	call   c0004dd9 <f_chmod>
c0018e8f:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0018e96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018e9d:	85 c0                	test   eax,eax
c0018e9f:	75 07                	jne    c0018ea8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c0018ea1:	b8 00 00 00 00       	mov    eax,0x0
c0018ea6:	eb 08                	jmp    c0018eb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018ea8:	b8 01 00 00 00       	mov    eax,0x1
c0018ead:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0018eb6:	c3                   	ret    
c0018eb7:	90                   	nop

c0018eb8 <FAT::rename(char const*, char const*)>:
c0018eb8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018ebe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018ec6:	74 0c                	je     c0018ed4 <FAT::rename(char const*, char const*)+0x1c>
c0018ec8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018ed0:	75 0e                	jne    c0018ee0 <FAT::rename(char const*, char const*)+0x28>
c0018ed2:	66 90                	xchg   ax,ax
c0018ed4:	b8 04 00 00 00       	mov    eax,0x4
c0018ed9:	e9 9e 00 00 00       	jmp    c0018f7c <FAT::rename(char const*, char const*)+0xc4>
c0018ede:	66 90                	xchg   ax,ax
c0018ee0:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0018ee7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eeb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ef5:	e8 96 77 fe ff       	call   c0000690 <strcpy>
c0018efa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018f01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f05:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f0f:	e8 ac fa ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018f14:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c0018f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f23:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f26:	e8 65 77 fe ff       	call   c0000690 <strcpy>
c0018f2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f33:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018f3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f3d:	e8 7e fa ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018f42:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f4a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018f51:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f54:	e8 c8 bc fe ff       	call   c0004c21 <f_rename>
c0018f59:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018f60:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018f67:	85 c0                	test   eax,eax
c0018f69:	75 09                	jne    c0018f74 <FAT::rename(char const*, char const*)+0xbc>
c0018f6b:	b8 00 00 00 00       	mov    eax,0x0
c0018f70:	eb 0a                	jmp    c0018f7c <FAT::rename(char const*, char const*)+0xc4>
c0018f72:	66 90                	xchg   ax,ax
c0018f74:	b8 01 00 00 00       	mov    eax,0x1
c0018f79:	8d 76 00             	lea    esi,[esi+0x0]
c0018f7c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018f82:	c3                   	ret    
c0018f83:	90                   	nop

c0018f84 <FAT::mkdir(char const*)>:
c0018f84:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f8a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f92:	75 08                	jne    c0018f9c <FAT::mkdir(char const*)+0x18>
c0018f94:	b8 04 00 00 00       	mov    eax,0x4
c0018f99:	eb 5d                	jmp    c0018ff8 <FAT::mkdir(char const*)+0x74>
c0018f9b:	90                   	nop
c0018f9c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fa7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fae:	e8 dd 76 fe ff       	call   c0000690 <strcpy>
c0018fb3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fbb:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fc5:	e8 f6 f9 ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0018fca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fd1:	e8 b0 ba fe ff       	call   c0004a86 <f_mkdir>
c0018fd6:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018fdd:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018fe4:	85 c0                	test   eax,eax
c0018fe6:	75 08                	jne    c0018ff0 <FAT::mkdir(char const*)+0x6c>
c0018fe8:	b8 00 00 00 00       	mov    eax,0x0
c0018fed:	eb 09                	jmp    c0018ff8 <FAT::mkdir(char const*)+0x74>
c0018fef:	90                   	nop
c0018ff0:	b8 01 00 00 00       	mov    eax,0x1
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ffe:	c3                   	ret    
c0018fff:	90                   	nop

c0019000 <FAT::exists(char const*)>:
c0019000:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019006:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001900d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019011:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019015:	89 04 24             	mov    DWORD PTR [esp],eax
c0019018:	e8 73 76 fe ff       	call   c0000690 <strcpy>
c001901d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019021:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019025:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c001902c:	89 04 24             	mov    DWORD PTR [esp],eax
c001902f:	e8 8c f9 ff ff       	call   c00189c0 <FAT::fixFilepath(char*)>
c0019034:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001903b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001903f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019043:	89 04 24             	mov    DWORD PTR [esp],eax
c0019046:	e8 b6 b6 fe ff       	call   c0004701 <f_stat>
c001904b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019052:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019059:	85 c0                	test   eax,eax
c001905b:	75 07                	jne    c0019064 <FAT::exists(char const*)+0x64>
c001905d:	b0 01                	mov    al,0x1
c001905f:	eb 07                	jmp    c0019068 <FAT::exists(char const*)+0x68>
c0019061:	8d 76 00             	lea    esi,[esi+0x0]
c0019064:	b0 00                	mov    al,0x0
c0019066:	66 90                	xchg   ax,ax
c0019068:	81 c4 3c 02 00 00    	add    esp,0x23c
c001906e:	c3                   	ret    
c001906f:	90                   	nop

c0019070 <isoReadDiscSectorHelper>:
c0019070:	53                   	push   ebx
c0019071:	83 ec 48             	sub    esp,0x48
c0019074:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019078:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001907c:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c0019081:	83 e8 41             	sub    eax,0x41
c0019084:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001908b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001908f:	ba 00 00 00 00       	mov    edx,0x0
c0019094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019098:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001909c:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00190a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00190a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00190ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00190af:	e8 64 40 ff ff       	call   c000d118 <LogicalDisk::read(unsigned long long, int, void*)>
c00190b4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00190b8:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00190bd:	74 09                	je     c00190c8 <isoReadDiscSectorHelper+0x58>
c00190bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00190c3:	c1 e0 0b             	shl    eax,0xb
c00190c6:	eb 08                	jmp    c00190d0 <isoReadDiscSectorHelper+0x60>
c00190c8:	b8 00 00 00 00       	mov    eax,0x0
c00190cd:	8d 76 00             	lea    esi,[esi+0x0]
c00190d0:	83 c4 48             	add    esp,0x48
c00190d3:	5b                   	pop    ebx
c00190d4:	c3                   	ret    
c00190d5:	8d 76 00             	lea    esi,[esi+0x0]

c00190d8 <iso_kprintf>:
c00190d8:	83 ec 1c             	sub    esp,0x1c
c00190db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00190df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190e3:	c7 04 24 b9 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cb9
c00190ea:	e8 f7 18 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00190ef:	90                   	nop
c00190f0:	83 c4 1c             	add    esp,0x1c
c00190f3:	c3                   	ret    

c00190f4 <iso_kprintfd>:
c00190f4:	83 ec 1c             	sub    esp,0x1c
c00190f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00190fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190ff:	c7 04 24 d7 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcd7
c0019106:	e8 db 18 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001910b:	90                   	nop
c001910c:	83 c4 1c             	add    esp,0x1c
c001910f:	c3                   	ret    

c0019110 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019110:	b8 08 00 00 00       	mov    eax,0x8
c0019115:	c3                   	ret    

c0019116 <ISO9660::getName()>:
c0019116:	b8 0c 13 02 c0       	mov    eax,0xc002130c
c001911b:	c3                   	ret    

c001911c <ISO9660::closeDir(void*)>:
c001911c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019120:	8b 00                	mov    eax,DWORD PTR [eax]
c0019122:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019125:	90                   	nop

c0019126 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019126:	b8 01 00 00 00       	mov    eax,0x1
c001912b:	c3                   	ret    

c001912c <ISO9660::unlink(char const*)>:
c001912c:	b8 01 00 00 00       	mov    eax,0x1
c0019131:	c3                   	ret    

c0019132 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019132:	b8 03 00 00 00       	mov    eax,0x3
c0019137:	c3                   	ret    

c0019138 <ISO9660::rename(char const*, char const*)>:
c0019138:	b8 01 00 00 00       	mov    eax,0x1
c001913d:	c3                   	ret    

c001913e <ISO9660::mkdir(char const*)>:
c001913e:	b8 01 00 00 00       	mov    eax,0x1
c0019143:	c3                   	ret    

c0019144 <ISO9660::~ISO9660()>:
c0019144:	83 ec 1c             	sub    esp,0x1c
c0019147:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c001914c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019150:	89 10                	mov    DWORD PTR [eax],edx
c0019152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019156:	89 04 24             	mov    DWORD PTR [esp],eax
c0019159:	e8 da 1b ff ff       	call   c000ad38 <Filesystem::~Filesystem()>
c001915e:	90                   	nop
c001915f:	83 c4 1c             	add    esp,0x1c
c0019162:	c3                   	ret    
c0019163:	90                   	nop

c0019164 <ISO9660::~ISO9660()>:
c0019164:	83 ec 1c             	sub    esp,0x1c
c0019167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001916b:	89 04 24             	mov    DWORD PTR [esp],eax
c001916e:	e8 d1 ff ff ff       	call   c0019144 <ISO9660::~ISO9660()>
c0019173:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c001917b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001917f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019182:	e8 45 17 ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c0019187:	83 c4 1c             	add    esp,0x1c
c001918a:	c3                   	ret    
c001918b:	90                   	nop

c001918c <ISO9660::exists(char const*)>:
c001918c:	83 ec 18             	sub    esp,0x18
c001918f:	68 27 13 02 c0       	push   0xc0021327
c0019194:	e8 9c 75 ff ff       	call   c0010735 <KePanic(char const*)>
c0019199:	31 c0                	xor    eax,eax
c001919b:	83 c4 1c             	add    esp,0x1c
c001919e:	c3                   	ret    
c001919f:	90                   	nop

c00191a0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00191a0:	56                   	push   esi
c00191a1:	53                   	push   ebx
c00191a2:	53                   	push   ebx
c00191a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00191a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00191ab:	85 db                	test   ebx,ebx
c00191ad:	0f 84 c2 00 00 00    	je     c0019275 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00191b3:	85 f6                	test   esi,esi
c00191b5:	0f 84 ba 00 00 00    	je     c0019275 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00191bb:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00191c0:	b8 03 00 00 00       	mov    eax,0x3
c00191c5:	0f 85 af 00 00 00    	jne    c001927a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00191cb:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00191d0:	38 03                	cmp    BYTE PTR [ebx],al
c00191d2:	74 1b                	je     c00191ef <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00191d4:	84 c0                	test   al,al
c00191d6:	74 10                	je     c00191e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00191d8:	83 ec 0c             	sub    esp,0xc
c00191db:	68 45 13 02 c0       	push   0xc0021345
c00191e0:	e8 50 75 ff ff       	call   c0010735 <KePanic(char const*)>
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	8a 03                	mov    al,BYTE PTR [ebx]
c00191ea:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00191ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191f2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00191f9:	85 c0                	test   eax,eax
c00191fb:	74 09                	je     c0019206 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00191fd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019204:	74 48                	je     c001924e <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0019206:	83 ec 0c             	sub    esp,0xc
c0019209:	68 55 13 02 c0       	push   0xc0021355
c001920e:	e8 d3 17 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0019213:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019216:	83 c4 10             	add    esp,0x10
c0019219:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019220:	85 c0                	test   eax,eax
c0019222:	74 17                	je     c001923b <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0019224:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001922b:	83 ec 0c             	sub    esp,0xc
c001922e:	68 75 13 02 c0       	push   0xc0021375
c0019233:	e8 ae 17 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019242:	83 ec 0c             	sub    esp,0xc
c0019245:	50                   	push   eax
c0019246:	e8 24 d7 fe ff       	call   c000696f <init_percd>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	51                   	push   ecx
c001924f:	83 c3 03             	add    ebx,0x3
c0019252:	51                   	push   ecx
c0019253:	6a 00                	push   0x0
c0019255:	53                   	push   ebx
c0019256:	e8 d7 d1 fe ff       	call   c0006432 <iso_open>
c001925b:	83 c4 10             	add    esp,0x10
c001925e:	89 c2                	mov    edx,eax
c0019260:	b8 01 00 00 00       	mov    eax,0x1
c0019265:	83 fa ff             	cmp    edx,0xffffffff
c0019268:	74 10                	je     c001927a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001926a:	83 c2 32             	add    edx,0x32
c001926d:	31 c0                	xor    eax,eax
c001926f:	01 d2                	add    edx,edx
c0019271:	89 16                	mov    DWORD PTR [esi],edx
c0019273:	eb 05                	jmp    c001927a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019275:	b8 04 00 00 00       	mov    eax,0x4
c001927a:	5a                   	pop    edx
c001927b:	5b                   	pop    ebx
c001927c:	5e                   	pop    esi
c001927d:	c3                   	ret    

c001927e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001927e:	53                   	push   ebx
c001927f:	83 ec 08             	sub    esp,0x8
c0019282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019286:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001928a:	85 c0                	test   eax,eax
c001928c:	74 2d                	je     c00192bb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001928e:	85 db                	test   ebx,ebx
c0019290:	74 29                	je     c00192bb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019292:	52                   	push   edx
c0019293:	b9 02 00 00 00       	mov    ecx,0x2
c0019298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001929c:	99                   	cdq    
c001929d:	f7 f9                	idiv   ecx
c001929f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00192a3:	83 e8 32             	sub    eax,0x32
c00192a6:	50                   	push   eax
c00192a7:	e8 2c d2 fe ff       	call   c00064d8 <iso_read>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	89 03                	mov    DWORD PTR [ebx],eax
c00192b1:	09 d0                	or     eax,edx
c00192b3:	0f 94 c0             	sete   al
c00192b6:	0f b6 c0             	movzx  eax,al
c00192b9:	eb 05                	jmp    c00192c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00192bb:	b8 04 00 00 00       	mov    eax,0x4
c00192c0:	83 c4 08             	add    esp,0x8
c00192c3:	5b                   	pop    ebx
c00192c4:	c3                   	ret    
c00192c5:	90                   	nop

c00192c6 <ISO9660::seek(void*, unsigned long long)>:
c00192c6:	57                   	push   edi
c00192c7:	b8 04 00 00 00       	mov    eax,0x4
c00192cc:	56                   	push   esi
c00192cd:	51                   	push   ecx
c00192ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00192d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00192d6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00192da:	85 d2                	test   edx,edx
c00192dc:	74 26                	je     c0019304 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00192de:	89 d0                	mov    eax,edx
c00192e0:	b9 02 00 00 00       	mov    ecx,0x2
c00192e5:	6a 00                	push   0x0
c00192e7:	99                   	cdq    
c00192e8:	f7 f9                	idiv   ecx
c00192ea:	57                   	push   edi
c00192eb:	56                   	push   esi
c00192ec:	83 e8 32             	sub    eax,0x32
c00192ef:	50                   	push   eax
c00192f0:	e8 f9 d2 fe ff       	call   c00065ee <iso_seek>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	31 f0                	xor    eax,esi
c00192fa:	31 fa                	xor    edx,edi
c00192fc:	09 d0                	or     eax,edx
c00192fe:	0f 95 c0             	setne  al
c0019301:	0f b6 c0             	movzx  eax,al
c0019304:	5a                   	pop    edx
c0019305:	5e                   	pop    esi
c0019306:	5f                   	pop    edi
c0019307:	c3                   	ret    

c0019308 <ISO9660::tell(void*, unsigned long long*)>:
c0019308:	53                   	push   ebx
c0019309:	83 ec 08             	sub    esp,0x8
c001930c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019310:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019314:	85 c0                	test   eax,eax
c0019316:	74 24                	je     c001933c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019318:	85 db                	test   ebx,ebx
c001931a:	74 20                	je     c001933c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001931c:	b9 02 00 00 00       	mov    ecx,0x2
c0019321:	99                   	cdq    
c0019322:	f7 f9                	idiv   ecx
c0019324:	83 ec 0c             	sub    esp,0xc
c0019327:	83 e8 32             	sub    eax,0x32
c001932a:	50                   	push   eax
c001932b:	e8 42 d3 fe ff       	call   c0006672 <iso_tell>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	89 03                	mov    DWORD PTR [ebx],eax
c0019335:	31 c0                	xor    eax,eax
c0019337:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001933a:	eb 05                	jmp    c0019341 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001933c:	b8 04 00 00 00       	mov    eax,0x4
c0019341:	83 c4 08             	add    esp,0x8
c0019344:	5b                   	pop    ebx
c0019345:	c3                   	ret    

c0019346 <ISO9660::stat(void*, unsigned long long*)>:
c0019346:	56                   	push   esi
c0019347:	53                   	push   ebx
c0019348:	83 ec 10             	sub    esp,0x10
c001934b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001934f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019353:	68 99 13 02 c0       	push   0xc0021399
c0019358:	e8 89 16 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001935d:	83 c4 10             	add    esp,0x10
c0019360:	85 db                	test   ebx,ebx
c0019362:	74 2a                	je     c001938e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019364:	85 f6                	test   esi,esi
c0019366:	74 26                	je     c001938e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019368:	89 d8                	mov    eax,ebx
c001936a:	b9 02 00 00 00       	mov    ecx,0x2
c001936f:	99                   	cdq    
c0019370:	83 ec 0c             	sub    esp,0xc
c0019373:	f7 f9                	idiv   ecx
c0019375:	83 e8 32             	sub    eax,0x32
c0019378:	50                   	push   eax
c0019379:	e8 25 d3 fe ff       	call   c00066a3 <iso_total>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019388:	89 06                	mov    DWORD PTR [esi],eax
c001938a:	31 c0                	xor    eax,eax
c001938c:	eb 05                	jmp    c0019393 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001938e:	b8 04 00 00 00       	mov    eax,0x4
c0019393:	5a                   	pop    edx
c0019394:	5b                   	pop    ebx
c0019395:	5e                   	pop    esi
c0019396:	c3                   	ret    
c0019397:	90                   	nop

c0019398 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019398:	55                   	push   ebp
c0019399:	57                   	push   edi
c001939a:	56                   	push   esi
c001939b:	53                   	push   ebx
c001939c:	83 ec 18             	sub    esp,0x18
c001939f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00193a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00193a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00193ab:	68 a1 13 02 c0       	push   0xc00213a1
c00193b0:	e8 31 16 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	85 ff                	test   edi,edi
c00193ba:	0f 94 c2             	sete   dl
c00193bd:	85 f6                	test   esi,esi
c00193bf:	0f 94 c0             	sete   al
c00193c2:	08 c2                	or     dl,al
c00193c4:	0f 85 d5 00 00 00    	jne    c001949f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00193ca:	85 db                	test   ebx,ebx
c00193cc:	0f 84 cd 00 00 00    	je     c001949f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00193d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00193d5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00193db:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00193e2:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00193e7:	38 03                	cmp    BYTE PTR [ebx],al
c00193e9:	74 1b                	je     c0019406 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c00193eb:	84 c0                	test   al,al
c00193ed:	74 10                	je     c00193ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	68 45 13 02 c0       	push   0xc0021345
c00193f7:	e8 39 73 ff ff       	call   c0010735 <KePanic(char const*)>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	8a 03                	mov    al,BYTE PTR [ebx]
c0019401:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019406:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019409:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019410:	85 c0                	test   eax,eax
c0019412:	74 09                	je     c001941d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0019414:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001941b:	74 51                	je     c001946e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c001941d:	83 ec 0c             	sub    esp,0xc
c0019420:	68 a9 13 02 c0       	push   0xc00213a9
c0019425:	e8 bc 15 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001942a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019438:	74 21                	je     c001945b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001943a:	83 ec 0c             	sub    esp,0xc
c001943d:	68 c9 13 02 c0       	push   0xc00213c9
c0019442:	e8 9f 15 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c0019447:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001944a:	83 c4 10             	add    esp,0x10
c001944d:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019454:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001945b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019462:	83 ec 0c             	sub    esp,0xc
c0019465:	50                   	push   eax
c0019466:	e8 04 d5 fe ff       	call   c000696f <init_percd>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	52                   	push   edx
c001946f:	83 c3 03             	add    ebx,0x3
c0019472:	52                   	push   edx
c0019473:	6a 00                	push   0x0
c0019475:	53                   	push   ebx
c0019476:	e8 b7 cf fe ff       	call   c0006432 <iso_open>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	83 f8 ff             	cmp    eax,0xffffffff
c0019481:	89 c5                	mov    ebp,eax
c0019483:	75 21                	jne    c00194a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019485:	50                   	push   eax
c0019486:	50                   	push   eax
c0019487:	6a 01                	push   0x1
c0019489:	53                   	push   ebx
c001948a:	e8 a3 cf fe ff       	call   c0006432 <iso_open>
c001948f:	83 c4 10             	add    esp,0x10
c0019492:	ba 02 00 00 00       	mov    edx,0x2
c0019497:	40                   	inc    eax
c0019498:	74 2b                	je     c00194c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001949a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001949d:	eb 24                	jmp    c00194c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c001949f:	ba 04 00 00 00       	mov    edx,0x4
c00194a4:	eb 1f                	jmp    c00194c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	50                   	push   eax
c00194aa:	e8 f4 d1 fe ff       	call   c00066a3 <iso_total>
c00194af:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00194b6:	89 07                	mov    DWORD PTR [edi],eax
c00194b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00194bb:	e8 fa cf fe ff       	call   c00064ba <iso_close>
c00194c0:	83 c4 10             	add    esp,0x10
c00194c3:	31 d2                	xor    edx,edx
c00194c5:	83 c4 0c             	add    esp,0xc
c00194c8:	89 d0                	mov    eax,edx
c00194ca:	5b                   	pop    ebx
c00194cb:	5e                   	pop    esi
c00194cc:	5f                   	pop    edi
c00194cd:	5d                   	pop    ebp
c00194ce:	c3                   	ret    
c00194cf:	90                   	nop

c00194d0 <ISO9660::close(void*)>:
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	b8 04 00 00 00       	mov    eax,0x4
c00194d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194dc:	85 d2                	test   edx,edx
c00194de:	74 1b                	je     c00194fb <ISO9660::close(void*)+0x2b>
c00194e0:	89 d0                	mov    eax,edx
c00194e2:	b9 02 00 00 00       	mov    ecx,0x2
c00194e7:	99                   	cdq    
c00194e8:	83 ec 0c             	sub    esp,0xc
c00194eb:	f7 f9                	idiv   ecx
c00194ed:	83 e8 32             	sub    eax,0x32
c00194f0:	50                   	push   eax
c00194f1:	e8 c4 cf fe ff       	call   c00064ba <iso_close>
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	31 c0                	xor    eax,eax
c00194fb:	83 c4 0c             	add    esp,0xc
c00194fe:	c3                   	ret    
c00194ff:	90                   	nop

c0019500 <ISO9660::openDir(char const*, void**)>:
c0019500:	56                   	push   esi
c0019501:	53                   	push   ebx
c0019502:	50                   	push   eax
c0019503:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019507:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001950b:	85 db                	test   ebx,ebx
c001950d:	0f 84 b5 00 00 00    	je     c00195c8 <ISO9660::openDir(char const*, void**)+0xc8>
c0019513:	85 f6                	test   esi,esi
c0019515:	0f 84 ad 00 00 00    	je     c00195c8 <ISO9660::openDir(char const*, void**)+0xc8>
c001951b:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019520:	38 03                	cmp    BYTE PTR [ebx],al
c0019522:	74 1b                	je     c001953f <ISO9660::openDir(char const*, void**)+0x3f>
c0019524:	84 c0                	test   al,al
c0019526:	74 10                	je     c0019538 <ISO9660::openDir(char const*, void**)+0x38>
c0019528:	83 ec 0c             	sub    esp,0xc
c001952b:	68 45 13 02 c0       	push   0xc0021345
c0019530:	e8 00 72 ff ff       	call   c0010735 <KePanic(char const*)>
c0019535:	83 c4 10             	add    esp,0x10
c0019538:	8a 03                	mov    al,BYTE PTR [ebx]
c001953a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001953f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019542:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019549:	85 c0                	test   eax,eax
c001954b:	74 10                	je     c001955d <ISO9660::openDir(char const*, void**)+0x5d>
c001954d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019554:	74 1a                	je     c0019570 <ISO9660::openDir(char const*, void**)+0x70>
c0019556:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001955d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	50                   	push   eax
c0019568:	e8 02 d4 fe ff       	call   c000696f <init_percd>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	50                   	push   eax
c0019571:	83 c3 03             	add    ebx,0x3
c0019574:	50                   	push   eax
c0019575:	6a 01                	push   0x1
c0019577:	53                   	push   ebx
c0019578:	e8 b5 ce fe ff       	call   c0006432 <iso_open>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	83 f8 ff             	cmp    eax,0xffffffff
c0019583:	89 c3                	mov    ebx,eax
c0019585:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001958a:	75 1c                	jne    c00195a8 <ISO9660::openDir(char const*, void**)+0xa8>
c001958c:	53                   	push   ebx
c001958d:	53                   	push   ebx
c001958e:	68 ed 13 02 c0       	push   0xc00213ed
c0019593:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019599:	e8 8a f4 fe ff       	call   c0008a28 <VgaText::puts(char const*)>
c001959e:	83 c4 10             	add    esp,0x10
c00195a1:	b8 01 00 00 00       	mov    eax,0x1
c00195a6:	eb 25                	jmp    c00195cd <ISO9660::openDir(char const*, void**)+0xcd>
c00195a8:	51                   	push   ecx
c00195a9:	01 db                	add    ebx,ebx
c00195ab:	51                   	push   ecx
c00195ac:	83 c3 65             	add    ebx,0x65
c00195af:	68 00 14 02 c0       	push   0xc0021400
c00195b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00195ba:	e8 69 f4 fe ff       	call   c0008a28 <VgaText::puts(char const*)>
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	31 c0                	xor    eax,eax
c00195c4:	89 1e                	mov    DWORD PTR [esi],ebx
c00195c6:	eb 05                	jmp    c00195cd <ISO9660::openDir(char const*, void**)+0xcd>
c00195c8:	b8 04 00 00 00       	mov    eax,0x4
c00195cd:	5a                   	pop    edx
c00195ce:	5b                   	pop    ebx
c00195cf:	5e                   	pop    esi
c00195d0:	c3                   	ret    
c00195d1:	90                   	nop

c00195d2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00195d2:	55                   	push   ebp
c00195d3:	57                   	push   edi
c00195d4:	56                   	push   esi
c00195d5:	53                   	push   ebx
c00195d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00195dc:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00195e3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00195ea:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00195f1:	85 db                	test   ebx,ebx
c00195f3:	0f 84 e4 00 00 00    	je     c00196dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00195f9:	85 ed                	test   ebp,ebp
c00195fb:	0f 84 dc 00 00 00    	je     c00196dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019601:	83 ec 0c             	sub    esp,0xc
c0019604:	68 13 14 02 c0       	push   0xc0021413
c0019609:	e8 d8 13 ff ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001960e:	89 d8                	mov    eax,ebx
c0019610:	b9 02 00 00 00       	mov    ecx,0x2
c0019615:	99                   	cdq    
c0019616:	f7 f9                	idiv   ecx
c0019618:	83 e8 32             	sub    eax,0x32
c001961b:	89 04 24             	mov    DWORD PTR [esp],eax
c001961e:	e8 d1 d0 fe ff       	call   c00066f4 <iso_readdir>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	85 c0                	test   eax,eax
c0019628:	89 c3                	mov    ebx,eax
c001962a:	75 38                	jne    c0019664 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001962c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019631:	53                   	push   ebx
c0019632:	53                   	push   ebx
c0019633:	68 1e 14 02 c0       	push   0xc002141e
c0019638:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001963e:	e8 e5 f3 fe ff       	call   c0008a28 <VgaText::puts(char const*)>
c0019643:	83 c4 0c             	add    esp,0xc
c0019646:	68 10 01 00 00       	push   0x110
c001964b:	6a 00                	push   0x0
c001964d:	57                   	push   edi
c001964e:	e8 9d 6e fe ff       	call   c00004f0 <memset>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	b8 01 00 00 00       	mov    eax,0x1
c001965b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019662:	eb 7e                	jmp    c00196e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019664:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001966a:	8d 70 08             	lea    esi,[eax+0x8]
c001966d:	83 ec 0c             	sub    esp,0xc
c0019670:	56                   	push   esi
c0019671:	e8 1a 6f fe ff       	call   c0000590 <strlen>
c0019676:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001967e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019682:	83 c4 10             	add    esp,0x10
c0019685:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019689:	75 0a                	jne    c0019695 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001968b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001968e:	b8 02 00 00 00       	mov    eax,0x2
c0019693:	74 05                	je     c001969a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019695:	b8 01 00 00 00       	mov    eax,0x1
c001969a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001969e:	50                   	push   eax
c001969f:	50                   	push   eax
c00196a0:	56                   	push   esi
c00196a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196a5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00196a9:	50                   	push   eax
c00196aa:	e8 e1 6f fe ff       	call   c0000690 <strcpy>
c00196af:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00196b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00196b8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00196bf:	5a                   	pop    edx
c00196c0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00196c5:	59                   	pop    ecx
c00196c6:	68 31 14 02 c0       	push   0xc0021431
c00196cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00196d1:	e8 52 f3 fe ff       	call   c0008a28 <VgaText::puts(char const*)>
c00196d6:	83 c4 10             	add    esp,0x10
c00196d9:	31 c0                	xor    eax,eax
c00196db:	eb 05                	jmp    c00196e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00196dd:	b8 04 00 00 00       	mov    eax,0x4
c00196e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00196e8:	5b                   	pop    ebx
c00196e9:	5e                   	pop    esi
c00196ea:	5f                   	pop    edi
c00196eb:	5d                   	pop    ebp
c00196ec:	c3                   	ret    

c00196ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00196ed:	57                   	push   edi
c00196ee:	56                   	push   esi
c00196ef:	53                   	push   ebx
c00196f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196f4:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00196fa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196fe:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0019702:	75 08                	jne    c001970c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019704:	38 1d 84 1f 02 c0    	cmp    BYTE PTR ds:0xc0021f84,bl
c001970a:	74 4a                	je     c0019756 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	31 d2                	xor    edx,edx
c0019711:	68 40 83 02 c0       	push   0xc0028340
c0019716:	0f be c3             	movsx  eax,bl
c0019719:	6a 01                	push   0x1
c001971b:	52                   	push   edx
c001971c:	56                   	push   esi
c001971d:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c0019724:	e8 ef 39 ff ff       	call   c000d118 <LogicalDisk::read(unsigned long long, int, void*)>
c0019729:	83 c4 20             	add    esp,0x20
c001972c:	85 c0                	test   eax,eax
c001972e:	75 0e                	jne    c001973e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0019730:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019736:	88 1d 84 1f 02 c0    	mov    BYTE PTR ds:0xc0021f84,bl
c001973c:	eb 18                	jmp    c0019756 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001973e:	50                   	push   eax
c001973f:	68 00 08 00 00       	push   0x800
c0019744:	6a 00                	push   0x0
c0019746:	57                   	push   edi
c0019747:	e8 a4 6d fe ff       	call   c00004f0 <memset>
c001974c:	83 c4 10             	add    esp,0x10
c001974f:	b8 01 00 00 00       	mov    eax,0x1
c0019754:	eb 0e                	jmp    c0019764 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019756:	be 40 83 02 c0       	mov    esi,0xc0028340
c001975b:	b9 00 08 00 00       	mov    ecx,0x800
c0019760:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019762:	31 c0                	xor    eax,eax
c0019764:	5b                   	pop    ebx
c0019765:	5e                   	pop    esi
c0019766:	5f                   	pop    edi
c0019767:	c3                   	ret    

c0019768 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019768:	53                   	push   ebx
c0019769:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001976f:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019779:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c0019780:	80 c3 41             	add    bl,0x41
c0019783:	0f be db             	movsx  ebx,bl
c0019786:	53                   	push   ebx
c0019787:	8d 44 24 08          	lea    eax,[esp+0x8]
c001978b:	50                   	push   eax
c001978c:	6a 10                	push   0x10
c001978e:	e8 5a ff ff ff       	call   c00196ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	31 d2                	xor    edx,edx
c0019798:	85 c0                	test   eax,eax
c001979a:	75 33                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001979c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00197a1:	75 2c                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197a3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00197a8:	75 25                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197aa:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00197af:	75 1e                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197b1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00197b6:	75 17                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197b8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00197bd:	75 10                	jne    c00197cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197bf:	83 ec 0c             	sub    esp,0xc
c00197c2:	53                   	push   ebx
c00197c3:	e8 a7 d1 fe ff       	call   c000696f <init_percd>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	40                   	inc    eax
c00197cc:	0f 95 c2             	setne  dl
c00197cf:	81 c4 08 08 00 00    	add    esp,0x808
c00197d5:	88 d0                	mov    al,dl
c00197d7:	5b                   	pop    ebx
c00197d8:	c3                   	ret    
c00197d9:	90                   	nop

c00197da <ISO9660::ISO9660()>:
c00197da:	83 ec 1c             	sub    esp,0x1c
c00197dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00197e4:	e8 2b 15 ff ff       	call   c000ad14 <Filesystem::Filesystem()>
c00197e9:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c00197ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f2:	89 10                	mov    DWORD PTR [eax],edx
c00197f4:	e8 88 d2 fe ff       	call   c0006a81 <fs_iso9660_init>
c00197f9:	90                   	nop
c00197fa:	83 c4 1c             	add    esp,0x1c
c00197fd:	c3                   	ret    

c00197fe <SoundCard::beginPlayback()>:
c00197fe:	c7 44 24 04 ac 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ac
c0019806:	e9 2a 6f ff ff       	jmp    c0010735 <KePanic(char const*)>
c001980b:	90                   	nop

c001980c <SoundCard::stopPlayback()>:
c001980c:	c7 44 24 04 ac 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ac
c0019814:	e9 1c 6f ff ff       	jmp    c0010735 <KePanic(char const*)>
c0019819:	90                   	nop

c001981a <SoundCard::SoundCard(char const*)>:
c001981a:	83 ec 2c             	sub    esp,0x2c
c001981d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019821:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019825:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019829:	89 04 24             	mov    DWORD PTR [esp],eax
c001982c:	e8 79 27 ff ff       	call   c000bfaa <Device::Device(char const*)>
c0019831:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c0019836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001983a:	89 10                	mov    DWORD PTR [eax],edx
c001983c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019840:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001984b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019859:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019863:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019867:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019875:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001987f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019887:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c001988c:	7f 19                	jg     c00198a7 <SoundCard::SoundCard(char const*)+0x8d>
c001988e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019896:	83 c2 54             	add    edx,0x54
c0019899:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00198a1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00198a5:	eb e0                	jmp    c0019887 <SoundCard::SoundCard(char const*)+0x6d>
c00198a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198ab:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00198b2:	90                   	nop
c00198b3:	83 c4 2c             	add    esp,0x2c
c00198b6:	c3                   	ret    
c00198b7:	90                   	nop

c00198b8 <SoundCard::~SoundCard()>:
c00198b8:	83 ec 1c             	sub    esp,0x1c
c00198bb:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c00198c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198c4:	89 10                	mov    DWORD PTR [eax],edx
c00198c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00198cd:	e8 44 24 ff ff       	call   c000bd16 <Device::~Device()>
c00198d2:	90                   	nop
c00198d3:	83 c4 1c             	add    esp,0x1c
c00198d6:	c3                   	ret    
c00198d7:	90                   	nop

c00198d8 <SoundCard::~SoundCard()>:
c00198d8:	83 ec 1c             	sub    esp,0x1c
c00198db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198df:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e2:	e8 d1 ff ff ff       	call   c00198b8 <SoundCard::~SoundCard()>
c00198e7:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c00198ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f6:	e8 d1 0f ff ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c00198fb:	83 c4 1c             	add    esp,0x1c
c00198fe:	c3                   	ret    
c00198ff:	90                   	nop

c0019900 <SoundCard::configureRates(int, int, int)>:
c0019900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019904:	31 c0                	xor    eax,eax
c0019906:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001990d:	75 20                	jne    c001992f <SoundCard::configureRates(int, int, int)+0x2f>
c001990f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019913:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001991d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019927:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001992d:	b0 01                	mov    al,0x1
c001992f:	c3                   	ret    

c0019930 <SoundCard::getSamples16(int, short*)>:
c0019930:	55                   	push   ebp
c0019931:	57                   	push   edi
c0019932:	31 ff                	xor    edi,edi
c0019934:	56                   	push   esi
c0019935:	53                   	push   ebx
c0019936:	31 db                	xor    ebx,ebx
c0019938:	83 ec 10             	sub    esp,0x10
c001993b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001993f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019943:	8d 04 36             	lea    eax,[esi+esi*1]
c0019946:	50                   	push   eax
c0019947:	6a 00                	push   0x0
c0019949:	55                   	push   ebp
c001994a:	e8 a1 6b fe ff       	call   c00004f0 <memset>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019956:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001995d:	85 c0                	test   eax,eax
c001995f:	74 1a                	je     c001997b <SoundCard::getSamples16(int, short*)+0x4b>
c0019961:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019965:	75 14                	jne    c001997b <SoundCard::getSamples16(int, short*)+0x4b>
c0019967:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001996b:	55                   	push   ebp
c001996c:	56                   	push   esi
c001996d:	50                   	push   eax
c001996e:	e8 e5 02 00 00       	call   c0019c58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019973:	83 c4 10             	add    esp,0x10
c0019976:	39 c3                	cmp    ebx,eax
c0019978:	0f 4c d8             	cmovl  ebx,eax
c001997b:	47                   	inc    edi
c001997c:	83 ff 20             	cmp    edi,0x20
c001997f:	75 d1                	jne    c0019952 <SoundCard::getSamples16(int, short*)+0x22>
c0019981:	83 c4 0c             	add    esp,0xc
c0019984:	89 d8                	mov    eax,ebx
c0019986:	5b                   	pop    ebx
c0019987:	5e                   	pop    esi
c0019988:	5f                   	pop    edi
c0019989:	5d                   	pop    ebp
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <SoundCard::getSamples32(int, int*)>:
c001998c:	55                   	push   ebp
c001998d:	57                   	push   edi
c001998e:	31 ff                	xor    edi,edi
c0019990:	56                   	push   esi
c0019991:	31 f6                	xor    esi,esi
c0019993:	53                   	push   ebx
c0019994:	83 ec 10             	sub    esp,0x10
c0019997:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001999b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001999f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00199a3:	c1 e0 02             	shl    eax,0x2
c00199a6:	50                   	push   eax
c00199a7:	6a 00                	push   0x0
c00199a9:	55                   	push   ebp
c00199aa:	e8 41 6b fe ff       	call   c00004f0 <memset>
c00199af:	83 c4 10             	add    esp,0x10
c00199b2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00199b9:	85 c0                	test   eax,eax
c00199bb:	74 1a                	je     c00199d7 <SoundCard::getSamples32(int, int*)+0x4b>
c00199bd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00199c1:	75 14                	jne    c00199d7 <SoundCard::getSamples32(int, int*)+0x4b>
c00199c3:	53                   	push   ebx
c00199c4:	55                   	push   ebp
c00199c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199c9:	50                   	push   eax
c00199ca:	e8 45 03 00 00       	call   c0019d14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00199cf:	83 c4 10             	add    esp,0x10
c00199d2:	39 c6                	cmp    esi,eax
c00199d4:	0f 4c f0             	cmovl  esi,eax
c00199d7:	47                   	inc    edi
c00199d8:	83 ff 20             	cmp    edi,0x20
c00199db:	75 d5                	jne    c00199b2 <SoundCard::getSamples32(int, int*)+0x26>
c00199dd:	85 f6                	test   esi,esi
c00199df:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00199e5:	75 0f                	jne    c00199f6 <SoundCard::getSamples32(int, int*)+0x6a>
c00199e7:	84 c0                	test   al,al
c00199e9:	74 1b                	je     c0019a06 <SoundCard::getSamples32(int, int*)+0x7a>
c00199eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ed:	83 ec 0c             	sub    esp,0xc
c00199f0:	53                   	push   ebx
c00199f1:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00199f4:	eb 0d                	jmp    c0019a03 <SoundCard::getSamples32(int, int*)+0x77>
c00199f6:	84 c0                	test   al,al
c00199f8:	75 0c                	jne    c0019a06 <SoundCard::getSamples32(int, int*)+0x7a>
c00199fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199fc:	83 ec 0c             	sub    esp,0xc
c00199ff:	53                   	push   ebx
c0019a00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	83 c4 0c             	add    esp,0xc
c0019a09:	89 f0                	mov    eax,esi
c0019a0b:	5b                   	pop    ebx
c0019a0c:	5e                   	pop    esi
c0019a0d:	5f                   	pop    edi
c0019a0e:	5d                   	pop    ebp
c0019a0f:	c3                   	ret    

c0019a10 <SoundCard::addChannel(SoundPort*)>:
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	31 c0                	xor    eax,eax
c0019a15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a19:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019a21:	74 1b                	je     c0019a3e <SoundCard::addChannel(SoundPort*)+0x2e>
c0019a23:	40                   	inc    eax
c0019a24:	83 f8 20             	cmp    eax,0x20
c0019a27:	75 f0                	jne    c0019a19 <SoundCard::addChannel(SoundPort*)+0x9>
c0019a29:	83 ec 0c             	sub    esp,0xc
c0019a2c:	68 d1 14 02 c0       	push   0xc00214d1
c0019a31:	e8 ff 6c ff ff       	call   c0010735 <KePanic(char const*)>
c0019a36:	83 c4 10             	add    esp,0x10
c0019a39:	83 c8 ff             	or     eax,0xffffffff
c0019a3c:	eb 0b                	jmp    c0019a49 <SoundCard::addChannel(SoundPort*)+0x39>
c0019a3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019a42:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019a49:	83 c4 0c             	add    esp,0xc
c0019a4c:	c3                   	ret    
c0019a4d:	90                   	nop

c0019a4e <SoundCard::removeChannel(int)>:
c0019a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a56:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019a61:	c3                   	ret    
c0019a62:	66 90                	xchg   ax,ax

c0019a64 <SoundPort::SoundPort(int, int, int, int)>:
c0019a64:	83 ec 1c             	sub    esp,0x1c
c0019a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a76:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019a82:	89 10                	mov    DWORD PTR [eax],edx
c0019a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019a8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a93:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019a97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019a9a:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0019a9f:	75 13                	jne    c0019ab4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aa7:	05 a0 0f 00 00       	add    eax,0xfa0
c0019aac:	01 c0                	add    eax,eax
c0019aae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019ab2:	66 90                	xchg   ax,ax
c0019ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ab8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019abc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ace:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019ad1:	c1 e0 02             	shl    eax,0x2
c0019ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ad7:	e8 8a df fe ff       	call   c0007a66 <malloc>
c0019adc:	89 c2                	mov    edx,eax
c0019ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019ae5:	90                   	nop
c0019ae6:	83 c4 1c             	add    esp,0x1c
c0019ae9:	c3                   	ret    
c0019aea:	66 90                	xchg   ax,ax

c0019aec <SoundPort::~SoundPort()>:
c0019aec:	83 ec 1c             	sub    esp,0x1c
c0019aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019af6:	85 c0                	test   eax,eax
c0019af8:	74 1a                	je     c0019b14 <SoundPort::~SoundPort()+0x28>
c0019afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019b01:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b04:	e8 70 df fe ff       	call   c0007a79 <free>
c0019b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b0d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019b14:	90                   	nop
c0019b15:	83 c4 1c             	add    esp,0x1c
c0019b18:	c3                   	ret    
c0019b19:	90                   	nop
c0019b1a:	66 90                	xchg   ax,ax

c0019b1c <SoundPort::unpause()>:
c0019b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b20:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019b24:	c3                   	ret    
c0019b25:	90                   	nop
c0019b26:	66 90                	xchg   ax,ax

c0019b28 <SoundPort::pause()>:
c0019b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019b30:	c3                   	ret    
c0019b31:	90                   	nop
c0019b32:	66 90                	xchg   ax,ax

c0019b34 <SoundPort::getBufferUsed()>:
c0019b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019b3b:	c3                   	ret    

c0019b3c <SoundPort::getBufferSize()>:
c0019b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b40:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019b43:	c3                   	ret    

c0019b44 <SoundPort::buffer16(short*, int)>:
c0019b44:	55                   	push   ebp
c0019b45:	57                   	push   edi
c0019b46:	56                   	push   esi
c0019b47:	53                   	push   ebx
c0019b48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b4c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019b50:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019b53:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019b56:	74 68                	je     c0019bc0 <SoundPort::buffer16(short*, int)+0x7c>
c0019b58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b5c:	85 c9                	test   ecx,ecx
c0019b5e:	7e 60                	jle    c0019bc0 <SoundPort::buffer16(short*, int)+0x7c>
c0019b60:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019b64:	8d 70 01             	lea    esi,[eax+0x1]
c0019b67:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019b6a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019b6d:	c1 e1 0f             	shl    ecx,0xf
c0019b70:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019b73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019b76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019b79:	74 4d                	je     c0019bc8 <SoundPort::buffer16(short*, int)+0x84>
c0019b7b:	31 f6                	xor    esi,esi
c0019b7d:	eb 21                	jmp    c0019ba0 <SoundPort::buffer16(short*, int)+0x5c>
c0019b7f:	90                   	nop
c0019b80:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019b85:	8d 79 01             	lea    edi,[ecx+0x1]
c0019b88:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019b8b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019b8e:	c1 e3 0f             	shl    ebx,0xf
c0019b91:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019b94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019b97:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019b9a:	74 1c                	je     c0019bb8 <SoundPort::buffer16(short*, int)+0x74>
c0019b9c:	89 c6                	mov    esi,eax
c0019b9e:	66 90                	xchg   ax,ax
c0019ba0:	8d 46 01             	lea    eax,[esi+0x1]
c0019ba3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019ba7:	75 d7                	jne    c0019b80 <SoundPort::buffer16(short*, int)+0x3c>
c0019ba9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bad:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb0:	5b                   	pop    ebx
c0019bb1:	5e                   	pop    esi
c0019bb2:	5f                   	pop    edi
c0019bb3:	5d                   	pop    ebp
c0019bb4:	c3                   	ret    
c0019bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb8:	5b                   	pop    ebx
c0019bb9:	8d 46 02             	lea    eax,[esi+0x2]
c0019bbc:	5e                   	pop    esi
c0019bbd:	5f                   	pop    edi
c0019bbe:	5d                   	pop    ebp
c0019bbf:	c3                   	ret    
c0019bc0:	5b                   	pop    ebx
c0019bc1:	31 c0                	xor    eax,eax
c0019bc3:	5e                   	pop    esi
c0019bc4:	5f                   	pop    edi
c0019bc5:	5d                   	pop    ebp
c0019bc6:	c3                   	ret    
c0019bc7:	90                   	nop
c0019bc8:	b8 01 00 00 00       	mov    eax,0x1
c0019bcd:	eb e1                	jmp    c0019bb0 <SoundPort::buffer16(short*, int)+0x6c>
c0019bcf:	90                   	nop

c0019bd0 <SoundPort::buffer32(int*, int)>:
c0019bd0:	55                   	push   ebp
c0019bd1:	57                   	push   edi
c0019bd2:	56                   	push   esi
c0019bd3:	53                   	push   ebx
c0019bd4:	83 ec 04             	sub    esp,0x4
c0019bd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019be3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019be6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bec:	74 5a                	je     c0019c48 <SoundPort::buffer32(int*, int)+0x78>
c0019bee:	85 c0                	test   eax,eax
c0019bf0:	7e 56                	jle    c0019c48 <SoundPort::buffer32(int*, int)+0x78>
c0019bf2:	8d 71 01             	lea    esi,[ecx+0x1]
c0019bf5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019bf8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019bfb:	8b 37                	mov    esi,DWORD PTR [edi]
c0019bfd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019c00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c03:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c06:	74 48                	je     c0019c50 <SoundPort::buffer32(int*, int)+0x80>
c0019c08:	31 f6                	xor    esi,esi
c0019c0a:	eb 1c                	jmp    c0019c28 <SoundPort::buffer32(int*, int)+0x58>
c0019c0c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019c0f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019c12:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019c15:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019c18:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019c1c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c1f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c22:	74 18                	je     c0019c3c <SoundPort::buffer32(int*, int)+0x6c>
c0019c24:	89 de                	mov    esi,ebx
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019c2b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019c2e:	75 dc                	jne    c0019c0c <SoundPort::buffer32(int*, int)+0x3c>
c0019c30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019c33:	90                   	nop
c0019c34:	5a                   	pop    edx
c0019c35:	5b                   	pop    ebx
c0019c36:	5e                   	pop    esi
c0019c37:	5f                   	pop    edi
c0019c38:	5d                   	pop    ebp
c0019c39:	c3                   	ret    
c0019c3a:	66 90                	xchg   ax,ax
c0019c3c:	5a                   	pop    edx
c0019c3d:	8d 46 02             	lea    eax,[esi+0x2]
c0019c40:	5b                   	pop    ebx
c0019c41:	5e                   	pop    esi
c0019c42:	5f                   	pop    edi
c0019c43:	5d                   	pop    ebp
c0019c44:	c3                   	ret    
c0019c45:	8d 76 00             	lea    esi,[esi+0x0]
c0019c48:	5a                   	pop    edx
c0019c49:	31 c0                	xor    eax,eax
c0019c4b:	5b                   	pop    ebx
c0019c4c:	5e                   	pop    esi
c0019c4d:	5f                   	pop    edi
c0019c4e:	5d                   	pop    ebp
c0019c4f:	c3                   	ret    
c0019c50:	b8 01 00 00 00       	mov    eax,0x1
c0019c55:	eb dd                	jmp    c0019c34 <SoundPort::buffer32(int*, int)+0x64>
c0019c57:	90                   	nop

c0019c58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019c58:	55                   	push   ebp
c0019c59:	57                   	push   edi
c0019c5a:	56                   	push   esi
c0019c5b:	53                   	push   ebx
c0019c5c:	83 ec 1c             	sub    esp,0x1c
c0019c5f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019c63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019c67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019c6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019c6f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019c75:	39 03                	cmp    DWORD PTR [ebx],eax
c0019c77:	74 0f                	je     c0019c88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c0019c79:	c7 04 24 24 15 02 c0 	mov    DWORD PTR [esp],0xc0021524
c0019c80:	e8 b0 6a ff ff       	call   c0010735 <KePanic(char const*)>
c0019c85:	8d 76 00             	lea    esi,[esi+0x0]
c0019c88:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019c8e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019c91:	74 0d                	je     c0019ca0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019c93:	c7 04 24 63 15 02 c0 	mov    DWORD PTR [esp],0xc0021563
c0019c9a:	e8 96 6a ff ff       	call   c0010735 <KePanic(char const*)>
c0019c9f:	90                   	nop
c0019ca0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019ca6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019ca9:	74 0d                	je     c0019cb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019cab:	c7 04 24 63 15 02 c0 	mov    DWORD PTR [esp],0xc0021563
c0019cb2:	e8 7e 6a ff ff       	call   c0010735 <KePanic(char const*)>
c0019cb7:	90                   	nop
c0019cb8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019cbb:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019cbf:	85 f6                	test   esi,esi
c0019cc1:	7e 25                	jle    c0019ce8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019cc3:	31 c0                	xor    eax,eax
c0019cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019ccb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019cce:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019cd4:	85 c9                	test   ecx,ecx
c0019cd6:	0f 49 d1             	cmovns edx,ecx
c0019cd9:	c1 fa 0f             	sar    edx,0xf
c0019cdc:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c0019ce0:	40                   	inc    eax
c0019ce1:	39 f0                	cmp    eax,esi
c0019ce3:	75 e3                	jne    c0019cc8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ceb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019cee:	29 f0                	sub    eax,esi
c0019cf0:	89 14 24             	mov    DWORD PTR [esp],edx
c0019cf3:	c1 e0 02             	shl    eax,0x2
c0019cf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cfa:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019cfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d01:	e8 ca 66 fe ff       	call   c00003d0 <memmove>
c0019d06:	89 f0                	mov    eax,esi
c0019d08:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019d0b:	83 c4 1c             	add    esp,0x1c
c0019d0e:	5b                   	pop    ebx
c0019d0f:	5e                   	pop    esi
c0019d10:	5f                   	pop    edi
c0019d11:	5d                   	pop    ebp
c0019d12:	c3                   	ret    
c0019d13:	90                   	nop

c0019d14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019d14:	55                   	push   ebp
c0019d15:	57                   	push   edi
c0019d16:	56                   	push   esi
c0019d17:	53                   	push   ebx
c0019d18:	83 ec 1c             	sub    esp,0x1c
c0019d1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019d27:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019d2b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019d31:	39 03                	cmp    DWORD PTR [ebx],eax
c0019d33:	74 0f                	je     c0019d44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c0019d35:	c7 04 24 44 15 02 c0 	mov    DWORD PTR [esp],0xc0021544
c0019d3c:	e8 f4 69 ff ff       	call   c0010735 <KePanic(char const*)>
c0019d41:	8d 76 00             	lea    esi,[esi+0x0]
c0019d44:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019d4a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019d4d:	74 0d                	je     c0019d5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019d4f:	c7 04 24 7f 15 02 c0 	mov    DWORD PTR [esp],0xc002157f
c0019d56:	e8 da 69 ff ff       	call   c0010735 <KePanic(char const*)>
c0019d5b:	90                   	nop
c0019d5c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019d62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019d65:	74 0d                	je     c0019d74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c0019d67:	c7 04 24 7f 15 02 c0 	mov    DWORD PTR [esp],0xc002157f
c0019d6e:	e8 c2 69 ff ff       	call   c0010735 <KePanic(char const*)>
c0019d73:	90                   	nop
c0019d74:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019d77:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019d7b:	85 ff                	test   edi,edi
c0019d7d:	7e 19                	jle    c0019d98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019d7f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019d86:	31 c0                	xor    eax,eax
c0019d88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d8b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019d8e:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019d91:	83 c0 04             	add    eax,0x4
c0019d94:	39 c1                	cmp    ecx,eax
c0019d96:	75 f0                	jne    c0019d88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019d98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019d9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d9e:	29 f8                	sub    eax,edi
c0019da0:	89 14 24             	mov    DWORD PTR [esp],edx
c0019da3:	c1 e0 02             	shl    eax,0x2
c0019da6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019daa:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019dad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019db1:	e8 1a 66 fe ff       	call   c00003d0 <memmove>
c0019db6:	89 f8                	mov    eax,edi
c0019db8:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019dbb:	83 c4 1c             	add    esp,0x1c
c0019dbe:	5b                   	pop    ebx
c0019dbf:	5e                   	pop    esi
c0019dc0:	5f                   	pop    edi
c0019dc1:	5d                   	pop    ebp
c0019dc2:	c3                   	ret    
c0019dc3:	90                   	nop

c0019dc4 <PCI::open(int, int, void*)>:
c0019dc4:	83 ec 18             	sub    esp,0x18
c0019dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019dcf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019dd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dd7:	50                   	push   eax
c0019dd8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019ddb:	31 c0                	xor    eax,eax
c0019ddd:	83 c4 1c             	add    esp,0x1c
c0019de0:	c3                   	ret    
c0019de1:	90                   	nop

c0019de2 <PCI::close(int, int, void*)>:
c0019de2:	31 c0                	xor    eax,eax
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop

c0019de6 <PCI::PCI()>:
c0019de6:	83 ec 1c             	sub    esp,0x1c
c0019de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ded:	c7 44 24 04 9b 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002159b
c0019df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019df8:	e8 7f 19 ff ff       	call   c000b77c <Bus::Bus(char const*)>
c0019dfd:	ba 44 16 02 c0       	mov    edx,0xc0021644
c0019e02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e06:	89 10                	mov    DWORD PTR [eax],edx
c0019e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e0c:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e1a:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e23:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e2a:	0f b6 d0             	movzx  edx,al
c0019e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e31:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e43:	0f b6 d0             	movzx  edx,al
c0019e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e4a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e53:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e5a:	88 c1                	mov    cl,al
c0019e5c:	fe c1                	inc    cl
c0019e5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019e62:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0019e68:	0f b6 d0             	movzx  edx,al
c0019e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e6f:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0019e74:	80 c9 c0             	or     cl,0xc0
c0019e77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019e7b:	90                   	nop
c0019e7c:	83 c4 1c             	add    esp,0x1c
c0019e7f:	c3                   	ret    

c0019e80 <PCI::readBAR8(unsigned int, int)>:
c0019e80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e88:	f6 c2 01             	test   dl,0x1
c0019e8b:	74 07                	je     c0019e94 <PCI::readBAR8(unsigned int, int)+0x14>
c0019e8d:	83 e2 fc             	and    edx,0xfffffffc
c0019e90:	01 c2                	add    edx,eax
c0019e92:	ec                   	in     al,dx
c0019e93:	c3                   	ret    
c0019e94:	83 e2 f0             	and    edx,0xfffffff0
c0019e97:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019e9a:	c3                   	ret    
c0019e9b:	90                   	nop

c0019e9c <PCI::readBAR16(unsigned int, int)>:
c0019e9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ea4:	f6 c2 01             	test   dl,0x1
c0019ea7:	74 0b                	je     c0019eb4 <PCI::readBAR16(unsigned int, int)+0x18>
c0019ea9:	83 e2 fc             	and    edx,0xfffffffc
c0019eac:	01 c2                	add    edx,eax
c0019eae:	66 ed                	in     ax,dx
c0019eb0:	0f b7 c0             	movzx  eax,ax
c0019eb3:	c3                   	ret    
c0019eb4:	83 e2 f0             	and    edx,0xfffffff0
c0019eb7:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c0019ebb:	c3                   	ret    

c0019ebc <PCI::readBAR32(unsigned int, int)>:
c0019ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ec0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ec4:	f6 c2 01             	test   dl,0x1
c0019ec7:	74 07                	je     c0019ed0 <PCI::readBAR32(unsigned int, int)+0x14>
c0019ec9:	83 e2 fc             	and    edx,0xfffffffc
c0019ecc:	01 c2                	add    edx,eax
c0019ece:	ed                   	in     eax,dx
c0019ecf:	c3                   	ret    
c0019ed0:	83 e2 f0             	and    edx,0xfffffff0
c0019ed3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019ed6:	c3                   	ret    
c0019ed7:	90                   	nop

c0019ed8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019ed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019edc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ee0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ee4:	f6 c2 01             	test   dl,0x1
c0019ee7:	74 07                	je     c0019ef0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019ee9:	83 e2 fc             	and    edx,0xfffffffc
c0019eec:	01 ca                	add    edx,ecx
c0019eee:	ee                   	out    dx,al
c0019eef:	c3                   	ret    
c0019ef0:	83 e2 f0             	and    edx,0xfffffff0
c0019ef3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019efc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f00:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0019f05:	f6 c2 01             	test   dl,0x1
c0019f08:	74 08                	je     c0019f12 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c0019f0a:	83 e2 fc             	and    edx,0xfffffffc
c0019f0d:	01 ca                	add    edx,ecx
c0019f0f:	66 ef                	out    dx,ax
c0019f11:	c3                   	ret    
c0019f12:	83 e2 f0             	and    edx,0xfffffff0
c0019f15:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019f19:	c3                   	ret    

c0019f1a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019f1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f26:	f6 c2 01             	test   dl,0x1
c0019f29:	74 07                	je     c0019f32 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019f2b:	83 e2 fc             	and    edx,0xfffffffc
c0019f2e:	01 ca                	add    edx,ecx
c0019f30:	ef                   	out    dx,eax
c0019f31:	c3                   	ret    
c0019f32:	83 e2 f0             	and    edx,0xfffffff0
c0019f35:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019f38:	c3                   	ret    
c0019f39:	90                   	nop

c0019f3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019f3a:	53                   	push   ebx
c0019f3b:	83 ec 18             	sub    esp,0x18
c0019f3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f42:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019f46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f4a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019f4e:	80 fb 07             	cmp    bl,0x7
c0019f51:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019f55:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019f59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f5d:	76 10                	jbe    c0019f6f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c0019f5f:	83 ec 0c             	sub    esp,0xc
c0019f62:	68 a3 15 02 c0       	push   0xc00215a3
c0019f67:	e8 c9 67 ff ff       	call   c0010735 <KePanic(char const*)>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c0019f74:	76 10                	jbe    c0019f86 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c0019f76:	83 ec 0c             	sub    esp,0xc
c0019f79:	68 d3 15 02 c0       	push   0xc00215d3
c0019f7e:	e8 b2 67 ff ff       	call   c0010735 <KePanic(char const*)>
c0019f83:	83 c4 10             	add    esp,0x10
c0019f86:	88 d8                	mov    al,bl
c0019f88:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019f8d:	00 c0                	add    al,al
c0019f8f:	0c f0                	or     al,0xf0
c0019f91:	ee                   	out    dx,al
c0019f92:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019f97:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0019f9b:	ee                   	out    dx,al
c0019f9c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019fa1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0019fa6:	83 c4 18             	add    esp,0x18
c0019fa9:	5b                   	pop    ebx
c0019faa:	c1 e0 08             	shl    eax,0x8
c0019fad:	83 e2 fc             	and    edx,0xfffffffc
c0019fb0:	09 d0                	or     eax,edx
c0019fb2:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0019fb7:	c3                   	ret    

c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019fb8:	57                   	push   edi
c0019fb9:	56                   	push   esi
c0019fba:	53                   	push   ebx
c0019fbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fbf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0019fc4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019fc9:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0019fce:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019fd4:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c0019fd8:	83 ff 01             	cmp    edi,0x1
c0019fdb:	75 3f                	jne    c001a01c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c0019fdd:	c1 e0 10             	shl    eax,0x10
c0019fe0:	c1 e1 08             	shl    ecx,0x8
c0019fe3:	89 c7                	mov    edi,eax
c0019fe5:	c1 e2 0b             	shl    edx,0xb
c0019fe8:	88 d8                	mov    al,bl
c0019fea:	24 fc                	and    al,0xfc
c0019fec:	0f b6 f0             	movzx  esi,al
c0019fef:	89 f8                	mov    eax,edi
c0019ff1:	09 f0                	or     eax,esi
c0019ff3:	09 c8                	or     eax,ecx
c0019ff5:	09 d0                	or     eax,edx
c0019ff7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019ffc:	0d 00 00 00 80       	or     eax,0x80000000
c001a001:	ef                   	out    dx,eax
c001a002:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a007:	ed                   	in     eax,dx
c001a008:	80 e3 02             	and    bl,0x2
c001a00b:	0f b6 db             	movzx  ebx,bl
c001a00e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a015:	d3 e8                	shr    eax,cl
c001a017:	0f b7 c0             	movzx  eax,ax
c001a01a:	eb 41                	jmp    c001a05d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a01c:	83 ff 02             	cmp    edi,0x2
c001a01f:	75 2a                	jne    c001a04b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a021:	83 ec 0c             	sub    esp,0xc
c001a024:	0f b6 fb             	movzx  edi,bl
c001a027:	57                   	push   edi
c001a028:	51                   	push   ecx
c001a029:	52                   	push   edx
c001a02a:	50                   	push   eax
c001a02b:	56                   	push   esi
c001a02c:	e8 09 ff ff ff       	call   c0019f3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a031:	89 c2                	mov    edx,eax
c001a033:	ed                   	in     eax,dx
c001a034:	80 e3 02             	and    bl,0x2
c001a037:	83 c4 20             	add    esp,0x20
c001a03a:	0f b6 db             	movzx  ebx,bl
c001a03d:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a044:	d3 e8                	shr    eax,cl
c001a046:	0f b7 c0             	movzx  eax,ax
c001a049:	eb 12                	jmp    c001a05d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a04b:	83 ec 0c             	sub    esp,0xc
c001a04e:	68 03 16 02 c0       	push   0xc0021603
c001a053:	e8 dd 66 ff ff       	call   c0010735 <KePanic(char const*)>
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	31 c0                	xor    eax,eax
c001a05d:	5b                   	pop    ebx
c001a05e:	5e                   	pop    esi
c001a05f:	5f                   	pop    edi
c001a060:	c3                   	ret    
c001a061:	90                   	nop

c001a062 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a062:	83 ec 18             	sub    esp,0x18
c001a065:	6a 00                	push   0x0
c001a067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a06c:	50                   	push   eax
c001a06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a072:	50                   	push   eax
c001a073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a078:	50                   	push   eax
c001a079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a07d:	e8 36 ff ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a082:	83 c4 2c             	add    esp,0x2c
c001a085:	c3                   	ret    

c001a086 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a086:	83 ec 18             	sub    esp,0x18
c001a089:	6a 0e                	push   0xe
c001a08b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a090:	50                   	push   eax
c001a091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a096:	50                   	push   eax
c001a097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a09c:	50                   	push   eax
c001a09d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0a1:	e8 12 ff ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0a6:	83 c4 2c             	add    esp,0x2c
c001a0a9:	0f b6 c0             	movzx  eax,al
c001a0ac:	c3                   	ret    
c001a0ad:	90                   	nop

c001a0ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a0ae:	55                   	push   ebp
c001a0af:	57                   	push   edi
c001a0b0:	56                   	push   esi
c001a0b1:	53                   	push   ebx
c001a0b2:	83 ec 18             	sub    esp,0x18
c001a0b5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a0ba:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a0bf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a0c4:	6a 0a                	push   0xa
c001a0c6:	56                   	push   esi
c001a0c7:	55                   	push   ebp
c001a0c8:	57                   	push   edi
c001a0c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0cd:	e8 e6 fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0d2:	83 c4 14             	add    esp,0x14
c001a0d5:	6a 0a                	push   0xa
c001a0d7:	56                   	push   esi
c001a0d8:	55                   	push   ebp
c001a0d9:	57                   	push   edi
c001a0da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0de:	0f b7 d8             	movzx  ebx,ax
c001a0e1:	0f b6 db             	movzx  ebx,bl
c001a0e4:	e8 cf fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0e9:	83 c4 2c             	add    esp,0x2c
c001a0ec:	25 00 ff 00 00       	and    eax,0xff00
c001a0f1:	09 d8                	or     eax,ebx
c001a0f3:	5b                   	pop    ebx
c001a0f4:	5e                   	pop    esi
c001a0f5:	5f                   	pop    edi
c001a0f6:	5d                   	pop    ebp
c001a0f7:	c3                   	ret    

c001a0f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a0f8:	83 ec 18             	sub    esp,0x18
c001a0fb:	6a 08                	push   0x8
c001a0fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a102:	50                   	push   eax
c001a103:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a108:	50                   	push   eax
c001a109:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a10e:	50                   	push   eax
c001a10f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a113:	e8 a0 fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a118:	83 c4 2c             	add    esp,0x2c
c001a11b:	0f b6 c4             	movzx  eax,ah
c001a11e:	c3                   	ret    
c001a11f:	90                   	nop

c001a120 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a120:	83 ec 18             	sub    esp,0x18
c001a123:	6a 08                	push   0x8
c001a125:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a12a:	50                   	push   eax
c001a12b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a130:	50                   	push   eax
c001a131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a136:	50                   	push   eax
c001a137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a13b:	e8 78 fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a140:	83 c4 2c             	add    esp,0x2c
c001a143:	0f b7 c0             	movzx  eax,ax
c001a146:	c3                   	ret    
c001a147:	90                   	nop

c001a148 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a148:	83 ec 18             	sub    esp,0x18
c001a14b:	6a 3c                	push   0x3c
c001a14d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a152:	50                   	push   eax
c001a153:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a158:	50                   	push   eax
c001a159:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a15e:	50                   	push   eax
c001a15f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a163:	e8 50 fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a168:	83 c4 2c             	add    esp,0x2c
c001a16b:	0f b7 c0             	movzx  eax,ax
c001a16e:	c3                   	ret    
c001a16f:	90                   	nop

c001a170 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a170:	83 ec 18             	sub    esp,0x18
c001a173:	6a 18                	push   0x18
c001a175:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a17a:	50                   	push   eax
c001a17b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a180:	50                   	push   eax
c001a181:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a186:	50                   	push   eax
c001a187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a18b:	e8 28 fe ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a190:	83 c4 2c             	add    esp,0x2c
c001a193:	0f b6 c4             	movzx  eax,ah
c001a196:	c3                   	ret    
c001a197:	90                   	nop

c001a198 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a198:	55                   	push   ebp
c001a199:	57                   	push   edi
c001a19a:	56                   	push   esi
c001a19b:	53                   	push   ebx
c001a19c:	83 ec 28             	sub    esp,0x28
c001a19f:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a1a3:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a1a8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a1ad:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a1b2:	c0 e3 02             	shl    bl,0x2
c001a1b5:	88 d8                	mov    al,bl
c001a1b7:	80 c3 10             	add    bl,0x10
c001a1ba:	04 12                	add    al,0x12
c001a1bc:	0f b6 db             	movzx  ebx,bl
c001a1bf:	0f b6 c0             	movzx  eax,al
c001a1c2:	50                   	push   eax
c001a1c3:	56                   	push   esi
c001a1c4:	57                   	push   edi
c001a1c5:	55                   	push   ebp
c001a1c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a1ca:	e8 e9 fd ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1cf:	0f b7 c0             	movzx  eax,ax
c001a1d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1d6:	83 c4 14             	add    esp,0x14
c001a1d9:	53                   	push   ebx
c001a1da:	56                   	push   esi
c001a1db:	57                   	push   edi
c001a1dc:	55                   	push   ebp
c001a1dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a1e1:	e8 d2 fd ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1e6:	0f b7 d0             	movzx  edx,ax
c001a1e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a1ed:	83 c4 3c             	add    esp,0x3c
c001a1f0:	5b                   	pop    ebx
c001a1f1:	5e                   	pop    esi
c001a1f2:	c1 e0 10             	shl    eax,0x10
c001a1f5:	09 d0                	or     eax,edx
c001a1f7:	5f                   	pop    edi
c001a1f8:	5d                   	pop    ebp
c001a1f9:	c3                   	ret    

c001a1fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a1fa:	55                   	push   ebp
c001a1fb:	57                   	push   edi
c001a1fc:	56                   	push   esi
c001a1fd:	53                   	push   ebx
c001a1fe:	83 ec 0c             	sub    esp,0xc
c001a201:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a205:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a20a:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a20f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a214:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a21a:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a21f:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a224:	83 fd 01             	cmp    ebp,0x1
c001a227:	75 50                	jne    c001a279 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a229:	c1 e0 08             	shl    eax,0x8
c001a22c:	89 cf                	mov    edi,ecx
c001a22e:	c1 e7 10             	shl    edi,0x10
c001a231:	88 d9                	mov    cl,bl
c001a233:	c1 e2 0b             	shl    edx,0xb
c001a236:	80 e1 fc             	and    cl,0xfc
c001a239:	0f b6 c9             	movzx  ecx,cl
c001a23c:	09 f9                	or     ecx,edi
c001a23e:	09 c1                	or     ecx,eax
c001a240:	09 d1                	or     ecx,edx
c001a242:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a247:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a24d:	89 c8                	mov    eax,ecx
c001a24f:	ef                   	out    dx,eax
c001a250:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a255:	ed                   	in     eax,dx
c001a256:	80 e3 02             	and    bl,0x2
c001a259:	74 08                	je     c001a263 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a25b:	c1 e6 10             	shl    esi,0x10
c001a25e:	0f b7 c0             	movzx  eax,ax
c001a261:	eb 03                	jmp    c001a266 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a263:	66 31 c0             	xor    ax,ax
c001a266:	09 c6                	or     esi,eax
c001a268:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a26d:	89 c8                	mov    eax,ecx
c001a26f:	ef                   	out    dx,eax
c001a270:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a275:	89 f0                	mov    eax,esi
c001a277:	eb 2d                	jmp    c001a2a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a279:	83 fd 02             	cmp    ebp,0x2
c001a27c:	75 31                	jne    c001a2af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a27e:	83 ec 0c             	sub    esp,0xc
c001a281:	53                   	push   ebx
c001a282:	50                   	push   eax
c001a283:	52                   	push   edx
c001a284:	51                   	push   ecx
c001a285:	57                   	push   edi
c001a286:	e8 af fc ff ff       	call   c0019f3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a28b:	0f b7 c8             	movzx  ecx,ax
c001a28e:	89 ca                	mov    edx,ecx
c001a290:	ed                   	in     eax,dx
c001a291:	83 c4 20             	add    esp,0x20
c001a294:	f6 c1 02             	test   cl,0x2
c001a297:	74 08                	je     c001a2a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a299:	c1 e6 10             	shl    esi,0x10
c001a29c:	0f b7 c0             	movzx  eax,ax
c001a29f:	eb 03                	jmp    c001a2a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a2a1:	66 31 c0             	xor    ax,ax
c001a2a4:	09 f0                	or     eax,esi
c001a2a6:	ef                   	out    dx,eax
c001a2a7:	83 c4 0c             	add    esp,0xc
c001a2aa:	5b                   	pop    ebx
c001a2ab:	5e                   	pop    esi
c001a2ac:	5f                   	pop    edi
c001a2ad:	5d                   	pop    ebp
c001a2ae:	c3                   	ret    
c001a2af:	c7 44 24 20 03 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021603
c001a2b7:	83 c4 0c             	add    esp,0xc
c001a2ba:	5b                   	pop    ebx
c001a2bb:	5e                   	pop    esi
c001a2bc:	5f                   	pop    edi
c001a2bd:	5d                   	pop    ebp
c001a2be:	e9 72 64 ff ff       	jmp    c0010735 <KePanic(char const*)>
c001a2c3:	90                   	nop

c001a2c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a2c4:	55                   	push   ebp
c001a2c5:	57                   	push   edi
c001a2c6:	56                   	push   esi
c001a2c7:	53                   	push   ebx
c001a2c8:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a2ce:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a2d5:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a2dc:	0f 85 bd 00 00 00    	jne    c001a39f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	68 14 01 00 00       	push   0x114
c001a2ea:	e8 77 d7 fe ff       	call   c0007a66 <malloc>
c001a2ef:	83 c4 0c             	add    esp,0xc
c001a2f2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a2f8:	68 09 16 02 c0       	push   0xc0021609
c001a2fd:	50                   	push   eax
c001a2fe:	89 c3                	mov    ebx,eax
c001a300:	e8 63 0c ff ff       	call   c000af68 <File::File(char const*, Process*)>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	85 db                	test   ebx,ebx
c001a30a:	0f 84 4c 02 00 00    	je     c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a310:	56                   	push   esi
c001a311:	56                   	push   esi
c001a312:	6a 01                	push   0x1
c001a314:	53                   	push   ebx
c001a315:	e8 0c 0d ff ff       	call   c000b026 <File::open(FileOpenMode)>
c001a31a:	83 c4 10             	add    esp,0x10
c001a31d:	85 c0                	test   eax,eax
c001a31f:	0f 85 37 02 00 00    	jne    c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a325:	52                   	push   edx
c001a326:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001a32a:	50                   	push   eax
c001a32b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a32f:	50                   	push   eax
c001a330:	53                   	push   ebx
c001a331:	e8 96 0f ff ff       	call   c000b2cc <File::stat(unsigned long long*, bool*)>
c001a336:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a33a:	40                   	inc    eax
c001a33b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a33e:	e8 23 d7 fe ff       	call   c0007a66 <malloc>
c001a343:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a347:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a34b:	59                   	pop    ecx
c001a34c:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a351:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a353:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a357:	51                   	push   ecx
c001a358:	50                   	push   eax
c001a359:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a35d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a361:	53                   	push   ebx
c001a362:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a365:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001a369:	83 c4 20             	add    esp,0x20
c001a36c:	89 c8                	mov    eax,ecx
c001a36e:	99                   	cdq    
c001a36f:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001a373:	0f 85 e3 01 00 00    	jne    c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a379:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001a37d:	0f 85 d9 01 00 00    	jne    c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a383:	83 ec 0c             	sub    esp,0xc
c001a386:	53                   	push   ebx
c001a387:	e8 f8 0c ff ff       	call   c000b084 <File::close()>
c001a38c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a39a:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a39f:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001a3a7:	31 db                	xor    ebx,ebx
c001a3a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3b1:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001a3b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3bf:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001a3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3c9:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001a3d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3d5:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001a3dc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a3e0:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001a3e7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a3eb:	39 d9                	cmp    ecx,ebx
c001a3ed:	0f 8e 69 01 00 00    	jle    c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a3f3:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a3f6:	d4 40                	aam    0x40
c001a3f8:	d5 39                	aad    0x39
c001a3fa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a3fe:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001a402:	d4 40                	aam    0x40
c001a404:	d5 39                	aad    0x39
c001a406:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a40a:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001a40e:	d4 40                	aam    0x40
c001a410:	d5 39                	aad    0x39
c001a412:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a416:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001a41a:	d4 40                	aam    0x40
c001a41c:	d5 39                	aad    0x39
c001a41e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a422:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001a426:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001a42a:	3c 56                	cmp    al,0x56
c001a42c:	74 46                	je     c001a474 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001a42e:	d4 40                	aam    0x40
c001a430:	d5 39                	aad    0x39
c001a432:	2c 30                	sub    al,0x30
c001a434:	0f b6 d0             	movzx  edx,al
c001a437:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001a43b:	c1 e2 04             	shl    edx,0x4
c001a43e:	d4 40                	aam    0x40
c001a440:	d5 39                	aad    0x39
c001a442:	2c 30                	sub    al,0x30
c001a444:	0f b6 c0             	movzx  eax,al
c001a447:	09 c2                	or     edx,eax
c001a449:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001a44d:	c1 e2 04             	shl    edx,0x4
c001a450:	d4 40                	aam    0x40
c001a452:	d5 39                	aad    0x39
c001a454:	2c 30                	sub    al,0x30
c001a456:	0f b6 c0             	movzx  eax,al
c001a459:	09 c2                	or     edx,eax
c001a45b:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001a45f:	c1 e2 04             	shl    edx,0x4
c001a462:	0f b7 d2             	movzx  edx,dx
c001a465:	d4 40                	aam    0x40
c001a467:	d5 39                	aad    0x39
c001a469:	2c 30                	sub    al,0x30
c001a46b:	0f b6 c0             	movzx  eax,al
c001a46e:	09 d0                	or     eax,edx
c001a470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a474:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001a478:	80 fa 58             	cmp    dl,0x58
c001a47b:	74 48                	je     c001a4c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001a47d:	88 d0                	mov    al,dl
c001a47f:	d4 40                	aam    0x40
c001a481:	d5 39                	aad    0x39
c001a483:	2c 30                	sub    al,0x30
c001a485:	0f b6 e8             	movzx  ebp,al
c001a488:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001a48c:	c1 e5 04             	shl    ebp,0x4
c001a48f:	d4 40                	aam    0x40
c001a491:	d5 39                	aad    0x39
c001a493:	2c 30                	sub    al,0x30
c001a495:	0f b6 c0             	movzx  eax,al
c001a498:	09 c5                	or     ebp,eax
c001a49a:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001a49e:	c1 e5 04             	shl    ebp,0x4
c001a4a1:	d4 40                	aam    0x40
c001a4a3:	d5 39                	aad    0x39
c001a4a5:	2c 30                	sub    al,0x30
c001a4a7:	0f b6 c0             	movzx  eax,al
c001a4aa:	09 c5                	or     ebp,eax
c001a4ac:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001a4b0:	c1 e5 04             	shl    ebp,0x4
c001a4b3:	0f b7 ed             	movzx  ebp,bp
c001a4b6:	d4 40                	aam    0x40
c001a4b8:	d5 39                	aad    0x39
c001a4ba:	2c 30                	sub    al,0x30
c001a4bc:	0f b6 c0             	movzx  eax,al
c001a4bf:	09 e8                	or     eax,ebp
c001a4c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4c5:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001a4c9:	83 c3 10             	add    ebx,0x10
c001a4cc:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a4cf:	3c 0a                	cmp    al,0xa
c001a4d1:	74 07                	je     c001a4da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001a4d3:	45                   	inc    ebp
c001a4d4:	39 d9                	cmp    ecx,ebx
c001a4d6:	75 15                	jne    c001a4ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001a4d8:	89 cb                	mov    ebx,ecx
c001a4da:	3c 0a                	cmp    al,0xa
c001a4dc:	0f 94 c0             	sete   al
c001a4df:	0f b6 c0             	movzx  eax,al
c001a4e2:	01 c3                	add    ebx,eax
c001a4e4:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001a4e9:	75 0c                	jne    c001a4f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001a4eb:	eb 18                	jmp    c001a505 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a4ed:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a4f0:	43                   	inc    ebx
c001a4f1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a4f5:	eb d5                	jmp    c001a4cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a4f7:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a4fb:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001a4ff:	0f 85 e6 fe ff ff    	jne    c001a3eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a505:	80 fa 58             	cmp    dl,0x58
c001a508:	74 0e                	je     c001a518 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001a50a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a50e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001a512:	0f 85 d3 fe ff ff    	jne    c001a3eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a518:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001a51c:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001a520:	c0 e2 04             	shl    dl,0x4
c001a523:	2c 30                	sub    al,0x30
c001a525:	08 d0                	or     al,dl
c001a527:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001a52b:	0f 85 ba fe ff ff    	jne    c001a3eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a531:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001a535:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a539:	c0 e2 04             	shl    dl,0x4
c001a53c:	2c 30                	sub    al,0x30
c001a53e:	08 d0                	or     al,dl
c001a540:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001a544:	0f 85 a1 fe ff ff    	jne    c001a3eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a54a:	50                   	push   eax
c001a54b:	50                   	push   eax
c001a54c:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a550:	50                   	push   eax
c001a551:	57                   	push   edi
c001a552:	e8 39 61 fe ff       	call   c0000690 <strcpy>
c001a557:	83 c4 10             	add    esp,0x10
c001a55a:	eb 05                	jmp    c001a561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001a55c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a55f:	31 ff                	xor    edi,edi
c001a561:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a567:	89 f8                	mov    eax,edi
c001a569:	5b                   	pop    ebx
c001a56a:	5e                   	pop    esi
c001a56b:	5f                   	pop    edi
c001a56c:	5d                   	pop    ebp
c001a56d:	c3                   	ret    

c001a56e <PCI::checkBus(unsigned char)>:
c001a56e:	56                   	push   esi
c001a56f:	53                   	push   ebx
c001a570:	31 db                	xor    ebx,ebx
c001a572:	51                   	push   ecx
c001a573:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a578:	52                   	push   edx
c001a579:	53                   	push   ebx
c001a57a:	43                   	inc    ebx
c001a57b:	56                   	push   esi
c001a57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a580:	e8 f1 02 00 00       	call   c001a876 <PCI::checkDevice(unsigned char, unsigned char)>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	83 fb 20             	cmp    ebx,0x20
c001a58b:	75 eb                	jne    c001a578 <PCI::checkBus(unsigned char)+0xa>
c001a58d:	58                   	pop    eax
c001a58e:	5b                   	pop    ebx
c001a58f:	5e                   	pop    esi
c001a590:	c3                   	ret    
c001a591:	90                   	nop

c001a592 <PCI::foundDevice(PCIDeviceInfo)>:
c001a592:	55                   	push   ebp
c001a593:	57                   	push   edi
c001a594:	56                   	push   esi
c001a595:	53                   	push   ebx
c001a596:	83 ec 1c             	sub    esp,0x1c
c001a599:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a59e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a5a2:	3d ff ff 00 00       	cmp    eax,0xffff
c001a5a7:	0f 84 54 01 00 00    	je     c001a701 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a5ad:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001a5b2:	81 ff 06 04 00 00    	cmp    edi,0x406
c001a5b8:	75 2c                	jne    c001a5e6 <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001a5ba:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a5bf:	50                   	push   eax
c001a5c0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a5c5:	50                   	push   eax
c001a5c6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a5cb:	50                   	push   eax
c001a5cc:	56                   	push   esi
c001a5cd:	e8 9e fb ff ff       	call   c001a170 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a5d2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a5d6:	0f b6 c0             	movzx  eax,al
c001a5d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5dd:	83 c4 2c             	add    esp,0x2c
c001a5e0:	5b                   	pop    ebx
c001a5e1:	5e                   	pop    esi
c001a5e2:	5f                   	pop    edi
c001a5e3:	5d                   	pop    ebp
c001a5e4:	eb 88                	jmp    c001a56e <PCI::checkBus(unsigned char)>
c001a5e6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a5ea:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a5f0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a5f4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5f8:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001a5fc:	85 c0                	test   eax,eax
c001a5fe:	74 33                	je     c001a633 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a600:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a603:	85 d2                	test   edx,edx
c001a605:	74 28                	je     c001a62f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a607:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001a60d:	31 e9                	xor    ecx,ebp
c001a60f:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001a615:	75 18                	jne    c001a62f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a617:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001a61d:	75 10                	jne    c001a62f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a61f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a623:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001a629:	0f 84 d2 00 00 00    	je     c001a701 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a62f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a631:	eb c9                	jmp    c001a5fc <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001a633:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a637:	81 ff 01 06 00 00    	cmp    edi,0x601
c001a63d:	75 19                	jne    c001a658 <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001a63f:	83 ec 0c             	sub    esp,0xc
c001a642:	68 64 01 00 00       	push   0x164
c001a647:	e8 1a d4 fe ff       	call   c0007a66 <malloc>
c001a64c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a64f:	89 c5                	mov    ebp,eax
c001a651:	e8 36 0e 00 00       	call   c001b48c <SATABus::SATABus()>
c001a656:	eb 1f                	jmp    c001a677 <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001a658:	81 ff 01 01 00 00    	cmp    edi,0x101
c001a65e:	75 60                	jne    c001a6c0 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001a660:	83 ec 0c             	sub    esp,0xc
c001a663:	68 70 02 00 00       	push   0x270
c001a668:	e8 f9 d3 fe ff       	call   c0007a66 <malloc>
c001a66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a670:	89 c5                	mov    ebp,eax
c001a672:	e8 cf 02 00 00       	call   c001a946 <IDE::IDE()>
c001a677:	58                   	pop    eax
c001a678:	5a                   	pop    edx
c001a679:	55                   	push   ebp
c001a67a:	56                   	push   esi
c001a67b:	e8 92 17 ff ff       	call   c000be12 <Device::addChild(Device*)>
c001a680:	83 ec 1c             	sub    esp,0x1c
c001a683:	b9 09 00 00 00       	mov    ecx,0x9
c001a688:	fc                   	cld    
c001a689:	89 e7                	mov    edi,esp
c001a68b:	89 de                	mov    esi,ebx
c001a68d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a68f:	55                   	push   ebp
c001a690:	e8 c5 16 ff ff       	call   c000bd5a <Device::preOpenPCI(PCIDeviceInfo)>
c001a695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a698:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a69c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a6a4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a6ac:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a6b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a6b7:	83 c4 4c             	add    esp,0x4c
c001a6ba:	5b                   	pop    ebx
c001a6bb:	5e                   	pop    esi
c001a6bc:	5f                   	pop    edi
c001a6bd:	5d                   	pop    ebp
c001a6be:	ff e0                	jmp    eax
c001a6c0:	83 ec 0c             	sub    esp,0xc
c001a6c3:	68 58 01 00 00       	push   0x158
c001a6c8:	e8 99 d3 fe ff       	call   c0007a66 <malloc>
c001a6cd:	89 c5                	mov    ebp,eax
c001a6cf:	58                   	pop    eax
c001a6d0:	5a                   	pop    edx
c001a6d1:	68 22 16 02 c0       	push   0xc0021622
c001a6d6:	55                   	push   ebp
c001a6d7:	e8 d2 19 ff ff       	call   c000c0ae <DriverlessDevice::DriverlessDevice(char const*)>
c001a6dc:	59                   	pop    ecx
c001a6dd:	5f                   	pop    edi
c001a6de:	55                   	push   ebp
c001a6df:	56                   	push   esi
c001a6e0:	e8 2d 17 ff ff       	call   c000be12 <Device::addChild(Device*)>
c001a6e5:	b9 09 00 00 00       	mov    ecx,0x9
c001a6ea:	fc                   	cld    
c001a6eb:	89 df                	mov    edi,ebx
c001a6ed:	89 de                	mov    esi,ebx
c001a6ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a6f1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a6f5:	83 c4 2c             	add    esp,0x2c
c001a6f8:	5b                   	pop    ebx
c001a6f9:	5e                   	pop    esi
c001a6fa:	5f                   	pop    edi
c001a6fb:	5d                   	pop    ebp
c001a6fc:	e9 59 16 ff ff       	jmp    c000bd5a <Device::preOpenPCI(PCIDeviceInfo)>
c001a701:	83 c4 1c             	add    esp,0x1c
c001a704:	5b                   	pop    ebx
c001a705:	5e                   	pop    esi
c001a706:	5f                   	pop    edi
c001a707:	5d                   	pop    ebp
c001a708:	c3                   	ret    
c001a709:	90                   	nop

c001a70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a70a:	55                   	push   ebp
c001a70b:	57                   	push   edi
c001a70c:	56                   	push   esi
c001a70d:	53                   	push   ebx
c001a70e:	83 ec 58             	sub    esp,0x58
c001a711:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001a715:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001a71a:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001a71e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001a722:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001a726:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001a72b:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001a72f:	89 f0                	mov    eax,esi
c001a731:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a735:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001a73a:	6a 0c                	push   0xc
c001a73c:	56                   	push   esi
c001a73d:	53                   	push   ebx
c001a73e:	57                   	push   edi
c001a73f:	55                   	push   ebp
c001a740:	e8 73 f8 ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a745:	83 c4 20             	add    esp,0x20
c001a748:	56                   	push   esi
c001a749:	53                   	push   ebx
c001a74a:	57                   	push   edi
c001a74b:	55                   	push   ebp
c001a74c:	e8 5d f9 ff ff       	call   c001a0ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a751:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a756:	56                   	push   esi
c001a757:	53                   	push   ebx
c001a758:	57                   	push   edi
c001a759:	55                   	push   ebp
c001a75a:	e8 e9 f9 ff ff       	call   c001a148 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a75f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a763:	83 c4 14             	add    esp,0x14
c001a766:	6a 3c                	push   0x3c
c001a768:	56                   	push   esi
c001a769:	53                   	push   ebx
c001a76a:	57                   	push   edi
c001a76b:	55                   	push   ebp
c001a76c:	e8 47 f8 ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a771:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a777:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a77d:	0f b6 c4             	movzx  eax,ah
c001a780:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a784:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a788:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001a78c:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001a792:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a796:	83 c4 20             	add    esp,0x20
c001a799:	85 c0                	test   eax,eax
c001a79b:	74 2f                	je     c001a7cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a79d:	31 d2                	xor    edx,edx
c001a79f:	39 14 24             	cmp    DWORD PTR [esp],edx
c001a7a2:	7e 28                	jle    c001a7cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a7a4:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a7ac:	39 c3                	cmp    ebx,eax
c001a7ae:	75 19                	jne    c001a7c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a7b0:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a7b8:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001a7bc:	75 0b                	jne    c001a7c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a7be:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a7c5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a7c9:	42                   	inc    edx
c001a7ca:	eb d3                	jmp    c001a79f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001a7cc:	31 d2                	xor    edx,edx
c001a7ce:	83 ec 0c             	sub    esp,0xc
c001a7d1:	56                   	push   esi
c001a7d2:	53                   	push   ebx
c001a7d3:	57                   	push   edi
c001a7d4:	52                   	push   edx
c001a7d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a7d9:	55                   	push   ebp
c001a7da:	e8 b9 f9 ff ff       	call   c001a198 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a7e3:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001a7e7:	42                   	inc    edx
c001a7e8:	83 c4 20             	add    esp,0x20
c001a7eb:	83 fa 06             	cmp    edx,0x6
c001a7ee:	75 de                	jne    c001a7ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001a7f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7f4:	83 ec 0c             	sub    esp,0xc
c001a7f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7fb:	c1 e2 08             	shl    edx,0x8
c001a7fe:	0f b6 c4             	movzx  eax,ah
c001a801:	09 d0                	or     eax,edx
c001a803:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001a808:	6a 02                	push   0x2
c001a80a:	56                   	push   esi
c001a80b:	53                   	push   ebx
c001a80c:	57                   	push   edi
c001a80d:	55                   	push   ebp
c001a80e:	e8 a5 f7 ff ff       	call   c0019fb8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a813:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001a818:	83 c4 20             	add    esp,0x20
c001a81b:	56                   	push   esi
c001a81c:	53                   	push   ebx
c001a81d:	57                   	push   edi
c001a81e:	55                   	push   ebp
c001a81f:	e8 d4 f8 ff ff       	call   c001a0f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a824:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a828:	56                   	push   esi
c001a829:	53                   	push   ebx
c001a82a:	57                   	push   edi
c001a82b:	55                   	push   ebp
c001a82c:	e8 31 f8 ff ff       	call   c001a062 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a831:	b9 09 00 00 00       	mov    ecx,0x9
c001a836:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001a83b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a83f:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001a843:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001a847:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001a84b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001a84f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001a853:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a857:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001a85b:	83 ec 0c             	sub    esp,0xc
c001a85e:	fc                   	cld    
c001a85f:	8d 74 24 48          	lea    esi,[esp+0x48]
c001a863:	89 e7                	mov    edi,esp
c001a865:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a867:	55                   	push   ebp
c001a868:	e8 25 fd ff ff       	call   c001a592 <PCI::foundDevice(PCIDeviceInfo)>
c001a86d:	83 c4 7c             	add    esp,0x7c
c001a870:	5b                   	pop    ebx
c001a871:	5e                   	pop    esi
c001a872:	5f                   	pop    edi
c001a873:	5d                   	pop    ebp
c001a874:	c3                   	ret    
c001a875:	90                   	nop

c001a876 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a876:	55                   	push   ebp
c001a877:	57                   	push   edi
c001a878:	56                   	push   esi
c001a879:	53                   	push   ebx
c001a87a:	83 ec 0c             	sub    esp,0xc
c001a87d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a882:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a887:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a88b:	6a 00                	push   0x0
c001a88d:	56                   	push   esi
c001a88e:	57                   	push   edi
c001a88f:	55                   	push   ebp
c001a890:	e8 cd f7 ff ff       	call   c001a062 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a895:	6a 00                	push   0x0
c001a897:	56                   	push   esi
c001a898:	57                   	push   edi
c001a899:	55                   	push   ebp
c001a89a:	e8 6b fe ff ff       	call   c001a70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a89f:	83 c4 20             	add    esp,0x20
c001a8a2:	6a 00                	push   0x0
c001a8a4:	56                   	push   esi
c001a8a5:	57                   	push   edi
c001a8a6:	55                   	push   ebp
c001a8a7:	e8 da f7 ff ff       	call   c001a086 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	84 c0                	test   al,al
c001a8b1:	79 2d                	jns    c001a8e0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001a8b3:	bb 01 00 00 00       	mov    ebx,0x1
c001a8b8:	53                   	push   ebx
c001a8b9:	56                   	push   esi
c001a8ba:	57                   	push   edi
c001a8bb:	55                   	push   ebp
c001a8bc:	e8 a1 f7 ff ff       	call   c001a062 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a8c1:	83 c4 10             	add    esp,0x10
c001a8c4:	0f b7 c0             	movzx  eax,ax
c001a8c7:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8cc:	74 0c                	je     c001a8da <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a8ce:	53                   	push   ebx
c001a8cf:	56                   	push   esi
c001a8d0:	57                   	push   edi
c001a8d1:	55                   	push   ebp
c001a8d2:	e8 33 fe ff ff       	call   c001a70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a8d7:	83 c4 10             	add    esp,0x10
c001a8da:	43                   	inc    ebx
c001a8db:	83 fb 08             	cmp    ebx,0x8
c001a8de:	75 d8                	jne    c001a8b8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a8e0:	83 c4 0c             	add    esp,0xc
c001a8e3:	5b                   	pop    ebx
c001a8e4:	5e                   	pop    esi
c001a8e5:	5f                   	pop    edi
c001a8e6:	5d                   	pop    ebp
c001a8e7:	c3                   	ret    

c001a8e8 <PCI::detect()>:
c001a8e8:	56                   	push   esi
c001a8e9:	53                   	push   ebx
c001a8ea:	53                   	push   ebx
c001a8eb:	31 db                	xor    ebx,ebx
c001a8ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8f1:	6a 00                	push   0x0
c001a8f3:	6a 00                	push   0x0
c001a8f5:	6a 00                	push   0x0
c001a8f7:	56                   	push   esi
c001a8f8:	e8 89 f7 ff ff       	call   c001a086 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	a8 80                	test   al,0x80
c001a902:	75 21                	jne    c001a925 <PCI::detect()+0x3d>
c001a904:	51                   	push   ecx
c001a905:	51                   	push   ecx
c001a906:	6a 00                	push   0x0
c001a908:	56                   	push   esi
c001a909:	e8 60 fc ff ff       	call   c001a56e <PCI::checkBus(unsigned char)>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	eb 2a                	jmp    c001a93d <PCI::detect()+0x55>
c001a913:	52                   	push   edx
c001a914:	52                   	push   edx
c001a915:	53                   	push   ebx
c001a916:	43                   	inc    ebx
c001a917:	56                   	push   esi
c001a918:	e8 51 fc ff ff       	call   c001a56e <PCI::checkBus(unsigned char)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	83 fb 08             	cmp    ebx,0x8
c001a923:	74 18                	je     c001a93d <PCI::detect()+0x55>
c001a925:	53                   	push   ebx
c001a926:	6a 00                	push   0x0
c001a928:	6a 00                	push   0x0
c001a92a:	56                   	push   esi
c001a92b:	e8 32 f7 ff ff       	call   c001a062 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a930:	83 c4 10             	add    esp,0x10
c001a933:	0f b7 c0             	movzx  eax,ax
c001a936:	3d ff ff 00 00       	cmp    eax,0xffff
c001a93b:	74 d6                	je     c001a913 <PCI::detect()+0x2b>
c001a93d:	58                   	pop    eax
c001a93e:	5b                   	pop    ebx
c001a93f:	5e                   	pop    esi
c001a940:	c3                   	ret    
c001a941:	90                   	nop

c001a942 <IDE::close(int, int, void*)>:
c001a942:	83 c8 ff             	or     eax,0xffffffff
c001a945:	c3                   	ret    

c001a946 <IDE::IDE()>:
c001a946:	83 ec 1c             	sub    esp,0x1c
c001a949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94d:	c7 44 24 04 68 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021668
c001a955:	89 04 24             	mov    DWORD PTR [esp],eax
c001a958:	e8 f7 17 ff ff       	call   c000c154 <HardDiskController::HardDiskController(char const*)>
c001a95d:	ba f8 16 02 c0       	mov    edx,0xc00216f8
c001a962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a966:	89 10                	mov    DWORD PTR [eax],edx
c001a968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a96c:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a973:	90                   	nop
c001a974:	83 c4 1c             	add    esp,0x1c
c001a977:	c3                   	ret    

c001a978 <IDE::prepareInterrupt(unsigned char)>:
c001a978:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a97d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a981:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a989:	c3                   	ret    

c001a98a <selectDrive(unsigned char, unsigned char)>:
c001a98a:	c3                   	ret    
c001a98b:	90                   	nop

c001a98c <IDE::getBase(unsigned char)>:
c001a98c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a995:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a99d:	c3                   	ret    

c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a99e:	55                   	push   ebp
c001a99f:	57                   	push   edi
c001a9a0:	56                   	push   esi
c001a9a1:	53                   	push   ebx
c001a9a2:	83 ec 1c             	sub    esp,0x1c
c001a9a5:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001a9aa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a9ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a9b2:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001a9b7:	88 d9                	mov    cl,bl
c001a9b9:	80 e9 08             	sub    cl,0x8
c001a9bc:	80 f9 03             	cmp    cl,0x3
c001a9bf:	77 4e                	ja     c001aa0f <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001a9c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9c5:	0f b6 fa             	movzx  edi,dl
c001a9c8:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001a9cb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a9cf:	80 ca 80             	or     dl,0x80
c001a9d2:	0f b6 d2             	movzx  edx,dl
c001a9d5:	52                   	push   edx
c001a9d6:	6a 0c                	push   0xc
c001a9d8:	57                   	push   edi
c001a9d9:	56                   	push   esi
c001a9da:	e8 bf ff ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9df:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a9e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9e8:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a9ec:	ee                   	out    dx,al
c001a9ed:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a9f2:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001a9f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a9fa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001aa02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa06:	83 c4 2c             	add    esp,0x2c
c001aa09:	5b                   	pop    ebx
c001aa0a:	5e                   	pop    esi
c001aa0b:	5f                   	pop    edi
c001aa0c:	5d                   	pop    ebp
c001aa0d:	eb 8f                	jmp    c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa0f:	80 fb 07             	cmp    bl,0x7
c001aa12:	77 0c                	ja     c001aa20 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001aa14:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001aa1c:	01 da                	add    edx,ebx
c001aa1e:	eb 23                	jmp    c001aa43 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aa20:	80 fb 0d             	cmp    bl,0xd
c001aa23:	77 0d                	ja     c001aa32 <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001aa25:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001aa2c:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001aa30:	eb 11                	jmp    c001aa43 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aa32:	80 fb 15             	cmp    bl,0x15
c001aa35:	77 0d                	ja     c001aa44 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa37:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001aa3f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001aa43:	ee                   	out    dx,al
c001aa44:	83 c4 1c             	add    esp,0x1c
c001aa47:	5b                   	pop    ebx
c001aa48:	5e                   	pop    esi
c001aa49:	5f                   	pop    edi
c001aa4a:	5d                   	pop    ebp
c001aa4b:	c3                   	ret    

c001aa4c <IDE::read(unsigned char, unsigned char)>:
c001aa4c:	55                   	push   ebp
c001aa4d:	57                   	push   edi
c001aa4e:	56                   	push   esi
c001aa4f:	53                   	push   ebx
c001aa50:	83 ec 1c             	sub    esp,0x1c
c001aa53:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aa58:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa5c:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aa61:	88 d8                	mov    al,bl
c001aa63:	2c 08                	sub    al,0x8
c001aa65:	3c 03                	cmp    al,0x3
c001aa67:	77 3f                	ja     c001aaa8 <IDE::read(unsigned char, unsigned char)+0x5c>
c001aa69:	0f b6 f2             	movzx  esi,dl
c001aa6c:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001aa6f:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001aa73:	0c 80                	or     al,0x80
c001aa75:	0f b6 c0             	movzx  eax,al
c001aa78:	50                   	push   eax
c001aa79:	6a 0c                	push   0xc
c001aa7b:	56                   	push   esi
c001aa7c:	57                   	push   edi
c001aa7d:	e8 1c ff ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa82:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001aa87:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001aa8b:	ec                   	in     al,dx
c001aa8c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa90:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001aa95:	52                   	push   edx
c001aa96:	6a 0c                	push   0xc
c001aa98:	56                   	push   esi
c001aa99:	57                   	push   edi
c001aa9a:	e8 ff fe ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa9f:	83 c4 20             	add    esp,0x20
c001aaa2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aaa6:	eb 38                	jmp    c001aae0 <IDE::read(unsigned char, unsigned char)+0x94>
c001aaa8:	80 fb 07             	cmp    bl,0x7
c001aaab:	77 0d                	ja     c001aaba <IDE::read(unsigned char, unsigned char)+0x6e>
c001aaad:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001aab5:	8d 14 18             	lea    edx,[eax+ebx*1]
c001aab8:	eb 25                	jmp    c001aadf <IDE::read(unsigned char, unsigned char)+0x93>
c001aaba:	80 fb 0d             	cmp    bl,0xd
c001aabd:	77 0d                	ja     c001aacc <IDE::read(unsigned char, unsigned char)+0x80>
c001aabf:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001aac6:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001aaca:	eb 13                	jmp    c001aadf <IDE::read(unsigned char, unsigned char)+0x93>
c001aacc:	31 c0                	xor    eax,eax
c001aace:	80 fb 15             	cmp    bl,0x15
c001aad1:	77 0d                	ja     c001aae0 <IDE::read(unsigned char, unsigned char)+0x94>
c001aad3:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001aadb:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001aadf:	ec                   	in     al,dx
c001aae0:	83 c4 1c             	add    esp,0x1c
c001aae3:	5b                   	pop    ebx
c001aae4:	5e                   	pop    esi
c001aae5:	5f                   	pop    edi
c001aae6:	5d                   	pop    ebp
c001aae7:	c3                   	ret    

c001aae8 <IDE::waitInterrupt(unsigned char)>:
c001aae8:	57                   	push   edi
c001aae9:	56                   	push   esi
c001aaea:	53                   	push   ebx
c001aaeb:	31 db                	xor    ebx,ebx
c001aaed:	83 ec 10             	sub    esp,0x10
c001aaf0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aaf4:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001aaf9:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001ab00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ab04:	84 c0                	test   al,al
c001ab06:	75 32                	jne    c001ab3a <IDE::waitInterrupt(unsigned char)+0x52>
c001ab08:	50                   	push   eax
c001ab09:	6a 0c                	push   0xc
c001ab0b:	56                   	push   esi
c001ab0c:	57                   	push   edi
c001ab0d:	e8 3a ff ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	24 01                	and    al,0x1
c001ab17:	84 c0                	test   al,al
c001ab19:	75 27                	jne    c001ab42 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ab1b:	f6 c3 04             	test   bl,0x4
c001ab1e:	75 12                	jne    c001ab32 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ab20:	83 fb 32             	cmp    ebx,0x32
c001ab23:	7e 0d                	jle    c001ab32 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ab25:	83 ec 0c             	sub    esp,0xc
c001ab28:	6a 64                	push   0x64
c001ab2a:	e8 fd a7 ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	83 fb 3c             	cmp    ebx,0x3c
c001ab35:	74 0b                	je     c001ab42 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ab37:	43                   	inc    ebx
c001ab38:	eb bf                	jmp    c001aaf9 <IDE::waitInterrupt(unsigned char)+0x11>
c001ab3a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ab42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	5b                   	pop    ebx
c001ab4a:	5e                   	pop    esi
c001ab4b:	5f                   	pop    edi
c001ab4c:	c3                   	ret    

c001ab4d <ideChannel0IRQHandler(regs*, void*)>:
c001ab4d:	83 ec 10             	sub    esp,0x10
c001ab50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab54:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ab5b:	6a 07                	push   0x7
c001ab5d:	6a 00                	push   0x0
c001ab5f:	50                   	push   eax
c001ab60:	e8 e7 fe ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001ab65:	83 c4 1c             	add    esp,0x1c
c001ab68:	c3                   	ret    

c001ab69 <ideChannel1IRQHandler(regs*, void*)>:
c001ab69:	83 ec 10             	sub    esp,0x10
c001ab6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab70:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ab77:	6a 07                	push   0x7
c001ab79:	6a 01                	push   0x1
c001ab7b:	50                   	push   eax
c001ab7c:	e8 cb fe ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001ab81:	83 c4 1c             	add    esp,0x1c
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop

c001ab86 <IDE::enableIRQs(unsigned char, bool)>:
c001ab86:	57                   	push   edi
c001ab87:	56                   	push   esi
c001ab88:	be 04 00 00 00       	mov    esi,0x4
c001ab8d:	53                   	push   ebx
c001ab8e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ab93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab97:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ab9c:	0f 94 c0             	sete   al
c001ab9f:	00 c0                	add    al,al
c001aba1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001aba8:	0f b6 c0             	movzx  eax,al
c001abab:	50                   	push   eax
c001abac:	6a 0c                	push   0xc
c001abae:	57                   	push   edi
c001abaf:	53                   	push   ebx
c001abb0:	e8 e9 fd ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	50                   	push   eax
c001abb9:	6a 0c                	push   0xc
c001abbb:	57                   	push   edi
c001abbc:	53                   	push   ebx
c001abbd:	e8 8a fe ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001abc2:	83 c4 10             	add    esp,0x10
c001abc5:	4e                   	dec    esi
c001abc6:	75 f0                	jne    c001abb8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001abc8:	5b                   	pop    ebx
c001abc9:	5e                   	pop    esi
c001abca:	5f                   	pop    edi
c001abcb:	c3                   	ret    

c001abcc <IDE::open(int, int, void*)>:
c001abcc:	55                   	push   ebp
c001abcd:	57                   	push   edi
c001abce:	56                   	push   esi
c001abcf:	53                   	push   ebx
c001abd0:	83 ec 1c             	sub    esp,0x1c
c001abd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001abd7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001abde:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001abe7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001abf0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001abf7:	0f 85 b7 02 00 00    	jne    c001aeb4 <IDE::open(int, int, void*)+0x2e8>
c001abfd:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001ac03:	88 c8                	mov    al,cl
c001ac05:	24 7f                	and    al,0x7f
c001ac07:	0f b6 c0             	movzx  eax,al
c001ac0a:	83 f8 05             	cmp    eax,0x5
c001ac0d:	74 05                	je     c001ac14 <IDE::open(int, int, void*)+0x48>
c001ac0f:	83 f8 0f             	cmp    eax,0xf
c001ac12:	75 32                	jne    c001ac46 <IDE::open(int, int, void*)+0x7a>
c001ac14:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ac1a:	83 e0 fc             	and    eax,0xfffffffc
c001ac1d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ac24:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ac2a:	83 e0 fc             	and    eax,0xfffffffc
c001ac2d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ac34:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ac3a:	83 e0 fc             	and    eax,0xfffffffc
c001ac3d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ac44:	eb 14                	jmp    c001ac5a <IDE::open(int, int, void*)+0x8e>
c001ac46:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ac50:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ac5a:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001ac61:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ac66:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ac6d:	89 fe                	mov    esi,edi
c001ac6f:	c1 e6 10             	shl    esi,0x10
c001ac72:	89 e8                	mov    eax,ebp
c001ac74:	c1 e0 0b             	shl    eax,0xb
c001ac77:	09 c6                	or     esi,eax
c001ac79:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ac80:	c1 e0 08             	shl    eax,0x8
c001ac83:	09 c6                	or     esi,eax
c001ac85:	89 f0                	mov    eax,esi
c001ac87:	0d 08 00 00 80       	or     eax,0x80000008
c001ac8c:	ef                   	out    dx,eax
c001ac8d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ac92:	ed                   	in     eax,dx
c001ac93:	c1 e8 10             	shr    eax,0x10
c001ac96:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac9b:	0f 84 f9 00 00 00    	je     c001ad9a <IDE::open(int, int, void*)+0x1ce>
c001aca1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001aca7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acac:	89 f0                	mov    eax,esi
c001acae:	ef                   	out    dx,eax
c001acaf:	b0 fe                	mov    al,0xfe
c001acb1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001acb6:	ee                   	out    dx,al
c001acb7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acbc:	89 f0                	mov    eax,esi
c001acbe:	ef                   	out    dx,eax
c001acbf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001acc4:	ed                   	in     eax,dx
c001acc5:	3c fe                	cmp    al,0xfe
c001acc7:	0f 85 a5 00 00 00    	jne    c001ad72 <IDE::open(int, int, void*)+0x1a6>
c001accd:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001acd3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001acda:	74 31                	je     c001ad0d <IDE::open(int, int, void*)+0x141>
c001acdc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ace2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ace6:	83 ec 0c             	sub    esp,0xc
c001ace9:	fe c0                	inc    al
c001aceb:	0f b6 c0             	movzx  eax,al
c001acee:	50                   	push   eax
c001acef:	55                   	push   ebp
c001acf0:	57                   	push   edi
c001acf1:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001acf7:	51                   	push   ecx
c001acf8:	e8 bb 3f ff ff       	call   c000ecb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001acfd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ad02:	83 c4 1c             	add    esp,0x1c
c001ad05:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ad0b:	eb 0a                	jmp    c001ad17 <IDE::open(int, int, void*)+0x14b>
c001ad0d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ad17:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ad1e:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001ad23:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ad2a:	89 ea                	mov    edx,ebp
c001ad2c:	c1 e6 10             	shl    esi,0x10
c001ad2f:	c1 e0 08             	shl    eax,0x8
c001ad32:	09 c6                	or     esi,eax
c001ad34:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ad3b:	c1 e0 0b             	shl    eax,0xb
c001ad3e:	09 c6                	or     esi,eax
c001ad40:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ad46:	89 f0                	mov    eax,esi
c001ad48:	ef                   	out    dx,eax
c001ad49:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001ad4f:	bf fc 0c 00 00       	mov    edi,0xcfc
c001ad54:	89 fa                	mov    edx,edi
c001ad56:	88 c8                	mov    al,cl
c001ad58:	ee                   	out    dx,al
c001ad59:	89 f0                	mov    eax,esi
c001ad5b:	89 ea                	mov    edx,ebp
c001ad5d:	ef                   	out    dx,eax
c001ad5e:	89 fa                	mov    edx,edi
c001ad60:	ed                   	in     eax,dx
c001ad61:	0f b6 c0             	movzx  eax,al
c001ad64:	39 c8                	cmp    eax,ecx
c001ad66:	74 42                	je     c001adaa <IDE::open(int, int, void*)+0x1de>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	68 80 16 02 c0       	push   0xc0021680
c001ad70:	eb 30                	jmp    c001ada2 <IDE::open(int, int, void*)+0x1d6>
c001ad72:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ad7b:	75 13                	jne    c001ad90 <IDE::open(int, int, void*)+0x1c4>
c001ad7d:	80 f9 8a             	cmp    cl,0x8a
c001ad80:	74 05                	je     c001ad87 <IDE::open(int, int, void*)+0x1bb>
c001ad82:	80 f9 80             	cmp    cl,0x80
c001ad85:	75 09                	jne    c001ad90 <IDE::open(int, int, void*)+0x1c4>
c001ad87:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ad8e:	eb 1a                	jmp    c001adaa <IDE::open(int, int, void*)+0x1de>
c001ad90:	83 ec 0c             	sub    esp,0xc
c001ad93:	68 88 16 02 c0       	push   0xc0021688
c001ad98:	eb 08                	jmp    c001ada2 <IDE::open(int, int, void*)+0x1d6>
c001ad9a:	83 ec 0c             	sub    esp,0xc
c001ad9d:	68 b9 16 02 c0       	push   0xc00216b9
c001ada2:	e8 8e 59 ff ff       	call   c0010735 <KePanic(char const*)>
c001ada7:	83 c4 10             	add    esp,0x10
c001adaa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001adb1:	79 1c                	jns    c001adcf <IDE::open(int, int, void*)+0x203>
c001adb3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001adb9:	25 fc ff 00 00       	and    eax,0xfffc
c001adbe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001adc5:	83 c0 08             	add    eax,0x8
c001adc8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001adcf:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001add6:	89 c2                	mov    edx,eax
c001add8:	83 e2 0f             	and    edx,0xf
c001addb:	83 fa 08             	cmp    edx,0x8
c001adde:	75 0a                	jne    c001adea <IDE::open(int, int, void*)+0x21e>
c001ade0:	83 e8 02             	sub    eax,0x2
c001ade3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001adea:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001adf1:	89 c2                	mov    edx,eax
c001adf3:	83 e2 0f             	and    edx,0xf
c001adf6:	83 fa 08             	cmp    edx,0x8
c001adf9:	75 0a                	jne    c001ae05 <IDE::open(int, int, void*)+0x239>
c001adfb:	83 e8 02             	sub    eax,0x2
c001adfe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ae05:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ae0c:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001ae13:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae16:	89 d0                	mov    eax,edx
c001ae18:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ae1c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ae20:	88 d1                	mov    cl,dl
c001ae22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ae27:	fe c1                	inc    cl
c001ae29:	0f b6 c9             	movzx  ecx,cl
c001ae2c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ae2f:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001ae36:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ae3a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ae3e:	88 c2                	mov    dl,al
c001ae40:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ae45:	80 c2 02             	add    dl,0x2
c001ae48:	0f b6 d2             	movzx  edx,dl
c001ae4b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae4e:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001ae55:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ae59:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ae5d:	88 c1                	mov    cl,al
c001ae5f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ae64:	80 c1 03             	add    cl,0x3
c001ae67:	0f b6 c9             	movzx  ecx,cl
c001ae6a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ae6d:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001ae74:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ae78:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ae7c:	88 c2                	mov    dl,al
c001ae7e:	80 c2 04             	add    dl,0x4
c001ae81:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ae87:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ae8c:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001ae93:	85 f6                	test   esi,esi
c001ae95:	74 5d                	je     c001aef4 <IDE::open(int, int, void*)+0x328>
c001ae97:	0f b6 d2             	movzx  edx,dl
c001ae9a:	04 05                	add    al,0x5
c001ae9c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae9f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aea3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001aea7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001aead:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aeb2:	eb 40                	jmp    c001aef4 <IDE::open(int, int, void*)+0x328>
c001aeb4:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aebb:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001aec2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aec9:	05 06 02 00 00       	add    eax,0x206
c001aece:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aed5:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001aedc:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aee3:	05 06 02 00 00       	add    eax,0x206
c001aee8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aeef:	e9 db fe ff ff       	jmp    c001adcf <IDE::open(int, int, void*)+0x203>
c001aef4:	50                   	push   eax
c001aef5:	50                   	push   eax
c001aef6:	6a 00                	push   0x0
c001aef8:	53                   	push   ebx
c001aef9:	e8 7a fa ff ff       	call   c001a978 <IDE::prepareInterrupt(unsigned char)>
c001aefe:	5a                   	pop    edx
c001aeff:	59                   	pop    ecx
c001af00:	6a 01                	push   0x1
c001af02:	53                   	push   ebx
c001af03:	e8 70 fa ff ff       	call   c001a978 <IDE::prepareInterrupt(unsigned char)>
c001af08:	83 c4 0c             	add    esp,0xc
c001af0b:	6a 00                	push   0x0
c001af0d:	6a 00                	push   0x0
c001af0f:	53                   	push   ebx
c001af10:	e8 71 fc ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	6a 00                	push   0x0
c001af1a:	6a 01                	push   0x1
c001af1c:	53                   	push   ebx
c001af1d:	e8 64 fc ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001af22:	83 c4 10             	add    esp,0x10
c001af25:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001af2c:	74 34                	je     c001af62 <IDE::open(int, int, void*)+0x396>
c001af2e:	83 ec 0c             	sub    esp,0xc
c001af31:	53                   	push   ebx
c001af32:	6a 01                	push   0x1
c001af34:	68 4d ab 01 c0       	push   0xc001ab4d
c001af39:	6a 0e                	push   0xe
c001af3b:	53                   	push   ebx
c001af3c:	e8 7f 0e ff ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af41:	83 c4 14             	add    esp,0x14
c001af44:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af4a:	53                   	push   ebx
c001af4b:	6a 01                	push   0x1
c001af4d:	68 69 ab 01 c0       	push   0xc001ab69
c001af52:	6a 0f                	push   0xf
c001af54:	53                   	push   ebx
c001af55:	e8 66 0e ff ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af5a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001af60:	eb 38                	jmp    c001af9a <IDE::open(int, int, void*)+0x3ce>
c001af62:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001af6c:	83 ec 0c             	sub    esp,0xc
c001af6f:	53                   	push   ebx
c001af70:	6a 00                	push   0x0
c001af72:	68 4d ab 01 c0       	push   0xc001ab4d
c001af77:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001af7d:	53                   	push   ebx
c001af7e:	e8 3d 0e ff ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af83:	83 c4 14             	add    esp,0x14
c001af86:	53                   	push   ebx
c001af87:	6a 00                	push   0x0
c001af89:	68 69 ab 01 c0       	push   0xc001ab69
c001af8e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001af94:	53                   	push   ebx
c001af95:	e8 26 0e ff ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af9c:	83 c4 20             	add    esp,0x20
c001af9f:	83 ec 0c             	sub    esp,0xc
c001afa2:	53                   	push   ebx
c001afa3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001afa6:	83 c4 0c             	add    esp,0xc
c001afa9:	6a 07                	push   0x7
c001afab:	6a 00                	push   0x0
c001afad:	53                   	push   ebx
c001afae:	e8 99 fa ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001afb3:	83 c4 0c             	add    esp,0xc
c001afb6:	6a 07                	push   0x7
c001afb8:	6a 01                	push   0x1
c001afba:	53                   	push   ebx
c001afbb:	e8 8c fa ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001afc0:	83 c4 0c             	add    esp,0xc
c001afc3:	6a 01                	push   0x1
c001afc5:	6a 00                	push   0x0
c001afc7:	53                   	push   ebx
c001afc8:	e8 b9 fb ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001afcd:	83 c4 0c             	add    esp,0xc
c001afd0:	6a 01                	push   0x1
c001afd2:	6a 01                	push   0x1
c001afd4:	53                   	push   ebx
c001afd5:	e8 ac fb ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001afda:	83 c4 2c             	add    esp,0x2c
c001afdd:	31 c0                	xor    eax,eax
c001afdf:	5b                   	pop    ebx
c001afe0:	5e                   	pop    esi
c001afe1:	5f                   	pop    edi
c001afe2:	5d                   	pop    ebp
c001afe3:	c3                   	ret    

c001afe4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001afe4:	55                   	push   ebp
c001afe5:	57                   	push   edi
c001afe6:	56                   	push   esi
c001afe7:	53                   	push   ebx
c001afe8:	83 ec 1c             	sub    esp,0x1c
c001afeb:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001aff0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aff4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001aff8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001affc:	88 d0                	mov    al,dl
c001affe:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001b003:	2c 08                	sub    al,0x8
c001b005:	3c 03                	cmp    al,0x3
c001b007:	77 57                	ja     c001b060 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b009:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b00d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b010:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b014:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b018:	0c 80                	or     al,0x80
c001b01a:	0f b6 c0             	movzx  eax,al
c001b01d:	50                   	push   eax
c001b01e:	6a 0c                	push   0xc
c001b020:	53                   	push   ebx
c001b021:	56                   	push   esi
c001b022:	e8 77 f9 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b027:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b02c:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b031:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b035:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b039:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b03b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b040:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b044:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b048:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b050:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b054:	83 c4 2c             	add    esp,0x2c
c001b057:	5b                   	pop    ebx
c001b058:	5e                   	pop    esi
c001b059:	5f                   	pop    edi
c001b05a:	5d                   	pop    ebp
c001b05b:	e9 3e f9 ff ff       	jmp    c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b060:	80 fa 07             	cmp    dl,0x7
c001b063:	77 0c                	ja     c001b071 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b065:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b06d:	01 c2                	add    edx,eax
c001b06f:	eb 23                	jmp    c001b094 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b071:	80 fa 0d             	cmp    dl,0xd
c001b074:	77 0d                	ja     c001b083 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b076:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b07d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b081:	eb 11                	jmp    c001b094 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b083:	80 fa 15             	cmp    dl,0x15
c001b086:	77 0e                	ja     c001b096 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b088:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b090:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b094:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b096:	83 c4 1c             	add    esp,0x1c
c001b099:	5b                   	pop    ebx
c001b09a:	5e                   	pop    esi
c001b09b:	5f                   	pop    edi
c001b09c:	5d                   	pop    ebp
c001b09d:	c3                   	ret    

c001b09e <IDE::detect()>:
c001b09e:	55                   	push   ebp
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	53                   	push   ebx
c001b0a2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b0a8:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b0af:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b0b6:	0f 85 91 02 00 00    	jne    c001b34d <IDE::detect()+0x2af>
c001b0bc:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b0c3:	31 db                	xor    ebx,ebx
c001b0c5:	31 ff                	xor    edi,edi
c001b0c7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b0cc:	89 f8                	mov    eax,edi
c001b0ce:	c1 e0 06             	shl    eax,0x6
c001b0d1:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b0d9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b0dd:	c0 e0 04             	shl    al,0x4
c001b0e0:	0c a0                	or     al,0xa0
c001b0e2:	0f b6 c0             	movzx  eax,al
c001b0e5:	50                   	push   eax
c001b0e6:	6a 06                	push   0x6
c001b0e8:	53                   	push   ebx
c001b0e9:	56                   	push   esi
c001b0ea:	e8 af f8 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0ef:	83 c4 0c             	add    esp,0xc
c001b0f2:	6a 0c                	push   0xc
c001b0f4:	53                   	push   ebx
c001b0f5:	56                   	push   esi
c001b0f6:	e8 51 f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b0fb:	83 c4 0c             	add    esp,0xc
c001b0fe:	6a 0c                	push   0xc
c001b100:	53                   	push   ebx
c001b101:	56                   	push   esi
c001b102:	e8 45 f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b107:	83 c4 0c             	add    esp,0xc
c001b10a:	6a 0c                	push   0xc
c001b10c:	53                   	push   ebx
c001b10d:	56                   	push   esi
c001b10e:	e8 39 f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b113:	83 c4 0c             	add    esp,0xc
c001b116:	6a 0c                	push   0xc
c001b118:	53                   	push   ebx
c001b119:	56                   	push   esi
c001b11a:	e8 2d f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b11f:	68 ec 00 00 00       	push   0xec
c001b124:	6a 07                	push   0x7
c001b126:	53                   	push   ebx
c001b127:	56                   	push   esi
c001b128:	e8 71 f8 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b12d:	83 c4 1c             	add    esp,0x1c
c001b130:	6a 0c                	push   0xc
c001b132:	53                   	push   ebx
c001b133:	56                   	push   esi
c001b134:	e8 13 f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b139:	83 c4 0c             	add    esp,0xc
c001b13c:	6a 0c                	push   0xc
c001b13e:	53                   	push   ebx
c001b13f:	56                   	push   esi
c001b140:	e8 07 f9 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b145:	83 c4 0c             	add    esp,0xc
c001b148:	6a 0c                	push   0xc
c001b14a:	53                   	push   ebx
c001b14b:	56                   	push   esi
c001b14c:	e8 fb f8 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b151:	83 c4 0c             	add    esp,0xc
c001b154:	6a 0c                	push   0xc
c001b156:	53                   	push   ebx
c001b157:	56                   	push   esi
c001b158:	e8 ef f8 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b15d:	83 c4 0c             	add    esp,0xc
c001b160:	6a 0c                	push   0xc
c001b162:	53                   	push   ebx
c001b163:	56                   	push   esi
c001b164:	e8 e3 f8 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b169:	83 c4 10             	add    esp,0x10
c001b16c:	84 c0                	test   al,al
c001b16e:	0f 84 62 01 00 00    	je     c001b2d6 <IDE::detect()+0x238>
c001b174:	31 ed                	xor    ebp,ebp
c001b176:	50                   	push   eax
c001b177:	6a 0c                	push   0xc
c001b179:	53                   	push   ebx
c001b17a:	56                   	push   esi
c001b17b:	e8 cc f8 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b180:	83 c4 10             	add    esp,0x10
c001b183:	88 c2                	mov    dl,al
c001b185:	80 e2 01             	and    dl,0x1
c001b188:	84 d2                	test   dl,dl
c001b18a:	0f 85 64 01 00 00    	jne    c001b2f4 <IDE::detect()+0x256>
c001b190:	84 c0                	test   al,al
c001b192:	78 04                	js     c001b198 <IDE::detect()+0xfa>
c001b194:	24 08                	and    al,0x8
c001b196:	75 23                	jne    c001b1bb <IDE::detect()+0x11d>
c001b198:	45                   	inc    ebp
c001b199:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b19f:	7e d5                	jle    c001b176 <IDE::detect()+0xd8>
c001b1a1:	83 ec 0c             	sub    esp,0xc
c001b1a4:	6a 32                	push   0x32
c001b1a6:	e8 81 a1 ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b1b4:	75 c0                	jne    c001b176 <IDE::detect()+0xd8>
c001b1b6:	e9 39 01 00 00       	jmp    c001b2f4 <IDE::detect()+0x256>
c001b1bb:	31 d2                	xor    edx,edx
c001b1bd:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b1c1:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b1c5:	83 ec 0c             	sub    esp,0xc
c001b1c8:	68 80 00 00 00       	push   0x80
c001b1cd:	55                   	push   ebp
c001b1ce:	6a 00                	push   0x0
c001b1d0:	53                   	push   ebx
c001b1d1:	56                   	push   esi
c001b1d2:	e8 0d fe ff ff       	call   c001afe4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b1d7:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b1dc:	89 f8                	mov    eax,edi
c001b1de:	c1 e0 06             	shl    eax,0x6
c001b1e1:	01 f0                	add    eax,esi
c001b1e3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b1ea:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b1f1:	89 ca                	mov    edx,ecx
c001b1f3:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b1f7:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b1fd:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b203:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b207:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b20e:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b216:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b21d:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b225:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b22b:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b232:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b238:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b23c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b240:	83 c4 20             	add    esp,0x20
c001b243:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b246:	83 c5 02             	add    ebp,0x2
c001b249:	83 c0 02             	add    eax,0x2
c001b24c:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b252:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b255:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b25b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b25f:	75 e2                	jne    c001b243 <IDE::detect()+0x1a5>
c001b261:	89 f9                	mov    ecx,edi
c001b263:	c1 e1 06             	shl    ecx,0x6
c001b266:	01 f1                	add    ecx,esi
c001b268:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b26f:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b276:	c1 e8 09             	shr    eax,0x9
c001b279:	24 01                	and    al,0x1
c001b27b:	84 d2                	test   dl,dl
c001b27d:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b283:	75 22                	jne    c001b2a7 <IDE::detect()+0x209>
c001b285:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b28c:	74 47                	je     c001b2d5 <IDE::detect()+0x237>
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	68 7c 01 00 00       	push   0x17c
c001b296:	e8 cb c7 fe ff       	call   c0007a66 <malloc>
c001b29b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b29e:	89 c5                	mov    ebp,eax
c001b2a0:	e8 3b 05 00 00       	call   c001b7e0 <ATA::ATA()>
c001b2a5:	eb 17                	jmp    c001b2be <IDE::detect()+0x220>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	68 84 01 00 00       	push   0x184
c001b2af:	e8 b2 c7 fe ff       	call   c0007a66 <malloc>
c001b2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2b7:	89 c5                	mov    ebp,eax
c001b2b9:	e8 7e 0e 00 00       	call   c001c13c <ATAPI::ATAPI()>
c001b2be:	5a                   	pop    edx
c001b2bf:	59                   	pop    ecx
c001b2c0:	55                   	push   ebp
c001b2c1:	56                   	push   esi
c001b2c2:	e8 4b 0b ff ff       	call   c000be12 <Device::addChild(Device*)>
c001b2c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b2ca:	56                   	push   esi
c001b2cb:	57                   	push   edi
c001b2cc:	6a 00                	push   0x0
c001b2ce:	55                   	push   ebp
c001b2cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2d2:	83 c4 20             	add    esp,0x20
c001b2d5:	47                   	inc    edi
c001b2d6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b2db:	74 0a                	je     c001b2e7 <IDE::detect()+0x249>
c001b2dd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b2e2:	e9 e5 fd ff ff       	jmp    c001b0cc <IDE::detect()+0x2e>
c001b2e7:	4b                   	dec    ebx
c001b2e8:	74 63                	je     c001b34d <IDE::detect()+0x2af>
c001b2ea:	bb 01 00 00 00       	mov    ebx,0x1
c001b2ef:	e9 d3 fd ff ff       	jmp    c001b0c7 <IDE::detect()+0x29>
c001b2f4:	50                   	push   eax
c001b2f5:	6a 04                	push   0x4
c001b2f7:	53                   	push   ebx
c001b2f8:	56                   	push   esi
c001b2f9:	e8 4e f7 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b2fe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b302:	83 c4 0c             	add    esp,0xc
c001b305:	6a 05                	push   0x5
c001b307:	53                   	push   ebx
c001b308:	56                   	push   esi
c001b309:	e8 3e f7 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b315:	80 fa 14             	cmp    dl,0x14
c001b318:	74 2d                	je     c001b347 <IDE::detect()+0x2a9>
c001b31a:	80 fa 69             	cmp    dl,0x69
c001b31d:	75 b7                	jne    c001b2d6 <IDE::detect()+0x238>
c001b31f:	3c 96                	cmp    al,0x96
c001b321:	75 b3                	jne    c001b2d6 <IDE::detect()+0x238>
c001b323:	68 a1 00 00 00       	push   0xa1
c001b328:	6a 07                	push   0x7
c001b32a:	53                   	push   ebx
c001b32b:	56                   	push   esi
c001b32c:	e8 6d f6 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b331:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b338:	e8 ef 9f ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001b33d:	83 c4 10             	add    esp,0x10
c001b340:	b2 01                	mov    dl,0x1
c001b342:	e9 76 fe ff ff       	jmp    c001b1bd <IDE::detect()+0x11f>
c001b347:	3c eb                	cmp    al,0xeb
c001b349:	75 cf                	jne    c001b31a <IDE::detect()+0x27c>
c001b34b:	eb d6                	jmp    c001b323 <IDE::detect()+0x285>
c001b34d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b353:	5b                   	pop    ebx
c001b354:	5e                   	pop    esi
c001b355:	5f                   	pop    edi
c001b356:	5d                   	pop    ebp
c001b357:	c3                   	ret    

c001b358 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b358:	56                   	push   esi
c001b359:	53                   	push   ebx
c001b35a:	83 ec 14             	sub    esp,0x14
c001b35d:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001b361:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b365:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b369:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b36d:	84 d2                	test   dl,dl
c001b36f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b373:	0f 84 a8 00 00 00    	je     c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b379:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b37d:	83 ec 0c             	sub    esp,0xc
c001b380:	68 e3 16 02 c0       	push   0xc00216e3
c001b385:	e8 5c f6 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001b38a:	83 c4 10             	add    esp,0x10
c001b38d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b391:	80 fa 01             	cmp    dl,0x1
c001b394:	0f 84 81 00 00 00    	je     c001b41b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001b39a:	80 fa 02             	cmp    dl,0x2
c001b39d:	75 6e                	jne    c001b40d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001b39f:	00 db                	add    bl,bl
c001b3a1:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001b3a5:	50                   	push   eax
c001b3a6:	6a 01                	push   0x1
c001b3a8:	0f b6 db             	movzx  ebx,bl
c001b3ab:	c1 e3 06             	shl    ebx,0x6
c001b3ae:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001b3b6:	50                   	push   eax
c001b3b7:	56                   	push   esi
c001b3b8:	e8 8f f6 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b3c4:	88 c1                	mov    cl,al
c001b3c6:	80 e1 01             	and    cl,0x1
c001b3c9:	84 c9                	test   cl,cl
c001b3cb:	74 02                	je     c001b3cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001b3cd:	b2 07                	mov    dl,0x7
c001b3cf:	88 c1                	mov    cl,al
c001b3d1:	80 e1 02             	and    cl,0x2
c001b3d4:	74 02                	je     c001b3d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b3d6:	b2 03                	mov    dl,0x3
c001b3d8:	88 c1                	mov    cl,al
c001b3da:	80 e1 04             	and    cl,0x4
c001b3dd:	74 02                	je     c001b3e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001b3df:	b2 14                	mov    dl,0x14
c001b3e1:	88 c1                	mov    cl,al
c001b3e3:	80 e1 08             	and    cl,0x8
c001b3e6:	74 02                	je     c001b3ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001b3e8:	b2 03                	mov    dl,0x3
c001b3ea:	88 c1                	mov    cl,al
c001b3ec:	80 e1 10             	and    cl,0x10
c001b3ef:	74 02                	je     c001b3f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b3f1:	b2 15                	mov    dl,0x15
c001b3f3:	88 c1                	mov    cl,al
c001b3f5:	80 e1 20             	and    cl,0x20
c001b3f8:	74 02                	je     c001b3fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b3fa:	b2 03                	mov    dl,0x3
c001b3fc:	88 c1                	mov    cl,al
c001b3fe:	80 e1 40             	and    cl,0x40
c001b401:	74 02                	je     c001b405 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b403:	b2 16                	mov    dl,0x16
c001b405:	84 c0                	test   al,al
c001b407:	79 18                	jns    c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b409:	b2 0d                	mov    dl,0xd
c001b40b:	eb 14                	jmp    c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b40d:	80 fa 03             	cmp    dl,0x3
c001b410:	74 0d                	je     c001b41f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001b412:	80 fa 04             	cmp    dl,0x4
c001b415:	75 0a                	jne    c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b417:	b2 08                	mov    dl,0x8
c001b419:	eb 06                	jmp    c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b41b:	b2 13                	mov    dl,0x13
c001b41d:	eb 02                	jmp    c001b421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b41f:	b2 17                	mov    dl,0x17
c001b421:	83 c4 14             	add    esp,0x14
c001b424:	88 d0                	mov    al,dl
c001b426:	5b                   	pop    ebx
c001b427:	5e                   	pop    esi
c001b428:	c3                   	ret    
c001b429:	90                   	nop

c001b42a <IDE::polling(unsigned char, unsigned int)>:
c001b42a:	57                   	push   edi
c001b42b:	56                   	push   esi
c001b42c:	53                   	push   ebx
c001b42d:	bb 04 00 00 00       	mov    ebx,0x4
c001b432:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b436:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b43b:	52                   	push   edx
c001b43c:	6a 0c                	push   0xc
c001b43e:	56                   	push   esi
c001b43f:	57                   	push   edi
c001b440:	e8 07 f6 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	4b                   	dec    ebx
c001b449:	75 f0                	jne    c001b43b <IDE::polling(unsigned char, unsigned int)+0x11>
c001b44b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b450:	50                   	push   eax
c001b451:	6a 0c                	push   0xc
c001b453:	56                   	push   esi
c001b454:	57                   	push   edi
c001b455:	e8 f2 f5 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	88 c2                	mov    dl,al
c001b45f:	80 e2 01             	and    dl,0x1
c001b462:	84 d2                	test   dl,dl
c001b464:	75 1a                	jne    c001b480 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b466:	88 c2                	mov    dl,al
c001b468:	80 e2 20             	and    dl,0x20
c001b46b:	75 0f                	jne    c001b47c <IDE::polling(unsigned char, unsigned int)+0x52>
c001b46d:	4b                   	dec    ebx
c001b46e:	74 10                	je     c001b480 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b470:	84 c0                	test   al,al
c001b472:	78 dc                	js     c001b450 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b474:	24 08                	and    al,0x8
c001b476:	74 d8                	je     c001b450 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b478:	31 c0                	xor    eax,eax
c001b47a:	eb 06                	jmp    c001b482 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b47c:	b0 01                	mov    al,0x1
c001b47e:	eb 02                	jmp    c001b482 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b480:	b0 02                	mov    al,0x2
c001b482:	5b                   	pop    ebx
c001b483:	5e                   	pop    esi
c001b484:	5f                   	pop    edi
c001b485:	c3                   	ret    

c001b486 <SATABus::close(int, int, void*)>:
c001b486:	31 c0                	xor    eax,eax
c001b488:	c3                   	ret    
c001b489:	90                   	nop

c001b48a <SATABus::detect()>:
c001b48a:	c3                   	ret    
c001b48b:	90                   	nop

c001b48c <SATABus::SATABus()>:
c001b48c:	83 ec 2c             	sub    esp,0x2c
c001b48f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b493:	c7 44 24 04 1c 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002171c
c001b49b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b49e:	e8 b1 0c ff ff       	call   c000c154 <HardDiskController::HardDiskController(char const*)>
c001b4a3:	ba 48 17 02 c0       	mov    edx,0xc0021748
c001b4a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4ac:	89 10                	mov    DWORD PTR [eax],edx
c001b4ae:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b4b5:	e8 82 c9 fe ff       	call   c0007e3c <Phys::allocateContiguousPages(int)>
c001b4ba:	89 c2                	mov    edx,eax
c001b4bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b4c6:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b4cd:	e8 be e0 fe ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c001b4d2:	89 c2                	mov    edx,eax
c001b4d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4d8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4de:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b4e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4e7:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b4ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4f1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b4f7:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001b4ff:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001b507:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b50b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b50f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b512:	e8 db ea fe ff       	call   c0009ff2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b517:	90                   	nop
c001b518:	83 c4 2c             	add    esp,0x2c
c001b51b:	c3                   	ret    

c001b51c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b51c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b520:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b523:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b526:	09 c2                	or     edx,eax
c001b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b52c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b532:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b534:	31 c0                	xor    eax,eax
c001b536:	c1 e9 08             	shr    ecx,0x8
c001b539:	83 e1 0f             	and    ecx,0xf
c001b53c:	39 c8                	cmp    eax,ecx
c001b53e:	74 0a                	je     c001b54a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b540:	f6 c2 01             	test   dl,0x1
c001b543:	74 08                	je     c001b54d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b545:	d1 ea                	shr    edx,1
c001b547:	40                   	inc    eax
c001b548:	eb f2                	jmp    c001b53c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b54a:	83 c8 ff             	or     eax,0xffffffff
c001b54d:	c3                   	ret    

c001b54e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b54e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b552:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b555:	89 c2                	mov    edx,eax
c001b557:	c1 ea 08             	shr    edx,0x8
c001b55a:	80 e2 0f             	and    dl,0xf
c001b55d:	fe ca                	dec    dl
c001b55f:	75 30                	jne    c001b591 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b561:	24 0f                	and    al,0xf
c001b563:	3c 03                	cmp    al,0x3
c001b565:	75 2a                	jne    c001b591 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b567:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b56a:	b8 02 00 00 00       	mov    eax,0x2
c001b56f:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b575:	74 1c                	je     c001b593 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b577:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b57d:	b8 04 00 00 00       	mov    eax,0x4
c001b582:	74 0f                	je     c001b593 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b584:	31 c0                	xor    eax,eax
c001b586:	83 fa 03             	cmp    edx,0x3
c001b589:	0f 94 c0             	sete   al
c001b58c:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b590:	c3                   	ret    
c001b591:	31 c0                	xor    eax,eax
c001b593:	c3                   	ret    

c001b594 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b598:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b59b:	0f ba e2 0f          	bt     edx,0xf
c001b59f:	72 f7                	jb     c001b598 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b5a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5a4:	83 ca 10             	or     edx,0x10
c001b5a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5ad:	83 ca 01             	or     edx,0x1
c001b5b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5b3:	c3                   	ret    

c001b5b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5b8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5bb:	83 e2 fe             	and    edx,0xfffffffe
c001b5be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5c1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5c4:	83 e2 ef             	and    edx,0xffffffef
c001b5c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5cd:	0f ba e2 0e          	bt     edx,0xe
c001b5d1:	72 f7                	jb     c001b5ca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b5d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5d6:	0f ba e2 0f          	bt     edx,0xf
c001b5da:	72 ee                	jb     c001b5ca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b5dc:	c3                   	ret    
c001b5dd:	90                   	nop

c001b5de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b5de:	55                   	push   ebp
c001b5df:	57                   	push   edi
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 1c             	sub    esp,0x1c
c001b5e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b5ed:	53                   	push   ebx
c001b5ee:	57                   	push   edi
c001b5ef:	e8 c0 ff ff ff       	call   c001b5b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b5f4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b601:	c1 e5 0a             	shl    ebp,0xa
c001b604:	01 e8                	add    eax,ebp
c001b606:	89 03                	mov    DWORD PTR [ebx],eax
c001b608:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b60a:	68 00 04 00 00       	push   0x400
c001b60f:	6a 00                	push   0x0
c001b611:	50                   	push   eax
c001b612:	e8 d9 4e fe ff       	call   c00004f0 <memset>
c001b617:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b61d:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b621:	83 c4 1c             	add    esp,0x1c
c001b624:	01 e8                	add    eax,ebp
c001b626:	89 03                	mov    DWORD PTR [ebx],eax
c001b628:	c1 e6 08             	shl    esi,0x8
c001b62b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b632:	81 c6 00 80 00 00    	add    esi,0x8000
c001b638:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b63e:	01 f0                	add    eax,esi
c001b640:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b643:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b646:	68 00 01 00 00       	push   0x100
c001b64b:	6a 00                	push   0x0
c001b64d:	50                   	push   eax
c001b64e:	e8 9d 4e fe ff       	call   c00004f0 <memset>
c001b653:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b659:	31 d2                	xor    edx,edx
c001b65b:	01 f0                	add    eax,esi
c001b65d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b660:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b667:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b66d:	01 ee                	add    esi,ebp
c001b66f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b673:	83 c4 10             	add    esp,0x10
c001b676:	c1 e5 0d             	shl    ebp,0xd
c001b679:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b67f:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b685:	83 c6 20             	add    esi,0x20
c001b688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b68c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b692:	01 e8                	add    eax,ebp
c001b694:	01 d0                	add    eax,edx
c001b696:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b699:	52                   	push   edx
c001b69a:	68 00 01 00 00       	push   0x100
c001b69f:	6a 00                	push   0x0
c001b6a1:	50                   	push   eax
c001b6a2:	e8 49 4e fe ff       	call   c00004f0 <memset>
c001b6a7:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b6ad:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b6b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6b8:	83 c4 10             	add    esp,0x10
c001b6bb:	01 e8                	add    eax,ebp
c001b6bd:	01 d0                	add    eax,edx
c001b6bf:	81 c2 00 01 00 00    	add    edx,0x100
c001b6c5:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b6c8:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b6ce:	75 af                	jne    c001b67f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b6d0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b6d7:	50                   	push   eax
c001b6d8:	50                   	push   eax
c001b6d9:	53                   	push   ebx
c001b6da:	57                   	push   edi
c001b6db:	e8 b4 fe ff ff       	call   c001b594 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b6e0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b6e7:	83 c4 2c             	add    esp,0x2c
c001b6ea:	5b                   	pop    ebx
c001b6eb:	5e                   	pop    esi
c001b6ec:	5f                   	pop    edi
c001b6ed:	5d                   	pop    ebp
c001b6ee:	c3                   	ret    
c001b6ef:	90                   	nop

c001b6f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b6f0:	55                   	push   ebp
c001b6f1:	57                   	push   edi
c001b6f2:	56                   	push   esi
c001b6f3:	53                   	push   ebx
c001b6f4:	31 db                	xor    ebx,ebx
c001b6f6:	83 ec 0c             	sub    esp,0xc
c001b6f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b701:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b704:	f7 c7 01 00 00 00    	test   edi,0x1
c001b70a:	74 7a                	je     c001b786 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b70c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b710:	89 d8                	mov    eax,ebx
c001b712:	c1 e0 07             	shl    eax,0x7
c001b715:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b71c:	55                   	push   ebp
c001b71d:	56                   	push   esi
c001b71e:	e8 2b fe ff ff       	call   c001b54e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b723:	5a                   	pop    edx
c001b724:	59                   	pop    ecx
c001b725:	83 f8 01             	cmp    eax,0x1
c001b728:	75 21                	jne    c001b74b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b72a:	50                   	push   eax
c001b72b:	53                   	push   ebx
c001b72c:	55                   	push   ebp
c001b72d:	56                   	push   esi
c001b72e:	e8 ab fe ff ff       	call   c001b5de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b733:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b73a:	e8 27 c3 fe ff       	call   c0007a66 <malloc>
c001b73f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b742:	89 c5                	mov    ebp,eax
c001b744:	e8 a5 10 00 00       	call   c001c7ee <SATA::SATA()>
c001b749:	eb 24                	jmp    c001b76f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b74b:	83 f8 04             	cmp    eax,0x4
c001b74e:	75 36                	jne    c001b786 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b750:	51                   	push   ecx
c001b751:	53                   	push   ebx
c001b752:	55                   	push   ebp
c001b753:	56                   	push   esi
c001b754:	e8 85 fe ff ff       	call   c001b5de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b759:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b760:	e8 01 c3 fe ff       	call   c0007a66 <malloc>
c001b765:	89 04 24             	mov    DWORD PTR [esp],eax
c001b768:	89 c5                	mov    ebp,eax
c001b76a:	e8 d5 17 00 00       	call   c001cf44 <SATAPI::SATAPI()>
c001b76f:	58                   	pop    eax
c001b770:	5a                   	pop    edx
c001b771:	55                   	push   ebp
c001b772:	56                   	push   esi
c001b773:	e8 9a 06 ff ff       	call   c000be12 <Device::addChild(Device*)>
c001b778:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b77b:	56                   	push   esi
c001b77c:	6a 00                	push   0x0
c001b77e:	53                   	push   ebx
c001b77f:	55                   	push   ebp
c001b780:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b783:	83 c4 20             	add    esp,0x20
c001b786:	d1 ef                	shr    edi,1
c001b788:	43                   	inc    ebx
c001b789:	83 fb 20             	cmp    ebx,0x20
c001b78c:	0f 85 72 ff ff ff    	jne    c001b704 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b792:	83 c4 0c             	add    esp,0xc
c001b795:	5b                   	pop    ebx
c001b796:	5e                   	pop    esi
c001b797:	5f                   	pop    edi
c001b798:	5d                   	pop    ebp
c001b799:	c3                   	ret    

c001b79a <SATABus::open(int, int, void*)>:
c001b79a:	83 ec 14             	sub    esp,0x14
c001b79d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7a1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b7a7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b7ad:	52                   	push   edx
c001b7ae:	50                   	push   eax
c001b7af:	e8 3c ff ff ff       	call   c001b6f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b7b4:	31 c0                	xor    eax,eax
c001b7b6:	83 c4 1c             	add    esp,0x1c
c001b7b9:	c3                   	ret    

c001b7ba <ATA::close(int, int, void*)>:
c001b7ba:	83 ec 0c             	sub    esp,0xc
c001b7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b7c7:	85 c0                	test   eax,eax
c001b7c9:	74 0c                	je     c001b7d7 <ATA::close(int, int, void*)+0x1d>
c001b7cb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7cd:	83 ec 0c             	sub    esp,0xc
c001b7d0:	50                   	push   eax
c001b7d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	31 c0                	xor    eax,eax
c001b7d9:	83 c4 0c             	add    esp,0xc
c001b7dc:	c3                   	ret    
c001b7dd:	90                   	nop

c001b7de <ATA::powerSaving(PowerSavingLevel)>:
c001b7de:	c3                   	ret    
c001b7df:	90                   	nop

c001b7e0 <ATA::ATA()>:
c001b7e0:	83 ec 1c             	sub    esp,0x1c
c001b7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e7:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001b7ef:	c7 44 24 04 15 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021815
c001b7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7fa:	e8 d9 09 ff ff       	call   c000c1d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b7ff:	ba 88 17 02 c0       	mov    edx,0xc0021788
c001b804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b808:	89 10                	mov    DWORD PTR [eax],edx
c001b80a:	90                   	nop
c001b80b:	83 c4 1c             	add    esp,0x1c
c001b80e:	c3                   	ret    
c001b80f:	90                   	nop

c001b810 <ATA::flush(bool)>:
c001b810:	53                   	push   ebx
c001b811:	83 ec 08             	sub    esp,0x8
c001b814:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b819:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b81d:	19 c0                	sbb    eax,eax
c001b81f:	83 e0 fd             	and    eax,0xfffffffd
c001b822:	05 ea 00 00 00       	add    eax,0xea
c001b827:	50                   	push   eax
c001b828:	6a 07                	push   0x7
c001b82a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b831:	50                   	push   eax
c001b832:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b838:	e8 61 f1 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b83d:	83 c4 0c             	add    esp,0xc
c001b840:	6a 00                	push   0x0
c001b842:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b849:	50                   	push   eax
c001b84a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b850:	e8 d5 fb ff ff       	call   c001b42a <IDE::polling(unsigned char, unsigned int)>
c001b855:	83 c4 18             	add    esp,0x18
c001b858:	5b                   	pop    ebx
c001b859:	c3                   	ret    

c001b85a <ATA::readyForCommand()>:
c001b85a:	56                   	push   esi
c001b85b:	53                   	push   ebx
c001b85c:	53                   	push   ebx
c001b85d:	31 db                	xor    ebx,ebx
c001b85f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b863:	51                   	push   ecx
c001b864:	6a 0c                	push   0xc
c001b866:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b86d:	50                   	push   eax
c001b86e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b874:	e8 d3 f1 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001b879:	83 c4 10             	add    esp,0x10
c001b87c:	a8 88                	test   al,0x88
c001b87e:	74 1f                	je     c001b89f <ATA::readyForCommand()+0x45>
c001b880:	43                   	inc    ebx
c001b881:	83 fb 63             	cmp    ebx,0x63
c001b884:	7e dd                	jle    c001b863 <ATA::readyForCommand()+0x9>
c001b886:	83 ec 0c             	sub    esp,0xc
c001b889:	6a 0a                	push   0xa
c001b88b:	e8 9c 9a ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001b890:	83 c4 10             	add    esp,0x10
c001b893:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b899:	75 c8                	jne    c001b863 <ATA::readyForCommand()+0x9>
c001b89b:	31 c0                	xor    eax,eax
c001b89d:	eb 02                	jmp    c001b8a1 <ATA::readyForCommand()+0x47>
c001b89f:	b0 01                	mov    al,0x1
c001b8a1:	5a                   	pop    edx
c001b8a2:	5b                   	pop    ebx
c001b8a3:	5e                   	pop    esi
c001b8a4:	c3                   	ret    
c001b8a5:	90                   	nop

c001b8a6 <ATA::access(unsigned long long, int, void*, bool)>:
c001b8a6:	55                   	push   ebp
c001b8a7:	57                   	push   edi
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	83 ec 2c             	sub    esp,0x2c
c001b8ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b8b1:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001b8b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001b8b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b8bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b8c1:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001b8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8cb:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8d5:	c1 e0 06             	shl    eax,0x6
c001b8d8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b8e0:	74 5c                	je     c001b93e <ATA::access(unsigned long long, int, void*, bool)+0x98>
c001b8e2:	89 ea                	mov    edx,ebp
c001b8e4:	89 f8                	mov    eax,edi
c001b8e6:	c1 ea 1c             	shr    edx,0x1c
c001b8e9:	0f ac e8 1c          	shrd   eax,ebp,0x1c
c001b8ed:	89 d1                	mov    ecx,edx
c001b8ef:	09 c1                	or     ecx,eax
c001b8f1:	74 25                	je     c001b918 <ATA::access(unsigned long long, int, void*, bool)+0x72>
c001b8f3:	31 db                	xor    ebx,ebx
c001b8f5:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b8fc:	89 ea                	mov    edx,ebp
c001b8fe:	89 f8                	mov    eax,edi
c001b900:	0f ad d0             	shrd   eax,edx,cl
c001b903:	d3 ea                	shr    edx,cl
c001b905:	f6 c1 20             	test   cl,0x20
c001b908:	74 02                	je     c001b90c <ATA::access(unsigned long long, int, void*, bool)+0x66>
c001b90a:	89 d0                	mov    eax,edx
c001b90c:	88 44 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],al
c001b910:	43                   	inc    ebx
c001b911:	83 fb 06             	cmp    ebx,0x6
c001b914:	75 df                	jne    c001b8f5 <ATA::access(unsigned long long, int, void*, bool)+0x4f>
c001b916:	eb 73                	jmp    c001b98b <ATA::access(unsigned long long, int, void*, bool)+0xe5>
c001b918:	66 89 7c 24 1a       	mov    WORD PTR [esp+0x1a],di
c001b91d:	89 f8                	mov    eax,edi
c001b91f:	b3 01                	mov    bl,0x1
c001b921:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b928:	0f ac e8 10          	shrd   eax,ebp,0x10
c001b92c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b930:	89 f8                	mov    eax,edi
c001b932:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b937:	c1 e8 18             	shr    eax,0x18
c001b93a:	89 c2                	mov    edx,eax
c001b93c:	eb 51                	jmp    c001b98f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001b93e:	6a 00                	push   0x0
c001b940:	31 db                	xor    ebx,ebx
c001b942:	6a 3f                	push   0x3f
c001b944:	55                   	push   ebp
c001b945:	57                   	push   edi
c001b946:	e8 c5 2a 00 00       	call   c001e410 <__umoddi3>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	fe c0                	inc    al
c001b950:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b954:	6a 00                	push   0x0
c001b956:	68 f0 03 00 00       	push   0x3f0
c001b95b:	55                   	push   ebp
c001b95c:	57                   	push   edi
c001b95d:	e8 ae 29 00 00       	call   c001e310 <__udivdi3>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b96a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b971:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b976:	6a 00                	push   0x0
c001b978:	6a 3f                	push   0x3f
c001b97a:	55                   	push   ebp
c001b97b:	57                   	push   edi
c001b97c:	e8 8f 29 00 00       	call   c001e310 <__udivdi3>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	88 c2                	mov    dl,al
c001b986:	80 e2 0f             	and    dl,0xf
c001b989:	eb 04                	jmp    c001b98f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001b98b:	31 d2                	xor    edx,edx
c001b98d:	b3 02                	mov    bl,0x2
c001b98f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b993:	50                   	push   eax
c001b994:	6a 00                	push   0x0
c001b996:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b99d:	50                   	push   eax
c001b99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b9a2:	e8 df f1 ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001b9a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001b9aa:	e8 ab fe ff ff       	call   c001b85a <ATA::readyForCommand()>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b9b6:	84 c0                	test   al,al
c001b9b8:	75 0a                	jne    c001b9c4 <ATA::access(unsigned long long, int, void*, bool)+0x11e>
c001b9ba:	bb 01 00 00 00       	mov    ebx,0x1
c001b9bf:	e9 77 02 00 00       	jmp    c001bc3b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001b9c4:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001b9ca:	8b 8e 6c 01 00 00    	mov    ecx,DWORD PTR [esi+0x16c]
c001b9d0:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001b9d7:	c1 e0 04             	shl    eax,0x4
c001b9da:	08 c2                	or     dl,al
c001b9dc:	84 db                	test   bl,bl
c001b9de:	75 05                	jne    c001b9e5 <ATA::access(unsigned long long, int, void*, bool)+0x13f>
c001b9e0:	80 ca a0             	or     dl,0xa0
c001b9e3:	eb 03                	jmp    c001b9e8 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001b9e5:	80 ca e0             	or     dl,0xe0
c001b9e8:	0f b6 d2             	movzx  edx,dl
c001b9eb:	52                   	push   edx
c001b9ec:	6a 06                	push   0x6
c001b9ee:	57                   	push   edi
c001b9ef:	51                   	push   ecx
c001b9f0:	e8 a9 ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9f5:	83 c4 10             	add    esp,0x10
c001b9f8:	6a 00                	push   0x0
c001b9fa:	6a 01                	push   0x1
c001b9fc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba03:	50                   	push   eax
c001ba04:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba0a:	e8 8f ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba0f:	83 c4 10             	add    esp,0x10
c001ba12:	80 fb 02             	cmp    bl,0x2
c001ba15:	75 6e                	jne    c001ba85 <ATA::access(unsigned long long, int, void*, bool)+0x1df>
c001ba17:	6a 00                	push   0x0
c001ba19:	6a 08                	push   0x8
c001ba1b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba22:	50                   	push   eax
c001ba23:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba29:	e8 70 ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba2e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ba33:	50                   	push   eax
c001ba34:	6a 09                	push   0x9
c001ba36:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba3d:	50                   	push   eax
c001ba3e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba44:	e8 55 ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba49:	83 c4 20             	add    esp,0x20
c001ba4c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ba51:	50                   	push   eax
c001ba52:	6a 0a                	push   0xa
c001ba54:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba5b:	50                   	push   eax
c001ba5c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba62:	e8 37 ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba67:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ba6c:	50                   	push   eax
c001ba6d:	6a 0b                	push   0xb
c001ba6f:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba76:	50                   	push   eax
c001ba77:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba7d:	e8 1c ef ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba82:	83 c4 20             	add    esp,0x20
c001ba85:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ba8a:	50                   	push   eax
c001ba8b:	6a 02                	push   0x2
c001ba8d:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba94:	50                   	push   eax
c001ba95:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba9b:	e8 fe ee ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baa0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001baa5:	50                   	push   eax
c001baa6:	6a 03                	push   0x3
c001baa8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001baaf:	50                   	push   eax
c001bab0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bab6:	e8 e3 ee ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001babb:	83 c4 20             	add    esp,0x20
c001babe:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bac3:	50                   	push   eax
c001bac4:	6a 04                	push   0x4
c001bac6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bacd:	50                   	push   eax
c001bace:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bad4:	e8 c5 ee ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bad9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bade:	50                   	push   eax
c001badf:	6a 05                	push   0x5
c001bae1:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bae8:	50                   	push   eax
c001bae9:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001baef:	e8 aa ee ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baf4:	83 c4 20             	add    esp,0x20
c001baf7:	80 fb 02             	cmp    bl,0x2
c001bafa:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001baff:	75 07                	jne    c001bb08 <ATA::access(unsigned long long, int, void*, bool)+0x262>
c001bb01:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bb06:	75 41                	jne    c001bb49 <ATA::access(unsigned long long, int, void*, bool)+0x2a3>
c001bb08:	80 fb 02             	cmp    bl,0x2
c001bb0b:	0f 95 c1             	setne  cl
c001bb0e:	74 0c                	je     c001bb1c <ATA::access(unsigned long long, int, void*, bool)+0x276>
c001bb10:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bb15:	b8 30 00 00 00       	mov    eax,0x30
c001bb1a:	75 32                	jne    c001bb4e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb1c:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001bb20:	80 f2 01             	xor    dl,0x1
c001bb23:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bb28:	74 09                	je     c001bb33 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001bb2a:	84 d2                	test   dl,dl
c001bb2c:	b8 24 00 00 00       	mov    eax,0x24
c001bb31:	75 1b                	jne    c001bb4e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb33:	84 c9                	test   cl,cl
c001bb35:	0f 84 7f fe ff ff    	je     c001b9ba <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bb3b:	84 d2                	test   dl,dl
c001bb3d:	b8 20 00 00 00       	mov    eax,0x20
c001bb42:	75 0a                	jne    c001bb4e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb44:	e9 71 fe ff ff       	jmp    c001b9ba <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bb49:	b8 34 00 00 00       	mov    eax,0x34
c001bb4e:	50                   	push   eax
c001bb4f:	6a 07                	push   0x7
c001bb51:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb58:	50                   	push   eax
c001bb59:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb5f:	e8 3a ee ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb64:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001bb68:	83 c4 10             	add    esp,0x10
c001bb6b:	85 db                	test   ebx,ebx
c001bb6d:	0f 84 ae 00 00 00    	je     c001bc21 <ATA::access(unsigned long long, int, void*, bool)+0x37b>
c001bb73:	50                   	push   eax
c001bb74:	6a 01                	push   0x1
c001bb76:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb7d:	50                   	push   eax
c001bb7e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb84:	e8 a1 f8 ff ff       	call   c001b42a <IDE::polling(unsigned char, unsigned int)>
c001bb89:	83 c4 10             	add    esp,0x10
c001bb8c:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001bb92:	84 c0                	test   al,al
c001bb94:	74 20                	je     c001bbb6 <ATA::access(unsigned long long, int, void*, bool)+0x310>
c001bb96:	0f b6 d8             	movzx  ebx,al
c001bb99:	53                   	push   ebx
c001bb9a:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001bba1:	50                   	push   eax
c001bba2:	0f b6 c2             	movzx  eax,dl
c001bba5:	50                   	push   eax
c001bba6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbac:	e8 a7 f7 ff ff       	call   c001b358 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bbb1:	e9 82 00 00 00       	jmp    c001bc38 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bbb6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bbbb:	74 33                	je     c001bbf0 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001bbbd:	31 ed                	xor    ebp,ebp
c001bbbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bbc3:	0f b7 3c 68          	movzx  edi,WORD PTR [eax+ebp*2]
c001bbc7:	50                   	push   eax
c001bbc8:	50                   	push   eax
c001bbc9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbd0:	50                   	push   eax
c001bbd1:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbd7:	e8 b0 ed ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001bbdc:	89 c2                	mov    edx,eax
c001bbde:	89 f8                	mov    eax,edi
c001bbe0:	66 ef                	out    dx,ax
c001bbe2:	45                   	inc    ebp
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001bbec:	75 d1                	jne    c001bbbf <ATA::access(unsigned long long, int, void*, bool)+0x319>
c001bbee:	eb 23                	jmp    c001bc13 <ATA::access(unsigned long long, int, void*, bool)+0x36d>
c001bbf0:	51                   	push   ecx
c001bbf1:	0f b6 c2             	movzx  eax,dl
c001bbf4:	51                   	push   ecx
c001bbf5:	50                   	push   eax
c001bbf6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbfc:	e8 8b ed ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001bc01:	b9 00 01 00 00       	mov    ecx,0x100
c001bc06:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bc0a:	89 c2                	mov    edx,eax
c001bc0c:	fc                   	cld    
c001bc0d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bc1b:	4b                   	dec    ebx
c001bc1c:	e9 4a ff ff ff       	jmp    c001bb6b <ATA::access(unsigned long long, int, void*, bool)+0x2c5>
c001bc21:	31 db                	xor    ebx,ebx
c001bc23:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bc28:	74 11                	je     c001bc3b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001bc2a:	50                   	push   eax
c001bc2b:	50                   	push   eax
c001bc2c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bc31:	50                   	push   eax
c001bc32:	56                   	push   esi
c001bc33:	e8 d8 fb ff ff       	call   c001b810 <ATA::flush(bool)>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	83 c4 2c             	add    esp,0x2c
c001bc3e:	89 d8                	mov    eax,ebx
c001bc40:	5b                   	pop    ebx
c001bc41:	5e                   	pop    esi
c001bc42:	5f                   	pop    edi
c001bc43:	5d                   	pop    ebp
c001bc44:	c3                   	ret    
c001bc45:	90                   	nop

c001bc46 <ATA::detectCHS()>:
c001bc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc4a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bc50:	c1 e0 06             	shl    eax,0x6
c001bc53:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bc59:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bc63:	c7 44 24 04 6c 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002176c
c001bc6b:	e9 c5 4a ff ff       	jmp    c0010735 <KePanic(char const*)>

c001bc70 <ATA::open(int, int, void*)>:
c001bc70:	53                   	push   ebx
c001bc71:	83 ec 08             	sub    esp,0x8
c001bc74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc80:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bc86:	c1 e0 06             	shl    eax,0x6
c001bc89:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bc8f:	01 d0                	add    eax,edx
c001bc91:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bc98:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bc9e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bca5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bcaf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bcb6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bcbc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bcc3:	75 0c                	jne    c001bcd1 <ATA::open(int, int, void*)+0x61>
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	53                   	push   ebx
c001bcc9:	e8 78 ff ff ff       	call   c001bc46 <ATA::detectCHS()>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bcd7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bcdd:	c1 e0 06             	shl    eax,0x6
c001bce0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bce7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bcf1:	d1 e8                	shr    eax,1
c001bcf3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bcf9:	6a 04                	push   0x4
c001bcfb:	6a 0c                	push   0xc
c001bcfd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd04:	50                   	push   eax
c001bd05:	52                   	push   edx
c001bd06:	e8 93 ec ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0b:	90                   	nop
c001bd0c:	90                   	nop
c001bd0d:	6a 00                	push   0x0
c001bd0f:	6a 0c                	push   0xc
c001bd11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd18:	50                   	push   eax
c001bd19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd1f:	e8 7a ec ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd24:	83 c4 14             	add    esp,0x14
c001bd27:	53                   	push   ebx
c001bd28:	e8 13 05 ff ff       	call   c000c240 <PhysicalDisk::startCache()>
c001bd2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd30:	e8 6c 16 ff ff       	call   c000d3a1 <createPartitionsForDisk(PhysicalDisk*)>
c001bd35:	83 c4 18             	add    esp,0x18
c001bd38:	31 c0                	xor    eax,eax
c001bd3a:	5b                   	pop    ebx
c001bd3b:	c3                   	ret    

c001bd3c <combineCharAndColour(char, unsigned char)>:
c001bd3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd41:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bd47:	c1 e0 08             	shl    eax,0x8
c001bd4a:	09 d0                	or     eax,edx
c001bd4c:	c3                   	ret    

c001bd4d <combineColours(unsigned char, unsigned char)>:
c001bd4d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd52:	c1 e0 04             	shl    eax,0x4
c001bd55:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001bd59:	c3                   	ret    

c001bd5a <ATA::read(unsigned long long, int, void*)>:
c001bd5a:	55                   	push   ebp
c001bd5b:	57                   	push   edi
c001bd5c:	56                   	push   esi
c001bd5d:	be 04 00 00 00       	mov    esi,0x4
c001bd62:	53                   	push   ebx
c001bd63:	83 ec 0c             	sub    esp,0xc
c001bd66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bd6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd72:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd76:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bd79:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bd7f:	0f 87 a9 01 00 00    	ja     c001bf2e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bd85:	85 c9                	test   ecx,ecx
c001bd87:	be 06 00 00 00       	mov    esi,0x6
c001bd8c:	0f 84 9c 01 00 00    	je     c001bf2e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bd92:	55                   	push   ebp
c001bd93:	55                   	push   ebp
c001bd94:	6a 00                	push   0x0
c001bd96:	51                   	push   ecx
c001bd97:	53                   	push   ebx
c001bd98:	52                   	push   edx
c001bd99:	50                   	push   eax
c001bd9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bd9e:	e8 03 fb ff ff       	call   c001b8a6 <ATA::access(unsigned long long, int, void*, bool)>
c001bda3:	83 c4 20             	add    esp,0x20
c001bda6:	85 c0                	test   eax,eax
c001bda8:	89 c6                	mov    esi,eax
c001bdaa:	0f 85 79 01 00 00    	jne    c001bf29 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001bdb0:	50                   	push   eax
c001bdb1:	bd 10 27 00 00       	mov    ebp,0x2710
c001bdb6:	50                   	push   eax
c001bdb7:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001bdbd:	6a 0f                	push   0xf
c001bdbf:	6a 00                	push   0x0
c001bdc1:	89 da                	mov    edx,ebx
c001bdc3:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001bdc9:	e8 7f ff ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001bdce:	59                   	pop    ecx
c001bdcf:	b9 0a 00 00 00       	mov    ecx,0xa
c001bdd4:	5b                   	pop    ebx
c001bdd5:	0f b6 d8             	movzx  ebx,al
c001bdd8:	89 d0                	mov    eax,edx
c001bdda:	53                   	push   ebx
c001bddb:	99                   	cdq    
c001bddc:	f7 fd                	idiv   ebp
c001bdde:	99                   	cdq    
c001bddf:	f7 f9                	idiv   ecx
c001bde1:	80 c2 30             	add    dl,0x30
c001bde4:	0f b6 d2             	movzx  edx,dl
c001bde7:	52                   	push   edx
c001bde8:	e8 4f ff ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bded:	5f                   	pop    edi
c001bdee:	bf e8 03 00 00       	mov    edi,0x3e8
c001bdf3:	5a                   	pop    edx
c001bdf4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bdfa:	53                   	push   ebx
c001bdfb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be00:	99                   	cdq    
c001be01:	f7 ff                	idiv   edi
c001be03:	99                   	cdq    
c001be04:	f7 f9                	idiv   ecx
c001be06:	88 d0                	mov    al,dl
c001be08:	04 30                	add    al,0x30
c001be0a:	0f b6 c0             	movzx  eax,al
c001be0d:	50                   	push   eax
c001be0e:	e8 29 ff ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001be13:	5f                   	pop    edi
c001be14:	bf 64 00 00 00       	mov    edi,0x64
c001be19:	5a                   	pop    edx
c001be1a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001be20:	53                   	push   ebx
c001be21:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be26:	99                   	cdq    
c001be27:	f7 ff                	idiv   edi
c001be29:	99                   	cdq    
c001be2a:	f7 f9                	idiv   ecx
c001be2c:	88 d0                	mov    al,dl
c001be2e:	04 30                	add    al,0x30
c001be30:	0f b6 c0             	movzx  eax,al
c001be33:	50                   	push   eax
c001be34:	e8 03 ff ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001be39:	5a                   	pop    edx
c001be3a:	5a                   	pop    edx
c001be3b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001be41:	53                   	push   ebx
c001be42:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be47:	99                   	cdq    
c001be48:	f7 f9                	idiv   ecx
c001be4a:	99                   	cdq    
c001be4b:	f7 f9                	idiv   ecx
c001be4d:	88 d0                	mov    al,dl
c001be4f:	04 30                	add    al,0x30
c001be51:	0f b6 c0             	movzx  eax,al
c001be54:	50                   	push   eax
c001be55:	e8 e2 fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001be5a:	5a                   	pop    edx
c001be5b:	5a                   	pop    edx
c001be5c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001be62:	53                   	push   ebx
c001be63:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be68:	99                   	cdq    
c001be69:	f7 f9                	idiv   ecx
c001be6b:	88 d0                	mov    al,dl
c001be6d:	04 30                	add    al,0x30
c001be6f:	0f b6 c0             	movzx  eax,al
c001be72:	50                   	push   eax
c001be73:	e8 c4 fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001be78:	5a                   	pop    edx
c001be79:	5a                   	pop    edx
c001be7a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001be80:	53                   	push   ebx
c001be81:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001be86:	99                   	cdq    
c001be87:	f7 fd                	idiv   ebp
c001be89:	99                   	cdq    
c001be8a:	f7 f9                	idiv   ecx
c001be8c:	88 d0                	mov    al,dl
c001be8e:	04 30                	add    al,0x30
c001be90:	0f b6 c0             	movzx  eax,al
c001be93:	50                   	push   eax
c001be94:	e8 a3 fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001be99:	5d                   	pop    ebp
c001be9a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001be9f:	5a                   	pop    edx
c001bea0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bea6:	53                   	push   ebx
c001bea7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001beac:	99                   	cdq    
c001bead:	f7 fd                	idiv   ebp
c001beaf:	99                   	cdq    
c001beb0:	f7 f9                	idiv   ecx
c001beb2:	88 d0                	mov    al,dl
c001beb4:	04 30                	add    al,0x30
c001beb6:	0f b6 c0             	movzx  eax,al
c001beb9:	50                   	push   eax
c001beba:	e8 7d fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bebf:	5d                   	pop    ebp
c001bec0:	5a                   	pop    edx
c001bec1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bec7:	53                   	push   ebx
c001bec8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001becd:	99                   	cdq    
c001bece:	f7 ff                	idiv   edi
c001bed0:	99                   	cdq    
c001bed1:	f7 f9                	idiv   ecx
c001bed3:	88 d0                	mov    al,dl
c001bed5:	04 30                	add    al,0x30
c001bed7:	0f b6 c0             	movzx  eax,al
c001beda:	50                   	push   eax
c001bedb:	e8 5c fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bee0:	5f                   	pop    edi
c001bee1:	5d                   	pop    ebp
c001bee2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bee8:	53                   	push   ebx
c001bee9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001beee:	99                   	cdq    
c001beef:	f7 f9                	idiv   ecx
c001bef1:	99                   	cdq    
c001bef2:	f7 f9                	idiv   ecx
c001bef4:	88 d0                	mov    al,dl
c001bef6:	04 30                	add    al,0x30
c001bef8:	0f b6 c0             	movzx  eax,al
c001befb:	50                   	push   eax
c001befc:	e8 3b fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bf01:	5a                   	pop    edx
c001bf02:	5f                   	pop    edi
c001bf03:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bf09:	53                   	push   ebx
c001bf0a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf0f:	99                   	cdq    
c001bf10:	f7 f9                	idiv   ecx
c001bf12:	80 c2 30             	add    dl,0x30
c001bf15:	0f b6 d2             	movzx  edx,dl
c001bf18:	52                   	push   edx
c001bf19:	e8 1e fe ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bf1e:	83 c4 10             	add    esp,0x10
c001bf21:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bf27:	eb 05                	jmp    c001bf2e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bf29:	be 01 00 00 00       	mov    esi,0x1
c001bf2e:	83 c4 0c             	add    esp,0xc
c001bf31:	89 f0                	mov    eax,esi
c001bf33:	5b                   	pop    ebx
c001bf34:	5e                   	pop    esi
c001bf35:	5f                   	pop    edi
c001bf36:	5d                   	pop    ebp
c001bf37:	c3                   	ret    

c001bf38 <ATA::write(unsigned long long, int, void*)>:
c001bf38:	55                   	push   ebp
c001bf39:	57                   	push   edi
c001bf3a:	56                   	push   esi
c001bf3b:	be 04 00 00 00       	mov    esi,0x4
c001bf40:	53                   	push   ebx
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bf48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf50:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf54:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bf57:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bf5d:	0f 87 a5 01 00 00    	ja     c001c108 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001bf63:	85 c9                	test   ecx,ecx
c001bf65:	be 06 00 00 00       	mov    esi,0x6
c001bf6a:	0f 84 98 01 00 00    	je     c001c108 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001bf70:	55                   	push   ebp
c001bf71:	55                   	push   ebp
c001bf72:	6a 01                	push   0x1
c001bf74:	51                   	push   ecx
c001bf75:	53                   	push   ebx
c001bf76:	52                   	push   edx
c001bf77:	50                   	push   eax
c001bf78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bf7c:	e8 25 f9 ff ff       	call   c001b8a6 <ATA::access(unsigned long long, int, void*, bool)>
c001bf81:	83 c4 20             	add    esp,0x20
c001bf84:	85 c0                	test   eax,eax
c001bf86:	89 c6                	mov    esi,eax
c001bf88:	0f 85 75 01 00 00    	jne    c001c103 <ATA::write(unsigned long long, int, void*)+0x1cb>
c001bf8e:	50                   	push   eax
c001bf8f:	bd 10 27 00 00       	mov    ebp,0x2710
c001bf94:	50                   	push   eax
c001bf95:	6a 0f                	push   0xf
c001bf97:	6a 00                	push   0x0
c001bf99:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001bf9f:	e8 a9 fd ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001bfa4:	5a                   	pop    edx
c001bfa5:	59                   	pop    ecx
c001bfa6:	b9 0a 00 00 00       	mov    ecx,0xa
c001bfab:	0f b6 d8             	movzx  ebx,al
c001bfae:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bfb3:	53                   	push   ebx
c001bfb4:	99                   	cdq    
c001bfb5:	f7 fd                	idiv   ebp
c001bfb7:	99                   	cdq    
c001bfb8:	f7 f9                	idiv   ecx
c001bfba:	88 d0                	mov    al,dl
c001bfbc:	04 30                	add    al,0x30
c001bfbe:	0f b6 c0             	movzx  eax,al
c001bfc1:	50                   	push   eax
c001bfc2:	e8 75 fd ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bfc7:	5f                   	pop    edi
c001bfc8:	bf e8 03 00 00       	mov    edi,0x3e8
c001bfcd:	5a                   	pop    edx
c001bfce:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bfd4:	53                   	push   ebx
c001bfd5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bfda:	99                   	cdq    
c001bfdb:	f7 ff                	idiv   edi
c001bfdd:	99                   	cdq    
c001bfde:	f7 f9                	idiv   ecx
c001bfe0:	88 d0                	mov    al,dl
c001bfe2:	04 30                	add    al,0x30
c001bfe4:	0f b6 c0             	movzx  eax,al
c001bfe7:	50                   	push   eax
c001bfe8:	e8 4f fd ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001bfed:	5f                   	pop    edi
c001bfee:	bf 64 00 00 00       	mov    edi,0x64
c001bff3:	5a                   	pop    edx
c001bff4:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bffa:	53                   	push   ebx
c001bffb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c000:	99                   	cdq    
c001c001:	f7 ff                	idiv   edi
c001c003:	99                   	cdq    
c001c004:	f7 f9                	idiv   ecx
c001c006:	88 d0                	mov    al,dl
c001c008:	04 30                	add    al,0x30
c001c00a:	0f b6 c0             	movzx  eax,al
c001c00d:	50                   	push   eax
c001c00e:	e8 29 fd ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c013:	5a                   	pop    edx
c001c014:	5a                   	pop    edx
c001c015:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c01b:	53                   	push   ebx
c001c01c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c021:	99                   	cdq    
c001c022:	f7 f9                	idiv   ecx
c001c024:	99                   	cdq    
c001c025:	f7 f9                	idiv   ecx
c001c027:	88 d0                	mov    al,dl
c001c029:	04 30                	add    al,0x30
c001c02b:	0f b6 c0             	movzx  eax,al
c001c02e:	50                   	push   eax
c001c02f:	e8 08 fd ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c034:	5a                   	pop    edx
c001c035:	5a                   	pop    edx
c001c036:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c03c:	53                   	push   ebx
c001c03d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c042:	99                   	cdq    
c001c043:	f7 f9                	idiv   ecx
c001c045:	88 d0                	mov    al,dl
c001c047:	04 30                	add    al,0x30
c001c049:	0f b6 c0             	movzx  eax,al
c001c04c:	50                   	push   eax
c001c04d:	e8 ea fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c052:	5a                   	pop    edx
c001c053:	5a                   	pop    edx
c001c054:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c05a:	53                   	push   ebx
c001c05b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c060:	99                   	cdq    
c001c061:	f7 fd                	idiv   ebp
c001c063:	99                   	cdq    
c001c064:	f7 f9                	idiv   ecx
c001c066:	88 d0                	mov    al,dl
c001c068:	04 30                	add    al,0x30
c001c06a:	0f b6 c0             	movzx  eax,al
c001c06d:	50                   	push   eax
c001c06e:	e8 c9 fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c073:	5d                   	pop    ebp
c001c074:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c079:	5a                   	pop    edx
c001c07a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c080:	53                   	push   ebx
c001c081:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c086:	99                   	cdq    
c001c087:	f7 fd                	idiv   ebp
c001c089:	99                   	cdq    
c001c08a:	f7 f9                	idiv   ecx
c001c08c:	88 d0                	mov    al,dl
c001c08e:	04 30                	add    al,0x30
c001c090:	0f b6 c0             	movzx  eax,al
c001c093:	50                   	push   eax
c001c094:	e8 a3 fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c099:	5d                   	pop    ebp
c001c09a:	5a                   	pop    edx
c001c09b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c0a1:	53                   	push   ebx
c001c0a2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0a7:	99                   	cdq    
c001c0a8:	f7 ff                	idiv   edi
c001c0aa:	99                   	cdq    
c001c0ab:	f7 f9                	idiv   ecx
c001c0ad:	88 d0                	mov    al,dl
c001c0af:	04 30                	add    al,0x30
c001c0b1:	0f b6 c0             	movzx  eax,al
c001c0b4:	50                   	push   eax
c001c0b5:	e8 82 fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c0ba:	5f                   	pop    edi
c001c0bb:	5d                   	pop    ebp
c001c0bc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c0c2:	53                   	push   ebx
c001c0c3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0c8:	99                   	cdq    
c001c0c9:	f7 f9                	idiv   ecx
c001c0cb:	99                   	cdq    
c001c0cc:	f7 f9                	idiv   ecx
c001c0ce:	88 d0                	mov    al,dl
c001c0d0:	04 30                	add    al,0x30
c001c0d2:	0f b6 c0             	movzx  eax,al
c001c0d5:	50                   	push   eax
c001c0d6:	e8 61 fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c0db:	5a                   	pop    edx
c001c0dc:	5f                   	pop    edi
c001c0dd:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c0e3:	53                   	push   ebx
c001c0e4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0e9:	99                   	cdq    
c001c0ea:	f7 f9                	idiv   ecx
c001c0ec:	80 c2 30             	add    dl,0x30
c001c0ef:	0f b6 d2             	movzx  edx,dl
c001c0f2:	52                   	push   edx
c001c0f3:	e8 44 fc ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001c0f8:	83 c4 10             	add    esp,0x10
c001c0fb:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c101:	eb 05                	jmp    c001c108 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c103:	be 01 00 00 00       	mov    esi,0x1
c001c108:	83 c4 0c             	add    esp,0xc
c001c10b:	89 f0                	mov    eax,esi
c001c10d:	5b                   	pop    ebx
c001c10e:	5e                   	pop    esi
c001c10f:	5f                   	pop    edi
c001c110:	5d                   	pop    ebp
c001c111:	c3                   	ret    

c001c112 <ATAPI::write(unsigned long long, int, void*)>:
c001c112:	b8 03 00 00 00       	mov    eax,0x3
c001c117:	c3                   	ret    

c001c118 <ATAPI::close(int, int, void*)>:
c001c118:	83 ec 0c             	sub    esp,0xc
c001c11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c125:	85 c0                	test   eax,eax
c001c127:	74 0c                	je     c001c135 <ATAPI::close(int, int, void*)+0x1d>
c001c129:	8b 10                	mov    edx,DWORD PTR [eax]
c001c12b:	83 ec 0c             	sub    esp,0xc
c001c12e:	50                   	push   eax
c001c12f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	31 c0                	xor    eax,eax
c001c137:	83 c4 0c             	add    esp,0xc
c001c13a:	c3                   	ret    
c001c13b:	90                   	nop

c001c13c <ATAPI::ATAPI()>:
c001c13c:	83 ec 1c             	sub    esp,0x1c
c001c13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c143:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c14b:	c7 44 24 04 b5 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218b5
c001c153:	89 04 24             	mov    DWORD PTR [esp],eax
c001c156:	e8 7d 00 ff ff       	call   c000c1d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c15b:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001c160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c164:	89 10                	mov    DWORD PTR [eax],edx
c001c166:	90                   	nop
c001c167:	83 c4 1c             	add    esp,0x1c
c001c16a:	c3                   	ret    
c001c16b:	90                   	nop

c001c16c <ATAPI::readyForCommand()>:
c001c16c:	56                   	push   esi
c001c16d:	53                   	push   ebx
c001c16e:	53                   	push   ebx
c001c16f:	31 db                	xor    ebx,ebx
c001c171:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c175:	51                   	push   ecx
c001c176:	6a 0c                	push   0xc
c001c178:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c17f:	50                   	push   eax
c001c180:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c186:	e8 c1 e8 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	a8 88                	test   al,0x88
c001c190:	74 25                	je     c001c1b7 <ATAPI::readyForCommand()+0x4b>
c001c192:	43                   	inc    ebx
c001c193:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c199:	7e da                	jle    c001c175 <ATAPI::readyForCommand()+0x9>
c001c19b:	83 ec 0c             	sub    esp,0xc
c001c19e:	68 5e 01 00 00       	push   0x15e
c001c1a3:	e8 84 91 ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001c1a8:	83 c4 10             	add    esp,0x10
c001c1ab:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c1b1:	75 c2                	jne    c001c175 <ATAPI::readyForCommand()+0x9>
c001c1b3:	31 c0                	xor    eax,eax
c001c1b5:	eb 02                	jmp    c001c1b9 <ATAPI::readyForCommand()+0x4d>
c001c1b7:	b0 01                	mov    al,0x1
c001c1b9:	5a                   	pop    edx
c001c1ba:	5b                   	pop    ebx
c001c1bb:	5e                   	pop    esi
c001c1bc:	c3                   	ret    
c001c1bd:	90                   	nop

c001c1be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c1be:	55                   	push   ebp
c001c1bf:	57                   	push   edi
c001c1c0:	56                   	push   esi
c001c1c1:	53                   	push   ebx
c001c1c2:	83 ec 20             	sub    esp,0x20
c001c1c5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c1c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c1cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c1d1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1d5:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c1d9:	6a 01                	push   0x1
c001c1db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c1e2:	50                   	push   eax
c001c1e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c1e9:	e8 98 e9 ff ff       	call   c001ab86 <IDE::enableIRQs(unsigned char, bool)>
c001c1ee:	5e                   	pop    esi
c001c1ef:	58                   	pop    eax
c001c1f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c1f7:	50                   	push   eax
c001c1f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c1fe:	e8 75 e7 ff ff       	call   c001a978 <IDE::prepareInterrupt(unsigned char)>
c001c203:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c206:	e8 61 ff ff ff       	call   c001c16c <ATAPI::readyForCommand()>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	84 c0                	test   al,al
c001c210:	75 0a                	jne    c001c21c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c212:	bb 01 00 00 00       	mov    ebx,0x1
c001c217:	e9 57 02 00 00       	jmp    c001c473 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c21c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c222:	c0 e0 04             	shl    al,0x4
c001c225:	0f b6 c0             	movzx  eax,al
c001c228:	50                   	push   eax
c001c229:	6a 06                	push   0x6
c001c22b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c232:	50                   	push   eax
c001c233:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c239:	e8 60 e7 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c23e:	6a 00                	push   0x0
c001c240:	6a 01                	push   0x1
c001c242:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c249:	50                   	push   eax
c001c24a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c250:	e8 49 e7 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c255:	83 c4 20             	add    esp,0x20
c001c258:	0f b6 c3             	movzx  eax,bl
c001c25b:	50                   	push   eax
c001c25c:	0f b6 df             	movzx  ebx,bh
c001c25f:	6a 04                	push   0x4
c001c261:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c268:	50                   	push   eax
c001c269:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c26f:	e8 2a e7 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c274:	53                   	push   ebx
c001c275:	6a 05                	push   0x5
c001c277:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c27e:	50                   	push   eax
c001c27f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c285:	e8 14 e7 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c28a:	83 c4 20             	add    esp,0x20
c001c28d:	68 a0 00 00 00       	push   0xa0
c001c292:	6a 07                	push   0x7
c001c294:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c29b:	50                   	push   eax
c001c29c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2a2:	e8 f7 e6 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a7:	83 c4 0c             	add    esp,0xc
c001c2aa:	6a 01                	push   0x1
c001c2ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c2b3:	50                   	push   eax
c001c2b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2ba:	e8 6b f1 ff ff       	call   c001b42a <IDE::polling(unsigned char, unsigned int)>
c001c2bf:	83 c4 10             	add    esp,0x10
c001c2c2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c2c8:	84 c0                	test   al,al
c001c2ca:	74 23                	je     c001c2ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c2cc:	0f b6 d8             	movzx  ebx,al
c001c2cf:	0f b6 d2             	movzx  edx,dl
c001c2d2:	53                   	push   ebx
c001c2d3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c2da:	50                   	push   eax
c001c2db:	52                   	push   edx
c001c2dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2e2:	e8 71 f0 ff ff       	call   c001b358 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	e9 84 01 00 00       	jmp    c001c473 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c2ef:	53                   	push   ebx
c001c2f0:	0f b6 d2             	movzx  edx,dl
c001c2f3:	53                   	push   ebx
c001c2f4:	52                   	push   edx
c001c2f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2fb:	e8 8c e6 ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001c300:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c304:	b9 06 00 00 00       	mov    ecx,0x6
c001c309:	89 c2                	mov    edx,eax
c001c30b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c30e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c312:	83 c4 10             	add    esp,0x10
c001c315:	85 db                	test   ebx,ebx
c001c317:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c31d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c324:	0f 84 e9 00 00 00    	je     c001c413 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001c32a:	51                   	push   ecx
c001c32b:	51                   	push   ecx
c001c32c:	52                   	push   edx
c001c32d:	50                   	push   eax
c001c32e:	e8 b5 e7 ff ff       	call   c001aae8 <IDE::waitInterrupt(unsigned char)>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	84 c0                	test   al,al
c001c338:	0f 84 d4 fe ff ff    	je     c001c212 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c33e:	56                   	push   esi
c001c33f:	56                   	push   esi
c001c340:	31 f6                	xor    esi,esi
c001c342:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c349:	50                   	push   eax
c001c34a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c350:	e8 23 e6 ff ff       	call   c001a978 <IDE::prepareInterrupt(unsigned char)>
c001c355:	83 c4 0c             	add    esp,0xc
c001c358:	6a 04                	push   0x4
c001c35a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c361:	50                   	push   eax
c001c362:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c368:	e8 df e6 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001c36d:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001c371:	83 c4 0c             	add    esp,0xc
c001c374:	6a 05                	push   0x5
c001c376:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c37d:	50                   	push   eax
c001c37e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c384:	e8 c3 e6 ff ff       	call   c001aa4c <IDE::read(unsigned char, unsigned char)>
c001c389:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c38e:	0f b6 c0             	movzx  eax,al
c001c391:	c1 e0 08             	shl    eax,0x8
c001c394:	09 d0                	or     eax,edx
c001c396:	d1 f8                	sar    eax,1
c001c398:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c39c:	83 c4 10             	add    esp,0x10
c001c39f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c3a4:	74 54                	je     c001c3fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001c3a6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c3aa:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c3b0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c3b7:	75 0b                	jne    c001c3c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c3b9:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c3bc:	01 cd                	add    ebp,ecx
c001c3be:	4b                   	dec    ebx
c001c3bf:	e9 51 ff ff ff       	jmp    c001c315 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c3c4:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001c3c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3cd:	51                   	push   ecx
c001c3ce:	51                   	push   ecx
c001c3cf:	52                   	push   edx
c001c3d0:	50                   	push   eax
c001c3d1:	e8 b6 e5 ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001c3d6:	89 c2                	mov    edx,eax
c001c3d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3dc:	66 ef                	out    dx,ax
c001c3de:	46                   	inc    esi
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	eb c2                	jmp    c001c3a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001c3e4:	51                   	push   ecx
c001c3e5:	51                   	push   ecx
c001c3e6:	52                   	push   edx
c001c3e7:	50                   	push   eax
c001c3e8:	e8 9f e5 ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001c3ed:	89 c2                	mov    edx,eax
c001c3ef:	66 ed                	in     ax,dx
c001c3f1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	46                   	inc    esi
c001c3fa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c3fe:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c404:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c40b:	75 d7                	jne    c001c3e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c40d:	01 f6                	add    esi,esi
c001c40f:	01 f5                	add    ebp,esi
c001c411:	eb ab                	jmp    c001c3be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001c413:	51                   	push   ecx
c001c414:	51                   	push   ecx
c001c415:	52                   	push   edx
c001c416:	50                   	push   eax
c001c417:	e8 cc e6 ff ff       	call   c001aae8 <IDE::waitInterrupt(unsigned char)>
c001c41c:	83 c4 10             	add    esp,0x10
c001c41f:	84 c0                	test   al,al
c001c421:	0f 84 eb fd ff ff    	je     c001c212 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c427:	52                   	push   edx
c001c428:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c42d:	52                   	push   edx
c001c42e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c435:	50                   	push   eax
c001c436:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c43c:	e8 37 e5 ff ff       	call   c001a978 <IDE::prepareInterrupt(unsigned char)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	50                   	push   eax
c001c445:	50                   	push   eax
c001c446:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c44d:	50                   	push   eax
c001c44e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c454:	e8 33 e5 ff ff       	call   c001a98c <IDE::getBase(unsigned char)>
c001c459:	0f b7 c0             	movzx  eax,ax
c001c45c:	8d 50 07             	lea    edx,[eax+0x7]
c001c45f:	ec                   	in     al,dx
c001c460:	83 c4 10             	add    esp,0x10
c001c463:	a8 88                	test   al,0x88
c001c465:	74 0a                	je     c001c471 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c467:	4b                   	dec    ebx
c001c468:	75 da                	jne    c001c444 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001c46a:	bb 02 00 00 00       	mov    ebx,0x2
c001c46f:	eb 02                	jmp    c001c473 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c471:	31 db                	xor    ebx,ebx
c001c473:	83 c4 1c             	add    esp,0x1c
c001c476:	89 d8                	mov    eax,ebx
c001c478:	5b                   	pop    ebx
c001c479:	5e                   	pop    esi
c001c47a:	5f                   	pop    edi
c001c47b:	5d                   	pop    ebp
c001c47c:	c3                   	ret    
c001c47d:	90                   	nop

c001c47e <ATAPI::diskRemoved()>:
c001c47e:	53                   	push   ebx
c001c47f:	83 ec 14             	sub    esp,0x14
c001c482:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c486:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c48d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c493:	e8 06 0c ff ff       	call   c000d09e <LogicalDisk::unmount()>
c001c498:	58                   	pop    eax
c001c499:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c49f:	e8 a8 15 ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c001c4a4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c4aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c4ae:	83 c4 18             	add    esp,0x18
c001c4b1:	5b                   	pop    ebx
c001c4b2:	e9 85 15 ff ff       	jmp    c000da3c <VCache::invalidateReadBuffer()>
c001c4b7:	90                   	nop

c001c4b8 <ATAPI::eject()>:
c001c4b8:	57                   	push   edi
c001c4b9:	b9 03 00 00 00       	mov    ecx,0x3
c001c4be:	53                   	push   ebx
c001c4bf:	83 ec 14             	sub    esp,0x14
c001c4c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c4c6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c4ca:	fc                   	cld    
c001c4cb:	31 c0                	xor    eax,eax
c001c4cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c4cf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c4d4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c4d9:	50                   	push   eax
c001c4da:	50                   	push   eax
c001c4db:	6a 00                	push   0x0
c001c4dd:	6a 00                	push   0x0
c001c4df:	6a 00                	push   0x0
c001c4e1:	6a 02                	push   0x2
c001c4e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c4e7:	50                   	push   eax
c001c4e8:	53                   	push   ebx
c001c4e9:	e8 d0 fc ff ff       	call   c001c1be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c4ee:	83 c4 14             	add    esp,0x14
c001c4f1:	53                   	push   ebx
c001c4f2:	e8 87 ff ff ff       	call   c001c47e <ATAPI::diskRemoved()>
c001c4f7:	83 c4 24             	add    esp,0x24
c001c4fa:	31 c0                	xor    eax,eax
c001c4fc:	5b                   	pop    ebx
c001c4fd:	5f                   	pop    edi
c001c4fe:	c3                   	ret    
c001c4ff:	90                   	nop

c001c500 <ATAPI::diskInserted()>:
c001c500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c504:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c50b:	c3                   	ret    

c001c50c <ATAPI::detectMedia()>:
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	83 ec 28             	sub    esp,0x28
c001c511:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c515:	6a 0c                	push   0xc
c001c517:	6a 00                	push   0x0
c001c519:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c51d:	56                   	push   esi
c001c51e:	e8 cd 3f fe ff       	call   c00004f0 <memset>
c001c523:	58                   	pop    eax
c001c524:	5a                   	pop    edx
c001c525:	6a 00                	push   0x0
c001c527:	6a 00                	push   0x0
c001c529:	6a 00                	push   0x0
c001c52b:	6a 00                	push   0x0
c001c52d:	56                   	push   esi
c001c52e:	53                   	push   ebx
c001c52f:	e8 8a fc ff ff       	call   c001c1be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c534:	83 c4 1c             	add    esp,0x1c
c001c537:	6a 0c                	push   0xc
c001c539:	6a 00                	push   0x0
c001c53b:	56                   	push   esi
c001c53c:	e8 af 3f fe ff       	call   c00004f0 <memset>
c001c541:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c546:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c54b:	59                   	pop    ecx
c001c54c:	58                   	pop    eax
c001c54d:	6a 01                	push   0x1
c001c54f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c553:	50                   	push   eax
c001c554:	6a 00                	push   0x0
c001c556:	6a 12                	push   0x12
c001c558:	56                   	push   esi
c001c559:	53                   	push   ebx
c001c55a:	e8 5f fc ff ff       	call   c001c1be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c55f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c563:	83 c4 20             	add    esp,0x20
c001c566:	24 7f                	and    al,0x7f
c001c568:	3c 70                	cmp    al,0x70
c001c56a:	74 15                	je     c001c581 <ATAPI::detectMedia()+0x75>
c001c56c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c573:	75 0c                	jne    c001c581 <ATAPI::detectMedia()+0x75>
c001c575:	83 ec 0c             	sub    esp,0xc
c001c578:	53                   	push   ebx
c001c579:	e8 82 ff ff ff       	call   c001c500 <ATAPI::diskInserted()>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c585:	24 0f                	and    al,0xf
c001c587:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c58c:	75 18                	jne    c001c5a6 <ATAPI::detectMedia()+0x9a>
c001c58e:	3c 02                	cmp    al,0x2
c001c590:	75 14                	jne    c001c5a6 <ATAPI::detectMedia()+0x9a>
c001c592:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c599:	74 24                	je     c001c5bf <ATAPI::detectMedia()+0xb3>
c001c59b:	83 ec 0c             	sub    esp,0xc
c001c59e:	53                   	push   ebx
c001c59f:	e8 da fe ff ff       	call   c001c47e <ATAPI::diskRemoved()>
c001c5a4:	eb 16                	jmp    c001c5bc <ATAPI::detectMedia()+0xb0>
c001c5a6:	84 c0                	test   al,al
c001c5a8:	75 15                	jne    c001c5bf <ATAPI::detectMedia()+0xb3>
c001c5aa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c5b1:	75 0c                	jne    c001c5bf <ATAPI::detectMedia()+0xb3>
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	53                   	push   ebx
c001c5b7:	e8 44 ff ff ff       	call   c001c500 <ATAPI::diskInserted()>
c001c5bc:	83 c4 10             	add    esp,0x10
c001c5bf:	83 c4 24             	add    esp,0x24
c001c5c2:	5b                   	pop    ebx
c001c5c3:	5e                   	pop    esi
c001c5c4:	c3                   	ret    
c001c5c5:	90                   	nop

c001c5c6 <ATAPI::open(int, int, void*)>:
c001c5c6:	56                   	push   esi
c001c5c7:	53                   	push   ebx
c001c5c8:	50                   	push   eax
c001c5c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5d5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c5db:	c1 e0 06             	shl    eax,0x6
c001c5de:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c5e4:	01 d0                	add    eax,edx
c001c5e6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c5ed:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c5f3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c5fa:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c604:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c60b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c611:	6a 04                	push   0x4
c001c613:	6a 0c                	push   0xc
c001c615:	51                   	push   ecx
c001c616:	52                   	push   edx
c001c617:	e8 82 e3 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c61c:	90                   	nop
c001c61d:	90                   	nop
c001c61e:	6a 00                	push   0x0
c001c620:	6a 0c                	push   0xc
c001c622:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c629:	50                   	push   eax
c001c62a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c630:	e8 69 e3 ff ff       	call   c001a99e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c635:	83 c4 14             	add    esp,0x14
c001c638:	68 78 01 00 00       	push   0x178
c001c63d:	e8 24 b4 fe ff       	call   c0007a66 <malloc>
c001c642:	83 c4 0c             	add    esp,0xc
c001c645:	6a 00                	push   0x0
c001c647:	68 ff ff ff 7f       	push   0x7fffffff
c001c64c:	6a 00                	push   0x0
c001c64e:	6a 00                	push   0x0
c001c650:	53                   	push   ebx
c001c651:	68 67 19 02 c0       	push   0xc0021967
c001c656:	89 c6                	mov    esi,eax
c001c658:	50                   	push   eax
c001c659:	e8 80 08 ff ff       	call   c000cede <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c65e:	83 c4 14             	add    esp,0x14
c001c661:	56                   	push   esi
c001c662:	e8 39 09 ff ff       	call   c000cfa0 <LogicalDisk::assignDriveLetter()>
c001c667:	5a                   	pop    edx
c001c668:	59                   	pop    ecx
c001c669:	0f be c0             	movsx  eax,al
c001c66c:	50                   	push   eax
c001c66d:	68 b8 17 02 c0       	push   0xc00217b8
c001c672:	e8 6f e3 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001c677:	58                   	pop    eax
c001c678:	5a                   	pop    edx
c001c679:	56                   	push   esi
c001c67a:	53                   	push   ebx
c001c67b:	e8 92 f7 fe ff       	call   c000be12 <Device::addChild(Device*)>
c001c680:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c689:	e8 b2 fb fe ff       	call   c000c240 <PhysicalDisk::startCache()>
c001c68e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c695:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c698:	e8 6f fe ff ff       	call   c001c50c <ATAPI::detectMedia()>
c001c69d:	83 c4 14             	add    esp,0x14
c001c6a0:	31 c0                	xor    eax,eax
c001c6a2:	5b                   	pop    ebx
c001c6a3:	5e                   	pop    esi
c001c6a4:	c3                   	ret    
c001c6a5:	90                   	nop

c001c6a6 <ATAPI::read(unsigned long long, int, void*)>:
c001c6a6:	55                   	push   ebp
c001c6a7:	57                   	push   edi
c001c6a8:	56                   	push   esi
c001c6a9:	53                   	push   ebx
c001c6aa:	83 ec 1c             	sub    esp,0x1c
c001c6ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c6b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c6b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c6b9:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c6c0:	74 3a                	je     c001c6fc <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c6c2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c6c6:	b9 03 00 00 00       	mov    ecx,0x3
c001c6cb:	fc                   	cld    
c001c6cc:	31 c0                	xor    eax,eax
c001c6ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c6d0:	0f ce                	bswap  esi
c001c6d2:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c6d6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c6db:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c6df:	50                   	push   eax
c001c6e0:	50                   	push   eax
c001c6e1:	53                   	push   ebx
c001c6e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c6e6:	c1 e3 0b             	shl    ebx,0xb
c001c6e9:	6a 00                	push   0x0
c001c6eb:	53                   	push   ebx
c001c6ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c6f0:	50                   	push   eax
c001c6f1:	55                   	push   ebp
c001c6f2:	e8 c7 fa ff ff       	call   c001c1be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c6f7:	83 c4 20             	add    esp,0x20
c001c6fa:	eb 1a                	jmp    c001c716 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	55                   	push   ebp
c001c700:	e8 07 fe ff ff       	call   c001c50c <ATAPI::detectMedia()>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c70f:	75 b1                	jne    c001c6c2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c711:	b8 02 00 00 00       	mov    eax,0x2
c001c716:	83 c4 1c             	add    esp,0x1c
c001c719:	5b                   	pop    ebx
c001c71a:	5e                   	pop    esi
c001c71b:	5f                   	pop    edi
c001c71c:	5d                   	pop    ebp
c001c71d:	c3                   	ret    

c001c71e <SATA::close(int, int, void*)>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c72b:	85 c0                	test   eax,eax
c001c72d:	74 0c                	je     c001c73b <SATA::close(int, int, void*)+0x1d>
c001c72f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c731:	83 ec 0c             	sub    esp,0xc
c001c734:	50                   	push   eax
c001c735:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	31 c0                	xor    eax,eax
c001c73d:	83 c4 0c             	add    esp,0xc
c001c740:	c3                   	ret    
c001c741:	90                   	nop

c001c742 <SATA::powerSaving(PowerSavingLevel)>:
c001c742:	c3                   	ret    
c001c743:	90                   	nop

c001c744 <SATA::open(int, int, void*)>:
c001c744:	56                   	push   esi
c001c745:	53                   	push   ebx
c001c746:	50                   	push   eax
c001c747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c74b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c74f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c759:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c75f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c763:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c76d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c777:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c77e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c784:	e8 f3 b5 fe ff       	call   c0007d7c <Phys::allocatePage()>
c001c789:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c78f:	89 c6                	mov    esi,eax
c001c791:	e8 e6 b5 fe ff       	call   c0007d7c <Phys::allocatePage()>
c001c796:	81 c6 00 10 00 00    	add    esi,0x1000
c001c79c:	39 c6                	cmp    esi,eax
c001c79e:	74 10                	je     c001c7b0 <SATA::open(int, int, void*)+0x6c>
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	68 00 18 02 c0       	push   0xc0021800
c001c7a8:	e8 88 3f ff ff       	call   c0010735 <KePanic(char const*)>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	6a 02                	push   0x2
c001c7b5:	e8 d6 cd fe ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c001c7ba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c7c0:	6a 03                	push   0x3
c001c7c2:	50                   	push   eax
c001c7c3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c7c9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001c7cf:	e8 de d4 fe ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c7d4:	83 c4 14             	add    esp,0x14
c001c7d7:	53                   	push   ebx
c001c7d8:	e8 63 fa fe ff       	call   c000c240 <PhysicalDisk::startCache()>
c001c7dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e0:	e8 bc 0b ff ff       	call   c000d3a1 <createPartitionsForDisk(PhysicalDisk*)>
c001c7e5:	83 c4 14             	add    esp,0x14
c001c7e8:	31 c0                	xor    eax,eax
c001c7ea:	5b                   	pop    ebx
c001c7eb:	5e                   	pop    esi
c001c7ec:	c3                   	ret    
c001c7ed:	90                   	nop

c001c7ee <SATA::SATA()>:
c001c7ee:	83 ec 1c             	sub    esp,0x1c
c001c7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f5:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001c7fd:	c7 44 24 04 14 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021814
c001c805:	89 04 24             	mov    DWORD PTR [esp],eax
c001c808:	e8 cb f9 fe ff       	call   c000c1d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c80d:	ba 84 18 02 c0       	mov    edx,0xc0021884
c001c812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c816:	89 10                	mov    DWORD PTR [eax],edx
c001c818:	90                   	nop
c001c819:	83 c4 1c             	add    esp,0x1c
c001c81c:	c3                   	ret    
c001c81d:	90                   	nop

c001c81e <SATA::access(unsigned long long, int, void*, bool)>:
c001c81e:	55                   	push   ebp
c001c81f:	57                   	push   edi
c001c820:	56                   	push   esi
c001c821:	53                   	push   ebx
c001c822:	83 ec 2c             	sub    esp,0x2c
c001c825:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c829:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c82e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c836:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c83a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c83e:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001c842:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c846:	7e 10                	jle    c001c858 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	68 24 18 02 c0       	push   0xc0021824
c001c850:	e8 e0 3e ff ff       	call   c0010735 <KePanic(char const*)>
c001c855:	83 c4 10             	add    esp,0x10
c001c858:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c85e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001c864:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001c86a:	89 e8                	mov    eax,ebp
c001c86c:	c1 e0 07             	shl    eax,0x7
c001c86f:	01 d0                	add    eax,edx
c001c871:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c87b:	8d 45 02             	lea    eax,[ebp+0x2]
c001c87e:	51                   	push   ecx
c001c87f:	c1 e0 07             	shl    eax,0x7
c001c882:	51                   	push   ecx
c001c883:	01 d0                	add    eax,edx
c001c885:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c889:	50                   	push   eax
c001c88a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c890:	e8 87 ec ff ff       	call   c001b51c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c895:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c899:	83 c4 10             	add    esp,0x10
c001c89c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001c8a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8a5:	0f 84 4e 01 00 00    	je     c001c9f9 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001c8ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c8af:	c1 e0 09             	shl    eax,0x9
c001c8b2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c8b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8bb:	74 0e                	je     c001c8cb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001c8bd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c8c3:	89 c1                	mov    ecx,eax
c001c8c5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c8c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c8cf:	8d 45 02             	lea    eax,[ebp+0x2]
c001c8d2:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c8d6:	c1 e0 07             	shl    eax,0x7
c001c8d9:	01 d0                	add    eax,edx
c001c8db:	8b 38                	mov    edi,DWORD PTR [eax]
c001c8dd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c8e3:	80 e1 01             	and    cl,0x1
c001c8e6:	c0 e1 06             	shl    cl,0x6
c001c8e9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001c8ef:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001c8f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8f9:	c1 e0 05             	shl    eax,0x5
c001c8fc:	01 c7                	add    edi,eax
c001c8fe:	8a 07                	mov    al,BYTE PTR [edi]
c001c900:	24 bf                	and    al,0xbf
c001c902:	08 c8                	or     al,cl
c001c904:	88 07                	mov    BYTE PTR [edi],al
c001c906:	8b 07                	mov    eax,DWORD PTR [edi]
c001c908:	25 e0 ff 00 00       	and    eax,0xffe0
c001c90d:	0d 05 00 01 00       	or     eax,0x10005
c001c912:	89 07                	mov    DWORD PTR [edi],eax
c001c914:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c91a:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001c920:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001c926:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001c929:	50                   	push   eax
c001c92a:	68 90 00 00 00       	push   0x90
c001c92f:	6a 00                	push   0x0
c001c931:	56                   	push   esi
c001c932:	e8 b9 3b fe ff       	call   c00004f0 <memset>
c001c937:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c93d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c941:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	48                   	dec    eax
c001c94f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c954:	89 c1                	mov    ecx,eax
c001c956:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c95c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c961:	09 c8                	or     eax,ecx
c001c963:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c969:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c96c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c973:	25 00 7f 00 00       	and    eax,0x7f00
c001c978:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c97c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001c981:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001c986:	66 89 06             	mov    WORD PTR [esi],ax
c001c989:	19 c0                	sbb    eax,eax
c001c98b:	24 f0                	and    al,0xf0
c001c98d:	04 35                	add    al,0x35
c001c98f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c992:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c996:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001c99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c99e:	c1 e8 10             	shr    eax,0x10
c001c9a1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9a8:	c1 e8 18             	shr    eax,0x18
c001c9ab:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c9ae:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c9b2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c9b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9b9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c9bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c9c0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c9c4:	89 ee                	mov    esi,ebp
c001c9c6:	31 c0                	xor    eax,eax
c001c9c8:	c1 e6 07             	shl    esi,0x7
c001c9cb:	01 d6                	add    esi,edx
c001c9cd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c9d3:	f6 c1 88             	test   cl,0x88
c001c9d6:	74 0a                	je     c001c9e2 <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001c9d8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c9dd:	74 0a                	je     c001c9e9 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001c9df:	40                   	inc    eax
c001c9e0:	eb eb                	jmp    c001c9cd <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001c9e2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c9e7:	75 17                	jne    c001ca00 <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001c9e9:	83 ec 0c             	sub    esp,0xc
c001c9ec:	68 5d 18 02 c0       	push   0xc002185d
c001c9f1:	e8 f0 df fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	b8 01 00 00 00       	mov    eax,0x1
c001c9fe:	eb 5b                	jmp    c001ca5b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001ca00:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ca04:	c1 e5 07             	shl    ebp,0x7
c001ca07:	b8 01 00 00 00       	mov    eax,0x1
c001ca0c:	01 d5                	add    ebp,edx
c001ca0e:	d3 e0                	shl    eax,cl
c001ca10:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ca16:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001ca1c:	85 d0                	test   eax,edx
c001ca1e:	74 16                	je     c001ca36 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001ca20:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001ca26:	0f ba e2 1e          	bt     edx,0x1e
c001ca2a:	73 ea                	jae    c001ca16 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	68 6b 18 02 c0       	push   0xc002186b
c001ca34:	eb bb                	jmp    c001c9f1 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001ca36:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001ca3c:	0f ba e0 1e          	bt     eax,0x1e
c001ca40:	72 b7                	jb     c001c9f9 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001ca42:	31 c0                	xor    eax,eax
c001ca44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ca49:	75 10                	jne    c001ca5b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001ca4b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ca51:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ca55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca5b:	83 c4 2c             	add    esp,0x2c
c001ca5e:	5b                   	pop    ebx
c001ca5f:	5e                   	pop    esi
c001ca60:	5f                   	pop    edi
c001ca61:	5d                   	pop    ebp
c001ca62:	c3                   	ret    
c001ca63:	90                   	nop

c001ca64 <SATA::read(unsigned long long, int, void*)>:
c001ca64:	55                   	push   ebp
c001ca65:	57                   	push   edi
c001ca66:	56                   	push   esi
c001ca67:	be 04 00 00 00       	mov    esi,0x4
c001ca6c:	53                   	push   ebx
c001ca6d:	83 ec 0c             	sub    esp,0xc
c001ca70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ca74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ca78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca7c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ca80:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ca83:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ca89:	0f 87 1c 02 00 00    	ja     c001ccab <SATA::read(unsigned long long, int, void*)+0x247>
c001ca8f:	85 c9                	test   ecx,ecx
c001ca91:	be 06 00 00 00       	mov    esi,0x6
c001ca96:	0f 84 0f 02 00 00    	je     c001ccab <SATA::read(unsigned long long, int, void*)+0x247>
c001ca9c:	56                   	push   esi
c001ca9d:	56                   	push   esi
c001ca9e:	6a 00                	push   0x0
c001caa0:	51                   	push   ecx
c001caa1:	53                   	push   ebx
c001caa2:	52                   	push   edx
c001caa3:	50                   	push   eax
c001caa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001caa8:	e8 71 fd ff ff       	call   c001c81e <SATA::access(unsigned long long, int, void*, bool)>
c001caad:	83 c4 20             	add    esp,0x20
c001cab0:	85 c0                	test   eax,eax
c001cab2:	89 c6                	mov    esi,eax
c001cab4:	0f 85 ec 01 00 00    	jne    c001cca6 <SATA::read(unsigned long long, int, void*)+0x242>
c001caba:	50                   	push   eax
c001cabb:	bd 10 27 00 00       	mov    ebp,0x2710
c001cac0:	50                   	push   eax
c001cac1:	6a 0f                	push   0xf
c001cac3:	6a 00                	push   0x0
c001cac5:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cacb:	bb 0a 00 00 00       	mov    ebx,0xa
c001cad0:	e8 78 f2 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cad5:	5a                   	pop    edx
c001cad6:	59                   	pop    ecx
c001cad7:	0f b6 c0             	movzx  eax,al
c001cada:	50                   	push   eax
c001cadb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cae0:	99                   	cdq    
c001cae1:	f7 fd                	idiv   ebp
c001cae3:	99                   	cdq    
c001cae4:	f7 fb                	idiv   ebx
c001cae6:	80 c2 30             	add    dl,0x30
c001cae9:	0f b6 d2             	movzx  edx,dl
c001caec:	52                   	push   edx
c001caed:	e8 4a f2 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001caf2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001caf8:	5f                   	pop    edi
c001caf9:	bf e8 03 00 00       	mov    edi,0x3e8
c001cafe:	58                   	pop    eax
c001caff:	6a 0f                	push   0xf
c001cb01:	6a 00                	push   0x0
c001cb03:	e8 45 f2 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cb08:	5a                   	pop    edx
c001cb09:	59                   	pop    ecx
c001cb0a:	0f b6 c0             	movzx  eax,al
c001cb0d:	50                   	push   eax
c001cb0e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb13:	99                   	cdq    
c001cb14:	f7 ff                	idiv   edi
c001cb16:	99                   	cdq    
c001cb17:	f7 fb                	idiv   ebx
c001cb19:	80 c2 30             	add    dl,0x30
c001cb1c:	0f b6 d2             	movzx  edx,dl
c001cb1f:	52                   	push   edx
c001cb20:	e8 17 f2 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cb25:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cb2b:	58                   	pop    eax
c001cb2c:	5a                   	pop    edx
c001cb2d:	6a 0f                	push   0xf
c001cb2f:	6a 00                	push   0x0
c001cb31:	e8 17 f2 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cb36:	59                   	pop    ecx
c001cb37:	b9 64 00 00 00       	mov    ecx,0x64
c001cb3c:	5a                   	pop    edx
c001cb3d:	0f b6 c0             	movzx  eax,al
c001cb40:	50                   	push   eax
c001cb41:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb46:	99                   	cdq    
c001cb47:	f7 f9                	idiv   ecx
c001cb49:	99                   	cdq    
c001cb4a:	f7 fb                	idiv   ebx
c001cb4c:	80 c2 30             	add    dl,0x30
c001cb4f:	0f b6 d2             	movzx  edx,dl
c001cb52:	52                   	push   edx
c001cb53:	e8 e4 f1 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cb58:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cb5e:	59                   	pop    ecx
c001cb5f:	58                   	pop    eax
c001cb60:	6a 0f                	push   0xf
c001cb62:	6a 00                	push   0x0
c001cb64:	e8 e4 f1 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cb69:	5a                   	pop    edx
c001cb6a:	59                   	pop    ecx
c001cb6b:	0f b6 c0             	movzx  eax,al
c001cb6e:	50                   	push   eax
c001cb6f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb74:	99                   	cdq    
c001cb75:	f7 fb                	idiv   ebx
c001cb77:	99                   	cdq    
c001cb78:	f7 fb                	idiv   ebx
c001cb7a:	80 c2 30             	add    dl,0x30
c001cb7d:	0f b6 d2             	movzx  edx,dl
c001cb80:	52                   	push   edx
c001cb81:	e8 b6 f1 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cb86:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cb8c:	58                   	pop    eax
c001cb8d:	5a                   	pop    edx
c001cb8e:	6a 0f                	push   0xf
c001cb90:	6a 00                	push   0x0
c001cb92:	e8 b6 f1 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cb97:	59                   	pop    ecx
c001cb98:	5a                   	pop    edx
c001cb99:	0f b6 c0             	movzx  eax,al
c001cb9c:	50                   	push   eax
c001cb9d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cba2:	99                   	cdq    
c001cba3:	f7 fb                	idiv   ebx
c001cba5:	80 c2 30             	add    dl,0x30
c001cba8:	0f b6 d2             	movzx  edx,dl
c001cbab:	52                   	push   edx
c001cbac:	e8 8b f1 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cbb1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cbb7:	59                   	pop    ecx
c001cbb8:	58                   	pop    eax
c001cbb9:	6a 0f                	push   0xf
c001cbbb:	6a 00                	push   0x0
c001cbbd:	e8 8b f1 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cbc2:	5a                   	pop    edx
c001cbc3:	59                   	pop    ecx
c001cbc4:	0f b6 c0             	movzx  eax,al
c001cbc7:	50                   	push   eax
c001cbc8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cbcd:	99                   	cdq    
c001cbce:	f7 fd                	idiv   ebp
c001cbd0:	99                   	cdq    
c001cbd1:	f7 fb                	idiv   ebx
c001cbd3:	80 c2 30             	add    dl,0x30
c001cbd6:	0f b6 d2             	movzx  edx,dl
c001cbd9:	52                   	push   edx
c001cbda:	e8 5d f1 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cbdf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cbe5:	5d                   	pop    ebp
c001cbe6:	58                   	pop    eax
c001cbe7:	6a 0f                	push   0xf
c001cbe9:	6a 00                	push   0x0
c001cbeb:	e8 5d f1 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cbf0:	5a                   	pop    edx
c001cbf1:	59                   	pop    ecx
c001cbf2:	0f b6 c0             	movzx  eax,al
c001cbf5:	50                   	push   eax
c001cbf6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cbfb:	99                   	cdq    
c001cbfc:	f7 ff                	idiv   edi
c001cbfe:	99                   	cdq    
c001cbff:	f7 fb                	idiv   ebx
c001cc01:	80 c2 30             	add    dl,0x30
c001cc04:	0f b6 d2             	movzx  edx,dl
c001cc07:	52                   	push   edx
c001cc08:	e8 2f f1 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cc0d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cc13:	5f                   	pop    edi
c001cc14:	5d                   	pop    ebp
c001cc15:	6a 0f                	push   0xf
c001cc17:	6a 00                	push   0x0
c001cc19:	e8 2f f1 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cc1e:	5a                   	pop    edx
c001cc1f:	59                   	pop    ecx
c001cc20:	b9 64 00 00 00       	mov    ecx,0x64
c001cc25:	0f b6 c0             	movzx  eax,al
c001cc28:	50                   	push   eax
c001cc29:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc2e:	99                   	cdq    
c001cc2f:	f7 f9                	idiv   ecx
c001cc31:	99                   	cdq    
c001cc32:	f7 fb                	idiv   ebx
c001cc34:	88 d0                	mov    al,dl
c001cc36:	04 30                	add    al,0x30
c001cc38:	0f b6 c0             	movzx  eax,al
c001cc3b:	50                   	push   eax
c001cc3c:	e8 fb f0 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cc41:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cc47:	5f                   	pop    edi
c001cc48:	5d                   	pop    ebp
c001cc49:	6a 0f                	push   0xf
c001cc4b:	6a 00                	push   0x0
c001cc4d:	e8 fb f0 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cc52:	5a                   	pop    edx
c001cc53:	59                   	pop    ecx
c001cc54:	0f b6 c0             	movzx  eax,al
c001cc57:	50                   	push   eax
c001cc58:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc5d:	99                   	cdq    
c001cc5e:	f7 fb                	idiv   ebx
c001cc60:	99                   	cdq    
c001cc61:	f7 fb                	idiv   ebx
c001cc63:	88 d0                	mov    al,dl
c001cc65:	04 30                	add    al,0x30
c001cc67:	0f b6 c0             	movzx  eax,al
c001cc6a:	50                   	push   eax
c001cc6b:	e8 cc f0 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cc70:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cc76:	5f                   	pop    edi
c001cc77:	5d                   	pop    ebp
c001cc78:	6a 0f                	push   0xf
c001cc7a:	6a 00                	push   0x0
c001cc7c:	e8 cc f0 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cc81:	5a                   	pop    edx
c001cc82:	59                   	pop    ecx
c001cc83:	0f b6 c0             	movzx  eax,al
c001cc86:	50                   	push   eax
c001cc87:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc8c:	99                   	cdq    
c001cc8d:	f7 fb                	idiv   ebx
c001cc8f:	80 c2 30             	add    dl,0x30
c001cc92:	0f b6 d2             	movzx  edx,dl
c001cc95:	52                   	push   edx
c001cc96:	e8 a1 f0 ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cca4:	eb 05                	jmp    c001ccab <SATA::read(unsigned long long, int, void*)+0x247>
c001cca6:	be 01 00 00 00       	mov    esi,0x1
c001ccab:	83 c4 0c             	add    esp,0xc
c001ccae:	89 f0                	mov    eax,esi
c001ccb0:	5b                   	pop    ebx
c001ccb1:	5e                   	pop    esi
c001ccb2:	5f                   	pop    edi
c001ccb3:	5d                   	pop    ebp
c001ccb4:	c3                   	ret    
c001ccb5:	90                   	nop

c001ccb6 <SATA::write(unsigned long long, int, void*)>:
c001ccb6:	55                   	push   ebp
c001ccb7:	57                   	push   edi
c001ccb8:	56                   	push   esi
c001ccb9:	53                   	push   ebx
c001ccba:	83 ec 0c             	sub    esp,0xc
c001ccbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ccc1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ccc5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cccd:	8d 70 ff             	lea    esi,[eax-0x1]
c001ccd0:	b8 04 00 00 00       	mov    eax,0x4
c001ccd5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ccdb:	0f 87 30 02 00 00    	ja     c001cf11 <SATA::write(unsigned long long, int, void*)+0x25b>
c001cce1:	85 db                	test   ebx,ebx
c001cce3:	b8 06 00 00 00       	mov    eax,0x6
c001cce8:	0f 84 23 02 00 00    	je     c001cf11 <SATA::write(unsigned long long, int, void*)+0x25b>
c001ccee:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccf2:	c1 e6 09             	shl    esi,0x9
c001ccf5:	01 de                	add    esi,ebx
c001ccf7:	50                   	push   eax
c001ccf8:	89 d7                	mov    edi,edx
c001ccfa:	50                   	push   eax
c001ccfb:	83 c7 01             	add    edi,0x1
c001ccfe:	6a 01                	push   0x1
c001cd00:	89 cd                	mov    ebp,ecx
c001cd02:	53                   	push   ebx
c001cd03:	83 d5 00             	adc    ebp,0x0
c001cd06:	6a 01                	push   0x1
c001cd08:	81 c3 00 02 00 00    	add    ebx,0x200
c001cd0e:	51                   	push   ecx
c001cd0f:	52                   	push   edx
c001cd10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd14:	e8 05 fb ff ff       	call   c001c81e <SATA::access(unsigned long long, int, void*, bool)>
c001cd19:	83 c4 20             	add    esp,0x20
c001cd1c:	39 f3                	cmp    ebx,esi
c001cd1e:	89 fa                	mov    edx,edi
c001cd20:	89 e9                	mov    ecx,ebp
c001cd22:	75 d3                	jne    c001ccf7 <SATA::write(unsigned long long, int, void*)+0x41>
c001cd24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cd28:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd2d:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd32:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001cd38:	50                   	push   eax
c001cd39:	50                   	push   eax
c001cd3a:	6a 0f                	push   0xf
c001cd3c:	6a 00                	push   0x0
c001cd3e:	e8 0a f0 ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cd43:	5a                   	pop    edx
c001cd44:	59                   	pop    ecx
c001cd45:	0f b6 c0             	movzx  eax,al
c001cd48:	50                   	push   eax
c001cd49:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd4e:	99                   	cdq    
c001cd4f:	f7 fd                	idiv   ebp
c001cd51:	99                   	cdq    
c001cd52:	f7 fb                	idiv   ebx
c001cd54:	88 d0                	mov    al,dl
c001cd56:	04 30                	add    al,0x30
c001cd58:	0f b6 c0             	movzx  eax,al
c001cd5b:	50                   	push   eax
c001cd5c:	e8 db ef ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cd61:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd67:	5e                   	pop    esi
c001cd68:	5f                   	pop    edi
c001cd69:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd6e:	6a 0f                	push   0xf
c001cd70:	6a 00                	push   0x0
c001cd72:	e8 d6 ef ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cd77:	5a                   	pop    edx
c001cd78:	59                   	pop    ecx
c001cd79:	0f b6 c0             	movzx  eax,al
c001cd7c:	50                   	push   eax
c001cd7d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd82:	99                   	cdq    
c001cd83:	f7 ff                	idiv   edi
c001cd85:	99                   	cdq    
c001cd86:	f7 fb                	idiv   ebx
c001cd88:	80 c2 30             	add    dl,0x30
c001cd8b:	0f b6 d2             	movzx  edx,dl
c001cd8e:	52                   	push   edx
c001cd8f:	e8 a8 ef ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cd94:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd9a:	5e                   	pop    esi
c001cd9b:	be 64 00 00 00       	mov    esi,0x64
c001cda0:	58                   	pop    eax
c001cda1:	6a 0f                	push   0xf
c001cda3:	6a 00                	push   0x0
c001cda5:	e8 a3 ef ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cdaa:	5a                   	pop    edx
c001cdab:	59                   	pop    ecx
c001cdac:	0f b6 c0             	movzx  eax,al
c001cdaf:	50                   	push   eax
c001cdb0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdb5:	99                   	cdq    
c001cdb6:	f7 fe                	idiv   esi
c001cdb8:	99                   	cdq    
c001cdb9:	f7 fb                	idiv   ebx
c001cdbb:	80 c2 30             	add    dl,0x30
c001cdbe:	0f b6 d2             	movzx  edx,dl
c001cdc1:	52                   	push   edx
c001cdc2:	e8 75 ef ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cdc7:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdcd:	58                   	pop    eax
c001cdce:	5a                   	pop    edx
c001cdcf:	6a 0f                	push   0xf
c001cdd1:	6a 00                	push   0x0
c001cdd3:	e8 75 ef ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cdd8:	59                   	pop    ecx
c001cdd9:	5a                   	pop    edx
c001cdda:	0f b6 c0             	movzx  eax,al
c001cddd:	50                   	push   eax
c001cdde:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cde3:	99                   	cdq    
c001cde4:	f7 fb                	idiv   ebx
c001cde6:	99                   	cdq    
c001cde7:	f7 fb                	idiv   ebx
c001cde9:	80 c2 30             	add    dl,0x30
c001cdec:	0f b6 d2             	movzx  edx,dl
c001cdef:	52                   	push   edx
c001cdf0:	e8 47 ef ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cdf5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdfb:	59                   	pop    ecx
c001cdfc:	58                   	pop    eax
c001cdfd:	6a 0f                	push   0xf
c001cdff:	6a 00                	push   0x0
c001ce01:	e8 47 ef ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001ce06:	5a                   	pop    edx
c001ce07:	59                   	pop    ecx
c001ce08:	0f b6 c0             	movzx  eax,al
c001ce0b:	50                   	push   eax
c001ce0c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce11:	99                   	cdq    
c001ce12:	f7 fb                	idiv   ebx
c001ce14:	80 c2 30             	add    dl,0x30
c001ce17:	0f b6 d2             	movzx  edx,dl
c001ce1a:	52                   	push   edx
c001ce1b:	e8 1c ef ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001ce20:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce26:	58                   	pop    eax
c001ce27:	5a                   	pop    edx
c001ce28:	6a 0f                	push   0xf
c001ce2a:	6a 00                	push   0x0
c001ce2c:	e8 1c ef ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001ce31:	59                   	pop    ecx
c001ce32:	5a                   	pop    edx
c001ce33:	0f b6 c0             	movzx  eax,al
c001ce36:	50                   	push   eax
c001ce37:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce3c:	99                   	cdq    
c001ce3d:	f7 fd                	idiv   ebp
c001ce3f:	99                   	cdq    
c001ce40:	f7 fb                	idiv   ebx
c001ce42:	80 c2 30             	add    dl,0x30
c001ce45:	0f b6 d2             	movzx  edx,dl
c001ce48:	52                   	push   edx
c001ce49:	e8 ee ee ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001ce4e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce54:	59                   	pop    ecx
c001ce55:	5d                   	pop    ebp
c001ce56:	6a 0f                	push   0xf
c001ce58:	6a 00                	push   0x0
c001ce5a:	e8 ee ee ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001ce5f:	5a                   	pop    edx
c001ce60:	59                   	pop    ecx
c001ce61:	0f b6 c0             	movzx  eax,al
c001ce64:	50                   	push   eax
c001ce65:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce6a:	99                   	cdq    
c001ce6b:	f7 ff                	idiv   edi
c001ce6d:	99                   	cdq    
c001ce6e:	f7 fb                	idiv   ebx
c001ce70:	88 d0                	mov    al,dl
c001ce72:	04 30                	add    al,0x30
c001ce74:	0f b6 c0             	movzx  eax,al
c001ce77:	50                   	push   eax
c001ce78:	e8 bf ee ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001ce7d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce83:	5f                   	pop    edi
c001ce84:	5d                   	pop    ebp
c001ce85:	6a 0f                	push   0xf
c001ce87:	6a 00                	push   0x0
c001ce89:	e8 bf ee ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001ce8e:	5a                   	pop    edx
c001ce8f:	59                   	pop    ecx
c001ce90:	0f b6 c0             	movzx  eax,al
c001ce93:	50                   	push   eax
c001ce94:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce99:	99                   	cdq    
c001ce9a:	f7 fe                	idiv   esi
c001ce9c:	99                   	cdq    
c001ce9d:	f7 fb                	idiv   ebx
c001ce9f:	88 d0                	mov    al,dl
c001cea1:	04 30                	add    al,0x30
c001cea3:	0f b6 c0             	movzx  eax,al
c001cea6:	50                   	push   eax
c001cea7:	e8 90 ee ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001ceac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ceb2:	5e                   	pop    esi
c001ceb3:	5f                   	pop    edi
c001ceb4:	6a 0f                	push   0xf
c001ceb6:	6a 00                	push   0x0
c001ceb8:	e8 90 ee ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001cebd:	5d                   	pop    ebp
c001cebe:	5a                   	pop    edx
c001cebf:	0f b6 c0             	movzx  eax,al
c001cec2:	50                   	push   eax
c001cec3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cec8:	99                   	cdq    
c001cec9:	f7 fb                	idiv   ebx
c001cecb:	99                   	cdq    
c001cecc:	f7 fb                	idiv   ebx
c001cece:	88 d0                	mov    al,dl
c001ced0:	04 30                	add    al,0x30
c001ced2:	0f b6 c0             	movzx  eax,al
c001ced5:	50                   	push   eax
c001ced6:	e8 61 ee ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cedb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cee1:	59                   	pop    ecx
c001cee2:	5e                   	pop    esi
c001cee3:	6a 0f                	push   0xf
c001cee5:	6a 00                	push   0x0
c001cee7:	e8 61 ee ff ff       	call   c001bd4d <combineColours(unsigned char, unsigned char)>
c001ceec:	5f                   	pop    edi
c001ceed:	5d                   	pop    ebp
c001ceee:	0f b6 c0             	movzx  eax,al
c001cef1:	50                   	push   eax
c001cef2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cef7:	99                   	cdq    
c001cef8:	f7 fb                	idiv   ebx
c001cefa:	80 c2 30             	add    dl,0x30
c001cefd:	0f b6 d2             	movzx  edx,dl
c001cf00:	52                   	push   edx
c001cf01:	e8 36 ee ff ff       	call   c001bd3c <combineCharAndColour(char, unsigned char)>
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf0f:	31 c0                	xor    eax,eax
c001cf11:	83 c4 0c             	add    esp,0xc
c001cf14:	5b                   	pop    ebx
c001cf15:	5e                   	pop    esi
c001cf16:	5f                   	pop    edi
c001cf17:	5d                   	pop    ebp
c001cf18:	c3                   	ret    
c001cf19:	90                   	nop

c001cf1a <SATAPI::write(unsigned long long, int, void*)>:
c001cf1a:	b8 03 00 00 00       	mov    eax,0x3
c001cf1f:	c3                   	ret    

c001cf20 <SATAPI::close(int, int, void*)>:
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf2d:	85 c0                	test   eax,eax
c001cf2f:	74 0c                	je     c001cf3d <SATAPI::close(int, int, void*)+0x1d>
c001cf31:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf33:	83 ec 0c             	sub    esp,0xc
c001cf36:	50                   	push   eax
c001cf37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	31 c0                	xor    eax,eax
c001cf3f:	83 c4 0c             	add    esp,0xc
c001cf42:	c3                   	ret    
c001cf43:	90                   	nop

c001cf44 <SATAPI::SATAPI()>:
c001cf44:	83 ec 1c             	sub    esp,0x1c
c001cf47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4b:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001cf53:	c7 44 24 04 b4 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218b4
c001cf5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf5e:	e8 75 f2 fe ff       	call   c000c1d8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf63:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001cf68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6c:	89 10                	mov    DWORD PTR [eax],edx
c001cf6e:	90                   	nop
c001cf6f:	83 c4 1c             	add    esp,0x1c
c001cf72:	c3                   	ret    
c001cf73:	90                   	nop

c001cf74 <SATAPI::diskRemoved()>:
c001cf74:	c3                   	ret    
c001cf75:	90                   	nop

c001cf76 <SATAPI::diskInserted()>:
c001cf76:	83 ec 18             	sub    esp,0x18
c001cf79:	68 c0 18 02 c0       	push   0xc00218c0
c001cf7e:	e8 63 da fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001cf83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf87:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001cf8e:	83 c4 1c             	add    esp,0x1c
c001cf91:	c3                   	ret    

c001cf92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001cf92:	55                   	push   ebp
c001cf93:	57                   	push   edi
c001cf94:	56                   	push   esi
c001cf95:	53                   	push   ebx
c001cf96:	83 ec 34             	sub    esp,0x34
c001cf99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cf9d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cfa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfa5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cfa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cfad:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001cfb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cfb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfbd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001cfc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfc7:	83 c0 02             	add    eax,0x2
c001cfca:	c1 e0 07             	shl    eax,0x7
c001cfcd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cfd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfd9:	c1 e0 07             	shl    eax,0x7
c001cfdc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cfe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfe4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cff2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cff8:	e8 1f e5 ff ff       	call   c001b51c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	89 c2                	mov    edx,eax
c001d002:	b8 01 00 00 00       	mov    eax,0x1
c001d007:	83 fa ff             	cmp    edx,0xffffffff
c001d00a:	0f 84 55 02 00 00    	je     c001d265 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d018:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d01e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d020:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d026:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d02c:	89 d1                	mov    ecx,edx
c001d02e:	c1 e1 05             	shl    ecx,0x5
c001d031:	01 c8                	add    eax,ecx
c001d033:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d035:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d03b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d041:	89 08                	mov    DWORD PTR [eax],ecx
c001d043:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d049:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d04f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d055:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d058:	50                   	push   eax
c001d059:	68 90 00 00 00       	push   0x90
c001d05e:	6a 00                	push   0x0
c001d060:	53                   	push   ebx
c001d061:	e8 8a 34 fe ff       	call   c00004f0 <memset>
c001d066:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d069:	b9 0c 00 00 00       	mov    ecx,0xc
c001d06e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d072:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d074:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d07a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d07e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d082:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d088:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d08c:	48                   	dec    eax
c001d08d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d092:	89 c1                	mov    ecx,eax
c001d094:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d09a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d09f:	09 c8                	or     eax,ecx
c001d0a1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d0a7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d0aa:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d0b1:	25 00 7f 00 00       	and    eax,0x7f00
c001d0b6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d0bb:	66 89 03             	mov    WORD PTR [ebx],ax
c001d0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0c2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ca:	c1 e8 10             	shr    eax,0x10
c001d0cd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0d4:	c1 e8 18             	shr    eax,0x18
c001d0d7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d0da:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d0de:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d0e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0e5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d0e8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0f3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d0f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0fb:	31 c0                	xor    eax,eax
c001d0fd:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d103:	f6 c1 88             	test   cl,0x88
c001d106:	74 0a                	je     c001d112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d108:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d10d:	74 0a                	je     c001d119 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d10f:	40                   	inc    eax
c001d110:	eb eb                	jmp    c001d0fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d112:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d117:	75 43                	jne    c001d15c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d119:	83 ec 0c             	sub    esp,0xc
c001d11c:	68 d8 18 02 c0       	push   0xc00218d8
c001d121:	e8 c0 d8 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001d126:	58                   	pop    eax
c001d127:	5a                   	pop    edx
c001d128:	68 ed 18 02 c0       	push   0xc00218ed
c001d12d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d133:	e8 f0 b8 fe ff       	call   c0008a28 <VgaText::puts(char const*)>
c001d138:	59                   	pop    ecx
c001d139:	5b                   	pop    ebx
c001d13a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d13e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d144:	e8 6b e4 ff ff       	call   c001b5b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d149:	5e                   	pop    esi
c001d14a:	5f                   	pop    edi
c001d14b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d14f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d155:	e8 3a e4 ff ff       	call   c001b594 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d15a:	eb 46                	jmp    c001d1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d15c:	be 01 00 00 00       	mov    esi,0x1
c001d161:	88 d1                	mov    cl,dl
c001d163:	d3 e6                	shl    esi,cl
c001d165:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d16a:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d170:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d174:	c1 e3 07             	shl    ebx,0x7
c001d177:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d17b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d181:	85 c6                	test   esi,eax
c001d183:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d189:	0f 84 a3 00 00 00    	je     c001d232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d18f:	0f ba e0 1e          	bt     eax,0x1e
c001d193:	73 1a                	jae    c001d1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d195:	83 ec 0c             	sub    esp,0xc
c001d198:	68 ff 18 02 c0       	push   0xc00218ff
c001d19d:	e8 44 d8 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	b8 01 00 00 00       	mov    eax,0x1
c001d1aa:	e9 b6 00 00 00       	jmp    c001d265 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d1af:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d1b5:	83 f8 0d             	cmp    eax,0xd
c001d1b8:	77 0a                	ja     c001d1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	68 c8 00 00 00       	push   0xc8
c001d1c2:	eb 28                	jmp    c001d1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d1c4:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d1ca:	83 f8 0d             	cmp    eax,0xd
c001d1cd:	77 0a                	ja     c001d1d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d1cf:	83 ec 0c             	sub    esp,0xc
c001d1d2:	68 58 02 00 00       	push   0x258
c001d1d7:	eb 13                	jmp    c001d1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d1d9:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d1df:	83 f8 06             	cmp    eax,0x6
c001d1e2:	77 10                	ja     c001d1f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	68 dc 05 00 00       	push   0x5dc
c001d1ec:	e8 3b 81 ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d1f8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d1fb:	75 06                	jne    c001d203 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d1fd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d201:	74 15                	je     c001d218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d203:	83 ff 06             	cmp    edi,0x6
c001d206:	77 10                	ja     c001d218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d208:	83 ec 0c             	sub    esp,0xc
c001d20b:	68 c4 09 00 00       	push   0x9c4
c001d210:	e8 17 81 ff ff       	call   c001532c <milliTenthSleep(unsigned int)>
c001d215:	83 c4 10             	add    esp,0x10
c001d218:	47                   	inc    edi
c001d219:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d21f:	0f 85 56 ff ff ff    	jne    c001d17b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	68 12 19 02 c0       	push   0xc0021912
c001d22d:	e9 6b ff ff ff       	jmp    c001d19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d232:	0f ba e0 1e          	bt     eax,0x1e
c001d236:	73 0d                	jae    c001d245 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d238:	83 ec 0c             	sub    esp,0xc
c001d23b:	68 26 19 02 c0       	push   0xc0021926
c001d240:	e9 58 ff ff ff       	jmp    c001d19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d245:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d24a:	74 17                	je     c001d263 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d24c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d251:	74 10                	je     c001d263 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d253:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d259:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d25d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d263:	31 c0                	xor    eax,eax
c001d265:	83 c4 2c             	add    esp,0x2c
c001d268:	5b                   	pop    ebx
c001d269:	5e                   	pop    esi
c001d26a:	5f                   	pop    edi
c001d26b:	5d                   	pop    ebp
c001d26c:	c3                   	ret    
c001d26d:	90                   	nop

c001d26e <SATAPI::eject()>:
c001d26e:	57                   	push   edi
c001d26f:	b9 03 00 00 00       	mov    ecx,0x3
c001d274:	83 ec 18             	sub    esp,0x18
c001d277:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d27b:	fc                   	cld    
c001d27c:	31 c0                	xor    eax,eax
c001d27e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d280:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d285:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d28a:	50                   	push   eax
c001d28b:	6a 00                	push   0x0
c001d28d:	6a 00                	push   0x0
c001d28f:	6a 00                	push   0x0
c001d291:	6a 00                	push   0x0
c001d293:	6a 02                	push   0x2
c001d295:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d299:	50                   	push   eax
c001d29a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d29e:	e8 ef fc ff ff       	call   c001cf92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d2a3:	83 c4 38             	add    esp,0x38
c001d2a6:	31 c0                	xor    eax,eax
c001d2a8:	5f                   	pop    edi
c001d2a9:	c3                   	ret    

c001d2aa <SATAPI::detectMedia()>:
c001d2aa:	53                   	push   ebx
c001d2ab:	83 ec 14             	sub    esp,0x14
c001d2ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2b2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2b8:	e8 8f 07 ff ff       	call   c000da4c <VCache::writeWriteBuffer()>
c001d2bd:	59                   	pop    ecx
c001d2be:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2c4:	e8 73 07 ff ff       	call   c000da3c <VCache::invalidateReadBuffer()>
c001d2c9:	c7 04 24 3b 19 02 c0 	mov    DWORD PTR [esp],0xc002193b
c001d2d0:	e8 11 d7 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001d2d5:	83 c4 10             	add    esp,0x10
c001d2d8:	31 c0                	xor    eax,eax
c001d2da:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d2e1:	85 d2                	test   edx,edx
c001d2e3:	74 0f                	je     c001d2f4 <SATAPI::detectMedia()+0x4a>
c001d2e5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d2eb:	75 07                	jne    c001d2f4 <SATAPI::detectMedia()+0x4a>
c001d2ed:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d2f4:	40                   	inc    eax
c001d2f5:	83 f8 1a             	cmp    eax,0x1a
c001d2f8:	75 e0                	jne    c001d2da <SATAPI::detectMedia()+0x30>
c001d2fa:	83 c4 08             	add    esp,0x8
c001d2fd:	5b                   	pop    ebx
c001d2fe:	c3                   	ret    
c001d2ff:	90                   	nop

c001d300 <SATAPI::open(int, int, void*)>:
c001d300:	56                   	push   esi
c001d301:	53                   	push   ebx
c001d302:	51                   	push   ecx
c001d303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d30b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d315:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d31b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d31f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d329:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d333:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d33a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d340:	e8 37 aa fe ff       	call   c0007d7c <Phys::allocatePage()>
c001d345:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d34b:	89 c6                	mov    esi,eax
c001d34d:	e8 2a aa fe ff       	call   c0007d7c <Phys::allocatePage()>
c001d352:	81 c6 00 10 00 00    	add    esi,0x1000
c001d358:	39 c6                	cmp    esi,eax
c001d35a:	74 10                	je     c001d36c <SATAPI::open(int, int, void*)+0x6c>
c001d35c:	83 ec 0c             	sub    esp,0xc
c001d35f:	68 50 19 02 c0       	push   0xc0021950
c001d364:	e8 cc 33 ff ff       	call   c0010735 <KePanic(char const*)>
c001d369:	83 c4 10             	add    esp,0x10
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	6a 02                	push   0x2
c001d371:	e8 1a c2 fe ff       	call   c0009590 <Virt::allocateKernelVirtualPages(int)>
c001d376:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d37c:	6a 03                	push   0x3
c001d37e:	50                   	push   eax
c001d37f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d385:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d38b:	e8 22 c9 fe ff       	call   c0009cb2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d390:	83 c4 14             	add    esp,0x14
c001d393:	68 78 01 00 00       	push   0x178
c001d398:	e8 c9 a6 fe ff       	call   c0007a66 <malloc>
c001d39d:	83 c4 0c             	add    esp,0xc
c001d3a0:	6a 00                	push   0x0
c001d3a2:	68 ff ff ff 7f       	push   0x7fffffff
c001d3a7:	6a 00                	push   0x0
c001d3a9:	6a 00                	push   0x0
c001d3ab:	53                   	push   ebx
c001d3ac:	68 66 19 02 c0       	push   0xc0021966
c001d3b1:	89 c6                	mov    esi,eax
c001d3b3:	50                   	push   eax
c001d3b4:	e8 25 fb fe ff       	call   c000cede <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d3b9:	83 c4 14             	add    esp,0x14
c001d3bc:	56                   	push   esi
c001d3bd:	e8 de fb fe ff       	call   c000cfa0 <LogicalDisk::assignDriveLetter()>
c001d3c2:	5a                   	pop    edx
c001d3c3:	59                   	pop    ecx
c001d3c4:	0f be c0             	movsx  eax,al
c001d3c7:	50                   	push   eax
c001d3c8:	68 b8 17 02 c0       	push   0xc00217b8
c001d3cd:	e8 14 d6 fe ff       	call   c000a9e6 <Dbg::kprintf(char const*, ...)>
c001d3d2:	58                   	pop    eax
c001d3d3:	5a                   	pop    edx
c001d3d4:	56                   	push   esi
c001d3d5:	53                   	push   ebx
c001d3d6:	e8 37 ea fe ff       	call   c000be12 <Device::addChild(Device*)>
c001d3db:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d3e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e4:	e8 57 ee fe ff       	call   c000c240 <PhysicalDisk::startCache()>
c001d3e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d3f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3f3:	e8 b2 fe ff ff       	call   c001d2aa <SATAPI::detectMedia()>
c001d3f8:	83 c4 14             	add    esp,0x14
c001d3fb:	31 c0                	xor    eax,eax
c001d3fd:	5b                   	pop    ebx
c001d3fe:	5e                   	pop    esi
c001d3ff:	c3                   	ret    

c001d400 <SATAPI::read(unsigned long long, int, void*)>:
c001d400:	55                   	push   ebp
c001d401:	57                   	push   edi
c001d402:	56                   	push   esi
c001d403:	53                   	push   ebx
c001d404:	83 ec 3c             	sub    esp,0x3c
c001d407:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001d40b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d40f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d413:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d417:	83 fb 04             	cmp    ebx,0x4
c001d41a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d41e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d422:	7e 10                	jle    c001d434 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d424:	83 ec 0c             	sub    esp,0xc
c001d427:	68 74 19 02 c0       	push   0xc0021974
c001d42c:	e8 04 33 ff ff       	call   c0010735 <KePanic(char const*)>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001d43a:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001d440:	51                   	push   ecx
c001d441:	50                   	push   eax
c001d442:	83 c0 02             	add    eax,0x2
c001d445:	c1 e0 07             	shl    eax,0x7
c001d448:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d44e:	50                   	push   eax
c001d44f:	52                   	push   edx
c001d450:	e8 89 e1 ff ff       	call   c001b5de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d455:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d459:	b9 03 00 00 00       	mov    ecx,0x3
c001d45e:	fc                   	cld    
c001d45f:	31 c0                	xor    eax,eax
c001d461:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d463:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d468:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d46d:	83 c4 0c             	add    esp,0xc
c001d470:	6a 00                	push   0x0
c001d472:	6a 00                	push   0x0
c001d474:	6a 00                	push   0x0
c001d476:	6a 00                	push   0x0
c001d478:	6a 02                	push   0x2
c001d47a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d47e:	50                   	push   eax
c001d47f:	56                   	push   esi
c001d480:	e8 0d fb ff ff       	call   c001cf92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d485:	83 c4 20             	add    esp,0x20
c001d488:	85 c0                	test   eax,eax
c001d48a:	89 c5                	mov    ebp,eax
c001d48c:	75 44                	jne    c001d4d2 <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001d48e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d492:	b9 03 00 00 00       	mov    ecx,0x3
c001d497:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d499:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d49d:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001d4a1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d4a6:	0f c8                	bswap  eax
c001d4a8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d4ac:	50                   	push   eax
c001d4ad:	53                   	push   ebx
c001d4ae:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d4b2:	c1 e3 0b             	shl    ebx,0xb
c001d4b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4bd:	53                   	push   ebx
c001d4be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d4c2:	50                   	push   eax
c001d4c3:	56                   	push   esi
c001d4c4:	e8 c9 fa ff ff       	call   c001cf92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d4c9:	83 c4 20             	add    esp,0x20
c001d4cc:	85 c0                	test   eax,eax
c001d4ce:	89 c5                	mov    ebp,eax
c001d4d0:	74 0c                	je     c001d4de <SATAPI::read(unsigned long long, int, void*)+0xde>
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	56                   	push   esi
c001d4d6:	e8 cf fd ff ff       	call   c001d2aa <SATAPI::detectMedia()>
c001d4db:	83 c4 10             	add    esp,0x10
c001d4de:	83 c4 3c             	add    esp,0x3c
c001d4e1:	89 e8                	mov    eax,ebp
c001d4e3:	5b                   	pop    ebx
c001d4e4:	5e                   	pop    esi
c001d4e5:	5f                   	pop    edi
c001d4e6:	5d                   	pop    ebp
c001d4e7:	c3                   	ret    

c001d4e8 <IOAPIC::close(int, int, void*)>:
c001d4e8:	b8 00 00 00 00       	mov    eax,0x0
c001d4ed:	c3                   	ret    

c001d4ee <apicGetBase()>:
c001d4ee:	55                   	push   ebp
c001d4ef:	89 e5                	mov    ebp,esp
c001d4f1:	83 ec 28             	sub    esp,0x28
c001d4f4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d4f9:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001d500:	24 08                	and    al,0x8
c001d502:	84 c0                	test   al,al
c001d504:	75 07                	jne    c001d50d <apicGetBase()+0x1f>
c001d506:	b8 00 00 00 00       	mov    eax,0x0
c001d50b:	eb 23                	jmp    c001d530 <apicGetBase()+0x42>
c001d50d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d512:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001d51a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d51d:	e8 0e 9b fe ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c001d522:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d525:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d528:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d52b:	25 00 00 ff ff       	and    eax,0xffff0000
c001d530:	c9                   	leave  
c001d531:	c3                   	ret    

c001d532 <IOAPIC::IOAPIC()>:
c001d532:	83 ec 1c             	sub    esp,0x1c
c001d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d539:	c7 44 24 04 d8 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219d8
c001d541:	89 04 24             	mov    DWORD PTR [esp],eax
c001d544:	e8 61 ea fe ff       	call   c000bfaa <Device::Device(char const*)>
c001d549:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c001d54e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d552:	89 10                	mov    DWORD PTR [eax],edx
c001d554:	90                   	nop
c001d555:	83 c4 1c             	add    esp,0x1c
c001d558:	c3                   	ret    

c001d559 <apicOpen()>:
c001d559:	55                   	push   ebp
c001d55a:	89 e5                	mov    ebp,esp
c001d55c:	53                   	push   ebx
c001d55d:	83 ec 44             	sub    esp,0x44
c001d560:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001d567:	34 01                	xor    al,0x1
c001d569:	84 c0                	test   al,al
c001d56b:	0f 84 a1 00 00 00    	je     c001d612 <apicOpen()+0xb9>
c001d571:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d575:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001d57c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d57f:	0f 83 86 00 00 00    	jae    c001d60b <apicOpen()+0xb2>
c001d585:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d58c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001d58f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d592:	e8 cf a4 fe ff       	call   c0007a66 <malloc>
c001d597:	89 c3                	mov    ebx,eax
c001d599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d59c:	e8 91 ff ff ff       	call   c001d532 <IOAPIC::IOAPIC()>
c001d5a1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d5a4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d5a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d5ab:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d5b2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d5b7:	40                   	inc    eax
c001d5b8:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d5bd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d5c2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d5c8:	89 c2                	mov    edx,eax
c001d5ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d5cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5d1:	89 14 24             	mov    DWORD PTR [esp],edx
c001d5d4:	e8 39 e8 fe ff       	call   c000be12 <Device::addChild(Device*)>
c001d5d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d5dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5de:	83 c0 08             	add    eax,0x8
c001d5e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5e3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d5e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d5ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d5f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d5fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d5fe:	89 14 24             	mov    DWORD PTR [esp],edx
c001d601:	ff d0                	call   eax
c001d603:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d606:	e9 6a ff ff ff       	jmp    c001d575 <apicOpen()+0x1c>
c001d60b:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d612:	e8 d7 fe ff ff       	call   c001d4ee <apicGetBase()>
c001d617:	05 f0 00 00 00       	add    eax,0xf0
c001d61c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d61f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d622:	8b 00                	mov    eax,DWORD PTR [eax]
c001d624:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d627:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d62e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d635:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d638:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d63b:	89 10                	mov    DWORD PTR [eax],edx
c001d63d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d644:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d649:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d64c:	7d 70                	jge    c001d6be <apicOpen()+0x165>
c001d64e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d651:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d658:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d65b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d65e:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d665:	c1 e8 08             	shr    eax,0x8
c001d668:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d66c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d66f:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d676:	c1 e8 18             	shr    eax,0x18
c001d679:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d67c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d680:	75 37                	jne    c001d6b9 <apicOpen()+0x160>
c001d682:	e8 67 fe ff ff       	call   c001d4ee <apicGetBase()>
c001d687:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d68b:	75 07                	jne    c001d694 <apicOpen()+0x13b>
c001d68d:	ba 60 03 00 00       	mov    edx,0x360
c001d692:	eb 05                	jmp    c001d699 <apicOpen()+0x140>
c001d694:	ba 50 03 00 00       	mov    edx,0x350
c001d699:	01 d0                	add    eax,edx
c001d69b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d69e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d6a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6a3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d6a6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d6ad:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d6b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d6b4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d6b7:	89 10                	mov    DWORD PTR [eax],edx
c001d6b9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d6bc:	eb 86                	jmp    c001d644 <apicOpen()+0xeb>
c001d6be:	90                   	nop
c001d6bf:	83 c4 44             	add    esp,0x44
c001d6c2:	5b                   	pop    ebx
c001d6c3:	5d                   	pop    ebp
c001d6c4:	c3                   	ret    
c001d6c5:	90                   	nop

c001d6c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d6c6:	55                   	push   ebp
c001d6c7:	89 e5                	mov    ebp,esp
c001d6c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6d2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6d5:	72 1d                	jb     c001d6f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6da:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6e3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d6e9:	01 d0                	add    eax,edx
c001d6eb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6ee:	73 04                	jae    c001d6f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6f0:	b0 01                	mov    al,0x1
c001d6f2:	eb 02                	jmp    c001d6f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d6f4:	b0 00                	mov    al,0x0
c001d6f6:	5d                   	pop    ebp
c001d6f7:	c3                   	ret    

c001d6f8 <IOAPIC::read(int)>:
c001d6f8:	55                   	push   ebp
c001d6f9:	89 e5                	mov    ebp,esp
c001d6fb:	83 ec 10             	sub    esp,0x10
c001d6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d701:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d707:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d70a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d70d:	0f b6 d0             	movzx  edx,al
c001d710:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d713:	89 10                	mov    DWORD PTR [eax],edx
c001d715:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d718:	83 c0 10             	add    eax,0x10
c001d71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d71d:	c9                   	leave  
c001d71e:	c3                   	ret    
c001d71f:	90                   	nop

c001d720 <IOAPIC::open(int, int, void*)>:
c001d720:	55                   	push   ebp
c001d721:	89 e5                	mov    ebp,esp
c001d723:	57                   	push   edi
c001d724:	56                   	push   esi
c001d725:	53                   	push   ebx
c001d726:	83 ec 0c             	sub    esp,0xc
c001d729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d72c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d72f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d738:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d73e:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d748:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d751:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d757:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d761:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d76a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d773:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d77a:	0f b6 f0             	movzx  esi,al
c001d77d:	89 d0                	mov    eax,edx
c001d77f:	ba 00 00 00 00       	mov    edx,0x0
c001d784:	89 c7                	mov    edi,eax
c001d786:	83 e7 ff             	and    edi,0xffffffff
c001d789:	89 f9                	mov    ecx,edi
c001d78b:	0f b6 da             	movzx  ebx,dl
c001d78e:	89 c8                	mov    eax,ecx
c001d790:	89 da                	mov    edx,ebx
c001d792:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d795:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d798:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d79c:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001d7a1:	24 00                	and    al,0x0
c001d7a3:	08 d0                	or     al,dl
c001d7a5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ac:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d7b3:	88 c1                	mov    cl,al
c001d7b5:	fe c1                	inc    cl
c001d7b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001d7ba:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001d7c0:	0f b6 d0             	movzx  edx,al
c001d7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7c6:	83 c2 08             	add    edx,0x8
c001d7c9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d7cd:	0f b6 c9             	movzx  ecx,cl
c001d7d0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d7d6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d7da:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7e8:	e8 0b ff ff ff       	call   c001d6f8 <IOAPIC::read(int)>
c001d7ed:	c1 f8 10             	sar    eax,0x10
c001d7f0:	0f b6 c0             	movzx  eax,al
c001d7f3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d7ff:	b8 00 00 00 00       	mov    eax,0x0
c001d804:	83 c4 0c             	add    esp,0xc
c001d807:	5b                   	pop    ebx
c001d808:	5e                   	pop    esi
c001d809:	5f                   	pop    edi
c001d80a:	5d                   	pop    ebp
c001d80b:	c3                   	ret    

c001d80c <IOAPIC::write(int, int)>:
c001d80c:	55                   	push   ebp
c001d80d:	89 e5                	mov    ebp,esp
c001d80f:	83 ec 10             	sub    esp,0x10
c001d812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d815:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d81b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d81e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d821:	0f b6 d0             	movzx  edx,al
c001d824:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d827:	89 10                	mov    DWORD PTR [eax],edx
c001d829:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d82c:	8d 50 10             	lea    edx,[eax+0x10]
c001d82f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d832:	89 02                	mov    DWORD PTR [edx],eax
c001d834:	90                   	nop
c001d835:	c9                   	leave  
c001d836:	c3                   	ret    
c001d837:	90                   	nop

c001d838 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d838:	55                   	push   ebp
c001d839:	89 e5                	mov    ebp,esp
c001d83b:	53                   	push   ebx
c001d83c:	83 ec 38             	sub    esp,0x38
c001d83f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d842:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d845:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d848:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d84b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d84e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d851:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d854:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d857:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d85a:	88 d8                	mov    al,bl
c001d85c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d85f:	88 c8                	mov    al,cl
c001d861:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d864:	88 d0                	mov    al,dl
c001d866:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d869:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d86d:	83 c0 08             	add    eax,0x8
c001d870:	01 c0                	add    eax,eax
c001d872:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d875:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d879:	83 c0 08             	add    eax,0x8
c001d87c:	01 c0                	add    eax,eax
c001d87e:	40                   	inc    eax
c001d87f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d882:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d885:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d88c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d88f:	e8 64 fe ff ff       	call   c001d6f8 <IOAPIC::read(int)>
c001d894:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d897:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d89e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d8a1:	c1 e0 18             	shl    eax,0x18
c001d8a4:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d8a7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d8aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d8ad:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d8b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8bb:	e8 4c ff ff ff       	call   c001d80c <IOAPIC::write(int, int)>
c001d8c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8cd:	e8 26 fe ff ff       	call   c001d6f8 <IOAPIC::read(int)>
c001d8d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d8d5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d8dc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d8e3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d8ea:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d8ee:	74 09                	je     c001d8f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001d8f0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d8f7:	eb 07                	jmp    c001d900 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001d8f9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d900:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d904:	74 09                	je     c001d90f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001d906:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d90d:	eb 07                	jmp    c001d916 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001d90f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d916:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d91d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001d921:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d924:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d927:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d92a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d92e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d935:	89 04 24             	mov    DWORD PTR [esp],eax
c001d938:	e8 cf fe ff ff       	call   c001d80c <IOAPIC::write(int, int)>
c001d93d:	90                   	nop
c001d93e:	83 c4 38             	add    esp,0x38
c001d941:	5b                   	pop    ebx
c001d942:	5d                   	pop    ebp
c001d943:	c3                   	ret    

c001d944 <APICTimer::close(int, int, void*)>:
c001d944:	b8 00 00 00 00       	mov    eax,0x0
c001d949:	c3                   	ret    
c001d94a:	66 90                	xchg   ax,ax

c001d94c <apicTimerHandler(regs*, void*)>:
c001d94c:	83 ec 1c             	sub    esp,0x1c
c001d94f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d953:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d955:	b8 10 27 00 00       	mov    eax,0x2710
c001d95a:	ba 00 00 00 00       	mov    edx,0x0
c001d95f:	f7 f1                	div    ecx
c001d961:	89 04 24             	mov    DWORD PTR [esp],eax
c001d964:	e8 0d fe fe ff       	call   c000d776 <timerHandler(unsigned int)>
c001d969:	90                   	nop
c001d96a:	83 c4 1c             	add    esp,0x1c
c001d96d:	c3                   	ret    
c001d96e:	66 90                	xchg   ax,ax

c001d970 <APICTimer::open(int, int, void*)>:
c001d970:	83 ec 2c             	sub    esp,0x2c
c001d973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d977:	8b 00                	mov    eax,DWORD PTR [eax]
c001d979:	83 c0 24             	add    eax,0x24
c001d97c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d97e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d982:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d986:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d98a:	89 14 24             	mov    DWORD PTR [esp],edx
c001d98d:	ff d0                	call   eax
c001d98f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d993:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d997:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d99d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9a5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d9ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9af:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d9b5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d9b9:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001d9c1:	c7 44 24 08 4c d9 01 c0 	mov    DWORD PTR [esp+0x8],0xc001d94c
c001d9c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d9cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9d0:	e8 eb e3 fe ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9d5:	89 c2                	mov    edx,eax
c001d9d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d9e1:	b8 00 00 00 00       	mov    eax,0x0
c001d9e6:	83 c4 2c             	add    esp,0x2c
c001d9e9:	c3                   	ret    
c001d9ea:	66 90                	xchg   ax,ax

c001d9ec <APICTimer::write(int)>:
c001d9ec:	83 ec 1c             	sub    esp,0x1c
c001d9ef:	c7 04 24 0c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a0c
c001d9f6:	e8 3a 2d ff ff       	call   c0010735 <KePanic(char const*)>
c001d9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001da03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da09:	90                   	nop
c001da0a:	83 c4 1c             	add    esp,0x1c
c001da0d:	c3                   	ret    
c001da0e:	66 90                	xchg   ax,ax

c001da10 <APICTimer::APICTimer()>:
c001da10:	83 ec 1c             	sub    esp,0x1c
c001da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da17:	c7 44 24 04 1c 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a1c
c001da1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001da22:	e8 89 fc fe ff       	call   c000d6b0 <Timer::Timer(char const*)>
c001da27:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c001da2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da30:	89 10                	mov    DWORD PTR [eax],edx
c001da32:	90                   	nop
c001da33:	83 c4 1c             	add    esp,0x1c
c001da36:	c3                   	ret    
c001da37:	90                   	nop

c001da38 <PIT::write(int)>:
c001da38:	83 ec 10             	sub    esp,0x10
c001da3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da4d:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001da52:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001da57:	99                   	cdq    
c001da58:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001da5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da60:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001da67:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001da6c:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001da71:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001da76:	ee                   	out    dx,al
c001da77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001da85:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001da89:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001da8e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001da93:	ee                   	out    dx,al
c001da94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da98:	c1 f8 08             	sar    eax,0x8
c001da9b:	0f b6 c0             	movzx  eax,al
c001da9e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001daa5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001daa9:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001daae:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001dab3:	ee                   	out    dx,al
c001dab4:	90                   	nop
c001dab5:	83 c4 10             	add    esp,0x10
c001dab8:	c3                   	ret    
c001dab9:	8d 76 00             	lea    esi,[esi+0x0]

c001dabc <pitHandler(regs*, void*)>:
c001dabc:	83 ec 1c             	sub    esp,0x1c
c001dabf:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dac5:	b8 10 27 00 00       	mov    eax,0x2710
c001daca:	99                   	cdq    
c001dacb:	f7 f9                	idiv   ecx
c001dacd:	89 04 24             	mov    DWORD PTR [esp],eax
c001dad0:	e8 a1 fc fe ff       	call   c000d776 <timerHandler(unsigned int)>
c001dad5:	90                   	nop
c001dad6:	83 c4 1c             	add    esp,0x1c
c001dad9:	c3                   	ret    
c001dada:	66 90                	xchg   ax,ax

c001dadc <PIT::open(int, int, void*)>:
c001dadc:	83 ec 2c             	sub    esp,0x2c
c001dadf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dae5:	83 c0 24             	add    eax,0x24
c001dae8:	8b 00                	mov    eax,DWORD PTR [eax]
c001daea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001daee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001daf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001daf6:	89 14 24             	mov    DWORD PTR [esp],edx
c001daf9:	ff d0                	call   eax
c001dafb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001db07:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001db0f:	c7 44 24 08 bc da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dabc
c001db17:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001db22:	e8 99 e2 fe ff       	call   c000bdc0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db27:	89 c2                	mov    edx,eax
c001db29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db2d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db33:	b8 00 00 00 00       	mov    eax,0x0
c001db38:	83 c4 2c             	add    esp,0x2c
c001db3b:	c3                   	ret    

c001db3c <PIT::close(int, int, void*)>:
c001db3c:	83 ec 1c             	sub    esp,0x1c
c001db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001db59:	c7 44 24 08 bc da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dabc
c001db61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db69:	89 04 24             	mov    DWORD PTR [esp],eax
c001db6c:	e8 83 e2 fe ff       	call   c000bdf4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001db71:	b8 00 00 00 00       	mov    eax,0x0
c001db76:	83 c4 1c             	add    esp,0x1c
c001db79:	c3                   	ret    
c001db7a:	66 90                	xchg   ax,ax

c001db7c <PIT::PIT()>:
c001db7c:	83 ec 1c             	sub    esp,0x1c
c001db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db83:	c7 44 24 04 58 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a58
c001db8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001db8e:	e8 1d fb fe ff       	call   c000d6b0 <Timer::Timer(char const*)>
c001db93:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001db98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9c:	89 10                	mov    DWORD PTR [eax],edx
c001db9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba2:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dba9:	0f b6 d0             	movzx  edx,al
c001dbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbbb:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dbc2:	0f b6 d0             	movzx  edx,al
c001dbc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc9:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd2:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dbd9:	88 c1                	mov    cl,al
c001dbdb:	fe c1                	inc    cl
c001dbdd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbe1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dbe7:	0f b6 d0             	movzx  edx,al
c001dbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbee:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001dbf3:	80 e1 3f             	and    cl,0x3f
c001dbf6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbfa:	90                   	nop
c001dbfb:	83 c4 1c             	add    esp,0x1c
c001dbfe:	c3                   	ret    
c001dbff:	90                   	nop

c001dc00 <avxDetect>:
c001dc00:	b8 01 00 00 00       	mov    eax,0x1
c001dc05:	0f a2                	cpuid  
c001dc07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dc0d:	74 15                	je     c001dc24 <avxDetect.noAVX>
c001dc0f:	b8 01 00 00 00       	mov    eax,0x1
c001dc14:	0f a2                	cpuid  
c001dc16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dc1c:	74 06                	je     c001dc24 <avxDetect.noAVX>
c001dc1e:	b8 01 00 00 00       	mov    eax,0x1
c001dc23:	c3                   	ret    

c001dc24 <avxDetect.noAVX>:
c001dc24:	b8 00 00 00 00       	mov    eax,0x0
c001dc29:	c3                   	ret    

c001dc2a <avxSave>:
c001dc2a:	53                   	push   ebx
c001dc2b:	52                   	push   edx
c001dc2c:	31 c0                	xor    eax,eax
c001dc2e:	48                   	dec    eax
c001dc2f:	89 c2                	mov    edx,eax
c001dc31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dc35:	0f ae 23             	xsave  [ebx]
c001dc38:	5a                   	pop    edx
c001dc39:	5b                   	pop    ebx
c001dc3a:	c3                   	ret    

c001dc3b <avxLoad>:
c001dc3b:	53                   	push   ebx
c001dc3c:	52                   	push   edx
c001dc3d:	31 c0                	xor    eax,eax
c001dc3f:	48                   	dec    eax
c001dc40:	89 c2                	mov    edx,eax
c001dc42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dc46:	0f ae 2b             	xrstor [ebx]
c001dc49:	5a                   	pop    edx
c001dc4a:	5b                   	pop    ebx
c001dc4b:	c3                   	ret    

c001dc4c <avxInit>:
c001dc4c:	e8 67 03 00 00       	call   c001dfb8 <sseInit>
c001dc51:	50                   	push   eax
c001dc52:	51                   	push   ecx
c001dc53:	0f 20 e0             	mov    eax,cr4
c001dc56:	0d 00 00 04 00       	or     eax,0x40000
c001dc5b:	0f 22 e0             	mov    cr4,eax
c001dc5e:	31 c9                	xor    ecx,ecx
c001dc60:	0f 01 d0             	xgetbv 
c001dc63:	0d 07 00 00 00       	or     eax,0x7
c001dc68:	0f 01 d1             	xsetbv 
c001dc6b:	59                   	pop    ecx
c001dc6c:	58                   	pop    eax
c001dc6d:	c3                   	ret    

c001dc6e <avxClose>:
c001dc6e:	c3                   	ret    

c001dc6f <wouldSheSayYes>:
c001dc6f:	c3                   	ret    
c001dc70:	49                   	dec    ecx
c001dc71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dc75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dc79:	75 20                	jne    c001dc9b <isr0+0xb>
c001dc7b:	4e                   	dec    esi
c001dc7c:	79 61                	jns    c001dcdf <isr7+0x3>
c001dc7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dc83:	66 90                	xchg   ax,ax
c001dc85:	66 90                	xchg   ax,ax
c001dc87:	66 90                	xchg   ax,ax
c001dc89:	66 90                	xchg   ax,ax
c001dc8b:	66 90                	xchg   ax,ax
c001dc8d:	66 90                	xchg   ax,ax
c001dc8f:	90                   	nop

c001dc90 <isr0>:
c001dc90:	fa                   	cli    
c001dc91:	68 00 00 00 00       	push   0x0
c001dc96:	68 00 00 00 00       	push   0x0
c001dc9b:	e9 56 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dca0 <isr1>:
c001dca0:	fa                   	cli    
c001dca1:	6a 00                	push   0x0
c001dca3:	6a 01                	push   0x1
c001dca5:	e9 4c 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcaa <isr2>:
c001dcaa:	fa                   	cli    
c001dcab:	6a 00                	push   0x0
c001dcad:	6a 02                	push   0x2
c001dcaf:	e9 42 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcb4 <isr3>:
c001dcb4:	fa                   	cli    
c001dcb5:	6a 00                	push   0x0
c001dcb7:	6a 03                	push   0x3
c001dcb9:	e9 38 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcbe <isr4>:
c001dcbe:	fa                   	cli    
c001dcbf:	6a 00                	push   0x0
c001dcc1:	6a 04                	push   0x4
c001dcc3:	e9 2e 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcc8 <isr5>:
c001dcc8:	fa                   	cli    
c001dcc9:	6a 00                	push   0x0
c001dccb:	6a 05                	push   0x5
c001dccd:	e9 24 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcd2 <isr6>:
c001dcd2:	fa                   	cli    
c001dcd3:	6a 00                	push   0x0
c001dcd5:	6a 06                	push   0x6
c001dcd7:	e9 1a 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcdc <isr7>:
c001dcdc:	fa                   	cli    
c001dcdd:	6a 00                	push   0x0
c001dcdf:	6a 07                	push   0x7
c001dce1:	e9 10 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dce6 <isr8>:
c001dce6:	fa                   	cli    
c001dce7:	6a 08                	push   0x8
c001dce9:	e9 08 01 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcee <isr9>:
c001dcee:	fa                   	cli    
c001dcef:	6a 00                	push   0x0
c001dcf1:	6a 09                	push   0x9
c001dcf3:	e9 fe 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dcf8 <isr10>:
c001dcf8:	fa                   	cli    
c001dcf9:	6a 0a                	push   0xa
c001dcfb:	e9 f6 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd00 <isr11>:
c001dd00:	fa                   	cli    
c001dd01:	6a 0b                	push   0xb
c001dd03:	e9 ee 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd08 <isr12>:
c001dd08:	fa                   	cli    
c001dd09:	6a 0c                	push   0xc
c001dd0b:	e9 e6 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd10 <isr13>:
c001dd10:	fa                   	cli    
c001dd11:	6a 0d                	push   0xd
c001dd13:	53                   	push   ebx
c001dd14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd18:	81 fb e6 de 01 c0    	cmp    ebx,0xc001dee6
c001dd1e:	5b                   	pop    ebx
c001dd1f:	0f 84 c3 01 00 00    	je     c001dee8 <finishSignal2>
c001dd25:	e9 cc 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd2a <isr14>:
c001dd2a:	fa                   	cli    
c001dd2b:	6a 0e                	push   0xe
c001dd2d:	e9 c4 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd32 <isr15>:
c001dd32:	fa                   	cli    
c001dd33:	6a 00                	push   0x0
c001dd35:	6a 0f                	push   0xf
c001dd37:	e9 ba 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd3c <isr16>:
c001dd3c:	fa                   	cli    
c001dd3d:	6a 00                	push   0x0
c001dd3f:	6a 10                	push   0x10
c001dd41:	e9 b0 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd46 <isr17>:
c001dd46:	fa                   	cli    
c001dd47:	6a 00                	push   0x0
c001dd49:	6a 11                	push   0x11
c001dd4b:	e9 a6 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd50 <isr18>:
c001dd50:	fa                   	cli    
c001dd51:	6a 00                	push   0x0
c001dd53:	6a 12                	push   0x12
c001dd55:	e9 9c 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd5a <irq3>:
c001dd5a:	fa                   	cli    
c001dd5b:	6a 00                	push   0x0
c001dd5d:	6a 23                	push   0x23
c001dd5f:	e9 92 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd64 <irq4>:
c001dd64:	fa                   	cli    
c001dd65:	6a 00                	push   0x0
c001dd67:	6a 24                	push   0x24
c001dd69:	e9 88 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd6e <irq5>:
c001dd6e:	fa                   	cli    
c001dd6f:	6a 00                	push   0x0
c001dd71:	6a 25                	push   0x25
c001dd73:	e9 7e 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd78 <irq6>:
c001dd78:	fa                   	cli    
c001dd79:	6a 00                	push   0x0
c001dd7b:	6a 26                	push   0x26
c001dd7d:	e9 74 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd82 <irq7>:
c001dd82:	fa                   	cli    
c001dd83:	6a 00                	push   0x0
c001dd85:	6a 27                	push   0x27
c001dd87:	e9 6a 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd8c <irq8>:
c001dd8c:	fa                   	cli    
c001dd8d:	6a 00                	push   0x0
c001dd8f:	6a 28                	push   0x28
c001dd91:	e9 60 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dd96 <irq9>:
c001dd96:	fa                   	cli    
c001dd97:	6a 00                	push   0x0
c001dd99:	6a 29                	push   0x29
c001dd9b:	e9 56 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dda0 <irq10>:
c001dda0:	fa                   	cli    
c001dda1:	6a 00                	push   0x0
c001dda3:	6a 2a                	push   0x2a
c001dda5:	e9 4c 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001ddaa <irq11>:
c001ddaa:	fa                   	cli    
c001ddab:	6a 00                	push   0x0
c001ddad:	6a 2b                	push   0x2b
c001ddaf:	e9 42 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001ddb4 <irq12>:
c001ddb4:	fa                   	cli    
c001ddb5:	6a 00                	push   0x0
c001ddb7:	6a 2c                	push   0x2c
c001ddb9:	e9 38 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001ddbe <irq13>:
c001ddbe:	fa                   	cli    
c001ddbf:	6a 00                	push   0x0
c001ddc1:	6a 2d                	push   0x2d
c001ddc3:	e9 2e 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001ddc8 <irq14>:
c001ddc8:	fa                   	cli    
c001ddc9:	6a 00                	push   0x0
c001ddcb:	6a 2e                	push   0x2e
c001ddcd:	e9 24 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001ddd2 <irq15>:
c001ddd2:	fa                   	cli    
c001ddd3:	6a 00                	push   0x0
c001ddd5:	6a 2f                	push   0x2f
c001ddd7:	e9 1a 00 00 00       	jmp    c001ddf6 <int_common_stub>

c001dddc <irq1>:
c001dddc:	fa                   	cli    
c001dddd:	6a 00                	push   0x0
c001dddf:	6a 21                	push   0x21
c001dde1:	eb 13                	jmp    c001ddf6 <int_common_stub>

c001dde3 <irq2>:
c001dde3:	fa                   	cli    
c001dde4:	6a 00                	push   0x0
c001dde6:	6a 22                	push   0x22
c001dde8:	eb 0c                	jmp    c001ddf6 <int_common_stub>

c001ddea <isr96>:
c001ddea:	6a 00                	push   0x0
c001ddec:	6a 60                	push   0x60
c001ddee:	fb                   	sti    
c001ddef:	eb 37                	jmp    c001de28 <syscall_common_stub>

c001ddf1 <irq0>:
c001ddf1:	fa                   	cli    
c001ddf2:	6a 00                	push   0x0
c001ddf4:	6a 20                	push   0x20

c001ddf6 <int_common_stub>:
c001ddf6:	60                   	pusha  
c001ddf7:	1e                   	push   ds
c001ddf8:	06                   	push   es
c001ddf9:	0f a0                	push   fs
c001ddfb:	0f a8                	push   gs
c001ddfd:	66 b8 10 00          	mov    ax,0x10
c001de01:	66 8e d8             	mov    ds,ax
c001de04:	66 8e c0             	mov    es,ax
c001de07:	66 8e e0             	mov    fs,ax
c001de0a:	66 8e e8             	mov    gs,ax
c001de0d:	54                   	push   esp
c001de0e:	fc                   	cld    
c001de0f:	e8 9c e4 fe ff       	call   c000c2b0 <int_handler>
c001de14:	81 c4 04 00 00 00    	add    esp,0x4
c001de1a:	0f a9                	pop    gs
c001de1c:	0f a1                	pop    fs
c001de1e:	07                   	pop    es
c001de1f:	1f                   	pop    ds
c001de20:	61                   	popa   
c001de21:	81 c4 08 00 00 00    	add    esp,0x8
c001de27:	cf                   	iret   

c001de28 <syscall_common_stub>:
c001de28:	60                   	pusha  
c001de29:	1e                   	push   ds
c001de2a:	06                   	push   es
c001de2b:	0f a0                	push   fs
c001de2d:	0f a8                	push   gs
c001de2f:	66 b8 10 00          	mov    ax,0x10
c001de33:	66 8e d8             	mov    ds,ax
c001de36:	66 8e c0             	mov    es,ax
c001de39:	66 8e e0             	mov    fs,ax
c001de3c:	66 8e e8             	mov    gs,ax
c001de3f:	54                   	push   esp
c001de40:	fc                   	cld    
c001de41:	e8 6a e4 fe ff       	call   c000c2b0 <int_handler>
c001de46:	81 c4 04 00 00 00    	add    esp,0x4
c001de4c:	0f a9                	pop    gs
c001de4e:	0f a1                	pop    fs
c001de50:	07                   	pop    es
c001de51:	1f                   	pop    ds
c001de52:	e8 ba 2e ff ff       	call   c0010d11 <KiCheckSignalZ>
c001de57:	3d 00 00 00 00       	cmp    eax,0x0
c001de5c:	0f 84 c0 00 00 00    	je     c001df22 <skipSignals>
c001de62:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001de67:	61                   	popa   
c001de68:	53                   	push   ebx
c001de69:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001de6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001de72:	5b                   	pop    ebx
c001de73:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001de78:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001de7b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001de7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001de81:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001de84:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001de87:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001de8a:	81 c4 08 00 00 00    	add    esp,0x8
c001de90:	5e                   	pop    esi
c001de91:	5b                   	pop    ebx
c001de92:	59                   	pop    ecx
c001de93:	5a                   	pop    edx
c001de94:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001de97:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001de9a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001de9d:	52                   	push   edx
c001de9e:	51                   	push   ecx
c001de9f:	53                   	push   ebx
c001dea0:	56                   	push   esi
c001dea1:	81 ec 08 00 00 00    	sub    esp,0x8
c001dea7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001deaa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001dead:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001deb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001deb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001deb6:	60                   	pusha  
c001deb7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001debd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001dec0:	89 e3                	mov    ebx,esp
c001dec2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001dec5:	52                   	push   edx
c001dec6:	68 e6 de 01 c0       	push   0xc001dee6
c001decb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001dece:	89 dc                	mov    esp,ebx
c001ded0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ded3:	68 23 00 00 00       	push   0x23
c001ded8:	51                   	push   ecx
c001ded9:	68 02 02 00 00       	push   0x202
c001dede:	68 1b 00 00 00       	push   0x1b
c001dee3:	ff 36                	push   DWORD PTR [esi]
c001dee5:	cf                   	iret   

c001dee6 <finishSignal>:
c001dee6:	cd 0f                	int    0xf

c001dee8 <finishSignal2>:
c001dee8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001deee:	e8 9b 2e ff ff       	call   c0010d8e <KiFinishSignalZ>
c001def3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001def9:	68 23 00 00 00       	push   0x23
c001defe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001df01:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001df04:	68 1b 00 00 00       	push   0x1b
c001df09:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001df0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df0f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001df12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001df15:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001df18:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001df1b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001df1e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001df21:	cf                   	iret   

c001df22 <skipSignals>:
c001df22:	61                   	popa   
c001df23:	81 c4 08 00 00 00    	add    esp,0x8
c001df29:	cf                   	iret   
c001df2a:	90                   	nop
c001df2b:	90                   	nop

c001df2c <irq16>:
c001df2c:	fa                   	cli    
c001df2d:	6a 00                	push   0x0
c001df2f:	6a 30                	push   0x30
c001df31:	e9 c0 fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df36 <irq17>:
c001df36:	fa                   	cli    
c001df37:	6a 00                	push   0x0
c001df39:	6a 31                	push   0x31
c001df3b:	e9 b6 fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df40 <irq18>:
c001df40:	fa                   	cli    
c001df41:	6a 00                	push   0x0
c001df43:	6a 32                	push   0x32
c001df45:	e9 ac fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df4a <irq19>:
c001df4a:	fa                   	cli    
c001df4b:	6a 00                	push   0x0
c001df4d:	6a 33                	push   0x33
c001df4f:	e9 a2 fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df54 <irq20>:
c001df54:	fa                   	cli    
c001df55:	6a 00                	push   0x0
c001df57:	6a 34                	push   0x34
c001df59:	e9 98 fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df5e <irq21>:
c001df5e:	fa                   	cli    
c001df5f:	6a 00                	push   0x0
c001df61:	6a 35                	push   0x35
c001df63:	e9 8e fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df68 <irq22>:
c001df68:	fa                   	cli    
c001df69:	6a 00                	push   0x0
c001df6b:	6a 36                	push   0x36
c001df6d:	e9 84 fe ff ff       	jmp    c001ddf6 <int_common_stub>

c001df72 <irq23>:
c001df72:	fa                   	cli    
c001df73:	6a 00                	push   0x0
c001df75:	6a 37                	push   0x37
c001df77:	e9 7a fe ff ff       	jmp    c001ddf6 <int_common_stub>
c001df7c:	66 90                	xchg   ax,ax
c001df7e:	66 90                	xchg   ax,ax

c001df80 <i386GetRDRAND>:
c001df80:	b9 64 00 00 00       	mov    ecx,0x64

c001df85 <retry>:
c001df85:	0f c7 f0             	rdrand eax
c001df88:	72 05                	jb     c001df8f <retry.done>
c001df8a:	e2 f9                	loop   c001df85 <retry>

c001df8c <retry.fail>:
c001df8c:	31 c0                	xor    eax,eax
c001df8e:	c3                   	ret    

c001df8f <retry.done>:
c001df8f:	c3                   	ret    

c001df90 <absolutelyNoChanceInHell>:
c001df90:	b8 01 00 00 00       	mov    eax,0x1
c001df95:	0f a2                	cpuid  
c001df97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001df9d:	74 06                	je     c001dfa5 <sseDetect.noSSE>
c001df9f:	b8 01 00 00 00       	mov    eax,0x1
c001dfa4:	c3                   	ret    

c001dfa5 <sseDetect.noSSE>:
c001dfa5:	31 c0                	xor    eax,eax
c001dfa7:	c3                   	ret    

c001dfa8 <sseSave>:
c001dfa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfac:	0f ae 00             	fxsave [eax]
c001dfaf:	c3                   	ret    

c001dfb0 <sseLoad>:
c001dfb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb4:	0f ae 08             	fxrstor [eax]
c001dfb7:	c3                   	ret    

c001dfb8 <sseInit>:
c001dfb8:	e8 42 00 00 00       	call   c001dfff <x87Init>
c001dfbd:	0f 20 e0             	mov    eax,cr4
c001dfc0:	66 0d 00 06          	or     ax,0x600
c001dfc4:	0f 22 e0             	mov    cr4,eax
c001dfc7:	c3                   	ret    

c001dfc8 <sseClose>:
c001dfc8:	c3                   	ret    
c001dfc9:	66 90                	xchg   ax,ax
c001dfcb:	66 90                	xchg   ax,ax
c001dfcd:	66 90                	xchg   ax,ax
c001dfcf:	90                   	nop

c001dfd0 <value_37F>:
c001dfd0:	7f 03                	jg     c001dfd5 <value_37A+0x1>

c001dfd2 <value_37E>:
c001dfd2:	7e 03                	jle    c001dfd7 <x87Detect+0x1>

c001dfd4 <value_37A>:
c001dfd4:	7a 03                	jp     c001dfd9 <x87Detect+0x3>

c001dfd6 <x87Detect>:
c001dfd6:	b8 01 00 00 00       	mov    eax,0x1
c001dfdb:	0f a2                	cpuid  
c001dfdd:	f7 c2 01 00 00 00    	test   edx,0x1
c001dfe3:	74 06                	je     c001dfeb <x87Detect.nox87>
c001dfe5:	b8 01 00 00 00       	mov    eax,0x1
c001dfea:	c3                   	ret    

c001dfeb <x87Detect.nox87>:
c001dfeb:	b8 00 00 00 00       	mov    eax,0x0
c001dff0:	c3                   	ret    

c001dff1 <x87Save>:
c001dff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dff5:	dd 30                	fnsave [eax]
c001dff7:	c3                   	ret    

c001dff8 <x87Load>:
c001dff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dffc:	dd 20                	frstor [eax]
c001dffe:	c3                   	ret    

c001dfff <x87Init>:
c001dfff:	0f 20 c0             	mov    eax,cr0
c001e002:	66 25 fb ff          	and    ax,0xfffb
c001e006:	66 0d 22 00          	or     ax,0x22
c001e00a:	0f 22 c0             	mov    cr0,eax
c001e00d:	db e3                	fninit 
c001e00f:	0f 06                	clts   
c001e011:	d9 2d d4 df 01 c0    	fldcw  WORD PTR ds:0xc001dfd4
c001e017:	c3                   	ret    

c001e018 <x87Close>:
c001e018:	c3                   	ret    
c001e019:	66 90                	xchg   ax,ax
c001e01b:	90                   	nop

c001e01c <__do_global_ctors_aux>:
c001e01c:	a1 30 ef 01 c0       	mov    eax,ds:0xc001ef30
c001e021:	83 f8 ff             	cmp    eax,0xffffffff
c001e024:	74 1a                	je     c001e040 <__do_global_ctors_aux+0x24>
c001e026:	55                   	push   ebp
c001e027:	89 e5                	mov    ebp,esp
c001e029:	53                   	push   ebx
c001e02a:	52                   	push   edx
c001e02b:	bb 30 ef 01 c0       	mov    ebx,0xc001ef30
c001e030:	ff d0                	call   eax
c001e032:	83 eb 04             	sub    ebx,0x4
c001e035:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e037:	83 f8 ff             	cmp    eax,0xffffffff
c001e03a:	75 f4                	jne    c001e030 <__do_global_ctors_aux+0x14>
c001e03c:	58                   	pop    eax
c001e03d:	5b                   	pop    ebx
c001e03e:	5d                   	pop    ebp
c001e03f:	c3                   	ret    
c001e040:	c3                   	ret    
c001e041:	66 90                	xchg   ax,ax
c001e043:	90                   	nop

c001e044 <__divdi3>:
c001e044:	55                   	push   ebp
c001e045:	57                   	push   edi
c001e046:	56                   	push   esi
c001e047:	53                   	push   ebx
c001e048:	83 ec 1c             	sub    esp,0x1c
c001e04b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e04f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e053:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e056:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e05a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e05e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e062:	85 db                	test   ebx,ebx
c001e064:	0f 88 8e 00 00 00    	js     c001e0f8 <__divdi3+0xb4>
c001e06a:	89 dd                	mov    ebp,ebx
c001e06c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e074:	89 d3                	mov    ebx,edx
c001e076:	85 d2                	test   edx,edx
c001e078:	79 0d                	jns    c001e087 <__divdi3+0x43>
c001e07a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e07e:	f7 d8                	neg    eax
c001e080:	83 d2 00             	adc    edx,0x0
c001e083:	f7 da                	neg    edx
c001e085:	89 d3                	mov    ebx,edx
c001e087:	89 c7                	mov    edi,eax
c001e089:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e08c:	85 db                	test   ebx,ebx
c001e08e:	75 48                	jne    c001e0d8 <__divdi3+0x94>
c001e090:	39 ef                	cmp    edi,ebp
c001e092:	76 24                	jbe    c001e0b8 <__divdi3+0x74>
c001e094:	89 ea                	mov    edx,ebp
c001e096:	f7 f7                	div    edi
c001e098:	89 c1                	mov    ecx,eax
c001e09a:	31 f6                	xor    esi,esi
c001e09c:	89 c8                	mov    eax,ecx
c001e09e:	89 f2                	mov    edx,esi
c001e0a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e0a4:	85 c9                	test   ecx,ecx
c001e0a6:	74 07                	je     c001e0af <__divdi3+0x6b>
c001e0a8:	f7 d8                	neg    eax
c001e0aa:	83 d2 00             	adc    edx,0x0
c001e0ad:	f7 da                	neg    edx
c001e0af:	83 c4 1c             	add    esp,0x1c
c001e0b2:	5b                   	pop    ebx
c001e0b3:	5e                   	pop    esi
c001e0b4:	5f                   	pop    edi
c001e0b5:	5d                   	pop    ebp
c001e0b6:	c3                   	ret    
c001e0b7:	90                   	nop
c001e0b8:	85 ff                	test   edi,edi
c001e0ba:	75 0b                	jne    c001e0c7 <__divdi3+0x83>
c001e0bc:	b8 01 00 00 00       	mov    eax,0x1
c001e0c1:	31 d2                	xor    edx,edx
c001e0c3:	f7 f3                	div    ebx
c001e0c5:	89 c7                	mov    edi,eax
c001e0c7:	31 d2                	xor    edx,edx
c001e0c9:	89 e8                	mov    eax,ebp
c001e0cb:	f7 f7                	div    edi
c001e0cd:	89 c6                	mov    esi,eax
c001e0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e0d2:	f7 f7                	div    edi
c001e0d4:	89 c1                	mov    ecx,eax
c001e0d6:	eb c4                	jmp    c001e09c <__divdi3+0x58>
c001e0d8:	39 eb                	cmp    ebx,ebp
c001e0da:	77 3c                	ja     c001e118 <__divdi3+0xd4>
c001e0dc:	0f bd f3             	bsr    esi,ebx
c001e0df:	83 f6 1f             	xor    esi,0x1f
c001e0e2:	75 40                	jne    c001e124 <__divdi3+0xe0>
c001e0e4:	39 eb                	cmp    ebx,ebp
c001e0e6:	72 09                	jb     c001e0f1 <__divdi3+0xad>
c001e0e8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e0eb:	0f 87 97 00 00 00    	ja     c001e188 <__divdi3+0x144>
c001e0f1:	b9 01 00 00 00       	mov    ecx,0x1
c001e0f6:	eb a4                	jmp    c001e09c <__divdi3+0x58>
c001e0f8:	f7 d9                	neg    ecx
c001e0fa:	83 d3 00             	adc    ebx,0x0
c001e0fd:	f7 db                	neg    ebx
c001e0ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e102:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e106:	89 dd                	mov    ebp,ebx
c001e108:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e110:	e9 5f ff ff ff       	jmp    c001e074 <__divdi3+0x30>
c001e115:	8d 76 00             	lea    esi,[esi+0x0]
c001e118:	31 f6                	xor    esi,esi
c001e11a:	31 c9                	xor    ecx,ecx
c001e11c:	e9 7b ff ff ff       	jmp    c001e09c <__divdi3+0x58>
c001e121:	8d 76 00             	lea    esi,[esi+0x0]
c001e124:	b8 20 00 00 00       	mov    eax,0x20
c001e129:	29 f0                	sub    eax,esi
c001e12b:	89 f1                	mov    ecx,esi
c001e12d:	d3 e3                	shl    ebx,cl
c001e12f:	89 fa                	mov    edx,edi
c001e131:	88 c1                	mov    cl,al
c001e133:	d3 ea                	shr    edx,cl
c001e135:	09 da                	or     edx,ebx
c001e137:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e13b:	89 f1                	mov    ecx,esi
c001e13d:	d3 e7                	shl    edi,cl
c001e13f:	89 eb                	mov    ebx,ebp
c001e141:	88 c1                	mov    cl,al
c001e143:	d3 eb                	shr    ebx,cl
c001e145:	89 f1                	mov    ecx,esi
c001e147:	d3 e5                	shl    ebp,cl
c001e149:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e14c:	88 c1                	mov    cl,al
c001e14e:	d3 ea                	shr    edx,cl
c001e150:	09 d5                	or     ebp,edx
c001e152:	89 e8                	mov    eax,ebp
c001e154:	89 da                	mov    edx,ebx
c001e156:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e15a:	89 d3                	mov    ebx,edx
c001e15c:	89 c5                	mov    ebp,eax
c001e15e:	f7 e7                	mul    edi
c001e160:	39 d3                	cmp    ebx,edx
c001e162:	72 18                	jb     c001e17c <__divdi3+0x138>
c001e164:	74 0a                	je     c001e170 <__divdi3+0x12c>
c001e166:	89 e9                	mov    ecx,ebp
c001e168:	31 f6                	xor    esi,esi
c001e16a:	e9 2d ff ff ff       	jmp    c001e09c <__divdi3+0x58>
c001e16f:	90                   	nop
c001e170:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e173:	89 f1                	mov    ecx,esi
c001e175:	d3 e7                	shl    edi,cl
c001e177:	39 c7                	cmp    edi,eax
c001e179:	73 eb                	jae    c001e166 <__divdi3+0x122>
c001e17b:	90                   	nop
c001e17c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e17f:	31 f6                	xor    esi,esi
c001e181:	e9 16 ff ff ff       	jmp    c001e09c <__divdi3+0x58>
c001e186:	66 90                	xchg   ax,ax
c001e188:	31 c9                	xor    ecx,ecx
c001e18a:	e9 0d ff ff ff       	jmp    c001e09c <__divdi3+0x58>
c001e18f:	90                   	nop

c001e190 <__moddi3>:
c001e190:	55                   	push   ebp
c001e191:	57                   	push   edi
c001e192:	56                   	push   esi
c001e193:	53                   	push   ebx
c001e194:	83 ec 2c             	sub    esp,0x2c
c001e197:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e19b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e19f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e1a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e1a7:	85 db                	test   ebx,ebx
c001e1a9:	0f 88 85 00 00 00    	js     c001e234 <__moddi3+0xa4>
c001e1af:	89 de                	mov    esi,ebx
c001e1b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e1b9:	89 d7                	mov    edi,edx
c001e1bb:	85 d2                	test   edx,edx
c001e1bd:	79 09                	jns    c001e1c8 <__moddi3+0x38>
c001e1bf:	f7 d8                	neg    eax
c001e1c1:	83 d2 00             	adc    edx,0x0
c001e1c4:	f7 da                	neg    edx
c001e1c6:	89 d7                	mov    edi,edx
c001e1c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1cc:	89 cd                	mov    ebp,ecx
c001e1ce:	85 ff                	test   edi,edi
c001e1d0:	75 52                	jne    c001e224 <__moddi3+0x94>
c001e1d2:	89 c3                	mov    ebx,eax
c001e1d4:	39 f0                	cmp    eax,esi
c001e1d6:	76 24                	jbe    c001e1fc <__moddi3+0x6c>
c001e1d8:	89 c8                	mov    eax,ecx
c001e1da:	89 f2                	mov    edx,esi
c001e1dc:	f7 f3                	div    ebx
c001e1de:	89 d6                	mov    esi,edx
c001e1e0:	89 f0                	mov    eax,esi
c001e1e2:	31 d2                	xor    edx,edx
c001e1e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1e8:	85 c9                	test   ecx,ecx
c001e1ea:	74 07                	je     c001e1f3 <__moddi3+0x63>
c001e1ec:	f7 d8                	neg    eax
c001e1ee:	83 d2 00             	adc    edx,0x0
c001e1f1:	f7 da                	neg    edx
c001e1f3:	83 c4 2c             	add    esp,0x2c
c001e1f6:	5b                   	pop    ebx
c001e1f7:	5e                   	pop    esi
c001e1f8:	5f                   	pop    edi
c001e1f9:	5d                   	pop    ebp
c001e1fa:	c3                   	ret    
c001e1fb:	90                   	nop
c001e1fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e200:	85 db                	test   ebx,ebx
c001e202:	75 0d                	jne    c001e211 <__moddi3+0x81>
c001e204:	b8 01 00 00 00       	mov    eax,0x1
c001e209:	31 d2                	xor    edx,edx
c001e20b:	f7 f7                	div    edi
c001e20d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e211:	89 f0                	mov    eax,esi
c001e213:	31 d2                	xor    edx,edx
c001e215:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e219:	f7 f7                	div    edi
c001e21b:	89 e8                	mov    eax,ebp
c001e21d:	f7 f7                	div    edi
c001e21f:	89 d6                	mov    esi,edx
c001e221:	eb bd                	jmp    c001e1e0 <__moddi3+0x50>
c001e223:	90                   	nop
c001e224:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e228:	39 f7                	cmp    edi,esi
c001e22a:	76 20                	jbe    c001e24c <__moddi3+0xbc>
c001e22c:	89 c8                	mov    eax,ecx
c001e22e:	89 f2                	mov    edx,esi
c001e230:	eb b2                	jmp    c001e1e4 <__moddi3+0x54>
c001e232:	66 90                	xchg   ax,ax
c001e234:	f7 d9                	neg    ecx
c001e236:	83 d3 00             	adc    ebx,0x0
c001e239:	f7 db                	neg    ebx
c001e23b:	89 de                	mov    esi,ebx
c001e23d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e245:	e9 6f ff ff ff       	jmp    c001e1b9 <__moddi3+0x29>
c001e24a:	66 90                	xchg   ax,ax
c001e24c:	0f bd c7             	bsr    eax,edi
c001e24f:	83 f0 1f             	xor    eax,0x1f
c001e252:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e256:	75 24                	jne    c001e27c <__moddi3+0xec>
c001e258:	39 f7                	cmp    edi,esi
c001e25a:	72 06                	jb     c001e262 <__moddi3+0xd2>
c001e25c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e260:	77 0c                	ja     c001e26e <__moddi3+0xde>
c001e262:	89 e9                	mov    ecx,ebp
c001e264:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e268:	19 fe                	sbb    esi,edi
c001e26a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e26e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e272:	89 f2                	mov    edx,esi
c001e274:	e9 6b ff ff ff       	jmp    c001e1e4 <__moddi3+0x54>
c001e279:	8d 76 00             	lea    esi,[esi+0x0]
c001e27c:	b8 20 00 00 00       	mov    eax,0x20
c001e281:	89 c2                	mov    edx,eax
c001e283:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e287:	29 da                	sub    edx,ebx
c001e289:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e28d:	88 d9                	mov    cl,bl
c001e28f:	d3 e7                	shl    edi,cl
c001e291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e295:	88 d1                	mov    cl,dl
c001e297:	d3 e8                	shr    eax,cl
c001e299:	09 c7                	or     edi,eax
c001e29b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e29f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e2a3:	89 d8                	mov    eax,ebx
c001e2a5:	88 d9                	mov    cl,bl
c001e2a7:	d3 e7                	shl    edi,cl
c001e2a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e2ad:	89 f3                	mov    ebx,esi
c001e2af:	88 d1                	mov    cl,dl
c001e2b1:	d3 eb                	shr    ebx,cl
c001e2b3:	89 c7                	mov    edi,eax
c001e2b5:	88 c1                	mov    cl,al
c001e2b7:	d3 e6                	shl    esi,cl
c001e2b9:	89 e8                	mov    eax,ebp
c001e2bb:	88 d1                	mov    cl,dl
c001e2bd:	d3 e8                	shr    eax,cl
c001e2bf:	09 f0                	or     eax,esi
c001e2c1:	89 f9                	mov    ecx,edi
c001e2c3:	d3 e5                	shl    ebp,cl
c001e2c5:	89 da                	mov    edx,ebx
c001e2c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e2cb:	89 d3                	mov    ebx,edx
c001e2cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2d1:	89 c6                	mov    esi,eax
c001e2d3:	89 d1                	mov    ecx,edx
c001e2d5:	39 d3                	cmp    ebx,edx
c001e2d7:	72 27                	jb     c001e300 <__moddi3+0x170>
c001e2d9:	74 21                	je     c001e2fc <__moddi3+0x16c>
c001e2db:	29 f5                	sub    ebp,esi
c001e2dd:	19 cb                	sbb    ebx,ecx
c001e2df:	89 de                	mov    esi,ebx
c001e2e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e2e5:	d3 e6                	shl    esi,cl
c001e2e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e2eb:	89 f9                	mov    ecx,edi
c001e2ed:	d3 ed                	shr    ebp,cl
c001e2ef:	09 ee                	or     esi,ebp
c001e2f1:	89 f0                	mov    eax,esi
c001e2f3:	d3 eb                	shr    ebx,cl
c001e2f5:	89 da                	mov    edx,ebx
c001e2f7:	e9 e8 fe ff ff       	jmp    c001e1e4 <__moddi3+0x54>
c001e2fc:	39 c5                	cmp    ebp,eax
c001e2fe:	73 db                	jae    c001e2db <__moddi3+0x14b>
c001e300:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e304:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e308:	89 d1                	mov    ecx,edx
c001e30a:	89 c6                	mov    esi,eax
c001e30c:	eb cd                	jmp    c001e2db <__moddi3+0x14b>
c001e30e:	66 90                	xchg   ax,ax

c001e310 <__udivdi3>:
c001e310:	55                   	push   ebp
c001e311:	57                   	push   edi
c001e312:	56                   	push   esi
c001e313:	53                   	push   ebx
c001e314:	83 ec 1c             	sub    esp,0x1c
c001e317:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e31b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e31f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e323:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e327:	85 d2                	test   edx,edx
c001e329:	75 41                	jne    c001e36c <__udivdi3+0x5c>
c001e32b:	39 f7                	cmp    edi,esi
c001e32d:	76 15                	jbe    c001e344 <__udivdi3+0x34>
c001e32f:	89 e8                	mov    eax,ebp
c001e331:	89 f2                	mov    edx,esi
c001e333:	f7 f7                	div    edi
c001e335:	31 db                	xor    ebx,ebx
c001e337:	89 da                	mov    edx,ebx
c001e339:	83 c4 1c             	add    esp,0x1c
c001e33c:	5b                   	pop    ebx
c001e33d:	5e                   	pop    esi
c001e33e:	5f                   	pop    edi
c001e33f:	5d                   	pop    ebp
c001e340:	c3                   	ret    
c001e341:	8d 76 00             	lea    esi,[esi+0x0]
c001e344:	89 f9                	mov    ecx,edi
c001e346:	85 ff                	test   edi,edi
c001e348:	75 0b                	jne    c001e355 <__udivdi3+0x45>
c001e34a:	b8 01 00 00 00       	mov    eax,0x1
c001e34f:	31 d2                	xor    edx,edx
c001e351:	f7 f7                	div    edi
c001e353:	89 c1                	mov    ecx,eax
c001e355:	31 d2                	xor    edx,edx
c001e357:	89 f0                	mov    eax,esi
c001e359:	f7 f1                	div    ecx
c001e35b:	89 c3                	mov    ebx,eax
c001e35d:	89 e8                	mov    eax,ebp
c001e35f:	f7 f1                	div    ecx
c001e361:	89 da                	mov    edx,ebx
c001e363:	83 c4 1c             	add    esp,0x1c
c001e366:	5b                   	pop    ebx
c001e367:	5e                   	pop    esi
c001e368:	5f                   	pop    edi
c001e369:	5d                   	pop    ebp
c001e36a:	c3                   	ret    
c001e36b:	90                   	nop
c001e36c:	39 f2                	cmp    edx,esi
c001e36e:	77 1c                	ja     c001e38c <__udivdi3+0x7c>
c001e370:	0f bd da             	bsr    ebx,edx
c001e373:	83 f3 1f             	xor    ebx,0x1f
c001e376:	75 24                	jne    c001e39c <__udivdi3+0x8c>
c001e378:	39 f2                	cmp    edx,esi
c001e37a:	72 08                	jb     c001e384 <__udivdi3+0x74>
c001e37c:	39 ef                	cmp    edi,ebp
c001e37e:	0f 87 84 00 00 00    	ja     c001e408 <__udivdi3+0xf8>
c001e384:	b8 01 00 00 00       	mov    eax,0x1
c001e389:	eb ac                	jmp    c001e337 <__udivdi3+0x27>
c001e38b:	90                   	nop
c001e38c:	31 db                	xor    ebx,ebx
c001e38e:	31 c0                	xor    eax,eax
c001e390:	89 da                	mov    edx,ebx
c001e392:	83 c4 1c             	add    esp,0x1c
c001e395:	5b                   	pop    ebx
c001e396:	5e                   	pop    esi
c001e397:	5f                   	pop    edi
c001e398:	5d                   	pop    ebp
c001e399:	c3                   	ret    
c001e39a:	66 90                	xchg   ax,ax
c001e39c:	b8 20 00 00 00       	mov    eax,0x20
c001e3a1:	29 d8                	sub    eax,ebx
c001e3a3:	88 d9                	mov    cl,bl
c001e3a5:	d3 e2                	shl    edx,cl
c001e3a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3ab:	89 fa                	mov    edx,edi
c001e3ad:	88 c1                	mov    cl,al
c001e3af:	d3 ea                	shr    edx,cl
c001e3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3b5:	09 d1                	or     ecx,edx
c001e3b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3bb:	88 d9                	mov    cl,bl
c001e3bd:	d3 e7                	shl    edi,cl
c001e3bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3c3:	89 f7                	mov    edi,esi
c001e3c5:	88 c1                	mov    cl,al
c001e3c7:	d3 ef                	shr    edi,cl
c001e3c9:	88 d9                	mov    cl,bl
c001e3cb:	d3 e6                	shl    esi,cl
c001e3cd:	89 ea                	mov    edx,ebp
c001e3cf:	88 c1                	mov    cl,al
c001e3d1:	d3 ea                	shr    edx,cl
c001e3d3:	09 d6                	or     esi,edx
c001e3d5:	89 f0                	mov    eax,esi
c001e3d7:	89 fa                	mov    edx,edi
c001e3d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e3dd:	89 d7                	mov    edi,edx
c001e3df:	89 c6                	mov    esi,eax
c001e3e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3e5:	39 d7                	cmp    edi,edx
c001e3e7:	72 13                	jb     c001e3fc <__udivdi3+0xec>
c001e3e9:	74 09                	je     c001e3f4 <__udivdi3+0xe4>
c001e3eb:	89 f0                	mov    eax,esi
c001e3ed:	31 db                	xor    ebx,ebx
c001e3ef:	e9 43 ff ff ff       	jmp    c001e337 <__udivdi3+0x27>
c001e3f4:	88 d9                	mov    cl,bl
c001e3f6:	d3 e5                	shl    ebp,cl
c001e3f8:	39 c5                	cmp    ebp,eax
c001e3fa:	73 ef                	jae    c001e3eb <__udivdi3+0xdb>
c001e3fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001e3ff:	31 db                	xor    ebx,ebx
c001e401:	e9 31 ff ff ff       	jmp    c001e337 <__udivdi3+0x27>
c001e406:	66 90                	xchg   ax,ax
c001e408:	31 c0                	xor    eax,eax
c001e40a:	e9 28 ff ff ff       	jmp    c001e337 <__udivdi3+0x27>
c001e40f:	90                   	nop

c001e410 <__umoddi3>:
c001e410:	55                   	push   ebp
c001e411:	57                   	push   edi
c001e412:	56                   	push   esi
c001e413:	53                   	push   ebx
c001e414:	83 ec 1c             	sub    esp,0x1c
c001e417:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e41b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e41f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e423:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e427:	89 da                	mov    edx,ebx
c001e429:	85 c0                	test   eax,eax
c001e42b:	75 37                	jne    c001e464 <__umoddi3+0x54>
c001e42d:	39 df                	cmp    edi,ebx
c001e42f:	76 13                	jbe    c001e444 <__umoddi3+0x34>
c001e431:	89 f0                	mov    eax,esi
c001e433:	f7 f7                	div    edi
c001e435:	89 d0                	mov    eax,edx
c001e437:	31 d2                	xor    edx,edx
c001e439:	83 c4 1c             	add    esp,0x1c
c001e43c:	5b                   	pop    ebx
c001e43d:	5e                   	pop    esi
c001e43e:	5f                   	pop    edi
c001e43f:	5d                   	pop    ebp
c001e440:	c3                   	ret    
c001e441:	8d 76 00             	lea    esi,[esi+0x0]
c001e444:	89 fd                	mov    ebp,edi
c001e446:	85 ff                	test   edi,edi
c001e448:	75 0b                	jne    c001e455 <__umoddi3+0x45>
c001e44a:	b8 01 00 00 00       	mov    eax,0x1
c001e44f:	31 d2                	xor    edx,edx
c001e451:	f7 f7                	div    edi
c001e453:	89 c5                	mov    ebp,eax
c001e455:	89 d8                	mov    eax,ebx
c001e457:	31 d2                	xor    edx,edx
c001e459:	f7 f5                	div    ebp
c001e45b:	89 f0                	mov    eax,esi
c001e45d:	f7 f5                	div    ebp
c001e45f:	89 d0                	mov    eax,edx
c001e461:	eb d4                	jmp    c001e437 <__umoddi3+0x27>
c001e463:	90                   	nop
c001e464:	89 f1                	mov    ecx,esi
c001e466:	39 d8                	cmp    eax,ebx
c001e468:	76 0a                	jbe    c001e474 <__umoddi3+0x64>
c001e46a:	89 f0                	mov    eax,esi
c001e46c:	83 c4 1c             	add    esp,0x1c
c001e46f:	5b                   	pop    ebx
c001e470:	5e                   	pop    esi
c001e471:	5f                   	pop    edi
c001e472:	5d                   	pop    ebp
c001e473:	c3                   	ret    
c001e474:	0f bd e8             	bsr    ebp,eax
c001e477:	83 f5 1f             	xor    ebp,0x1f
c001e47a:	75 1c                	jne    c001e498 <__umoddi3+0x88>
c001e47c:	39 d8                	cmp    eax,ebx
c001e47e:	72 04                	jb     c001e484 <__umoddi3+0x74>
c001e480:	39 f7                	cmp    edi,esi
c001e482:	77 08                	ja     c001e48c <__umoddi3+0x7c>
c001e484:	89 da                	mov    edx,ebx
c001e486:	29 fe                	sub    esi,edi
c001e488:	19 c2                	sbb    edx,eax
c001e48a:	89 f1                	mov    ecx,esi
c001e48c:	89 c8                	mov    eax,ecx
c001e48e:	83 c4 1c             	add    esp,0x1c
c001e491:	5b                   	pop    ebx
c001e492:	5e                   	pop    esi
c001e493:	5f                   	pop    edi
c001e494:	5d                   	pop    ebp
c001e495:	c3                   	ret    
c001e496:	66 90                	xchg   ax,ax
c001e498:	ba 20 00 00 00       	mov    edx,0x20
c001e49d:	29 ea                	sub    edx,ebp
c001e49f:	89 e9                	mov    ecx,ebp
c001e4a1:	d3 e0                	shl    eax,cl
c001e4a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4a7:	89 f8                	mov    eax,edi
c001e4a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e4ad:	88 d1                	mov    cl,dl
c001e4af:	d3 e8                	shr    eax,cl
c001e4b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4b5:	09 c1                	or     ecx,eax
c001e4b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4bb:	89 e9                	mov    ecx,ebp
c001e4bd:	d3 e7                	shl    edi,cl
c001e4bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4c3:	89 d8                	mov    eax,ebx
c001e4c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4c9:	88 d1                	mov    cl,dl
c001e4cb:	d3 e8                	shr    eax,cl
c001e4cd:	89 c7                	mov    edi,eax
c001e4cf:	89 e9                	mov    ecx,ebp
c001e4d1:	d3 e3                	shl    ebx,cl
c001e4d3:	89 f0                	mov    eax,esi
c001e4d5:	88 d1                	mov    cl,dl
c001e4d7:	d3 e8                	shr    eax,cl
c001e4d9:	09 d8                	or     eax,ebx
c001e4db:	89 e9                	mov    ecx,ebp
c001e4dd:	d3 e6                	shl    esi,cl
c001e4df:	89 f3                	mov    ebx,esi
c001e4e1:	89 fa                	mov    edx,edi
c001e4e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4e7:	89 d1                	mov    ecx,edx
c001e4e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e4ed:	89 c6                	mov    esi,eax
c001e4ef:	89 d7                	mov    edi,edx
c001e4f1:	39 d1                	cmp    ecx,edx
c001e4f3:	72 27                	jb     c001e51c <__umoddi3+0x10c>
c001e4f5:	74 21                	je     c001e518 <__umoddi3+0x108>
c001e4f7:	89 ca                	mov    edx,ecx
c001e4f9:	29 f3                	sub    ebx,esi
c001e4fb:	19 fa                	sbb    edx,edi
c001e4fd:	89 d0                	mov    eax,edx
c001e4ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e503:	d3 e0                	shl    eax,cl
c001e505:	89 e9                	mov    ecx,ebp
c001e507:	d3 eb                	shr    ebx,cl
c001e509:	09 d8                	or     eax,ebx
c001e50b:	d3 ea                	shr    edx,cl
c001e50d:	83 c4 1c             	add    esp,0x1c
c001e510:	5b                   	pop    ebx
c001e511:	5e                   	pop    esi
c001e512:	5f                   	pop    edi
c001e513:	5d                   	pop    ebp
c001e514:	c3                   	ret    
c001e515:	8d 76 00             	lea    esi,[esi+0x0]
c001e518:	39 c3                	cmp    ebx,eax
c001e51a:	73 db                	jae    c001e4f7 <__umoddi3+0xe7>
c001e51c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e520:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e524:	89 d7                	mov    edi,edx
c001e526:	89 c6                	mov    esi,eax
c001e528:	eb cd                	jmp    c001e4f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e52a <_init>:
c001e52a:	55                   	push   ebp
c001e52b:	89 e5                	mov    ebp,esp
c001e52d:	e8 c2 1b fe ff       	call   c00000f4 <frame_dummy>
c001e532:	e8 e5 fa ff ff       	call   c001e01c <__do_global_ctors_aux>
c001e537:	5d                   	pop    ebp
c001e538:	c3                   	ret    

Disassembly of section .fini:

c001e539 <_fini>:
c001e539:	55                   	push   ebp
c001e53a:	89 e5                	mov    ebp,esp
c001e53c:	e8 43 1b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e541:	5d                   	pop    ebp
c001e542:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e544 <Computer::~Computer()>:
c001e544:	83 ec 1c             	sub    esp,0x1c
c001e547:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c001e54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e550:	89 10                	mov    DWORD PTR [eax],edx
c001e552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e556:	89 04 24             	mov    DWORD PTR [esp],eax
c001e559:	e8 b8 d7 fe ff       	call   c000bd16 <Device::~Device()>
c001e55e:	90                   	nop
c001e55f:	83 c4 1c             	add    esp,0x1c
c001e562:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e564 <Computer::~Computer()>:
c001e564:	83 ec 1c             	sub    esp,0x1c
c001e567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e56b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e56e:	e8 d1 ff ff ff       	call   c001e544 <Computer::~Computer()>
c001e573:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001e57b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e57f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e582:	e8 45 c3 fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001e587:	83 c4 1c             	add    esp,0x1c
c001e58a:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e58b <idleCommon()>:
c001e58b:	83 ec 0c             	sub    esp,0xc
c001e58e:	fa                   	cli    
c001e58f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e595:	e8 b6 6a ff ff       	call   c0015050 <schedule()>
c001e59a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e59f:	48                   	dec    eax
c001e5a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e5a5:	75 01                	jne    c001e5a8 <idleCommon()+0x1d>
c001e5a7:	fb                   	sti    
c001e5a8:	83 c4 0c             	add    esp,0xc
c001e5ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e5ac <LinkedList<UnixFile>::~LinkedList()>:
c001e5ac:	90                   	nop
c001e5ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e5ae <LinkedList<UnixFile>::LinkedList()>:
c001e5ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5ee:	90                   	nop
c001e5ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e5f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e5f0:	83 ec 1c             	sub    esp,0x1c
c001e5f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e5f8:	75 0c                	jne    c001e606 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e5fa:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e601:	e8 2f 21 ff ff       	call   c0010735 <KePanic(char const*)>
c001e606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e60a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e60c:	85 c0                	test   eax,eax
c001e60e:	74 34                	je     c001e644 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e614:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e617:	85 c0                	test   eax,eax
c001e619:	74 29                	je     c001e644 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e61b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e61f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e622:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e626:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e62d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e631:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e63b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e642:	eb 5d                	jmp    c001e6a1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e648:	8b 00                	mov    eax,DWORD PTR [eax]
c001e64a:	85 c0                	test   eax,eax
c001e64c:	75 47                	jne    c001e695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e655:	85 c0                	test   eax,eax
c001e657:	75 3c                	jne    c001e695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e65d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e661:	89 10                	mov    DWORD PTR [eax],edx
c001e663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e667:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e66b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e66e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e672:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e675:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e680:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e683:	85 c0                	test   eax,eax
c001e685:	74 1a                	je     c001e6a1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e687:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001e68e:	e8 a2 20 ff ff       	call   c0010735 <KePanic(char const*)>
c001e693:	eb 0c                	jmp    c001e6a1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e695:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001e69c:	e8 94 20 ff ff       	call   c0010735 <KePanic(char const*)>
c001e6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6a8:	8d 50 01             	lea    edx,[eax+0x1]
c001e6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6b2:	90                   	nop
c001e6b3:	83 c4 1c             	add    esp,0x1c
c001e6b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e6b8 <LinkedList<UnixFile>::getFirstElement()>:
c001e6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e6c0 <LinkedList<UnixFile>::removeFirst()>:
c001e6c0:	83 ec 1c             	sub    esp,0x1c
c001e6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6c9:	85 c0                	test   eax,eax
c001e6cb:	75 0e                	jne    c001e6db <LinkedList<UnixFile>::removeFirst()+0x1b>
c001e6cd:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001e6d4:	e8 5c 20 ff ff       	call   c0010735 <KePanic(char const*)>
c001e6d9:	eb 76                	jmp    c001e751 <LinkedList<UnixFile>::removeFirst()+0x91>
c001e6db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6e5:	85 c0                	test   eax,eax
c001e6e7:	74 0c                	je     c001e6f5 <LinkedList<UnixFile>::removeFirst()+0x35>
c001e6e9:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001e6f0:	e8 40 20 ff ff       	call   c0010735 <KePanic(char const*)>
c001e6f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6fe:	85 c0                	test   eax,eax
c001e700:	75 2f                	jne    c001e731 <LinkedList<UnixFile>::removeFirst()+0x71>
c001e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e706:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e710:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e71b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e71e:	83 f8 01             	cmp    eax,0x1
c001e721:	74 1d                	je     c001e740 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e723:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001e72a:	e8 06 20 ff ff       	call   c0010735 <KePanic(char const*)>
c001e72f:	eb 0f                	jmp    c001e740 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e735:	8b 00                	mov    eax,DWORD PTR [eax]
c001e737:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73e:	89 10                	mov    DWORD PTR [eax],edx
c001e740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e747:	8d 50 ff             	lea    edx,[eax-0x1]
c001e74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e751:	83 c4 1c             	add    esp,0x1c
c001e754:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e756 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e75a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e75d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e75e <DriverlessDevice::~DriverlessDevice()>:
c001e75e:	83 ec 04             	sub    esp,0x4
c001e761:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c001e766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e76a:	89 10                	mov    DWORD PTR [eax],edx
c001e76c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e770:	89 04 24             	mov    DWORD PTR [esp],eax
c001e773:	e8 9e d5 fe ff       	call   c000bd16 <Device::~Device()>
c001e778:	90                   	nop
c001e779:	83 c4 04             	add    esp,0x4
c001e77c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e77e <DriverlessDevice::~DriverlessDevice()>:
c001e77e:	83 ec 1c             	sub    esp,0x1c
c001e781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e785:	89 04 24             	mov    DWORD PTR [esp],eax
c001e788:	e8 d1 ff ff ff       	call   c001e75e <DriverlessDevice::~DriverlessDevice()>
c001e78d:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001e795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e799:	89 04 24             	mov    DWORD PTR [esp],eax
c001e79c:	e8 2b c1 fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001e7a1:	83 c4 1c             	add    esp,0x1c
c001e7a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e7a6 <LinkedList<Device>::addElement(Device*)>:
c001e7a6:	83 ec 1c             	sub    esp,0x1c
c001e7a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e7ae:	75 0c                	jne    c001e7bc <LinkedList<Device>::addElement(Device*)+0x16>
c001e7b0:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e7b7:	e8 79 1f ff ff       	call   c0010735 <KePanic(char const*)>
c001e7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c2:	85 c0                	test   eax,eax
c001e7c4:	74 3a                	je     c001e800 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7cd:	85 c0                	test   eax,eax
c001e7cf:	74 2f                	je     c001e800 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7dc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7f4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e7fe:	eb 60                	jmp    c001e860 <LinkedList<Device>::addElement(Device*)+0xba>
c001e800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e804:	8b 00                	mov    eax,DWORD PTR [eax]
c001e806:	85 c0                	test   eax,eax
c001e808:	75 4a                	jne    c001e854 <LinkedList<Device>::addElement(Device*)+0xae>
c001e80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e811:	85 c0                	test   eax,eax
c001e813:	75 3f                	jne    c001e854 <LinkedList<Device>::addElement(Device*)+0xae>
c001e815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e81d:	89 10                	mov    DWORD PTR [eax],edx
c001e81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e823:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e831:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e83f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e842:	85 c0                	test   eax,eax
c001e844:	74 1a                	je     c001e860 <LinkedList<Device>::addElement(Device*)+0xba>
c001e846:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001e84d:	e8 e3 1e ff ff       	call   c0010735 <KePanic(char const*)>
c001e852:	eb 0c                	jmp    c001e860 <LinkedList<Device>::addElement(Device*)+0xba>
c001e854:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001e85b:	e8 d5 1e ff ff       	call   c0010735 <KePanic(char const*)>
c001e860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e867:	8d 50 01             	lea    edx,[eax+0x1]
c001e86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e86e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e871:	90                   	nop
c001e872:	83 c4 1c             	add    esp,0x1c
c001e875:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e876 <LinkedList<Device>::LinkedList()>:
c001e876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8b6:	90                   	nop
c001e8b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8be:	85 c0                	test   eax,eax
c001e8c0:	75 0e                	jne    c001e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c9:	85 c0                	test   eax,eax
c001e8cb:	75 03                	jne    c001e8d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8cd:	b0 01                	mov    al,0x1
c001e8cf:	c3                   	ret    
c001e8d0:	b0 00                	mov    al,0x0
c001e8d2:	90                   	nop
c001e8d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e8d4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e8dc <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e8dc:	83 ec 1c             	sub    esp,0x1c
c001e8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8e5:	85 c0                	test   eax,eax
c001e8e7:	75 13                	jne    c001e8fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001e8e9:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001e8f0:	e8 40 1e ff ff       	call   c0010735 <KePanic(char const*)>
c001e8f5:	e9 8a 00 00 00       	jmp    c001e984 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001e8fa:	66 90                	xchg   ax,ax
c001e8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e903:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e906:	85 c0                	test   eax,eax
c001e908:	0f 95 c0             	setne  al
c001e90b:	84 c0                	test   al,al
c001e90d:	74 0d                	je     c001e91c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001e90f:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001e916:	e8 1a 1e ff ff       	call   c0010735 <KePanic(char const*)>
c001e91b:	90                   	nop
c001e91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e920:	8b 00                	mov    eax,DWORD PTR [eax]
c001e922:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e925:	85 c0                	test   eax,eax
c001e927:	0f 94 c0             	sete   al
c001e92a:	84 c0                	test   al,al
c001e92c:	74 32                	je     c001e960 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001e92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e932:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e93c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e94a:	83 f8 01             	cmp    eax,0x1
c001e94d:	74 21                	je     c001e970 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e94f:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001e956:	e8 da 1d ff ff       	call   c0010735 <KePanic(char const*)>
c001e95b:	eb 13                	jmp    c001e970 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e95d:	8d 76 00             	lea    esi,[esi+0x0]
c001e960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e964:	8b 00                	mov    eax,DWORD PTR [eax]
c001e966:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96d:	89 10                	mov    DWORD PTR [eax],edx
c001e96f:	90                   	nop
c001e970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e977:	8d 50 ff             	lea    edx,[eax-0x1]
c001e97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e97e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e981:	8d 76 00             	lea    esi,[esi+0x0]
c001e984:	83 c4 1c             	add    esp,0x1c
c001e987:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e988:	83 ec 1c             	sub    esp,0x1c
c001e98b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e990:	75 0e                	jne    c001e9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001e992:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e999:	e8 97 1d ff ff       	call   c0010735 <KePanic(char const*)>
c001e99e:	66 90                	xchg   ax,ax
c001e9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a6:	85 c0                	test   eax,eax
c001e9a8:	74 36                	je     c001e9e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9b1:	85 c0                	test   eax,eax
c001e9b3:	74 2b                	je     c001e9e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9c0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9dc:	eb 62                	jmp    c001ea40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001e9de:	66 90                	xchg   ax,ax
c001e9e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e6:	85 c0                	test   eax,eax
c001e9e8:	75 4a                	jne    c001ea34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001e9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9f1:	85 c0                	test   eax,eax
c001e9f3:	75 3f                	jne    c001ea34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001e9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9fd:	89 10                	mov    DWORD PTR [eax],edx
c001e9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1f:	85 c0                	test   eax,eax
c001ea21:	74 1d                	je     c001ea40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001ea23:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001ea2a:	e8 06 1d ff ff       	call   c0010735 <KePanic(char const*)>
c001ea2f:	eb 0f                	jmp    c001ea40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001ea31:	8d 76 00             	lea    esi,[esi+0x0]
c001ea34:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001ea3b:	e8 f5 1c ff ff       	call   c0010735 <KePanic(char const*)>
c001ea40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea47:	8d 50 01             	lea    edx,[eax+0x1]
c001ea4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea51:	90                   	nop
c001ea52:	83 c4 1c             	add    esp,0x1c
c001ea55:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ea58 <ACPI::~ACPI()>:
c001ea58:	83 ec 1c             	sub    esp,0x1c
c001ea5b:	ba 48 06 02 c0       	mov    edx,0xc0020648
c001ea60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea64:	89 10                	mov    DWORD PTR [eax],edx
c001ea66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea6a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea6d:	e8 a4 d2 fe ff       	call   c000bd16 <Device::~Device()>
c001ea72:	90                   	nop
c001ea73:	83 c4 1c             	add    esp,0x1c
c001ea76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ea78 <ACPI::~ACPI()>:
c001ea78:	83 ec 1c             	sub    esp,0x1c
c001ea7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea82:	e8 d1 ff ff ff       	call   c001ea58 <ACPI::~ACPI()>
c001ea87:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001ea8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea93:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea96:	e8 31 be fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ea9b:	83 c4 1c             	add    esp,0x1c
c001ea9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001eaa0 <LinkedList<Device>::~LinkedList()>:
c001eaa0:	90                   	nop
c001eaa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001eaa4 <LinkedList<Device>::isEmpty()>:
c001eaa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaaa:	85 c0                	test   eax,eax
c001eaac:	75 0e                	jne    c001eabc <LinkedList<Device>::isEmpty()+0x18>
c001eaae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab5:	85 c0                	test   eax,eax
c001eab7:	75 03                	jne    c001eabc <LinkedList<Device>::isEmpty()+0x18>
c001eab9:	b0 01                	mov    al,0x1
c001eabb:	c3                   	ret    
c001eabc:	b0 00                	mov    al,0x0
c001eabe:	90                   	nop
c001eabf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001eac0 <LinkedList<Device>::getFirstElement()>:
c001eac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eac4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001eac8 <LinkedList<Device>::removeFirst()>:
c001eac8:	83 ec 1c             	sub    esp,0x1c
c001eacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eacf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ead1:	85 c0                	test   eax,eax
c001ead3:	75 13                	jne    c001eae8 <LinkedList<Device>::removeFirst()+0x20>
c001ead5:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001eadc:	e8 54 1c ff ff       	call   c0010735 <KePanic(char const*)>
c001eae1:	e9 8a 00 00 00       	jmp    c001eb70 <LinkedList<Device>::removeFirst()+0xa8>
c001eae6:	66 90                	xchg   ax,ax
c001eae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaef:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eaf5:	85 c0                	test   eax,eax
c001eaf7:	74 0f                	je     c001eb08 <LinkedList<Device>::removeFirst()+0x40>
c001eaf9:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001eb00:	e8 30 1c ff ff       	call   c0010735 <KePanic(char const*)>
c001eb05:	8d 76 00             	lea    esi,[esi+0x0]
c001eb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eb14:	85 c0                	test   eax,eax
c001eb16:	75 30                	jne    c001eb48 <LinkedList<Device>::removeFirst()+0x80>
c001eb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb34:	83 f8 01             	cmp    eax,0x1
c001eb37:	74 23                	je     c001eb5c <LinkedList<Device>::removeFirst()+0x94>
c001eb39:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001eb40:	e8 f0 1b ff ff       	call   c0010735 <KePanic(char const*)>
c001eb45:	eb 15                	jmp    c001eb5c <LinkedList<Device>::removeFirst()+0x94>
c001eb47:	90                   	nop
c001eb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb4e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb58:	89 10                	mov    DWORD PTR [eax],edx
c001eb5a:	66 90                	xchg   ax,ax
c001eb5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb63:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb6d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb70:	83 c4 1c             	add    esp,0x1c
c001eb73:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eb74 <CPU::~CPU()>:
c001eb74:	83 ec 1c             	sub    esp,0x1c
c001eb77:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c001eb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb80:	89 10                	mov    DWORD PTR [eax],edx
c001eb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb86:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb89:	e8 88 d1 fe ff       	call   c000bd16 <Device::~Device()>
c001eb8e:	90                   	nop
c001eb8f:	83 c4 1c             	add    esp,0x1c
c001eb92:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eb94 <CPU::~CPU()>:
c001eb94:	83 ec 1c             	sub    esp,0x1c
c001eb97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb9e:	e8 d1 ff ff ff       	call   c001eb74 <CPU::~CPU()>
c001eba3:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001ebab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebb2:	e8 15 bd fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ebb7:	83 c4 1c             	add    esp,0x1c
c001ebba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ebbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ebbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ebc4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ebc4:	90                   	nop
c001ebc5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ebc8 <ThreadControlBlock::ThreadControlBlock()>:
c001ebc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebcc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ebd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ebde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ebe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ebf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ebff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec03:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ec07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec0b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ec0f:	90                   	nop
c001ec10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ec14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ec14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec54:	90                   	nop
c001ec55:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ec56 <PCI::~PCI()>:
c001ec56:	83 ec 1c             	sub    esp,0x1c
c001ec59:	ba 44 16 02 c0       	mov    edx,0xc0021644
c001ec5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec62:	89 10                	mov    DWORD PTR [eax],edx
c001ec64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec68:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec6b:	e8 44 cb fe ff       	call   c000b7b4 <Bus::~Bus()>
c001ec70:	90                   	nop
c001ec71:	83 c4 1c             	add    esp,0x1c
c001ec74:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ec76 <PCI::~PCI()>:
c001ec76:	83 ec 1c             	sub    esp,0x1c
c001ec79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec80:	e8 d1 ff ff ff       	call   c001ec56 <PCI::~PCI()>
c001ec85:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ec8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec91:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec94:	e8 33 bc fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ec99:	83 c4 1c             	add    esp,0x1c
c001ec9c:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ec9e <IDE::~IDE()>:
c001ec9e:	83 ec 1c             	sub    esp,0x1c
c001eca1:	ba f8 16 02 c0       	mov    edx,0xc00216f8
c001eca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecaa:	89 10                	mov    DWORD PTR [eax],edx
c001ecac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb3:	e8 d4 d4 fe ff       	call   c000c18c <HardDiskController::~HardDiskController()>
c001ecb8:	90                   	nop
c001ecb9:	83 c4 1c             	add    esp,0x1c
c001ecbc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ecbe <IDE::~IDE()>:
c001ecbe:	83 ec 1c             	sub    esp,0x1c
c001ecc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecc8:	e8 d1 ff ff ff       	call   c001ec9e <IDE::~IDE()>
c001eccd:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001ecd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecdc:	e8 eb bb fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ece1:	83 c4 1c             	add    esp,0x1c
c001ece4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ece6 <SATABus::~SATABus()>:
c001ece6:	83 ec 1c             	sub    esp,0x1c
c001ece9:	ba 48 17 02 c0       	mov    edx,0xc0021748
c001ecee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf2:	89 10                	mov    DWORD PTR [eax],edx
c001ecf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecfb:	e8 8c d4 fe ff       	call   c000c18c <HardDiskController::~HardDiskController()>
c001ed00:	90                   	nop
c001ed01:	83 c4 1c             	add    esp,0x1c
c001ed04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ed06 <SATABus::~SATABus()>:
c001ed06:	83 ec 1c             	sub    esp,0x1c
c001ed09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed10:	e8 d1 ff ff ff       	call   c001ece6 <SATABus::~SATABus()>
c001ed15:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001ed1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed24:	e8 a3 bb fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ed29:	83 c4 1c             	add    esp,0x1c
c001ed2c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ed2e <ATA::~ATA()>:
c001ed2e:	83 ec 1c             	sub    esp,0x1c
c001ed31:	ba 88 17 02 c0       	mov    edx,0xc0021788
c001ed36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed3a:	89 10                	mov    DWORD PTR [eax],edx
c001ed3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed40:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed43:	e8 20 d5 fe ff       	call   c000c268 <PhysicalDisk::~PhysicalDisk()>
c001ed48:	90                   	nop
c001ed49:	83 c4 1c             	add    esp,0x1c
c001ed4c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ed4e <ATA::~ATA()>:
c001ed4e:	83 ec 1c             	sub    esp,0x1c
c001ed51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed55:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed58:	e8 d1 ff ff ff       	call   c001ed2e <ATA::~ATA()>
c001ed5d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ed65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed69:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed6c:	e8 5b bb fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ed71:	83 c4 1c             	add    esp,0x1c
c001ed74:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ed76 <ATAPI::~ATAPI()>:
c001ed76:	83 ec 1c             	sub    esp,0x1c
c001ed79:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001ed7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed82:	89 10                	mov    DWORD PTR [eax],edx
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed8b:	e8 d8 d4 fe ff       	call   c000c268 <PhysicalDisk::~PhysicalDisk()>
c001ed90:	90                   	nop
c001ed91:	83 c4 1c             	add    esp,0x1c
c001ed94:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ed96 <ATAPI::~ATAPI()>:
c001ed96:	83 ec 1c             	sub    esp,0x1c
c001ed99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001eda0:	e8 d1 ff ff ff       	call   c001ed76 <ATAPI::~ATAPI()>
c001eda5:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001edad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edb4:	e8 13 bb fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001edb9:	83 c4 1c             	add    esp,0x1c
c001edbc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001edbe <SATA::~SATA()>:
c001edbe:	83 ec 1c             	sub    esp,0x1c
c001edc1:	ba 84 18 02 c0       	mov    edx,0xc0021884
c001edc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edca:	89 10                	mov    DWORD PTR [eax],edx
c001edcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd0:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd3:	e8 90 d4 fe ff       	call   c000c268 <PhysicalDisk::~PhysicalDisk()>
c001edd8:	90                   	nop
c001edd9:	83 c4 1c             	add    esp,0x1c
c001eddc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001edde <SATA::~SATA()>:
c001edde:	83 ec 1c             	sub    esp,0x1c
c001ede1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede8:	e8 d1 ff ff ff       	call   c001edbe <SATA::~SATA()>
c001eded:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001edf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001edfc:	e8 cb ba fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ee01:	83 c4 1c             	add    esp,0x1c
c001ee04:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ee06 <SATAPI::~SATAPI()>:
c001ee06:	83 ec 1c             	sub    esp,0x1c
c001ee09:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001ee0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee12:	89 10                	mov    DWORD PTR [eax],edx
c001ee14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee1b:	e8 48 d4 fe ff       	call   c000c268 <PhysicalDisk::~PhysicalDisk()>
c001ee20:	90                   	nop
c001ee21:	83 c4 1c             	add    esp,0x1c
c001ee24:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ee26 <SATAPI::~SATAPI()>:
c001ee26:	83 ec 1c             	sub    esp,0x1c
c001ee29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee30:	e8 d1 ff ff ff       	call   c001ee06 <SATAPI::~SATAPI()>
c001ee35:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee41:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee44:	e8 83 ba fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ee49:	83 c4 1c             	add    esp,0x1c
c001ee4c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ee4e <IOAPIC::~IOAPIC()>:
c001ee4e:	83 ec 1c             	sub    esp,0x1c
c001ee51:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c001ee56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5a:	89 10                	mov    DWORD PTR [eax],edx
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee63:	e8 ae ce fe ff       	call   c000bd16 <Device::~Device()>
c001ee68:	90                   	nop
c001ee69:	83 c4 1c             	add    esp,0x1c
c001ee6c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ee6e <IOAPIC::~IOAPIC()>:
c001ee6e:	83 ec 1c             	sub    esp,0x1c
c001ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee75:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee78:	e8 d1 ff ff ff       	call   c001ee4e <IOAPIC::~IOAPIC()>
c001ee7d:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee89:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee8c:	e8 3b ba fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ee91:	83 c4 1c             	add    esp,0x1c
c001ee94:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ee98 <APICTimer::~APICTimer()>:
c001ee98:	83 ec 1c             	sub    esp,0x1c
c001ee9b:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c001eea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea4:	89 10                	mov    DWORD PTR [eax],edx
c001eea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeaa:	89 04 24             	mov    DWORD PTR [esp],eax
c001eead:	e8 36 e8 fe ff       	call   c000d6e8 <Timer::~Timer()>
c001eeb2:	90                   	nop
c001eeb3:	83 c4 1c             	add    esp,0x1c
c001eeb6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001eeb8 <APICTimer::~APICTimer()>:
c001eeb8:	83 ec 1c             	sub    esp,0x1c
c001eebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eebf:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec2:	e8 d1 ff ff ff       	call   c001ee98 <APICTimer::~APICTimer()>
c001eec7:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed3:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed6:	e8 f1 b9 fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001eedb:	83 c4 1c             	add    esp,0x1c
c001eede:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001eee0 <PIT::~PIT()>:
c001eee0:	83 ec 1c             	sub    esp,0x1c
c001eee3:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001eee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeec:	89 10                	mov    DWORD PTR [eax],edx
c001eeee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c001eef5:	e8 ee e7 fe ff       	call   c000d6e8 <Timer::~Timer()>
c001eefa:	90                   	nop
c001eefb:	83 c4 1c             	add    esp,0x1c
c001eefe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ef00 <PIT::~PIT()>:
c001ef00:	83 ec 1c             	sub    esp,0x1c
c001ef03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef07:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef0a:	e8 d1 ff ff ff       	call   c001eee0 <PIT::~PIT()>
c001ef0f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ef17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef1e:	e8 a9 b9 fe ff       	call   c000a8cc <operator delete(void*, unsigned long)>
c001ef23:	83 c4 1c             	add    esp,0x1c
c001ef26:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be d5 08 02 c0       	mov    esi,0xc00208d5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be f1 08 02 c0       	mov    esi,0xc00208f1
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
